<org.jsonschema2pojo.rules.ArrayRuleTest: void arrayWithUniqueItemsProducesSet()>/schema#_60
<org.jsonschema2pojo.rules.ArrayRuleTest: void arrayWithNonUniqueItemsProducesList()>/schema#_84
<org.jsonschema2pojo.rules.ArrayRuleTest: void arrayOfPrimitivesProducesCollectionOfWrapperTypes()>/schema#_110
<org.jsonschema2pojo.rules.ArrayRuleTest: void arrayDefaultsToNonUnique()>/schema#_137
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack41
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack40
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack46
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack52
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack57
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack62
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack41
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack40
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack46
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack52
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack57
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack62
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack65
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack64
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack70
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack76
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack82
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack88
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testNotUsed()>/$stack29
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testNotUsed()>/$stack28
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testNotUsed()>/$stack33
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testNotUsed()>/$stack38
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testNotUsed()>/$stack45
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void jsrDisable()>/$stack9
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void jsrDisable()>/$stack8
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void jsrDisable()>/$stack13
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void jsrDisable()>/$stack18
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void jsrDisable()>/$stack25
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void jsrDisable()>/$stack30
<org.jsonschema2pojo.rules.EnumRuleTest: void applyGeneratesUniqueEnumNamesForMultipleEnumNodesWithSameName()>/$stack38
<org.jsonschema2pojo.rules.EnumRuleTest: void applyGeneratesUniqueEnumNamesForMultipleEnumNodesWithSameName()>/$stack45
<org.jsonschema2pojo.rules.EnumRuleTest: void applyGeneratesUniqueEnumNamesForMultipleEnumNodesWithSameName()>/$stack48
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack62
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack61
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack67
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack73
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack79
<org.jsonschema2pojo.rules.DigitsRuleTest: void testNotUsed()>/$stack29
<org.jsonschema2pojo.rules.DigitsRuleTest: void testNotUsed()>/$stack28
<org.jsonschema2pojo.rules.DigitsRuleTest: void testNotUsed()>/$stack33
<org.jsonschema2pojo.rules.DigitsRuleTest: void testNotUsed()>/$stack38
<org.jsonschema2pojo.rules.DigitsRuleTest: void jsrDisable()>/$stack9
<org.jsonschema2pojo.rules.DigitsRuleTest: void jsrDisable()>/$stack8
<org.jsonschema2pojo.rules.DigitsRuleTest: void jsrDisable()>/$stack13
<org.jsonschema2pojo.rules.DigitsRuleTest: void jsrDisable()>/$stack18
<org.jsonschema2pojo.rules.PatternRuleTest: void testRegex()>/$stack27
<org.jsonschema2pojo.rules.PatternRuleTest: void testRegex()>/$stack26
<org.jsonschema2pojo.rules.PatternRuleTest: void testRegex()>/$stack32
<org.jsonschema2pojo.rules.PatternRuleTest: void testRegex()>/$stack38
<org.jsonschema2pojo.rules.PatternRuleTest: void jsrDisable()>/$stack9
<org.jsonschema2pojo.rules.PatternRuleTest: void jsrDisable()>/$stack8
<org.jsonschema2pojo.rules.PatternRuleTest: void jsrDisable()>/$stack13
<org.jsonschema2pojo.rules.PatternRuleTest: void jsrDisable()>/$stack18
<org.jsonschema2pojo.rules.SchemaRuleTest: void refsToOtherSchemasAreLoaded()>/mockTypeRule#_63
<org.jsonschema2pojo.rules.SchemaRuleTest: void enumAsRootIsGeneratedCorrectly()>/schema#_91
<org.jsonschema2pojo.rules.SchemaRuleTest: void enumAsRootIsGeneratedCorrectly()>/enumRule#_96
<org.jsonschema2pojo.rules.SchemaRuleTest: void existingTypeIsUsedWhenTypeIsAlreadyGenerated()>/previouslyGeneratedType#_111
<org.jsonschema2pojo.AnnotatorFactoryTest: void canCreateCompositeAnnotator()>/annotator1#_54
<org.jsonschema2pojo.AnnotatorFactoryTest: void canCreateCompositeAnnotator()>/annotator2#_55
<org.jsonschema2pojo.SchemaMapperTest: void generateReadsSchemaAsObject()>/mockSchemaRule#_46
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromExampleJsonWhenInJsonMode()>/mockSchemaRule#_73
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromExampleJSONAsStringInput()>/mockSchemaRule#_102
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromSchemaAsStringInput()>/mockSchemaRule#_128
<org.jsonschema2pojo.rules.RuleFactoryImplTest: void generationConfigIsReturned()>/mockGenerationConfig#_80
<org.jsonschema2pojo.rules.RuleFactoryImplTest: void generationConfigIsReturned()>/mockRuleLogger#_81
<org.jsonschema2pojo.rules.RuleFactoryImplTest: void generationRuleLoggerIsReturned()>/mockRuleLogger#_94
<org.jsonschema2pojo.rules.RuleFactoryImplTest: void schemaStoreIsReturned()>/mockSchemaStore#_105
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesDate()>/mockDateType#_79
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesArray()>/mockArrayType#_559
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesCustomObject()>/mockObjectType#_577
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMinLength()>/$stack42
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMinLength()>/$stack41
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMinLength()>/$stack47
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMinLength()>/$stack53
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMinLength()>/$stack58
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxLength()>/$stack42
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxLength()>/$stack41
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxLength()>/$stack47
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxLength()>/$stack53
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxLength()>/$stack58
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/$stack62
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/$stack61
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/$stack67
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/$stack73
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/$stack79
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack66
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack65
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack71
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack77
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack83
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testNotUsed()>/$stack29
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testNotUsed()>/$stack28
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testNotUsed()>/$stack33
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testNotUsed()>/$stack38
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void jsrDisable()>/$stack9
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void jsrDisable()>/$stack8
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void jsrDisable()>/$stack13
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void jsrDisable()>/$stack18
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMinLength()>/$stack42
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMinLength()>/$stack41
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMinLength()>/$stack47
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMinLength()>/$stack53
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMinLength()>/$stack58
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxLength()>/$stack42
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxLength()>/$stack41
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxLength()>/$stack47
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxLength()>/$stack53
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxLength()>/$stack58
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/$stack62
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/$stack61
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/$stack67
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/$stack73
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/$stack79
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack66
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack65
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack71
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack77
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack83
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testNotUsed()>/$stack29
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testNotUsed()>/$stack28
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testNotUsed()>/$stack33
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testNotUsed()>/$stack38
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void jsrDisable()>/$stack9
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void jsrDisable()>/$stack8
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void jsrDisable()>/$stack13
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void jsrDisable()>/$stack18
<org.jsonschema2pojo.SchemaStoreTest: void setIfEmptyOnlySetsIfEmpty()>/firstClass#_152
<org.jsonschema2pojo.SchemaStoreTest: void setIfEmptyOnlySetsIfEmpty()>/secondClass#_153
<org.jsonschema2pojo.rules.ArrayRuleTest: void <init>()>/$stack6
<org.jsonschema2pojo.rules.FormatRulePrimitivesTest: void <init>(java.lang.Class,java.lang.Class)>/$stack21
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void setUp()>/$stack4
<org.jsonschema2pojo.rules.EnumRuleTest: void <init>()>/$stack14
<org.jsonschema2pojo.rules.DigitsRuleTest: void setUp()>/$stack4
<org.jsonschema2pojo.rules.PatternRuleTest: void setUp()>/$stack4
<org.jsonschema2pojo.rules.SchemaRuleTest: void <init>()>/$stack4
<org.jsonschema2pojo.util.NameHelperTest: org.jsonschema2pojo.util.NameHelper helper(boolean)>/config#_75
<org.jsonschema2pojo.SchemaMapperTest: void generateReadsSchemaAsObject()>/mockRuleFactory#_48
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromExampleJsonWhenInJsonMode()>/mockRuleFactory#_81
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromExampleJsonWhenInJsonMode()>/mockSchemaGenerator#_78
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromExampleJSONAsStringInput()>/mockRuleFactory#_110
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromExampleJSONAsStringInput()>/mockSchemaGenerator#_107
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromSchemaAsStringInput()>/mockRuleFactory#_130
<org.jsonschema2pojo.rules.TypeRuleTest: void <init>()>/$stack6
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void setUp()>/$stack4
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void setUp()>/$stack4
<org.jsonschema2pojo.rules.FormatRuleTest: void <init>(java.lang.String,java.lang.Class)>/$stack8
<org.jsonschema2pojo.rules.FormatRuleJodaTest: void setupConfig()>/$stack22
<org.jsonschema2pojo.rules.FormatRuleArraysTest: void <init>(java.lang.String,java.lang.Class)>/$stack13
<org.jsonschema2pojo.rules.PropertyRuleTest: void <init>()>/$stack6
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack44
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack44
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack68
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testNotUsed()>/$stack32
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void jsrDisable()>/$stack12
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack65
<org.jsonschema2pojo.rules.DigitsRuleTest: void testNotUsed()>/$stack32
<org.jsonschema2pojo.rules.DigitsRuleTest: void jsrDisable()>/$stack12
<org.jsonschema2pojo.rules.PatternRuleTest: void testRegex()>/$stack30
<org.jsonschema2pojo.rules.PatternRuleTest: void jsrDisable()>/$stack12
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMinLength()>/$stack45
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxLength()>/$stack45
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/$stack65
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack69
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testNotUsed()>/$stack32
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void jsrDisable()>/$stack12
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMinLength()>/$stack45
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxLength()>/$stack45
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/$stack65
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack69
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testNotUsed()>/$stack32
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void jsrDisable()>/$stack12
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack19
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack24
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack19
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack24
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack28
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/maxSubNode#_141
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack37
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack42
<org.jsonschema2pojo.rules.EnumRuleTest: void wireUpConfig()>/$stack4
<org.jsonschema2pojo.rules.EnumRuleTest: void wireUpConfig()>/$stack9
<org.jsonschema2pojo.rules.EnumRuleTest: void wireUpConfig()>/$stack14
<org.jsonschema2pojo.rules.EnumRuleTest: void wireUpConfig()>/$stack19
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack29
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack34
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack39
<org.jsonschema2pojo.rules.PatternRuleTest: void testRegex()>/$stack16
<org.jsonschema2pojo.rules.SchemaRuleTest: void refsToOtherSchemasAreLoaded()>/mockGenerationConfig#_60
<org.jsonschema2pojo.rules.SchemaRuleTest: void existingTypeIsUsedWhenTypeIsAlreadyGenerated()>/mockGenerationConfig#_119
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromExampleJsonWhenInJsonMode()>/mockGenerationConfig#_75
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromExampleJSONAsStringInput()>/mockGenerationConfig#_104
<org.jsonschema2pojo.rules.TypeRuleTest: void wireUpConfig()>/$stack4
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesDate()>/mockFormatRule#_80
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesArray()>/mockArrayRule#_560
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesCustomObject()>/mockObjectRule#_578
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMinLength()>/$stack20
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMinLength()>/$stack25
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxLength()>/$stack20
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxLength()>/$stack25
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/$stack30
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/maxSubNode#_136
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/$stack39
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack30
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/maxSubNode#_159
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack39
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMinLength()>/$stack20
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMinLength()>/$stack25
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxLength()>/$stack20
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxLength()>/$stack25
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/$stack30
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/maxSubNode#_136
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/$stack39
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack30
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/maxSubNode#_159
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack39
<org.jsonschema2pojo.rules.RequiredArrayRuleTest: void setupRuleFactoryToIncludeJsr303()>/config#_93
<org.jsonschema2pojo.rules.PropertyRuleTest: org.jsonschema2pojo.Schema getMockedSchema(com.fasterxml.jackson.databind.node.ObjectNode)>/schema#_63
<org.jsonschema2pojo.rules.FormatRulePrimitivesTest: void <init>(java.lang.Class,java.lang.Class)>/$stack3
<org.jsonschema2pojo.rules.FormatRulePrimitivesTest: void <init>(java.lang.Class,java.lang.Class)>/$stack4
<org.jsonschema2pojo.util.LanguageFeaturesTest: org.jsonschema2pojo.GenerationConfig mockConfig(java.lang.String)>/$stack2
<org.jsonschema2pojo.util.LanguageFeaturesTest: org.jsonschema2pojo.GenerationConfig mockConfig(java.lang.String)>/config#_90
<org.jsonschema2pojo.util.NameHelperTest: org.jsonschema2pojo.util.NameHelper helper(boolean)>/$stack3
<org.jsonschema2pojo.SourceSortOrderTest: void testTwoFilesAreCompared(java.util.Comparator)>/$stack8
<org.jsonschema2pojo.SourceSortOrderTest: void testTwoFilesAreCompared(java.util.Comparator)>/$stack9
<org.jsonschema2pojo.SourceSortOrderTest: void testTwoDirectoriesAreCompared(java.util.Comparator)>/$stack8
<org.jsonschema2pojo.SourceSortOrderTest: void testTwoDirectoriesAreCompared(java.util.Comparator)>/$stack9
<org.jsonschema2pojo.SourceSortOrderTest: java.io.File mockFile(boolean)>/$stack3
<org.jsonschema2pojo.SourceSortOrderTest: java.io.File mockFile(boolean)>/mockFile#_102
<org.jsonschema2pojo.rules.FormatRuleTest: void <init>(java.lang.String,java.lang.Class)>/$stack3
<org.jsonschema2pojo.rules.FormatRuleTest: void <init>(java.lang.String,java.lang.Class)>/$stack4
<org.jsonschema2pojo.rules.FormatRuleJodaTest: void <init>(java.lang.String,java.lang.Class)>/$stack3
<org.jsonschema2pojo.rules.FormatRuleJodaTest: void <init>(java.lang.String,java.lang.Class)>/$stack4
<org.jsonschema2pojo.rules.FormatRuleArraysTest: void <init>(java.lang.String,java.lang.Class)>/$stack3
<org.jsonschema2pojo.rules.FormatRuleArraysTest: void <init>(java.lang.String,java.lang.Class)>/$stack4
<org.jsonschema2pojo.rules.PropertyRuleTest: org.jsonschema2pojo.Schema getMockedSchema(com.fasterxml.jackson.databind.node.ObjectNode)>/$stack3
<org.jsonschema2pojo.rules.SchemaRuleTest: void refsToOtherSchemasAreLoaded()>/$stack19
<org.jsonschema2pojo.rules.SchemaRuleTest: void refsToOtherSchemasAreLoaded()>/$stack23
<org.jsonschema2pojo.rules.SchemaRuleTest: void refsToOtherSchemasAreLoaded()>/$stack41
<org.jsonschema2pojo.rules.SchemaRuleTest: void refsToOtherSchemasAreLoaded()>/$stack42
<org.jsonschema2pojo.rules.SchemaRuleTest: void enumAsRootIsGeneratedCorrectly()>/$stack14
<org.jsonschema2pojo.rules.SchemaRuleTest: void enumAsRootIsGeneratedCorrectly()>/$stack37
<org.jsonschema2pojo.rules.SchemaRuleTest: void enumAsRootIsGeneratedCorrectly()>/$stack38
<org.jsonschema2pojo.rules.SchemaRuleTest: void enumAsRootIsGeneratedCorrectly()>/$stack23
<org.jsonschema2pojo.rules.SchemaRuleTest: void enumAsRootIsGeneratedCorrectly()>/$stack33
<org.jsonschema2pojo.rules.SchemaRuleTest: void enumAsRootIsGeneratedCorrectly()>/$stack34
<org.jsonschema2pojo.rules.SchemaRuleTest: void existingTypeIsUsedWhenTypeIsAlreadyGenerated()>/$stack14
<org.jsonschema2pojo.rules.SchemaRuleTest: void existingTypeIsUsedWhenTypeIsAlreadyGenerated()>/$stack8
<org.jsonschema2pojo.SchemaMapperTest: void generateReadsSchemaAsObject()>/$stack6
<org.jsonschema2pojo.SchemaMapperTest: void generateReadsSchemaAsObject()>/$stack23
<org.jsonschema2pojo.SchemaMapperTest: void generateReadsSchemaAsObject()>/$stack24
<org.jsonschema2pojo.SchemaMapperTest: void generateReadsSchemaAsObject()>/$stack7
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromExampleJsonWhenInJsonMode()>/$stack12
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromExampleJsonWhenInJsonMode()>/$stack33
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromExampleJsonWhenInJsonMode()>/$stack34
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromExampleJsonWhenInJsonMode()>/$stack13
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromExampleJsonWhenInJsonMode()>/$stack18
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromExampleJsonWhenInJsonMode()>/$stack22
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromExampleJSONAsStringInput()>/$stack13
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromExampleJSONAsStringInput()>/$stack36
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromExampleJSONAsStringInput()>/$stack37
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromExampleJSONAsStringInput()>/$stack14
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromExampleJSONAsStringInput()>/$stack19
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromExampleJSONAsStringInput()>/$stack25
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromSchemaAsStringInput()>/$stack9
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromSchemaAsStringInput()>/$stack24
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromSchemaAsStringInput()>/$stack25
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromSchemaAsStringInput()>/$stack10
<org.jsonschema2pojo.SchemaStoreTest: void setIfEmptyOnlySetsIfEmpty()>/$stack5
<org.jsonschema2pojo.SchemaStoreTest: void setIfEmptyOnlySetsIfEmpty()>/$stack6
<org.jsonschema2pojo.rules.ArrayRuleTest: void arrayWithUniqueItemsProducesSet()>/$stack20
<org.jsonschema2pojo.rules.ArrayRuleTest: void arrayWithNonUniqueItemsProducesList()>/$stack20
<org.jsonschema2pojo.rules.ArrayRuleTest: void arrayOfPrimitivesProducesCollectionOfWrapperTypes()>/$stack20
<org.jsonschema2pojo.rules.ArrayRuleTest: void arrayDefaultsToNonUnique()>/$stack20
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack48
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack49
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack59
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack60
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack54
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack55
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack64
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack65
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack48
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack49
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack59
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack60
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack54
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack55
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack64
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack65
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack17
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack72
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack73
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack84
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack85
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack78
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack79
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack90
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack91
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testNotUsed()>/$stack35
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testNotUsed()>/$stack36
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testNotUsed()>/$stack40
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testNotUsed()>/$stack41
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testNotUsed()>/$stack47
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testNotUsed()>/$stack48
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void jsrDisable()>/$stack15
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void jsrDisable()>/$stack16
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void jsrDisable()>/$stack27
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void jsrDisable()>/$stack28
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void jsrDisable()>/$stack20
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void jsrDisable()>/$stack21
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void jsrDisable()>/$stack32
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void jsrDisable()>/$stack33
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack69
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack70
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack75
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack76
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack81
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack82
<org.jsonschema2pojo.rules.DigitsRuleTest: void testNotUsed()>/$stack35
<org.jsonschema2pojo.rules.DigitsRuleTest: void testNotUsed()>/$stack36
<org.jsonschema2pojo.rules.DigitsRuleTest: void testNotUsed()>/$stack40
<org.jsonschema2pojo.rules.DigitsRuleTest: void testNotUsed()>/$stack41
<org.jsonschema2pojo.rules.DigitsRuleTest: void jsrDisable()>/$stack15
<org.jsonschema2pojo.rules.DigitsRuleTest: void jsrDisable()>/$stack16
<org.jsonschema2pojo.rules.DigitsRuleTest: void jsrDisable()>/$stack20
<org.jsonschema2pojo.rules.DigitsRuleTest: void jsrDisable()>/$stack21
<org.jsonschema2pojo.rules.PatternRuleTest: void testRegex()>/$stack34
<org.jsonschema2pojo.rules.PatternRuleTest: void testRegex()>/$stack35
<org.jsonschema2pojo.rules.PatternRuleTest: void testRegex()>/$stack40
<org.jsonschema2pojo.rules.PatternRuleTest: void testRegex()>/$stack41
<org.jsonschema2pojo.rules.PatternRuleTest: void jsrDisable()>/$stack15
<org.jsonschema2pojo.rules.PatternRuleTest: void jsrDisable()>/$stack16
<org.jsonschema2pojo.rules.PatternRuleTest: void jsrDisable()>/$stack20
<org.jsonschema2pojo.rules.PatternRuleTest: void jsrDisable()>/$stack21
<org.jsonschema2pojo.AnnotatorFactoryTest: void canCreateCompositeAnnotator()>/$stack4
<org.jsonschema2pojo.AnnotatorFactoryTest: void canCreateCompositeAnnotator()>/$stack5
<org.jsonschema2pojo.rules.RuleFactoryImplTest: void generationConfigIsReturned()>/$stack4
<org.jsonschema2pojo.rules.RuleFactoryImplTest: void generationConfigIsReturned()>/$stack5
<org.jsonschema2pojo.rules.RuleFactoryImplTest: void generationRuleLoggerIsReturned()>/$stack4
<org.jsonschema2pojo.rules.RuleFactoryImplTest: void generationRuleLoggerIsReturned()>/mockGenerationConfig#_93
<org.jsonschema2pojo.rules.RuleFactoryImplTest: void generationRuleLoggerIsReturned()>/$stack5
<org.jsonschema2pojo.rules.RuleFactoryImplTest: void schemaStoreIsReturned()>/$stack3
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesDate()>/$stack18
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesDate()>/$stack17
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesArray()>/$stack14
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesArray()>/$stack15
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesCustomObject()>/$stack14
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesCustomObject()>/$stack15
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMinLength()>/$stack49
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMinLength()>/$stack50
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMinLength()>/$stack55
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMinLength()>/$stack56
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMinLength()>/$stack60
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMinLength()>/$stack61
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxLength()>/$stack49
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxLength()>/$stack50
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxLength()>/$stack55
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxLength()>/$stack56
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxLength()>/$stack60
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxLength()>/$stack61
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/$stack15
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/$stack69
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/$stack70
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/$stack75
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/$stack76
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/$stack81
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/$stack82
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack15
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack73
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack74
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack79
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack80
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack85
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack86
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testNotUsed()>/$stack35
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testNotUsed()>/$stack36
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testNotUsed()>/$stack40
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testNotUsed()>/$stack41
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void jsrDisable()>/$stack15
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void jsrDisable()>/$stack16
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void jsrDisable()>/$stack20
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void jsrDisable()>/$stack21
<org.jsonschema2pojo.SourceSortOrderTest: void filesBeforeDirectories_FILES_FIRST()>/$stack17
<org.jsonschema2pojo.SourceSortOrderTest: void filesBeforeDirectories_FILES_FIRST()>/$stack18
<org.jsonschema2pojo.SourceSortOrderTest: void filesBeforeDirectories_FILES_FIRST()>/$stack23
<org.jsonschema2pojo.SourceSortOrderTest: void filesBeforeDirectories_FILES_FIRST()>/$stack24
<org.jsonschema2pojo.SourceSortOrderTest: void filesBeforeDirectories_SUBDIRS_FIRST()>/$stack17
<org.jsonschema2pojo.SourceSortOrderTest: void filesBeforeDirectories_SUBDIRS_FIRST()>/$stack18
<org.jsonschema2pojo.SourceSortOrderTest: void filesBeforeDirectories_SUBDIRS_FIRST()>/$stack23
<org.jsonschema2pojo.SourceSortOrderTest: void filesBeforeDirectories_SUBDIRS_FIRST()>/$stack24
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMinLength()>/$stack49
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMinLength()>/$stack50
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMinLength()>/$stack55
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMinLength()>/$stack56
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMinLength()>/$stack60
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMinLength()>/$stack61
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxLength()>/$stack49
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxLength()>/$stack50
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxLength()>/$stack55
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxLength()>/$stack56
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxLength()>/$stack60
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxLength()>/$stack61
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/$stack15
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/$stack69
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/$stack70
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/$stack75
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/$stack76
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/$stack81
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/$stack82
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack15
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack73
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack74
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack79
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack80
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack85
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack86
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testNotUsed()>/$stack35
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testNotUsed()>/$stack36
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testNotUsed()>/$stack40
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testNotUsed()>/$stack41
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void jsrDisable()>/$stack15
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void jsrDisable()>/$stack16
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void jsrDisable()>/$stack20
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void jsrDisable()>/$stack21
<org.jsonschema2pojo.rules.ArrayRuleTest: void <init>()>/$stack1
<org.jsonschema2pojo.rules.ArrayRuleTest: void <init>()>/$stack2
<org.jsonschema2pojo.rules.EnumRuleTest: void <init>()>/$stack1
<org.jsonschema2pojo.rules.EnumRuleTest: void <init>()>/$stack2
<org.jsonschema2pojo.rules.EnumRuleTest: void <init>()>/$stack3
<org.jsonschema2pojo.rules.EnumRuleTest: void <init>()>/$stack4
<org.jsonschema2pojo.rules.EnumRuleTest: void <init>()>/$stack5
<org.jsonschema2pojo.rules.EnumRuleTest: void <init>()>/$stack6
<org.jsonschema2pojo.rules.EnumRuleTest: void <init>()>/$stack7
<org.jsonschema2pojo.rules.EnumRuleTest: void <init>()>/$stack8
<org.jsonschema2pojo.rules.EnumRuleTest: void <init>()>/$stack9
<org.jsonschema2pojo.rules.EnumRuleTest: void <init>()>/$stack10
<org.jsonschema2pojo.rules.EnumRuleTest: void <init>()>/$stack11
<org.jsonschema2pojo.rules.EnumRuleTest: void <init>()>/$stack12
<org.jsonschema2pojo.rules.SchemaRuleTest: void <init>()>/$stack1
<org.jsonschema2pojo.rules.SchemaRuleTest: void <init>()>/$stack2
<org.jsonschema2pojo.rules.TypeRuleTest: void <init>()>/$stack1
<org.jsonschema2pojo.rules.TypeRuleTest: void <init>()>/$stack2
<org.jsonschema2pojo.rules.TypeRuleTest: void <init>()>/$stack3
<org.jsonschema2pojo.rules.TypeRuleTest: void <init>()>/$stack4
<org.jsonschema2pojo.rules.RequiredArrayRuleTest: void setupRuleFactoryToIncludeJsr303()>/$stack3
<org.jsonschema2pojo.rules.PropertyRuleTest: void <init>()>/$stack1
<org.jsonschema2pojo.rules.PropertyRuleTest: void <init>()>/$stack2
<org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>/$stack3
<org.mockito.Mockito: java.lang.Object verify(java.lang.Object,org.mockito.verification.VerificationMode)>/$stack3
<org.jsonschema2pojo.rules.ArrayRuleTest: void arrayWithNonUniqueItemsProducesList()>/$stack30
<org.jsonschema2pojo.rules.ArrayRuleTest: void arrayOfPrimitivesProducesCollectionOfWrapperTypes()>/$stack30
<org.jsonschema2pojo.rules.ArrayRuleTest: void arrayOfPrimitivesProducesCollectionOfWrapperTypes()>/$stack36
<org.jsonschema2pojo.rules.FormatRulePrimitivesTest: void <init>(java.lang.Class,java.lang.Class)>/$stack5
<org.jsonschema2pojo.rules.FormatRulePrimitivesTest: void <init>(java.lang.Class,java.lang.Class)>/$stack11
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack3
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack16
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack26
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack12
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack21
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack32
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack3
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack16
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack26
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack12
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack21
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack32
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack5
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack25
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack30
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack44
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack50
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack18
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack34
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack39
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack56
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testNotUsed()>/$stack2
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testNotUsed()>/$stack8
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testNotUsed()>/$stack14
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testNotUsed()>/$stack20
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void jsrDisable()>/$stack2
<org.jsonschema2pojo.rules.EnumRuleTest: void wireUpConfig()>/$stack1
<org.jsonschema2pojo.rules.EnumRuleTest: void wireUpConfig()>/$stack6
<org.jsonschema2pojo.rules.EnumRuleTest: void wireUpConfig()>/$stack11
<org.jsonschema2pojo.rules.EnumRuleTest: void wireUpConfig()>/$stack16
<org.jsonschema2pojo.rules.EnumRuleTest: void applyGeneratesUniqueEnumNamesForMultipleEnumNodesWithSameName()>/$stack9
<org.jsonschema2pojo.rules.EnumRuleTest: void applyGeneratesUniqueEnumNamesForMultipleEnumNodesWithSameName()>/$stack16
<org.jsonschema2pojo.rules.EnumRuleTest: void applyGeneratesUniqueEnumNamesForMultipleEnumNodesWithSameName()>/$stack21
<org.jsonschema2pojo.rules.EnumRuleTest: void applyGeneratesUniqueEnumNamesForMultipleEnumNodesWithSameName()>/$stack39
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack4
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack26
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack31
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack41
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack47
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack14
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack20
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack36
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack53
<org.jsonschema2pojo.rules.DigitsRuleTest: void testNotUsed()>/$stack2
<org.jsonschema2pojo.rules.DigitsRuleTest: void testNotUsed()>/$stack8
<org.jsonschema2pojo.rules.DigitsRuleTest: void testNotUsed()>/$stack14
<org.jsonschema2pojo.rules.DigitsRuleTest: void testNotUsed()>/$stack20
<org.jsonschema2pojo.rules.DigitsRuleTest: void jsrDisable()>/$stack2
<org.jsonschema2pojo.rules.PatternRuleTest: void testRegex()>/$stack3
<org.jsonschema2pojo.rules.PatternRuleTest: void testRegex()>/$stack9
<org.jsonschema2pojo.rules.PatternRuleTest: void testRegex()>/$stack13
<org.jsonschema2pojo.rules.PatternRuleTest: void testRegex()>/$stack18
<org.jsonschema2pojo.rules.PatternRuleTest: void jsrDisable()>/$stack2
<org.jsonschema2pojo.rules.SchemaRuleTest: void refsToOtherSchemasAreLoaded()>/$stack24
<org.jsonschema2pojo.rules.SchemaRuleTest: void refsToOtherSchemasAreLoaded()>/$stack28
<org.jsonschema2pojo.rules.SchemaRuleTest: void refsToOtherSchemasAreLoaded()>/$stack33
<org.jsonschema2pojo.rules.SchemaRuleTest: void enumAsRootIsGeneratedCorrectly()>/$stack24
<org.jsonschema2pojo.rules.SchemaRuleTest: void existingTypeIsUsedWhenTypeIsAlreadyGenerated()>/$stack18
<org.jsonschema2pojo.rules.SchemaRuleTest: void existingTypeIsUsedWhenTypeIsAlreadyGenerated()>/$stack22
<org.jsonschema2pojo.rules.TypeRuleTest: void wireUpConfig()>/$stack1
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesDate()>/$stack32
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesIntegerPrimitive()>/$stack12
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesIntegerUsingJavaTypeIntegerPrimitive()>/$stack13
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesBigInteger()>/$stack12
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesBigIntegerOverridingLong()>/$stack12
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesBigIntegerOverridingLong()>/$stack18
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesBigDecimal()>/$stack12
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesBigDecimalOverridingDouble()>/$stack12
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesBigDecimalOverridingDouble()>/$stack18
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesIntegerUsingJavaTypeInteger()>/$stack13
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesIntegerUsingJavaTypeLongPrimitive()>/$stack13
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesIntegerUsingJavaTypeLong()>/$stack13
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesIntegerUsingJavaTypeLongPrimitiveWhenMaximumGreaterThanIntegerMax()>/$stack13
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesIntegerUsingJavaTypeLongWhenMaximumGreaterThanIntegerMax()>/$stack13
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesIntegerUsingJavaTypeLongPrimitiveWhenMaximumLessThanIntegerMin()>/$stack13
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesIntegerUsingJavaTypeLongWhenMaximumLessThanIntegerMin()>/$stack13
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesIntegerUsingJavaTypeLongPrimitiveWhenMinimumLessThanIntegerMin()>/$stack13
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesIntegerUsingJavaTypeLongWhenMinimumLessThanIntegerMin()>/$stack13
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesIntegerUsingJavaTypeLongPrimitiveWhenMinimumGreaterThanIntegerMax()>/$stack13
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesIntegerUsingJavaTypeLongWhenMinimumGreaterThanIntegerMax()>/$stack13
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesNumber()>/$stack12
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesNumberPrimitive()>/$stack12
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesNumberPrimitive()>/$stack18
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesNumberUsingJavaTypeFloatPrimitive()>/$stack13
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesNumberUsingJavaTypeFloat()>/$stack13
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesNumberUsingJavaTypeDoublePrimitive()>/$stack13
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesNumberUsingJavaTypeDouble()>/$stack13
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesBooleanPrimitive()>/$stack12
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesArray()>/$stack19
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesCustomObject()>/$stack19
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMinLength()>/$stack3
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMinLength()>/$stack17
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMinLength()>/$stack27
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMinLength()>/$stack11
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMinLength()>/$stack22
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMinLength()>/$stack33
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxLength()>/$stack3
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxLength()>/$stack17
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxLength()>/$stack27
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxLength()>/$stack11
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxLength()>/$stack22
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxLength()>/$stack33
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/$stack5
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/$stack27
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/$stack32
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/$stack41
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/$stack47
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/$stack16
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/$stack36
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/$stack53
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack5
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack27
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack32
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack41
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack47
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack16
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack36
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack53
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testNotUsed()>/$stack2
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testNotUsed()>/$stack8
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testNotUsed()>/$stack14
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testNotUsed()>/$stack20
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void jsrDisable()>/$stack2
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMinLength()>/$stack3
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMinLength()>/$stack17
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMinLength()>/$stack27
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMinLength()>/$stack11
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMinLength()>/$stack22
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMinLength()>/$stack33
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxLength()>/$stack3
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxLength()>/$stack17
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxLength()>/$stack27
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxLength()>/$stack11
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxLength()>/$stack22
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxLength()>/$stack33
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/$stack5
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/$stack27
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/$stack32
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/$stack41
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/$stack47
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/$stack16
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/$stack36
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/$stack53
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack5
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack27
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack32
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack41
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack47
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack16
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack36
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack53
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testNotUsed()>/$stack2
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testNotUsed()>/$stack8
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testNotUsed()>/$stack14
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testNotUsed()>/$stack20
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void jsrDisable()>/$stack2
<org.jsonschema2pojo.rules.FormatRuleJodaTest: void setupConfig()>/$stack1
<org.jsonschema2pojo.rules.FormatRuleJodaTest: void setupConfig()>/$stack7
<org.jsonschema2pojo.rules.FormatRuleJodaTest: void setupConfig()>/$stack13
<org.jsonschema2pojo.rules.FormatRuleArraysTest: void <init>(java.lang.String,java.lang.Class)>/$stack5
<org.jsonschema2pojo.rules.PropertyRuleTest: void setup()>/$stack2
<org.jsonschema2pojo.rules.PropertyRuleTest: void setup()>/$stack8
