<org.jsonschema2pojo.rules.DynamicPropertiesRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/$stack25
<org.jsonschema2pojo.rules.DynamicPropertiesRule: com.sun.codemodel.JMethod addInternalGetMethodJava6(com.sun.codemodel.JDefinedClass,com.fasterxml.jackson.databind.JsonNode)>/propertyType#_220
<org.jsonschema2pojo.rules.BuilderRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/builderClassName#5#_72
<org.jsonschema2pojo.rules.BuilderRule: void generateNoArgsBaseBuilderConstructor(com.sun.codemodel.JDefinedClass,com.sun.codemodel.JDefinedClass,com.sun.codemodel.JDefinedClass)>/parentClass#_145
<org.jsonschema2pojo.rules.BuilderRule: void generateNoArgsBaseBuilderConstructor(com.sun.codemodel.JDefinedClass,com.sun.codemodel.JDefinedClass,com.sun.codemodel.JDefinedClass)>/$stack29
<org.jsonschema2pojo.util.ReflectionHelper: com.sun.codemodel.JFieldVar searchSuperClassesForField(java.lang.String,com.sun.codemodel.JDefinedClass)>/superClass#_88
<org.jsonschema2pojo.rules.SchemaRule: java.lang.String nameFromRef(java.lang.String)>/$stack12
<org.jsonschema2pojo.rules.PropertiesRule: void addOverrideBuilder(com.sun.codemodel.JDefinedClass,com.sun.codemodel.JMethod,com.sun.codemodel.JVar)>/$stack17
<org.jsonschema2pojo.rules.ConstructorRule: void generateFieldsBuilderConstructor(com.sun.codemodel.JDefinedClass,com.sun.codemodel.JDefinedClass,com.sun.codemodel.JDefinedClass,com.sun.codemodel.JMethod)>/$stack37
<org.jsonschema2pojo.rules.ConstructorRule: com.sun.codemodel.JMethod generateFieldsConstructor(com.sun.codemodel.JDefinedClass,java.util.Set,java.util.Set)>/$stack64
<org.jsonschema2pojo.rules.ConstructorRule: com.sun.codemodel.JMethod generateFieldsConstructor(com.sun.codemodel.JDefinedClass,java.util.Set,java.util.Set)>/$stack47
<org.jsonschema2pojo.util.LanguageFeaturesTest: void correctTestForJava7()>/$stack2
<org.jsonschema2pojo.util.LanguageFeaturesTest: void correctTestForJava8()>/$stack2
<org.jsonschema2pojo.rules.RequiredArrayRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/$stack33
<org.jsonschema2pojo.rules.DefaultRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/$stack30
<org.jsonschema2pojo.rules.DefaultRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/$stack27
<org.jsonschema2pojo.rules.DefaultRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/$stack24
<org.jsonschema2pojo.rules.DefaultRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/$stack19
<org.jsonschema2pojo.rules.DefaultRule: com.sun.codemodel.JExpression getDefaultEnum(com.sun.codemodel.JType,java.lang.String)>/backingType#_253
<org.jsonschema2pojo.rules.PropertyRuleTest: com.sun.codemodel.JDefinedClass applyRule(com.fasterxml.jackson.databind.node.ObjectNode,com.fasterxml.jackson.databind.node.ObjectNode)>/$stack9
<org.jsonschema2pojo.rules.EnumRule: void addEnumConstants(org.jsonschema2pojo.model.EnumDefinition,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/type#_175
<org.jsonschema2pojo.rules.EnumRule: com.sun.codemodel.JFieldVar addConstructorAndFields(org.jsonschema2pojo.model.EnumDefinition,com.sun.codemodel.JDefinedClass)>/backingType#_372
<org.jsonschema2pojo.rules.EnumRule: void addFactoryMethod(org.jsonschema2pojo.model.EnumDefinition,com.sun.codemodel.JDefinedClass)>/backingType#_385
<org.jsonschema2pojo.rules.EnumRule: void addFieldAccessors(com.sun.codemodel.JDefinedClass,com.sun.codemodel.JFieldVar)>/$stack6
<org.jsonschema2pojo.rules.EnumRule: void addToString(com.sun.codemodel.JDefinedClass,com.sun.codemodel.JFieldVar)>/$stack10
<org.jsonschema2pojo.rules.ObjectRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JPackage,org.jsonschema2pojo.Schema)>/superType#_88
<org.jsonschema2pojo.util.ParcelableHelper: void addConstructorFromParcel(com.sun.codemodel.JDefinedClass)>/$stack46
<org.jsonschema2pojo.util.ParcelableHelper: void addConstructorFromParcel(com.sun.codemodel.JDefinedClass)>/$stack26
<org.jsonschema2pojo.SourceSortOrderTest: void testTwoFilesAreCompared(java.util.Comparator)>/mockFileA#_52
<org.jsonschema2pojo.SourceSortOrderTest: void testTwoDirectoriesAreCompared(java.util.Comparator)>/mockDirA#_60
<org.jsonschema2pojo.SourceSortOrderTest: void filesBeforeDirectories_FILES_FIRST()>/mockFile#_70
<org.jsonschema2pojo.SourceSortOrderTest: void filesBeforeDirectories_FILES_FIRST()>/mockDir#_71
<org.jsonschema2pojo.SourceSortOrderTest: void filesBeforeDirectories_SUBDIRS_FIRST()>/mockFile#_83
<org.jsonschema2pojo.SourceSortOrderTest: void filesBeforeDirectories_SUBDIRS_FIRST()>/mockDir#_84
<org.jsonschema2pojo.rules.PropertyRule: com.sun.codemodel.JType getReturnType(com.sun.codemodel.JDefinedClass,com.sun.codemodel.JFieldVar,boolean,boolean)>/$stack15
<org.jsonschema2pojo.rules.PropertyRule: com.sun.codemodel.JMethod addGetter(com.sun.codemodel.JDefinedClass,com.sun.codemodel.JFieldVar,java.lang.String,com.fasterxml.jackson.databind.JsonNode,boolean,boolean)>/$stack12
<org.jsonschema2pojo.rules.PropertyRule: com.sun.codemodel.JMethod addGetter(com.sun.codemodel.JDefinedClass,com.sun.codemodel.JFieldVar,java.lang.String,com.fasterxml.jackson.databind.JsonNode,boolean,boolean)>/type#_223
<org.jsonschema2pojo.rules.PropertyRule: com.sun.codemodel.JMethod addSetter(com.sun.codemodel.JDefinedClass,com.sun.codemodel.JFieldVar,java.lang.String,com.fasterxml.jackson.databind.JsonNode)>/$stack12
<org.jsonschema2pojo.rules.PropertyRule: com.sun.codemodel.JMethod addLegacyBuilder(com.sun.codemodel.JDefinedClass,com.sun.codemodel.JFieldVar,java.lang.String,com.fasterxml.jackson.databind.JsonNode)>/$stack11
<org.jsonschema2pojo.rules.PropertyRule: com.sun.codemodel.JMethod addInnerBuilderMethod(com.sun.codemodel.JDefinedClass,com.sun.codemodel.JFieldVar,java.lang.String,com.fasterxml.jackson.databind.JsonNode)>/$stack15
<org.jsonschema2pojo.rules.FormatRule: void <init>(org.jsonschema2pojo.rules.RuleFactory)>/$stack2
<org.jsonschema2pojo.rules.AdditionalPropertiesRule: com.sun.codemodel.JMethod addGetter(com.sun.codemodel.JDefinedClass,com.sun.codemodel.JFieldVar)>/$stack5
<org.jsonschema2pojo.rules.TypeRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/$stack59
<org.jsonschema2pojo.rules.TypeRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/$stack55
<org.jsonschema2pojo.rules.TypeRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/$stack51
<org.jsonschema2pojo.rules.DynamicPropertiesRule: com.sun.codemodel.JMethod addInternalGetMethodJava7(com.sun.codemodel.JDefinedClass,com.fasterxml.jackson.databind.JsonNode)>/propertyType#_187
<org.jsonschema2pojo.rules.DynamicPropertiesRule: com.sun.codemodel.JMethod addInternalSetMethodJava7(com.sun.codemodel.JDefinedClass,com.fasterxml.jackson.databind.JsonNode)>/propertyType#_320
<org.jsonschema2pojo.rules.DynamicPropertiesRule: com.sun.codemodel.JMethod addInternalSetMethodJava6(com.sun.codemodel.JDefinedClass,com.fasterxml.jackson.databind.JsonNode)>/propertyType#_350
<org.mockito.internal.MockitoCore: java.lang.Object verify(java.lang.Object,org.mockito.verification.VerificationMode)>/mock#2#_90
<org.jsonschema2pojo.rules.SchemaRuleTest: void existingTypeIsUsedWhenTypeIsAlreadyGenerated()>/result#_128
<org.jsonschema2pojo.util.TypeUtilTest: void testResolveTypeCanHandleWildcard()>/$stack20
<org.jsonschema2pojo.util.TypeUtilTest: void testResolveTypeCanHandleExtendsWildcard()>/$stack20
<org.jsonschema2pojo.rules.PatternRuleTest: void testRegex()>/result#_102
<org.jsonschema2pojo.rules.PatternRuleTest: void jsrDisable()>/result#_112
<org.jsonschema2pojo.rules.FormatRuleTest: void applyDefaultsToBaseType()>/result#_90
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/result#_108
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/result#_127
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/result#_152
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testNotUsed()>/result#_168
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void jsrDisable()>/result#_179
<org.jsonschema2pojo.rules.RuleFactoryImplTest: void generationConfigIsReturned()>/$stack9
<org.jsonschema2pojo.rules.RuleFactoryImplTest: void generationConfigIsReturned()>/$stack12
<org.jsonschema2pojo.rules.RuleFactoryImplTest: void generationRuleLoggerIsReturned()>/$stack10
<org.jsonschema2pojo.rules.RuleFactoryImplTest: void schemaStoreIsReturned()>/$stack7
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesDate()>/result#_84
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMinLength()>/result#_105
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxLength()>/result#_123
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/result#_146
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesArray()>/result#_564
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesCustomObject()>/result#_582
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/result#_169
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testNotUsed()>/result#_184
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void jsrDisable()>/result#_194
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMinLength()>/result#_105
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxLength()>/result#_123
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/result#_146
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/result#_169
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testNotUsed()>/result#_184
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void jsrDisable()>/result#_194
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/result#_112
<org.jsonschema2pojo.rules.DigitsRuleTest: void testNotUsed()>/result#_127
<org.jsonschema2pojo.rules.DigitsRuleTest: void jsrDisable()>/result#_137
<org.jsonschema2pojo.SchemaStoreTest: void setIfEmptyOnlySetsIfEmpty()>/$stack12
<org.jsonschema2pojo.SchemaStoreTest: void setIfEmptyOnlySetsIfEmpty()>/$stack15
<org.jsonschema2pojo.rules.ConstructorRule: void generateFieldsBuilderConstructor(com.sun.codemodel.JDefinedClass,com.sun.codemodel.JDefinedClass,com.sun.codemodel.JDefinedClass,com.sun.codemodel.JMethod)>/$stack51
<org.jsonschema2pojo.rules.ConstructorRule: void generateFieldsConcreteBuilderConstructor(com.sun.codemodel.JDefinedClass,com.sun.codemodel.JDefinedClass,com.sun.codemodel.JMethod)>/$stack27
<org.jsonschema2pojo.SourceSortOrderTest: void testTwoFilesAreCompared(java.util.Comparator)>/mockFileB#_53
<org.jsonschema2pojo.SourceSortOrderTest: void testTwoDirectoriesAreCompared(java.util.Comparator)>/mockDirB#_61
<org.jsonschema2pojo.rules.DynamicPropertiesRule: com.sun.codemodel.JMethod addInternalGetMethodJava7(com.sun.codemodel.JDefinedClass,com.fasterxml.jackson.databind.JsonNode)>/properties#4#_192
<org.jsonschema2pojo.rules.DynamicPropertiesRule: com.sun.codemodel.JMethod addInternalGetMethodJava6(com.sun.codemodel.JDefinedClass,com.fasterxml.jackson.databind.JsonNode)>/properties#6#_233
<org.jsonschema2pojo.rules.DynamicPropertiesRule: com.sun.codemodel.JMethod addPublicSetMethod(com.sun.codemodel.JDefinedClass,com.sun.codemodel.JMethod)>/$stack26
<org.jsonschema2pojo.rules.DynamicPropertiesRule: com.sun.codemodel.JMethod addPublicWithMethod(com.sun.codemodel.JDefinedClass,com.sun.codemodel.JMethod)>/$stack24
<org.jsonschema2pojo.rules.DynamicPropertiesRule: com.sun.codemodel.JMethod addInternalSetMethodJava7(com.sun.codemodel.JDefinedClass,com.fasterxml.jackson.databind.JsonNode)>/property#6#_326
<org.jsonschema2pojo.rules.DynamicPropertiesRule: com.sun.codemodel.JMethod addInternalSetMethodJava6(com.sun.codemodel.JDefinedClass,com.fasterxml.jackson.databind.JsonNode)>/properties#8#_360
<org.jsonschema2pojo.util.ReflectionHelper: com.sun.codemodel.JType getSuperType(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JPackage,org.jsonschema2pojo.Schema)>/$stack23
<org.jsonschema2pojo.rules.SchemaRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/$stack13
<org.jsonschema2pojo.rules.SchemaRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/$stack16
<org.jsonschema2pojo.rules.ArrayRule: com.sun.codemodel.JClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JPackage,org.jsonschema2pojo.Schema)>/$stack27
<org.jsonschema2pojo.rules.EnumRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/$stack51
<org.jsonschema2pojo.rules.EnumRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/$stack85
<org.jsonschema2pojo.SourceSortOrderTest: void testTwoFilesAreCompared(java.util.Comparator)>/$stack8
<org.jsonschema2pojo.SourceSortOrderTest: void testTwoDirectoriesAreCompared(java.util.Comparator)>/$stack8
<org.jsonschema2pojo.rules.PropertyRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/$stack18
<org.jsonschema2pojo.rules.AdditionalPropertiesRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/$stack50
<org.jsonschema2pojo.rules.TypeRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/$stack14
<org.jsonschema2pojo.rules.TypeRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/$stack24
<org.jsonschema2pojo.rules.TypeRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/$stack32
<org.jsonschema2pojo.rules.SchemaRuleTest: void refsToOtherSchemasAreLoaded()>/$stack41
<org.jsonschema2pojo.rules.SchemaRuleTest: void enumAsRootIsGeneratedCorrectly()>/$stack37
<org.jsonschema2pojo.rules.SchemaRuleTest: void enumAsRootIsGeneratedCorrectly()>/$stack33
<org.jsonschema2pojo.SchemaMapperTest: void generateReadsSchemaAsObject()>/$stack23
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromExampleJsonWhenInJsonMode()>/$stack33
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromExampleJSONAsStringInput()>/$stack36
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromSchemaAsStringInput()>/$stack24
<org.jsonschema2pojo.rules.PatternRuleTest: void testRegex()>/$stack40
<org.jsonschema2pojo.rules.PatternRuleTest: void testRegex()>/$stack34
<org.jsonschema2pojo.rules.PatternRuleTest: void jsrDisable()>/$stack20
<org.jsonschema2pojo.rules.PatternRuleTest: void jsrDisable()>/$stack15
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack54
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack64
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack48
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack59
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack54
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack64
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack48
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack59
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack78
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack90
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack72
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack84
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testNotUsed()>/$stack40
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testNotUsed()>/$stack47
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testNotUsed()>/$stack35
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void jsrDisable()>/$stack20
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void jsrDisable()>/$stack32
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void jsrDisable()>/$stack15
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void jsrDisable()>/$stack27
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMinLength()>/$stack55
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMinLength()>/$stack60
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMinLength()>/$stack49
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxLength()>/$stack55
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxLength()>/$stack60
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxLength()>/$stack49
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/$stack75
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/$stack81
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/$stack69
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack79
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack85
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack73
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testNotUsed()>/$stack40
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testNotUsed()>/$stack35
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void jsrDisable()>/$stack20
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void jsrDisable()>/$stack15
<org.jsonschema2pojo.SourceSortOrderTest: void filesBeforeDirectories_FILES_FIRST()>/$stack17
<org.jsonschema2pojo.SourceSortOrderTest: void filesBeforeDirectories_FILES_FIRST()>/$stack23
<org.jsonschema2pojo.SourceSortOrderTest: void filesBeforeDirectories_SUBDIRS_FIRST()>/$stack17
<org.jsonschema2pojo.SourceSortOrderTest: void filesBeforeDirectories_SUBDIRS_FIRST()>/$stack23
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMinLength()>/$stack55
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMinLength()>/$stack60
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMinLength()>/$stack49
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxLength()>/$stack55
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxLength()>/$stack60
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxLength()>/$stack49
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/$stack75
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/$stack81
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/$stack69
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack79
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack85
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack73
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testNotUsed()>/$stack40
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testNotUsed()>/$stack35
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void jsrDisable()>/$stack20
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void jsrDisable()>/$stack15
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack75
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack81
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack69
<org.jsonschema2pojo.rules.DigitsRuleTest: void testNotUsed()>/$stack40
<org.jsonschema2pojo.rules.DigitsRuleTest: void testNotUsed()>/$stack35
<org.jsonschema2pojo.rules.DigitsRuleTest: void jsrDisable()>/$stack20
<org.jsonschema2pojo.rules.DigitsRuleTest: void jsrDisable()>/$stack15
<com.fasterxml.jackson.databind.node.LongNode: boolean equals(java.lang.Object)>/@parameter0
<org.apache.http.auth.AuthScope: boolean equals(java.lang.Object)>/@parameter0
<org.jsonschema2pojo.model.EnumDefinition: void <init>(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JType,java.util.ArrayList,org.jsonschema2pojo.model.EnumDefinitionExtensionType)>/@parameter2
<org.jsonschema2pojo.SourceSortOrder$2$1: int compare(java.io.File,java.io.File)>/@parameter0
<org.jsonschema2pojo.SourceSortOrder$2$1: int compare(java.io.File,java.io.File)>/@parameter1
<org.jsonschema2pojo.SourceSortOrder$2$1: int compare(java.lang.Object,java.lang.Object)>/@parameter0
<org.jsonschema2pojo.SourceSortOrder$2$1: int compare(java.lang.Object,java.lang.Object)>/@parameter1
<org.jsonschema2pojo.rules.DigitsRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/@parameter1
<org.jsonschema2pojo.rules.DigitsRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/@parameter3
<org.jsonschema2pojo.rules.DigitsRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/@parameter4
<org.jsonschema2pojo.rules.DigitsRule: boolean isApplicableType(com.sun.codemodel.JFieldVar)>/@parameter0
<org.jsonschema2pojo.rules.DigitsRule: java.lang.Object apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,java.lang.Object,org.jsonschema2pojo.Schema)>/@parameter4
<japa.parser.ast.expr.LongLiteralExpr: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<com.sun.codemodel.JCast: void <init>(com.sun.codemodel.JType,com.sun.codemodel.JExpression)>/@parameter0
<org.jsonschema2pojo.rules.PatternRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/@parameter1
<org.jsonschema2pojo.rules.PatternRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/@parameter3
<org.jsonschema2pojo.rules.PatternRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/@parameter4
<org.jsonschema2pojo.rules.PatternRule: boolean isApplicableType(com.sun.codemodel.JFieldVar)>/@parameter0
<org.jsonschema2pojo.rules.PatternRule: java.lang.Object apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,java.lang.Object,org.jsonschema2pojo.Schema)>/@parameter4
<japa.parser.ast.expr.NameExpr: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<japa.parser.ast.stmt.AssertStmt: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<com.sun.codemodel.JNarrowedClass: boolean equals(java.lang.Object)>/@parameter0
<japa.parser.ast.expr.EnclosedExpr: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<org.hamcrest.core.DescribedAs: boolean matches(java.lang.Object)>/@parameter0
<org.hamcrest.core.DescribedAs: void describeMismatch(java.lang.Object,org.hamcrest.Description)>/@parameter0
<org.jsonschema2pojo.rules.TitleRule: com.sun.codemodel.JDocComment apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDocCommentable,org.jsonschema2pojo.Schema)>/@parameter4
<org.jsonschema2pojo.rules.TitleRule: java.lang.Object apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,java.lang.Object,org.jsonschema2pojo.Schema)>/@parameter4
<japa.parser.ast.BlockComment: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<japa.parser.ast.expr.ThisExpr: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: boolean equals(japa.parser.ast.Node,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: boolean nodeEquals(japa.parser.ast.Node,japa.parser.ast.Node)>/@parameter1
<org.jsonschema2pojo.rules.DynamicPropertiesRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/@parameter4
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.TypeParameter,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.LineComment,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.BlockComment,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.body.ClassOrInterfaceDeclaration,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.body.EnumDeclaration,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.body.EmptyTypeDeclaration,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.body.EnumConstantDeclaration,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.body.AnnotationDeclaration,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.body.AnnotationMemberDeclaration,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.body.FieldDeclaration,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.body.VariableDeclarator,japa.parser.ast.Node)>/@parameter1
<org.jsonschema2pojo.rules.DynamicPropertiesRule: void addGetPropertyCase(com.sun.codemodel.JDefinedClass,com.sun.codemodel.JSwitch,java.lang.String,com.sun.codemodel.JType,com.fasterxml.jackson.databind.JsonNode)>/@parameter3
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.body.VariableDeclaratorId,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.body.ConstructorDeclaration,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.body.MethodDeclaration,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.body.Parameter,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.body.MultiTypeParameter,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.body.BaseParameter,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.body.EmptyMemberDeclaration,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.body.InitializerDeclaration,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.body.JavadocComment,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.type.ClassOrInterfaceType,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.type.PrimitiveType,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.type.ReferenceType,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.type.VoidType,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.type.WildcardType,japa.parser.ast.Node)>/@parameter1
<org.jsonschema2pojo.rules.DynamicPropertiesRule: void addSetPropertyCase(com.sun.codemodel.JDefinedClass,com.sun.codemodel.JSwitch,java.lang.String,com.sun.codemodel.JType,com.sun.codemodel.JVar,com.fasterxml.jackson.databind.JsonNode)>/@parameter3
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.expr.ArrayAccessExpr,japa.parser.ast.Node)>/@parameter1
<org.jsonschema2pojo.rules.DynamicPropertiesRule: void addSetProperty(com.sun.codemodel.JDefinedClass,com.sun.codemodel.JBlock,java.lang.String,com.sun.codemodel.JType,com.sun.codemodel.JVar,com.fasterxml.jackson.databind.JsonNode)>/@parameter3
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.expr.ArrayCreationExpr,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.expr.ArrayInitializerExpr,japa.parser.ast.Node)>/@parameter1
<org.jsonschema2pojo.rules.DynamicPropertiesRule: com.sun.codemodel.JInvocation illegalArgumentInvocation(com.sun.codemodel.JDefinedClass,java.lang.String,com.sun.codemodel.JType,com.sun.codemodel.JVar)>/@parameter2
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.expr.AssignExpr,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.expr.BinaryExpr,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.expr.CastExpr,japa.parser.ast.Node)>/@parameter1
<org.jsonschema2pojo.rules.DynamicPropertiesRule: java.lang.String getGetterName(java.lang.String,com.sun.codemodel.JType,com.fasterxml.jackson.databind.JsonNode)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.expr.ClassExpr,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.expr.ConditionalExpr,japa.parser.ast.Node)>/@parameter1
<org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>/@parameter0
<org.jsonschema2pojo.rules.DynamicPropertiesRule: java.lang.Object apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,java.lang.Object,org.jsonschema2pojo.Schema)>/@parameter4
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.expr.EnclosedExpr,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.expr.FieldAccessExpr,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.expr.InstanceOfExpr,japa.parser.ast.Node)>/@parameter1
<org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>/@parameter0
<org.hamcrest.Matchers: org.hamcrest.Matcher sameInstance(java.lang.Object)>/@parameter0
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.expr.StringLiteralExpr,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.expr.IntegerLiteralExpr,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.expr.LongLiteralExpr,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.expr.IntegerLiteralMinValueExpr,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.expr.LongLiteralMinValueExpr,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.expr.CharLiteralExpr,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.expr.DoubleLiteralExpr,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.expr.BooleanLiteralExpr,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.expr.NullLiteralExpr,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.expr.MethodCallExpr,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.expr.NameExpr,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.expr.ObjectCreationExpr,japa.parser.ast.Node)>/@parameter1
<org.jsonschema2pojo.rules.RuleFactory: void <init>(org.jsonschema2pojo.GenerationConfig,org.jsonschema2pojo.Annotator,org.jsonschema2pojo.SchemaStore)>/@parameter0
<org.jsonschema2pojo.rules.RuleFactory: void <init>(org.jsonschema2pojo.GenerationConfig,org.jsonschema2pojo.Annotator,org.jsonschema2pojo.SchemaStore)>/@parameter2
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.expr.QualifiedNameExpr,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.expr.ThisExpr,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.expr.SuperExpr,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.expr.UnaryExpr,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.expr.VariableDeclarationExpr,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.expr.MarkerAnnotationExpr,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.expr.SingleMemberAnnotationExpr,japa.parser.ast.Node)>/@parameter1
<org.jsonschema2pojo.rules.RuleFactory: void setGenerationConfig(org.jsonschema2pojo.GenerationConfig)>/@parameter0
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.expr.NormalAnnotationExpr,japa.parser.ast.Node)>/@parameter1
<org.jsonschema2pojo.rules.RuleFactory: void setLogger(org.jsonschema2pojo.RuleLogger)>/@parameter0
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.expr.MemberValuePair,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.stmt.ExplicitConstructorInvocationStmt,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.stmt.TypeDeclarationStmt,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.stmt.AssertStmt,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.stmt.BlockStmt,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.stmt.LabeledStmt,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.stmt.EmptyStmt,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.stmt.ExpressionStmt,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.stmt.SwitchStmt,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.stmt.SwitchEntryStmt,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.stmt.BreakStmt,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.stmt.ReturnStmt,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.stmt.IfStmt,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.stmt.WhileStmt,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.stmt.ContinueStmt,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.stmt.DoStmt,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.stmt.ForeachStmt,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.stmt.ForStmt,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.stmt.ThrowStmt,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.stmt.SynchronizedStmt,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.stmt.TryStmt,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Boolean visit(japa.parser.ast.stmt.CatchClause,japa.parser.ast.Node)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.stmt.CatchClause,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.stmt.TryStmt,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.stmt.SynchronizedStmt,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.stmt.ThrowStmt,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.stmt.ForStmt,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.stmt.ForeachStmt,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.stmt.DoStmt,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.stmt.ContinueStmt,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.stmt.WhileStmt,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.stmt.IfStmt,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.stmt.ReturnStmt,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.stmt.BreakStmt,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.stmt.SwitchEntryStmt,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.stmt.SwitchStmt,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.stmt.ExpressionStmt,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.stmt.EmptyStmt,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.stmt.LabeledStmt,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.stmt.BlockStmt,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.stmt.AssertStmt,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.stmt.TypeDeclarationStmt,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.stmt.ExplicitConstructorInvocationStmt,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.expr.MemberValuePair,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.expr.NormalAnnotationExpr,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.expr.SingleMemberAnnotationExpr,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.expr.MarkerAnnotationExpr,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.expr.VariableDeclarationExpr,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.expr.UnaryExpr,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.expr.SuperExpr,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.expr.ThisExpr,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.expr.QualifiedNameExpr,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.expr.ObjectCreationExpr,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.expr.NameExpr,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.expr.MethodCallExpr,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.expr.NullLiteralExpr,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.expr.BooleanLiteralExpr,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.expr.DoubleLiteralExpr,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.expr.CharLiteralExpr,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.expr.LongLiteralMinValueExpr,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.expr.IntegerLiteralMinValueExpr,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.expr.LongLiteralExpr,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.expr.IntegerLiteralExpr,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.expr.StringLiteralExpr,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.expr.InstanceOfExpr,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.expr.FieldAccessExpr,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.expr.EnclosedExpr,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.expr.ConditionalExpr,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.expr.ClassExpr,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.expr.CastExpr,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.expr.BinaryExpr,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.expr.AssignExpr,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.expr.ArrayInitializerExpr,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.expr.ArrayCreationExpr,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.expr.ArrayAccessExpr,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.type.WildcardType,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.type.VoidType,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.type.ReferenceType,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.type.PrimitiveType,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.type.ClassOrInterfaceType,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.body.JavadocComment,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.body.InitializerDeclaration,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.body.EmptyMemberDeclaration,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.body.MultiTypeParameter,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.body.Parameter,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.body.MethodDeclaration,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.body.ConstructorDeclaration,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.body.VariableDeclaratorId,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.body.VariableDeclarator,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.body.FieldDeclaration,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.body.AnnotationMemberDeclaration,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.body.AnnotationDeclaration,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.body.EnumConstantDeclaration,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.body.EmptyTypeDeclaration,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.body.EnumDeclaration,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.body.ClassOrInterfaceDeclaration,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.BlockComment,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.LineComment,java.lang.Object)>/@parameter1
<japa.parser.ast.visitor.EqualsVisitor: java.lang.Object visit(japa.parser.ast.TypeParameter,java.lang.Object)>/@parameter1
<org.jsonschema2pojo.rules.BuilderRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/@parameter4
<org.jsonschema2pojo.rules.BuilderRule: java.lang.Object apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,java.lang.Object,org.jsonschema2pojo.Schema)>/@parameter4
<japa.parser.ast.expr.MemberValuePair: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<japa.parser.ast.stmt.BlockStmt: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<japa.parser.ast.body.ConstructorDeclaration: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<japa.parser.ast.stmt.TypeDeclarationStmt: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<japa.parser.ast.body.AnnotationMemberDeclaration: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<japa.parser.ast.Node: boolean equals(java.lang.Object)>/@parameter0
<japa.parser.ast.body.Parameter: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<japa.parser.ast.body.FieldDeclaration: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<com.sun.codemodel.JMethod: void <init>(com.sun.codemodel.JDefinedClass,int,com.sun.codemodel.JType,java.lang.String)>/@parameter2
<com.sun.codemodel.JMethod: com.sun.codemodel.JVar param(int,com.sun.codemodel.JType,java.lang.String)>/@parameter1
<com.sun.codemodel.JMethod: com.sun.codemodel.JVar param(com.sun.codemodel.JType,java.lang.String)>/@parameter0
<org.hamcrest.BaseMatcher: void describeMismatch(java.lang.Object,org.hamcrest.Description)>/@parameter0
<japa.parser.ast.expr.StringLiteralExpr: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<com.fasterxml.jackson.databind.type.ResolvedRecursiveType: boolean equals(java.lang.Object)>/@parameter0
<com.fasterxml.jackson.databind.node.DoubleNode: boolean equals(java.lang.Object)>/@parameter0
<org.jsonschema2pojo.util.ReflectionHelper: com.sun.codemodel.JType getSuperType(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JPackage,org.jsonschema2pojo.Schema)>/@parameter3
<org.jsonschema2pojo.util.ReflectionHelper: org.jsonschema2pojo.Schema getSuperSchema(com.fasterxml.jackson.databind.JsonNode,org.jsonschema2pojo.Schema,boolean)>/@parameter1
<org.jsonschema2pojo.util.ReflectionHelper: com.sun.codemodel.JDefinedClass getBaseBuilderClass(com.sun.codemodel.JClass)>/@parameter0
<org.jsonschema2pojo.util.ReflectionHelper: boolean isFinal(com.sun.codemodel.JType)>/@parameter0
<org.jsonschema2pojo.util.ReflectionHelper: com.sun.codemodel.JDefinedClass definedClassOrNullFromType(com.sun.codemodel.JType)>/@parameter0
<com.fasterxml.jackson.databind.introspect.AnnotatedField: boolean equals(java.lang.Object)>/@parameter0
<org.jsonschema2pojo.rules.SchemaRule: void <init>(org.jsonschema2pojo.rules.RuleFactory)>/@parameter0
<org.jsonschema2pojo.rules.SchemaRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/@parameter4
<org.jsonschema2pojo.rules.SchemaRule: java.lang.Object apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,java.lang.Object,org.jsonschema2pojo.Schema)>/@parameter4
<org.jsonschema2pojo.rules.RequiredRule: com.sun.codemodel.JDocCommentable apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDocCommentable,org.jsonschema2pojo.Schema)>/@parameter4
<org.jsonschema2pojo.rules.RequiredRule: java.lang.Object apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,java.lang.Object,org.jsonschema2pojo.Schema)>/@parameter4
<org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>/@parameter0
<org.mockito.Mockito: java.lang.Object verify(java.lang.Object,org.mockito.verification.VerificationMode)>/@parameter0
<japa.parser.ast.expr.LongLiteralMinValueExpr: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<com.fasterxml.jackson.databind.node.ArrayNode: boolean equals(java.lang.Object)>/@parameter0
<japa.parser.ast.stmt.WhileStmt: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<japa.parser.ast.expr.BooleanLiteralExpr: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<japa.parser.ast.stmt.ExpressionStmt: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<japa.parser.ast.expr.ArrayAccessExpr: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<japa.parser.ast.expr.MarkerAnnotationExpr: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<japa.parser.ast.expr.MethodCallExpr: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<com.fasterxml.jackson.databind.type.TypeBindings$AsKey: boolean equals(java.lang.Object)>/@parameter0
<com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>/@parameter0
<org.jsonschema2pojo.rules.PropertiesRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/@parameter4
<org.jsonschema2pojo.rules.PropertiesRule: java.lang.Object apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,java.lang.Object,org.jsonschema2pojo.Schema)>/@parameter4
<com.fasterxml.jackson.databind.type.SimpleType: boolean equals(java.lang.Object)>/@parameter0
<org.hamcrest.Description$NullDescription: org.hamcrest.Description appendValue(java.lang.Object)>/@parameter0
<com.fasterxml.jackson.databind.node.FloatNode: boolean equals(java.lang.Object)>/@parameter0
<japa.parser.ast.body.MultiTypeParameter: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<org.hamcrest.FeatureMatcher: boolean matchesSafely(java.lang.Object,org.hamcrest.Description)>/@parameter0
<org.jsonschema2pojo.rules.MinLengthMaxLengthRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/@parameter1
<org.jsonschema2pojo.rules.MinLengthMaxLengthRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/@parameter3
<org.jsonschema2pojo.rules.MinLengthMaxLengthRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/@parameter4
<org.jsonschema2pojo.rules.MinLengthMaxLengthRule: boolean isApplicableType(com.sun.codemodel.JFieldVar)>/@parameter0
<org.jsonschema2pojo.rules.MinLengthMaxLengthRule: java.lang.Object apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,java.lang.Object,org.jsonschema2pojo.Schema)>/@parameter4
<japa.parser.ast.stmt.SynchronizedStmt: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<japa.parser.ast.expr.QualifiedNameExpr: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<japa.parser.ast.expr.ClassExpr: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<org.jsonschema2pojo.rules.ConstructorRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/@parameter4
<org.jsonschema2pojo.rules.ConstructorRule: com.sun.codemodel.JDefinedClass handleLegacyConfiguration(com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/@parameter2
<org.jsonschema2pojo.rules.ConstructorRule: void handleMultiChoiceConstructorConfiguration(com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/@parameter2
<org.jsonschema2pojo.rules.ConstructorRule: java.util.LinkedHashSet getSuperTypeConstructorPropertiesRecursive(com.fasterxml.jackson.databind.JsonNode,org.jsonschema2pojo.Schema,boolean)>/@parameter1
<org.jsonschema2pojo.rules.ConstructorRule: java.lang.Object apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,java.lang.Object,org.jsonschema2pojo.Schema)>/@parameter4
<japa.parser.ast.stmt.ExplicitConstructorInvocationStmt: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<japa.parser.ast.expr.CharLiteralExpr: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<org.hamcrest.DiagnosingMatcher: boolean matches(java.lang.Object)>/@parameter0
<org.hamcrest.DiagnosingMatcher: void describeMismatch(java.lang.Object,org.hamcrest.Description)>/@parameter0
<org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>/@parameter0
<org.hamcrest.MatcherAssert: void assertThat(java.lang.String,java.lang.Object,org.hamcrest.Matcher)>/@parameter1
<org.jsonschema2pojo.rules.RequiredArrayRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/@parameter4
<org.jsonschema2pojo.rules.RequiredArrayRule: java.lang.String getGetterName(java.lang.String,com.sun.codemodel.JType,com.fasterxml.jackson.databind.JsonNode)>/@parameter1
<org.jsonschema2pojo.rules.RequiredArrayRule: java.lang.Object apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,java.lang.Object,org.jsonschema2pojo.Schema)>/@parameter4
<com.fasterxml.jackson.databind.util.TypeKey: boolean equals(java.lang.Object)>/@parameter0
<japa.parser.ast.body.EnumConstantDeclaration: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<com.fasterxml.jackson.databind.introspect.AnnotatedParameter: boolean equals(java.lang.Object)>/@parameter0
<com.fasterxml.jackson.databind.node.BigIntegerNode: boolean equals(java.lang.Object)>/@parameter0
<org.hamcrest.core.IsNull: boolean matches(java.lang.Object)>/@parameter0
<org.jsonschema2pojo.rules.DefaultRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/@parameter4
<org.jsonschema2pojo.rules.DefaultRule: com.sun.codemodel.JExpression getDefaultValue(com.sun.codemodel.JType,com.fasterxml.jackson.databind.JsonNode)>/@parameter0
<org.jsonschema2pojo.rules.DefaultRule: com.sun.codemodel.JExpression getDefaultValue(com.sun.codemodel.JType,java.lang.String)>/@parameter0
<japa.parser.ast.expr.FieldAccessExpr: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<org.jsonschema2pojo.rules.DefaultRule: com.sun.codemodel.JExpression getDefaultList(com.sun.codemodel.JType,com.fasterxml.jackson.databind.JsonNode)>/@parameter0
<org.jsonschema2pojo.rules.DefaultRule: com.sun.codemodel.JExpression getDefaultSet(com.sun.codemodel.JType,com.fasterxml.jackson.databind.JsonNode)>/@parameter0
<org.jsonschema2pojo.rules.DefaultRule: java.lang.Object apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,java.lang.Object,org.jsonschema2pojo.Schema)>/@parameter4
<japa.parser.ast.stmt.DoStmt: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<com.sun.codemodel.JExpr: com.sun.codemodel.JCast cast(com.sun.codemodel.JType,com.sun.codemodel.JExpression)>/@parameter0
<com.sun.codemodel.JArrayClass: boolean equals(java.lang.Object)>/@parameter0
<japa.parser.ast.type.VoidType: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<org.hamcrest.collection.IsArrayWithSize: java.lang.Integer featureValueOf(java.lang.Object[])>/@parameter0
<org.hamcrest.collection.IsArrayWithSize: java.lang.Object featureValueOf(java.lang.Object)>/@parameter0
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: boolean equals(java.lang.Object)>/@parameter0
<japa.parser.ast.type.WildcardType: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<org.hamcrest.core.IsEqual: void <init>(java.lang.Object)>/@parameter0
<org.hamcrest.core.IsEqual: boolean matches(java.lang.Object)>/@parameter0
<com.fasterxml.jackson.core.io.SerializedString: boolean equals(java.lang.Object)>/@parameter0
<org.hamcrest.core.IsEqual: boolean areEqual(java.lang.Object,java.lang.Object)>/@parameter0
<org.hamcrest.core.IsEqual: boolean areEqual(java.lang.Object,java.lang.Object)>/@parameter1
<org.mockito.internal.util.DefaultMockingDetails: void <init>(java.lang.Object)>/@parameter0
<org.hamcrest.core.IsEqual: boolean areArraysEqual(java.lang.Object,java.lang.Object)>/@parameter0
<org.hamcrest.core.IsEqual: boolean areArraysEqual(java.lang.Object,java.lang.Object)>/@parameter1
<org.hamcrest.core.IsEqual: boolean areArrayLengthsEqual(java.lang.Object,java.lang.Object)>/@parameter0
<org.hamcrest.core.IsEqual: boolean areArrayLengthsEqual(java.lang.Object,java.lang.Object)>/@parameter1
<org.hamcrest.core.IsEqual: boolean areArrayElementsEqual(java.lang.Object,java.lang.Object)>/@parameter0
<org.hamcrest.core.IsEqual: boolean areArrayElementsEqual(java.lang.Object,java.lang.Object)>/@parameter1
<org.hamcrest.core.IsEqual: boolean isArray(java.lang.Object)>/@parameter0
<org.hamcrest.core.IsEqual: org.hamcrest.Matcher equalTo(java.lang.Object)>/@parameter0
<japa.parser.ast.expr.AssignExpr: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<org.jsonschema2pojo.rules.DescriptionRule: com.sun.codemodel.JDocComment apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDocCommentable,org.jsonschema2pojo.Schema)>/@parameter4
<org.jsonschema2pojo.rules.DescriptionRule: java.lang.Object apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,java.lang.Object,org.jsonschema2pojo.Schema)>/@parameter4
<org.jsonschema2pojo.rules.MediaRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JType,org.jsonschema2pojo.Schema)>/@parameter3
<org.jsonschema2pojo.rules.MediaRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JType,org.jsonschema2pojo.Schema)>/@parameter4
<org.jsonschema2pojo.rules.MediaRule: java.lang.Object apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,java.lang.Object,org.jsonschema2pojo.Schema)>/@parameter3
<org.jsonschema2pojo.rules.MediaRule: java.lang.Object apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,java.lang.Object,org.jsonschema2pojo.Schema)>/@parameter4
<japa.parser.ast.type.ClassOrInterfaceType: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<org.jsonschema2pojo.rules.ArrayRule: com.sun.codemodel.JClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JPackage,org.jsonschema2pojo.Schema)>/@parameter4
<org.jsonschema2pojo.rules.ArrayRule: java.lang.Object apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,java.lang.Object,org.jsonschema2pojo.Schema)>/@parameter4
<japa.parser.ast.body.InitializerDeclaration: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<com.fasterxml.jackson.databind.type.ClassKey: boolean equals(java.lang.Object)>/@parameter0
<org.hamcrest.TypeSafeMatcher: boolean matches(java.lang.Object)>/@parameter0
<org.hamcrest.TypeSafeMatcher: void describeMismatch(java.lang.Object,org.hamcrest.Description)>/@parameter0
<org.hamcrest.collection.IsCollectionWithSize: java.lang.Integer featureValueOf(java.util.Collection)>/@parameter0
<org.hamcrest.collection.IsCollectionWithSize: java.lang.Object featureValueOf(java.lang.Object)>/@parameter0
<japa.parser.ast.LineComment: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<org.mockito.internal.exceptions.Reporter: org.mockito.exceptions.base.MockitoException stubPassedToVerify(java.lang.Object)>/@parameter0
<com.fasterxml.jackson.databind.node.BooleanNode: boolean equals(java.lang.Object)>/@parameter0
<org.jsonschema2pojo.rules.CommentRule: com.sun.codemodel.JDocComment apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDocCommentable,org.jsonschema2pojo.Schema)>/@parameter4
<org.jsonschema2pojo.rules.CommentRule: java.lang.Object apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,java.lang.Object,org.jsonschema2pojo.Schema)>/@parameter4
<org.jsonschema2pojo.rules.MinItemsMaxItemsRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/@parameter1
<org.jsonschema2pojo.rules.MinItemsMaxItemsRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/@parameter3
<org.jsonschema2pojo.rules.MinItemsMaxItemsRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/@parameter4
<org.jsonschema2pojo.rules.MinItemsMaxItemsRule: boolean isApplicableType(com.sun.codemodel.JFieldVar)>/@parameter0
<org.jsonschema2pojo.rules.MinItemsMaxItemsRule: java.lang.Object apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,java.lang.Object,org.jsonschema2pojo.Schema)>/@parameter4
<japa.parser.ast.expr.InstanceOfExpr: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<com.sun.codemodel.JDefinedClass: com.sun.codemodel.JDefinedClass _extends(com.sun.codemodel.JClass)>/@parameter0
<com.sun.codemodel.JDefinedClass: com.sun.codemodel.JDefinedClass _implements(com.sun.codemodel.JClass)>/@parameter0
<com.sun.codemodel.JDefinedClass: com.sun.codemodel.JFieldVar field(int,com.sun.codemodel.JType,java.lang.String)>/@parameter1
<com.sun.codemodel.JDefinedClass: com.sun.codemodel.JFieldVar field(int,com.sun.codemodel.JType,java.lang.String,com.sun.codemodel.JExpression)>/@parameter1
<com.sun.codemodel.JDefinedClass: com.sun.codemodel.JMethod method(int,com.sun.codemodel.JType,java.lang.String)>/@parameter1
<japa.parser.ast.stmt.ForStmt: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<org.hamcrest.number.OrderingComparison: boolean matchesSafely(java.lang.Comparable)>/@parameter0
<org.hamcrest.number.OrderingComparison: void describeMismatchSafely(java.lang.Comparable,org.hamcrest.Description)>/@parameter0
<com.fasterxml.jackson.databind.node.NullNode: boolean equals(java.lang.Object)>/@parameter0
<org.hamcrest.number.OrderingComparison: void describeMismatchSafely(java.lang.Object,org.hamcrest.Description)>/@parameter0
<org.hamcrest.number.OrderingComparison: boolean matchesSafely(java.lang.Object)>/@parameter0
<org.junit.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>/@parameter1
<org.junit.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>/@parameter2
<org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>/@parameter0
<org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>/@parameter1
<org.junit.Assert: void failNotSame(java.lang.String,java.lang.Object,java.lang.Object)>/@parameter1
<org.junit.Assert: void failNotSame(java.lang.String,java.lang.Object,java.lang.Object)>/@parameter2
<org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>/@parameter0
<org.junit.Assert: void assertThat(java.lang.String,java.lang.Object,org.hamcrest.Matcher)>/@parameter1
<japa.parser.ast.expr.BinaryExpr: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<com.sun.codemodel.JVar: void <init>(com.sun.codemodel.JMods,com.sun.codemodel.JType,java.lang.String,com.sun.codemodel.JExpression)>/@parameter1
<org.jsonschema2pojo.rules.EnumRule: void <init>(org.jsonschema2pojo.rules.RuleFactory)>/@parameter0
<org.jsonschema2pojo.rules.EnumRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/@parameter4
<org.jsonschema2pojo.rules.EnumRule: void addEnumConstants(org.jsonschema2pojo.model.EnumDefinition,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/@parameter2
<org.jsonschema2pojo.rules.EnumRule: org.jsonschema2pojo.model.EnumDefinition buildEnumDefinition(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JType)>/@parameter2
<org.jsonschema2pojo.rules.EnumRule: org.jsonschema2pojo.model.EnumDefinition buildEnumDefinitionWithNoExtensions(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JType)>/@parameter3
<org.jsonschema2pojo.rules.EnumRule: org.jsonschema2pojo.model.EnumDefinition buildEnumDefinitionWithJavaEnumNamesExtension(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JType)>/@parameter4
<org.jsonschema2pojo.rules.EnumRule: org.jsonschema2pojo.model.EnumDefinition buildEnumDefinitionWithJavaEnumsExtension(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JType)>/@parameter4
<org.jsonschema2pojo.rules.EnumRule: boolean isString(com.sun.codemodel.JType)>/@parameter0
<com.google.common.base.Predicates$AndPredicate: boolean equals(java.lang.Object)>/@parameter0
<org.hamcrest.core.IsInstanceOf: boolean matches(java.lang.Object,org.hamcrest.Description)>/@parameter0
<org.mockito.internal.MockitoCore: java.lang.Object verify(java.lang.Object,org.mockito.verification.VerificationMode)>/@parameter0
<org.mockito.internal.MockitoCore: void assertNotStubOnlyMock(java.lang.Object)>/@parameter0
<org.mockito.internal.MockitoCore: org.mockito.MockingDetails mockingDetails(java.lang.Object)>/@parameter0
<japa.parser.ast.expr.ObjectCreationExpr: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<org.jsonschema2pojo.rules.ObjectRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JPackage,org.jsonschema2pojo.Schema)>/@parameter4
<org.jsonschema2pojo.util.ParcelableHelper: java.lang.String getListType(com.sun.codemodel.JType)>/@parameter0
<japa.parser.ast.expr.CastExpr: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<org.jsonschema2pojo.rules.ObjectRule: java.lang.Object apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,java.lang.Object,org.jsonschema2pojo.Schema)>/@parameter4
<org.jsonschema2pojo.Schema: void setJavaType(com.sun.codemodel.JType)>/@parameter0
<org.jsonschema2pojo.Schema: void setJavaTypeIfEmpty(com.sun.codemodel.JType)>/@parameter0
<org.slf4j.helpers.SubstituteLogger: boolean equals(java.lang.Object)>/@parameter0
<com.sun.codemodel.JClass: com.sun.codemodel.JClass narrow(com.sun.codemodel.JType)>/@parameter0
<com.fasterxml.jackson.databind.node.IntNode: boolean equals(java.lang.Object)>/@parameter0
<japa.parser.ast.body.AnnotationDeclaration: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<com.fasterxml.jackson.databind.PropertyName: boolean equals(java.lang.Object)>/@parameter0
<japa.parser.ast.TypeParameter: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<japa.parser.ast.expr.IntegerLiteralExpr: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<japa.parser.ast.expr.SuperExpr: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<com.fasterxml.jackson.databind.introspect.MemberKey: boolean equals(java.lang.Object)>/@parameter0
<japa.parser.ast.stmt.ForeachStmt: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<japa.parser.ast.expr.SingleMemberAnnotationExpr: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<japa.parser.ast.expr.NullLiteralExpr: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<japa.parser.ast.expr.VariableDeclarationExpr: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<com.fasterxml.jackson.databind.node.ObjectNode: boolean equals(java.lang.Object)>/@parameter0
<com.fasterxml.jackson.databind.node.ObjectNode: boolean _childrenEqual(com.fasterxml.jackson.databind.node.ObjectNode)>/@parameter0
<com.fasterxml.jackson.databind.type.ReferenceType: boolean equals(java.lang.Object)>/@parameter0
<japa.parser.ast.stmt.BreakStmt: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<com.fasterxml.jackson.databind.node.DecimalNode: boolean equals(java.lang.Object)>/@parameter0
<com.sun.codemodel.JFieldVar: void <init>(com.sun.codemodel.JDefinedClass,com.sun.codemodel.JMods,com.sun.codemodel.JType,java.lang.String,com.sun.codemodel.JExpression)>/@parameter2
<org.mockito.internal.util.MockUtil: org.mockito.invocation.MockHandler getMockHandler(java.lang.Object)>/@parameter0
<org.mockito.internal.util.MockUtil: boolean isMock(java.lang.Object)>/@parameter0
<org.mockito.internal.util.MockUtil: org.mockito.mock.MockName getMockName(java.lang.Object)>/@parameter0
<japa.parser.ast.expr.NormalAnnotationExpr: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<com.fasterxml.jackson.core.JsonLocation: boolean equals(java.lang.Object)>/@parameter0
<japa.parser.ast.body.VariableDeclarator: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<com.fasterxml.jackson.databind.type.MapLikeType: boolean equals(java.lang.Object)>/@parameter0
<org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper: boolean equals(java.lang.Object)>/@parameter0
<japa.parser.ast.expr.ConditionalExpr: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<japa.parser.ast.body.MethodDeclaration: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<japa.parser.ast.body.EnumDeclaration: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<com.fasterxml.jackson.databind.node.BinaryNode: boolean equals(java.lang.Object)>/@parameter0
<org.jsonschema2pojo.util.LanguageFeatures: boolean canUseJava7(org.jsonschema2pojo.GenerationConfig)>/@parameter0
<org.jsonschema2pojo.util.LanguageFeatures: boolean canUseJava8(org.jsonschema2pojo.GenerationConfig)>/@parameter0
<org.hamcrest.internal.ArrayIterator: void <init>(java.lang.Object)>/@parameter0
<japa.parser.ast.stmt.IfStmt: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<org.jsonschema2pojo.rules.ValidRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/@parameter4
<org.jsonschema2pojo.rules.ValidRule: java.lang.Object apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,java.lang.Object,org.jsonschema2pojo.Schema)>/@parameter4
<org.jsonschema2pojo.rules.PropertyRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/@parameter4
<org.jsonschema2pojo.rules.PropertyRule: boolean hasEnumerated(org.jsonschema2pojo.Schema,java.lang.String,java.lang.String)>/@parameter0
<japa.parser.ast.expr.IntegerLiteralMinValueExpr: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<org.jsonschema2pojo.rules.PropertyRule: boolean isDeclaredAs(java.lang.String,java.lang.String,com.fasterxml.jackson.databind.JsonNode,org.jsonschema2pojo.Schema)>/@parameter3
<org.jsonschema2pojo.rules.PropertyRule: boolean isRequired(java.lang.String,com.fasterxml.jackson.databind.JsonNode,org.jsonschema2pojo.Schema)>/@parameter2
<org.jsonschema2pojo.rules.PropertyRule: boolean useOptional(java.lang.String,com.fasterxml.jackson.databind.JsonNode,org.jsonschema2pojo.Schema)>/@parameter2
<org.jsonschema2pojo.rules.PropertyRule: void propertyAnnotations(java.lang.String,com.fasterxml.jackson.databind.JsonNode,org.jsonschema2pojo.Schema,com.sun.codemodel.JDocCommentable)>/@parameter2
<org.jsonschema2pojo.rules.PropertyRule: com.fasterxml.jackson.databind.JsonNode resolveRefs(com.fasterxml.jackson.databind.JsonNode,org.jsonschema2pojo.Schema)>/@parameter1
<org.jsonschema2pojo.rules.PropertyRule: java.lang.String getGetterName(java.lang.String,com.sun.codemodel.JType,com.fasterxml.jackson.databind.JsonNode)>/@parameter1
<org.jsonschema2pojo.rules.PropertyRule: java.lang.Object apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,java.lang.Object,org.jsonschema2pojo.Schema)>/@parameter4
<com.fasterxml.jackson.databind.node.TextNode: boolean equals(java.lang.Object)>/@parameter0
<japa.parser.ast.body.ClassOrInterfaceDeclaration: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: boolean equals(java.lang.Object)>/@parameter0
<com.fasterxml.jackson.databind.util.ClassUtil: boolean hasClass(java.lang.Object,java.lang.Class)>/@parameter0
<japa.parser.ast.stmt.LabeledStmt: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<org.jsonschema2pojo.Jsonschema2Pojo: java.lang.String getNodeName(java.lang.String,org.jsonschema2pojo.GenerationConfig)>/@parameter1
<com.fasterxml.jackson.databind.introspect.AnnotatedMethod: boolean equals(java.lang.Object)>/@parameter0
<japa.parser.ast.stmt.ReturnStmt: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<com.fasterxml.jackson.databind.jsontype.NamedType: boolean equals(java.lang.Object)>/@parameter0
<org.jsonschema2pojo.rules.FormatRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JType,org.jsonschema2pojo.Schema)>/@parameter3
<org.jsonschema2pojo.rules.FormatRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JType,org.jsonschema2pojo.Schema)>/@parameter4
<org.jsonschema2pojo.rules.FormatRule: java.util.Map getFormatTypeMapping(org.jsonschema2pojo.GenerationConfig)>/@parameter0
<org.jsonschema2pojo.rules.FormatRule: java.lang.Class getDateTimeType(org.jsonschema2pojo.GenerationConfig)>/@parameter0
<org.jsonschema2pojo.rules.FormatRule: java.lang.Class getDateType(org.jsonschema2pojo.GenerationConfig)>/@parameter0
<org.jsonschema2pojo.rules.FormatRule: java.lang.Class getTimeType(org.jsonschema2pojo.GenerationConfig)>/@parameter0
<org.jsonschema2pojo.rules.FormatRule: java.lang.Object apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,java.lang.Object,org.jsonschema2pojo.Schema)>/@parameter3
<org.jsonschema2pojo.rules.FormatRule: java.lang.Object apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,java.lang.Object,org.jsonschema2pojo.Schema)>/@parameter4
<japa.parser.ast.expr.DoubleLiteralExpr: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<org.jsonschema2pojo.util.NameHelper: void <init>(org.jsonschema2pojo.GenerationConfig)>/@parameter0
<org.jsonschema2pojo.rules.JavaNameRule: com.sun.codemodel.JDocComment apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDocCommentable,org.jsonschema2pojo.Schema)>/@parameter4
<org.jsonschema2pojo.rules.JavaNameRule: java.lang.Object apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,java.lang.Object,org.jsonschema2pojo.Schema)>/@parameter4
<org.jsonschema2pojo.util.NameHelper: java.lang.String getGetterName(java.lang.String,com.sun.codemodel.JType,com.fasterxml.jackson.databind.JsonNode)>/@parameter1
<org.jsonschema2pojo.util.NameHelper: java.lang.String getBaseBuilderClassName(com.sun.codemodel.JClass)>/@parameter0
<org.jsonschema2pojo.util.NameHelper: java.lang.String getBaseBuilderClassNameSuffix(com.sun.codemodel.JClass)>/@parameter0
<org.jsonschema2pojo.util.NameHelper: java.lang.String getBuilderClassNameSuffix(com.sun.codemodel.JClass)>/@parameter0
<org.hamcrest.BaseDescription: org.hamcrest.Description appendValue(java.lang.Object)>/@parameter0
<org.hamcrest.BaseDescription: java.lang.String descriptionOf(java.lang.Object)>/@parameter0
<org.hamcrest.BaseDescription: void toJavaSyntax(java.lang.String)>/@parameter0
<japa.parser.ast.stmt.ContinueStmt: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<org.jsonschema2pojo.rules.NotRequiredRule: com.sun.codemodel.JDocCommentable apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDocCommentable,org.jsonschema2pojo.Schema)>/@parameter4
<org.jsonschema2pojo.rules.NotRequiredRule: java.lang.Object apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,java.lang.Object,org.jsonschema2pojo.Schema)>/@parameter4
<com.fasterxml.jackson.databind.type.PlaceholderForType: boolean equals(java.lang.Object)>/@parameter0
<org.jsonschema2pojo.rules.AdditionalPropertiesRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/@parameter4
<org.jsonschema2pojo.rules.AdditionalPropertiesRule: com.sun.codemodel.JFieldVar addAdditionalPropertiesField(com.sun.codemodel.JDefinedClass,com.sun.codemodel.JType)>/@parameter1
<org.jsonschema2pojo.rules.AdditionalPropertiesRule: void addSetter(com.sun.codemodel.JDefinedClass,com.sun.codemodel.JType,com.sun.codemodel.JFieldVar)>/@parameter1
<org.jsonschema2pojo.rules.AdditionalPropertiesRule: com.sun.codemodel.JMethod addBuilder(com.sun.codemodel.JDefinedClass,com.sun.codemodel.JType,com.sun.codemodel.JFieldVar)>/@parameter1
<org.jsonschema2pojo.rules.AdditionalPropertiesRule: com.sun.codemodel.JMethod addLegacyBuilder(com.sun.codemodel.JDefinedClass,com.sun.codemodel.JType,com.sun.codemodel.JFieldVar)>/@parameter1
<org.jsonschema2pojo.rules.AdditionalPropertiesRule: com.sun.codemodel.JMethod addInnerBuilder(com.sun.codemodel.JDefinedClass,com.sun.codemodel.JType,com.sun.codemodel.JFieldVar)>/@parameter1
<org.jsonschema2pojo.rules.AdditionalPropertiesRule: java.lang.Object apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,java.lang.Object,org.jsonschema2pojo.Schema)>/@parameter4
<org.hamcrest.TypeSafeDiagnosingMatcher: boolean matches(java.lang.Object)>/@parameter0
<org.hamcrest.TypeSafeDiagnosingMatcher: void describeMismatch(java.lang.Object,org.hamcrest.Description)>/@parameter0
<japa.parser.ast.body.VariableDeclaratorId: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<japa.parser.ast.type.PrimitiveType: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<japa.parser.ast.expr.ArrayCreationExpr: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<org.hamcrest.core.IsNot: boolean matches(java.lang.Object)>/@parameter0
<japa.parser.ast.body.EmptyMemberDeclaration: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<com.github.tomakehurst.wiremock.admin.RequestSpec: boolean equals(java.lang.Object)>/@parameter0
<org.jsonschema2pojo.rules.TypeRule: void <init>(org.jsonschema2pojo.rules.RuleFactory)>/@parameter0
<org.jsonschema2pojo.rules.TypeRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/@parameter4
<org.jsonschema2pojo.rules.TypeRule: com.sun.codemodel.JType unboxIfNecessary(com.sun.codemodel.JType,org.jsonschema2pojo.GenerationConfig)>/@parameter1
<org.jsonschema2pojo.rules.TypeRule: com.sun.codemodel.JType getIntegerType(com.sun.codemodel.JCodeModel,com.fasterxml.jackson.databind.JsonNode,org.jsonschema2pojo.GenerationConfig)>/@parameter2
<org.jsonschema2pojo.rules.TypeRule: com.sun.codemodel.JType getNumberType(com.sun.codemodel.JCodeModel,org.jsonschema2pojo.GenerationConfig)>/@parameter1
<org.jsonschema2pojo.rules.TypeRule: java.lang.Object apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,java.lang.Object,org.jsonschema2pojo.Schema)>/@parameter4
<japa.parser.ast.stmt.SwitchEntryStmt: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<com.fasterxml.jackson.databind.util.RawValue: boolean equals(java.lang.Object)>/@parameter0
<org.hamcrest.core.Is: boolean matches(java.lang.Object)>/@parameter0
<org.hamcrest.core.Is: void describeMismatch(java.lang.Object,org.hamcrest.Description)>/@parameter0
<org.hamcrest.core.Is: org.hamcrest.Matcher is(java.lang.Object)>/@parameter0
<japa.parser.ast.type.ReferenceType: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<japa.parser.ast.body.JavadocComment: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<org.jsonschema2pojo.SchemaStore: org.jsonschema2pojo.Schema create(org.jsonschema2pojo.Schema,java.lang.String,java.lang.String)>/@parameter0
<org.jsonschema2pojo.SchemaStore: boolean selfReferenceWithoutParentFile(org.jsonschema2pojo.Schema,java.lang.String)>/@parameter0
<com.fasterxml.jackson.databind.type.CollectionLikeType: boolean equals(java.lang.Object)>/@parameter0
<org.jsonschema2pojo.rules.MinimumMaximumRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/@parameter1
<org.jsonschema2pojo.rules.MinimumMaximumRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/@parameter3
<org.jsonschema2pojo.rules.MinimumMaximumRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/@parameter4
<org.jsonschema2pojo.rules.MinimumMaximumRule: boolean isApplicableType(com.sun.codemodel.JFieldVar)>/@parameter0
<org.jsonschema2pojo.rules.MinimumMaximumRule: java.lang.Object apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,java.lang.Object,org.jsonschema2pojo.Schema)>/@parameter4
<japa.parser.ast.stmt.TryStmt: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<japa.parser.ast.expr.UnaryExpr: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<japa.parser.ast.stmt.CatchClause: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<org.jsonschema2pojo.SourceSortOrder$3$1: int compare(java.io.File,java.io.File)>/@parameter0
<org.jsonschema2pojo.SourceSortOrder$3$1: int compare(java.io.File,java.io.File)>/@parameter1
<org.jsonschema2pojo.SourceSortOrder$3$1: int compare(java.lang.Object,java.lang.Object)>/@parameter0
<org.jsonschema2pojo.SourceSortOrder$3$1: int compare(java.lang.Object,java.lang.Object)>/@parameter1
<japa.parser.ast.expr.ArrayInitializerExpr: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<japa.parser.ast.stmt.EmptyStmt: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<org.mockito.internal.verification.MockAwareVerificationMode: void <init>(java.lang.Object,org.mockito.verification.VerificationMode,java.util.Set)>/@parameter0
<org.hamcrest.core.IsSame: void <init>(java.lang.Object)>/@parameter0
<org.hamcrest.core.IsSame: boolean matches(java.lang.Object)>/@parameter0
<org.hamcrest.core.IsSame: org.hamcrest.Matcher sameInstance(java.lang.Object)>/@parameter0
<japa.parser.ast.body.EmptyTypeDeclaration: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<com.fasterxml.jackson.databind.type.ArrayType: boolean equals(java.lang.Object)>/@parameter0
<japa.parser.ast.stmt.SwitchStmt: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<org.jsonschema2pojo.SchemaMapper: void <init>(org.jsonschema2pojo.rules.RuleFactory,org.jsonschema2pojo.SchemaGenerator)>/@parameter0
<org.jsonschema2pojo.SchemaMapper: void <init>(org.jsonschema2pojo.rules.RuleFactory,org.jsonschema2pojo.SchemaGenerator)>/@parameter1
<com.fasterxml.jackson.databind.node.POJONode: boolean equals(java.lang.Object)>/@parameter0
<com.fasterxml.jackson.databind.node.POJONode: boolean _pojoEquals(com.fasterxml.jackson.databind.node.POJONode)>/@parameter0
<japa.parser.ast.stmt.ThrowStmt: java.lang.Object accept(japa.parser.ast.visitor.GenericVisitor,java.lang.Object)>/@parameter1
<org.jsonschema2pojo.rules.PropertyRule: com.sun.codemodel.JType getReturnType(com.sun.codemodel.JDefinedClass,com.sun.codemodel.JFieldVar,boolean,boolean)>/returnType#_211
<org.jsonschema2pojo.rules.DigitsRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/$stack8
<org.jsonschema2pojo.rules.DigitsRule: boolean isApplicableType(com.sun.codemodel.JFieldVar)>/$stack3
<org.jsonschema2pojo.rules.DigitsRule: java.lang.Object apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,java.lang.Object,org.jsonschema2pojo.Schema)>/$stack7
<org.jsonschema2pojo.rules.PatternRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/$stack8
<org.jsonschema2pojo.rules.PatternRule: boolean isApplicableType(com.sun.codemodel.JFieldVar)>/$stack3
<org.jsonschema2pojo.rules.PatternRule: java.lang.Object apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,java.lang.Object,org.jsonschema2pojo.Schema)>/$stack7
<com.sun.codemodel.JNarrowedClass: com.sun.codemodel.JClass _extends()>/base#_166
<org.jsonschema2pojo.rules.DynamicPropertiesRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/$stack10
<org.jsonschema2pojo.rules.DynamicPropertiesRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/$stack13
<org.jsonschema2pojo.rules.DynamicPropertiesRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/$stack39
<org.jsonschema2pojo.rules.DynamicPropertiesRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/$stack46
<org.jsonschema2pojo.rules.DynamicPropertiesRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/$stack16
<org.jsonschema2pojo.rules.DynamicPropertiesRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/$stack19
<org.jsonschema2pojo.rules.DynamicPropertiesRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/$stack22
<com.sun.codemodel.JMethod: boolean hasSignature(com.sun.codemodel.JType[])>/$stack9
<org.jsonschema2pojo.util.ReflectionHelper: org.jsonschema2pojo.Schema getSuperSchema(com.fasterxml.jackson.databind.JsonNode,org.jsonschema2pojo.Schema,boolean)>/$stack17
<org.jsonschema2pojo.util.ReflectionHelper: org.jsonschema2pojo.Schema getSuperSchema(com.fasterxml.jackson.databind.JsonNode,org.jsonschema2pojo.Schema,boolean)>/$stack19
<org.jsonschema2pojo.util.ReflectionHelper: com.sun.codemodel.JDefinedClass definedClassOrNullFromType(com.sun.codemodel.JType)>/$stack19
<org.jsonschema2pojo.util.ReflectionHelper: org.jsonschema2pojo.Schema resolveSchemaRefsRecursive(org.jsonschema2pojo.Schema)>/$stack6
<org.jsonschema2pojo.util.ReflectionHelper: org.jsonschema2pojo.Schema resolveSchemaRefsRecursive(org.jsonschema2pojo.Schema)>/$stack10
<org.jsonschema2pojo.rules.SchemaRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/$stack24
<org.jsonschema2pojo.rules.SchemaRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/$stack28
<org.jsonschema2pojo.rules.SchemaRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/$stack40
<org.jsonschema2pojo.rules.SchemaRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/$stack33
<org.jsonschema2pojo.rules.SchemaRule: java.lang.Object apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,java.lang.Object,org.jsonschema2pojo.Schema)>/$stack7
<org.jsonschema2pojo.rules.RequiredRule: com.sun.codemodel.JDocCommentable apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDocCommentable,org.jsonschema2pojo.Schema)>/$stack17
<org.jsonschema2pojo.rules.RequiredRule: com.sun.codemodel.JDocCommentable apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDocCommentable,org.jsonschema2pojo.Schema)>/$stack20
<org.jsonschema2pojo.rules.RequiredRule: com.sun.codemodel.JDocCommentable apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDocCommentable,org.jsonschema2pojo.Schema)>/$stack8
<org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>/$stack3
<org.mockito.Mockito: java.lang.Object verify(java.lang.Object,org.mockito.verification.VerificationMode)>/$stack3
<org.jsonschema2pojo.rules.PropertiesRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/$stack11
<org.jsonschema2pojo.rules.PropertiesRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/$stack15
<org.jsonschema2pojo.rules.PropertiesRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/$stack23
<org.jsonschema2pojo.rules.PropertiesRule: void addOverrideBuilder(com.sun.codemodel.JDefinedClass,com.sun.codemodel.JMethod,com.sun.codemodel.JVar)>/$stack10
<org.jsonschema2pojo.Jackson2Annotator: void propertyField(com.sun.codemodel.JFieldVar,com.sun.codemodel.JDefinedClass,java.lang.String,com.fasterxml.jackson.databind.JsonNode)>/$stack7
<org.jsonschema2pojo.Jackson2Annotator: void propertyField(com.sun.codemodel.JFieldVar,com.sun.codemodel.JDefinedClass,java.lang.String,com.fasterxml.jackson.databind.JsonNode)>/$stack9
<org.jsonschema2pojo.Jackson2Annotator: void propertyField(com.sun.codemodel.JFieldVar,com.sun.codemodel.JDefinedClass,java.lang.String,com.fasterxml.jackson.databind.JsonNode)>/$stack22
<org.mockito.internal.listeners.VerificationStartedNotifier: java.lang.Object notifyVerificationStarted(java.util.List,org.mockito.MockingDetails)>/$stack12
<org.mockito.internal.listeners.VerificationStartedNotifier: java.lang.Object notifyVerificationStarted(java.util.List,org.mockito.MockingDetails)>/$stack9
<org.jsonschema2pojo.Jackson2Annotator: void dateField(com.sun.codemodel.JFieldVar,com.sun.codemodel.JDefinedClass,com.fasterxml.jackson.databind.JsonNode)>/$stack12
<org.jsonschema2pojo.Jackson2Annotator: void timeField(com.sun.codemodel.JFieldVar,com.sun.codemodel.JDefinedClass,com.fasterxml.jackson.databind.JsonNode)>/$stack12
<org.jsonschema2pojo.Jackson2Annotator: void dateTimeField(com.sun.codemodel.JFieldVar,com.sun.codemodel.JDefinedClass,com.fasterxml.jackson.databind.JsonNode)>/$stack14
<org.jsonschema2pojo.rules.MinLengthMaxLengthRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/$stack8
<org.jsonschema2pojo.rules.MinLengthMaxLengthRule: boolean isApplicableType(com.sun.codemodel.JFieldVar)>/$stack5
<org.jsonschema2pojo.rules.MinLengthMaxLengthRule: boolean isApplicableType(com.sun.codemodel.JFieldVar)>/$stack18
<org.jsonschema2pojo.rules.MinLengthMaxLengthRule: java.lang.Object apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,java.lang.Object,org.jsonschema2pojo.Schema)>/$stack7
<org.jsonschema2pojo.rules.ConstructorRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/generationConfig#_61
<org.jsonschema2pojo.rules.ConstructorRule: void handleMultiChoiceConstructorConfiguration(com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/generationConfig#_102
<org.jsonschema2pojo.rules.ConstructorRule: void addFieldsConstructor(com.sun.codemodel.JDefinedClass,java.util.Set,java.util.Set)>/generationConfig#_143
<org.jsonschema2pojo.rules.ConstructorRule: void addCopyConstructor(com.sun.codemodel.JDefinedClass,java.util.Set,java.util.Set)>/generationConfig#_158
<org.jsonschema2pojo.rules.ConstructorRule: com.sun.codemodel.JMethod generateFieldsConstructor(com.sun.codemodel.JDefinedClass,java.util.Set,java.util.Set)>/generationConfig#_346
<org.jsonschema2pojo.rules.FormatRuleTest: void applyGeneratesTypeFromFormatValue()>/result#_79
<org.jsonschema2pojo.rules.RequiredArrayRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/$stack28
<org.jsonschema2pojo.rules.RequiredArrayRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/$stack31
<org.jsonschema2pojo.rules.DefaultRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/$stack8
<org.jsonschema2pojo.rules.DefaultRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/$stack33
<org.jsonschema2pojo.rules.DefaultRule: com.sun.codemodel.JExpression getDefaultList(com.sun.codemodel.JType,com.fasterxml.jackson.databind.JsonNode)>/$stack18
<org.jsonschema2pojo.rules.DefaultRule: com.sun.codemodel.JExpression getDefaultSet(com.sun.codemodel.JType,com.fasterxml.jackson.databind.JsonNode)>/$stack18
<org.mockito.internal.listeners.VerificationStartedNotifier$Event: void <init>(org.mockito.MockingDetails)>/$stack2
<org.jsonschema2pojo.rules.EnumRuleTest: void applyGeneratesUniqueEnumNamesForMultipleEnumNodesWithSameName()>/result1#_83
<org.jsonschema2pojo.rules.EnumRuleTest: void applyGeneratesUniqueEnumNamesForMultipleEnumNodesWithSameName()>/result2#_84
<org.jsonschema2pojo.rules.MediaRule: java.lang.Object apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,java.lang.Object,org.jsonschema2pojo.Schema)>/$stack7
<org.jsonschema2pojo.rules.MinItemsMaxItemsRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/$stack8
<org.jsonschema2pojo.rules.MinItemsMaxItemsRule: boolean isApplicableType(com.sun.codemodel.JFieldVar)>/$stack5
<org.jsonschema2pojo.rules.MinItemsMaxItemsRule: boolean isApplicableType(com.sun.codemodel.JFieldVar)>/$stack18
<org.jsonschema2pojo.rules.MinItemsMaxItemsRule: java.lang.Object apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,java.lang.Object,org.jsonschema2pojo.Schema)>/$stack7
<org.jsonschema2pojo.rules.PropertyRuleTest: java.lang.String getGeneratedMethodTypeName(com.sun.codemodel.JDefinedClass)>/$stack4
<org.jsonschema2pojo.rules.EnumRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/$stack88
<org.jsonschema2pojo.rules.EnumRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/$stack24
<org.jsonschema2pojo.rules.EnumRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/$stack42
<org.jsonschema2pojo.rules.EnumRule: org.jsonschema2pojo.model.EnumDefinition buildEnumDefinition(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JType)>/logger#_240
<org.jsonschema2pojo.rules.EnumRule: org.jsonschema2pojo.model.EnumDefinition buildEnumDefinitionWithJavaEnumsExtension(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JType)>/$stack37
<org.jsonschema2pojo.rules.EnumRule: com.sun.codemodel.JFieldVar addQuickLookupMap(org.jsonschema2pojo.model.EnumDefinition,com.sun.codemodel.JDefinedClass)>/backingType#_423
<org.jsonschema2pojo.rules.EnumRule: java.lang.Object apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,java.lang.Object,org.jsonschema2pojo.Schema)>/$stack7
<org.jsonschema2pojo.rules.ObjectRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JPackage,org.jsonschema2pojo.Schema)>/$stack21
<org.jsonschema2pojo.rules.ObjectRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JPackage,org.jsonschema2pojo.Schema)>/$stack87
<org.jsonschema2pojo.rules.ObjectRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JPackage,org.jsonschema2pojo.Schema)>/$stack38
<org.jsonschema2pojo.rules.ObjectRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JPackage,org.jsonschema2pojo.Schema)>/$stack41
<org.jsonschema2pojo.rules.ObjectRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JPackage,org.jsonschema2pojo.Schema)>/$stack44
<org.jsonschema2pojo.rules.ObjectRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JPackage,org.jsonschema2pojo.Schema)>/$stack47
<org.jsonschema2pojo.rules.ObjectRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JPackage,org.jsonschema2pojo.Schema)>/$stack50
<org.jsonschema2pojo.rules.ObjectRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JPackage,org.jsonschema2pojo.Schema)>/$stack53
<org.jsonschema2pojo.rules.ObjectRule: void addParcelSupport(com.sun.codemodel.JDefinedClass)>/$stack10
<org.jsonschema2pojo.rules.ObjectRule: com.sun.codemodel.JDefinedClass createClass(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JPackage)>/$stack41
<org.jsonschema2pojo.rules.ObjectRule: com.sun.codemodel.JDefinedClass createClass(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JPackage)>/$stack47
<org.jsonschema2pojo.util.ParcelableHelper: void addWriteToParcel(com.sun.codemodel.JDefinedClass)>/$stack22
<org.jsonschema2pojo.util.ParcelableHelper: void addConstructorFromParcel(com.sun.codemodel.JDefinedClass)>/$stack19
<org.jsonschema2pojo.util.ParcelableHelper: void addConstructorFromParcel(com.sun.codemodel.JDefinedClass)>/$stack29
<org.jsonschema2pojo.util.ParcelableHelper: boolean extendsParcelable(com.sun.codemodel.JDefinedClass)>/$stack4
<org.jsonschema2pojo.util.ParcelableHelper: boolean extendsParcelable(com.sun.codemodel.JDefinedClass)>/$stack12
<org.jsonschema2pojo.rules.ObjectRule: void addToString(com.sun.codemodel.JDefinedClass)>/$stack18
<org.jsonschema2pojo.rules.ObjectRule: void addToString(com.sun.codemodel.JDefinedClass)>/$stack49
<org.jsonschema2pojo.rules.ObjectRule: void addToString(com.sun.codemodel.JDefinedClass)>/$stack96
<org.jsonschema2pojo.rules.ObjectRule: void addToString(com.sun.codemodel.JDefinedClass)>/$stack98
<org.jsonschema2pojo.rules.ObjectRule: void addToString(com.sun.codemodel.JDefinedClass)>/$stack115
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesString()>/result#_63
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesInteger()>/result#_97
<org.jsonschema2pojo.rules.ObjectRule: void addHashCode(com.sun.codemodel.JDefinedClass,com.fasterxml.jackson.databind.JsonNode)>/$stack48
<org.jsonschema2pojo.rules.ObjectRule: void addHashCode(com.sun.codemodel.JDefinedClass,com.fasterxml.jackson.databind.JsonNode)>/$stack76
<org.jsonschema2pojo.rules.ObjectRule: void addHashCode(com.sun.codemodel.JDefinedClass,com.fasterxml.jackson.databind.JsonNode)>/$stack80
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesIntegerPrimitive()>/result#_112
<org.jsonschema2pojo.rules.ObjectRule: void addHashCode(com.sun.codemodel.JDefinedClass,com.fasterxml.jackson.databind.JsonNode)>/$stack84
<org.jsonschema2pojo.rules.ObjectRule: void addHashCode(com.sun.codemodel.JDefinedClass,com.fasterxml.jackson.databind.JsonNode)>/$stack88
<org.jsonschema2pojo.rules.ObjectRule: void addHashCode(com.sun.codemodel.JDefinedClass,com.fasterxml.jackson.databind.JsonNode)>/$stack92
<org.jsonschema2pojo.rules.ObjectRule: void addHashCode(com.sun.codemodel.JDefinedClass,com.fasterxml.jackson.databind.JsonNode)>/$stack50
<org.jsonschema2pojo.rules.ObjectRule: void addHashCode(com.sun.codemodel.JDefinedClass,com.fasterxml.jackson.databind.JsonNode)>/$stack62
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesIntegerUsingJavaTypeIntegerPrimitive()>/result#_128
<org.jsonschema2pojo.rules.ObjectRule: void addHashCode(com.sun.codemodel.JDefinedClass,com.fasterxml.jackson.databind.JsonNode)>/$stack26
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesBigInteger()>/result#_143
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesBigIntegerOverridingLong()>/result#_160
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesBigDecimal()>/result#_175
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesBigDecimalOverridingDouble()>/result#_192
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesIntegerUsingJavaTypeInteger()>/result#_209
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesIntegerUsingJavaTypeLongPrimitive()>/result#_225
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesIntegerUsingJavaTypeLong()>/result#_241
<org.jsonschema2pojo.rules.ObjectRule: void addEquals(com.sun.codemodel.JDefinedClass,com.fasterxml.jackson.databind.JsonNode)>/$stack36
<org.jsonschema2pojo.rules.ObjectRule: void addEquals(com.sun.codemodel.JDefinedClass,com.fasterxml.jackson.databind.JsonNode)>/$stack53
<org.jsonschema2pojo.rules.ObjectRule: void addEquals(com.sun.codemodel.JDefinedClass,com.fasterxml.jackson.databind.JsonNode)>/$stack78
<org.jsonschema2pojo.rules.ObjectRule: void addEquals(com.sun.codemodel.JDefinedClass,com.fasterxml.jackson.databind.JsonNode)>/$stack82
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesIntegerUsingJavaTypeLongPrimitiveWhenMaximumGreaterThanIntegerMax()>/result#_257
<org.jsonschema2pojo.rules.ObjectRule: void addEquals(com.sun.codemodel.JDefinedClass,com.fasterxml.jackson.databind.JsonNode)>/$stack55
<org.jsonschema2pojo.rules.ObjectRule: void addEquals(com.sun.codemodel.JDefinedClass,com.fasterxml.jackson.databind.JsonNode)>/$stack66
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesIntegerUsingJavaTypeLongWhenMaximumGreaterThanIntegerMax()>/result#_273
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesIntegerUsingJavaTypeLongPrimitiveWhenMaximumLessThanIntegerMin()>/result#_289
<org.jsonschema2pojo.rules.ObjectRule: java.lang.Object apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,java.lang.Object,org.jsonschema2pojo.Schema)>/$stack7
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesIntegerUsingJavaTypeLongWhenMaximumLessThanIntegerMin()>/result#_305
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesIntegerUsingJavaTypeLongPrimitiveWhenMinimumLessThanIntegerMin()>/result#_321
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesIntegerUsingJavaTypeLongWhenMinimumLessThanIntegerMin()>/result#_337
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesIntegerUsingJavaTypeLongPrimitiveWhenMinimumGreaterThanIntegerMax()>/result#_353
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesIntegerUsingJavaTypeLongWhenMinimumGreaterThanIntegerMax()>/result#_369
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesIntegerUsingJavaTypeBigInteger()>/result#_383
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesNumber()>/result#_398
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesNumberPrimitive()>/result#_414
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesNumberUsingJavaTypeFloatPrimitive()>/result#_430
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesNumberUsingJavaTypeFloat()>/result#_446
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesNumberUsingJavaTypeDoublePrimitive()>/result#_462
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesNumberUsingJavaTypeDouble()>/result#_478
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesNumberUsingJavaTypeBigDecimal()>/result#_492
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesBoolean()>/result#_505
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesBooleanPrimitive()>/result#_520
<org.jsonschema2pojo.Schema: void setJavaTypeIfEmpty(com.sun.codemodel.JType)>/$stack2
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesAnyAsObject()>/result#_533
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesNullAsObject()>/result#_546
<org.jsonschema2pojo.rules.TypeRuleTest: void applyChoosesObjectOnUnrecognizedType()>/result#_595
<org.jsonschema2pojo.rules.TypeRuleTest: void applyDefaultsToTypeAnyObject()>/result#_608
<org.jsonschema2pojo.SourceSortOrderTest: java.io.File mockFile()>/$stack1
<org.jsonschema2pojo.SourceSortOrderTest: java.io.File mockDirectory()>/$stack1
<org.jsonschema2pojo.util.SerializableHelper: void processMethodCollectionForSerializableSupport(java.util.Iterator,java.io.DataOutputStream)>/$stack16
<org.jsonschema2pojo.util.SerializableHelper: void processMethodCollectionForSerializableSupport(java.util.Iterator,java.io.DataOutputStream)>/$stack25
<org.jsonschema2pojo.util.SerializableHelper: void processMethodCollectionForSerializableSupport(java.util.Iterator,java.io.DataOutputStream)>/$stack22
<org.jsonschema2pojo.util.SerializableHelper: void processDefinedClassForSerializableSupport(com.sun.codemodel.JDefinedClass,java.io.DataOutputStream)>/$stack30
<org.jsonschema2pojo.util.SerializableHelper: void processDefinedClassForSerializableSupport(com.sun.codemodel.JDefinedClass,java.io.DataOutputStream)>/$stack34
<org.jsonschema2pojo.util.SerializableHelper: void processFieldVarForSerializableSupport(com.sun.codemodel.JFieldVar,java.io.DataOutputStream)>/type#_151
<org.jsonschema2pojo.rules.FormatRulePrimitivesTest: void usePrimitivesWithCustomTypeMapping()>/result#_76
<org.jsonschema2pojo.rules.ValidRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/$stack7
<org.jsonschema2pojo.rules.PropertyRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/$stack20
<org.jsonschema2pojo.rules.PropertyRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/$stack23
<org.jsonschema2pojo.rules.PropertyRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/$stack30
<org.jsonschema2pojo.rules.PropertyRule: com.fasterxml.jackson.databind.JsonNode resolveRefs(com.fasterxml.jackson.databind.JsonNode,org.jsonschema2pojo.Schema)>/$stack7
<org.jsonschema2pojo.rules.PropertyRule: com.fasterxml.jackson.databind.JsonNode resolveRefs(com.fasterxml.jackson.databind.JsonNode,org.jsonschema2pojo.Schema)>/$stack11
<org.jsonschema2pojo.rules.PropertyRule: com.sun.codemodel.JType getReturnType(com.sun.codemodel.JDefinedClass,com.sun.codemodel.JFieldVar,boolean,boolean)>/$stack8
<org.jsonschema2pojo.rules.PropertyRule: com.sun.codemodel.JType getReturnType(com.sun.codemodel.JDefinedClass,com.sun.codemodel.JFieldVar,boolean,boolean)>/$stack10
<org.jsonschema2pojo.rules.PropertyRule: com.sun.codemodel.JMethod addGetter(com.sun.codemodel.JDefinedClass,com.sun.codemodel.JFieldVar,java.lang.String,com.fasterxml.jackson.databind.JsonNode,boolean,boolean)>/$stack17
<org.jsonschema2pojo.rules.PropertyRule: com.sun.codemodel.JMethod addGetter(com.sun.codemodel.JDefinedClass,com.sun.codemodel.JFieldVar,java.lang.String,com.fasterxml.jackson.databind.JsonNode,boolean,boolean)>/$stack19
<org.jsonschema2pojo.rules.PropertyRule: com.sun.codemodel.JMethod addBuilderMethod(com.sun.codemodel.JDefinedClass,com.sun.codemodel.JFieldVar,java.lang.String,com.fasterxml.jackson.databind.JsonNode)>/$stack7
<org.jsonschema2pojo.rules.FormatRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JType,org.jsonschema2pojo.Schema)>/$stack13
<org.jsonschema2pojo.rules.FormatRule: java.lang.Object apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,java.lang.Object,org.jsonschema2pojo.Schema)>/$stack7
<org.jsonschema2pojo.rules.FormatRuleJodaTest: void applyGeneratesTypeFromFormatValue()>/result#_76
<org.jsonschema2pojo.rules.NotRequiredRule: com.sun.codemodel.JDocCommentable apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDocCommentable,org.jsonschema2pojo.Schema)>/$stack12
<org.jsonschema2pojo.rules.AdditionalPropertiesRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/$stack9
<org.jsonschema2pojo.rules.AdditionalPropertiesRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/$stack19
<org.jsonschema2pojo.rules.AdditionalPropertiesRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/$stack22
<org.jsonschema2pojo.rules.AdditionalPropertiesRule: com.sun.codemodel.JMethod addBuilder(com.sun.codemodel.JDefinedClass,com.sun.codemodel.JType,com.sun.codemodel.JFieldVar)>/$stack6
<org.jsonschema2pojo.rules.TypeRule: java.lang.Object apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,java.lang.Object,org.jsonschema2pojo.Schema)>/$stack7
<org.jsonschema2pojo.rules.MinimumMaximumRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/$stack8
<org.jsonschema2pojo.rules.MinimumMaximumRule: boolean isApplicableType(com.sun.codemodel.JFieldVar)>/$stack3
<org.jsonschema2pojo.rules.MinimumMaximumRule: java.lang.Object apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,java.lang.Object,org.jsonschema2pojo.Schema)>/$stack7
<org.jsonschema2pojo.rules.FormatRuleArraysTest: void useArraysWithCustomTypeMapping()>/result#_65
