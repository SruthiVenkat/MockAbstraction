<org.springframework.beans.factory.xml.DefaultDocumentLoader: org.w3c.dom.Document loadDocument(org.xml.sax.InputSource,org.xml.sax.EntityResolver,org.xml.sax.ErrorHandler,int,boolean)>/factory#_70
<org.springframework.beans.factory.xml.DefaultDocumentLoader: javax.xml.parsers.DocumentBuilderFactory createDocumentBuilderFactory(int,boolean)>/factory#_89
<org.picocontainer.injectors.IterativeInjector: java.lang.Object decorateComponentInstance(org.picocontainer.Parameter[],org.picocontainer.ComponentMonitor,java.lang.Object,org.picocontainer.PicoContainer,org.picocontainer.PicoContainer)>/toInject#_171
<javassist.bytecode.stackmap.MapMaker: javassist.bytecode.StackMapTable make(javassist.ClassPool,javassist.bytecode.MethodInfo)>/blocks#_91
<javassist.bytecode.stackmap.MapMaker: javassist.bytecode.StackMap make2(javassist.ClassPool,javassist.bytecode.MethodInfo)>/blocks#_112
<br.com.caelum.iogi.reflection.ParanamerParameterNamesProvider: java.util.List lookupParameterNames(java.lang.reflect.AccessibleObject)>/$stack3
<br.com.caelum.vraptor.http.ParanamerNameProvider: java.lang.String[] parameterNamesFor(java.lang.reflect.AccessibleObject)>/parameterNames#_49
<org.mockito.cglib.core.DefaultGeneratorStrategy: byte[] generate(org.mockito.cglib.core.ClassGenerator)>/$stack5
<br.com.caelum.vraptor.validator.MethodValidatorInterceptor: void intercept(br.com.caelum.vraptor.core.InterceptorStack,br.com.caelum.vraptor.resource.ResourceMethod,java.lang.Object)>/paramNames#_86
<sun.misc.JarIndex: void <clinit>()>/$stack2
<ognl.OgnlRuntime: java.lang.Object getIndexedProperty(ognl.OgnlContext,java.lang.Object,java.lang.String,java.lang.Object)>/args#_2260
<br.com.caelum.iogi.parameters.Parameter: com.google.common.collect.ImmutableList computeNameComponents(java.lang.String)>/$stack1
<sun.security.pkcs.PKCS9Attributes: byte[] generateDerEncoding()>/l2#_245
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void applyPropertyValues(java.lang.String,org.springframework.beans.factory.config.BeanDefinition,org.springframework.beans.BeanWrapper,org.springframework.beans.PropertyValues)>/$stack21
<br.com.caelum.vraptor.http.route.DefaultRouteBuilder: void addParametersInfo(java.lang.reflect.Method)>/parameters#_186
<sun.misc.ExtensionDependency: boolean checkExtensionAgainstInstalled(java.lang.String,java.util.jar.Attributes)>/l3#_217
<org.springframework.core.convert.TypeDescriptor: boolean equals(java.lang.Object)>/$stack22
<org.springframework.core.convert.TypeDescriptor: boolean equals(java.lang.Object)>/$stack23
<org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean matchesBeanName(java.lang.String,java.lang.String)>/$stack4
<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String toString()>/$stack6
<org.picocontainer.injectors.IterativeInjector$3: java.lang.Object run(java.lang.Object)>/matchingParameters#_229
<javax.xml.parsers.FactoryFinder: java.lang.Class getProviderClass(java.lang.String,java.lang.ClassLoader,boolean,boolean)>/cl#2#_108
<javax.xml.parsers.FactoryFinder: java.lang.Object find(java.lang.Class,java.lang.String)>/systemProp#_229
<javax.xml.parsers.FactoryFinder: java.lang.Object find(java.lang.Class,java.lang.String)>/$stack41
<javax.xml.parsers.FactoryFinder: void <clinit>()>/val#_74
<org.picocontainer.injectors.IterativeInjector$2: java.lang.Object run(java.lang.Object)>/matchingParameters#_153
<org.picocontainer.injectors.MethodInjector$2: java.lang.Object run(java.lang.Object)>/methodParameters#_124
<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.ClassSignature parseClassSignature()>/$stack2
<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.ClassSignature parseClassSignature()>/$stack4
<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.FormalTypeParameter parseFormalTypeParameter()>/l2#_250
<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.SimpleClassTypeSignature parsePackageNameAndSimpleClassTypeSignature()>/$stack7
<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.SimpleClassTypeSignature parseSimpleClassTypeSignature(boolean)>/$stack6
<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.MethodTypeSignature parseMethodTypeSignature()>/$stack3
<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.MethodTypeSignature parseMethodTypeSignature()>/$stack4
<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.MethodTypeSignature parseMethodTypeSignature()>/$stack6
<org.springframework.beans.propertyeditors.StringArrayPropertyEditor: void setAsText(java.lang.String)>/array#_126
<org.springframework.expression.spel.ast.FunctionReference: org.springframework.expression.TypedValue executeFunctionJLRMethod(org.springframework.expression.spel.ExpressionState,java.lang.reflect.Method)>/functionArgs#_84
<org.springframework.beans.factory.BeanFactoryUtils: java.lang.String[] beanNamesForTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class)>/result#_142
<org.springframework.beans.factory.BeanFactoryUtils: java.lang.String[] beanNamesForTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,boolean,boolean)>/result#_185
<br.com.caelum.vraptor.http.ognl.ReflectionBasedNullHandlerTest: void shouldNotInstantiateIfLastTerm()>/$stack12
<org.springframework.beans.AbstractPropertyAccessor: void setPropertyValues(org.springframework.beans.PropertyValues,boolean,boolean)>/$stack10
<org.springframework.beans.factory.support.AbstractBeanDefinitionReader: int loadBeanDefinitions(java.lang.String,java.util.Set)>/resources#_177
<org.picocontainer.injectors.ConstructorInjector$1: java.lang.Object run(java.lang.Object)>/ctorParameters#_325
<com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet copyFromCollection(java.util.Collection)>/elements#_334
<java.lang.invoke.MethodType: java.lang.invoke.MethodType methodType(java.lang.Class,java.util.List)>/$stack3
<java.lang.invoke.MethodType: java.lang.invoke.MethodType insertParameterTypes(int,java.util.List)>/$stack3
<java.lang.invoke.MethodType: java.lang.invoke.MethodType fromMethodDescriptorString(java.lang.String,java.lang.ClassLoader)>/l4#_1070
<br.com.caelum.vraptor.http.ognl.ArrayAccessorTest: void settingShouldNullifyUpToIndexAndIgnoreRemoval()>/$stack16
<sun.reflect.annotation.AnnotationParser: java.util.Map parseAnnotations2(byte[],sun.reflect.ConstantPool,java.lang.Class,java.lang.Class[])>/l8#_120
<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>/contextClassLoader#_423
<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>/useTCCLStr_$$A_2#_489
<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>/result#_1062
<java.io.PrintStream: void <init>(java.io.OutputStream,boolean,java.lang.String)>/$stack6
<org.picocontainer.injectors.IterativeInjector: java.lang.Object getComponentInstance(org.picocontainer.PicoContainer,java.lang.reflect.Type)>/constructor#_149
<org.springframework.beans.factory.support.DisposableBeanAdapter: void destroy()>/processor#17#_202
<java.beans.Introspector: java.beans.BeanInfo getBeanInfo()>/l3#_427
<java.beans.Introspector: java.beans.BeanInfo getBeanInfo()>/l4#_428
<java.beans.Introspector: java.beans.BeanInfo getBeanInfo()>/l2#_426
<java.lang.StringCoding: char[] decode(java.lang.String,byte[],int,int)>/l6#_185
<java.lang.StringCoding: byte[] encode(java.lang.String,char[],int,int)>/l6#_336
<sun.nio.cs.StreamEncoder: sun.nio.cs.StreamEncoder forOutputStreamWriter(java.io.OutputStream,java.lang.Object,java.lang.String)>/$stack8
<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean maybeEatFunctionOrVar()>/args#_374
<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean maybeEatMethodOrProperty(boolean)>/args#_604
<sun.text.normalizer.UCharacterProperty: void <init>()>/l1#_348
<org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean isAutowireCandidate(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,org.springframework.beans.factory.config.DependencyDescriptor)>/$stack11
<sun.nio.cs.StreamDecoder: sun.nio.cs.StreamDecoder forInputStreamReader(java.io.InputStream,java.lang.Object,java.lang.String)>/$stack8
<org.springframework.core.io.support.ResourceArrayPropertyEditor: void setValue(java.lang.Object)>/$stack45
<sun.util.locale.provider.TimeZoneNameUtility: java.lang.String[][] getZoneStrings(java.util.Locale)>/l1_$$A_2#_69
<sun.text.normalizer.NormalizerImpl: void <init>()>/l1#_259
<java.security.AccessController: java.security.AccessControlContext createWrapper(java.security.DomainCombiner,java.lang.Class,java.security.AccessControlContext,java.security.AccessControlContext,java.security.Permission[])>/l5#_589
<sun.text.normalizer.UBiDiProps: void <init>()>/l1#_59
<javassist.bytecode.stackmap.BasicBlock$Maker: javassist.bytecode.stackmap.BasicBlock[] make(javassist.bytecode.CodeIterator,int,int,javassist.bytecode.ExceptionTable)>/bb#_161
<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>/useTCCLStr#16#_544
<org.apache.commons.logging.LogFactory: void initDiagnostics()>/dest#_1575
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.lang.Object[] toArray(java.lang.Object[])>/l2#_1682
<br.com.caelum.vraptor.scan.StandaloneClasspathResolver: void getPackagesFromPluginsJARs(java.util.List)>/$stack19
<javax.crypto.JceSecurity: java.lang.Exception getVerificationResult(java.security.Provider)>/l2#_184
<java.io.ObjectStreamClass$2: java.lang.Void run()>/$stack12
<ognl.OgnlRuntime: boolean setMethodValue(ognl.OgnlContext,java.lang.Object,java.lang.String,java.lang.Object,boolean)>/args#_1450
<ognl.OgnlRuntime: void setIndexedProperty(ognl.OgnlContext,java.lang.Object,java.lang.String,java.lang.Object,java.lang.Object)>/args#_2291
<org.picocontainer.injectors.MethodInjector$1: java.lang.Object run(java.lang.Object)>/methodParameters_$$A_1#_92
<ognl.ArrayPropertyAccessor: void setProperty(java.util.Map,java.lang.Object,java.lang.Object,java.lang.Object)>/convertedValue#_112
<ognl.OgnlOps: java.lang.Object convertValue(java.lang.Object,java.lang.Class,boolean)>/$stack148
<java.util.ArrayList: boolean addAll(java.util.Collection)>/l2#_577
<java.util.ArrayList: boolean addAll(int,java.util.Collection)>/l3#_603
<java.util.Vector: boolean addAll(java.util.Collection)>/l2#_884
<java.util.Vector: boolean addAll(int,java.util.Collection)>/l3#_958
<ognl.ASTCtor: java.lang.Object getValueBody(ognl.OgnlContext,java.lang.Object)>/$stack41
<java.lang.reflect.Constructor: sun.reflect.ConstructorAccessor acquireConstructorAccessor()>/l1_$$A_3#_460
<org.springframework.beans.propertyeditors.CharsetEditor: void setAsText(java.lang.String)>/$stack3
<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List)>/l6#_300
<sun.util.resources.LocaleData: boolean setSupplementary(java.lang.String,sun.util.resources.ParallelListResourceBundle)>/l5#_143
<org.mockito.internal.exceptions.base.ConditionalStackTraceFilter: void filter(java.lang.Throwable)>/filtered#_22
<org.springframework.context.support.AbstractRefreshableConfigApplicationContext: void setConfigLocation(java.lang.String)>/$stack2
<org.picocontainer.injectors.SingleMemberInjector: java.lang.Object getParameter(org.picocontainer.PicoContainer,java.lang.reflect.AccessibleObject,int,java.lang.reflect.Type,java.lang.annotation.Annotation,org.picocontainer.Parameter,org.picocontainer.ComponentAdapter)>/result#_76
<sun.reflect.ReflectionFactory: java.lang.reflect.Constructor generateConstructor(java.lang.Class,java.lang.reflect.Constructor)>/l3#_398
<com.thoughtworks.paranamer.CachingParanamer: java.lang.String[] lookupParameterNames(java.lang.reflect.AccessibleObject,boolean)>/names_$$A_1#_75
<org.springframework.core.io.support.ResourceArrayPropertyEditor: void setAsText(java.lang.String)>/$stack7
<org.picocontainer.paranamer.CachingParanamer: java.lang.String[] lookupParameterNames(java.lang.reflect.AccessibleObject,boolean)>/names#_76
<sun.reflect.annotation.AnnotationParser: java.lang.annotation.Annotation parseAnnotation2(java.nio.ByteBuffer,sun.reflect.ConstantPool,java.lang.Class,boolean,java.lang.Class[])>/l16#_286
<sun.util.logging.LoggingSupport: java.lang.String getSimpleFormat(boolean)>/$stack4
<java.lang.Thread: boolean auditSubclass(java.lang.Class)>/$stack3
<org.picocontainer.injectors.IterativeInjector: org.picocontainer.Parameter[] getMatchingParameterListForSetters(org.picocontainer.PicoContainer)>/$stack22
<sun.security.util.AbstractAlgorithmConstraints: java.lang.String[] getAlgorithms(java.lang.String)>/$stack5
<java.util.logging.LogManager: java.lang.String[] parseClassNames(java.lang.String)>/$stack13
<java.util.logging.Logger: java.util.ResourceBundle findSystemResourceBundle(java.util.Locale)>/$stack2
<javax.crypto.JceSecurity: java.net.URL getCodeBase(java.lang.Class)>/$stack11
<sun.security.util.SignatureFileVerifier: java.security.CodeSigner[] getSigners(sun.security.pkcs.SignerInfo[],sun.security.pkcs.PKCS7)>/$stack11
<java.security.AccessControlContext: void <init>(java.security.ProtectionDomain[])>/$stack13
<java.io.PrintWriter: void <init>(java.io.Writer,boolean)>/$stack4
<sun.security.x509.RDN: void <init>(java.lang.String,java.util.Map)>/$stack19
<java.io.FilePermission: void init(int)>/$stack9
<sun.security.jca.ProviderList: sun.security.jca.ProviderList getJarList(java.lang.String[])>/$stack14
<sun.util.resources.LocaleData: sun.util.resources.OpenListResourceBundle getCurrencyNames(java.util.Locale)>/$stack8
<sun.util.resources.LocaleData: sun.util.resources.TimeZoneNamesBundle getTimeZoneNames(java.util.Locale)>/$stack8
<sun.util.resources.LocaleData: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale)>/$stack3
<sun.util.resources.LocaleData: sun.util.resources.OpenListResourceBundle getSupplementary(java.lang.String,java.util.Locale)>/$stack3
<org.springframework.beans.CachedIntrospectionResults: boolean isClassLoaderAccepted(java.lang.ClassLoader)>/$stack10
<sun.misc.JarIndex: void read(java.io.InputStream)>/$stack13
<java.util.Formatter: java.util.Formatter$FormatString[] parse(java.lang.String)>/$stack12
<java.io.ObjectStreamClass$FieldReflector: void <init>(java.io.ObjectStreamField[])>/$stack18
<br.com.caelum.vraptor.interceptor.multipart.CommonsUploadMultipartInterceptor: void intercept(br.com.caelum.vraptor.core.InterceptorStack,br.com.caelum.vraptor.resource.ResourceMethod,java.lang.Object)>/$stack37
<sun.reflect.annotation.AnnotationType: void <init>(java.lang.Class)>/$stack12
<com.google.inject.internal.util.$ImmutableMap$Builder: com.google.inject.internal.util.$ImmutableMap fromEntryList(java.util.List)>/$stack10
<org.mockito.cglib.core.EmitUtils: void member_switch_helper(org.mockito.cglib.core.CodeEmitter,java.util.List,org.mockito.cglib.core.ObjectSwitchCallback,boolean)>/$stack19
<org.mockito.cglib.core.EmitUtils: void member_helper_type(org.mockito.cglib.core.CodeEmitter,java.util.List,org.mockito.cglib.core.ObjectSwitchCallback,org.mockito.cglib.core.EmitUtils$ParameterTyper,org.mockito.asm.Label,org.mockito.asm.Label,java.util.BitSet)>/$stack24
<sun.misc.Launcher$AppClassLoader: java.lang.ClassLoader getAppClassLoader(java.lang.ClassLoader)>/$stack6
<java.lang.String: java.lang.String[] split(java.lang.String,int)>/$stack37
<sun.misc.MetaIndex: void <init>(java.util.List,boolean)>/$stack4
<java.text.DecimalFormat: java.text.FieldPosition[] expandAffix(java.lang.String)>/$stack13
<org.picocontainer.injectors.AdaptingInjection: boolean injectionMethodAnnotated(java.lang.Class)>/$stack3
<org.picocontainer.injectors.AdaptingInjection: boolean injectionFieldAnnotated(java.lang.Class)>/$stack3
<sun.invoke.util.VerifyAccess: boolean isTypeVisible(java.lang.Class,java.lang.Class)>/$stack12
<sun.misc.ExtensionDependency: java.io.File checkExtensionExists(java.lang.String)>/$stack6
<sun.misc.ExtensionDependency: java.lang.Boolean addNewExtensionsToClassLoader(sun.misc.Launcher$ExtClassLoader)>/$stack13
<br.com.caelum.vraptor.view.DefaultAcceptHeaderToFormat: java.lang.String[] getOrderedMimeTypes(java.lang.String)>/$stack15
<sun.security.util.ResourcesMgr: java.lang.String getString(java.lang.String)>/$stack5
<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.Object getBean(java.lang.Class)>/$stack41
<org.springframework.beans.factory.support.ConstructorResolver: org.springframework.beans.BeanWrapper instantiateUsingFactoryMethod(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])>/$stack53
<org.springframework.beans.factory.support.ConstructorResolver: org.springframework.beans.BeanWrapper instantiateUsingFactoryMethod(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])>/$stack190
<javax.xml.parsers.SecuritySupport: java.lang.String getSystemProperty(java.lang.String)>/$stack3
<javax.xml.parsers.SecuritySupport: boolean doesFileExist(java.io.File)>/$stack3
<sun.text.normalizer.ICUData: java.io.InputStream getStream(java.lang.Class,java.lang.String,boolean)>/$stack12
<sun.security.x509.X500Name: void parseDN(java.lang.String,java.util.Map)>/$stack47
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.lang.String[] getDependenciesForBean(java.lang.String)>/$stack7
<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/$stack28
<org.mockito.cglib.proxy.MethodInterceptorGenerator: void generateFindProxy(org.mockito.cglib.core.ClassEmitter,java.util.Map)>/$stack12
<java.util.Locale: java.util.Locale initDefault(java.util.Locale$Category)>/$stack5
<java.util.Locale: java.util.Locale initDefault(java.util.Locale$Category)>/$stack11
<java.util.Locale: java.util.Locale initDefault(java.util.Locale$Category)>/$stack17
<java.util.Locale: java.util.Locale initDefault(java.util.Locale$Category)>/$stack23
<java.util.logging.Logger$SystemLoggerHelper: boolean getBooleanProperty(java.lang.String)>/$stack3
<sun.reflect.MethodAccessorGenerator: sun.reflect.ConstructorAccessor generateConstructor(java.lang.Class,java.lang.Class[],java.lang.Class[],int)>/$stack6
<sun.reflect.MethodAccessorGenerator: sun.reflect.SerializationConstructorAccessorImpl generateSerializationConstructor(java.lang.Class,java.lang.Class[],java.lang.Class[],int,java.lang.Class)>/$stack7
<sun.reflect.MethodAccessorGenerator: sun.reflect.MagicAccessorImpl generate(java.lang.Class,java.lang.String,java.lang.Class[],java.lang.Class,java.lang.Class[],int,boolean,boolean,java.lang.Class)>/$stack87
<java.text.MessageFormat: java.text.AttributedCharacterIterator formatToCharacterIterator(java.lang.Object)>/$stack12
<java.io.ObjectStreamClass: java.io.ObjectStreamField[] getDefaultSerialFields(java.lang.Class)>/$stack10
<sun.security.provider.PolicyFile: void init(java.net.URL)>/$stack6
<sun.security.provider.PolicyFile: boolean initPolicyFile(java.lang.String,java.lang.String,sun.security.provider.PolicyFile$PolicyInfo)>/$stack6
<sun.security.provider.PolicyFile: java.security.PermissionCollection getPermissions(java.security.Permissions,java.security.ProtectionDomain)>/$stack8
<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>/$stack17
<sun.reflect.NativeConstructorAccessorImpl: java.lang.Object newInstance(java.lang.Object[])>/$stack22
<br.com.caelum.vraptor.util.StringUtils: java.lang.String[] extractParameters(java.lang.String)>/$stack11
<javassist.util.proxy.SecurityActions: java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)>/$stack3
<javassist.util.proxy.SecurityActions: java.lang.reflect.Constructor[] getDeclaredConstructors(java.lang.Class)>/$stack3
<java.io.BufferedWriter: void <init>(java.io.Writer,int)>/$stack5
<org.springframework.util.ClassUtils: java.lang.Class[] getAllInterfacesForClass(java.lang.Class,java.lang.ClassLoader)>/$stack6
<sun.security.jca.ProviderConfig: java.lang.String expand(java.lang.String)>/$stack3
<org.springframework.util.ReflectionUtils: java.lang.reflect.Method[] getAllDeclaredMethods(java.lang.Class)>/$stack6
<java.lang.SecurityManager: void checkPackageAccess(java.lang.String)>/$stack29
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>/$stack10
<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>/$stack18
<org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.springframework.core.io.Resource[] findAllClassPathResources(java.lang.String)>/$stack17
<org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.springframework.core.io.Resource[] findPathMatchingResources(java.lang.String)>/$stack33
<java.net.InetAddress: java.net.InetAddressImpl loadImpl(java.lang.String)>/$stack5
<org.mockito.cglib.core.ClassNameReader: java.lang.String[] getClassInfo(org.mockito.asm.ClassReader)>/$stack6
<java.net.SocketPermission: int initEphemeralPorts(java.lang.String,int)>/$stack3
<java.nio.charset.Charset: boolean atBugLevel(java.lang.String)>/$stack5
<java.nio.charset.Charset: java.nio.charset.Charset lookupViaProviders(java.lang.String)>/$stack9
<org.picocontainer.injectors.AnnotatedFieldInjector: java.lang.reflect.Field[] getFields(java.lang.Class)>/$stack3
<com.thoughtworks.xstream.converters.extended.JavaMethodConverter: java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)>/$stack18
<java.lang.invoke.MethodType: java.lang.Class[] listToArray(java.util.List)>/$stack3
<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap fromEntryList(java.util.List)>/$stack10
<javassist.bytecode.stackmap.TypedBlock: javassist.bytecode.stackmap.TypedBlock[] makeBlocks(javassist.bytecode.MethodInfo,javassist.bytecode.CodeAttribute,boolean)>/$stack7
<java.lang.Package: java.lang.Package defineSystemPackage(java.lang.String,java.lang.String)>/$stack3
<java.io.ObjectInputStream: boolean auditSubclass(java.lang.Class)>/$stack3
<java.security.AccessController: java.security.ProtectionDomain getCallerPD(java.lang.Class)>/$stack3
<java.util.jar.JarVerifier: java.security.cert.Certificate[] mapSignersToCertArray(java.security.CodeSigner[])>/$stack7
<sun.reflect.ClassDefiner: java.lang.Class defineClass(java.lang.String,byte[],int,int,java.lang.ClassLoader)>/$stack7
<org.springframework.util.StringUtils: java.lang.String[] toStringArray(java.util.Collection)>/$stack3
<org.mockito.internal.exceptions.base.StackTraceFilter: java.lang.StackTraceElement[] filter(java.lang.StackTraceElement[],boolean)>/$stack18
<sun.reflect.annotation.AnnotationParser: java.lang.annotation.Annotation annotationForMap(java.lang.Class,java.util.Map)>/$stack3
<javassist.bytecode.stackmap.BasicBlock$Maker: javassist.bytecode.stackmap.BasicBlock[] makeBlocks(java.util.HashMap)>/$stack21
<javassist.bytecode.stackmap.BasicBlock$Maker: javassist.bytecode.stackmap.BasicBlock[] makeBlocks(java.util.HashMap)>/$stack12
<sun.reflect.annotation.AnnotationParser: java.lang.annotation.Annotation[] toArray(java.util.Map)>/$stack3
<org.apache.commons.logging.LogFactory: java.io.InputStream getResourceAsStream(java.lang.ClassLoader,java.lang.String)>/$stack3
<org.apache.commons.logging.LogFactory: java.util.Enumeration getResources(java.lang.ClassLoader,java.lang.String)>/result#_1407
<org.apache.commons.logging.LogFactory: java.util.Properties getProperties(java.net.URL)>/$stack3
<org.apache.commons.logging.LogFactory: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>/$stack3
<java.beans.Introspector: java.beans.EventSetDescriptor[] getTargetEventInfo()>/$stack63
<java.beans.Introspector: java.beans.EventSetDescriptor[] getTargetEventInfo()>/$stack30
<java.lang.invoke.InnerClassLambdaMetafactory: java.lang.invoke.CallSite buildCallSite()>/$stack13
<java.lang.invoke.InnerClassLambdaMetafactory: java.lang.Class spinInnerClass()>/$stack22
<sun.misc.ExtensionDependency: java.io.File[] getInstalledExtensions()>/$stack2
<javax.xml.parsers.SecuritySupport: java.lang.ClassLoader getContextClassLoader()>/$stack2
<java.io.ObjectStreamClass: java.io.ObjectStreamClass$ClassDataSlot[] getClassDataLayout0()>/$stack13
<sun.util.calendar.CalendarSystem: java.util.Properties getCalendarProperties()>/$stack4
<org.apache.commons.logging.LogFactory: java.lang.ClassLoader getContextClassLoaderInternal()>/$stack1
<sun.util.logging.LoggingSupport: void <clinit>()>/$stack1
<java.security.KeyStore: java.lang.String getDefaultType()>/$stack2
<org.picocontainer.injectors.IterativeInjector: java.lang.reflect.Constructor getConstructor()>/retVal#_62
<java.util.Arrays$LegacyMergeSort: void <clinit>()>/$stack1
<org.picocontainer.injectors.IterativeInjector: void initializeInjectionMembersAndTypeLists()>/$stack17
<org.picocontainer.injectors.IterativeInjector: void initializeInjectionMembersAndTypeLists()>/$stack20
<org.picocontainer.injectors.IterativeInjector: java.lang.reflect.Method[] getMethods()>/$stack2
<sun.misc.PerfCounter: void <clinit>()>/$stack1
<java.net.URLEncoder: void <clinit>()>/$stack8
<java.util.logging.LogManager: void <clinit>()>/$stack4
<sun.security.provider.SunEntries: void <clinit>()>/$stack1
<java.util.concurrent.ThreadLocalRandom: long initialSeed()>/$stack6
<org.springframework.beans.factory.support.DisposableBeanAdapter: java.lang.reflect.Method determineDestroyMethod()>/$stack5
<sun.security.jca.ProviderList: sun.security.jca.ProviderList fromSecurityProperties()>/$stack1
<sun.security.jca.ProviderList: void <init>()>/$stack37
<java.beans.Introspector: java.beans.PropertyDescriptor[] getTargetPropertyInfo()>/$stack23
<java.beans.Introspector: java.beans.MethodDescriptor[] getTargetMethodInfo()>/$stack17
<org.springframework.beans.MutablePropertyValues: org.springframework.beans.PropertyValue[] getPropertyValues()>/$stack5
<java.util.concurrent.ForkJoinPool: void <clinit>()>/$stack48
<com.thoughtworks.xstream.io.xml.XmlFriendlyNameCoder: void <clinit>()>/$stack4
<com.thoughtworks.xstream.io.xml.XmlFriendlyNameCoder: void <clinit>()>/$stack9
<sun.security.util.Debug: void <clinit>()>/$stack2
<sun.security.util.Debug: void <clinit>()>/$stack5
<sun.util.calendar.ZoneInfoFile: void <clinit>()>/$stack30
<sun.util.locale.provider.AuxLocaleProviderAdapter: java.util.Locale[] getAvailableLocales()>/$stack11
<org.mockito.cglib.core.DebuggingClassWriter: byte[] toByteArray()>/$stack2
<javax.validation.Validation$GetValidationProviderListAction: java.util.List getValidationProviderList()>/$stack4
<org.mockito.cglib.core.ReflectUtils: void <clinit>()>/$stack5
<sun.misc.Launcher$BootClassPathHolder: void <clinit>()>/$stack6
<sun.misc.ExtensionDependency: java.io.File[] getExtDirs()>/$stack6
<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.ast.SpelNodeImpl eatPrimaryExpression()>/$stack21
<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.ast.SpelNodeImpl[] maybeEatMethodArgs()>/$stack9
<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean maybeEatInlineList()>/$stack28
<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.ast.SpelNodeImpl eatPossiblyQualifiedId()>/$stack31
<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean maybeEatConstructorReference()>/$stack16
<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean maybeEatConstructorReference()>/$stack36
<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean maybeEatConstructorReference()>/$stack40
<sun.security.x509.AVA: void <clinit>()>/$stack2
<sun.security.provider.SeedGenerator$ThreadedSeedGenerator: void <init>()>/$stack8
<sun.util.logging.PlatformLogger: void <clinit>()>/$stack3
<sun.misc.ObjectInputFilter$Config: void <clinit>()>/$stack2
<java.lang.reflect.Modifier: void <clinit>()>/$stack2
<org.picocontainer.PicoBuilder: org.picocontainer.MutablePicoContainer build()>/$stack18
<java.util.jar.JarFile: boolean isKnownNotToHaveSpecialAttributes()>/$stack71
<java.util.Locale: java.util.Locale initDefault()>/$stack7
<java.util.Locale: java.util.Locale initDefault()>/$stack9
<java.util.Locale: java.util.Locale initDefault()>/$stack11
<java.util.Locale: java.util.Locale initDefault()>/$stack13
<java.util.Locale: java.util.Locale initDefault()>/$stack15
<sun.nio.fs.DefaultFileSystemProvider: java.nio.file.spi.FileSystemProvider create()>/$stack2
<java.util.TimeZone: java.util.TimeZone setDefaultZone()>/$stack5
<java.util.TimeZone: java.util.TimeZone setDefaultZone()>/$stack7
<com.thoughtworks.xstream.converters.basic.DateConverter: void <clinit>()>/$stack15
<java.util.regex.PatternSyntaxException: void <clinit>()>/$stack1
<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.FormalTypeParameter[] parseFormalTypeParameters()>/$stack11
<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.TypeArgument[] parseTypeArguments()>/$stack10
<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.FieldTypeSignature[] parseBounds()>/$stack7
<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.ClassTypeSignature[] parseSuperInterfaces()>/$stack6
<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.TypeSignature[] parseZeroOrMoreTypeSignatures()>/$stack6
<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.FieldTypeSignature[] parseZeroOrMoreThrowsSignatures()>/$stack6
<java.io.ObjectStreamClass: long getSerialVersionUID()>/$stack5
<java.io.ObjectStreamClass: void <clinit>()>/$stack3
<sun.util.locale.provider.JRELocaleProviderAdapter: boolean isNonENLangSupported()>/$stack12
<sun.util.locale.provider.JRELocaleProviderAdapter: boolean isNonENLangSupported()>/$stack24
<java.nio.charset.Charset$ExtendedProviderHolder: java.nio.charset.spi.CharsetProvider extendedProvider()>/$stack1
<java.lang.Throwable: java.lang.Throwable[] getSuppressed()>/$stack7
<java.io.UnixFileSystem: void <init>()>/$stack4
<java.io.UnixFileSystem: void <init>()>/$stack8
<java.io.UnixFileSystem: void <init>()>/$stack12
<java.nio.Bits: boolean unaligned()>/$stack3
<java.io.File$TempDirectory: void <clinit>()>/$stack2
<sun.security.x509.X509CRLEntryImpl: java.lang.String toString()>/$stack27
<sun.net.InetAddressCachePolicy: void <clinit>()>/$stack2
<sun.net.InetAddressCachePolicy: void <clinit>()>/$stack5
<sun.misc.URLClassPath: java.net.URL[] getURLs()>/$stack8
<sun.security.jca.ProviderConfig: void checkSunPKCS11Solaris()>/$stack3
<java.security.Provider$Service: boolean hasKeyAttributes()>/$stack29
<sun.misc.URLClassPath: void <clinit>()>/$stack2
<sun.misc.URLClassPath: void <clinit>()>/$stack9
<sun.misc.URLClassPath: void <clinit>()>/$stack11
<javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory newInstance()>/$stack0
<java.net.InetAddress: void <clinit>()>/$stack24
<java.net.InetAddress: void <clinit>()>/$stack55
<java.net.InetAddress: void <clinit>()>/$stack7
<java.util.ResourceBundle$RBClassLoader: void <clinit>()>/$stack1
<java.lang.reflect.AccessibleObject: void <clinit>()>/$stack2
<sun.util.locale.provider.LocaleResources: java.lang.String[][] getZoneStrings()>/$stack19
<sun.util.locale.provider.LocaleResources: java.util.ResourceBundle getJavaTimeFormatData()>/l1#_455
<org.springframework.core.AttributeAccessorSupport: java.lang.String[] attributeNames()>/$stack6
<java.lang.Class: sun.reflect.ReflectionFactory getReflectionFactory()>/$stack3
<java.net.SocketPermission: void <clinit>()>/$stack2
<java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>/$stack7
<org.picocontainer.injectors.AnnotatedFieldInjector: void initializeInjectionMembersAndTypeLists()>/$stack14
<org.picocontainer.injectors.AnnotatedFieldInjector: void initializeInjectionMembersAndTypeLists()>/$stack17
<sun.util.locale.provider.LocaleProviderAdapter: void <clinit>()>/$stack14
<sun.misc.ProxyGenerator: void <clinit>()>/$stack4
<java.io.ObjectOutputStream: void <clinit>()>/$stack1
<sun.security.x509.X509CertInfo: java.lang.String toString()>/$stack83
<java.nio.file.FileSystems$DefaultFileSystemHolder: java.nio.file.FileSystem defaultFileSystem()>/$stack2
<sun.util.cldr.CLDRLocaleProviderAdapter: void <init>()>/$stack7
<sun.util.cldr.CLDRLocaleProviderAdapter: void <init>()>/$stack19
<java.security.CodeSource: java.security.cert.Certificate[] getCertificates()>/$stack10
<java.awt.Toolkit: void initAssistiveTechnologies()>/$stack4
<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle[] makeArrays()>/$stack18
<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle[] makeFillArrays()>/$stack19
<org.picocontainer.injectors.ConstructorInjector: java.lang.reflect.Constructor[] getConstructors()>/$stack2
<org.springframework.core.convert.support.PropertyTypeDescriptor: java.lang.annotation.Annotation[] getAnnotations()>/$stack33
<java.security.Policy: java.security.Policy getPolicyNoCheck()>/$stack18
<java.security.Policy: java.security.Policy getPolicyNoCheck()>/$stack39
<java.security.ProtectionDomain: java.security.PermissionCollection mergePermissions()>/$stack18
<javax.crypto.JceSecurityManager: void <clinit>()>/$stack7
<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>/l2#12_$$A_1#_420
<org.picocontainer.parameters.CollectionComponentParameter$1: java.lang.Object resolveInstance()>/result#_138
<org.picocontainer.injectors.IterativeInjector: void initializeInjectionMembersAndTypeLists()>/methods#_263
<sun.security.util.AbstractAlgorithmConstraints: java.lang.String[] getAlgorithms(java.lang.String)>/l2_$$A_1#_63
<org.springframework.beans.factory.support.ConstructorResolver$2: java.lang.reflect.Method[] run()>/$stack4
<java.util.AbstractCollection: java.lang.Object[] toArray()>/$stack8
<java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])>/$stack15
<org.springframework.core.type.StandardAnnotationMetadata: java.util.Set getAnnotationTypes()>/anns#_48
<org.springframework.core.type.StandardAnnotationMetadata: java.util.Set getMetaAnnotationTypes(java.lang.String)>/anns#_56
<org.springframework.core.type.StandardAnnotationMetadata: boolean hasAnnotation(java.lang.String)>/anns#_74
<org.springframework.core.type.StandardAnnotationMetadata: boolean isAnnotated(java.lang.String)>/anns#_102
<org.springframework.core.type.StandardAnnotationMetadata: java.util.Map getAnnotationAttributes(java.lang.String,boolean)>/anns#_121
<java.util.LinkedList: boolean addAll(int,java.util.Collection)>/l3#_408
<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.String[] getAliases(java.lang.String)>/retrievedAliases#_590
<javax.crypto.CryptoPermissions: javax.crypto.CryptoPermissions getMinimum(javax.crypto.CryptoPermissions)>/l9_$$A_1#_240
<javax.crypto.CryptoPermissions: javax.crypto.CryptoPermissions getMinimum(javax.crypto.CryptoPermissions)>/l9_$$A_2#_242
<org.springframework.beans.MutablePropertyValues: void <init>(org.springframework.beans.PropertyValues)>/pvs#_67
<org.springframework.beans.MutablePropertyValues: org.springframework.beans.MutablePropertyValues addPropertyValues(org.springframework.beans.PropertyValues)>/pvs#_136
<ognl.OgnlRuntime: boolean setFieldValue(ognl.OgnlContext,java.lang.Object,java.lang.String,java.lang.Object)>/$stack18
<sun.security.pkcs.PKCS7: void parseSignedData(sun.security.util.DerValue)>/l6#8#_310
<sun.security.pkcs.PKCS7: void parseSignedData(sun.security.util.DerValue)>/l6#8_$$A_2#_355
<sun.security.util.AlgorithmDecomposer: java.util.Set decomposeImpl(java.lang.String)>/l1#_44
<sun.security.util.AlgorithmDecomposer: java.util.Set decomposeImpl(java.lang.String)>/l7#_57
<java.lang.ClassLoader: java.lang.Package definePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL)>/l10#_1592
<java.lang.ClassLoader: java.lang.Package getPackage(java.lang.String)>/l2_$$A_1#_1623
<java.lang.ClassLoader: java.lang.Package getPackage(java.lang.String)>/l2_$$A_2#_1625
<org.springframework.expression.spel.ast.Projection: java.lang.Class determineCommonType(java.lang.Class,java.lang.Class)>/interfaces#_149
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>/l3_$$A_2#_1149
<org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider: java.util.Set findCandidateComponents(java.lang.String)>/resources#_204
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>/l3_$$A_2#_1190
<org.springframework.core.convert.support.StringToCollectionConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>/fields#_57
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.Object doCreateBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])>/dependentBeans#_538
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.Class getTypeForFactoryMethod(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Class[])>/candidates#_634
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void autowireByName(java.lang.String,org.springframework.beans.factory.support.AbstractBeanDefinition,org.springframework.beans.BeanWrapper,org.springframework.beans.MutablePropertyValues)>/propertyNames#_1101
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void autowireByType(java.lang.String,org.springframework.beans.factory.support.AbstractBeanDefinition,org.springframework.beans.BeanWrapper,org.springframework.beans.MutablePropertyValues)>/propertyNames#_1141
<br.com.caelum.vraptor.view.DefaultAcceptHeaderToFormat: java.lang.String chooseMimeType(java.lang.String)>/mimeTypes#_77
<br.com.caelum.vraptor.view.DefaultAcceptHeaderToFormat: java.lang.String[] getOrderedMimeTypes(java.lang.String)>/types#_115
<org.springframework.core.convert.TypeDescriptor: java.lang.String toString()>/anns#_466
<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/l2_$$A_1#_89
<org.picocontainer.parameters.ComponentParameter$1: java.lang.Object resolveInstance()>/result_$$A_4#_141
<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.Object getBean(java.lang.Class)>/beanNames#_250
<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String[] getBeanNamesForType(java.lang.Class,boolean,boolean)>/beanDefinitionNames#_303
<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String[] getBeanNamesForType(java.lang.Class,boolean,boolean)>/beanName#49#_352
<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.util.Map getBeansOfType(java.lang.Class,boolean,boolean)>/beanNames#_394
<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.util.Map findAutowireCandidates(java.lang.String,java.lang.Class,org.springframework.beans.factory.config.DependencyDescriptor)>/candidateNames#_829
<org.springframework.beans.factory.support.ConstructorResolver: org.springframework.beans.BeanWrapper autowireConstructor(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.reflect.Constructor[],java.lang.Object[])>/argsToUse_$$A_4#_131
<org.springframework.beans.factory.support.ConstructorResolver: void resolveFactoryMethodIfPossible(org.springframework.beans.factory.support.RootBeanDefinition)>/candidates#_306
<org.springframework.beans.factory.support.ConstructorResolver: org.springframework.beans.BeanWrapper instantiateUsingFactoryMethod(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])>/$stack40
<org.springframework.beans.factory.support.ConstructorResolver: org.springframework.beans.BeanWrapper instantiateUsingFactoryMethod(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])>/argsToUse_$$A_4#_392
<sun.security.x509.X500Name: void parseDER(sun.security.util.DerInputStream)>/l2#_785
<sun.security.x509.X500Name: void parseDER(sun.security.util.DerInputStream)>/l2_$$A_3#_793
<java.io.ObjectStreamClass: java.io.ObjectStreamField[] getSerialFields(java.lang.Class)>/l1_$$A_1#_1605
<org.springframework.context.support.DefaultLifecycleProcessor: void doStart(java.util.Map,java.lang.String)>/dependenciesForBean#_157
<org.springframework.context.support.DefaultLifecycleProcessor: void doStop(java.util.Map,java.lang.String,java.util.concurrent.CountDownLatch,java.util.Set)>/dependentBeans#_211
<org.springframework.context.support.DefaultLifecycleProcessor: java.util.Map getLifecycleBeans()>/beanNames#_265
<org.springframework.core.BridgeMethodResolver: java.lang.reflect.Method findBridgedMethod(java.lang.reflect.Method)>/methods#_66
<org.springframework.core.BridgeMethodResolver: java.lang.reflect.Method findGenericDeclaration(java.lang.reflect.Method)>/method_$$A_1#_156
<org.springframework.context.support.AbstractApplicationContext: void invokeBeanFactoryPostProcessors(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>/registry#15#_613
<org.springframework.context.support.AbstractApplicationContext: void registerBeanPostProcessors(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>/postProcessorNames#_673
<org.springframework.context.support.AbstractApplicationContext: void registerListeners()>/listener#3#_856
<org.springframework.beans.factory.BeanFactoryUtils: java.lang.String[] beanNamesForTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class)>/parentResult#_146
<org.springframework.beans.factory.BeanFactoryUtils: java.lang.String[] beanNamesForTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class)>/result_$$A_1#_155
<org.springframework.beans.factory.BeanFactoryUtils: java.lang.String[] beanNamesForTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,boolean,boolean)>/parentResult#_189
<org.springframework.beans.factory.BeanFactoryUtils: java.lang.String[] beanNamesForTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,boolean,boolean)>/result_$$A_1#_198
<java.security.Provider$Service: boolean hasKeyAttributes()>/l4#_1763
<org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor: void visitEnd()>/$stack29
<org.springframework.core.io.support.ResourceArrayPropertyEditor: void setValue(java.lang.Object)>/resources#_122
<org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.springframework.core.io.Resource[] findPathMatchingResources(java.lang.String)>/rootDirResources#_338
<sun.util.locale.provider.LocaleResources: java.lang.String getDateTimePattern(java.lang.String,java.lang.String,int,java.lang.String)>/$stack22
<sun.util.locale.provider.LocaleResources: java.lang.String getDateTimePattern(java.lang.String,java.lang.String,int,java.lang.String)>/$stack22_$$A_1
<org.springframework.core.AttributeAccessorSupport: void copyAttributesFrom(org.springframework.core.AttributeAccessor)>/attributeNames#_77
<java.nio.charset.Charset: java.nio.charset.Charset lookup2(java.lang.String)>/$stack10
<org.picocontainer.injectors.AnnotatedFieldInjector: void initializeInjectionMembersAndTypeLists()>/fields#_53
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>/convertedValue_$$A_1#_151
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>/convertedValue_$$A_5#_167
<sun.util.locale.provider.LocaleProviderAdapter: void <clinit>()>/l2#_141
<java.lang.Package: java.lang.Package getSystemPackage(java.lang.String)>/l2_$$A_1#_546
<org.picocontainer.injectors.ConstructorInjector: java.util.List getSortedMatchingConstructors()>/allConstructors#_367
<sun.reflect.annotation.AnnotationParser: java.lang.Object parseMemberValue(java.lang.Class,java.nio.ByteBuffer,sun.reflect.ConstantPool,java.lang.Class)>/l4_$$A_1#_352
<org.apache.commons.logging.LogFactory: java.util.Hashtable createFactoryStore()>/storeImplementationClass#_346
<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>/factory_$$A_1#_497
<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>/factory_$$A_6#_569
<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>/factory_$$A_11#_612
<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>/factory_$$A_14#_650
<org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)>/newProps#_1478
<javax.crypto.JceSecurityManager: javax.crypto.CryptoPermission getCryptoPermission(java.lang.String)>/l4_$$A_2#_107
<sun.security.x509.CertificateExtensions: void init(sun.security.util.DerInputStream)>/l2#_84
<sun.security.x509.CertificateExtensions: void encode(java.io.OutputStream,boolean)>/l5#_171
<br.com.caelum.vraptor.http.ParanamerNameProviderTest: void shouldNameObjectTypeAsItsSimpleName()>/$stack5
<br.com.caelum.vraptor.http.ParanamerNameProviderTest: void shouldNamePrimitiveTypeAsItsSimpleName()>/$stack6
<br.com.caelum.vraptor.http.ParanamerNameProviderTest: void shouldNameArrayAsItsSimpleTypeName()>/$stack5
<br.com.caelum.vraptor.http.ParanamerNameProviderTest: void shouldNameGenericCollectionUsingOf()>/$stack5
<br.com.caelum.vraptor.http.ParanamerNameProviderTest: void shouldIgnoreChangesToTheReturnedArrayInSubsequentCalls()>/resultOfFirstCall#_62
<br.com.caelum.vraptor.http.ParanamerNameProviderTest: void shouldIgnoreChangesToTheReturnedArrayInSubsequentCalls()>/resultOfSecondCall#_67
<br.com.caelum.vraptor.http.ParanamerNameProviderTest: void shouldNameFieldsAnnotatedWithNamed()>/$stack5
<br.com.caelum.vraptor.http.ParanamerNameProviderTest: void shouldNotNameFieldsByTheFieldNameWhenUsingAnnotation()>/$stack5
<br.com.caelum.vraptor.http.ParanamerNameProviderTest: void shouldNameMethodsFieldsWhenAnnotatedOrNot()>/$stack5
<br.com.caelum.vraptor.http.ParanamerNameProviderTest: void shouldNameMethodsFieldsWhenAnnotatedOrNot()>/$stack13
<br.com.caelum.vraptor.http.ParanamerNameProviderTest: void shouldNameMethodsFieldsWhenAnnotatedOrNot2()>/$stack5
<br.com.caelum.vraptor.http.ParanamerNameProviderTest: void shouldNameMethodsFieldsWhenAnnotatedOrNot2()>/$stack13
<java.util.WeakHashMap$EntrySet: java.lang.Object[] toArray(java.lang.Object[])>/$stack3
<java.io.PrintStream: java.nio.charset.Charset toCharset(java.lang.String)>/$stack3
<org.picocontainer.injectors.IterativeInjector: org.picocontainer.Parameter[] access$000(org.picocontainer.injectors.IterativeInjector,org.picocontainer.PicoContainer)>/$stack2
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.lang.Object[] toArray()>/l1#_1671
<org.springframework.core.convert.support.StringToArrayConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>/fields#_55
<org.springframework.beans.factory.support.ConstructorResolver$2: java.lang.Object run()>/$stack1
<com.google.common.collect.ForwardingCollection: java.lang.Object[] toArray()>/$stack2
<com.google.common.collect.ForwardingCollection: java.lang.Object[] toArray(java.lang.Object[])>/$stack3
<java.util.logging.LogManager: void readConfiguration(java.io.InputStream)>/l2#_1411
<java.util.logging.LogManager: java.lang.String[] access$1300(java.util.logging.LogManager,java.lang.String)>/$stack2
<java.util.logging.Logger: java.util.ResourceBundle findResourceBundle(java.lang.String,boolean)>/$stack26
<br.com.caelum.vraptor.core.DefaultInterceptorStack: void addAsNext(java.lang.Class)>/$stack2
<org.springframework.beans.BeanWrapperImpl: org.springframework.beans.BeanWrapperImpl$PropertyTokenHolder getPropertyNameTokens(java.lang.String)>/$stack59
<org.springframework.core.SimpleAliasRegistry: java.lang.String[] getAliases(java.lang.String)>/$stack7
<com.thoughtworks.paranamer.BytecodeReadingParanamer: java.lang.String[] lookupParameterNames(java.lang.reflect.AccessibleObject,boolean)>/parameterNamesForMethod#_104
<sun.misc.ObjectInputFilter$Config$Global: void <init>(java.lang.String)>/l2#_445
<sun.security.x509.X509CRLImpl: void parse(sun.security.util.DerValue)>/l7#_1150
<org.picocontainer.paranamer.BytecodeReadingParanamer$TypeCollector: java.lang.String[] getParameterNamesForMethod()>/$stack6
<org.picocontainer.paranamer.BytecodeReadingParanamer$TypeCollector: java.lang.String[] access$300(org.picocontainer.paranamer.BytecodeReadingParanamer$TypeCollector)>/$stack1
<sun.security.x509.RDN: void <init>(sun.security.util.DerValue)>/l3#_241
<org.picocontainer.injectors.ConstructorInjector$CtorAndAdapters: java.lang.Object[] getParameterArguments(org.picocontainer.PicoContainer)>/$stack26
<org.springframework.beans.factory.support.DisposableBeanAdapter: void <init>(java.lang.Object,java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.util.List,java.security.AccessControlContext)>/$stack18
<java.lang.invoke.MethodHandleImpl$Lazy: void <clinit>()>/$stack1
<java.lang.invoke.MethodHandleImpl$Lazy: void <clinit>()>/$stack2
<sun.util.resources.LocaleData: java.util.ResourceBundle getCalendarData(java.util.Locale)>/$stack8
<sun.util.resources.LocaleData: java.util.ResourceBundle getBreakIteratorInfo(java.util.Locale)>/$stack8
<sun.util.resources.LocaleData: java.util.ResourceBundle getDateFormatData(java.util.Locale)>/$stack8
<sun.util.resources.LocaleData: java.util.ResourceBundle getNumberFormatData(java.util.Locale)>/$stack8
<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.String[] getAliases(java.lang.String)>/$stack30
<ognl.OgnlRuntime: java.lang.Object getConvertedType(ognl.OgnlContext,java.lang.Object,java.lang.reflect.Member,java.lang.String,java.lang.Object,java.lang.Class)>/$stack7
<ognl.OgnlRuntime: boolean getConvertedTypes(ognl.OgnlContext,java.lang.Object,java.lang.reflect.Member,java.lang.String,java.lang.Class[],java.lang.Object[],java.lang.Object[])>/v#_1057
<ognl.OgnlRuntime: java.lang.reflect.Method getAppropriateMethod(ognl.OgnlContext,java.lang.Object,java.lang.Object,java.lang.String,java.util.List,java.lang.Object[],java.lang.Object[])>/$stack31
<javax.crypto.CryptoPermissions: javax.crypto.CryptoPermissions getMinimum(javax.crypto.CryptoPermissions)>/l10#28#_276
<sun.util.logging.PlatformLogger$DefaultLoggerProxy: void <clinit>()>/$stack0
<java.nio.charset.StandardCharsets: void <clinit>()>/$stack0
<java.nio.charset.StandardCharsets: void <clinit>()>/$stack1
<java.nio.charset.StandardCharsets: void <clinit>()>/$stack2
<java.nio.charset.StandardCharsets: void <clinit>()>/$stack3
<java.nio.charset.StandardCharsets: void <clinit>()>/$stack4
<java.nio.charset.StandardCharsets: void <clinit>()>/$stack5
<sun.security.pkcs.PKCS7: void parseNetscapeCertChain(sun.security.util.DerValue)>/l3#_232
<sun.security.pkcs.PKCS7: void parseSignedData(sun.security.util.DerValue)>/l3#_279
<sun.security.pkcs.PKCS7: void parseSignedData(sun.security.util.DerValue)>/l6#8_$$A_4#_385
<sun.security.pkcs.PKCS7: void parseOldSignedData(sun.security.util.DerValue)>/l3#_409
<sun.security.pkcs.PKCS7: void parseOldSignedData(sun.security.util.DerValue)>/l6#7#_432
<sun.security.pkcs.PKCS7: void parseOldSignedData(sun.security.util.DerValue)>/l7#20#_467
<org.picocontainer.parameters.CollectionComponentParameter: java.lang.Object[] access$100(org.picocontainer.parameters.CollectionComponentParameter,org.picocontainer.PicoContainer,java.lang.Class,java.util.Map)>/$stack4
<java.util.Formatter: java.util.Formatter format(java.util.Locale,java.lang.String,java.lang.Object[])>/l6#_2501
<java.util.logging.LogManager$5: java.lang.Object run()>/l1#_961
<br.com.caelum.vraptor.core.JstlLocalization: java.util.Locale findLocalefromString(java.lang.String)>/arr#_158
<java.lang.StringCoding: java.nio.charset.Charset lookupCharset(java.lang.String)>/$stack3
<sun.security.pkcs.PKCS9Attributes: byte[] decode(sun.security.util.DerInputStream)>/l5#_195
<java.lang.ClassLoader: boolean loadLibrary0(java.lang.Class,java.io.File)>/$stack69
<com.thoughtworks.paranamer.AnnotationParanamer: java.lang.String[] lookupParameterNames(java.lang.reflect.AccessibleObject,boolean)>/i#15#_110
<java.lang.String: java.lang.String[] split(java.lang.String,int)>/$stack14
<java.lang.String: java.lang.String[] split(java.lang.String)>/$stack2
<java.text.DecimalFormat: java.text.FieldPosition[] getPositivePrefixFieldPositions()>/$stack7
<java.text.DecimalFormat: java.text.FieldPosition[] getNegativePrefixFieldPositions()>/$stack7
<java.text.DecimalFormat: java.text.FieldPosition[] getPositiveSuffixFieldPositions()>/$stack7
<java.text.DecimalFormat: java.text.FieldPosition[] getNegativeSuffixFieldPositions()>/$stack7
<javax.validation.Validation$DefaultValidationProviderResolver: java.util.List getValidationProviders()>/$stack1
<javax.validation.Validation$GenericBootstrapImpl: javax.validation.Configuration configure()>/validationProviders#_257
<javax.validation.Validation$GenericBootstrapImpl: javax.validation.Configuration configure()>/$stack8
<sun.security.pkcs.SignerInfo: void <init>(sun.security.util.DerInputStream,boolean)>/l3#_151
<org.springframework.util.AntPathMatcher: boolean doMatch(java.lang.String,java.lang.String,boolean,java.util.Map)>/pattDirs#_91
<org.springframework.util.AntPathMatcher: boolean doMatch(java.lang.String,java.lang.String,boolean,java.util.Map)>/pathDirs#_92
<sun.security.pkcs.ContentInfo: void <init>(sun.security.util.DerInputStream,boolean)>/l7#_132
<sun.security.pkcs.ContentInfo: void <init>(sun.security.util.DerInputStream,boolean)>/l8#_151
<org.picocontainer.paranamer.DefaultParanamer: java.lang.String[] lookupParameterNames(java.lang.reflect.AccessibleObject,boolean)>/names#_84
<org.picocontainer.paranamer.DefaultParanamer: java.lang.String[] getParameterNames(java.lang.Class,java.lang.String,java.lang.String)>/parts#_99
<org.picocontainer.paranamer.DefaultParanamer: java.lang.String[] getParameterNames(java.lang.Class,java.lang.String,java.lang.String)>/$stack19
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.String[] unsatisfiedNonSimpleProperties(org.springframework.beans.factory.support.AbstractBeanDefinition,org.springframework.beans.BeanWrapper)>/$stack23
<br.com.caelum.vraptor.http.route.DefaultRouteBuilder: void addParametersInfo(java.lang.reflect.Method)>/split#_194
<sun.misc.ExtensionDependency: boolean checkExtensionAgainstInstalled(java.lang.String,java.util.jar.Attributes)>/l4#5#_240
<sun.misc.ExtensionDependency: java.io.File[] getExtFiles(java.io.File[])>/l3#_466
<br.com.caelum.vraptor.view.DefaultAcceptHeaderToFormat: java.lang.String[] getOrderedMimeTypes(java.lang.String)>/$stack24
<sun.misc.ExtensionDependency: java.lang.Boolean addNewExtensionsToClassLoader(sun.misc.Launcher$ExtClassLoader)>/l2#_513
<sun.misc.ExtensionDependency: java.lang.Boolean addNewExtensionsToClassLoader(sun.misc.Launcher$ExtClassLoader)>/l6#_528
<br.com.caelum.vraptor.serialization.xstream.Serializee: java.util.Set getParentTypes(java.lang.String,java.lang.Class)>/path#_109
<br.com.caelum.vraptor.http.route.JavaEvaluator: java.lang.Object get(java.lang.Object,java.lang.String)>/paths#_42
<javassist.util.proxy.ProxyFactory: void makeConstructors(java.lang.String,javassist.bytecode.ClassFile,javassist.bytecode.ConstPool,java.lang.String)>/cons#_947
<javassist.util.proxy.ProxyFactory: void getMethods(java.util.HashMap,java.lang.Class)>/methods#_1031
<java.util.Collections$UnmodifiableCollection: java.lang.Object[] toArray()>/$stack2
<java.util.Collections$UnmodifiableCollection: java.lang.Object[] toArray(java.lang.Object[])>/$stack3
<br.com.caelum.vraptor.deserialization.gson.GsonDeserializerTest: void shouldBeAbleToDeserializeADog()>/deserialized#_144
<br.com.caelum.vraptor.deserialization.gson.GsonDeserializerTest: void shouldBeAbleToDeserializeAListOfDogs()>/deserialized#_161
<br.com.caelum.vraptor.deserialization.gson.GsonDeserializerTest: void shouldBeAbleToDeserializeAListOfDogsWithNoRoot()>/deserialized#_181
<br.com.caelum.vraptor.deserialization.gson.GsonDeserializerTest: void shouldBeAbleToDeserializeAListOfDogsWhenMethodHasMoreThenOneParameter()>/deserialized#_201
<br.com.caelum.vraptor.deserialization.gson.GsonDeserializerTest: void shouldBeAbleToDeserializeADogWithoutRoot()>/deserialized#_222
<br.com.caelum.vraptor.deserialization.gson.GsonDeserializerTest: void shouldBeAbleToDeserializeADogWithDeserializerAdapter()>/deserialized#_242
<br.com.caelum.vraptor.deserialization.gson.GsonDeserializerTest: void shouldBeAbleToDeserializeADogWhenMethodHasMoreThanOneArgument()>/deserialized#_257
<br.com.caelum.vraptor.deserialization.gson.GsonDeserializerTest: void shouldBeAbleToDeserializeADogWhenMethodHasMoreThanOneArgumentAndHasNotRoot()>/deserialized#_272
<br.com.caelum.vraptor.deserialization.gson.GsonDeserializerTest: void shouldBeAbleToDeserializeADogWhenMethodHasMoreThanOneArgumentAndTheXmlIsTheLastOne()>/deserialized#_287
<br.com.caelum.vraptor.deserialization.gson.GsonDeserializerTest: void shouldBeAbleToDeserializeADogNamedDifferently()>/deserialized#_302
<br.com.caelum.vraptor.deserialization.gson.GsonDeserializerTest: void shouldDeserializeADogWithCalendarAttribute()>/deserialized#_319
<br.com.caelum.vraptor.deserialization.gson.GsonDeserializerTest: void shouldDeserializeADogWithCalendarAsISO8601Attribute()>/deserialized#_341
<br.com.caelum.vraptor.deserialization.gson.GsonDeserializerTest: void shouldDeserializeADogWithCalendarAsObjectAttribute()>/deserialized#_362
<br.com.caelum.vraptor.deserialization.gson.GsonDeserializerTest: void shouldHonorRequestHeaderAcceptCharset()>/deserialized#_381
<br.com.caelum.vraptor.deserialization.gson.GsonDeserializerTest: void whenNoCharsetHeaderIsFoundThanAssumeItIsUTF8()>/deserialized#_397
<br.com.caelum.vraptor.deserialization.gson.GsonDeserializerTest: void shouldByPassDeserializationWhenHasNoContent()>/deserialized#_412
<br.com.caelum.vraptor.deserialization.gson.GsonDeserializerTest: void shouldDeserializeFromGenericTypeOneParam()>/deserialized#_427
<br.com.caelum.vraptor.deserialization.gson.GsonDeserializerTest: void shouldDeserializeFromGenericTypeTwoParams()>/deserialized#_443
<br.com.caelum.vraptor.deserialization.gson.GsonDeserializerTest: void shouldDeserializeWithoutGenericType()>/deserialized#_462
<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String[] getBeanDefinitionNames()>/$stack5
<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String[] getBeanNamesForType(java.lang.Class)>/$stack2
<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String[] getBeanNamesForType(java.lang.Class,boolean,boolean)>/$stack73
<org.springframework.beans.factory.support.DefaultListableBeanFactory: void freezeConfiguration()>/$stack4
<sun.misc.Launcher: void <init>()>/$stack6
<br.com.caelum.vraptor.ioc.spring.SpringBasedContainer: boolean canProvide(java.lang.Class)>/$stack3
<javax.xml.parsers.FactoryFinder: java.lang.Object find(java.lang.Class,java.lang.String)>/systemProp#14#_267
<javax.xml.parsers.FactoryFinder: java.lang.Object findServiceProvider(java.lang.Class)>/$stack5
<sun.nio.cs.ThreadLocalCoders$2: java.lang.Object create(java.lang.Object)>/$stack9
<sun.text.normalizer.ICUData: java.io.InputStream getStream(java.lang.Class,java.lang.String,boolean)>/$stack9
<sun.text.normalizer.ICUData: java.io.InputStream getStream(java.lang.String)>/$stack1
<sun.text.normalizer.ICUData: java.io.InputStream getRequiredStream(java.lang.String)>/$stack1
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.lang.String[] getSingletonNames()>/$stack4
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.lang.String[] getDependentBeans(java.lang.String)>/$stack5
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: void destroySingletons()>/disposableBeanNames#_429
<org.picocontainer.injectors.SingleMemberInjector: java.lang.Object[] getMemberArguments(org.picocontainer.PicoContainer,java.lang.reflect.AccessibleObject,java.lang.reflect.Type[],java.lang.annotation.Annotation[])>/$stack15
<br.com.caelum.vraptor.serialization.xstream.OldAndProbablyBuggyConfigurer: java.lang.String getNameFor(java.lang.String)>/path#_69
<ognl.DefaultTypeConverter: java.lang.Object convertValue(java.util.Map,java.lang.Object,java.lang.Class)>/$stack4
<ognl.DefaultTypeConverter: java.lang.Object convertValue(java.util.Map,java.lang.Object,java.lang.reflect.Member,java.lang.String,java.lang.Object,java.lang.Class)>/$stack7
<com.thoughtworks.paranamer.BytecodeReadingParanamer$TypeCollector: java.lang.String[] getParameterNamesForMethod()>/$stack6
<com.thoughtworks.paranamer.BytecodeReadingParanamer$TypeCollector: java.lang.String[] access$300(com.thoughtworks.paranamer.BytecodeReadingParanamer$TypeCollector)>/$stack1
<ognl.OgnlOps: java.lang.Object convertValue(java.lang.Object,java.lang.Class)>/$stack2
<ognl.OgnlOps: java.lang.Object convertValue(java.lang.Object,java.lang.Class,boolean)>/$stack140
<org.picocontainer.paranamer.AnnotationParanamer: java.lang.String[] lookupParameterNames(java.lang.reflect.AccessibleObject,boolean)>/i#15#_110
<org.springframework.beans.PropertyMatches: void <init>(java.lang.String,java.lang.Class,int)>/$stack5
<org.springframework.beans.PropertyMatches: java.lang.String[] calculateMatches(java.beans.PropertyDescriptor[],int)>/$stack17
<org.picocontainer.paranamer.BytecodeReadingParanamer: java.lang.String[] lookupParameterNames(java.lang.reflect.AccessibleObject,boolean)>/parameterNamesForMethod#_103
<org.mockito.internal.debugging.Location: void <init>(org.mockito.internal.exceptions.base.StackTraceFilter)>/filtered#_22
<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.FormalTypeParameter[] parseZeroOrMoreFormalTypeParameters()>/$stack3
<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.TypeSignature[] parseFormalParameters()>/l1#_585
<java.io.ObjectStreamClass: java.io.ObjectStreamClass$ClassDataSlot[] getClassDataLayout()>/$stack3
<java.io.ObjectStreamClass: java.io.ObjectStreamField[] access$800(java.lang.Class)>/$stack1
<java.util.Collections$SynchronizedCollection: java.lang.Object[] toArray()>/$stack5
<java.util.Collections$SynchronizedCollection: java.lang.Object[] toArray(java.lang.Object[])>/$stack6
<java.lang.Throwable: void printStackTrace(java.lang.Throwable$PrintStreamOrWriter)>/l5#5#_661
<java.nio.charset.Charset$ExtendedProviderHolder: void <clinit>()>/$stack0
<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/l10#43#_702
<sun.reflect.ReflectionFactory: sun.reflect.ConstructorAccessor newConstructorAccessor(java.lang.reflect.Constructor)>/$stack24
<java.net.URLClassLoader: java.net.URL[] getURLs()>/$stack2
<java.net.URLClassLoader: java.lang.Package getAndVerifyPackage(java.lang.String,java.util.jar.Manifest,java.net.URL)>/l4#_393
<java.net.URLClassLoader: void definePackageInternal(java.lang.String,java.util.jar.Manifest,java.net.URL)>/$stack5
<java.net.URLClassLoader: void definePackageInternal(java.lang.String,java.util.jar.Manifest,java.net.URL)>/$stack9
<br.com.caelum.vraptor.deserialization.gson.GsonDeserialization: java.lang.String getRequestCharset()>/$stack5
<java.util.ArrayList: void <init>(java.util.Collection)>/$stack2
<sun.security.pkcs.PKCS9Attribute: void <init>(sun.security.util.DerValue)>/l3#_485
<sun.security.pkcs.PKCS9Attribute: void <init>(sun.security.util.DerValue)>/l5#_496
<org.springframework.context.support.AbstractApplicationContext: java.lang.String[] getBeanNamesForType(java.lang.Class)>/$stack3
<org.springframework.context.support.AbstractApplicationContext: java.lang.String[] getBeanNamesForType(java.lang.Class,boolean,boolean)>/$stack5
<org.springframework.context.support.AbstractApplicationContext: org.springframework.core.io.Resource[] getResources(java.lang.String)>/$stack3
<org.picocontainer.injectors.ParameterNameBinding: java.lang.String getName()>/strings#_38
<java.util.jar.JarFile$JarFileEntry: java.security.cert.Certificate[] getCertificates()>/$stack14
<com.thoughtworks.paranamer.CachingParanamer: java.lang.String[] lookupParameterNames(java.lang.reflect.AccessibleObject)>/$stack2
<org.springframework.core.convert.support.GenericConversionService: org.springframework.core.convert.converter.GenericConverter$ConvertiblePair getRequiredTypeInfo(java.lang.Object,java.lang.Class)>/args#_297
<sun.security.jca.Providers: void <clinit>()>/$stack2
<org.springframework.util.ClassUtils: java.lang.Class[] getAllInterfacesForClass(java.lang.Class)>/$stack1
<sun.security.jca.ProviderConfig: void <init>(java.lang.String,java.lang.String)>/$stack4
<java.security.Provider$Service: boolean hasKeyAttributes()>/$stack36
<sun.misc.URLClassPath: void <clinit>()>/$stack5
<sun.misc.URLClassPath: void <clinit>()>/$stack7
<sun.security.pkcs.SigningCertificateInfo: void parse(byte[])>/l3#_115
<sun.security.pkcs.SigningCertificateInfo: void parse(byte[])>/l4#2#_123
<sun.security.x509.CRLExtensions: void init(sun.security.util.DerInputStream)>/l4#9#_99
<sun.security.x509.CRLExtensions: void encode(java.io.OutputStream,boolean)>/l5#_149
<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence)>/$stack2
<net.vidageek.mirror.list.BackedMirrorList: java.lang.Object[] toArray()>/$stack2
<java.util.UUID: java.util.UUID fromString(java.lang.String)>/l1#_192
<org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.springframework.core.io.Resource[] getResources(java.lang.String)>/$stack22
<org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.springframework.core.io.Resource[] getResources(java.lang.String)>/$stack21
<org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.springframework.core.io.Resource[] getResources(java.lang.String)>/$stack12
<sun.util.locale.provider.TimeZoneNameUtility: java.lang.String[][] loadZoneStrings(java.util.Locale)>/$stack25
<sun.security.x509.CertificateValidity: void construct(sun.security.util.DerValue)>/l3#_81
<org.picocontainer.paranamer.AdaptiveParanamer: java.lang.String[] lookupParameterNames(java.lang.reflect.AccessibleObject,boolean)>/names#_75
<sun.security.util.DisabledAlgorithmConstraints: void <init>(java.lang.String,sun.security.util.AlgorithmDecomposer)>/$stack3
<org.mockito.cglib.core.ClassNameReader: java.lang.String getClassName(org.mockito.asm.ClassReader)>/$stack1
<sun.util.locale.provider.LocaleResources: java.lang.Object getBreakIteratorInfo(java.lang.String)>/$stack13
<sun.util.locale.provider.LocaleResources: int getCalendarData(java.lang.String)>/l5#_128
<sun.util.locale.provider.LocaleResources: java.lang.Object[] getDecimalFormatSymbolsData()>/l3#_168
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>/l5#_217
<sun.util.locale.provider.LocaleResources: java.lang.String[] getTimeZoneNames(java.lang.String)>/l5#_262
<sun.util.locale.provider.LocaleResources: java.util.Set getZoneIDs()>/l3#_280
<sun.util.locale.provider.LocaleResources: java.lang.String[][] getZoneStrings()>/l1#_291
<sun.util.locale.provider.LocaleResources: java.lang.String[] getCalendarNames(java.lang.String)>/l5#_325
<sun.util.locale.provider.LocaleResources: java.lang.String[] getJavaTimeNames(java.lang.String)>/l5#_344
<sun.util.locale.provider.LocaleResources: java.lang.String[] getNumberPatterns()>/l3#_440
<java.lang.Class: java.lang.Package getPackage()>/$stack1
<org.springframework.core.GenericTypeResolver: java.lang.Class resolveTypeArgument(java.lang.Class,java.lang.Class)>/typeArgs#_114
<org.springframework.core.GenericTypeResolver: java.lang.Class[] resolveTypeArguments(java.lang.Class,java.lang.Class)>/$stack2
<org.springframework.core.GenericTypeResolver: java.lang.Class[] doResolveTypeArguments(java.lang.Class,java.lang.Class,java.lang.Class)>/result#_143
<org.springframework.core.GenericTypeResolver: java.lang.Class[] doResolveTypeArguments(java.lang.Class,java.lang.Class,java.lang.Class)>/ifcs#4#_150
<org.springframework.core.GenericTypeResolver: java.lang.Class[] doResolveTypeArguments(java.lang.Class,java.lang.reflect.Type,java.lang.Class)>/$stack20
<org.springframework.core.GenericTypeResolver: java.lang.Class[] doResolveTypeArguments(java.lang.Class,java.lang.reflect.Type,java.lang.Class)>/$stack13
<java.lang.Class: java.lang.annotation.Annotation[] getAnnotations()>/$stack3
<br.com.caelum.vraptor.http.route.DefaultTypeFinder: java.util.Map getParameterTypes(java.lang.reflect.Method,java.lang.String[])>/items#_46
<java.nio.charset.Charset: java.nio.charset.Charset lookup(java.lang.String)>/$stack3
<java.nio.charset.Charset: boolean isSupported(java.lang.String)>/$stack1
<java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>/l1#_528
<java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>/l2#_609
<java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>/$stack9
<org.picocontainer.injectors.MethodInjector: java.lang.Object[] getMemberArguments(org.picocontainer.PicoContainer,java.lang.reflect.Method)>/$stack6
<br.com.caelum.vraptor.http.route.DefaultParametersControl: java.lang.String fillUri(java.lang.String[],java.lang.Object[])>/splittedPatterns#_93
<java.nio.file.FileSystems$DefaultFileSystemHolder: java.nio.file.spi.FileSystemProvider getDefaultProvider()>/l2#_115
<sun.util.locale.provider.TimeZoneNameProviderImpl: java.lang.String[][] getZoneStrings(java.util.Locale)>/$stack5
<java.lang.Package: java.lang.Package getPackage(java.lang.Class)>/$stack8
<sun.security.x509.EDIPartyName: void <init>(sun.security.util.DerValue)>/l3#_84
<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle[] access$000()>/$stack0
<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle[] access$100()>/$stack0
<java.text.DateFormatSymbols: void initializeData(java.util.Locale)>/l5#_710
<java.text.DateFormatSymbols: java.lang.String[][] getZoneStringsImpl(boolean)>/$stack18
<sun.security.util.DerInputStream: sun.security.util.DerValue[] getSequence(int)>/$stack6
<sun.security.util.DerInputStream: sun.security.util.DerValue[] getSet(int)>/$stack6
<sun.security.util.DerInputStream: sun.security.util.DerValue[] getSet(int,boolean)>/$stack6
<org.picocontainer.injectors.ConstructorInjector: org.picocontainer.injectors.ConstructorInjector$CtorAndAdapters getGreediestSatisfiableConstructor(org.picocontainer.PicoContainer)>/sortedMatchingConstructor#27#_199
<sun.nio.cs.ThreadLocalCoders$1: java.lang.Object create(java.lang.Object)>/$stack9
<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String[])>/l12#_276
<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>/$stack84
<java.util.jar.JarVerifier: java.security.cert.Certificate[] getCerts(java.util.jar.JarFile,java.util.jar.JarEntry)>/$stack4
<org.springframework.util.StringUtils: java.lang.String cleanPath(java.lang.String)>/pathArray#_602
<org.springframework.util.StringUtils: java.util.Locale parseLocaleString(java.lang.String)>/parts#_654
<org.springframework.util.StringUtils: java.lang.String[] tokenizeToStringArray(java.lang.String,java.lang.String)>/$stack2
<org.springframework.util.StringUtils: java.lang.String[] tokenizeToStringArray(java.lang.String,java.lang.String,boolean,boolean)>/$stack18
<org.springframework.util.StringUtils: java.lang.String[] delimitedListToStringArray(java.lang.String,java.lang.String)>/$stack2
<org.springframework.util.StringUtils: java.lang.String[] delimitedListToStringArray(java.lang.String,java.lang.String,java.lang.String)>/$stack19
<org.springframework.util.StringUtils: java.lang.String[] commaDelimitedListToStringArray(java.lang.String)>/$stack1
<org.springframework.beans.propertyeditors.ClassArrayEditor: void setAsText(java.lang.String)>/classNames#_64
<sun.reflect.annotation.AnnotationParser: java.lang.annotation.Annotation parseAnnotation(java.nio.ByteBuffer,sun.reflect.ConstantPool,java.lang.Class,boolean)>/$stack4
<sun.reflect.annotation.AnnotationParser: java.lang.annotation.Annotation parseAnnotation2(java.nio.ByteBuffer,sun.reflect.ConstantPool,java.lang.Class,boolean,java.lang.Class[])>/$stack25
<javassist.bytecode.stackmap.BasicBlock$Maker: javassist.bytecode.stackmap.BasicBlock[] make(javassist.bytecode.MethodInfo)>/$stack9
<sun.reflect.annotation.AnnotationParser: java.lang.Object parseAnnotationArray(int,java.lang.Class,java.nio.ByteBuffer,sun.reflect.ConstantPool,java.lang.Class)>/$stack15
<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>/props#_457
<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>/$stack1
<org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)>/urls#_1469
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>/@native-return
