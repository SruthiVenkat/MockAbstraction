<org.apache.flink.api.java.typeutils.PojoField: int hashCode()>/$stack1
<org.apache.flink.api.java.typeutils.PojoTypeInfo$PojoTypeComparatorBuilder: org.apache.flink.api.common.typeutils.TypeComparator createTypeComparator(org.apache.flink.api.common.ExecutionConfig)>/$stack17
<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil: org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult constructIntermediateCompatibilityResult(org.apache.flink.api.common.typeutils.TypeSerializer[],org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[])>/nestedSerializers#_95
<org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: int hashCode()>/$stack1
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createHadoopWritableTypeInfo(java.lang.Class)>/$stack12
<org.apache.flink.api.common.ExecutionConfig: int hashCode()>/$stack1
<org.apache.flink.configuration.RestOptions: void <clinit>()>/$stack2
<org.apache.flink.configuration.RestOptions: void <clinit>()>/$stack7
<org.apache.flink.configuration.RestOptions: void <clinit>()>/$stack17
<org.apache.flink.configuration.RestOptions: void <clinit>()>/$stack25
<org.apache.flink.configuration.RestOptions: void <clinit>()>/$stack34
<org.apache.flink.api.common.typeinfo.SqlTimeTypeInfo: int hashCode()>/$stack1
<org.apache.flink.api.common.typeinfo.LocalTimeTypeInfo: int hashCode()>/$stack1
<org.apache.flink.api.java.typeutils.runtime.RowSerializerTest: void testRowSerializerWithComplexTypes()>/$stack9
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: int hashCode()>/$stack2
<org.apache.flink.configuration.TaskManagerOptions: void <clinit>()>/$stack174
<org.apache.flink.configuration.TaskManagerOptions: void <clinit>()>/$stack184
<org.apache.flink.configuration.TaskManagerOptions: void <clinit>()>/$stack194
<org.apache.flink.api.java.typeutils.runtime.TupleSerializerBase: int hashCode()>/$stack4
<org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo: int hashCode()>/$stack1
<org.apache.flink.api.common.typeutils.base.GenericArraySerializerConfigSnapshot: void <init>(org.apache.flink.api.common.typeutils.base.GenericArraySerializer)>/$stack4
<org.apache.flink.configuration.ConfigurationTest: void testFallbackAndDeprecatedKeys()>/$stack17
<org.apache.flink.configuration.ConfigurationTest: void testFallbackAndDeprecatedKeys()>/$stack21
<org.apache.flink.configuration.ConfigurationTest: void testFallbackAndDeprecatedKeys()>/$stack36
<org.apache.flink.configuration.ConfigurationTest: void testFallbackAndDeprecatedKeys()>/$stack40
<com.esotericsoftware.kryo.factories.ReflectionSerializerFactory: com.esotericsoftware.kryo.Serializer makeSerializer(com.esotericsoftware.kryo.Kryo,java.lang.Class,java.lang.Class)>/$stack8
<com.esotericsoftware.kryo.factories.ReflectionSerializerFactory: com.esotericsoftware.kryo.Serializer makeSerializer(com.esotericsoftware.kryo.Kryo,java.lang.Class,java.lang.Class)>/$stack27
<org.apache.flink.api.common.typeutils.CompositeType: int hashCode()>/$stack1
<org.apache.flink.configuration.ResourceManagerOptions: void <clinit>()>/$stack63
<org.apache.flink.configuration.ResourceManagerOptions: void <clinit>()>/$stack85
<org.apache.flink.api.java.typeutils.runtime.RowComparatorTest: void <clinit>()>/$stack1
<org.apache.flink.api.common.typeutils.CompositeSerializerTest: void lambda$testPairFieldSerializer$5(org.apache.flink.api.java.tuple.Tuple2,org.apache.flink.api.java.tuple.Tuple2)>/fieldSerializers#_81
<org.apache.flink.util.StringUtils: java.lang.String arrayAwareToString(java.lang.Object)>/$stack2
<org.apache.flink.api.common.typeinfo.BasicTypeInfo: int hashCode()>/$stack1
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: int hashCode()>/$stack9
<com.esotericsoftware.kryo.util.ObjectMap: void <init>(com.esotericsoftware.kryo.util.ObjectMap)>/$stack8
<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest: void initialize()>/$stack3
<org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest: void testRowSerializerWithComplexTypes()>/$stack9
<org.apache.flink.util.MethodForwardingTestUtil: void testMethodForwarding(java.lang.Class,java.util.function.Function,java.util.function.Supplier,java.util.Set)>/arguments#49#_145
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoWithTypeHierarchy(java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/subTypesInfo#_886
<org.apache.flink.configuration.RestOptions: void <clinit>()>/$stack60
<org.apache.flink.util.TaskManagerExceptionUtils: void <clinit>()>/$stack0
<org.apache.flink.util.TaskManagerExceptionUtils: void <clinit>()>/$stack9
<org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit: java.lang.String toString()>/$stack1
<org.apache.flink.configuration.TaskManagerOptions: void <clinit>()>/$stack128
<org.apache.flink.configuration.TaskManagerOptions: void <clinit>()>/$stack204
<org.apache.flink.api.common.resources.Resource: java.lang.String toString()>/$stack1
<org.apache.flink.util.TimeUtils: java.time.temporal.ChronoUnit toChronoUnit(java.util.concurrent.TimeUnit)>/$stack12
<org.apache.flink.configuration.NettyShuffleEnvironmentOptions: void <clinit>()>/$stack59
<org.apache.flink.configuration.JobManagerOptions: void <clinit>()>/$stack37
<org.apache.flink.configuration.ConfigOption: java.lang.String toString()>/$stack1
<org.junit.internal.ComparisonCriteria: void arrayEquals(java.lang.String,java.lang.Object,java.lang.Object)>/$stack11
<org.apache.flink.configuration.CheckpointingOptions: void <clinit>()>/$stack81
<org.apache.flink.configuration.ConfigurationParsingInvalidFormatsTest: void testInvalidStringParsingWithGetOptional()>/$stack7
<org.apache.flink.configuration.ConfigurationParsingInvalidFormatsTest: void testInvalidStringParsingWithGet()>/$stack7
<org.apache.flink.configuration.StateBackendOptions: void <clinit>()>/$stack26
<org.apache.flink.configuration.Configuration: java.lang.Enum getEnum(java.lang.Class,org.apache.flink.configuration.ConfigOption)>/$stack14
<org.apache.flink.configuration.Configuration: java.util.Optional getOptional(org.apache.flink.configuration.ConfigOption)>/$stack14
<org.apache.flink.configuration.ExternalResourceOptions: java.lang.String keyWithResourceNameAndSuffix(java.lang.String,java.lang.String)>/$stack2
<org.apache.flink.api.common.typeutils.CompositeSerializerTest: void lambda$testSingleFieldSerializer$2(org.apache.flink.api.java.tuple.Tuple2)>/fieldSerializers#_65
<org.apache.flink.configuration.HistoryServerOptions: void <clinit>()>/$stack10
<org.apache.flink.configuration.HistoryServerOptions: void <clinit>()>/$stack40
<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializer getReconfiguredSerializer()>/$stack2
<org.apache.flink.api.java.typeutils.PojoTypeInfo: void <init>(java.lang.Class,java.util.List)>/$stack8
<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.java.typeutils.runtime.PojoSerializer createPojoSerializer(org.apache.flink.api.common.ExecutionConfig)>/reflectiveFields#_343
<org.apache.flink.api.java.typeutils.runtime.EitherSerializerConfigSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>/$stack7
<org.apache.flink.api.common.typeutils.base.MapSerializerConfigSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>/$stack7
<org.apache.flink.configuration.ConfigurationUtils: void checkConfigContains(java.util.Map,java.lang.String)>/$stack3
<com.esotericsoftware.kryo.util.ObjectMap: void <init>(com.esotericsoftware.kryo.util.ObjectMap)>/$stack7
<org.apache.flink.api.java.typeutils.runtime.NullableSerializer$NullableSerializerConfigSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>/$stack7
<org.apache.flink.api.common.typeutils.base.CollectionSerializerConfigSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>/$stack4
<org.apache.flink.api.java.typeutils.PojoTypeInfo$PojoTypeComparatorBuilder: org.apache.flink.api.common.typeutils.TypeComparator createTypeComparator(org.apache.flink.api.common.ExecutionConfig)>/$stack15
<org.apache.flink.api.common.typeutils.CompositeSerializerTest: void lambda$testPairFieldSerializer$5(org.apache.flink.api.java.tuple.Tuple2,org.apache.flink.api.java.tuple.Tuple2)>/$stack5
<org.apache.flink.api.common.typeutils.CompositeSerializerTest: void lambda$testSingleFieldSerializer$2(org.apache.flink.api.java.tuple.Tuple2)>/$stack4
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoFromFactory(java.lang.reflect.Type,java.util.List,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/subtypeInfo#_1319
<org.apache.flink.api.common.typeutils.base.GenericArraySerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers(org.apache.flink.api.common.typeutils.TypeSerializer)>/$stack3
<org.apache.flink.api.common.typeutils.base.ListSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers(org.apache.flink.api.common.typeutils.TypeSerializer)>/$stack3
<org.apache.flink.api.common.typeutils.base.MapSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers(org.apache.flink.api.common.typeutils.TypeSerializer)>/$stack3
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation[] createSubTypesInfo(java.lang.reflect.Type,java.lang.reflect.ParameterizedType,java.util.List,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation,boolean)>/subtypes#_1217
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation[] createSubTypesInfo(java.lang.reflect.Type,java.lang.reflect.ParameterizedType,java.util.List,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation,boolean)>/i#3#_1233
<com.esotericsoftware.kryo.util.ObjectMap$Keys: java.lang.Object next()>/$stack5
<com.esotericsoftware.kryo.util.ObjectMap$Entries: com.esotericsoftware.kryo.util.ObjectMap$Entry next()>/keyTable#_607
<com.esotericsoftware.kryo.util.ObjectMap: java.lang.Object put_internal(java.lang.Object,java.lang.Object)>/keyTable#_82
<com.esotericsoftware.kryo.util.ObjectMap: void putResize(java.lang.Object,java.lang.Object)>/$stack12
<com.esotericsoftware.kryo.util.ObjectMap: void putResize(java.lang.Object,java.lang.Object)>/$stack14
<com.esotericsoftware.kryo.util.ObjectMap: void putResize(java.lang.Object,java.lang.Object)>/$stack16
<com.esotericsoftware.kryo.util.ObjectMap: void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)>/keyTable#_186
<com.esotericsoftware.kryo.util.ObjectMap: java.lang.Object get(java.lang.Object)>/$stack6
<com.esotericsoftware.kryo.util.ObjectMap: java.lang.Object get(java.lang.Object)>/$stack12
<com.esotericsoftware.kryo.util.ObjectMap: java.lang.Object get(java.lang.Object)>/$stack18
<com.esotericsoftware.kryo.util.ObjectMap: java.lang.Object getStash(java.lang.Object)>/keyTable#_284
<com.esotericsoftware.kryo.util.ObjectMap: java.lang.Object get(java.lang.Object,java.lang.Object)>/$stack7
<com.esotericsoftware.kryo.util.ObjectMap: java.lang.Object get(java.lang.Object,java.lang.Object)>/$stack13
<com.esotericsoftware.kryo.util.ObjectMap: java.lang.Object get(java.lang.Object,java.lang.Object)>/$stack19
<com.esotericsoftware.kryo.util.ObjectMap: java.lang.Object getStash(java.lang.Object,java.lang.Object)>/keyTable#_305
<com.esotericsoftware.kryo.util.ObjectMap: java.lang.Object remove(java.lang.Object)>/$stack7
<com.esotericsoftware.kryo.util.ObjectMap: java.lang.Object remove(java.lang.Object)>/$stack11
<com.esotericsoftware.kryo.util.ObjectMap: java.lang.Object remove(java.lang.Object)>/$stack15
<com.esotericsoftware.kryo.util.ObjectMap: java.lang.Object removeStash(java.lang.Object)>/keyTable#_344
<com.esotericsoftware.kryo.util.ObjectMap: void removeStashIndex(int)>/$stack8
<com.esotericsoftware.kryo.util.ObjectMap: boolean containsValue(java.lang.Object,boolean)>/keyTable#_406
<com.esotericsoftware.kryo.util.ObjectMap: boolean containsKey(java.lang.Object)>/$stack6
<com.esotericsoftware.kryo.util.ObjectMap: boolean containsKey(java.lang.Object)>/$stack10
<com.esotericsoftware.kryo.util.ObjectMap: boolean containsKey(java.lang.Object)>/$stack15
<com.esotericsoftware.kryo.util.ObjectMap: boolean containsKeyStash(java.lang.Object)>/keyTable#_433
<com.esotericsoftware.kryo.util.ObjectMap: java.lang.Object findKey(java.lang.Object,boolean)>/keyTable#_446
<com.esotericsoftware.kryo.util.ObjectMap: java.lang.Object findKey(java.lang.Object,boolean)>/$stack18
<com.esotericsoftware.kryo.util.ObjectMap: java.lang.Object findKey(java.lang.Object,boolean)>/$stack11
<com.esotericsoftware.kryo.util.ObjectMap: void resize(int)>/oldKeyTable#_476
<com.esotericsoftware.kryo.util.ObjectMap: java.lang.String toString()>/keyTable#_507
<com.esotericsoftware.kryo.util.ObjectMap$MapIterator: void advance()>/keyTable#_573
<com.esotericsoftware.kryo.util.ObjectMap: void <init>(int,float)>/$stack36
<com.esotericsoftware.kryo.util.ObjectMap: void <init>(com.esotericsoftware.kryo.util.ObjectMap)>/$stack5
<com.esotericsoftware.kryo.util.ObjectMap: void putResize(java.lang.Object,java.lang.Object)>/$stack31
<com.esotericsoftware.kryo.util.ObjectMap: void putResize(java.lang.Object,java.lang.Object)>/$stack24
<com.esotericsoftware.kryo.util.ObjectMap: void putResize(java.lang.Object,java.lang.Object)>/$stack17
<com.esotericsoftware.kryo.util.ObjectMap: void putStash(java.lang.Object,java.lang.Object)>/$stack8
<com.esotericsoftware.kryo.util.ObjectMap: java.lang.Object remove(java.lang.Object)>/$stack29
<com.esotericsoftware.kryo.util.ObjectMap: java.lang.Object remove(java.lang.Object)>/$stack24
<com.esotericsoftware.kryo.util.ObjectMap: java.lang.Object remove(java.lang.Object)>/$stack19
<com.esotericsoftware.kryo.util.ObjectMap: void removeStashIndex(int)>/$stack10
<com.esotericsoftware.kryo.util.ObjectMap: void clear()>/keyTable#_389
<com.esotericsoftware.kryo.util.ObjectMap$MapIterator: void remove()>/$stack7
<org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys: org.apache.flink.api.common.typeinfo.TypeInformation[] getKeyFieldTypes()>/fieldTypes#_151
<org.apache.flink.api.common.typeutils.base.GenericArraySerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers(org.apache.flink.api.common.typeutils.base.GenericArraySerializer)>/$stack2
<org.apache.flink.api.common.operators.Keys$ExpressionKeys: org.apache.flink.api.common.typeinfo.TypeInformation[] getKeyFieldTypes()>/fieldTypes#_389
<org.apache.flink.api.common.typeutils.base.ListSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers(org.apache.flink.api.common.typeutils.base.ListSerializer)>/$stack2
<org.apache.flink.api.common.typeutils.base.MapSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers(org.apache.flink.api.common.typeutils.base.MapSerializer)>/$stack2
