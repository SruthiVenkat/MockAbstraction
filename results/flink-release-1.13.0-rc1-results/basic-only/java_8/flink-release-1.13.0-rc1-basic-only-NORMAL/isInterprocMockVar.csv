<org.apache.flink.api.common.typeutils.GenericTypeSerializerConfigSnapshot: boolean equals(java.lang.Object)>/$stack7
<org.apache.flink.api.java.typeutils.MultisetTypeInfo: java.lang.String toString()>/$stack3
<org.apache.flink.api.java.typeutils.MultisetTypeInfo: boolean equals(java.lang.Object)>/$stack6
<org.apache.flink.configuration.ResourceManagerOptions: void <clinit>()>/$stack22
<org.apache.flink.configuration.ResourceManagerOptions: void <clinit>()>/$stack33
<org.apache.flink.configuration.ResourceManagerOptions: void <clinit>()>/$stack55
<org.apache.flink.configuration.ResourceManagerOptions: void <clinit>()>/$stack104
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testPojoWC()>/typeForClass#_232
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testPojoAllPublic()>/typeForClass#_448
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testPojoExtendingTuple()>/typeForClass#_509
<org.apache.flink.configuration.JobManagerOptions: void <clinit>()>/$stack14
<org.apache.flink.configuration.JobManagerOptions: void <clinit>()>/$stack25
<org.apache.flink.configuration.JobManagerOptions: void <clinit>()>/$stack80
<org.apache.flink.configuration.JobManagerOptions: void <clinit>()>/$stack205
<org.apache.flink.configuration.JobManagerOptions: void <clinit>()>/$stack226
<org.junit.ComparisonFailure$ComparisonCompactor$DiffExtractor: java.lang.String expectedDiff()>/$stack2
<org.junit.ComparisonFailure$ComparisonCompactor$DiffExtractor: java.lang.String actualDiff()>/$stack2
<org.apache.flink.api.java.typeutils.runtime.TupleSerializerConfigSnapshot: boolean equals(java.lang.Object)>/$stack7
<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream: void <init>(org.apache.flink.core.fs.local.LocalRecoverable)>/$stack2
<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream: void <init>(org.apache.flink.core.fs.local.LocalRecoverable)>/$stack5
<org.apache.flink.configuration.ClusterOptions$UserSystemExitMode: org.apache.flink.configuration.description.Description getConfigDescription()>/$stack22
<org.apache.flink.configuration.Configuration: void setString(org.apache.flink.configuration.ConfigOption,java.lang.String)>/$stack3
<org.apache.flink.configuration.Configuration: void setInteger(org.apache.flink.configuration.ConfigOption,int)>/$stack3
<org.apache.flink.configuration.Configuration: void setLong(org.apache.flink.configuration.ConfigOption,long)>/$stack4
<org.apache.flink.configuration.Configuration: void setBoolean(org.apache.flink.configuration.ConfigOption,boolean)>/$stack3
<org.apache.flink.configuration.Configuration: void setFloat(org.apache.flink.configuration.ConfigOption,float)>/$stack3
<org.apache.flink.configuration.Configuration: void setDouble(org.apache.flink.configuration.ConfigOption,double)>/$stack4
<org.apache.flink.configuration.Configuration: boolean contains(org.apache.flink.configuration.ConfigOption)>/$stack8
<org.apache.flink.configuration.Configuration: java.util.Optional getOptional(org.apache.flink.configuration.ConfigOption)>/clazz#_690
<org.apache.flink.configuration.Configuration: org.apache.flink.configuration.Configuration set(org.apache.flink.configuration.ConfigOption,java.lang.Object)>/$stack3
<org.apache.flink.configuration.Configuration: boolean removeConfig(org.apache.flink.configuration.ConfigOption)>/$stack9
<org.apache.flink.configuration.Configuration: java.util.Optional getRawValueFromOption(org.apache.flink.configuration.ConfigOption)>/$stack6
<org.apache.flink.api.java.typeutils.PojoTypeInfo$NamedFlatFieldDescriptor: java.lang.String toString()>/$stack9
<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream$LocalCommitter: void commit()>/dest#_141
<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream$LocalCommitter: void commit()>/src#_140
<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream$LocalCommitter: void commitAfterRecovery()>/src#_167
<org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer: boolean equals(java.lang.Object)>/$stack5
<org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer: int hashCode()>/$stack1
<org.apache.flink.configuration.RestartStrategyOptions: void <clinit>()>/$stack70
<org.apache.flink.configuration.RestartStrategyOptions: void <clinit>()>/$stack86
<org.apache.flink.configuration.RestartStrategyOptions: void <clinit>()>/$stack101
<org.apache.flink.util.MethodForwardingTestUtil: void testMethodForwarding(java.lang.Class,java.util.function.Function,java.util.function.Supplier,java.util.Set)>/$stack36
<org.apache.flink.configuration.RestartStrategyOptions: void <clinit>()>/$stack117
<org.apache.flink.configuration.RestartStrategyOptions: void <clinit>()>/$stack133
<org.apache.flink.configuration.RestartStrategyOptions: void <clinit>()>/$stack149
<org.apache.flink.configuration.RestartStrategyOptions: void <clinit>()>/$stack165
<org.apache.flink.configuration.RestartStrategyOptions: void <clinit>()>/$stack181
<org.apache.flink.configuration.RestartStrategyOptions: void <clinit>()>/$stack197
<org.apache.flink.configuration.RestartStrategyOptions: void <clinit>()>/$stack213
<com.esotericsoftware.kryo.util.DefaultClassResolver: com.esotericsoftware.kryo.Registration register(com.esotericsoftware.kryo.Registration)>/$stack41
<com.esotericsoftware.kryo.util.DefaultClassResolver: com.esotericsoftware.kryo.Registration register(com.esotericsoftware.kryo.Registration)>/$stack17
<com.esotericsoftware.kryo.util.DefaultClassResolver: com.esotericsoftware.kryo.Registration register(com.esotericsoftware.kryo.Registration)>/$stack5
<com.esotericsoftware.kryo.util.DefaultClassResolver: com.esotericsoftware.kryo.Registration register(com.esotericsoftware.kryo.Registration)>/$stack10
<com.esotericsoftware.kryo.util.DefaultClassResolver: com.esotericsoftware.kryo.Registration readClass(com.esotericsoftware.kryo.io.Input)>/$stack24
<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest: void testAnonymousSerializerClassWithChangedSerialVersionUID()>/anonymousClassSerializer#75#_275
<org.apache.flink.configuration.MetricOptions: void <clinit>()>/$stack67
<org.apache.flink.api.common.state.StateDescriptor: void <init>(java.lang.String,org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Object)>/$stack9
<org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest: void testTypeExtractionTuple()>/expected#_44
<org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest: void testTypeExtractionTupleAnonymous()>/expected#_59
<org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest: void testTypeExtractionGeneric()>/expected#_66
<org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest: void testTypeExtractionGenericAnonymous()>/expected#_80
<org.apache.flink.configuration.ReadableWritableConfigurationTest: void testGetOptionalFromString()>/$stack7
<org.apache.flink.configuration.HighAvailabilityOptions: void <clinit>()>/$stack23
<org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.types.Row copyPositionBased(org.apache.flink.types.Row)>/$stack9
<org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.types.Row copyNameBased(org.apache.flink.types.Row,java.util.Set)>/$stack10
<org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.types.Row copyPositionBased(org.apache.flink.types.Row,org.apache.flink.types.Row)>/$stack23
<org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.types.Row copyNameBased(org.apache.flink.types.Row,java.util.Set,org.apache.flink.types.Row)>/$stack11
<org.apache.flink.api.java.typeutils.runtime.RowSerializer: void serializeNameBased(org.apache.flink.types.Row,java.util.Set,org.apache.flink.core.memory.DataOutputView)>/$stack11
<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer restoreSerializer()>/$stack3
<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer)>/$stack7
<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer)>/$stack14
<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer)>/$stack21
<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.util.LinkedOptionalMap$MergeResult,org.apache.flink.util.LinkedOptionalMap$MergeResult,org.apache.flink.util.LinkedOptionalMap$MergeResult)>/$stack8
<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.java.typeutils.runtime.TupleSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>/i#2#_107
<org.apache.flink.api.java.typeutils.runtime.KryoUtils: void applyRegistrations(com.esotericsoftware.kryo.Kryo,java.util.Collection)>/$stack13
<org.apache.flink.api.java.typeutils.runtime.KryoUtils: void applyRegistrations(com.esotericsoftware.kryo.Kryo,java.util.Collection)>/$stack9
<org.apache.flink.api.common.typeutils.TypeSerializerMatchers$CompatibleAfterReconfiguration: boolean matchesSafely(org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility,org.hamcrest.Description)>/reconfiguredSerializer#_172
<org.apache.flink.configuration.TaskManagerOptions: void <clinit>()>/$stack36
<org.apache.flink.configuration.TaskManagerOptions: void <clinit>()>/$stack105
<org.apache.flink.configuration.TaskManagerOptions: void <clinit>()>/$stack128
<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerCompatibilityTest: void testDeserializingKryoSerializerWithoutAvro()>/serializer#_87
<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>/$stack9
<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>/$stack6
<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.java.typeutils.runtime.PojoSerializer createPojoSerializer(org.apache.flink.api.common.ExecutionConfig)>/$stack12
<org.apache.flink.api.java.typeutils.runtime.ValueSerializer$ValueSerializerConfigSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>/$stack3
<org.apache.flink.core.fs.LimitedConnectionsFileSystem$ConnectionLimitingSettings: void checkLimit(int,org.apache.flink.configuration.ConfigOption)>/$stack5
<org.apache.flink.core.fs.LimitedConnectionsFileSystem$ConnectionLimitingSettings: void checkTimeout(long,org.apache.flink.configuration.ConfigOption)>/$stack7
<org.apache.flink.api.java.typeutils.runtime.TupleSerializerSnapshot: void <init>(org.apache.flink.api.java.typeutils.runtime.TupleSerializer)>/$stack2
<org.apache.flink.configuration.description.Formatter: void format(org.apache.flink.configuration.description.TextElement)>/$stack10
<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: void restoreSerializerIsValid()>/$stack16
<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: void upgradedSerializerHasExpectedSchemaCompatibility()>/$stack20
<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: void upgradedSerializerIsValidAfterReconfiguration()>/reconfiguredUpgradedSerializer#_373
<org.apache.flink.configuration.RestOptions: void <clinit>()>/$stack44
<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: java.lang.String getGenerateResourceDirectory()>/$stack6
<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: java.lang.String getTestResourceDirectory()>/$stack6
<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: java.lang.String getTestResourceDirectory()>/$stack10
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoWithTypeHierarchy(java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack53
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoWithTypeHierarchy(java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack72
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoWithTypeHierarchy(java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack20
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoFromInputs(java.lang.reflect.TypeVariable,java.util.List,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/clazz#_1001
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoFromInput(java.lang.reflect.TypeVariable,java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack56
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoFromInput(java.lang.reflect.TypeVariable,java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack24
<org.apache.flink.api.java.typeutils.TypeExtractor: void validateInfo(java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack167
<org.apache.flink.api.java.typeutils.TypeExtractor: void validateInfo(java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack35
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation analyzePojo(java.lang.reflect.Type,java.util.List,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/clazz#_2008
<org.apache.flink.api.common.typeutils.ParameterlessTypeSerializerConfig: boolean equals(java.lang.Object)>/$stack5
<org.apache.flink.api.common.typeutils.base.EnumSerializerUpgradeTest$1: boolean matchesSafely(org.apache.flink.api.common.typeutils.base.EnumSerializer)>/$stack2
<org.apache.flink.util.OutputTag: java.lang.String toString()>/$stack3
<org.apache.flink.api.common.typeinfo.BasicTypeInfo: boolean shouldAutocastTo(org.apache.flink.api.common.typeinfo.BasicTypeInfo)>/$stack6
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testBasicType()>/ti#_90
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testGenericTypeWithSubclassInput()>/expected#_2347
<org.apache.flink.api.common.operators.CollectionExecutor$DynamicPathCollector: void postVisit(org.apache.flink.api.common.operators.Operator)>/$stack43
<org.apache.flink.api.common.operators.CollectionExecutor$DynamicPathCollector: void postVisit(org.apache.flink.api.common.operators.Operator)>/$stack23
<org.apache.flink.api.common.operators.CollectionExecutor$DynamicPathCollector: void postVisit(org.apache.flink.api.common.operators.Operator)>/$stack26
<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil$TypeSerializerSerializationProxy: void write(org.apache.flink.core.memory.DataOutputView)>/serializerBytes#_277
<org.apache.flink.types.RowTest: void testRowNamed()>/$stack18
<org.apache.flink.types.RowTest: void testRowPositioned()>/$stack17
<org.apache.flink.types.RowTest: void testRowNamedPositioned()>/$stack32
<org.apache.flink.api.common.operators.util.FieldList: void <init>(java.lang.Integer)>/$stack2
<com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer: java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)>/$stack10
<org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.lang.Class getRawClass(java.lang.reflect.Type)>/$stack6
<org.apache.flink.configuration.ExecutionOptions: void <clinit>()>/$stack38
<org.apache.flink.configuration.CoreOptions: void <clinit>()>/$stack13
<org.apache.flink.configuration.CoreOptions: void <clinit>()>/$stack38
<org.apache.flink.types.Row: org.apache.flink.types.Row project(org.apache.flink.types.Row,java.lang.String[])>/$stack7
<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil: org.apache.flink.api.common.typeutils.TypeSerializer tryReadSerializer(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader,boolean)>/$stack12
<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil: java.util.List readSerializersAndConfigsWithResilience(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>/serializer#_218
<org.apache.flink.api.common.state.MapStateDescriptorTest: void testMapStateDescriptor()>/$stack17
<org.apache.flink.api.common.state.MapStateDescriptorTest: void testMapStateDescriptor()>/$stack19
<org.apache.flink.api.common.state.MapStateDescriptorTest: void testMapStateDescriptor()>/$stack27
<org.apache.flink.api.common.state.MapStateDescriptorTest: void testMapStateDescriptor()>/$stack29
<org.apache.flink.api.common.state.MapStateDescriptorTest: void testSerializerDuplication()>/keySerializerA#_121
<org.apache.flink.api.common.state.MapStateDescriptorTest: void testSerializerDuplication()>/valueSerializerA#_123
<org.apache.flink.api.common.operators.CollectionExecutor: void executeDataSink(org.apache.flink.api.common.operators.GenericDataSinkBase,int,org.apache.flink.api.common.JobID)>/inputOp#_174
<org.apache.flink.api.common.operators.CollectionExecutor: java.util.List executeUnaryOperator(org.apache.flink.api.common.operators.SingleInputOperator,int,org.apache.flink.api.common.JobID)>/inputOp#_256
<org.apache.flink.api.common.operators.CollectionExecutor: java.util.List executeBinaryOperator(org.apache.flink.api.common.operators.DualInputOperator,int,org.apache.flink.api.common.JobID)>/inputOp1#_307
<org.apache.flink.api.common.operators.CollectionExecutor: java.util.List executeBinaryOperator(org.apache.flink.api.common.operators.DualInputOperator,int,org.apache.flink.api.common.JobID)>/inputOp2#_308
<org.apache.flink.api.common.operators.CollectionExecutor: java.util.List executeBulkIteration(org.apache.flink.api.common.operators.base.BulkIterationBase,org.apache.flink.api.common.JobID)>/inputOp#_370
<org.apache.flink.api.common.serialization.SimpleStringSchemaTest: void testSerializability()>/$stack6
<org.apache.flink.api.common.operators.CollectionExecutor: java.util.List executeDeltaIteration(org.apache.flink.api.common.operators.base.DeltaIterationBase,org.apache.flink.api.common.JobID)>/solutionInput#_453
<org.apache.flink.api.common.operators.CollectionExecutor: java.util.List executeDeltaIteration(org.apache.flink.api.common.operators.base.DeltaIterationBase,org.apache.flink.api.common.JobID)>/worksetInput#_454
<org.apache.flink.api.java.typeutils.PojoTypeInfo$PojoTypeComparatorBuilder: void addComparatorField(int,org.apache.flink.api.common.typeutils.TypeComparator)>/$stack9
<org.apache.flink.api.common.state.ListStateDescriptorTest: void testListStateDescriptor()>/$stack13
<org.apache.flink.api.common.state.ListStateDescriptorTest: void testListStateDescriptor()>/$stack21
<org.apache.flink.api.common.state.ListStateDescriptorTest: void testSerializerDuplication()>/serializerA#_108
<com.esotericsoftware.kryo.util.ObjectMap$Keys: java.util.ArrayList toArray()>/$stack6
<org.apache.flink.configuration.DelegatingConfiguration: void setString(org.apache.flink.configuration.ConfigOption,java.lang.String)>/$stack7
<org.apache.flink.configuration.DelegatingConfiguration: void setInteger(org.apache.flink.configuration.ConfigOption,int)>/$stack7
<org.apache.flink.configuration.DelegatingConfiguration: void setLong(org.apache.flink.configuration.ConfigOption,long)>/$stack8
<org.apache.flink.configuration.DelegatingConfiguration: void setBoolean(org.apache.flink.configuration.ConfigOption,boolean)>/$stack7
<org.apache.flink.configuration.DelegatingConfiguration: void setFloat(org.apache.flink.configuration.ConfigOption,float)>/$stack7
<org.apache.flink.api.common.resources.ExternalResource: org.apache.flink.api.common.resources.ExternalResource create(java.math.BigDecimal)>/$stack3
<org.apache.flink.configuration.DelegatingConfiguration: void setDouble(org.apache.flink.configuration.ConfigOption,double)>/$stack8
<org.apache.flink.configuration.DelegatingConfiguration: org.apache.flink.configuration.ConfigOption prefixOption(org.apache.flink.configuration.ConfigOption,java.lang.String)>/$stack8
<org.apache.flink.api.java.typeutils.LambdaExtractionTest: void testLambdaWithMemberVariable()>/ti#_128
<org.apache.flink.api.java.typeutils.LambdaExtractionTest: void testLambdaWithLocalVariable()>/ti#_140
<org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot: void read(org.apache.flink.core.memory.DataInputView)>/$stack10
<org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot: boolean equals(java.lang.Object)>/$stack5
<org.apache.flink.configuration.ConfigurationTest: void testShouldParseValidStringToEnum()>/$stack6
<org.apache.flink.configuration.ConfigurationTest: void testShouldParseValidStringToEnumIgnoringCase()>/$stack6
<org.apache.flink.configuration.ConfigurationTest: void testThrowsExceptionIfTryingToParseInvalidStringForEnum()>/$stack8
<org.apache.flink.configuration.ConfigurationTest: void testThrowsExceptionIfTryingToParseInvalidStringForEnum()>/$stack13
<org.apache.flink.api.java.typeutils.runtime.CopyableValueSerializer$CopyableValueSerializerConfigSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>/$stack3
<org.apache.flink.configuration.ConfigurationTest: void testToMap()>/$stack28
<org.apache.flink.configuration.ConfigurationTest: void testToMap()>/$stack32
<org.apache.flink.configuration.ConfigurationTest: void testToMap()>/$stack40
<org.apache.flink.util.TimeUtils: java.time.Duration toDuration(org.apache.flink.api.common.time.Time)>/$stack2
<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer$KryoSerializerConfigSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>/$stack6
<org.apache.flink.api.common.resources.Resource: org.apache.flink.api.common.resources.Resource merge(org.apache.flink.api.common.resources.Resource)>/$stack6
<org.apache.flink.api.common.resources.Resource: org.apache.flink.api.common.resources.Resource subtract(org.apache.flink.api.common.resources.Resource)>/$stack6
<org.apache.flink.api.common.resources.Resource: boolean equals(java.lang.Object)>/$stack7
<org.apache.flink.api.java.typeutils.runtime.kryo.Serializers: void recursivelyRegisterType(org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.ExecutionConfig,java.util.Set)>/$stack17
<org.apache.flink.api.java.typeutils.runtime.kryo.Serializers: void recursivelyRegisterType(org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.ExecutionConfig,java.util.Set)>/$stack15
<org.apache.flink.api.java.typeutils.runtime.kryo.Serializers: void recursivelyRegisterType(org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.ExecutionConfig,java.util.Set)>/$stack9
<org.apache.flink.api.java.typeutils.runtime.kryo.Serializers: void recursivelyRegisterGenericType(java.lang.reflect.Type,org.apache.flink.api.common.ExecutionConfig,java.util.Set)>/$stack17
<org.apache.flink.api.java.typeutils.runtime.TupleSerializer: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibilityViaRedirectingToNewSnapshotClass(org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot)>/$stack13
<org.apache.flink.api.common.io.DelimitedInputFormat: void loadConfigParameters(org.apache.flink.configuration.Configuration)>/$stack59
<org.apache.flink.api.common.io.DelimitedInputFormat: void loadConfigParameters(org.apache.flink.configuration.Configuration)>/$stack43
<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec subtract(org.apache.flink.api.common.operators.ResourceSpec)>/$stack33
<org.apache.flink.api.common.operators.ResourceSpec: boolean lessThanOrEqual(org.apache.flink.api.common.operators.ResourceSpec)>/$stack37
<org.apache.flink.api.common.operators.ResourceSpec: boolean lessThanOrEqual(org.apache.flink.api.common.operators.ResourceSpec)>/$stack40
<org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerConfigSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>/enumClass#_351
<com.esotericsoftware.kryo.util.Util: java.lang.String className(java.lang.Class)>/elementClass#_101
<org.apache.flink.configuration.NettyShuffleEnvironmentOptions: void <clinit>()>/$stack10
<org.apache.flink.configuration.NettyShuffleEnvironmentOptions: void <clinit>()>/$stack21
<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void <init>(org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer)>/serializerInstance#_171
<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void <init>(org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer)>/$stack37
<org.apache.flink.api.java.typeutils.PojoParametrizedTypeExtractionTest: void testDirectlyCreateTypeInfo()>/directTypeInfo#_38
<org.apache.flink.api.java.typeutils.PojoParametrizedTypeExtractionTest: void testMapReturnTypeInfo()>/mapReturnTypeInfo#_49
<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.api.common.operators.ResourceSpec$Builder setExtendedResource(org.apache.flink.api.common.resources.ExternalResource)>/$stack3
<org.apache.flink.api.common.ExecutionConfigTest: void testNotOverridingRestartStrategiesWithDefaultsFromConfiguration()>/$stack10
<org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation TUPLE(java.lang.Class)>/ti#_252
<org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation POJO(java.lang.Class)>/ti#_280
<org.apache.flink.configuration.ConfigurationParsingInvalidFormatsTest: void testInvalidStringParsingWithGetOptional()>/$stack4
<org.apache.flink.configuration.ConfigurationParsingInvalidFormatsTest: void testInvalidStringParsingWithGet()>/$stack4
<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(int[],org.apache.flink.api.common.typeinfo.TypeInformation,boolean)>/$stack46
<org.apache.flink.api.common.typeutils.base.MapSerializer: boolean equals(java.lang.Object)>/$stack7
<org.apache.flink.api.common.typeutils.base.MapSerializer: boolean equals(java.lang.Object)>/$stack11
<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(java.lang.String[],org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack62
<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void validateCustomPartitioner(org.apache.flink.api.common.functions.Partitioner,org.apache.flink.api.common.typeinfo.TypeInformation)>/keyType#5#_422
<org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>/$stack9
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>/$stack14
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: void read(org.apache.flink.core.memory.DataInputView)>/fieldSerializer#_864
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: void read(org.apache.flink.core.memory.DataInputView)>/registeredSubclassSerializer#_901
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: void read(org.apache.flink.core.memory.DataInputView)>/cachedSubclassSerializer#_941
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: boolean equals(java.lang.Object)>/$stack7
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: boolean equals(java.lang.Object)>/$stack11
<org.apache.flink.api.connector.source.lib.NumberSequenceSource$SplitSerializer: void serializeV1(org.apache.flink.core.memory.DataOutputView,org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit)>/$stack2
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer restoreSerializer()>/$stack26
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: org.apache.flink.api.java.typeutils.runtime.PojoSerializer constructReconfiguredPojoSerializer(org.apache.flink.api.java.typeutils.runtime.PojoSerializer,org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult,org.apache.flink.util.LinkedOptionalMap,org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult,org.apache.flink.util.LinkedOptionalMap)>/$stack11
<org.apache.flink.configuration.ConfigurationUtils: java.util.Map parseTmResourceDynamicConfigs(java.lang.String)>/$stack18
<org.apache.flink.configuration.ConfigurationUtils: java.util.Map parseTmResourceDynamicConfigs(java.lang.String)>/$stack20
<org.apache.flink.configuration.ConfigurationUtils: java.util.Map parseTmResourceDynamicConfigs(java.lang.String)>/$stack22
<org.apache.flink.configuration.ConfigurationUtils: java.util.Map parseTmResourceDynamicConfigs(java.lang.String)>/$stack24
<org.apache.flink.configuration.ConfigurationUtils: java.util.Map parseTmResourceDynamicConfigs(java.lang.String)>/$stack26
<org.apache.flink.configuration.ConfigurationUtils: java.util.Map parseTmResourceDynamicConfigs(java.lang.String)>/$stack28
<org.apache.flink.configuration.ConfigurationUtils: java.util.Map parseTmResourceDynamicConfigs(java.lang.String)>/$stack30
<org.apache.flink.configuration.ConfigurationUtils: java.util.Map parseTmResourceDynamicConfigs(java.lang.String)>/$stack32
<org.apache.flink.configuration.ConfigurationUtils: java.util.Map parseTmResourceDynamicConfigs(java.lang.String)>/$stack34
<org.apache.flink.configuration.ConfigurationUtils: java.util.Map parseTmResourceDynamicConfigs(java.lang.String)>/$stack36
<org.apache.flink.configuration.ConfigurationUtils: java.util.Map parseTmResourceDynamicConfigs(java.lang.String)>/$stack38
<org.apache.flink.configuration.ConfigurationUtils: java.util.Map parseTmResourceDynamicConfigs(java.lang.String)>/$stack40
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void checkWCPojoAsserts(org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack145
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void checkWCPojoAsserts(org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack137
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void checkWCPojoAsserts(org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack129
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void checkWCPojoAsserts(org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack97
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void checkWCPojoAsserts(org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack88
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void checkWCPojoAsserts(org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack83
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void checkAllPublicAsserts(org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack34
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void checkFromTuplePojo(org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack26
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void checkFromTuplePojo(org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack17
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void checkFromTuplePojo(org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack23
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testPojoWithGenerics()>/$stack29
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testPojoWithGenerics()>/$stack27
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testPojoWithGenerics()>/$stack25
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testPojoWithGenerics()>/$stack23
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testPojoWithGenericsSomeFieldsGeneric()>/$stack26
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testPojoWithGenericsSomeFieldsGeneric()>/$stack24
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testPojoWithGenericsSomeFieldsGeneric()>/$stack22
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testPojoWithComplexHierarchy()>/$stack22
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testGenericPojoTypeInference1()>/$stack9
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testGenericPojoTypeInference1()>/$stack30
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testGenericPojoTypeInference1()>/$stack28
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testGenericPojoTypeInference1()>/$stack26
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testGenericPojoTypeInference2()>/$stack9
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testGenericPojoTypeInference2()>/$stack33
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testGenericPojoTypeInference2()>/$stack31
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testGenericPojoTypeInference2()>/$stack29
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testGenericPojoTypeInference2()>/$stack27
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testGenericPojoTypeInference3()>/$stack6
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testGenericPojoTypeInference4()>/$stack5
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testGenericPojoTypeInference4()>/ti#_735
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testGenericPojoTypeInference5()>/$stack5
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testGenericPojoTypeInference5()>/ti#_760
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testGenericPojoTypeInference6()>/$stack5
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testGenericPojoTypeInference6()>/ti#_785
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testGenericPojoTypeInference7()>/$stack5
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testGenericPojoTypeInference7()>/ti#_811
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testDualUseOfPojo()>/$stack5
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testLombokPojo()>/$stack6
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testLombokPojo()>/$stack8
<org.apache.flink.api.java.typeutils.runtime.TupleSerializerConfigSnapshot: void read(org.apache.flink.core.memory.DataInputView)>/$stack8
<org.apache.flink.api.common.state.ReducingStateDescriptorTest: void testReducingStateDescriptor()>/$stack11
<org.apache.flink.api.common.state.ReducingStateDescriptorTest: void testReducingStateDescriptor()>/$stack14
<org.apache.flink.api.common.state.ReducingStateDescriptorTest: void testReducingStateDescriptor()>/$stack17
<org.apache.flink.api.java.typeutils.CompositeTypeTest: void testGetFlatFields()>/$stack241
<org.apache.flink.api.java.typeutils.CompositeTypeTest: void testGetFlatFields()>/$stack247
<org.apache.flink.api.java.typeutils.CompositeTypeTest: void testGetFlatFields()>/$stack253
<org.apache.flink.api.java.typeutils.CompositeTypeTest: void testGetFlatFields()>/$stack259
<org.apache.flink.api.java.typeutils.CompositeTypeTest: void testFieldAtStringRef()>/$stack57
<org.apache.flink.api.java.typeutils.CompositeTypeTest: void testFieldAtStringRef()>/$stack60
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: void testRestoreSerializerWithSameFields()>/restoredFields#_126
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: void testRestoreSerializerWithSameFields()>/restoredFieldSerializers#_131
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: void testRestoreSerializerWithRemovedFields()>/restoredFields#_153
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: void testRestoreSerializerWithRemovedFields()>/restoredFieldSerializers#_157
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: void testRestoreSerializerWithNewFields()>/restoredFields#_175
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: void testRestoreSerializerWithNewFields()>/restoredFieldSerializers#_179
<org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer: boolean equals(java.lang.Object)>/$stack6
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: void testResolveSchemaCompatibilityWithCompatibleWithReconfigurationFieldSerializers()>/reconfiguredFieldSerializers#_332
<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest: void testSerializerSerialization()>/out#39#_78
<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest: void testSerializerSerializationWithClassNotFound()>/$stack25
<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest: void testSerializeConfigurationSnapshots()>/out#42#_169
<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$KryoRegistrationUtil: void writeKryoRegistration(org.apache.flink.core.memory.DataOutputView,org.apache.flink.api.java.typeutils.runtime.KryoRegistration)>/$stack17
<org.apache.flink.api.common.typeinfo.TypeInformationTest: void testOfClass()>/$stack2
<org.apache.flink.api.common.typeinfo.TypeInformationTest: void testOfGenericClassForGenericType()>/$stack2
<org.apache.flink.api.common.typeinfo.TypeInformationTest: void testOfTypeHint()>/$stack3
<org.apache.flink.api.common.typeinfo.TypeInformationTest: void testOfTypeHint()>/$stack6
<org.apache.flink.api.common.typeinfo.TypeInformationTest: void testOfTypeHint()>/$stack13
<org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest: void testTypeExtractionTuple()>/type#_42
<org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest: void testTypeExtractionTupleAnonymous()>/type#_56
<org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest: void testTypeExtractionGeneric()>/type#_65
<org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest: void testTypeExtractionGenericAnonymous()>/type#_78
<org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest: void testIndirectGenericExtension()>/type#_106
<org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest$EitherSerializerTestInstance: void testInstantiate()>/type#_247
<org.apache.flink.api.common.typeutils.base.EnumSerializerTest: void testReconfiguration()>/$stack82
<org.apache.flink.api.common.typeutils.base.EnumSerializerTest: void testConfigurationSnapshotSerialization()>/$stack77
<org.apache.flink.api.common.typeutils.base.EnumSerializerTest: void testSerializeEnumSerializer()>/$stack59
<org.apache.flink.api.common.typeutils.base.EnumSerializerTest: void testSerializeEnumSerializer()>/$stack120
<org.apache.flink.api.common.typeutils.base.EnumSerializerTest: void testSerializeReconfiguredEnumSerializer()>/$stack82
<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotUnderTest()>/$stack4
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoWithTypeHierarchy(java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/curT_$$A_3#_904
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoWithTypeHierarchy(java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/subTypesInfo#10#_949
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoFromInputs(java.lang.reflect.TypeVariable,java.util.List,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/matReturnTypeVar#_982
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoFromInput(java.lang.reflect.TypeVariable,java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack49
<org.apache.flink.api.java.typeutils.runtime.TupleComparatorTTT1Test: void deepEquals(java.lang.String,org.apache.flink.api.java.tuple.Tuple2,org.apache.flink.api.java.tuple.Tuple2)>/$stack6
<org.apache.flink.api.java.typeutils.TypeExtractor: void validateInfo(java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation)>/type#24#_1659
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation privateGetForClass(java.lang.Class,java.util.List,java.lang.reflect.ParameterizedType,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/componentTypeInfo#_1851
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation analyzePojo(java.lang.reflect.Type,java.util.List,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/ti#_2049
<org.apache.flink.api.java.typeutils.runtime.TupleComparatorTTT2Test: void deepEquals(java.lang.String,org.apache.flink.api.java.tuple.Tuple2,org.apache.flink.api.java.tuple.Tuple2)>/$stack6
<org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer[])>/$stack14
<org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot: void read(org.apache.flink.core.memory.DataInputView)>/$stack2
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testTupleWithBasicTypes()>/$stack10
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testTupleWithBasicTypes()>/$stack26
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testTupleWithTuples()>/$stack9
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testTupleWithTuples()>/$stack40
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testTuple0()>/$stack5
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testSubclassOfTuple()>/$stack7
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testSubclassOfTuple()>/$stack22
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testSubclassOfTuple()>/$stack39
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testPojo()>/$stack7
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testTupleWithPojo()>/$stack10
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testTupleWithPojo()>/$stack17
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testTupleWithPojo()>/$stack69
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testValue()>/$stack6
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testTupleOfValues()>/$stack7
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testGenericsNotInSuperclass()>/$stack6
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testGenericsNotInSuperclass()>/$stack13
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testChainedGenericsNotInSuperclass()>/$stack6
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testChainedGenericsNotInSuperclass()>/$stack13
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testGenericsInDirectSuperclass()>/$stack6
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testGenericsInDirectSuperclass()>/$stack13
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testGenericsNotInSuperclassWithNonGenericClassAtEnd()>/$stack6
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testGenericsNotInSuperclassWithNonGenericClassAtEnd()>/$stack13
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testSameGenericVariable()>/$stack6
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testSameGenericVariable()>/$stack13
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testNestedTupleGenerics()>/$stack7
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testNestedTupleGenerics()>/$stack14
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testNestedTupleGenerics()>/$stack25
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testNestedTupleGenerics2()>/$stack9
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testFunctionDependingOnInputAsSuperclass()>/ti#_1061
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testFunctionDependingOnInputFromInput()>/ti#_1081
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testFunctionDependingOnInputWithTupleInput()>/ti#_1116
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testFunctionDependingOnInputWithCustomTupleInput()>/$stack6
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testFunctionDependingOnInputWithFunctionHierarchy()>/ti#_1176
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testFunctionWithNoGenericSuperclass()>/ti#_1226
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testFunctionDependingPartialOnInput()>/$stack7
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testFunctionDependingPartialOnInput()>/$stack17
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testFunctionDependingPartialOnInput2()>/$stack16
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testValueSupertypeException()>/$stack6
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testValueSupertypeException()>/$stack10
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testBasicArray()>/$stack5
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testBasicArray()>/ti#_1440
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testBasicArray()>/$stack15
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testBasicArray2()>/$stack11
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testCustomArray()>/$stack5
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testTupleArray()>/$stack7
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testCustomArrayWithTypeVariable()>/$stack7
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testParameterizedArrays()>/$stack6
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testParameterizedArrays()>/$stack10
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testParameterizedPojo()>/inType#_1596
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testInputMismatchExceptions()>/$stack7
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testInputMismatchExceptions()>/$stack10
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testInputMismatchExceptions()>/$stack14
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testInputMismatchExceptions()>/$stack18
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testTypeErasure()>/$stack5
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testTypeErasure()>/$stack10
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testResultTypeQueryable()>/ti#_1742
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testFunction()>/ti#_1841
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testInterface()>/ti#_1858
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testCreateTypeInfoFromInstance()>/ti#_1871
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testCreateTypeInfoFromInstance()>/ti_$$A_1#_1882
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testExtractKeySelector()>/ti#_1898
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testDuplicateValue()>/$stack5
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testDuplicateValueNested()>/$stack5
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testInputInference1()>/$stack6
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testInputInference3()>/$stack5
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testInputInference3()>/ti#_2024
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testInputInference4()>/$stack5
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testInputInference4()>/ti#_2045
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testInputInferenceWithCustomTupleAndRichFunction()>/$stack7
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testInputInferenceWithCustomTupleAndRichFunction()>/$stack18
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testMultiDimensionalArray()>/$stack5
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testMultiDimensionalArray()>/$stack11
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testMultiDimensionalArray()>/$stack17
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testMultiDimensionalArray()>/$stack23
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testMultiDimensionalArray()>/$stack29
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testInputMismatchWithRawFuntion()>/ti#_2235
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testEither()>/ti#_2289
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testEitherHierarchy()>/ti#_2297
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testEitherHierarchy()>/ti_$$A_1#_2305
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testEitherHierarchy()>/ti_$$A_2#_2314
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testGenericTypeWithSubclassInput()>/inputType#_2333
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testGenericTypeWithSubclassInput()>/ti#_2346
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testGenericTypeWithSuperclassInput()>/inputType#_2354
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testBigBasicTypes()>/$stack6
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testSqlTimeTypes()>/$stack6
<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil: java.util.List readSerializersAndConfigsWithResilience(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>/configSnapshot_$$A_1#_223
<org.apache.flink.api.common.state.MapStateDescriptorTest: void testMapStateDescriptor()>/$stack13
<org.apache.flink.api.common.state.MapStateDescriptorTest: void testMapStateDescriptor()>/$stack18
<org.apache.flink.api.common.state.MapStateDescriptorTest: void testMapStateDescriptor()>/$stack20
<org.apache.flink.api.common.state.MapStateDescriptorTest: void testMapStateDescriptor()>/$stack23
<org.apache.flink.api.common.state.MapStateDescriptorTest: void testMapStateDescriptor()>/$stack28
<org.apache.flink.api.common.state.MapStateDescriptorTest: void testMapStateDescriptor()>/$stack30
<org.apache.flink.api.common.state.MapStateDescriptorTest: void testSerializerDuplication()>/keySerializerB#_122
<org.apache.flink.api.common.state.MapStateDescriptorTest: void testSerializerDuplication()>/valueSerializerB#_124
<org.apache.flink.api.common.serialization.SimpleStringSchemaTest: void testSerializability()>/$stack7
<org.apache.flink.api.common.state.ListStateDescriptorTest: void testListStateDescriptor()>/$stack9
<org.apache.flink.api.common.state.ListStateDescriptorTest: void testListStateDescriptor()>/$stack14
<org.apache.flink.api.common.state.ListStateDescriptorTest: void testListStateDescriptor()>/$stack17
<org.apache.flink.api.common.state.ListStateDescriptorTest: void testListStateDescriptor()>/$stack22
<org.apache.flink.api.common.state.ListStateDescriptorTest: void testSerializerDuplication()>/serializerB#_109
<org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot$KryoRegistrationSerializationProxy: void write(org.apache.flink.core.memory.DataOutputView)>/$stack19
<org.apache.flink.configuration.DelegatingConfiguration: org.apache.flink.configuration.ConfigOption prefixOption(org.apache.flink.configuration.ConfigOption,java.lang.String)>/$stack16
<org.apache.flink.api.java.typeutils.LambdaExtractionTest: void testLambdaWithNonGenericResultType()>/ti#_149
<org.apache.flink.api.java.typeutils.LambdaExtractionTest: void testLambdaTypeErasure()>/$stack5
<org.apache.flink.api.java.typeutils.LambdaExtractionTest: void testInstanceMethodRefSameType()>/$stack4
<org.apache.flink.api.java.typeutils.LambdaExtractionTest: void testInstanceMethodRefSameType()>/ti#_304
<org.apache.flink.api.java.typeutils.LambdaExtractionTest: void testInstanceMethodRefSuperType()>/ti#_311
<org.apache.flink.api.java.typeutils.LambdaExtractionTest: void testInstanceMethodRefSuperTypeProtected()>/$stack4
<org.apache.flink.api.java.typeutils.LambdaExtractionTest: void testInstanceMethodRefSuperTypeProtected()>/ti#_323
<org.apache.flink.api.java.typeutils.LambdaExtractionTest: void testConstructorMethodRef()>/ti#_330
<org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot: void read(org.apache.flink.core.memory.DataInputView)>/$stack12
<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer$KryoSerializerConfigSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>/$stack7
<com.esotericsoftware.kryo.serializers.ObjectField: void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)>/$stack31
<org.apache.flink.api.java.typeutils.TypeInfoFactoryTest: void testSimpleType()>/ti#_53
<org.apache.flink.api.java.typeutils.TypeInfoFactoryTest: void testMyEitherGenericType()>/$stack9
<org.apache.flink.api.java.typeutils.TypeInfoFactoryTest: void testMyEitherGenericType()>/$stack11
<com.esotericsoftware.kryo.Kryo: java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)>/type#_754
<org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerConfigSnapshot: void read(org.apache.flink.core.memory.DataInputView)>/$stack23
<org.apache.flink.api.java.typeutils.TypeExtractorInputFormatsTest: void testExtractInputFormatType()>/typeInfo#_44
<org.apache.flink.api.java.typeutils.TypeExtractorInputFormatsTest: void testExtractDerivedInputFormatType()>/typeInfo#_58
<org.apache.flink.api.java.typeutils.TypeExtractorInputFormatsTest: void testQueryableFormatType()>/typeInfo#_116
<org.apache.flink.api.java.typeutils.runtime.TupleComparatorTTT3Test: void deepEquals(java.lang.String,org.apache.flink.api.java.tuple.Tuple2,org.apache.flink.api.java.tuple.Tuple2)>/$stack6
<org.apache.flink.api.java.typeutils.runtime.TupleSerializerTest: void runTests(int,org.apache.flink.api.java.tuple.Tuple[])>/tupleClass#_323
<com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer: java.lang.Object[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)>/$stack33
<org.apache.flink.api.common.state.ValueStateDescriptorTest: void testVeryLargeDefaultValue()>/$stack13
<org.apache.flink.api.common.state.ValueStateDescriptorTest: void testVeryLargeDefaultValue()>/$stack19
<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>/$stack3
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: void read(org.apache.flink.core.memory.DataInputView)>/$stack83
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: void read(org.apache.flink.core.memory.DataInputView)>/$stack88
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: void read(org.apache.flink.core.memory.DataInputView)>/fieldSerializerConfigSnapshot#_869
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: void read(org.apache.flink.core.memory.DataInputView)>/$stack68
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: void read(org.apache.flink.core.memory.DataInputView)>/$stack73
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: void read(org.apache.flink.core.memory.DataInputView)>/registeredSubclassSerializerConfigSnapshot#_906
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: void read(org.apache.flink.core.memory.DataInputView)>/$stack50
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: void read(org.apache.flink.core.memory.DataInputView)>/$stack55
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: void read(org.apache.flink.core.memory.DataInputView)>/cachedSubclassSerializerConfigSnapshot#_946
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: void lambda$resolveSchemaCompatibility$0(java.util.ArrayList,java.util.ArrayList,java.lang.String,org.apache.flink.api.common.typeutils.TypeSerializerSnapshot)>/$stack5
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>/fieldSerializerSnapshots#_185
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>/registeredSubclassSerializerSnapshots#_188
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: org.apache.flink.api.java.typeutils.runtime.PojoSerializer constructReconfiguredPojoSerializer(org.apache.flink.api.java.typeutils.runtime.PojoSerializer,org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult,org.apache.flink.util.LinkedOptionalMap,org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult,org.apache.flink.util.LinkedOptionalMap)>/$stack12
<org.apache.flink.core.fs.EntropyInjectorTest: void testCreateEntropyAwarePlainFs()>/$stack12
<org.apache.flink.core.fs.EntropyInjectorTest: void testCreateEntropyAwareEntropyFs()>/$stack18
<org.apache.flink.core.fs.EntropyInjectorTest: void testWithSafetyNet()>/$stack22
<org.apache.flink.core.fs.EntropyInjectorTest: void testClassLoaderFixingFsWithSafeyNet()>/$stack24
<org.apache.flink.core.fs.EntropyInjectorTest: void testClassLoaderFixingFsWithoutSafeyNet()>/$stack21
<org.apache.flink.api.common.typeinfo.TypeHintTest: void testTypeInfoDirect()>/$stack8
<org.apache.flink.api.common.typeinfo.TypeHintTest: void testTypeInfoDirect()>/$stack21
<org.apache.flink.api.common.typeutils.GenericTypeSerializerConfigSnapshot: void read(org.apache.flink.core.memory.DataInputView)>/$stack6
<org.apache.flink.configuration.Configuration: void loggingFallback(org.apache.flink.configuration.FallbackKey,org.apache.flink.configuration.ConfigOption)>/$stack11
<org.apache.flink.configuration.Configuration: void loggingFallback(org.apache.flink.configuration.FallbackKey,org.apache.flink.configuration.ConfigOption)>/$stack7
<org.apache.flink.api.java.typeutils.runtime.EitherSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>/$stack7
<org.apache.flink.api.java.typeutils.PojoTypeInfo: void getFlatFields(java.lang.String,int,java.util.List)>/$stack23
<org.apache.flink.api.common.typeutils.base.GenericArraySerializerConfigSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>/$stack7
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoFromInput(java.lang.reflect.TypeVariable,java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation)>/factoryDefiningType_$$A_1#_1107
<org.apache.flink.api.java.typeutils.runtime.TupleComparatorTTT1Test: void deepEquals(java.lang.String,org.apache.flink.api.java.tuple.Tuple2,org.apache.flink.api.java.tuple.Tuple2)>/$stack7
<org.apache.flink.api.java.typeutils.TypeExtractor: void validateInfo(java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack128
<org.apache.flink.api.java.typeutils.TypeExtractor: void validateInfo(java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack106
<org.apache.flink.api.java.typeutils.runtime.TupleComparatorTTT2Test: void deepEquals(java.lang.String,org.apache.flink.api.java.tuple.Tuple2,org.apache.flink.api.java.tuple.Tuple2)>/$stack7
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testBasicArray()>/$stack7
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testInputInferenceWithCustomTupleAndRichFunction()>/$stack9
<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer$KryoSerializerConfigSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>/$stack8
<org.apache.flink.api.java.typeutils.runtime.TupleComparatorTTT3Test: void deepEquals(java.lang.String,org.apache.flink.api.java.tuple.Tuple2,org.apache.flink.api.java.tuple.Tuple2)>/$stack7
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: void read(org.apache.flink.core.memory.DataInputView)>/$stack64
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: void read(org.apache.flink.core.memory.DataInputView)>/$stack46
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoFromInput(java.lang.reflect.TypeVariable,java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack34
<org.apache.flink.api.java.typeutils.PojoTypeInfo$PojoTypeComparatorBuilder: org.apache.flink.api.common.typeutils.TypeComparator createTypeComparator(org.apache.flink.api.common.ExecutionConfig)>/$stack26
<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer$KryoSerializerConfigSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>/$stack9
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>/nonRegisteredSubclassSerializerSnapshots#_191
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: org.apache.flink.api.java.typeutils.runtime.PojoSerializer constructReconfiguredPojoSerializer(org.apache.flink.api.java.typeutils.runtime.PojoSerializer,org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult,org.apache.flink.util.LinkedOptionalMap,org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult,org.apache.flink.util.LinkedOptionalMap)>/$stack19
<org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit: void <init>(java.lang.String,long,long)>/$stack7
<org.apache.flink.core.fs.ClosingFSDataInputStream: void <init>(org.apache.flink.core.fs.FSDataInputStream,org.apache.flink.core.fs.SafetyNetCloseableRegistry,java.lang.String)>/$stack6
<org.apache.flink.api.common.state.StateDescriptor: void <init>(java.lang.String,org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Object)>/$stack6
<org.apache.flink.api.common.state.StateDescriptor: void <init>(java.lang.String,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.Object)>/$stack6
<org.apache.flink.api.common.state.StateDescriptor: void <init>(java.lang.String,java.lang.Class,java.lang.Object)>/$stack7
<org.apache.flink.api.common.state.StateDescriptor: void setQueryable(java.lang.String)>/$stack7
<org.apache.flink.api.common.TaskInfo: void <init>(java.lang.String,int,int,int,int,java.lang.String)>/$stack7
<org.apache.flink.api.common.TaskInfo: void <init>(java.lang.String,int,int,int,int,java.lang.String)>/$stack20
<org.apache.flink.core.fs.UnsupportedSchemeFactory: void <init>(java.lang.String,java.lang.Throwable)>/$stack3
<org.apache.flink.api.dag.Transformation: void <init>(java.lang.String,org.apache.flink.api.common.typeinfo.TypeInformation,int)>/$stack9
<org.apache.flink.core.fs.ClosingFSDataOutputStream: void <init>(org.apache.flink.core.fs.FSDataOutputStream,org.apache.flink.core.fs.SafetyNetCloseableRegistry,java.lang.String)>/$stack6
<org.apache.flink.api.common.typeutils.ParameterlessTypeSerializerConfig: void <init>(java.lang.String)>/$stack2
<org.apache.flink.core.fs.FileSystem$FSKey: void <init>(java.lang.String,java.lang.String)>/$stack3
<org.apache.flink.configuration.StructuredOptionsSplitter: java.util.List splitEscaped(java.lang.String,char)>/$stack3
<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification: void <init>(java.lang.String,org.apache.flink.testutils.migration.MigrationVersion,java.lang.Class,java.lang.Class)>/$stack5
<org.apache.flink.api.common.resources.Resource: void <init>(java.lang.String,java.math.BigDecimal)>/$stack6
<org.apache.flink.api.common.io.DelimitedInputFormat: void setCharset(java.lang.String)>/$stack2
<org.apache.flink.configuration.ConfigOption: void <init>(java.lang.String,java.lang.Class,org.apache.flink.configuration.description.Description,java.lang.Object,boolean,org.apache.flink.configuration.FallbackKey[])>/$stack7
<org.apache.flink.util.StringBasedID: void <init>(java.lang.String)>/$stack2
<org.apache.flink.core.fs.OutputStreamAndPath: void <init>(org.apache.flink.core.fs.FSDataOutputStream,org.apache.flink.core.fs.Path)>/$stack5
<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification: void <init>(java.lang.String,org.apache.flink.testutils.migration.MigrationVersion,java.lang.Class,java.lang.Class)>/$stack7
<org.apache.flink.api.common.state.AggregatingStateDescriptor: void <init>(java.lang.String,org.apache.flink.api.common.functions.AggregateFunction,java.lang.Class)>/$stack4
<org.apache.flink.api.common.state.AggregatingStateDescriptor: void <init>(java.lang.String,org.apache.flink.api.common.functions.AggregateFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack4
<org.apache.flink.api.common.state.AggregatingStateDescriptor: void <init>(java.lang.String,org.apache.flink.api.common.functions.AggregateFunction,org.apache.flink.api.common.typeutils.TypeSerializer)>/$stack4
<org.apache.flink.configuration.DelegatingConfiguration: void <init>(org.apache.flink.configuration.Configuration,java.lang.String)>/$stack3
<org.apache.flink.core.fs.LimitedConnectionsFileSystem: void <init>(org.apache.flink.core.fs.FileSystem,int,int,int,long,long)>/$stack15
<org.apache.flink.core.fs.LimitedConnectionsFileSystemDelegationTest: void testDelegateFsMethods()>/$stack52
<org.apache.flink.core.fs.LimitedConnectionsFileSystemDelegationTest: void testDelegateFsMethods()>/$stack56
<org.apache.flink.core.fs.LimitedConnectionsFileSystemDelegationTest: void testDelegateFsMethods()>/$stack60
<org.apache.flink.core.fs.LimitedConnectionsFileSystemDelegationTest: void testDelegateFsMethods()>/$stack64
<org.apache.flink.core.fs.LimitedConnectionsFileSystemDelegationTest: void testDelegateFsMethods()>/$stack69
<org.apache.flink.core.fs.LimitedConnectionsFileSystemDelegationTest: void testDelegateFsMethods()>/$stack78
<org.apache.flink.core.fs.LimitedConnectionsFileSystemDelegationTest: void testDelegateFsMethods()>/$stack86
<org.apache.flink.core.fs.LimitedConnectionsFileSystemDelegationTest: void testDelegateFsMethods()>/$stack91
<org.apache.flink.core.fs.LimitedConnectionsFileSystemDelegationTest: void testDelegateFsMethods()>/$stack95
<org.apache.flink.core.fs.LimitedConnectionsFileSystemDelegationTest: void testDelegateFsMethods()>/$stack100
<org.apache.flink.core.fs.LimitedConnectionsFileSystemDelegationTest: void testDelegateFsMethods()>/$stack105
<org.apache.flink.core.fs.LimitedConnectionsFileSystemDelegationTest: void testDelegateFsMethods()>/$stack111
<org.apache.flink.core.fs.LimitedConnectionsFileSystemDelegationTest: void testDelegateFsMethods()>/$stack116
<org.apache.flink.core.fs.LimitedConnectionsFileSystemDelegationTest: void testDelegateFsMethods()>/$stack125
<org.apache.flink.core.fs.LimitedConnectionsFileSystemDelegationTest: void testDelegateFsMethods()>/$stack131
<org.apache.flink.core.fs.LimitedConnectionsFileSystemDelegationTest: void testDelegateFsMethods()>/$stack137
<org.apache.flink.core.fs.LimitedConnectionsFileSystemDelegationTest: void testDelegateFsMethods()>/$stack145
<org.apache.flink.core.fs.SafetyNetWrapperFileSystem: void <init>(org.apache.flink.core.fs.FileSystem,org.apache.flink.core.fs.SafetyNetCloseableRegistry)>/$stack5
<org.apache.flink.api.java.typeutils.MapTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack3
<org.apache.flink.api.java.typeutils.MapTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack5
<org.apache.flink.api.common.state.StateDescriptor: void <init>(java.lang.String,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.Object)>/$stack8
<org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo: void <init>(java.lang.Class,org.apache.flink.api.common.typeinfo.BasicTypeInfo)>/$stack5
<org.apache.flink.api.java.typeutils.PojoField: void <init>(java.lang.reflect.Field,org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack5
<org.apache.flink.util.OutputTag: void <init>(java.lang.String,org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack5
<org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo: void <init>(java.lang.Class,org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack5
<org.apache.flink.api.java.typeutils.ListTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack2
<org.apache.flink.api.common.serialization.TypeInformationSerializationSchema: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.ExecutionConfig)>/$stack3
<org.apache.flink.api.common.serialization.TypeInformationSerializationSchema: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeutils.TypeSerializer)>/$stack3
<org.apache.flink.api.common.serialization.AbstractDeserializationSchema: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack2
<org.apache.flink.api.java.typeutils.EitherTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack3
<org.apache.flink.api.java.typeutils.EitherTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack5
<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest: void testSerializerSerializationWithClassNotFound()>/out#56#_106
<org.apache.flink.api.common.ExecutionConfig: void setRestartStrategy(org.apache.flink.api.common.restartstrategy.RestartStrategies$RestartStrategyConfiguration)>/$stack2
<org.apache.flink.api.java.typeutils.runtime.KryoRegistration: void <init>(java.lang.Class,org.apache.flink.api.common.ExecutionConfig$SerializableSerializer)>/$stack5
<org.apache.flink.api.connector.source.lib.util.IteratorSourceEnumerator: void <init>(org.apache.flink.api.connector.source.SplitEnumeratorContext,java.util.Collection)>/$stack3
<org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot$KryoRegistrationSerializationProxy: void <init>(org.apache.flink.api.java.typeutils.runtime.KryoRegistration)>/$stack2
<org.apache.flink.api.java.typeutils.runtime.kryo.MinlogForwarder: void <init>(org.slf4j.Logger)>/$stack2
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void checkWCPojoAsserts(org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack110
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testPojoWithComplexHierarchy()>/$stack25
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testGenericPojoTypeInference3()>/ti#_705
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testRecursivePojo2()>/$stack10
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testDualUseOfPojo()>/ti#_887
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testTupleWithBasicTypes()>/ti#_161
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testTupleWithTuples()>/ti#_250
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testSubclassOfTuple()>/ti#_364
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testTupleWithPojo()>/ti#_535
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testTupleOfValues()>/ti#_632
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testGenericsNotInSuperclass()>/ti#_679
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testChainedGenericsNotInSuperclass()>/ti#_727
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testGenericsInDirectSuperclass()>/ti#_775
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testGenericsNotInSuperclassWithNonGenericClassAtEnd()>/ti#_807
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testSameGenericVariable()>/ti#_899
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testNestedTupleGenerics()>/ti#_937
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testNestedTupleGenerics2()>/ti#_983
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testFunctionDependingOnInputWithCustomTupleInput()>/ti#_1129
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testFunctionDependingOnInputWithFunctionHierarchy2()>/ti#_1191
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testFunctionDependingPartialOnInput()>/ti#_1249
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testFunctionDependingPartialOnInput2()>/ti#_1270
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testFunctionInputInOutputMultipleTimes()>/ti#_1298
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testFunctionInputInOutputMultipleTimes2()>/ti#_1313
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testTupleArray()>/$stack12
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testCustomArrayWithTypeVariable()>/$stack12
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testTupleWithPrimitiveArray()>/ti#_1793
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testDuplicateValue()>/ti#_1925
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testDuplicateValueNested()>/ti#_1949
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testInputInference1()>/ti#_1977
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testInputInference2()>/ti#_2001
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testInputInferenceWithCustomTupleAndRichFunction()>/ti#_2079
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testBigBasicTypes()>/ti#_2456
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testSqlTimeTypes()>/ti#_2494
<org.apache.flink.api.java.typeutils.LambdaExtractionTest: void testMapLambda()>/ti#_160
<org.apache.flink.api.java.typeutils.LambdaExtractionTest: void testFlatMapLambda()>/ti#_175
<org.apache.flink.api.java.typeutils.LambdaExtractionTest: void testMapPartitionLambda()>/ti#_190
<org.apache.flink.api.java.typeutils.LambdaExtractionTest: void testJoinLambda()>/ti#_208
<org.apache.flink.api.java.typeutils.LambdaExtractionTest: void testCoGroupLambda()>/ti#_227
<org.apache.flink.api.java.typeutils.LambdaExtractionTest: void testKeySelectorLambda()>/ti#_243
<org.apache.flink.api.java.typeutils.LambdaExtractionTest: void testPartitionerLambda()>/ti#_274
<org.apache.flink.api.java.typeutils.TypeInfoFactoryTest: void testMyTuple()>/ti#_96
<org.apache.flink.api.java.typeutils.TypeInfoFactoryTest: void testMyTupleHierarchyWithInference()>/ti#_123
<org.apache.flink.api.java.typeutils.TypeExtractorInputFormatsTest: void testExtractDerivedInputFormatType()>/typeInfo_$$A_1#_65
<org.apache.flink.api.java.typeutils.TypeExtractorInputFormatsTest: void testMultiLevelDerivedInputFormatType()>/typeInfo#_92
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer[],java.lang.reflect.Field[],org.apache.flink.api.common.ExecutionConfig)>/$stack14
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: void <init>(java.lang.Class,java.lang.reflect.Field[],org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.LinkedHashMap,org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.Map,org.apache.flink.api.common.ExecutionConfig)>/$stack21
<org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext: void <init>(org.apache.flink.api.common.TaskInfo,org.apache.flink.util.UserCodeClassLoader,org.apache.flink.api.common.ExecutionConfig,java.util.Map,java.util.Map,org.apache.flink.metrics.MetricGroup)>/$stack7
<org.apache.flink.api.common.io.FileInputFormat: void setFilesFilter(org.apache.flink.api.common.io.FilePathFilter)>/$stack2
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void checkWCPojoAsserts(org.apache.flink.api.common.typeinfo.TypeInformation)>/i#16#_351
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testPojoWithGenerics()>/typeForClass#_541
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testPojoWithGenericsSomeFieldsGeneric()>/typeForClass#_564
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testPojoWithComplexHierarchy()>/typeForClass#_586
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testGenericPojoTypeInference1()>/ti#_625
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testGenericPojoTypeInference2()>/ti#_667
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testRecursivePojo1()>/ti#_837
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testRecursivePojo2()>/ti#_846
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testRecursivePojo3()>/ti#_857
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testRecursivePojo3()>/$stack10
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testPojoWithRecursiveGenericField()>/ti#_903
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testPojosWithMutualRecursion()>/ti#_920
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testPojosWithMutualRecursion()>/pti#_922
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testRecursivePojoWithTypeVariable()>/ti#_937
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testRecursivePojoWithTypeVariable()>/pti#_939
<org.apache.flink.api.common.typeinfo.LocalTimeTypeInfo: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Class)>/$stack6
<org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Class)>/$stack6
<org.apache.flink.api.common.typeutils.BackwardsCompatibleSerializerSnapshot: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer)>/$stack2
<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility compatibleWithReconfiguredSerializer(org.apache.flink.api.common.typeutils.TypeSerializer)>/$stack3
<org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy: void <init>(org.apache.flink.api.common.typeutils.TypeSerializerSnapshot,org.apache.flink.api.common.typeutils.TypeSerializer)>/$stack5
<org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot: void setPriorSerializer(org.apache.flink.api.common.typeutils.TypeSerializer)>/$stack2
<org.apache.flink.api.common.typeinfo.BasicTypeInfo: void <init>(java.lang.Class,java.lang.Class[],org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Class)>/$stack9
<org.apache.flink.api.common.typeutils.base.ListSerializer: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer)>/$stack2
<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil$TypeSerializerSerializationProxy: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer)>/$stack2
<org.apache.flink.api.common.serialization.TypeInformationSerializationSchema: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeutils.TypeSerializer)>/$stack5
<org.apache.flink.api.common.typeutils.base.GenericArraySerializer: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer)>/$stack5
<org.apache.flink.api.common.typeinfo.SqlTimeTypeInfo: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Class)>/$stack6
<org.apache.flink.api.common.typeutils.base.MapSerializer: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer,org.apache.flink.api.common.typeutils.TypeSerializer)>/$stack3
<org.apache.flink.api.common.typeutils.base.MapSerializer: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer,org.apache.flink.api.common.typeutils.TypeSerializer)>/$stack5
<org.apache.flink.core.fs.OutputStreamAndPath: void <init>(org.apache.flink.core.fs.FSDataOutputStream,org.apache.flink.core.fs.Path)>/$stack3
<org.apache.flink.core.fs.LimitedConnectionsFileSystem$OutStream: void <init>(org.apache.flink.core.fs.FSDataOutputStream,org.apache.flink.core.fs.LimitedConnectionsFileSystem)>/$stack4
<org.apache.flink.core.fs.FSDataOutputStreamWrapper: void <init>(org.apache.flink.core.fs.FSDataOutputStream)>/$stack2
<org.apache.flink.core.fs.LimitedConnectionsFileSystemDelegationTest: void testDelegateOutStreamMethods()>/$stack27
<org.apache.flink.core.fs.LimitedConnectionsFileSystemDelegationTest: void testDelegateOutStreamMethods()>/$stack29
<org.apache.flink.core.fs.LimitedConnectionsFileSystemDelegationTest: void testDelegateOutStreamMethods()>/$stack33
<org.apache.flink.core.fs.LimitedConnectionsFileSystemDelegationTest: void testDelegateOutStreamMethods()>/$stack35
<org.apache.flink.core.fs.LimitedConnectionsFileSystemDelegationTest: void testDelegateOutStreamMethods()>/$stack37
<org.apache.flink.core.fs.ConnectionLimitingFactory: void <init>(org.apache.flink.core.fs.FileSystemFactory,org.apache.flink.core.fs.LimitedConnectionsFileSystem$ConnectionLimitingSettings)>/$stack5
<org.apache.flink.api.common.typeutils.TypeSerializerMatchers$SchemaCompatibilitySameAs: void <init>(org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility)>/$stack2
<org.apache.flink.core.fs.ConnectionLimitingFactory: void <init>(org.apache.flink.core.fs.FileSystemFactory,org.apache.flink.core.fs.LimitedConnectionsFileSystem$ConnectionLimitingSettings)>/$stack3
<org.apache.flink.api.common.typeutils.TypeSerializerMatchers$CompatibleAfterReconfiguration: void <init>(org.hamcrest.Matcher)>/$stack2
<org.apache.flink.api.common.typeutils.base.EnumSerializerTest: void testReconfiguration()>/$stack81
<org.apache.flink.api.common.typeutils.base.EnumSerializerTest: void testSerializeReconfiguredEnumSerializer()>/$stack81
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testBasicArray2()>/ti#_1466
<org.apache.flink.api.common.operators.GenericDataSinkBase: void setInput(org.apache.flink.api.common.operators.Operator)>/$stack2
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest: void testReconfigureDifferentSubclassRegistrationOrder()>/$stack41
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest: void testReconfigureRepopulateNonregisteredSubclassSerializerCache()>/$stack40
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest: void testReconfigureWithPreviouslyNonregisteredSubclasses()>/$stack46
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: void testResolveSchemaCompatibilityWithCompatibleWithReconfigurationFieldSerializers()>/reconfiguredSerializer#_326
<org.apache.flink.api.java.typeutils.PojoTypeInfo: void getFlatFields(java.lang.String,int,java.util.List)>/$stack27
<org.apache.flink.api.common.operators.ResourceSpec: void <init>(org.apache.flink.api.common.resources.CPUResource,org.apache.flink.configuration.MemorySize,org.apache.flink.configuration.MemorySize,org.apache.flink.configuration.MemorySize,java.util.Map)>/$stack7
<org.apache.flink.api.common.operators.ResourceSpec: void <init>(org.apache.flink.api.common.resources.CPUResource,org.apache.flink.configuration.MemorySize,org.apache.flink.configuration.MemorySize,org.apache.flink.configuration.MemorySize,java.util.Map)>/$stack9
<org.apache.flink.api.common.operators.ResourceSpec: void <init>(org.apache.flink.api.common.resources.CPUResource,org.apache.flink.configuration.MemorySize,org.apache.flink.configuration.MemorySize,org.apache.flink.configuration.MemorySize,java.util.Map)>/$stack11
<org.apache.flink.core.fs.FSDataInputStreamWrapper: void <init>(org.apache.flink.core.fs.FSDataInputStream)>/$stack2
<org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream: void <init>(org.apache.flink.core.fs.FSDataInputStream,org.apache.flink.core.fs.LimitedConnectionsFileSystem)>/$stack4
<org.apache.flink.core.fs.LimitedConnectionsFileSystemDelegationTest: void testDelegateInStreamMethods()>/$stack60
<org.apache.flink.core.fs.LimitedConnectionsFileSystemDelegationTest: void testDelegateInStreamMethods()>/$stack68
<org.apache.flink.core.fs.LimitedConnectionsFileSystemDelegationTest: void testDelegateInStreamMethods()>/$stack70
<org.apache.flink.api.common.state.StateTtlConfig: void <init>(org.apache.flink.api.common.state.StateTtlConfig$UpdateType,org.apache.flink.api.common.state.StateTtlConfig$StateVisibility,org.apache.flink.api.common.state.StateTtlConfig$TtlTimeCharacteristic,org.apache.flink.api.common.time.Time,org.apache.flink.api.common.state.StateTtlConfig$CleanupStrategies)>/$stack8
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testCustomArray()>/ti#_1491
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testTupleArray()>/ti#_1517
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testCustomArrayWithTypeVariable()>/ti#_1541
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testParameterizedArrays()>/ti#_1570
<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream$LocalCommitter: void <init>(org.apache.flink.core.fs.local.LocalRecoverable)>/$stack2
<org.apache.flink.types.Row: void <init>(org.apache.flink.types.RowKind,int)>/$stack3
<org.apache.flink.api.common.eventtime.WatermarksWithIdleness: void <init>(org.apache.flink.api.common.eventtime.WatermarkGenerator,java.time.Duration,org.apache.flink.util.clock.Clock)>/$stack6
<org.apache.flink.api.common.operators.GenericDataSinkBase: void <init>(org.apache.flink.api.common.operators.util.UserCodeWrapper,org.apache.flink.api.common.operators.UnaryOperatorInformation,java.lang.String)>/$stack4
<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: void <init>(org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type,org.apache.flink.api.common.typeutils.TypeSerializer)>/$stack3
<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult: void <init>(org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type,org.apache.flink.api.common.typeutils.TypeSerializer[])>/$stack3
<org.apache.flink.api.common.operators.ResourceSpec: boolean lambda$new$0(java.util.Map$Entry)>/$stack2
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData: void <init>(java.lang.Class,org.apache.flink.util.LinkedOptionalMap,org.apache.flink.util.LinkedOptionalMap,org.apache.flink.util.LinkedOptionalMap)>/$stack7
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData: void <init>(java.lang.Class,org.apache.flink.util.LinkedOptionalMap,org.apache.flink.util.LinkedOptionalMap,org.apache.flink.util.LinkedOptionalMap)>/$stack9
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData: void <init>(java.lang.Class,org.apache.flink.util.LinkedOptionalMap,org.apache.flink.util.LinkedOptionalMap,org.apache.flink.util.LinkedOptionalMap)>/$stack11
<org.apache.flink.api.common.state.StateTtlConfig: void <init>(org.apache.flink.api.common.state.StateTtlConfig$UpdateType,org.apache.flink.api.common.state.StateTtlConfig$StateVisibility,org.apache.flink.api.common.state.StateTtlConfig$TtlTimeCharacteristic,org.apache.flink.api.common.time.Time,org.apache.flink.api.common.state.StateTtlConfig$CleanupStrategies)>/$stack6
<org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy: void <init>(org.apache.flink.util.function.SerializableSupplier)>/$stack2
<org.apache.flink.core.fs.local.LocalRecoverableWriter: void <init>(org.apache.flink.core.fs.local.LocalFileSystem)>/$stack2
<org.apache.flink.core.memory.ManagedMemoryUseCase: void <init>(java.lang.String,int,org.apache.flink.core.memory.ManagedMemoryUseCase$Scope)>/$stack4
<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: void setNestedSerializersSnapshotDelegate(org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate)>/$stack2
<org.apache.flink.core.fs.LimitedConnectionsFileSystem$OutStream: void <init>(org.apache.flink.core.fs.FSDataOutputStream,org.apache.flink.core.fs.LimitedConnectionsFileSystem)>/$stack6
<org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream: void <init>(org.apache.flink.core.fs.FSDataInputStream,org.apache.flink.core.fs.LimitedConnectionsFileSystem)>/$stack6
<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: void <init>(org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification)>/$stack2
<org.apache.flink.api.java.typeutils.TypeInfoFactoryTest: void testMyTupleHierarchy()>/ti#_107
<org.apache.flink.api.common.state.ReducingStateDescriptor: void <init>(java.lang.String,org.apache.flink.api.common.functions.ReduceFunction,java.lang.Class)>/$stack4
<org.apache.flink.api.common.state.ReducingStateDescriptor: void <init>(java.lang.String,org.apache.flink.api.common.functions.ReduceFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack4
<org.apache.flink.api.common.state.ReducingStateDescriptor: void <init>(java.lang.String,org.apache.flink.api.common.functions.ReduceFunction,org.apache.flink.api.common.typeutils.TypeSerializer)>/$stack4
<org.apache.flink.api.dag.Transformation: void setResources(org.apache.flink.api.common.operators.ResourceSpec,org.apache.flink.api.common.operators.ResourceSpec)>/$stack3
<org.apache.flink.api.dag.Transformation: void setResources(org.apache.flink.api.common.operators.ResourceSpec,org.apache.flink.api.common.operators.ResourceSpec)>/$stack5
<org.apache.flink.api.java.typeutils.TypeInfoFactoryTest: void testMyEitherGenericType()>/ti#_66
<org.apache.flink.api.connector.source.lib.util.IteratorSourceReader: void <init>(org.apache.flink.api.connector.source.SourceReaderContext)>/$stack2
<org.apache.flink.api.common.state.StateTtlConfig: void <init>(org.apache.flink.api.common.state.StateTtlConfig$UpdateType,org.apache.flink.api.common.state.StateTtlConfig$StateVisibility,org.apache.flink.api.common.state.StateTtlConfig$TtlTimeCharacteristic,org.apache.flink.api.common.time.Time,org.apache.flink.api.common.state.StateTtlConfig$CleanupStrategies)>/$stack12
<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerCompatibilityTest: void testMigrationStrategyForDifferentRegistrationOrder()>/$stack39
<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer$KryoSerializerConfigSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>/$stack4
<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest: void testCompatibleWithReconfiguredSerializerPrecedence()>/$stack18
<org.apache.flink.api.common.state.StateTtlConfig: void <init>(org.apache.flink.api.common.state.StateTtlConfig$UpdateType,org.apache.flink.api.common.state.StateTtlConfig$StateVisibility,org.apache.flink.api.common.state.StateTtlConfig$TtlTimeCharacteristic,org.apache.flink.api.common.time.Time,org.apache.flink.api.common.state.StateTtlConfig$CleanupStrategies)>/$stack10
<org.apache.flink.api.java.typeutils.runtime.NullableSerializer$NullableSerializerConfigSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>/$stack4
<org.apache.flink.api.java.typeutils.TypeInfoFactoryTest: void testMyOptionGenericType()>/ti#_81
<org.apache.flink.core.fs.ClosingFSDataInputStream: void <init>(org.apache.flink.core.fs.FSDataInputStream,org.apache.flink.core.fs.SafetyNetCloseableRegistry,java.lang.String)>/$stack4
<org.apache.flink.core.fs.ClosingFSDataOutputStream: void <init>(org.apache.flink.core.fs.FSDataOutputStream,org.apache.flink.core.fs.SafetyNetCloseableRegistry,java.lang.String)>/$stack4
<org.apache.flink.core.fs.SafetyNetCloseableRegistry$PhantomDelegatingCloseableRef: void <init>(org.apache.flink.core.fs.WrappingProxyCloseable,org.apache.flink.core.fs.SafetyNetCloseableRegistry,java.lang.ref.ReferenceQueue)>/$stack7
<org.apache.flink.core.fs.SafetyNetWrapperFileSystem: void <init>(org.apache.flink.core.fs.FileSystem,org.apache.flink.core.fs.SafetyNetCloseableRegistry)>/$stack3
<org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy: void <init>(org.apache.flink.api.common.typeutils.TypeSerializerSnapshot,org.apache.flink.api.common.typeutils.TypeSerializer)>/$stack3
<org.apache.flink.api.java.typeutils.PojoField: void <init>(java.lang.reflect.Field,org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack3
<org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer: void <init>(byte[],java.lang.Throwable)>/$stack3
<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil$UnloadableTypeSerializerException: void <init>(java.lang.Exception,byte[])>/$stack3
<org.apache.flink.api.common.io.GlobFilePathFilter: void <init>(java.util.List,java.util.List)>/$stack3
<org.apache.flink.api.common.io.GlobFilePathFilter: void <init>(java.util.List,java.util.List)>/$stack5
<org.apache.flink.api.common.typeutils.GenericTypeSerializerConfigSnapshot: void <init>(java.lang.Class)>/$stack2
<org.apache.flink.api.java.typeutils.runtime.TupleSerializerConfigSnapshot: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer[])>/$stack3
<org.apache.flink.api.java.typeutils.MapTypeInfo: void <init>(java.lang.Class,java.lang.Class)>/$stack3
<org.apache.flink.api.java.typeutils.MapTypeInfo: void <init>(java.lang.Class,java.lang.Class)>/$stack6
<org.apache.flink.api.common.typeinfo.LocalTimeTypeInfo: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Class)>/$stack4
<org.apache.flink.api.common.typeinfo.LocalTimeTypeInfo: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Class)>/$stack8
<org.apache.flink.api.java.typeutils.ValueTypeInfo: void <init>(java.lang.Class)>/$stack2
<org.apache.flink.api.java.typeutils.runtime.KryoRegistration: void <init>(java.lang.Class)>/$stack2
<org.apache.flink.api.java.typeutils.runtime.KryoRegistration: void <init>(java.lang.Class,java.lang.Class)>/$stack3
<org.apache.flink.api.java.typeutils.runtime.KryoRegistration: void <init>(java.lang.Class,java.lang.Class)>/$stack5
<org.apache.flink.api.java.typeutils.runtime.KryoRegistration: void <init>(java.lang.Class,org.apache.flink.api.common.ExecutionConfig$SerializableSerializer)>/$stack3
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData: void <init>(java.lang.Class,org.apache.flink.util.LinkedOptionalMap,org.apache.flink.util.LinkedOptionalMap,org.apache.flink.util.LinkedOptionalMap)>/$stack5
<org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Class)>/$stack4
<org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Class)>/$stack8
<org.apache.flink.api.java.typeutils.GenericTypeInfo: void <init>(java.lang.Class)>/$stack2
<org.apache.flink.api.common.typeutils.GenericTypeSerializerSnapshot: void <init>(java.lang.Class)>/$stack2
<org.apache.flink.api.common.typeutils.base.EnumSerializer: void <init>(java.lang.Class,java.lang.Enum[])>/$stack8
<org.apache.flink.api.java.typeutils.runtime.TupleSerializerSnapshot: void <init>(org.apache.flink.api.java.typeutils.runtime.TupleSerializer)>/$stack3
<org.apache.flink.api.java.typeutils.runtime.TupleSerializerSnapshot: void <init>(java.lang.Class)>/$stack2
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer[],java.lang.reflect.Field[],org.apache.flink.api.common.ExecutionConfig)>/$stack6
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: void <init>(java.lang.Class,java.lang.reflect.Field[],org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.LinkedHashMap,org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.Map,org.apache.flink.api.common.ExecutionConfig)>/$stack8
<org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo: void <init>(java.lang.Class,org.apache.flink.api.common.typeinfo.BasicTypeInfo)>/$stack3
<org.apache.flink.api.java.typeutils.runtime.CopyableValueSerializer: void <init>(java.lang.Class)>/$stack2
<org.apache.flink.api.common.typeutils.CompositeType: void <init>(java.lang.Class)>/$stack2
<org.apache.flink.api.common.typeinfo.BasicTypeInfo: void <init>(java.lang.Class,java.lang.Class[],org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Class)>/$stack5
<org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo: void <init>(java.lang.Class,org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack3
<org.apache.flink.api.java.typeutils.ListTypeInfo: void <init>(java.lang.Class)>/$stack2
<org.apache.flink.util.ReflectionUtil$FullTypeInfo: void <init>(java.lang.Class,org.apache.flink.util.ReflectionUtil$FullTypeInfo[])>/$stack3
<org.apache.flink.api.common.typeutils.base.GenericArraySerializer: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer)>/$stack3
<org.apache.flink.configuration.ConfigOption: void <init>(java.lang.String,java.lang.Class,org.apache.flink.configuration.description.Description,java.lang.Object,boolean,org.apache.flink.configuration.FallbackKey[])>/$stack10
<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void <init>(java.lang.Class,org.apache.flink.api.common.ExecutionConfig)>/$stack3
<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void <init>(org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer)>/$stack7
<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void <init>(java.lang.Class,java.util.LinkedHashMap,java.util.LinkedHashMap,java.util.LinkedHashMap)>/$stack5
<org.apache.flink.api.common.typeinfo.SqlTimeTypeInfo: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Class)>/$stack4
<org.apache.flink.api.common.typeinfo.SqlTimeTypeInfo: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Class)>/$stack8
<org.apache.flink.api.java.typeutils.runtime.TupleSerializerBase: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer[])>/$stack3
<org.apache.flink.api.java.typeutils.runtime.ValueSerializer: void <init>(java.lang.Class)>/$stack2
<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: void <init>(java.lang.Class)>/$stack2
<org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot: void <init>(java.lang.Class,java.lang.Enum[])>/$stack3
<org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy: void <init>(java.lang.ClassLoader,org.apache.flink.api.common.typeutils.TypeSerializer)>/$stack3
<org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot: void setUserCodeClassLoader(java.lang.ClassLoader)>/$stack2
<org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot$KryoRegistrationSerializationProxy: void <init>(java.lang.ClassLoader)>/$stack2
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: void <init>(java.lang.Class,java.lang.reflect.Field[],org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.LinkedHashMap,org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.Map,org.apache.flink.api.common.ExecutionConfig)>/$stack19
<org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext: void <init>(org.apache.flink.api.common.TaskInfo,org.apache.flink.util.UserCodeClassLoader,org.apache.flink.api.common.ExecutionConfig,java.util.Map,java.util.Map,org.apache.flink.metrics.MetricGroup)>/$stack10
<org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext: void <init>(org.apache.flink.api.common.TaskInfo,org.apache.flink.util.UserCodeClassLoader,org.apache.flink.api.common.ExecutionConfig,java.util.Map,java.util.Map,org.apache.flink.metrics.MetricGroup)>/$stack12
<org.apache.flink.api.common.operators.ResourceSpec: void <init>(org.apache.flink.api.common.resources.CPUResource,org.apache.flink.configuration.MemorySize,org.apache.flink.configuration.MemorySize,org.apache.flink.configuration.MemorySize,java.util.Map)>/$stack13
<org.apache.flink.util.AbstractCloseableRegistry: void <init>(java.util.Map)>/$stack3
<org.apache.flink.api.common.typeinfo.BasicTypeInfo: void <init>(java.lang.Class,java.lang.Class[],org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Class)>/$stack7
<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream: void <init>(java.io.File,java.io.File)>/$stack3
<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream: void <init>(java.io.File,java.io.File)>/$stack5
<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream: void <init>(org.apache.flink.core.fs.local.LocalRecoverable)>/$stack3
<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream: void <init>(org.apache.flink.core.fs.local.LocalRecoverable)>/$stack6
<org.apache.flink.core.fs.RefCountedFile: void <init>(java.io.File)>/$stack2
<org.apache.flink.core.fs.local.LocalRecoverable: void <init>(java.io.File,java.io.File,long)>/$stack6
<org.apache.flink.core.fs.local.LocalRecoverable: void <init>(java.io.File,java.io.File,long)>/$stack8
<org.apache.flink.util.WrappingRuntimeException: void <init>(java.lang.Throwable)>/$stack2
<org.apache.flink.util.WrappingRuntimeException: void <init>(java.lang.String,java.lang.Throwable)>/$stack3
<org.apache.flink.util.OptionalFailure: java.lang.Throwable getFailureCause()>/$stack2
<org.apache.flink.core.memory.MemorySegment: java.nio.ByteBuffer wrapInternal(int,int)>/$stack10
<org.apache.flink.api.common.typeutils.base.EnumSerializer: void <init>(java.lang.Class,java.lang.Enum[])>/$stack10
<org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot: void <init>(java.lang.Class,java.lang.Enum[])>/$stack5
<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.util.LinkedHashMap buildKryoRegistrations(java.lang.Class,java.util.LinkedHashSet,java.util.LinkedHashMap,java.util.LinkedHashMap)>/$stack11
<org.apache.flink.api.common.io.InputStreamFSInputWrapperTest: void testClose()>/$stack5
<org.apache.flink.api.common.typeutils.SimpleTypeSerializerSnapshot: void <init>(java.util.function.Supplier)>/$stack2
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: void <init>(java.lang.Class,java.util.LinkedHashMap,java.util.LinkedHashMap,java.util.HashMap,boolean)>/$stack10
<org.apache.flink.api.common.serialization.SimpleStringSchema: void <init>(java.nio.charset.Charset)>/$stack2
<org.apache.flink.core.memory.MemorySegment: java.lang.Object processAsByteBuffer(java.util.function.Function)>/$stack2
<org.apache.flink.core.memory.MemorySegment: void processAsByteBuffer(java.util.function.Consumer)>/$stack2
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer[],java.lang.reflect.Field[],org.apache.flink.api.common.ExecutionConfig)>/$stack11
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: void <init>(java.lang.Class,java.lang.reflect.Field[],org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.LinkedHashMap,org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.Map,org.apache.flink.api.common.ExecutionConfig)>/$stack10
<org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate: void <init>(org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[])>/$stack2
<org.apache.flink.api.java.typeutils.runtime.RowSerializer: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.LinkedHashMap,boolean)>/$stack4
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer[],java.lang.reflect.Field[],org.apache.flink.api.common.ExecutionConfig)>/$stack8
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: void <init>(java.lang.Class,java.lang.reflect.Field[],org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.LinkedHashMap,org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.Map,org.apache.flink.api.common.ExecutionConfig)>/$stack13
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: void <init>(java.lang.Class,java.lang.reflect.Field[],org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.LinkedHashMap,org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.Map,org.apache.flink.api.common.ExecutionConfig)>/$stack17
<org.apache.flink.api.java.typeutils.runtime.TupleSerializerBase: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer[])>/$stack5
<org.apache.flink.core.fs.SafetyNetCloseableRegistry$PhantomDelegatingCloseableRef: void <init>(org.apache.flink.core.fs.WrappingProxyCloseable,org.apache.flink.core.fs.SafetyNetCloseableRegistry,java.lang.ref.ReferenceQueue)>/$stack5
<org.apache.flink.api.common.time.Time: void <init>(long,java.util.concurrent.TimeUnit)>/$stack4
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: void <init>(java.lang.Class,java.lang.reflect.Field[],org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.LinkedHashMap,org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.Map,org.apache.flink.api.common.ExecutionConfig)>/$stack15
<org.apache.flink.util.LinkedOptionalMap: void <init>(java.util.LinkedHashMap)>/$stack2
<org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot: void <init>(java.lang.Class,java.util.LinkedHashMap)>/$stack3
<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void <init>(java.lang.Class,java.util.LinkedHashMap,java.util.LinkedHashMap,java.util.LinkedHashMap)>/$stack7
<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void <init>(java.lang.Class,java.util.LinkedHashMap,java.util.LinkedHashMap,java.util.LinkedHashMap)>/$stack9
<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void <init>(java.lang.Class,java.util.LinkedHashMap,java.util.LinkedHashMap,java.util.LinkedHashMap)>/$stack11
<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.util.LinkedHashMap buildKryoRegistrations(java.lang.Class,java.util.LinkedHashSet,java.util.LinkedHashMap,java.util.LinkedHashMap)>/$stack15
<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.util.LinkedHashMap buildKryoRegistrations(java.lang.Class,java.util.LinkedHashSet,java.util.LinkedHashMap,java.util.LinkedHashMap)>/$stack20
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: void <init>(java.lang.Class,java.util.LinkedHashMap,java.util.LinkedHashMap,java.util.HashMap,boolean)>/$stack6
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: void <init>(java.lang.Class,java.util.LinkedHashMap,java.util.LinkedHashMap,java.util.HashMap,boolean)>/$stack8
<org.apache.flink.util.OptionalConsumer: void <init>(java.util.Optional)>/$stack2
<org.apache.flink.api.java.typeutils.TupleTypeInfoBase: void <init>(java.lang.Class,org.apache.flink.api.common.typeinfo.TypeInformation[])>/$stack8
<org.apache.flink.util.FileUtils$FilterFileVisitor: void <init>(java.util.function.Predicate)>/$stack2
<org.apache.flink.api.java.typeutils.TypeExtractor: void validateInfo(java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation)>/actual#10_$$A_5#_1530
<org.apache.flink.api.java.typeutils.TypeExtractor: void validateInfo(java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation)>/actual#10_$$A_12#_1553
<org.apache.flink.api.java.typeutils.TypeExtractor: void validateInfo(java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation)>/actual#10_$$A_17#_1582
<org.apache.flink.api.common.typeutils.SerializerTestBase: void testSnapshotConfigurationAndReconfigure()>/restoreSerializer#73_$$A_1#_161
<org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>/@parameter0
<org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>/@parameter0
<org.apache.flink.api.java.typeutils.runtime.PojoFieldUtils: java.lang.reflect.Field getField(java.lang.String,java.lang.Class)>/@parameter1
<org.apache.flink.configuration.ConfigurationUtils: void checkConfigContains(java.util.Map,java.lang.String)>/@parameter1
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void checkWCPojoAsserts(org.apache.flink.api.common.typeinfo.TypeInformation)>/@parameter0
<org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit: void <init>(java.lang.String,long,long)>/@parameter0
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void checkAllPublicAsserts(org.apache.flink.api.common.typeinfo.TypeInformation)>/@parameter0
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void checkFromTuplePojo(org.apache.flink.api.common.typeinfo.TypeInformation)>/@parameter0
<org.junit.ComparisonFailure$ComparisonCompactor$DiffExtractor: java.lang.String extractDiff(java.lang.String)>/@parameter0
<org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>/@parameter1
<org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>/@parameter2
<org.junit.Assert: boolean equalsRegardingNull(java.lang.Object,java.lang.Object)>/@parameter0
<org.junit.Assert: boolean equalsRegardingNull(java.lang.Object,java.lang.Object)>/@parameter1
<org.junit.Assert: boolean isEquals(java.lang.Object,java.lang.Object)>/@parameter0
<org.junit.Assert: boolean isEquals(java.lang.Object,java.lang.Object)>/@parameter1
<org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>/@parameter0
<org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>/@parameter1
<org.junit.Assert: void assertArrayEquals(java.lang.String,java.lang.Object[],java.lang.Object[])>/@parameter2
<org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>/@parameter1
<org.junit.Assert: void assertArrayEquals(java.lang.String,byte[],byte[])>/@parameter2
<org.junit.Assert: void assertArrayEquals(byte[],byte[])>/@parameter1
<org.junit.Assert: void internalArrayEquals(java.lang.String,java.lang.Object,java.lang.Object)>/@parameter2
<org.junit.Assert: void assertNotNull(java.lang.String,java.lang.Object)>/@parameter1
<org.junit.Assert: void assertNotNull(java.lang.Object)>/@parameter0
<org.junit.Assert: void assertNotSame(java.lang.String,java.lang.Object,java.lang.Object)>/@parameter1
<org.junit.Assert: void assertNotSame(java.lang.String,java.lang.Object,java.lang.Object)>/@parameter2
<org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>/@parameter0
<org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>/@parameter1
<org.junit.Assert: void failNotEquals(java.lang.String,java.lang.Object,java.lang.Object)>/@parameter1
<org.junit.Assert: void failNotEquals(java.lang.String,java.lang.Object,java.lang.Object)>/@parameter2
<org.junit.Assert: java.lang.String format(java.lang.String,java.lang.Object,java.lang.Object)>/@parameter1
<org.junit.Assert: java.lang.String format(java.lang.String,java.lang.Object,java.lang.Object)>/@parameter2
<org.junit.Assert: java.lang.String formatClassAndValue(java.lang.Object,java.lang.String)>/@parameter0
<org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>/@parameter0
<org.junit.Assert: void assertThat(java.lang.String,java.lang.Object,org.hamcrest.Matcher)>/@parameter1
<org.apache.flink.core.fs.FileSystem: boolean exists(org.apache.flink.core.fs.Path)>/@parameter0
<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FSDataOutputStream create(org.apache.flink.core.fs.Path,boolean,int,short,long)>/@parameter0
<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(java.lang.Class)>/@parameter0
<org.apache.flink.core.fs.ClosingFSDataInputStream: void <init>(org.apache.flink.core.fs.FSDataInputStream,org.apache.flink.core.fs.SafetyNetCloseableRegistry,java.lang.String)>/@parameter1
<org.apache.flink.core.fs.ClosingFSDataInputStream: org.apache.flink.core.fs.ClosingFSDataInputStream wrapSafe(org.apache.flink.core.fs.FSDataInputStream,org.apache.flink.core.fs.SafetyNetCloseableRegistry,java.lang.String)>/@parameter1
<org.apache.flink.api.java.typeutils.runtime.ValueComparator: void <init>(boolean,java.lang.Class)>/@parameter1
<org.apache.flink.configuration.Configuration: void setString(java.lang.String,java.lang.String)>/@parameter0
<org.apache.flink.configuration.Configuration: void setValueInternal(java.lang.String,java.lang.Object)>/@parameter0
<org.apache.flink.configuration.Configuration: java.util.Optional getRawValue(java.lang.String)>/@parameter0
<org.apache.flink.api.java.typeutils.PojoTypeInfo$NamedFlatFieldDescriptor: void <init>(java.lang.String,int,org.apache.flink.api.common.typeinfo.TypeInformation)>/@parameter2
<org.apache.flink.configuration.Configuration: boolean equals(java.lang.Object)>/@parameter0
<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier: org.hamcrest.Matcher schemaCompatibilityMatcher(org.apache.flink.testutils.migration.MigrationVersion)>/@parameter0
<org.mockito.internal.util.MockUtil: org.mockito.invocation.MockHandler getMockHandler(java.lang.Object)>/@parameter0
<org.mockito.internal.util.MockUtil: org.mockito.internal.stubbing.InvocationContainerImpl getInvocationContainer(java.lang.Object)>/@parameter0
<org.mockito.internal.util.MockUtil: boolean isSpy(java.lang.Object)>/@parameter0
<org.mockito.internal.util.MockUtil: boolean isMock(java.lang.Object)>/@parameter0
<org.mockito.internal.util.MockUtil: org.mockito.mock.MockCreationSettings getMockSettings(java.lang.Object)>/@parameter0
<org.apache.flink.api.common.typeinfo.LocalTimeTypeInfo: org.apache.flink.api.common.typeutils.TypeComparator instantiateComparator(java.lang.Class,boolean)>/@parameter0
<org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer: void <init>(byte[],java.lang.Throwable)>/@parameter0
<org.apache.flink.api.java.typeutils.ValueTypeInfo: void <init>(java.lang.Class)>/@parameter0
<org.apache.flink.api.java.typeutils.ValueTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getValueTypeInfo(java.lang.Class)>/@parameter0
<com.esotericsoftware.kryo.serializers.DefaultSerializers$ClassSerializer: java.lang.Class read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)>/$stack12
<org.apache.flink.api.java.typeutils.runtime.KryoRegistration: void <init>(java.lang.Class)>/@parameter0
<org.apache.flink.api.java.typeutils.runtime.KryoRegistration: void <init>(java.lang.Class,org.apache.flink.api.common.ExecutionConfig$SerializableSerializer)>/@parameter0
<com.esotericsoftware.kryo.util.ObjectMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/@parameter0
<com.esotericsoftware.kryo.util.ObjectMap: java.lang.Object put_internal(java.lang.Object,java.lang.Object)>/@parameter0
<com.esotericsoftware.kryo.util.ObjectMap: void putResize(java.lang.Object,java.lang.Object)>/@parameter0
<com.esotericsoftware.kryo.util.ObjectMap: void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)>/@parameter0
<com.esotericsoftware.kryo.util.ObjectMap: void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)>/@parameter3
<com.esotericsoftware.kryo.util.ObjectMap: void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)>/@parameter5
<com.esotericsoftware.kryo.util.ObjectMap: void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)>/@parameter7
<com.esotericsoftware.kryo.util.ObjectMap: void putStash(java.lang.Object,java.lang.Object)>/@parameter0
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData createFrom(java.lang.Class,java.lang.reflect.Field[],org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.LinkedHashMap,java.util.Map)>/@parameter0
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData createFrom(java.lang.Class,java.lang.reflect.Field[],org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.LinkedHashMap,java.util.Map)>/@parameter1
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData createFrom(java.lang.Class,java.lang.reflect.Field[],org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.LinkedHashMap,java.util.Map)>/@parameter2
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData createFrom(java.lang.Class,java.lang.reflect.Field[],org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.LinkedHashMap,java.util.Map)>/@parameter4
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData createFrom(java.lang.Class,java.lang.reflect.Field[],org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[],java.util.LinkedHashMap,java.util.Map)>/@parameter0
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData: void <init>(java.lang.Class,org.apache.flink.util.LinkedOptionalMap,org.apache.flink.util.LinkedOptionalMap,org.apache.flink.util.LinkedOptionalMap)>/@parameter0
<org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo getInfoFor(java.lang.Class)>/@parameter0
<org.mockito.internal.debugging.InvocationsPrinter: java.lang.String printInvocations(java.lang.Object)>/@parameter0
<org.apache.flink.api.java.typeutils.GenericTypeInfo: void <init>(java.lang.Class)>/@parameter0
<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot: void <init>(java.lang.Class,java.util.LinkedHashMap,java.util.LinkedHashMap,java.util.LinkedHashMap)>/@parameter0
<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot: void <init>(java.lang.Class,java.util.LinkedHashMap,java.util.LinkedHashMap,java.util.LinkedHashMap)>/@parameter1
<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot: void <init>(java.lang.Class,java.util.LinkedHashMap,java.util.LinkedHashMap,java.util.LinkedHashMap)>/@parameter2
<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot: void <init>(java.lang.Class,java.util.LinkedHashMap,java.util.LinkedHashMap,java.util.LinkedHashMap)>/@parameter3
<org.junit.ComparisonFailure$ComparisonCompactor: void <init>(int,java.lang.String,java.lang.String)>/@parameter1
<org.junit.ComparisonFailure$ComparisonCompactor: void <init>(int,java.lang.String,java.lang.String)>/@parameter2
<org.apache.flink.api.common.ExecutionConfig: void registerKryoType(java.lang.Class)>/@parameter0
<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(java.lang.Class,org.apache.flink.api.common.typeinfo.TypeInformation[])>/@parameter0
<org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator: void <init>(boolean,java.lang.Class)>/@parameter1
<org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys: void validateCustomPartitioner(org.apache.flink.api.common.functions.Partitioner,org.apache.flink.api.common.typeinfo.TypeInformation)>/typeInfo_$$A_1#_175
<org.apache.flink.api.common.typeutils.GenericTypeSerializerSnapshot: void <init>(java.lang.Class)>/@parameter0
<org.apache.flink.util.InstantiationUtil: java.lang.Object instantiate(java.lang.Class,java.lang.Class)>/@parameter0
<org.apache.flink.util.InstantiationUtil: java.lang.Object instantiate(java.lang.Class)>/@parameter0
<org.apache.flink.util.InstantiationUtil: boolean hasPublicNullaryConstructor(java.lang.Class)>/@parameter0
<org.apache.flink.util.InstantiationUtil: boolean isPublic(java.lang.Class)>/@parameter0
<org.apache.flink.util.InstantiationUtil: boolean isProperClass(java.lang.Class)>/@parameter0
<org.apache.flink.util.InstantiationUtil: boolean isNonStaticInnerClass(java.lang.Class)>/@parameter0
<org.apache.flink.util.InstantiationUtil: void checkForInstantiation(java.lang.Class)>/@parameter0
<org.apache.flink.util.InstantiationUtil: java.lang.String checkForInstantiationError(java.lang.Class)>/@parameter0
<org.apache.flink.util.InstantiationUtil: java.lang.Object deserializeObject(java.io.InputStream,java.lang.ClassLoader)>/@parameter1
<org.apache.flink.util.InstantiationUtil: java.lang.Object deserializeObject(java.io.InputStream,java.lang.ClassLoader,boolean)>/@parameter1
<org.apache.flink.util.InstantiationUtil: byte[] serializeObject(java.lang.Object)>/@parameter0
<org.apache.flink.util.InstantiationUtil: void serializeObject(java.io.OutputStream,java.lang.Object)>/@parameter1
<org.apache.flink.util.InstantiationUtil: java.io.Serializable clone(java.io.Serializable,java.lang.ClassLoader)>/@parameter0
<org.apache.flink.util.InstantiationUtil: java.lang.Class resolveClassByName(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader,java.lang.Class)>/@parameter1
<com.esotericsoftware.kryo.factories.ReflectionSerializerFactory: com.esotericsoftware.kryo.Serializer makeSerializer(com.esotericsoftware.kryo.Kryo,java.lang.Class,java.lang.Class)>/@parameter1
<com.esotericsoftware.kryo.factories.ReflectionSerializerFactory: com.esotericsoftware.kryo.Serializer makeSerializer(com.esotericsoftware.kryo.Kryo,java.lang.Class,java.lang.Class)>/@parameter2
<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerCompatibilityTest: void testMigrationStrategyWithDifferentKryoType()>/kryoSerializerConfigSnapshot_$$A_1#_119
<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerCompatibilityTest: void testMigrationStrategyForDifferentRegistrationOrder()>/kryoSerializerConfigSnapshot_$$A_1#_290
<org.apache.flink.configuration.description.TextElement: org.apache.flink.configuration.description.TextElement text(java.lang.String)>/@parameter0
<org.apache.flink.configuration.description.TextElement: org.apache.flink.configuration.description.TextElement code(java.lang.String)>/@parameter0
<org.apache.flink.configuration.description.TextElement: void <init>(java.lang.String,java.util.List)>/@parameter0
<org.apache.flink.api.java.typeutils.PojoTypeInfo: void <init>(java.lang.Class,java.util.List)>/@parameter0
<org.apache.flink.api.java.typeutils.PojoTypeInfo: void getFlatFields(java.lang.String,int,java.util.List)>/fieldType#14_$$A_1#_186
<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(java.lang.String)>/fieldType_$$A_1#_254
<com.esotericsoftware.kryo.Registration: void <init>(java.lang.Class,com.esotericsoftware.kryo.Serializer,int)>/@parameter0
<org.apache.flink.api.common.typeutils.base.EnumSerializer: void <init>(java.lang.Class)>/@parameter0
<org.apache.flink.api.common.typeutils.base.EnumSerializer: void <init>(java.lang.Class,java.lang.Enum[])>/@parameter0
<org.apache.flink.api.common.typeutils.base.EnumSerializer: void <init>(java.lang.Class,java.lang.Enum[])>/@parameter1
<org.apache.flink.api.common.typeutils.base.EnumSerializer: void <init>(java.lang.Class,java.lang.Enum[],org.apache.flink.api.common.typeutils.base.EnumSerializer$1)>/@parameter0
<org.apache.flink.api.common.typeutils.base.EnumSerializer: void <init>(java.lang.Class,java.lang.Enum[],org.apache.flink.api.common.typeutils.base.EnumSerializer$1)>/@parameter1
<org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil: void writeSerializerSnapshot(org.apache.flink.core.memory.DataOutputView,org.apache.flink.api.common.typeutils.TypeSerializerSnapshot,org.apache.flink.api.common.typeutils.TypeSerializer)>/@parameter1
<org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil: void writeSerializerSnapshot(org.apache.flink.core.memory.DataOutputView,org.apache.flink.api.common.typeutils.TypeSerializerSnapshot,org.apache.flink.api.common.typeutils.TypeSerializer)>/@parameter2
<org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot readSerializerSnapshot(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader,org.apache.flink.api.common.typeutils.TypeSerializer)>/@parameter1
<org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot readSerializerSnapshot(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader,org.apache.flink.api.common.typeutils.TypeSerializer)>/@parameter2
<org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot readAndInstantiateSnapshotClass(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>/@parameter1
<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: void <init>(org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type,org.apache.flink.api.common.typeutils.TypeSerializer)>/@parameter1
<org.apache.flink.core.fs.ClosingFSDataOutputStream: void <init>(org.apache.flink.core.fs.FSDataOutputStream,org.apache.flink.core.fs.SafetyNetCloseableRegistry,java.lang.String)>/@parameter1
<org.apache.flink.core.fs.ClosingFSDataOutputStream: org.apache.flink.core.fs.ClosingFSDataOutputStream wrapSafe(org.apache.flink.core.fs.FSDataOutputStream,org.apache.flink.core.fs.SafetyNetCloseableRegistry,java.lang.String)>/@parameter1
<org.apache.flink.api.java.typeutils.runtime.TupleSerializerSnapshot: void <init>(java.lang.Class)>/@parameter0
<org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy: void <init>(java.lang.ClassLoader,org.apache.flink.api.common.typeutils.TypeSerializer)>/@parameter0
<org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy: void <init>(java.lang.ClassLoader,org.apache.flink.api.common.typeutils.TypeSerializer)>/@parameter1
<org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy: void <init>(org.apache.flink.api.common.typeutils.TypeSerializerSnapshot,org.apache.flink.api.common.typeutils.TypeSerializer)>/@parameter0
<org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy: void <init>(org.apache.flink.api.common.typeutils.TypeSerializerSnapshot,org.apache.flink.api.common.typeutils.TypeSerializer)>/@parameter1
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer[],java.lang.reflect.Field[],org.apache.flink.api.common.ExecutionConfig)>/@parameter0
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer[],java.lang.reflect.Field[],org.apache.flink.api.common.ExecutionConfig)>/@parameter1
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer[],java.lang.reflect.Field[],org.apache.flink.api.common.ExecutionConfig)>/@parameter2
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer[],java.lang.reflect.Field[],org.apache.flink.api.common.ExecutionConfig)>/@parameter3
<org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot deserializeV2(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>/@parameter1
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: void <init>(java.lang.Class,java.lang.reflect.Field[],org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.LinkedHashMap,org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.Map,org.apache.flink.api.common.ExecutionConfig)>/@parameter0
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: void <init>(java.lang.Class,java.lang.reflect.Field[],org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.LinkedHashMap,org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.Map,org.apache.flink.api.common.ExecutionConfig)>/@parameter1
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: void <init>(java.lang.Class,java.lang.reflect.Field[],org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.LinkedHashMap,org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.Map,org.apache.flink.api.common.ExecutionConfig)>/@parameter3
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: void <init>(java.lang.Class,java.lang.reflect.Field[],org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.LinkedHashMap,org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.Map,org.apache.flink.api.common.ExecutionConfig)>/@parameter4
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: void <init>(java.lang.Class,java.lang.reflect.Field[],org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.LinkedHashMap,org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.Map,org.apache.flink.api.common.ExecutionConfig)>/@parameter6
<org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot deserializeV1(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader,org.apache.flink.api.common.typeutils.TypeSerializer)>/@parameter1
<org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot deserializeV1(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader,org.apache.flink.api.common.typeutils.TypeSerializer)>/@parameter2
<org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy: void setSerializerForWriteIfOldPath(org.apache.flink.api.common.typeutils.TypeSerializerSnapshot,org.apache.flink.api.common.typeutils.TypeSerializer)>/@parameter0
<org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy: void setSerializerForWriteIfOldPath(org.apache.flink.api.common.typeutils.TypeSerializerSnapshot,org.apache.flink.api.common.typeutils.TypeSerializer)>/@parameter1
<org.apache.flink.configuration.description.Formatter: java.lang.String escapeFormatPlaceholder(java.lang.String)>/@parameter0
<org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo: org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo getInfoFor(java.lang.Class)>/@parameter0
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.util.LinkedHashSet getRegisteredSubclassesFromExecutionConfig(java.lang.Class,org.apache.flink.api.common.ExecutionConfig)>/@parameter0
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.util.LinkedHashSet getRegisteredSubclassesFromExecutionConfig(java.lang.Class,org.apache.flink.api.common.ExecutionConfig)>/@parameter1
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] createRegisteredSubclassSerializers(java.util.LinkedHashSet,org.apache.flink.api.common.ExecutionConfig)>/@parameter1
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot buildSnapshot(java.lang.Class,java.util.LinkedHashMap,org.apache.flink.api.common.typeutils.TypeSerializer[],java.lang.reflect.Field[],org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.Map)>/@parameter0
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot buildSnapshot(java.lang.Class,java.util.LinkedHashMap,org.apache.flink.api.common.typeutils.TypeSerializer[],java.lang.reflect.Field[],org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.Map)>/@parameter1
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot buildSnapshot(java.lang.Class,java.util.LinkedHashMap,org.apache.flink.api.common.typeutils.TypeSerializer[],java.lang.reflect.Field[],org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.Map)>/@parameter2
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot buildSnapshot(java.lang.Class,java.util.LinkedHashMap,org.apache.flink.api.common.typeutils.TypeSerializer[],java.lang.reflect.Field[],org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.Map)>/@parameter3
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot buildSnapshot(java.lang.Class,java.util.LinkedHashMap,org.apache.flink.api.common.typeutils.TypeSerializer[],java.lang.reflect.Field[],org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.Map)>/@parameter4
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot buildSnapshot(java.lang.Class,java.util.LinkedHashMap,org.apache.flink.api.common.typeutils.TypeSerializer[],java.lang.reflect.Field[],org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.Map)>/@parameter5
<org.apache.flink.configuration.MemorySize: int compareTo(org.apache.flink.configuration.MemorySize)>/@parameter0
<org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize add(org.apache.flink.configuration.MemorySize)>/@parameter0
<org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize subtract(org.apache.flink.configuration.MemorySize)>/@parameter0
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>/@parameter1
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>/@parameter1
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getFlatMapReturnTypes(org.apache.flink.api.common.functions.FlatMapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>/@parameter1
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getFlatMapReturnTypes(org.apache.flink.api.common.functions.FlatMapFunction,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>/@parameter1
<org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot: void setPriorSerializer(org.apache.flink.api.common.typeutils.TypeSerializer)>/@parameter0
<org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot: void setUserCodeClassLoader(java.lang.ClassLoader)>/@parameter0
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getFlatJoinReturnTypes(org.apache.flink.api.common.functions.FlatJoinFunction,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/@parameter1
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getFlatJoinReturnTypes(org.apache.flink.api.common.functions.FlatJoinFunction,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>/@parameter1
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getJoinReturnTypes(org.apache.flink.api.common.functions.JoinFunction,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/@parameter1
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getJoinReturnTypes(org.apache.flink.api.common.functions.JoinFunction,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/@parameter2
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getJoinReturnTypes(org.apache.flink.api.common.functions.JoinFunction,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>/@parameter1
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getJoinReturnTypes(org.apache.flink.api.common.functions.JoinFunction,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>/@parameter2
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getCoGroupReturnTypes(org.apache.flink.api.common.functions.CoGroupFunction,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/@parameter1
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getCoGroupReturnTypes(org.apache.flink.api.common.functions.CoGroupFunction,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/@parameter2
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getCoGroupReturnTypes(org.apache.flink.api.common.functions.CoGroupFunction,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>/@parameter1
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getCoGroupReturnTypes(org.apache.flink.api.common.functions.CoGroupFunction,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>/@parameter2
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getCrossReturnTypes(org.apache.flink.api.common.functions.CrossFunction,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/@parameter1
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getCrossReturnTypes(org.apache.flink.api.common.functions.CrossFunction,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>/@parameter1
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getKeySelectorTypes(org.apache.flink.api.java.functions.KeySelector,org.apache.flink.api.common.typeinfo.TypeInformation)>/@parameter1
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getKeySelectorTypes(org.apache.flink.api.java.functions.KeySelector,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>/@parameter1
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getUnaryOperatorReturnType(org.apache.flink.api.common.functions.Function,java.lang.Class,int,int,int[],org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>/@parameter5
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getBinaryOperatorReturnType(org.apache.flink.api.common.functions.Function,java.lang.Class,int,int,int,int[],org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>/@parameter6
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getBinaryOperatorReturnType(org.apache.flink.api.common.functions.Function,java.lang.Class,int,int,int,int[],org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>/@parameter7
<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: void assertSerializerIsValid(org.apache.flink.api.common.typeutils.TypeSerializer,boolean,org.apache.flink.core.memory.DataInputView,org.hamcrest.Matcher)>/@parameter0
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.Class)>/@parameter0
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.reflect.Type)>/@parameter0
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation privateCreateTypeInfo(java.lang.reflect.Type)>/@parameter0
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation privateCreateTypeInfo(java.lang.Class,java.lang.Class,int,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/@parameter3
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation privateCreateTypeInfo(java.lang.Class,java.lang.Class,int,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/@parameter4
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation privateCreateTypeInfo(java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/@parameter1
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation privateCreateTypeInfo(java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/@parameter2
<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: void writeSerializerSnapshotCurrentFormat(org.apache.flink.core.memory.DataOutputView,org.apache.flink.api.common.typeutils.TypeSerializer)>/@parameter1
<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot readSerializerSnapshot(org.apache.flink.core.memory.DataInputView,org.apache.flink.testutils.migration.MigrationVersion)>/@parameter1
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoWithTypeHierarchy(java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/@parameter1
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoWithTypeHierarchy(java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/@parameter2
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoWithTypeHierarchy(java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/@parameter3
<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.core.memory.DataInputView readAndThenWriteData(org.apache.flink.core.memory.DataInputView,org.apache.flink.api.common.typeutils.TypeSerializer,org.apache.flink.api.common.typeutils.TypeSerializer,org.hamcrest.Matcher)>/@parameter1
<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.core.memory.DataInputView readAndThenWriteData(org.apache.flink.core.memory.DataInputView,org.apache.flink.api.common.typeutils.TypeSerializer,org.apache.flink.api.common.typeutils.TypeSerializer,org.hamcrest.Matcher)>/@parameter2
<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot writeAndThenReadSerializerSnapshot(org.apache.flink.api.common.typeutils.TypeSerializer)>/@parameter0
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoFromInputs(java.lang.reflect.TypeVariable,java.util.List,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/@parameter0
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoFromInputs(java.lang.reflect.TypeVariable,java.util.List,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/@parameter2
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoFromInputs(java.lang.reflect.TypeVariable,java.util.List,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/@parameter3
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoFromInputs(java.lang.reflect.TypeVariable,java.util.List,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/t#17_$$A_1#_1024
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoFromInputs(java.lang.reflect.TypeVariable,java.util.List,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/t#17_$$A_3#_1036
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoFromInput(java.lang.reflect.TypeVariable,java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation)>/@parameter0
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoFromInput(java.lang.reflect.TypeVariable,java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation)>/@parameter2
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoFromInput(java.lang.reflect.TypeVariable,java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation)>/@parameter3
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoFromInput(java.lang.reflect.TypeVariable,java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation)>/info_$$A_2#_1091
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoFromInput(java.lang.reflect.TypeVariable,java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation)>/info_$$A_4#_1110
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoFromInput(java.lang.reflect.TypeVariable,java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation)>/factoryDefiningType#10_$$A_1#_1118
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoFromInput(java.lang.reflect.TypeVariable,java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation)>/factoryDefiningType#10_$$A_3#_1123
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoFromInput(java.lang.reflect.TypeVariable,java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation)>/info_$$A_8#_1154
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoFromInput(java.lang.reflect.TypeVariable,java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation)>/info_$$A_6#_1126
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation[] createSubTypesInfo(java.lang.reflect.Type,java.lang.reflect.ParameterizedType,java.util.List,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation,boolean)>/@parameter0
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation[] createSubTypesInfo(java.lang.reflect.Type,java.lang.reflect.ParameterizedType,java.util.List,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation,boolean)>/@parameter1
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation[] createSubTypesInfo(java.lang.reflect.Type,java.lang.reflect.ParameterizedType,java.util.List,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation,boolean)>/@parameter3
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation[] createSubTypesInfo(java.lang.reflect.Type,java.lang.reflect.ParameterizedType,java.util.List,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation,boolean)>/@parameter4
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation[] createSubTypesInfo(java.lang.reflect.Type,java.lang.reflect.ParameterizedType,java.util.List,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation,boolean)>/actualTypeArg#6_$$A_1#_1277
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoFromFactory(java.lang.reflect.Type,java.util.List,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/@parameter0
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoFromFactory(java.lang.reflect.Type,java.util.List,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/@parameter2
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoFromFactory(java.lang.reflect.Type,java.util.List,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/@parameter3
<org.apache.flink.api.java.typeutils.TypeExtractor: void validateInputType(java.lang.Class,java.lang.Class,int,org.apache.flink.api.common.typeinfo.TypeInformation)>/@parameter3
<org.apache.flink.api.java.typeutils.TypeExtractor: void validateInfo(java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation)>/@parameter1
<org.apache.flink.api.java.typeutils.TypeExtractor: void validateInfo(java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation)>/@parameter2
<org.apache.flink.api.java.typeutils.TypeExtractor: void validateInfo(java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack76
<org.apache.flink.api.java.typeutils.TypeExtractor: void validateInfo(java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack33
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInfoFactory getTypeInfoFactory(java.lang.reflect.Type)>/@parameter0
<org.apache.flink.api.java.typeutils.TypeExtractor: int countTypeInHierarchy(java.util.List,java.lang.reflect.Type)>/@parameter1
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInfoFactory getClosestFactory(java.util.List,java.lang.reflect.Type)>/@parameter1
<org.apache.flink.api.java.typeutils.TypeExtractor: int countFieldsInClass(java.lang.Class)>/@parameter0
<org.apache.flink.api.java.typeutils.TypeExtractor: java.lang.reflect.Type materializeTypeVariable(java.util.List,java.lang.reflect.TypeVariable)>/@parameter1
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation privateGetForClass(java.lang.Class,java.util.List)>/@parameter0
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation privateGetForClass(java.lang.Class,java.util.List,java.lang.reflect.ParameterizedType,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/@parameter0
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation privateGetForClass(java.lang.Class,java.util.List,java.lang.reflect.ParameterizedType,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/@parameter2
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation privateGetForClass(java.lang.Class,java.util.List,java.lang.reflect.ParameterizedType,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/@parameter3
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation privateGetForClass(java.lang.Class,java.util.List,java.lang.reflect.ParameterizedType,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/@parameter4
<org.apache.flink.api.java.typeutils.TypeExtractor: boolean isValidPojoField(java.lang.reflect.Field,java.lang.Class,java.util.List)>/@parameter1
<org.apache.flink.api.java.typeutils.TypeExtractor: boolean isValidPojoField(java.lang.reflect.Field,java.lang.Class,java.util.List)>/fieldType_$$A_1#_1946
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation analyzePojo(java.lang.reflect.Type,java.util.List,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/@parameter0
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation analyzePojo(java.lang.reflect.Type,java.util.List,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/@parameter2
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation analyzePojo(java.lang.reflect.Type,java.util.List,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/@parameter3
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation analyzePojo(java.lang.reflect.Type,java.util.List,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/ti#7_$$A_2#_2055
<org.apache.flink.api.java.typeutils.TypeExtractor: java.util.List getAllDeclaredFields(java.lang.Class,boolean)>/@parameter0
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getTypeOfPojoField(org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.reflect.Field)>/@parameter0
<org.apache.flink.api.java.typeutils.TypeExtractor: boolean isHadoopWritable(java.lang.Class)>/@parameter0
<org.apache.flink.api.java.typeutils.TypeExtractor: boolean hasHadoopWritableInterface(java.lang.Class,java.util.HashSet)>/@parameter0
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createHadoopWritableTypeInfo(java.lang.Class)>/@parameter0
<org.apache.flink.api.java.typeutils.TypeExtractor: void validateIfWritable(org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.reflect.Type)>/@parameter0
<org.apache.flink.api.java.typeutils.TypeExtractor: void validateIfWritable(org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.reflect.Type)>/@parameter1
<org.apache.flink.api.java.typeutils.PojoField: void <init>(java.lang.reflect.Field,org.apache.flink.api.common.typeinfo.TypeInformation)>/@parameter1
<org.apache.flink.api.common.operators.Operator: org.apache.flink.api.common.operators.Operator createUnionCascade(org.apache.flink.api.common.operators.Operator,org.apache.flink.api.common.operators.Operator[])>/@parameter0
<org.apache.flink.api.common.typeutils.ParameterlessTypeSerializerConfig: boolean isCompatibleSerializationFormatIdentifier(java.lang.String,org.apache.flink.api.common.typeutils.base.TypeSerializerSingleton)>/@parameter0
<org.apache.flink.api.common.typeutils.CompositeType: void <init>(java.lang.Class)>/@parameter0
<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>/@parameter0
<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>/@parameter1
<org.apache.flink.api.java.typeutils.runtime.CopyableValueSerializer$CopyableValueSerializerSnapshot: void <init>(java.lang.Class)>/@parameter0
<org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo getInfoFor(java.lang.Class)>/@parameter0
<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil$TypeSerializerSerializationProxy: void <init>(java.lang.ClassLoader)>/@parameter0
<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil$TypeSerializerSerializationProxy: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer)>/@parameter0
<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: void <init>(int,org.apache.flink.api.common.typeinfo.TypeInformation)>/@parameter1
<org.junit.internal.ComparisonCriteria: void arrayEquals(java.lang.String,java.lang.Object,java.lang.Object)>/@parameter2
<org.junit.internal.ComparisonCriteria: int assertArraysAreSameLength(java.lang.Object,java.lang.Object,java.lang.String)>/@parameter1
<org.apache.flink.types.RowUtils: org.apache.flink.types.Row createRowWithNamedPositions(org.apache.flink.types.RowKind,java.lang.Object[],java.util.LinkedHashMap)>/@parameter0
<org.apache.flink.types.RowUtils: boolean deepEqualsRow(org.apache.flink.types.RowKind,java.lang.Object[],java.util.Map,java.util.LinkedHashMap,org.apache.flink.types.RowKind,java.lang.Object[],java.util.Map,java.util.LinkedHashMap)>/@parameter0
<org.apache.flink.types.RowUtils: boolean deepEqualsRow(org.apache.flink.types.RowKind,java.lang.Object[],java.util.Map,java.util.LinkedHashMap,org.apache.flink.types.RowKind,java.lang.Object[],java.util.Map,java.util.LinkedHashMap)>/@parameter4
<org.apache.flink.types.RowUtils: int deepHashCodeRow(org.apache.flink.types.RowKind,java.lang.Object[],java.util.Map)>/@parameter0
<org.apache.flink.types.RowUtils: java.lang.String deepToStringRow(org.apache.flink.types.RowKind,java.lang.Object[],java.util.Map)>/@parameter0
<org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.util.List getAllDeclaredMethods(java.lang.Class)>/@parameter0
<org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.lang.Class typeToClass(java.lang.reflect.Type)>/@parameter0
<org.apache.flink.api.java.typeutils.TypeExtractionUtils: boolean isClassType(java.lang.reflect.Type)>/@parameter0
<org.apache.flink.api.java.typeutils.TypeExtractionUtils: boolean sameTypeVars(java.lang.reflect.Type,java.lang.reflect.Type)>/@parameter0
<org.apache.flink.api.java.typeutils.TypeExtractionUtils: boolean sameTypeVars(java.lang.reflect.Type,java.lang.reflect.Type)>/@parameter1
<org.apache.flink.api.common.io.InputStreamFSInputWrapper: void <init>(java.io.InputStream)>/@parameter0
<org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.lang.reflect.Type getTypeHierarchy(java.util.List,java.lang.reflect.Type,java.lang.Class)>/@parameter1
<org.apache.flink.api.java.typeutils.TypeExtractionUtils: boolean hasSuperclass(java.lang.Class,java.lang.String)>/@parameter0
<org.apache.flink.util.StringUtils: java.lang.String arrayAwareToString(java.lang.Object)>/@parameter0
<org.apache.flink.api.java.typeutils.runtime.PojoComparator: void <init>(java.lang.reflect.Field[],org.apache.flink.api.common.typeutils.TypeComparator[],org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Class)>/@parameter3
<org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo: void <init>(java.lang.Class,org.apache.flink.api.common.typeinfo.TypeInformation)>/@parameter0
<org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo: void <init>(java.lang.Class,org.apache.flink.api.common.typeinfo.TypeInformation)>/@parameter1
<org.apache.flink.types.Row: void <init>(org.apache.flink.types.RowKind,java.lang.Object[],java.util.Map,java.util.LinkedHashMap)>/@parameter0
<org.apache.flink.types.Row: void <init>(org.apache.flink.types.RowKind,int)>/@parameter0
<org.apache.flink.types.Row: org.apache.flink.types.Row withPositions(org.apache.flink.types.RowKind,int)>/@parameter0
<org.apache.flink.types.Row: org.apache.flink.types.Row withNames(org.apache.flink.types.RowKind)>/@parameter0
<org.apache.flink.types.Row: void setKind(org.apache.flink.types.RowKind)>/@parameter0
<org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo: org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo getInfoFor(java.lang.Class,org.apache.flink.api.common.typeinfo.TypeInformation)>/@parameter0
<org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo: org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo getInfoFor(java.lang.Class,org.apache.flink.api.common.typeinfo.TypeInformation)>/@parameter1
<org.apache.flink.core.fs.local.LocalRecoverable: void <init>(java.io.File,java.io.File,long)>/@parameter0
<org.apache.flink.core.fs.local.LocalRecoverable: void <init>(java.io.File,java.io.File,long)>/@parameter1
<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil: void writeSerializer(org.apache.flink.core.memory.DataOutputView,org.apache.flink.api.common.typeutils.TypeSerializer)>/@parameter1
<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil: org.apache.flink.api.common.typeutils.TypeSerializer tryReadSerializer(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader,boolean)>/@parameter1
<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil: java.util.List readSerializersAndConfigsWithResilience(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>/@parameter1
<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot transformLegacySnapshot(org.apache.flink.api.common.typeutils.TypeSerializer,org.apache.flink.api.common.typeutils.TypeSerializerSnapshot)>/@parameter0
<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot transformLegacySnapshot(org.apache.flink.api.common.typeutils.TypeSerializer,org.apache.flink.api.common.typeutils.TypeSerializerSnapshot)>/@parameter1
<org.apache.flink.api.common.operators.CollectionExecutor: java.util.List execute(org.apache.flink.api.common.operators.Operator,org.apache.flink.api.common.JobID)>/@parameter0
<org.apache.flink.api.common.operators.CollectionExecutor: java.util.List execute(org.apache.flink.api.common.operators.Operator,int,org.apache.flink.api.common.JobID)>/@parameter0
<org.apache.flink.api.common.operators.CollectionExecutor: void executeDataSink(org.apache.flink.api.common.operators.GenericDataSinkBase,int,org.apache.flink.api.common.JobID)>/@parameter0
<org.apache.flink.api.common.operators.CollectionExecutor: java.util.List executeDataSource(org.apache.flink.api.common.operators.GenericDataSourceBase,int,org.apache.flink.api.common.JobID)>/@parameter0
<org.apache.flink.util.FlinkRuntimeException: void <init>(java.lang.Throwable)>/@parameter0
<org.apache.flink.util.FlinkRuntimeException: void <init>(java.lang.String,java.lang.Throwable)>/@parameter1
<org.apache.flink.api.common.operators.CollectionExecutor: java.util.List executeUnaryOperator(org.apache.flink.api.common.operators.SingleInputOperator,int,org.apache.flink.api.common.JobID)>/@parameter0
<org.apache.flink.api.common.operators.CollectionExecutor: java.util.List executeBinaryOperator(org.apache.flink.api.common.operators.DualInputOperator,int,org.apache.flink.api.common.JobID)>/@parameter0
<org.apache.flink.api.common.operators.CollectionExecutor: java.util.List executeBulkIteration(org.apache.flink.api.common.operators.base.BulkIterationBase,org.apache.flink.api.common.JobID)>/@parameter0
<org.apache.flink.core.fs.UnsupportedFileSystemSchemeException: void <init>(java.lang.String)>/@parameter0
<org.apache.flink.core.fs.UnsupportedFileSystemSchemeException: void <init>(java.lang.String,java.lang.Throwable)>/@parameter0
<org.apache.flink.api.common.operators.CollectionExecutor: java.util.List executeDeltaIteration(org.apache.flink.api.common.operators.base.DeltaIterationBase,org.apache.flink.api.common.JobID)>/@parameter0
<org.mockito.internal.MockitoCore: java.lang.Object verify(java.lang.Object,org.mockito.verification.VerificationMode)>/@parameter0
<org.mockito.internal.MockitoCore: org.mockito.MockingDetails mockingDetails(java.lang.Object)>/@parameter0
<org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot$KryoRegistrationSerializationProxy: void <init>(java.lang.ClassLoader)>/@parameter0
<org.apache.flink.api.java.typeutils.TupleTypeInfoBase: void <init>(java.lang.Class,org.apache.flink.api.common.typeinfo.TypeInformation[])>/@parameter0
<org.apache.flink.configuration.StructuredOptionsSplitter: java.util.List tokenize(java.lang.String,char)>/@parameter0
<org.apache.flink.configuration.StructuredOptionsSplitter: int consumeInQuotes(java.lang.String,char,int,java.lang.StringBuilder)>/@parameter0
<org.apache.flink.configuration.StructuredOptionsSplitter: int consumeUnquoted(java.lang.String,char,int,java.lang.StringBuilder)>/@parameter0
<org.apache.flink.api.common.resources.ExternalResource: void <init>(java.lang.String,java.math.BigDecimal)>/@parameter0
<org.apache.flink.util.LinkedOptionalMap: org.apache.flink.util.LinkedOptionalMap optionalMapOf(java.util.Map,java.util.function.Function)>/@parameter0
<org.apache.flink.util.LinkedOptionalMapSerializer: void writeOptionalMap(org.apache.flink.core.memory.DataOutputView,org.apache.flink.util.LinkedOptionalMap,org.apache.flink.util.function.BiConsumerWithException,org.apache.flink.util.function.BiConsumerWithException)>/@parameter1
<org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate: org.apache.flink.api.common.typeutils.TypeSerializer[] snapshotsToRestoreSerializers(org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[])>/@parameter0
<org.apache.flink.util.TimeUtils: java.time.temporal.ChronoUnit toChronoUnit(java.util.concurrent.TimeUnit)>/@parameter0
<org.apache.flink.api.common.typeutils.base.GenericArraySerializerSnapshot: void <init>(java.lang.Class)>/@parameter0
<org.apache.flink.api.common.io.GlobFilePathFilter: java.util.ArrayList buildPatterns(java.util.List)>/@parameter0
<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafePreUpgradeSetup access$000(org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification)>/@parameter0
<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier access$200(org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification)>/@parameter0
<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification: org.apache.flink.testutils.migration.MigrationVersion access$400(org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification)>/@parameter0
<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification: java.lang.String access$500(org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification)>/@parameter0
<org.apache.flink.api.common.resources.Resource: void <init>(java.lang.String,java.math.BigDecimal)>/@parameter0
<org.apache.flink.core.fs.LimitedConnectionsFileSystem: void <init>(org.apache.flink.core.fs.FileSystem,int)>/@parameter0
<org.apache.flink.core.fs.LimitedConnectionsFileSystem: void <init>(org.apache.flink.core.fs.FileSystem,int,long,long)>/@parameter0
<org.apache.flink.core.fs.LimitedConnectionsFileSystem: void <init>(org.apache.flink.core.fs.FileSystem,int,int,int,long,long)>/@parameter0
<org.apache.flink.core.fs.LimitedConnectionsFileSystem: org.apache.flink.core.fs.FSDataOutputStream create(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.FileSystem$WriteMode)>/@parameter0
<org.apache.flink.core.fs.LimitedConnectionsFileSystem: org.apache.flink.core.fs.FSDataOutputStream create(org.apache.flink.core.fs.Path,boolean,int,short,long)>/@parameter0
<org.apache.flink.core.fs.LimitedConnectionsFileSystem: org.apache.flink.core.fs.FSDataInputStream open(org.apache.flink.core.fs.Path,int)>/@parameter0
<org.apache.flink.core.fs.LimitedConnectionsFileSystem: org.apache.flink.core.fs.FSDataInputStream open(org.apache.flink.core.fs.Path)>/@parameter0
<org.apache.flink.core.fs.LimitedConnectionsFileSystem: org.apache.flink.core.fs.FileStatus getFileStatus(org.apache.flink.core.fs.Path)>/@parameter0
<org.apache.flink.core.fs.LimitedConnectionsFileSystem: org.apache.flink.core.fs.BlockLocation[] getFileBlockLocations(org.apache.flink.core.fs.FileStatus,long,long)>/@parameter0
<org.apache.flink.core.fs.LimitedConnectionsFileSystem: org.apache.flink.core.fs.FileStatus[] listStatus(org.apache.flink.core.fs.Path)>/@parameter0
<org.apache.flink.core.fs.LimitedConnectionsFileSystem: boolean delete(org.apache.flink.core.fs.Path,boolean)>/@parameter0
<org.apache.flink.core.fs.LimitedConnectionsFileSystem: boolean mkdirs(org.apache.flink.core.fs.Path)>/@parameter0
<org.apache.flink.core.fs.LimitedConnectionsFileSystem: boolean rename(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.Path)>/@parameter0
<org.apache.flink.core.fs.LimitedConnectionsFileSystem: boolean rename(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.Path)>/@parameter1
<org.apache.flink.core.fs.LimitedConnectionsFileSystem: boolean exists(org.apache.flink.core.fs.Path)>/@parameter0
<org.apache.flink.api.java.typeutils.runtime.kryo.Serializers: void recursivelyRegisterType(org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.ExecutionConfig,java.util.Set)>/@parameter0
<org.apache.flink.api.java.typeutils.runtime.kryo.Serializers: void recursivelyRegisterType(java.lang.Class,org.apache.flink.api.common.ExecutionConfig,java.util.Set)>/@parameter0
<org.apache.flink.api.java.typeutils.runtime.kryo.Serializers: void getContainedGenericTypes(org.apache.flink.api.common.typeutils.CompositeType,java.util.List)>/@parameter0
<org.apache.flink.api.java.typeutils.runtime.TupleSerializer: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer[])>/@parameter0
<org.apache.flink.util.InstantiationUtil$ClassLoaderObjectInputStream: void <init>(java.io.InputStream,java.lang.ClassLoader)>/@parameter1
<org.mockito.internal.util.DefaultMockingDetails: void <init>(java.lang.Object)>/@parameter0
<org.apache.flink.api.common.cache.DistributedCache: void <init>(java.util.Map)>/@parameter0
<org.apache.flink.api.common.typeutils.base.GenericArraySerializer: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer)>/@parameter0
<org.apache.flink.configuration.ConfigOption: void <init>(java.lang.String,java.lang.Class,org.apache.flink.configuration.description.Description,java.lang.Object,boolean,org.apache.flink.configuration.FallbackKey[])>/@parameter0
<org.apache.flink.configuration.ConfigOption: void <init>(java.lang.String,java.lang.Class,org.apache.flink.configuration.description.Description,java.lang.Object,boolean,org.apache.flink.configuration.FallbackKey[])>/@parameter1
<org.apache.flink.api.java.typeutils.EnumTypeInfo: void <init>(java.lang.Class)>/@parameter0
<com.esotericsoftware.kryo.Kryo: com.esotericsoftware.kryo.Serializer getDefaultSerializer(java.lang.Class)>/@parameter0
<com.esotericsoftware.kryo.Kryo: com.esotericsoftware.kryo.Serializer newDefaultSerializer(java.lang.Class)>/@parameter0
<com.esotericsoftware.kryo.Kryo: com.esotericsoftware.kryo.Registration register(java.lang.Class)>/@parameter0
<com.esotericsoftware.kryo.Kryo: com.esotericsoftware.kryo.Registration register(java.lang.Class,int)>/@parameter0
<com.esotericsoftware.kryo.Kryo: com.esotericsoftware.kryo.Registration register(java.lang.Class,com.esotericsoftware.kryo.Serializer)>/@parameter0
<com.esotericsoftware.kryo.Kryo: com.esotericsoftware.kryo.Registration register(java.lang.Class,com.esotericsoftware.kryo.Serializer,int)>/@parameter0
<org.apache.flink.util.InstantiationUtil$FailureTolerantObjectInputStream: void <init>(java.io.InputStream,java.lang.ClassLoader)>/@parameter1
<com.esotericsoftware.kryo.Kryo: com.esotericsoftware.kryo.Registration getRegistration(java.lang.Class)>/@parameter0
<com.esotericsoftware.kryo.Kryo: java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)>/@parameter1
<com.esotericsoftware.kryo.Kryo: int readReferenceOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,boolean)>/@parameter1
<org.apache.flink.api.common.operators.DualInputOperator: void setSecondInput(org.apache.flink.api.common.operators.Operator)>/@parameter0
<com.esotericsoftware.kryo.Kryo: org.objenesis.instantiator.ObjectInstantiator newInstantiator(java.lang.Class)>/@parameter0
<com.esotericsoftware.kryo.Kryo: java.lang.Object newInstance(java.lang.Class)>/@parameter0
<org.apache.flink.api.java.typeutils.runtime.ValueSerializer$ValueSerializerSnapshot: void <init>(java.lang.Class)>/@parameter0
<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData createFrom(java.lang.Class,java.util.LinkedHashMap,java.util.LinkedHashMap,java.util.LinkedHashMap)>/@parameter0
<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData createFrom(java.lang.Class,java.util.LinkedHashMap,java.util.LinkedHashMap,java.util.LinkedHashMap)>/@parameter1
<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData createFrom(java.lang.Class,java.util.LinkedHashMap,java.util.LinkedHashMap,java.util.LinkedHashMap)>/@parameter2
<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData createFrom(java.lang.Class,java.util.LinkedHashMap,java.util.LinkedHashMap,java.util.LinkedHashMap)>/@parameter3
<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData: void <init>(java.lang.Class,org.apache.flink.util.LinkedOptionalMap,org.apache.flink.util.LinkedOptionalMap,org.apache.flink.util.LinkedOptionalMap)>/@parameter0
<com.esotericsoftware.kryo.util.Util: java.lang.Class getWrapperClass(java.lang.Class)>/@parameter0
<com.esotericsoftware.kryo.util.Util: java.lang.String className(java.lang.Class)>/@parameter0
<com.esotericsoftware.kryo.util.Util: int getDimensionCount(java.lang.Class)>/@parameter0
<com.esotericsoftware.kryo.util.Util: java.lang.Class getElementClass(java.lang.Class)>/@parameter0
<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void <init>(java.lang.Class,org.apache.flink.api.common.ExecutionConfig)>/@parameter0
<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void <init>(java.lang.Class,java.util.LinkedHashMap,java.util.LinkedHashMap,java.util.LinkedHashMap)>/@parameter0
<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.util.LinkedHashMap buildKryoRegistrations(java.lang.Class,java.util.LinkedHashSet,java.util.LinkedHashMap,java.util.LinkedHashMap)>/@parameter0
<org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator: void <init>(boolean,org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Class)>/@parameter2
<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: org.apache.flink.api.common.ExecutionConfig$SerializableSerializer deepCopySerializer(org.apache.flink.api.common.ExecutionConfig$SerializableSerializer)>/@parameter0
<org.apache.flink.util.AbstractCloseableRegistry: boolean removeCloseableInternal(java.io.Closeable)>/@parameter0
<org.apache.flink.api.common.typeinfo.SqlTimeTypeInfo: org.apache.flink.api.common.typeutils.TypeComparator instantiateComparator(java.lang.Class,boolean)>/@parameter0
<org.apache.flink.api.common.typeinfo.SqlTimeTypeInfo: org.apache.flink.api.common.typeinfo.SqlTimeTypeInfo getInfoFor(java.lang.Class)>/@parameter0
<org.apache.flink.api.java.typeutils.runtime.FieldSerializer: void serializeField(java.lang.reflect.Field,java.io.ObjectOutputStream)>/@parameter0
<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility delegateCompatibilityCheckToNewSnapshot(org.apache.flink.api.common.typeutils.TypeSerializer,org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot,org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[])>/@parameter2
<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil: org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult constructIntermediateCompatibilityResult(org.apache.flink.api.common.typeutils.TypeSerializer[],org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[])>/@parameter1
<org.apache.flink.api.java.typeutils.runtime.TupleSerializerBase: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer[])>/@parameter0
<org.apache.flink.api.common.typeutils.SerializerTestInstance: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Class,int,java.lang.Object[])>/@parameter1
<org.mockito.Mockito: org.mockito.MockingDetails mockingDetails(java.lang.Object)>/@parameter0
<org.apache.flink.api.common.typeutils.SerializerTestInstance: void <init>(org.apache.flink.testutils.DeeplyEqualsChecker,org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Class,int,java.lang.Object[])>/@parameter2
<org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>/@parameter0
<org.apache.flink.api.java.typeutils.runtime.ValueSerializer: void <init>(java.lang.Class)>/@parameter0
<org.apache.flink.api.java.typeutils.runtime.ValueSerializer: java.util.LinkedHashMap asKryoRegistrations(java.lang.Class)>/@parameter0
<org.apache.flink.core.fs.SafetyNetCloseableRegistry: boolean access$100(org.apache.flink.core.fs.SafetyNetCloseableRegistry,java.io.Closeable)>/@parameter0
<org.apache.flink.core.fs.SafetyNetCloseableRegistry: boolean access$100(org.apache.flink.core.fs.SafetyNetCloseableRegistry,java.io.Closeable)>/@parameter1
<org.junit.ComparisonFailure: void <init>(java.lang.String,java.lang.String,java.lang.String)>/@parameter1
<org.junit.ComparisonFailure: void <init>(java.lang.String,java.lang.String,java.lang.String)>/@parameter2
<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void validateCustomPartitioner(org.apache.flink.api.common.functions.Partitioner,org.apache.flink.api.common.typeinfo.TypeInformation)>/typeInfo_$$A_1#_413
<org.apache.flink.api.java.typeutils.runtime.NullableSerializer: int access$000(org.apache.flink.api.java.typeutils.runtime.NullableSerializer)>/@parameter0
<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility internalResolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer,org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[])>/@parameter1
<org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot: void <init>(java.lang.Class,java.lang.Enum[])>/@parameter0
<org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot: void <init>(java.lang.Class,java.lang.Enum[])>/@parameter1
<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility constructFinalSchemaCompatibilityResult(org.apache.flink.api.common.typeutils.TypeSerializer[],org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[],org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility)>/@parameter1
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: java.util.LinkedHashMap preprocessLegacySerializerSnapshotTuples(java.util.Map)>/@parameter0
<org.hamcrest.MatcherAssert: void assertThat(java.lang.String,java.lang.Object,org.hamcrest.Matcher)>/@parameter1
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: void <init>(java.lang.Class,java.lang.reflect.Field[],org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.LinkedHashMap,java.util.Map)>/@parameter0
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: void <init>(java.lang.Class,java.lang.reflect.Field[],org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.LinkedHashMap,java.util.Map)>/@parameter1
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: void <init>(java.lang.Class,java.lang.reflect.Field[],org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.LinkedHashMap,java.util.Map)>/@parameter2
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: void <init>(java.lang.Class,java.lang.reflect.Field[],org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.LinkedHashMap,java.util.Map)>/@parameter4
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: void <init>(java.lang.Class,java.lang.reflect.Field[],org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[],java.util.LinkedHashMap,java.util.Map)>/@parameter0
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult getCompatibilityOfPreExistingFields(org.apache.flink.api.java.typeutils.runtime.PojoSerializer,org.apache.flink.util.LinkedOptionalMap)>/@parameter1
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult getCompatibilityOfPreExistingRegisteredSubclasses(org.apache.flink.api.java.typeutils.runtime.PojoSerializer,org.apache.flink.util.LinkedOptionalMap)>/@parameter1
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: boolean newPojoSerializerIsCompatibleAfterMigration(org.apache.flink.api.java.typeutils.runtime.PojoSerializer,org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult,org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult,org.apache.flink.util.LinkedOptionalMap)>/@parameter3
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: boolean newPojoSerializerIsCompatibleWithReconfiguredSerializer(org.apache.flink.api.java.typeutils.runtime.PojoSerializer,org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult,org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult,org.apache.flink.util.LinkedOptionalMap,org.apache.flink.util.LinkedOptionalMap)>/@parameter3
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: boolean newPojoSerializerIsCompatibleWithReconfiguredSerializer(org.apache.flink.api.java.typeutils.runtime.PojoSerializer,org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult,org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult,org.apache.flink.util.LinkedOptionalMap,org.apache.flink.util.LinkedOptionalMap)>/@parameter4
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: boolean newPojoHasNewOrRemovedFields(org.apache.flink.util.LinkedOptionalMap,org.apache.flink.api.java.typeutils.runtime.PojoSerializer)>/@parameter0
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: boolean newPojoHasDifferentSubclassRegistrationOrder(org.apache.flink.util.LinkedOptionalMap,org.apache.flink.api.java.typeutils.runtime.PojoSerializer)>/@parameter0
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: boolean previousSerializerHasNonRegisteredSubclasses(org.apache.flink.util.LinkedOptionalMap)>/@parameter0
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: org.apache.flink.api.java.typeutils.runtime.PojoSerializer constructReconfiguredPojoSerializer(org.apache.flink.api.java.typeutils.runtime.PojoSerializer,org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult,org.apache.flink.util.LinkedOptionalMap,org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult,org.apache.flink.util.LinkedOptionalMap)>/@parameter2
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: org.apache.flink.api.java.typeutils.runtime.PojoSerializer constructReconfiguredPojoSerializer(org.apache.flink.api.java.typeutils.runtime.PojoSerializer,org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult,org.apache.flink.util.LinkedOptionalMap,org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult,org.apache.flink.util.LinkedOptionalMap)>/@parameter4
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: org.apache.flink.api.java.tuple.Tuple2 constructReconfiguredSubclassRegistry(java.util.LinkedHashMap,org.apache.flink.util.LinkedOptionalMap,org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult)>/@parameter1
<org.apache.flink.api.common.typeutils.TypeSerializerSnapshot: void writeVersionedSnapshot(org.apache.flink.core.memory.DataOutputView,org.apache.flink.api.common.typeutils.TypeSerializerSnapshot)>/@parameter1
<org.apache.flink.api.common.typeutils.TypeSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot readVersionedSnapshot(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>/@parameter1
<org.apache.flink.api.common.typeutils.SerializerTestBase: void testSnapshotConfigurationAndReconfigure()>/out#45#_149
<org.apache.flink.api.common.typeutils.base.array.PrimitiveArraySerializerUpgradeTestSpecifications$PrimitiveByteArrayVerifier: org.apache.flink.api.common.typeutils.TypeSerializer createUpgradedSerializer()>/$stack2
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testDuplicateFieldException()>/ti#_75
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testPojoWithGenericFields()>/typeForClass#_192
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testIncorrectPojos()>/typeForClass#_214
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testIncorrectPojos()>/typeForClass_$$A_1#_217
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testCorrectPojos()>/typeForClass#_223
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testCorrectPojos()>/typeForClass_$$A_1#_226
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void checkWCPojoAsserts(org.apache.flink.api.common.typeinfo.TypeInformation)>/i#16_$$A_1#_439
<org.mockito.internal.InOrderImpl: java.lang.Object verify(java.lang.Object)>/$stack3
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest: void testReconfigureWithDifferentPojoType()>/pojoSerializerConfigSnapshot#61#_355
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest: void testReconfigureDifferentSubclassRegistrationOrder()>/pojoSerializerConfigSnapshot#78#_406
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest: void testReconfigureRepopulateNonregisteredSubclassSerializerCache()>/pojoSerializerConfigSnapshot#61#_474
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest: void testReconfigureWithPreviouslyNonregisteredSubclasses()>/pojoSerializerConfigSnapshot#78#_557
<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(java.lang.Class)>/$stack2
<org.apache.flink.api.common.typeutils.base.array.PrimitiveArraySerializerUpgradeTestSpecifications$PrimitiveShortArraySetup: org.apache.flink.api.common.typeutils.TypeSerializer createPriorSerializer()>/$stack2
<org.apache.flink.api.java.typeutils.MapTypeInfo: void <init>(java.lang.Class,java.lang.Class)>/$stack5
<org.apache.flink.api.java.typeutils.MapTypeInfo: void <init>(java.lang.Class,java.lang.Class)>/$stack8
<org.apache.flink.api.java.typeutils.runtime.RowSerializer$RowSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers(org.apache.flink.api.java.typeutils.runtime.RowSerializer)>/$stack2
<org.apache.flink.api.java.typeutils.runtime.RowSerializer$RowSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers(org.apache.flink.api.common.typeutils.TypeSerializer)>/$stack3
<com.esotericsoftware.kryo.serializers.DefaultSerializers$ClassSerializer: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)>/$stack4
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerUpgradeTestSpecifications$ModifiedRegisteredPojoSubclassSchemaSetup: org.apache.flink.api.common.typeutils.TypeSerializer createPriorSerializer()>/$stack4
<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest: void testSerializerSerializationWithInvalidClass()>/out#56#_140
<org.apache.flink.api.common.typeutils.base.array.PrimitiveArraySerializerUpgradeTestSpecifications$PrimitiveLongArraySetup: org.apache.flink.api.common.typeutils.TypeSerializer createPriorSerializer()>/$stack2
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerUpgradeTestSpecifications$DifferentFieldTypePojoSubclassSchemaSetup: org.apache.flink.api.common.typeutils.TypeSerializer createPriorSerializer()>/$stack4
<org.apache.flink.api.common.state.StateDescriptor: void <init>(java.lang.String,java.lang.Class,java.lang.Object)>/$stack10
<org.apache.flink.api.common.typeutils.CompositeSerializerTest: void <clinit>()>/$stack23
<org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparatorTestBase: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer()>/$stack2
<org.apache.flink.api.common.typeutils.base.array.PrimitiveArraySerializerUpgradeTestSpecifications$PrimitiveBooleanArraySetup: org.apache.flink.api.common.typeutils.TypeSerializer createPriorSerializer()>/$stack2
<org.apache.flink.api.common.operators.SelectorFunctionKeysTest$KeySelector2: java.lang.Object getKey(java.lang.Object)>/$stack3
<org.apache.flink.api.common.typeutils.base.array.PrimitiveArraySerializerUpgradeTestSpecifications$PrimitiveFloatArraySetup: org.apache.flink.api.common.typeutils.TypeSerializer createPriorSerializer()>/$stack2
<org.apache.flink.api.common.typeutils.base.EnumSerializerTest: void testConfigurationSnapshotSerialization()>/out#42#_137
<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerCompatibilityTest: void testMigrationStrategyForRemovedAvroDependency()>/kryoSerializerConfigSnapshot#_65
<org.apache.flink.api.java.typeutils.PojoTypeInfo: void getFlatFields(java.lang.String,int,java.util.List)>/$stack59
<org.apache.flink.api.java.typeutils.PojoTypeInfo: void getFlatFields(java.lang.String,int,java.util.List)>/$stack54
<org.apache.flink.api.java.typeutils.PojoTypeInfo: void getFlatFields(java.lang.String,int,java.util.List)>/$stack47
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerUpgradeTestSpecifications$DifferentPojoSubclassRegistrationOrderVerifier: org.apache.flink.api.common.typeutils.TypeSerializer createUpgradedSerializer()>/$stack4
<org.apache.flink.api.common.typeutils.base.array.PrimitiveArraySerializerUpgradeTestSpecifications$PrimitiveDoubleArrayVerifier: org.apache.flink.api.common.typeutils.TypeSerializer createUpgradedSerializer()>/$stack2
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerUpgradeTestSpecifications$ModifiedPojoSchemaSetup: org.apache.flink.api.common.typeutils.TypeSerializer createPriorSerializer()>/$stack2
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerUpgradeTestSpecifications$DifferentFieldTypePojoSubclassSchemaVerifier: org.apache.flink.api.common.typeutils.TypeSerializer createUpgradedSerializer()>/$stack4
<org.apache.flink.api.java.typeutils.runtime.TupleSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers(org.apache.flink.api.common.typeutils.TypeSerializer)>/$stack3
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] createRegisteredSubclassSerializers(java.util.LinkedHashSet,org.apache.flink.api.common.ExecutionConfig)>/$stack10
<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer createSubclassSerializer(java.lang.Class)>/$stack4
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerUpgradeTestSpecifications$ModifiedPojoSchemaVerifier: org.apache.flink.api.common.typeutils.TypeSerializer createUpgradedSerializer()>/$stack2
<org.apache.flink.api.java.typeutils.runtime.RowSerializerTest: void testRowSerializerWithComplexTypes()>/$stack20
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack2
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>/$stack5
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getFlatMapReturnTypes(org.apache.flink.api.common.functions.FlatMapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack2
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getFlatMapReturnTypes(org.apache.flink.api.common.functions.FlatMapFunction,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>/$stack5
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getAggregateFunctionAccumulatorType(org.apache.flink.api.common.functions.AggregateFunction,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>/$stack5
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getAggregateFunctionReturnType(org.apache.flink.api.common.functions.AggregateFunction,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>/$stack5
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapPartitionReturnTypes(org.apache.flink.api.common.functions.MapPartitionFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack2
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapPartitionReturnTypes(org.apache.flink.api.common.functions.MapPartitionFunction,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>/$stack5
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getGroupReduceReturnTypes(org.apache.flink.api.common.functions.GroupReduceFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack2
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getGroupReduceReturnTypes(org.apache.flink.api.common.functions.GroupReduceFunction,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>/$stack5
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getGroupCombineReturnTypes(org.apache.flink.api.common.functions.GroupCombineFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack2
<org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot: void readSnapshot(int,org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>/$stack4
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getGroupCombineReturnTypes(org.apache.flink.api.common.functions.GroupCombineFunction,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>/$stack5
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getFlatJoinReturnTypes(org.apache.flink.api.common.functions.FlatJoinFunction,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack3
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getFlatJoinReturnTypes(org.apache.flink.api.common.functions.FlatJoinFunction,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>/$stack6
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getJoinReturnTypes(org.apache.flink.api.common.functions.JoinFunction,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack3
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getJoinReturnTypes(org.apache.flink.api.common.functions.JoinFunction,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>/$stack6
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getCoGroupReturnTypes(org.apache.flink.api.common.functions.CoGroupFunction,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack3
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getCoGroupReturnTypes(org.apache.flink.api.common.functions.CoGroupFunction,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>/$stack6
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getCrossReturnTypes(org.apache.flink.api.common.functions.CrossFunction,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack3
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getCrossReturnTypes(org.apache.flink.api.common.functions.CrossFunction,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>/$stack6
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getKeySelectorTypes(org.apache.flink.api.java.functions.KeySelector,org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack2
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getKeySelectorTypes(org.apache.flink.api.java.functions.KeySelector,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>/$stack5
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getPartitionerTypes(org.apache.flink.api.common.functions.Partitioner)>/$stack1
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getPartitionerTypes(org.apache.flink.api.common.functions.Partitioner,java.lang.String,boolean)>/$stack4
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getInputFormatTypes(org.apache.flink.api.common.io.InputFormat)>/$stack5
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getUnaryOperatorReturnType(org.apache.flink.api.common.functions.Function,java.lang.Class,int,int,int[],org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>/$stack30
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getUnaryOperatorReturnType(org.apache.flink.api.common.functions.Function,java.lang.Class,int,int,int[],org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>/$stack17
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getBinaryOperatorReturnType(org.apache.flink.api.common.functions.Function,java.lang.Class,int,int,int,int[],org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>/$stack34
<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: void assertSerializerIsValid(org.apache.flink.api.common.typeutils.TypeSerializer,boolean,org.apache.flink.core.memory.DataInputView,org.hamcrest.Matcher)>/snapshot#_432
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getBinaryOperatorReturnType(org.apache.flink.api.common.functions.Function,java.lang.Class,int,int,int,int[],org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>/$stack19
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.Class)>/$stack1
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.reflect.Type)>/ti#_746
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.Object,java.lang.Class,java.lang.Class,int)>/$stack5
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.Class,java.lang.Class,int,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/ti#_787
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation privateCreateTypeInfo(java.lang.reflect.Type)>/$stack5
<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotUnderTest()>/$stack5
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation privateCreateTypeInfo(java.lang.Class,java.lang.Class,int,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/typeInfo#_819
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation privateCreateTypeInfo(java.lang.Class,java.lang.Class,int,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack12
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation privateCreateTypeInfo(java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack6
<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot readSerializerSnapshot(org.apache.flink.core.memory.DataInputView,org.apache.flink.testutils.migration.MigrationVersion)>/$stack8
<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot readSerializerSnapshot(org.apache.flink.core.memory.DataInputView,org.apache.flink.testutils.migration.MigrationVersion)>/$stack7
<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot readSerializerSnapshotCurrentFormat(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>/$stack2
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoWithTypeHierarchy(java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack56
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoWithTypeHierarchy(java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack64
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoWithTypeHierarchy(java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack61
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoWithTypeHierarchy(java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack51
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoWithTypeHierarchy(java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/typeHierarchyForSubtypes#5#_914
<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot writeAndThenReadSerializerSnapshot(org.apache.flink.api.common.typeutils.TypeSerializer)>/$stack8
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoFromInputs(java.lang.reflect.TypeVariable,java.util.List,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack36
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoFromInput(java.lang.reflect.TypeVariable,java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack103
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoFromInput(java.lang.reflect.TypeVariable,java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack63
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoFromInput(java.lang.reflect.TypeVariable,java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack60
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoFromInput(java.lang.reflect.TypeVariable,java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack52
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoFromInput(java.lang.reflect.TypeVariable,java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation)>/typeParamName#47#_1183
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation[] createSubTypesInfo(java.lang.reflect.Type,java.lang.reflect.ParameterizedType,java.util.List,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation,boolean)>/$stack61
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation[] createSubTypesInfo(java.lang.reflect.Type,java.lang.reflect.ParameterizedType,java.util.List,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation,boolean)>/$stack40
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation[] createSubTypesInfo(java.lang.reflect.Type,java.lang.reflect.ParameterizedType,java.util.List,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation,boolean)>/$stack35
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoFromFactory(java.lang.reflect.Type,java.util.List,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack23
<org.apache.flink.api.java.typeutils.TypeExtractor: void validateInfo(java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack203
<org.apache.flink.api.java.typeutils.TypeExtractor: void validateInfo(java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack175
<org.apache.flink.api.java.typeutils.TypeExtractor: void validateInfo(java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack172
<org.apache.flink.api.java.typeutils.TypeExtractor: void validateInfo(java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack55
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInfoFactory getTypeInfoFactory(java.lang.reflect.Type)>/$stack4
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInfoFactory getTypeInfoFactory(java.lang.reflect.Type)>/$stack6
<org.apache.flink.api.java.typeutils.TypeExtractor: int countTypeInHierarchy(java.util.List,java.lang.reflect.Type)>/$stack12
<org.apache.flink.api.java.typeutils.TypeExtractor: int countTypeInHierarchy(java.util.List,java.lang.reflect.Type)>/$stack11
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInfoFactory getClosestFactory(java.util.List,java.lang.reflect.Type)>/$stack5
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInfoFactory getClosestFactory(java.util.List,java.lang.reflect.Type)>/$stack9
<org.apache.flink.api.common.operators.Operator: org.apache.flink.api.common.operators.Operator createUnionCascade(java.util.List)>/$stack6
<org.apache.flink.api.common.operators.Operator: org.apache.flink.api.common.operators.Operator createUnionCascade(org.apache.flink.api.common.operators.Operator[])>/$stack1
<org.apache.flink.util.OutputTag: void <init>(java.lang.String)>/$stack7
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerUpgradeTestSpecifications$NewAndMissingRegisteredPojoSubclassesVerifier: org.apache.flink.api.common.typeutils.TypeSerializer createUpgradedSerializer()>/$stack4
<org.apache.flink.api.java.typeutils.runtime.CopyableValueSerializer$CopyableValueSerializerSnapshot: java.lang.Class getTypeClass(org.apache.flink.api.java.typeutils.runtime.CopyableValueSerializer)>/$stack2
<org.apache.flink.api.java.typeutils.runtime.CopyableValueSerializer$CopyableValueSerializerSnapshot: java.lang.Class getTypeClass(org.apache.flink.api.common.typeutils.TypeSerializer)>/$stack3
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerUpgradeTestSpecifications$DifferentPojoSubclassRegistrationOrderSetup: org.apache.flink.api.common.typeutils.TypeSerializer createPriorSerializer()>/$stack4
<org.apache.flink.api.common.operators.GenericDataSinkBase: void setInputs(org.apache.flink.api.common.operators.Operator[])>/$stack3
<org.apache.flink.api.common.operators.GenericDataSinkBase: void setInputs(java.util.List)>/$stack3
<org.apache.flink.api.common.operators.GenericDataSinkBase: void addInput(org.apache.flink.api.common.operators.Operator[])>/$stack4
<org.apache.flink.api.common.operators.GenericDataSinkBase: void addInputs(java.util.List)>/$stack9
<org.apache.flink.api.java.typeutils.runtime.RowComparatorTest: void <clinit>()>/$stack12
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testTuple0()>/ti#_340
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testPojo()>/ti#_424
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testValue()>/ti#_595
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testMissingTupleGenerics()>/ti#_838
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testTupleSupertype()>/ti#_864
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testFunctionWithMissingGenerics()>/ti#_1041
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testFunctionDependingOnUnknownInput()>/ti#_1155
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testAbstractAndInterfaceTypes()>/ti#_1359
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testAbstractAndInterfaceTypes()>/ti_$$A_1#_1373
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testAbstractAndInterfaceTypes()>/ti_$$A_2#_1387
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testValueSupertypeException()>/ti#_1405
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testParameterizedPojo()>/ti#_1597
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testTypeErasure()>/ti#_1703
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testEnumType()>/ti#_2113
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testMultiDimensionalArray()>/ti#_2143
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testMultiDimensionalArray()>/ti_$$A_1#_2161
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testMultiDimensionalArray()>/ti_$$A_2#_2176
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testMultiDimensionalArray()>/ti_$$A_3#_2194
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testMultiDimensionalArray()>/ti_$$A_4#_2206
<org.apache.flink.api.common.typeutils.base.array.PrimitiveArraySerializerUpgradeTestSpecifications$PrimitiveLongArrayVerifier: org.apache.flink.api.common.typeutils.TypeSerializer createUpgradedSerializer()>/$stack2
<org.mockito.BDDMockito$ThenImpl: java.lang.Object should()>/$stack2
<org.mockito.BDDMockito$ThenImpl: java.lang.Object should(org.mockito.verification.VerificationMode)>/$stack3
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerUpgradeTestSpecifications$DifferentFieldTypePojoSchemaVerifier: org.apache.flink.api.common.typeutils.TypeSerializer createUpgradedSerializer()>/$stack2
<org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.lang.reflect.Type getTypeHierarchy(java.util.List,java.lang.reflect.Type,java.lang.Class)>/$stack8
<org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.lang.reflect.Type getTypeHierarchy(java.util.List,java.lang.reflect.Type,java.lang.Class)>/$stack5
<org.apache.flink.api.java.typeutils.TypeExtractionUtils: boolean hasSuperclass(java.lang.Class,java.lang.String)>/$stack12
<org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.lang.Class getRawClass(java.lang.reflect.Type)>/$stack9
<org.apache.flink.api.common.typeutils.base.array.PrimitiveArraySerializerUpgradeTestSpecifications$PrimitiveFloatArrayVerifier: org.apache.flink.api.common.typeutils.TypeSerializer createUpgradedSerializer()>/$stack2
<org.apache.flink.api.common.typeutils.base.array.PrimitiveArraySerializerUpgradeTestSpecifications$PrimitiveDoubleArraySetup: org.apache.flink.api.common.typeutils.TypeSerializer createPriorSerializer()>/$stack2
<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil: org.apache.flink.api.common.typeutils.TypeSerializer tryReadSerializer(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>/$stack2
<org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest: void testRowSerializerWithComplexTypes()>/$stack20
<org.apache.flink.api.common.typeutils.base.array.PrimitiveArraySerializerUpgradeTestSpecifications$PrimitiveBooleanArrayVerifier: org.apache.flink.api.common.typeutils.TypeSerializer createUpgradedSerializer()>/$stack2
<org.apache.flink.api.common.operators.SingleInputOperator: void setInput(org.apache.flink.api.common.operators.Operator[])>/$stack2
<org.apache.flink.api.common.operators.SingleInputOperator: void setInputs(java.util.List)>/$stack7
<org.apache.flink.api.common.operators.SingleInputOperator: void addInput(org.apache.flink.api.common.operators.Operator[])>/$stack3
<org.apache.flink.api.common.operators.SingleInputOperator: void addInput(java.util.List)>/$stack7
<org.apache.flink.api.java.typeutils.LambdaExtractionTest: void testLambdaTypeErasure()>/ti#_257
<org.apache.flink.api.java.typeutils.LambdaExtractionTest: void testLambdaWithoutTypeErasure()>/ti#_265
<org.apache.flink.api.java.typeutils.ListTypeInfo: void <init>(java.lang.Class)>/$stack4
<org.apache.flink.api.common.typeutils.base.array.PrimitiveArraySerializerUpgradeTestSpecifications$PrimitiveCharArrayVerifier: org.apache.flink.api.common.typeutils.TypeSerializer createUpgradedSerializer()>/$stack2
<org.apache.flink.api.common.typeutils.base.array.PrimitiveArraySerializerUpgradeTestSpecifications$PrimitiveStringArrayVerifier: org.apache.flink.api.common.typeutils.TypeSerializer createUpgradedSerializer()>/$stack2
<org.apache.flink.api.common.typeutils.base.array.PrimitiveArraySerializerUpgradeTestSpecifications$PrimitiveIntArrayVerifier: org.apache.flink.api.common.typeutils.TypeSerializer createUpgradedSerializer()>/$stack2
<org.apache.flink.api.common.typeutils.base.array.PrimitiveArraySerializerUpgradeTestSpecifications$PrimitiveByteArraySetup: org.apache.flink.api.common.typeutils.TypeSerializer createPriorSerializer()>/$stack2
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerUpgradeTestSpecifications$NewRegisteredPojoSubclassVerifier: org.apache.flink.api.common.typeutils.TypeSerializer createUpgradedSerializer()>/$stack4
<org.apache.flink.api.common.typeutils.base.array.PrimitiveArraySerializerUpgradeTestSpecifications$PrimitiveStringArraySetup: org.apache.flink.api.common.typeutils.TypeSerializer createPriorSerializer()>/$stack2
<org.apache.flink.api.common.serialization.AbstractDeserializationSchema: void <init>()>/$stack4
<org.apache.flink.api.common.serialization.AbstractDeserializationSchema: void <init>(java.lang.Class)>/$stack3
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerUpgradeTestSpecifications$NewAndMissingRegisteredPojoSubclassesSetup: org.apache.flink.api.common.typeutils.TypeSerializer createPriorSerializer()>/$stack4
<org.apache.flink.api.common.operators.DualInputOperator: void setFirstInput(org.apache.flink.api.common.operators.Operator[])>/$stack2
<org.apache.flink.api.common.operators.DualInputOperator: void setSecondInput(org.apache.flink.api.common.operators.Operator[])>/$stack2
<org.apache.flink.api.common.operators.DualInputOperator: void setFirstInputs(java.util.List)>/$stack2
<org.apache.flink.api.common.operators.DualInputOperator: void setSecondInputs(java.util.List)>/$stack2
<org.apache.flink.api.common.operators.DualInputOperator: void addFirstInput(org.apache.flink.api.common.operators.Operator[])>/$stack3
<org.apache.flink.api.common.operators.DualInputOperator: void addSecondInput(org.apache.flink.api.common.operators.Operator[])>/$stack3
<org.apache.flink.api.common.operators.DualInputOperator: void addFirstInputs(java.util.List)>/$stack7
<org.apache.flink.api.common.operators.DualInputOperator: void addSecondInputs(java.util.List)>/$stack7
<com.esotericsoftware.kryo.Kryo: boolean isFinal(java.lang.Class)>/$stack5
<org.apache.flink.api.java.typeutils.runtime.ValueSerializer$ValueSerializerSnapshot: java.lang.Class getTypeClass(org.apache.flink.api.java.typeutils.runtime.ValueSerializer)>/$stack2
<org.apache.flink.api.java.typeutils.runtime.ValueSerializer$ValueSerializerSnapshot: java.lang.Class getTypeClass(org.apache.flink.api.common.typeutils.TypeSerializer)>/$stack3
<org.apache.flink.api.common.typeutils.base.array.PrimitiveArraySerializerUpgradeTestSpecifications$PrimitiveCharArraySetup: org.apache.flink.api.common.typeutils.TypeSerializer createPriorSerializer()>/$stack2
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerUpgradeTestSpecifications$IdenticalPojoSchemaSetup: org.apache.flink.api.common.typeutils.TypeSerializer createPriorSerializer()>/$stack2
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerUpgradeTestSpecifications$NonRegisteredPojoSubclassSetup: org.apache.flink.api.common.typeutils.TypeSerializer createPriorSerializer()>/$stack2
<org.apache.flink.api.common.typeutils.base.array.PrimitiveArraySerializerUpgradeTestSpecifications$PrimitiveShortArrayVerifier: org.apache.flink.api.common.typeutils.TypeSerializer createUpgradedSerializer()>/$stack2
<org.apache.flink.api.common.typeutils.base.EnumSerializerCompatibilityTest: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility checkCompatibility(java.lang.String,java.lang.String)>/restoredSnapshot#74#_106
<org.apache.flink.api.common.typeinfo.TypeHint: void <init>()>/$stack4
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerUpgradeTestSpecifications$MissingRegisteredPojoSubclassVerifier: org.apache.flink.api.common.typeutils.TypeSerializer createUpgradedSerializer()>/$stack4
<org.apache.flink.configuration.ExternalResourceOptions: java.lang.String keyWithResourceNameAndSuffix(java.lang.String,java.lang.String)>/$stack5
<org.apache.flink.configuration.ExternalResourceOptions: java.lang.String keyWithResourceNameAndSuffix(java.lang.String,java.lang.String)>/$stack7
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerUpgradeTestSpecifications$NonRegisteredPojoSubclassVerifier: org.apache.flink.api.common.typeutils.TypeSerializer createUpgradedSerializer()>/$stack2
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerUpgradeTestSpecifications$DifferentFieldTypePojoSchemaSetup: org.apache.flink.api.common.typeutils.TypeSerializer createPriorSerializer()>/$stack2
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerUpgradeTestSpecifications$NewRegisteredPojoSubclassSetup: org.apache.flink.api.common.typeutils.TypeSerializer createPriorSerializer()>/$stack4
<org.apache.flink.api.java.typeutils.runtime.MultidimensionalArraySerializerTest: void testGenericObjectArrays()>/ti#_132
<org.apache.flink.api.common.typeutils.base.array.PrimitiveArraySerializerUpgradeTestSpecifications$PrimitiveIntArraySetup: org.apache.flink.api.common.typeutils.TypeSerializer createPriorSerializer()>/$stack2
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerUpgradeTestSpecifications$MissingRegisteredPojoSubclassSetup: org.apache.flink.api.common.typeutils.TypeSerializer createPriorSerializer()>/$stack4
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerUpgradeTestSpecifications$IdenticalPojoSchemaVerifier: org.apache.flink.api.common.typeutils.TypeSerializer createUpgradedSerializer()>/$stack2
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerUpgradeTestSpecifications$ModifiedRegisteredPojoSubclassSchemaVerifier: org.apache.flink.api.common.typeutils.TypeSerializer createUpgradedSerializer()>/$stack4
<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: void restoreSerializerIsValid()>/restoredSerializerSnapshot#_289
<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: void upgradedSerializerHasExpectedSchemaCompatibility()>/restoredSerializerSnapshot#_306
<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: void upgradedSerializerIsValidAfterMigration()>/restoredSerializerSnapshot#_325
<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: void upgradedSerializerIsValidAfterReconfiguration()>/restoredSerializerSnapshot#_361
<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: void upgradedSerializerIsValidWhenCompatibleAsIs()>/restoredSerializerSnapshot#_387
<org.apache.flink.api.java.typeutils.runtime.CopyableValueSerializer: java.lang.Class access$000(org.apache.flink.api.java.typeutils.runtime.CopyableValueSerializer)>/$stack1
<org.apache.flink.api.common.typeutils.base.MapSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers(org.apache.flink.api.common.typeutils.base.MapSerializer)>/$stack4
<org.apache.flink.api.common.typeutils.base.MapSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers(org.apache.flink.api.common.typeutils.base.MapSerializer)>/$stack6
<org.apache.flink.api.common.typeutils.base.MapSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot getKeySerializerSnapshot()>/$stack1
<org.apache.flink.api.java.typeutils.MultisetTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getElementTypeInfo()>/$stack1
<org.apache.flink.api.java.typeutils.MultisetTypeInfo: boolean equals(java.lang.Object)>/$stack5
<org.apache.flink.api.java.typeutils.MultisetTypeInfo: int hashCode()>/$stack2
<org.apache.flink.configuration.ResourceManagerOptions: void <clinit>()>/$stack78
<org.apache.flink.configuration.ResourceManagerOptions: void <clinit>()>/$stack99
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void checkWCPojoAsserts(org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack236
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void checkWCPojoAsserts(org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack231
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void checkWCPojoAsserts(org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack228
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void checkWCPojoAsserts(org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack216
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void checkWCPojoAsserts(org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack211
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void checkWCPojoAsserts(org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack206
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void checkWCPojoAsserts(org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack201
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void checkWCPojoAsserts(org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack196
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void checkWCPojoAsserts(org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack191
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void checkWCPojoAsserts(org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack186
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void checkWCPojoAsserts(org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack181
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void checkWCPojoAsserts(org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack176
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void checkWCPojoAsserts(org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack173
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void checkWCPojoAsserts(org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack159
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void checkWCPojoAsserts(org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack66
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void checkWCPojoAsserts(org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack147
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void checkWCPojoAsserts(org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack139
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void checkWCPojoAsserts(org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack131
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void checkWCPojoAsserts(org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack105
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void checkWCPojoAsserts(org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack108
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void checkWCPojoAsserts(org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack99
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void checkWCPojoAsserts(org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack90
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void checkAllPublicAsserts(org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack18
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void checkAllPublicAsserts(org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack49
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void checkAllPublicAsserts(org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack52
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void checkAllPublicAsserts(org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack41
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void checkAllPublicAsserts(org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack44
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void checkAllPublicAsserts(org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack36
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void checkFromTuplePojo(org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack12
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testPojoWithGenerics()>/$stack10
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testPojoWithGenericsSomeFieldsGeneric()>/$stack10
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testPojoWithComplexHierarchy()>/$stack10
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testPojoWithComplexHierarchy()>/$stack30
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testPojoWithComplexHierarchy()>/$stack23
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testGenericPojoTypeInference1()>/$stack14
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testGenericPojoTypeInference2()>/$stack14
<org.apache.flink.configuration.JobManagerOptions: void <clinit>()>/$stack49
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testRecursivePojo1()>/$stack7
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testRecursivePojo2()>/$stack7
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testRecursivePojo3()>/$stack7
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testRecursivePojo3()>/$stack13
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testPojoWithRecursiveGenericField()>/$stack7
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testPojosWithMutualRecursion()>/$stack12
<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testRecursivePojoWithTypeVariable()>/$stack12
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest: void testReconfigureDifferentSubclassRegistrationOrder()>/$stack17
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest: void testReconfigureDifferentSubclassRegistrationOrder()>/$stack21
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest: void testReconfigureDifferentSubclassRegistrationOrder()>/$stack39
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest: void testReconfigureDifferentSubclassRegistrationOrder()>/$stack43
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest: void testReconfigureDifferentSubclassRegistrationOrder()>/$stack49
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest: void testReconfigureRepopulateNonregisteredSubclassSerializerCache()>/$stack17
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest: void testReconfigureRepopulateNonregisteredSubclassSerializerCache()>/$stack20
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest: void testReconfigureRepopulateNonregisteredSubclassSerializerCache()>/$stack22
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest: void testReconfigureRepopulateNonregisteredSubclassSerializerCache()>/$stack38
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest: void testReconfigureRepopulateNonregisteredSubclassSerializerCache()>/$stack42
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest: void testReconfigureRepopulateNonregisteredSubclassSerializerCache()>/$stack45
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest: void testReconfigureRepopulateNonregisteredSubclassSerializerCache()>/$stack47
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest: void testReconfigureWithPreviouslyNonregisteredSubclasses()>/$stack17
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest: void testReconfigureWithPreviouslyNonregisteredSubclasses()>/$stack20
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest: void testReconfigureWithPreviouslyNonregisteredSubclasses()>/$stack22
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest: void testReconfigureWithPreviouslyNonregisteredSubclasses()>/$stack24
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest: void testReconfigureWithPreviouslyNonregisteredSubclasses()>/$stack27
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest: void testReconfigureWithPreviouslyNonregisteredSubclasses()>/$stack44
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest: void testReconfigureWithPreviouslyNonregisteredSubclasses()>/$stack48
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest: void testReconfigureWithPreviouslyNonregisteredSubclasses()>/$stack51
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest: void testReconfigureWithPreviouslyNonregisteredSubclasses()>/$stack53
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest: void testReconfigureWithPreviouslyNonregisteredSubclasses()>/$stack56
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest: void testReconfigureWithPreviouslyNonregisteredSubclasses()>/$stack59
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest: void testReconfigureWithPreviouslyNonregisteredSubclasses()>/$stack61
<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>/$stack1
<org.apache.flink.configuration.Configuration: java.lang.Enum getEnum(java.lang.Class,org.apache.flink.configuration.ConfigOption)>/$stack17
<org.apache.flink.configuration.Configuration: java.util.Optional getOptional(org.apache.flink.configuration.ConfigOption)>/$stack21
<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream$LocalCommitter: void commitAfterRecovery()>/dest#_168
<org.apache.flink.api.common.typeutils.base.ListSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers(org.apache.flink.api.common.typeutils.base.ListSerializer)>/$stack4
<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest: void initialize()>/$stack6
<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest: void initialize()>/$stack9
<com.esotericsoftware.kryo.util.DefaultClassResolver: com.esotericsoftware.kryo.Registration register(com.esotericsoftware.kryo.Registration)>/$stack7
<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$KryoRegistrationUtil: void writeKryoRegistration(org.apache.flink.core.memory.DataOutputView,org.apache.flink.api.java.typeutils.runtime.KryoRegistration)>/$stack9
<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$KryoRegistrationUtil: void writeKryoRegistration(org.apache.flink.core.memory.DataOutputView,org.apache.flink.api.java.typeutils.runtime.KryoRegistration)>/serializerClass#_239
<org.apache.flink.api.common.state.StateDescriptor: void setQueryable(java.lang.String)>/$stack3
<org.apache.flink.api.common.state.StateDescriptor: void enableTimeToLive(org.apache.flink.api.common.state.StateTtlConfig)>/$stack3
<org.apache.flink.api.common.operators.base.DeltaIterationBase: org.apache.flink.api.common.operators.Operator getInitialSolutionSet()>/$stack1
<org.apache.flink.api.common.operators.base.DeltaIterationBase: org.apache.flink.api.common.operators.Operator getInitialWorkset()>/$stack1
<org.apache.flink.api.java.typeutils.runtime.RowSerializer: void fillMask(int,org.apache.flink.types.Row,boolean[],boolean,int)>/$stack12
<org.apache.flink.api.common.operators.ResourceSpecTest: void testMerge()>/$stack15
<org.apache.flink.api.common.operators.ResourceSpecTest: void testSubtract()>/$stack16
<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>/$stack4
<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>/$stack6
<org.apache.flink.core.fs.local.LocalRecoverableSerializer: byte[] serialize(org.apache.flink.core.fs.local.LocalRecoverable)>/$stack6
<org.apache.flink.core.fs.local.LocalRecoverableSerializer: byte[] serialize(org.apache.flink.core.fs.local.LocalRecoverable)>/$stack10
<org.apache.flink.api.java.typeutils.PojoTypeInfo$1: int compare(org.apache.flink.api.java.typeutils.PojoField,org.apache.flink.api.java.typeutils.PojoField)>/$stack3
<org.apache.flink.api.java.typeutils.PojoTypeInfo$1: int compare(org.apache.flink.api.java.typeutils.PojoField,org.apache.flink.api.java.typeutils.PojoField)>/$stack5
<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.java.typeutils.runtime.TupleSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>/$stack4
<org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys: org.apache.flink.api.common.typeinfo.TypeInformation[] getKeyFieldTypes()>/$stack10
<org.apache.flink.core.fs.FSDataInputStreamWrapper: java.lang.Object getWrappedDelegate()>/$stack1
<org.apache.flink.configuration.TaskManagerOptions: void <clinit>()>/$stack144
<org.apache.flink.configuration.TaskManagerOptions: void <clinit>()>/$stack189
<org.apache.flink.configuration.TaskManagerOptions: void <clinit>()>/$stack199
<org.apache.flink.configuration.TaskManagerOptions: void <clinit>()>/$stack209
<org.apache.flink.configuration.TaskManagerOptions: void <clinit>()>/$stack220
<org.apache.flink.configuration.TaskManagerOptions: void <clinit>()>/$stack223
<org.apache.flink.util.TaskManagerExceptionUtils: void <clinit>()>/$stack4
<org.apache.flink.util.TaskManagerExceptionUtils: void <clinit>()>/$stack7
<org.apache.flink.util.TaskManagerExceptionUtils: void <clinit>()>/$stack13
<org.apache.flink.api.java.typeutils.PojoTypeInfo: void <init>(java.lang.Class,java.util.List)>/$stack18
<org.apache.flink.api.java.typeutils.PojoTypeInfo: void getFlatFields(java.lang.String,int,java.util.List)>/$stack17
<org.apache.flink.api.java.typeutils.PojoTypeInfo: void getFlatFields(java.lang.String,int,java.util.List)>/$stack20
<org.apache.flink.api.java.typeutils.PojoTypeInfo: void getFlatFields(java.lang.String,int,java.util.List)>/$stack73
<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(java.lang.String)>/$stack35
<org.apache.flink.api.common.state.ListStateDescriptor: org.apache.flink.api.common.typeutils.TypeSerializer getElementSerializer()>/$stack5
<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>/typed#_288
<org.apache.flink.api.java.typeutils.PojoTypeInfo: java.lang.String[] getFieldNames()>/$stack9
<org.apache.flink.api.java.typeutils.PojoTypeInfo: int getFieldIndex(java.lang.String)>/$stack7
<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.java.typeutils.runtime.PojoSerializer createPojoSerializer(org.apache.flink.api.common.ExecutionConfig)>/$stack15
<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.java.typeutils.runtime.PojoSerializer createPojoSerializer(org.apache.flink.api.common.ExecutionConfig)>/$stack19
<org.apache.flink.api.java.typeutils.PojoTypeInfo: java.lang.String toString()>/$stack18
<org.apache.flink.api.java.typeutils.PojoTypeInfo: java.lang.String toString()>/$stack22
<org.apache.flink.api.java.typeutils.PojoTypeInfo: java.lang.String toString()>/$stack9
<org.apache.flink.api.common.ArchivedExecutionConfig: void <init>(org.apache.flink.api.common.ExecutionConfig)>/$stack4
<org.apache.flink.api.common.ArchivedExecutionConfig: void <init>(org.apache.flink.api.common.ExecutionConfig)>/$stack15
<org.apache.flink.configuration.HistoryServerOptions: void <clinit>()>/$stack14
<org.apache.flink.configuration.HistoryServerOptions: void <clinit>()>/$stack44
<org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot readSerializerSnapshot(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader,org.apache.flink.api.common.typeutils.TypeSerializer)>/$stack5
<org.apache.flink.api.common.typeutils.base.GenericArraySerializerConfigSnapshot: void <init>(org.apache.flink.api.common.typeutils.base.GenericArraySerializer)>/$stack2
<org.apache.flink.api.common.typeutils.base.GenericArraySerializerConfigSnapshot: void <init>(org.apache.flink.api.common.typeutils.base.GenericArraySerializer)>/$stack6
<org.apache.flink.api.java.typeutils.runtime.TupleSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers(org.apache.flink.api.java.typeutils.runtime.TupleSerializer)>/$stack2
<org.apache.flink.configuration.RestOptions: void <clinit>()>/$stack5
<org.apache.flink.configuration.RestOptions: void <clinit>()>/$stack10
<org.apache.flink.configuration.RestOptions: void <clinit>()>/$stack20
<org.apache.flink.configuration.RestOptions: void <clinit>()>/$stack28
<org.apache.flink.configuration.RestOptions: void <clinit>()>/$stack37
<org.apache.flink.configuration.RestOptions: void <clinit>()>/$stack64
<org.apache.flink.api.common.state.MapStateDescriptor: org.apache.flink.api.common.typeutils.TypeSerializer getKeySerializer()>/$stack5
<org.apache.flink.api.common.state.MapStateDescriptor: org.apache.flink.api.common.typeutils.TypeSerializer getValueSerializer()>/$stack5
<org.apache.flink.api.java.typeutils.TypeExtractor: void validateInfo(java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack75
<org.apache.flink.api.java.typeutils.TypeExtractor: void validateInfo(java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack66
<org.apache.flink.api.java.typeutils.TypeExtractor: void validateInfo(java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack25
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getTypeOfPojoField(org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.reflect.Field)>/$stack7
<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getTypeOfPojoField(org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.reflect.Field)>/$stack13
<org.apache.flink.api.common.operators.GenericDataSinkBase: void executeOnCollections(java.util.List,org.apache.flink.api.common.functions.RuntimeContext,org.apache.flink.api.common.ExecutionConfig)>/$stack11
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testTupleWithTuples()>/$stack26
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testTupleWithTuples()>/$stack30
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testTupleWithPojo()>/$stack29
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testTupleWithPojo()>/$stack39
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testTupleWithPojo()>/$stack49
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testBasicArray2()>/$stack8
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testCustomArray()>/$stack10
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testTupleArray()>/$stack10
<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testCustomArrayWithTypeVariable()>/$stack10
<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil: org.apache.flink.api.common.typeutils.TypeSerializer tryReadSerializer(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader,boolean)>/$stack6
<org.apache.flink.api.common.operators.CollectionExecutor: void executeDataSink(org.apache.flink.api.common.operators.GenericDataSinkBase,int,org.apache.flink.api.common.JobID)>/$stack16
<org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot$KryoRegistrationSerializationProxy: void write(org.apache.flink.core.memory.DataOutputView)>/$stack9
<org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot$KryoRegistrationSerializationProxy: void write(org.apache.flink.core.memory.DataOutputView)>/$stack21
<org.apache.flink.util.TimeUtilsTest: void testToDuration()>/$stack8
<org.apache.flink.api.java.typeutils.LambdaExtractionTest: void <clinit>()>/$stack1
<org.apache.flink.api.java.typeutils.LambdaExtractionTest: void <clinit>()>/$stack3
<org.apache.flink.configuration.ConfigurationTest: void testFallbackAndDeprecatedKeys()>/$stack19
<org.apache.flink.configuration.ConfigurationTest: void testFallbackAndDeprecatedKeys()>/$stack23
<org.apache.flink.configuration.ConfigurationTest: void testFallbackAndDeprecatedKeys()>/$stack38
<org.apache.flink.configuration.ConfigurationTest: void testFallbackAndDeprecatedKeys()>/$stack42
<org.apache.flink.api.common.operators.base.SortPartitionOperatorBase: java.util.List executeOnCollections(java.util.List,org.apache.flink.api.common.functions.RuntimeContext,org.apache.flink.api.common.ExecutionConfig)>/$stack8
<org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext: java.lang.String getTaskName()>/$stack2
<org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext: java.lang.String getAllocationIDAsString()>/$stack2
<org.apache.flink.api.common.typeutils.base.GenericArraySerializerSnapshot: void <init>(org.apache.flink.api.common.typeutils.base.GenericArraySerializer)>/$stack2
<org.apache.flink.api.common.typeutils.base.GenericArraySerializerSnapshot: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility resolveOuterSchemaCompatibility(org.apache.flink.api.common.typeutils.base.GenericArraySerializer)>/$stack3
<org.apache.flink.api.common.typeutils.base.GenericArraySerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers(org.apache.flink.api.common.typeutils.base.GenericArraySerializer)>/$stack4
<org.apache.flink.configuration.StateBackendOptions: void <clinit>()>/$stack30
<org.apache.flink.util.ReflectionUtil$FullTypeInfo: boolean equals(java.lang.Object)>/$stack5
<org.apache.flink.api.common.serialization.AbstractDeserializationSchema: void <init>(org.apache.flink.api.common.typeinfo.TypeHint)>/$stack3
<com.esotericsoftware.kryo.Kryo: com.esotericsoftware.kryo.Registration register(com.esotericsoftware.kryo.Registration)>/$stack12
<com.esotericsoftware.kryo.Kryo: com.esotericsoftware.kryo.Registration register(com.esotericsoftware.kryo.Registration)>/$stack13
<org.apache.flink.core.fs.FSDataOutputStreamWrapper: java.lang.Object getWrappedDelegate()>/$stack1
<org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerConfigSnapshot: void read(org.apache.flink.core.memory.DataInputView)>/$stack35
<org.apache.flink.configuration.NettyShuffleEnvironmentOptions: void <clinit>()>/$stack71
<org.apache.flink.configuration.NettyShuffleEnvironmentOptions: void <clinit>()>/$stack74
<org.apache.flink.configuration.CheckpointingOptions: void <clinit>()>/$stack85
<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil: org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult constructIntermediateCompatibilityResult(org.apache.flink.api.common.typeutils.TypeSerializer[],org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[])>/$stack25
<org.apache.flink.configuration.ConfigurationParsingInvalidFormatsTest: void testInvalidStringParsingWithGetOptional()>/$stack13
<org.apache.flink.configuration.ConfigurationParsingInvalidFormatsTest: void testInvalidStringParsingWithGet()>/$stack13
<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(int[],org.apache.flink.api.common.typeinfo.TypeInformation,boolean)>/$stack40
<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(java.lang.String[],org.apache.flink.api.common.typeinfo.TypeInformation)>/$stack56
<org.apache.flink.api.common.operators.Keys$ExpressionKeys: org.apache.flink.api.common.typeinfo.TypeInformation[] getKeyFieldTypes()>/$stack10
<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] getNestedSerializerSnapshots()>/$stack2
<org.apache.flink.core.fs.SafetyNetWrapperFileSystem: java.lang.Object getWrappedDelegate()>/$stack1
<org.apache.flink.api.connector.source.lib.NumberSequenceSource$SplitSerializer: byte[] serialize(org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit)>/$stack5
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer restoreSerializer()>/$stack8
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer restoreSerializer()>/$stack13
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer restoreSerializer()>/$stack16
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer restoreSerializer()>/$stack21
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>/previousPojoClass#_183
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>/$stack18
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: java.util.Map buildNewFieldSerializersIndex(org.apache.flink.api.java.typeutils.runtime.PojoSerializer)>/newFields#_337
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: java.util.Map buildNewFieldSerializersIndex(org.apache.flink.api.java.typeutils.runtime.PojoSerializer)>/newFieldSerializers#_338
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: boolean newPojoHasNewOrRemovedFields(org.apache.flink.util.LinkedOptionalMap,org.apache.flink.api.java.typeutils.runtime.PojoSerializer)>/$stack9
<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: boolean newPojoHasDifferentSubclassRegistrationOrder(org.apache.flink.util.LinkedOptionalMap,org.apache.flink.api.java.typeutils.runtime.PojoSerializer)>/$stack6
<org.apache.flink.core.fs.EntropyInjectorTest: void testCreateEntropyAwarePlainFs()>/$stack11
<org.apache.flink.core.fs.EntropyInjectorTest: void testCreateEntropyAwareEntropyFs()>/$stack15
<org.apache.flink.core.fs.EntropyInjectorTest: void testWithSafetyNet()>/out#_155
<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>/@parameter0
<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>/@parameter0
<org.apache.flink.api.common.typeinfo.TypeInformation: boolean equals(java.lang.Object)>/@parameter0
<org.apache.flink.api.common.typeutils.TypeSerializer: boolean equals(java.lang.Object)>/@parameter0
<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>/@parameter0
<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileStatus getFileStatus(org.apache.flink.core.fs.Path)>/@parameter0
<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FSDataOutputStream create(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.FileSystem$WriteMode)>/@parameter0
<org.apache.flink.core.fs.FileSystem: boolean delete(org.apache.flink.core.fs.Path,boolean)>/@parameter0
<org.apache.flink.core.fs.FileSystem: boolean mkdirs(org.apache.flink.core.fs.Path)>/@parameter0
<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.BlockLocation[] getFileBlockLocations(org.apache.flink.core.fs.FileStatus,long,long)>/@parameter0
<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileStatus[] listStatus(org.apache.flink.core.fs.Path)>/@parameter0
<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FSDataInputStream open(org.apache.flink.core.fs.Path,int)>/@parameter0
<org.hamcrest.Matcher: boolean matches(java.lang.Object)>/@parameter0
<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$UpgradeVerifier: org.hamcrest.Matcher schemaCompatibilityMatcher(org.apache.flink.testutils.migration.MigrationVersion)>/@parameter0
<org.mockito.plugins.MockMaker: org.mockito.invocation.MockHandler getHandler(java.lang.Object)>/@parameter0
<org.hamcrest.Description: org.hamcrest.Description appendDescriptionOf(org.hamcrest.SelfDescribing)>/@parameter0
<org.hamcrest.Matcher: void describeMismatch(java.lang.Object,org.hamcrest.Description)>/@parameter0
<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FSDataInputStream open(org.apache.flink.core.fs.Path)>/@parameter0
<com.esotericsoftware.kryo.ReferenceResolver: boolean useReferences(java.lang.Class)>/@parameter0
<org.objenesis.strategy.InstantiatorStrategy: org.objenesis.instantiator.ObjectInstantiator newInstantiatorOf(java.lang.Class)>/@parameter0
<org.apache.flink.api.common.typeutils.GenericTypeSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(java.lang.Class)>/@parameter0
<org.apache.flink.api.java.typeutils.AvroUtils: org.apache.flink.api.common.typeutils.TypeSerializer createAvroSerializer(java.lang.Class)>/@parameter0
<org.apache.flink.core.fs.FileSystem: boolean rename(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.Path)>/@parameter0
<org.apache.flink.api.common.typeinfo.TypeInfoFactory: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.reflect.Type,java.util.Map)>/@parameter0
<org.apache.flink.api.java.typeutils.AvroUtils: org.apache.flink.api.common.typeinfo.TypeInformation createAvroTypeInfo(java.lang.Class)>/@parameter0
<org.apache.flink.api.common.typeutils.LegacySerializerSnapshotTransformer: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot transformLegacySerializerSnapshot(org.apache.flink.api.common.typeutils.TypeSerializerSnapshot)>/@parameter0
<com.esotericsoftware.kryo.ClassResolver: com.esotericsoftware.kryo.Registration getRegistration(java.lang.Class)>/@parameter0
<com.esotericsoftware.kryo.ClassResolver: com.esotericsoftware.kryo.Registration registerImplicit(java.lang.Class)>/@parameter0
<com.esotericsoftware.kryo.ReferenceResolver: int nextReadId(java.lang.Class)>/@parameter0
<com.esotericsoftware.kryo.ReferenceResolver: java.lang.Object getReadObject(java.lang.Class,int)>/@parameter0
<org.apache.flink.core.fs.FileSystem: boolean rename(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.Path)>/@parameter1
<org.apache.flink.api.java.typeutils.AvroUtils: void addAvroSerializersIfRequired(org.apache.flink.api.common.ExecutionConfig,java.lang.Class)>/@parameter1
<com.esotericsoftware.kryo.factories.SerializerFactory: com.esotericsoftware.kryo.Serializer makeSerializer(com.esotericsoftware.kryo.Kryo,java.lang.Class)>/@parameter1
<org.apache.flink.util.AbstractCloseableRegistry: void doRegister(java.io.Closeable,java.util.Map)>/@parameter1
<org.apache.flink.util.AbstractCloseableRegistry: boolean doUnRegister(java.io.Closeable,java.util.Map)>/@parameter1
<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>/@parameter2
<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>/@parameter2
<com.esotericsoftware.kryo.Serializer: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)>/@parameter2
<org.apache.flink.api.common.typeutils.TypeSerializerSnapshot: void readSnapshot(int,org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>/@parameter2
