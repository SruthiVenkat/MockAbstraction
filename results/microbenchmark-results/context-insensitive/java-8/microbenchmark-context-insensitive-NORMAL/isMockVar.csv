<ca.liang.PayRollArrayMockTest: void testAllEmployeesArePaidArrayIntra()>/bankService_intra#_118
<ca.liang.PayRollArrayMockTest: void testAllEmployeesArePaidArrayInter()>/$stack15
<org.mockito.internal.InOrderImpl: java.lang.Object verify(java.lang.Object)>/mock#_0
<org.mockito.internal.InOrderImpl: java.lang.Object verify(java.lang.Object,org.mockito.verification.VerificationMode)>/mock#_0
<org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>/mock#_0
<org.mockito.Mockito: java.lang.Object verify(java.lang.Object,org.mockito.verification.VerificationMode)>/mock#_0
<org.mockito.internal.MockitoCore: java.lang.Object verify(java.lang.Object,org.mockito.verification.VerificationMode)>/mock#_0
<ca.liang.PayRollMockTest: void testSingleEmployeeMockCallout()>/e#_327
<ca.liang.PayRollMockTest: void testEmployeeIsPaid()>/$stack7
<ca.liang.PayRollMockTest: void testEmployeeIsPaid_singleVerify()>/$stack7
<ca.liang.PayRollMockTest: void testInteractionOrder()>/$stack12
<ca.liang.PayRollMockTest: void testInteractionOrder()>/$stack16
<org.mockito.internal.util.MockUtil: boolean isMock(java.lang.Object)>/mock#_0
<org.mockito.internal.util.MockUtil: boolean isMockitoMock(java.lang.Object)>/mock#_0
<ca.liang.PayRollMultipleEmployee2Test: void testAllEmployeesArePaid()>/$stack5
<ca.liang.PayRollAnnotationMockTest: void testEmployeeIsPaid()>/$stack4
<ca.liang.PayRollMultipleEmployeeTest: void testAllEmployeesArePaid1()>/$stack5
<ca.liang.PayRollMultipleEmployeeTest: void testAllEmployeesArePaid2()>/$stack21
<ca.liang.PayRollArrayMockTest: void init()>/$stack18
<ca.liang.PayRollArrayMockTest: void init()>/$stack17
<ca.liang.PayRollArrayMockTest: void testEmployeesPaidIntra()>/bankService_intra#_63
<ca.liang.PayRollArrayMockTest: void testAllEmployeesArePaidArrayIntra()>/employeeDB_intra#_117
<ca.liang.PayRollArrayMockTest: void testAllEmployeesArePaidArrayInter()>/$stack12
<ca.liang.PayRollArrayMockTest: void testAllEmployeesArePaidArrayInter()>/$stack11
<ca.liang.PayRollMockTest: void init()>/$stack14
<ca.liang.PayRollMockTest: void init()>/$stack13
<ca.liang.PayRollMockTest: void testNoEmployeesIntra()>/employeeDB_intra#_107
<ca.liang.PayRollMockTest: void testNoEmployeesIntra()>/bankService_intra#_108
<ca.liang.PayRollMockTest: void testTransitiveCall()>/$stack4
<ca.liang.PayRollArrayNoMockTest: void init()>/$stack14
<ca.liang.PayRollArrayNoMockTest: void init()>/$stack13
<ca.liang.DirtyTest: void init()>/$stack14
<ca.liang.DirtyTest: void init()>/$stack13
<ca.liang.PayRollMultipleEmployee2Test: void init()>/$stack21
<ca.liang.PayRollMultipleEmployee2Test: void init()>/$stack20
<ca.liang.PayRollAnnotationMockTest: void init()>/$stack13
<ca.liang.PayRollAnnotationMockTest: void init()>/$stack12
<ca.liang.PayRollAnnotationMockTest: void testEmployeesPaidIntra()>/$stack14
<ca.liang.PayRollAnnotationMockTest: void testEmployeeIsPaid()>/$stack3
<ca.liang.PayRollAnnotationMockTest: void testEmployeeIsPaid()>/$stack2
<ca.liang.PayRollMultipleEmployeeTest: void init()>/$stack21
<ca.liang.PayRollMultipleEmployeeTest: void init()>/$stack20
<ca.liang.PayRollMultipleEmployeeTest: void testAllEmployeesArePaid2()>/$stack18
<ca.liang.PayRollMultipleEmployeeTest: void testAllEmployeesArePaid2()>/$stack17
<ca.liang.PayRollMockMarginalCollectionsTest: void init()>/e#_59
<ca.liang.PayRollMockMarginalCollectionsTest: void init()>/ee#_92
<ca.liang.PayRollMockMarginalCollectionsTest: void init()>/eee#_99
<ca.liang.PayRollMockMarginalCollectionsTest: void init()>/ee3#_106
<ca.liang.PayRollMockMarginalCollectionsTest: void testFloorCeiling()>/em#_284
<ca.liang.PayRollMockMarginalCollectionsTest: void testHigherLower()>/em#_308
<ca.liang.PayRollMockMarginalCollectionsTest: void testHeadSet()>/em#_331
<ca.liang.PayRollMockMarginalCollectionsTest: void testTailSet()>/em#_355
<ca.liang.PayRollMockMarginalCollectionsTest: void testSubSet()>/em#_379
<ca.liang.PayRollMockTest: void testMockCallInsideLambda()>/employeeDB_intra#_127
<ca.liang.PayRollMockTest: void testAddAll()>/e#_145
<ca.liang.PayRollMockTest: void testIteration()>/e#_171
<ca.liang.PayRollMockTest: void testVector()>/e0#_205
<ca.liang.PayRollMockTest: void testVector2()>/e#_223
<ca.liang.PayRollMockTest: void testVectorToArray()>/e#_254
<ca.liang.PayRollMockTest: void testArrayToVector()>/e#_277
<ca.liang.PayRollMultipleEmployee2Test: void init()>/employee1#_32
<ca.liang.PayRollMultipleEmployee2Test: void init()>/employee2#_33
<ca.liang.PayRollMultipleEmployeeTest: void init()>/employee1#_32
<ca.liang.PayRollMultipleEmployeeTest: void init()>/employee2#_33
<ca.liang.PayRollMultipleEmployeeTest: void testAllEmployeesArePaid2()>/employee1#_77
<ca.liang.PayRollMultipleEmployeeTest: void testAllEmployeesArePaid2()>/employee2#_78
<org.mockito.internal.creation.CglibMockMaker: org.mockito.invocation.MockHandler getHandler(java.lang.Object)>/mock#_0
<org.mockito.internal.creation.CglibMockMaker: org.mockito.invocation.MockHandler getHandler(java.lang.Object)>/factory#_43
<ca.liang.PayRollArrayMockTest: void init()>/$stack1
<ca.liang.PayRollArrayMockTest: void init()>/$stack2
<ca.liang.PayRollArrayMockTest: void init()>/$stack3
<ca.liang.PayRollArrayMockTest: void init()>/$stack4
<ca.liang.PayRollArrayMockTest: void init()>/$stack8
<ca.liang.PayRollArrayMockTest: void init()>/$stack9
<ca.liang.PayRollArrayMockTest: void testEmployeesPaidIntra()>/$stack14
<ca.liang.PayRollArrayMockTest: void testEmployeesPaidIntra()>/$stack7
<ca.liang.PayRollArrayMockTest: void testEmployeesPaidIntra()>/$stack8
<ca.liang.PayRollArrayMockTest: void testEmployeesPaidIntra()>/$stack10
<ca.liang.PayRollArrayMockTest: void testEmployeesPaidIntra()>/$stack11
<ca.liang.PayRollArrayMockTest: void testSingleEmployeeLocalArrayMock()>/$stack7
<ca.liang.PayRollArrayMockTest: void testSingleEmployeeLocalArrayMock()>/e#_97
<ca.liang.PayRollArrayMockTest: void testAllEmployeesArePaidArrayIntra()>/$stack11
<ca.liang.PayRollArrayMockTest: void testAllEmployeesArePaidArrayIntra()>/$stack12
<ca.liang.PayRollArrayMockTest: void testAllEmployeesArePaidArrayIntra()>/$stack21
<ca.liang.PayRollArrayMockTest: void testAllEmployeesArePaidArrayIntra()>/$stack22
<ca.liang.PayRollArrayMockTest: void testAllEmployeesArePaidArrayIntra()>/$stack8
<ca.liang.PayRollArrayMockTest: void testAllEmployeesArePaidArrayIntra()>/employee1#_112
<ca.liang.PayRollArrayMockTest: void testAllEmployeesArePaidArrayIntra()>/$stack9
<ca.liang.PayRollArrayMockTest: void testAllEmployeesArePaidArrayIntra()>/employee2#_113
<ca.liang.PayRollArrayMockTest: void testAllEmployeesArePaidArrayInter()>/$stack17
<ca.liang.PayRollArrayMockTest: void testAllEmployeesArePaidArrayInter()>/$stack18
<ca.liang.PayRollMockMarginalCollectionsTest: void init()>/$stack13
<ca.liang.PayRollMockMarginalCollectionsTest: void init()>/$stack63
<ca.liang.PayRollMockMarginalCollectionsTest: void init()>/$stack70
<ca.liang.PayRollMockMarginalCollectionsTest: void init()>/$stack77
<ca.liang.PayRollMockMarginalCollectionsTest: void init()>/$stack84
<ca.liang.PayRollMockMarginalCollectionsTest: void init()>/ee4#_113
<ca.liang.PayRollMockMarginalCollectionsTest: void test0()>/$stack3
<ca.liang.PayRollMockMarginalCollectionsTest: void test0()>/e#_125
<ca.liang.PayRollMockMarginalCollectionsTest: void test1()>/$stack3
<ca.liang.PayRollMockMarginalCollectionsTest: void test1()>/e#_133
<ca.liang.PayRollMockMarginalCollectionsTest: void test2()>/$stack3
<ca.liang.PayRollMockMarginalCollectionsTest: void test2()>/e#_141
<ca.liang.PayRollMockMarginalCollectionsTest: void test3()>/$stack3
<ca.liang.PayRollMockMarginalCollectionsTest: void test3()>/e#_149
<ca.liang.PayRollMockMarginalCollectionsTest: void test4()>/$stack3
<ca.liang.PayRollMockMarginalCollectionsTest: void test4()>/e#_157
<ca.liang.PayRollMockMarginalCollectionsTest: void test5()>/$stack3
<ca.liang.PayRollMockMarginalCollectionsTest: void test5()>/e#_165
<ca.liang.PayRollMockMarginalCollectionsTest: void test6()>/$stack3
<ca.liang.PayRollMockMarginalCollectionsTest: void test6()>/e#_173
<ca.liang.PayRollMockMarginalCollectionsTest: void testPQ1()>/$stack3
<ca.liang.PayRollMockMarginalCollectionsTest: void testPQ1()>/e#_181
<ca.liang.PayRollMockMarginalCollectionsTest: void testPQ2()>/$stack3
<ca.liang.PayRollMockMarginalCollectionsTest: void testPQ2()>/e#_189
<ca.liang.PayRollMockMarginalCollectionsTest: void testPQ3()>/$stack3
<ca.liang.PayRollMockMarginalCollectionsTest: void testPQ3()>/e#_197
<ca.liang.PayRollMockMarginalCollectionsTest: void testPQ4()>/$stack3
<ca.liang.PayRollMockMarginalCollectionsTest: void testPQ4()>/e#_205
<ca.liang.PayRollMockMarginalCollectionsTest: void testTS()>/$stack3
<ca.liang.PayRollMockMarginalCollectionsTest: void testTS()>/e#_213
<ca.liang.PayRollMockMarginalCollectionsTest: void testTS1()>/$stack3
<ca.liang.PayRollMockMarginalCollectionsTest: void testTS1()>/e#_221
<ca.liang.PayRollMockMarginalCollectionsTest: void testDQ()>/$stack11
<ca.liang.PayRollMockMarginalCollectionsTest: void testDQ()>/e2#_229
<ca.liang.PayRollMockMarginalCollectionsTest: void testDQ()>/$stack14
<ca.liang.PayRollMockMarginalCollectionsTest: void testDQ()>/e3#_233
<ca.liang.PayRollMockMarginalCollectionsTest: void testDQ()>/$stack17
<ca.liang.PayRollMockMarginalCollectionsTest: void testDQ()>/e4#_237
<ca.liang.PayRollMockMarginalCollectionsTest: void testDQ()>/$stack20
<ca.liang.PayRollMockMarginalCollectionsTest: void testDQ()>/e5#_241
<ca.liang.PayRollMockMarginalCollectionsTest: void testDQ()>/$stack23
<ca.liang.PayRollMockMarginalCollectionsTest: void testDQ()>/ee3#_245
<ca.liang.PayRollMockMarginalCollectionsTest: void testDQ()>/$stack26
<ca.liang.PayRollMockMarginalCollectionsTest: void testDQ()>/e#_249
<ca.liang.PayRollMockMarginalCollectionsTest: void testDQ()>/$stack29
<ca.liang.PayRollMockMarginalCollectionsTest: void testDQ()>/e1#_253
<ca.liang.PayRollMockMarginalCollectionsTest: void testDQ()>/$stack32
<ca.liang.PayRollMockMarginalCollectionsTest: void testDQ()>/ee4#_257
<ca.liang.PayRollMockMarginalCollectionsTest: void testDQ()>/$stack35
<ca.liang.PayRollMockMarginalCollectionsTest: void testDQ()>/ee5#_261
<ca.liang.PayRollMockMarginalCollectionsTest: void testDescendingSet()>/$stack5
<ca.liang.PayRollMockMarginalCollectionsTest: void testDescendingSet()>/e#_271
<ca.liang.PayRollMockMarginalCollectionsTest: void testFloorCeiling()>/$stack10
<ca.liang.PayRollMockMarginalCollectionsTest: void testFloorCeiling()>/$stack27
<ca.liang.PayRollMockMarginalCollectionsTest: void testFloorCeiling()>/e2#_291
<ca.liang.PayRollMockMarginalCollectionsTest: void testFloorCeiling()>/$stack29
<ca.liang.PayRollMockMarginalCollectionsTest: void testFloorCeiling()>/e3#_295
<ca.liang.PayRollMockMarginalCollectionsTest: void testHigherLower()>/$stack10
<ca.liang.PayRollMockMarginalCollectionsTest: void testHigherLower()>/$stack20
<ca.liang.PayRollMockMarginalCollectionsTest: void testHigherLower()>/e2#_314
<ca.liang.PayRollMockMarginalCollectionsTest: void testHigherLower()>/$stack22
<ca.liang.PayRollMockMarginalCollectionsTest: void testHigherLower()>/e3#_318
<ca.liang.PayRollMockMarginalCollectionsTest: void testHeadSet()>/$stack10
<ca.liang.PayRollMockMarginalCollectionsTest: void testHeadSet()>/$stack22
<ca.liang.PayRollMockMarginalCollectionsTest: void testHeadSet()>/$stack23
<ca.liang.PayRollMockMarginalCollectionsTest: void testHeadSet()>/$stack26
<ca.liang.PayRollMockMarginalCollectionsTest: void testHeadSet()>/$stack27
<ca.liang.PayRollMockMarginalCollectionsTest: void testTailSet()>/$stack10
<ca.liang.PayRollMockMarginalCollectionsTest: void testTailSet()>/$stack22
<ca.liang.PayRollMockMarginalCollectionsTest: void testTailSet()>/$stack23
<ca.liang.PayRollMockMarginalCollectionsTest: void testTailSet()>/$stack26
<ca.liang.PayRollMockMarginalCollectionsTest: void testTailSet()>/$stack27
<ca.liang.PayRollMockMarginalCollectionsTest: void testSubSet()>/$stack10
<ca.liang.PayRollMockMarginalCollectionsTest: void testSubSet()>/$stack23
<ca.liang.PayRollMockMarginalCollectionsTest: void testSubSet()>/$stack24
<ca.liang.PayRollMockMarginalCollectionsTest: void testSubSet()>/$stack27
<ca.liang.PayRollMockMarginalCollectionsTest: void testSubSet()>/$stack28
<ca.liang.PayRollMockTest: void init()>/$stack3
<ca.liang.PayRollMockTest: void init()>/$stack4
<ca.liang.PayRollMockTest: void init()>/$stack5
<ca.liang.PayRollMockTest: void init()>/$stack6
<ca.liang.PayRollMockTest: void testNoEmployeesIntra()>/$stack8
<ca.liang.PayRollMockTest: void testNoEmployeesIntra()>/$stack9
<ca.liang.PayRollMockTest: void testMockCallInsideLambda()>/$stack5
<ca.liang.PayRollMockTest: void testAddAll()>/$stack9
<ca.liang.PayRollMockTest: void testAddAll()>/$stack16
<ca.liang.PayRollMockTest: void testAddAll()>/e1#_154
<ca.liang.PayRollMockTest: void testAddAll()>/$stack18
<ca.liang.PayRollMockTest: void testAddAll()>/e2#_158
<ca.liang.PayRollMockTest: void testIteration()>/$stack9
<ca.liang.PayRollMockTest: void testIteration()>/$stack23
<ca.liang.PayRollMockTest: void testIteration()>/ee_$$A_5#_193
<ca.liang.PayRollMockTest: void testIteration()>/$stack26
<ca.liang.PayRollMockTest: void testIteration()>/ee_$$A_3#_185
<ca.liang.PayRollMockTest: void testIteration()>/$stack29
<ca.liang.PayRollMockTest: void testIteration()>/ee_$$A_1_$$A_1#_179
<ca.liang.PayRollMockTest: void testVector()>/$stack8
<ca.liang.PayRollMockTest: void testVector()>/$stack17
<ca.liang.PayRollMockTest: void testVector()>/ee#_212
<ca.liang.PayRollMockTest: void testVector2()>/$stack9
<ca.liang.PayRollMockTest: void testVector2()>/$stack18
<ca.liang.PayRollMockTest: void testVector2()>/ee_$$A_2#_238
<ca.liang.PayRollMockTest: void testVector2()>/$stack20
<ca.liang.PayRollMockTest: void testVector2()>/ef#_241
<ca.liang.PayRollMockTest: void testVector2()>/$stack22
<ca.liang.PayRollMockTest: void testVector2()>/eg#_244
<ca.liang.PayRollMockTest: void testVector2()>/$stack24
<ca.liang.PayRollMockTest: void testVector2()>/ee_$$A_1#_234
<ca.liang.PayRollMockTest: void testVectorToArray()>/$stack8
<ca.liang.PayRollMockTest: void testVectorToArray()>/$stack14
<ca.liang.PayRollMockTest: void testVectorToArray()>/ef#_262
<ca.liang.PayRollMockTest: void testArrayToVector()>/$stack6
<ca.liang.PayRollMockTest: void testTransitiveCall()>/$stack3
<ca.liang.PayRollMockTest: void testEmployeeIsPaid()>/$stack9
<ca.liang.PayRollMockTest: void testEmployeeIsPaid()>/$stack10
<ca.liang.PayRollMockTest: void testEmployeeIsPaid_singleVerify()>/$stack8
<ca.liang.PayRollMockTest: void testEmployeeIsPaid_singleVerify()>/$stack9
<ca.liang.PayRollMockTest: void testInteractionOrder()>/$stack13
<ca.liang.PayRollMockTest: void testInteractionOrder()>/$stack14
<ca.liang.PayRollMockTest: void testInteractionOrder()>/$stack17
<ca.liang.PayRollMockTest: void testInteractionOrder()>/$stack18
<ca.liang.PayRollArrayNoMockTest: void init()>/$stack2
<ca.liang.PayRollArrayNoMockTest: void init()>/$stack3
<ca.liang.PayRollArrayNoMockTest: void init()>/$stack4
<ca.liang.PayRollArrayNoMockTest: void init()>/$stack5
<ca.liang.DirtyTest: void init()>/$stack2
<ca.liang.DirtyTest: void init()>/$stack3
<ca.liang.DirtyTest: void init()>/$stack4
<ca.liang.DirtyTest: void init()>/$stack5
<ca.liang.PayRollMultipleEmployee2Test: void init()>/$stack10
<ca.liang.PayRollMultipleEmployee2Test: void init()>/$stack11
<ca.liang.PayRollMultipleEmployee2Test: void init()>/$stack12
<ca.liang.PayRollMultipleEmployee2Test: void init()>/$stack13
<ca.liang.PayRollMultipleEmployee2Test: void init()>/$stack6
<ca.liang.PayRollMultipleEmployee2Test: void init()>/$stack7
<ca.liang.PayRollMultipleEmployee2Test: void testAllEmployeesArePaid()>/$stack7
<ca.liang.PayRollMultipleEmployee2Test: void testAllEmployeesArePaid()>/$stack8
<ca.liang.PayRollMultipleEmployee2Test: void testAllEmployeesArePaid()>/$stack15
<ca.liang.PayRollMultipleEmployee2Test: void testAllEmployeesArePaid()>/$stack16
<ca.liang.PayRollMultipleEmployee2Test: void testAllEmployeesArePaid()>/$stack21
<ca.liang.PayRollMultipleEmployee2Test: void testAllEmployeesArePaid()>/$stack22
<ca.liang.PayRollMultipleEmployee2Test: void testAllEmployeesArePaid()>/$stack27
<ca.liang.PayRollMultipleEmployee2Test: void testAllEmployeesArePaid()>/$stack28
<ca.liang.PayRollMultipleEmployee2Test: void testAllEmployeesArePaid()>/$stack37
<ca.liang.PayRollMultipleEmployee2Test: void testAllEmployeesArePaid()>/$stack38
<ca.liang.PayRollAnnotationMockTest: void testEmployeesPaidIntra()>/$stack6
<ca.liang.PayRollAnnotationMockTest: void testEmployeesPaidIntra()>/$stack7
<ca.liang.PayRollAnnotationMockTest: void testEmployeesPaidIntra()>/$stack9
<ca.liang.PayRollAnnotationMockTest: void testEmployeesPaidIntra()>/$stack10
<ca.liang.PayRollAnnotationMockTest: void testEmployeeIsPaid()>/$stack6
<ca.liang.PayRollAnnotationMockTest: void testEmployeeIsPaid()>/$stack7
<ca.liang.PayRollMultipleEmployeeTest: void init()>/$stack10
<ca.liang.PayRollMultipleEmployeeTest: void init()>/$stack11
<ca.liang.PayRollMultipleEmployeeTest: void init()>/$stack12
<ca.liang.PayRollMultipleEmployeeTest: void init()>/$stack13
<ca.liang.PayRollMultipleEmployeeTest: void init()>/$stack6
<ca.liang.PayRollMultipleEmployeeTest: void init()>/$stack7
<ca.liang.PayRollMultipleEmployeeTest: void testAllEmployeesArePaid1()>/$stack7
<ca.liang.PayRollMultipleEmployeeTest: void testAllEmployeesArePaid1()>/$stack8
<ca.liang.PayRollMultipleEmployeeTest: void testAllEmployeesArePaid1()>/$stack15
<ca.liang.PayRollMultipleEmployeeTest: void testAllEmployeesArePaid1()>/$stack16
<ca.liang.PayRollMultipleEmployeeTest: void testAllEmployeesArePaid1()>/$stack21
<ca.liang.PayRollMultipleEmployeeTest: void testAllEmployeesArePaid1()>/$stack22
<ca.liang.PayRollMultipleEmployeeTest: void testAllEmployeesArePaid1()>/$stack27
<ca.liang.PayRollMultipleEmployeeTest: void testAllEmployeesArePaid1()>/$stack28
<ca.liang.PayRollMultipleEmployeeTest: void testAllEmployeesArePaid1()>/$stack37
<ca.liang.PayRollMultipleEmployeeTest: void testAllEmployeesArePaid1()>/$stack38
<ca.liang.PayRollMultipleEmployeeTest: void testAllEmployeesArePaid2()>/$stack23
<ca.liang.PayRollMultipleEmployeeTest: void testAllEmployeesArePaid2()>/$stack24
<ca.liang.PayRollMultipleEmployeeTest: void testAllEmployeesArePaid2()>/$stack7
<ca.liang.PayRollMultipleEmployeeTest: void testAllEmployeesArePaid2()>/$stack8
<ca.liang.PayRollMultipleEmployeeTest: void testAllEmployeesArePaid2()>/$stack31
<ca.liang.PayRollMultipleEmployeeTest: void testAllEmployeesArePaid2()>/$stack32
<ca.liang.PayRollMultipleEmployeeTest: void testAllEmployeesArePaid2()>/$stack37
<ca.liang.PayRollMultipleEmployeeTest: void testAllEmployeesArePaid2()>/$stack38
<ca.liang.PayRollMultipleEmployeeTest: void testAllEmployeesArePaid2()>/$stack43
<ca.liang.PayRollMultipleEmployeeTest: void testAllEmployeesArePaid2()>/$stack44
<ca.liang.PayRollMultipleEmployeeTest: void testAllEmployeesArePaid2()>/$stack53
<ca.liang.PayRollMultipleEmployeeTest: void testAllEmployeesArePaid2()>/$stack54
<ca.liang.PayRollArrayMockTest: ca.liang.Employee[] createEmployees()>/$stack3
<ca.liang.PayRollArrayMockTest: ca.liang.Employee[] createEmployees()>/employee1#_185
<ca.liang.PayRollArrayMockTest: ca.liang.Employee[] createEmployees()>/$stack4
<ca.liang.PayRollArrayMockTest: ca.liang.Employee[] createEmployees()>/employee2#_186
<ca.liang.PayRollMockTest: ca.liang.Employee createMockEmployee()>/$stack2
<ca.liang.PayRollMockTest: ca.liang.Employee createMockEmployee()>/e#_409
<org.mockito.internal.InOrderImpl: java.lang.Object verify(java.lang.Object)>/@parameter0
<org.mockito.internal.InOrderImpl: java.lang.Object verify(java.lang.Object,org.mockito.verification.VerificationMode)>/@parameter0
<org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>/@parameter0
<org.mockito.Mockito: java.lang.Object verify(java.lang.Object,org.mockito.verification.VerificationMode)>/@parameter0
<ca.liang.EmployeeDB: void <init>(java.util.List)>/@parameter0
<ca.liang.EmployeeDB: void <init>(java.util.List)>/employees#_0
<org.mockito.internal.MockitoCore: java.lang.Object verify(java.lang.Object,org.mockito.verification.VerificationMode)>/@parameter0
<ca.liang.PayRollMockTest: ca.liang.Employee invokedWithMockParameter(ca.liang.Employee)>/@parameter0
<ca.liang.PayRollMockTest: ca.liang.Employee invokedWithMockParameter(ca.liang.Employee)>/e#_0
<ca.liang.PayRollMockTest: void lambda$testMockCallInsideLambda$0(java.util.List,ca.liang.EmployeeDB)>/@parameter1
<ca.liang.PayRollMockTest: void lambda$testMockCallInsideLambda$0(java.util.List,ca.liang.EmployeeDB)>/e#_0
<org.mockito.internal.util.MockUtil: boolean isMock(java.lang.Object)>/@parameter0
<org.mockito.internal.util.MockUtil: boolean isMockitoMock(java.lang.Object)>/@parameter0
<org.mockito.internal.verification.MockAwareVerificationMode: void <init>(java.lang.Object,org.mockito.verification.VerificationMode)>/@parameter0
<org.mockito.internal.verification.MockAwareVerificationMode: void <init>(java.lang.Object,org.mockito.verification.VerificationMode)>/mock#_0
<org.mockito.internal.creation.CglibMockMaker: org.mockito.invocation.MockHandler getHandler(java.lang.Object)>/@parameter0
<ca.liang.PayRoll: void <init>(ca.liang.EmployeeDB,ca.liang.BankService)>/@parameter0
<ca.liang.PayRoll: void <init>(ca.liang.EmployeeDB,ca.liang.BankService)>/employees#_0
<ca.liang.PayRoll: void <init>(ca.liang.EmployeeDB,ca.liang.BankService)>/@parameter1
<ca.liang.PayRoll: void <init>(ca.liang.EmployeeDB,ca.liang.BankService)>/bankService#_0
<ca.liang.PayRoll: void <init>(ca.liang.Employee[],ca.liang.BankService)>/@parameter1
<ca.liang.PayRoll: void <init>(ca.liang.Employee[],ca.liang.BankService)>/bankService#_0
<ca.liang.PayRollMockTest: void testMerge()>/m#_53
<ca.liang.PayRollMockTest: void testMerge()>/m_$$A_2#_57
<ca.liang.PayRollMockTest: void testMerge2()>/m_$$A_2#_71
<ca.liang.PayRollMockTest: void testMerge2()>/m_$$A_1#_70
<ca.liang.PayRollMockTest: void testIteration()>/ee#_180
<ca.liang.PayRollMockTest: void testIteration()>/ee_$$A_2#_186
<ca.liang.PayRollMockTest: void testIteration()>/ee_$$A_4#_192
<ca.liang.PayRollMockTest: void testVector2()>/ee#_233
<org.mockito.internal.InOrderImpl: java.lang.Object verify(java.lang.Object)>/$stack3
<org.mockito.internal.InOrderImpl: java.lang.Object verify(java.lang.Object,org.mockito.verification.VerificationMode)>/$stack9
<org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>/$stack3
<org.mockito.Mockito: java.lang.Object verify(java.lang.Object,org.mockito.verification.VerificationMode)>/$stack3
<ca.liang.PayRollMockTest: void testMerge3()>/m#_87
<ca.liang.PayRollMockTest: void testSingleEmployeeMockInter()>/e#_317
<ca.liang.PayRollMockTest: void testSingleEmployeeMockCallout()>/ee#_328
<ca.liang.PayRoll: int monthlyPayment()>/employeeList#_27
<ca.liang.PayRollArrayMockTest: void testSingleEmployeeFieldArrayMock()>/ee#_80
<ca.liang.PayRollArrayMockTest: void testSingleEmployeeLocalArrayMock()>/ee#_102
<ca.liang.PayRollArrayMockTest: void testAllEmployeesArePaidArrayIntra()>/$stack28
<ca.liang.PayRollArrayMockTest: void testAllEmployeesArePaidArrayIntra()>/$stack32
<ca.liang.PayRollArrayMockTest: void testAllEmployeesArePaidArrayIntra()>/$stack36
<ca.liang.PayRollArrayMockTest: void testAllEmployeesArePaidArrayIntra()>/$stack44
<ca.liang.PayRollArrayMockTest: void testAllEmployeesArePaidArrayInter()>/$stack24
<ca.liang.PayRollArrayMockTest: void testAllEmployeesArePaidArrayInter()>/$stack28
<ca.liang.PayRollArrayMockTest: void testAllEmployeesArePaidArrayInter()>/$stack32
<ca.liang.PayRollArrayMockTest: void testAllEmployeesArePaidArrayInter()>/$stack40
<ca.liang.PayRollMockTest: void testVectorToArray()>/eg#_267
<ca.liang.PayRollMockTest: void testArrayToVector()>/ef#_287
<ca.liang.PayRollArrayMockTest: void init()>/$stack10
<ca.liang.PayRollArrayMockTest: void testAllEmployeesArePaidArrayInter()>/$stack5
<ca.liang.EmployeeDB: java.util.List getAllEmployees()>/$stack1
<ca.liang.EmployeeDB: int getEmployeeCount()>/$stack1
<ca.liang.PayRollMockTest: void init()>/$stack7
<ca.liang.PayRollMockTest: void testInteractionOrder()>/$stack9
<ca.liang.PayRollMockTest: void testInteractionOrder()>/$stack10
<org.mockito.internal.verification.MockAwareVerificationMode: java.lang.Object getMock()>/$stack1
<ca.liang.PayRollArrayNoMockTest: void init()>/$stack6
<ca.liang.DirtyTest: void init()>/$stack6
<ca.liang.PayRoll: int monthlyPayment()>/$stack4
<ca.liang.PayRoll: int monthlyPayment()>/$stack10
<ca.liang.PayRollMultipleEmployee2Test: void init()>/$stack14
<ca.liang.PayRollAnnotationMockTest: void init()>/$stack5
<ca.liang.PayRollAnnotationMockTest: void testBankService()>/$stack1
<ca.liang.PayRollMultipleEmployeeTest: void init()>/$stack14
<ca.liang.PayRollMultipleEmployeeTest: void testAllEmployeesArePaid2()>/$stack11
