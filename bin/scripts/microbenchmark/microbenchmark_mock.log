/home/daveroar/Graduation_Studies/ThesisWork/JRefactoring/MockAbstraction
:/home/daveroar/Graduation_Studies/ThesisWork/JRefactoring/MockAbstraction/Benchmarks/microbenchmark/mvn_dependencies/hamcrest-core-1.3.jar:/home/daveroar/Graduation_Studies/ThesisWork/JRefactoring/MockAbstraction/Benchmarks/microbenchmark/mvn_dependencies/junit-4.12.jar:/home/daveroar/Graduation_Studies/ThesisWork/JRefactoring/MockAbstraction/Benchmarks/microbenchmark/mvn_dependencies/mockito-all-1.9.5.jar
it is a maven project
[[1;34mINFO[m] Scanning for projects...
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m-----------------------< [0;36mca.liang:payroll-test[0;1m >------------------------[m
[[1;34mINFO[m] [1mBuilding payroll-test 0.0.1-SNAPSHOT[m
[[1;34mINFO[m] [1m--------------------------------[ jar ]---------------------------------[m
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-clean-plugin:2.5:clean[m [1m(default-clean)[m @ [36mpayroll-test[0;1m ---[m
[[1;34mINFO[m] Deleting /home/daveroar/Graduation_Studies/ThesisWork/JRefactoring/MockAbstraction/Benchmarks/microbenchmark/target
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-resources-plugin:2.6:resources[m [1m(default-resources)[m @ [36mpayroll-test[0;1m ---[m
[[1;33mWARNING[m] Using platform encoding (UTF-8 actually) to copy filtered resources, i.e. build is platform dependent!
[[1;34mINFO[m] skip non existing resourceDirectory /home/daveroar/Graduation_Studies/ThesisWork/JRefactoring/MockAbstraction/Benchmarks/microbenchmark/src/main/resources
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-compiler-plugin:3.1:compile[m [1m(default-compile)[m @ [36mpayroll-test[0;1m ---[m
[[1;34mINFO[m] Changes detected - recompiling the module!
[[1;33mWARNING[m] File encoding has not been set, using platform encoding UTF-8, i.e. build is platform dependent!
[[1;34mINFO[m] Compiling 4 source files to /home/daveroar/Graduation_Studies/ThesisWork/JRefactoring/MockAbstraction/Benchmarks/microbenchmark/target/classes
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-resources-plugin:2.6:testResources[m [1m(default-testResources)[m @ [36mpayroll-test[0;1m ---[m
[[1;33mWARNING[m] Using platform encoding (UTF-8 actually) to copy filtered resources, i.e. build is platform dependent!
[[1;34mINFO[m] skip non existing resourceDirectory /home/daveroar/Graduation_Studies/ThesisWork/JRefactoring/MockAbstraction/Benchmarks/microbenchmark/src/test/resources
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-compiler-plugin:3.1:testCompile[m [1m(default-testCompile)[m @ [36mpayroll-test[0;1m ---[m
[[1;34mINFO[m] Changes detected - recompiling the module!
[[1;33mWARNING[m] File encoding has not been set, using platform encoding UTF-8, i.e. build is platform dependent!
[[1;34mINFO[m] Compiling 4 source files to /home/daveroar/Graduation_Studies/ThesisWork/JRefactoring/MockAbstraction/Benchmarks/microbenchmark/target/test-classes
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-surefire-plugin:2.12.4:test[m [1m(default-test)[m @ [36mpayroll-test[0;1m ---[m
[[1;34mINFO[m] Surefire report directory: /home/daveroar/Graduation_Studies/ThesisWork/JRefactoring/MockAbstraction/Benchmarks/microbenchmark/target/surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running ca.liang.PayRollArrayMockTest
Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.137 sec
Running ca.liang.PayRollMockTest
Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec
Running ca.liang.PayRollAnnotationMockTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.011 sec

Results :

Tests run: 19, Failures: 0, Errors: 0, Skipped: 0

[[1;34mINFO[m] [1m------------------------------------------------------------------------[m
[[1;34mINFO[m] [1;32mBUILD SUCCESS[m
[[1;34mINFO[m] [1m------------------------------------------------------------------------[m
[[1;34mINFO[m] Total time:  1.720 s
[[1;34mINFO[m] Finished at: 2021-04-23T23:59:07-04:00
[[1;34mINFO[m] [1m------------------------------------------------------------------------[m
args[0]: ca.liang.RootDriver
args[1]: /home/daveroar/Graduation_Studies/ThesisWork/JRefactoring/MockAbstraction/Benchmarks/microbenchmark/target/classes
args[2]: /home/daveroar/Graduation_Studies/ThesisWork/JRefactoring/MockAbstraction/Benchmarks/microbenchmark/target/test-classes
args[3]: target/classes:target/test-classes::/home/daveroar/Graduation_Studies/ThesisWork/JRefactoring/MockAbstraction/Benchmarks/microbenchmark/mvn_dependencies/hamcrest-core-1.3.jar:/home/daveroar/Graduation_Studies/ThesisWork/JRefactoring/MockAbstraction/Benchmarks/microbenchmark/mvn_dependencies/junit-4.12.jar:/home/daveroar/Graduation_Studies/ThesisWork/JRefactoring/MockAbstraction/Benchmarks/microbenchmark/mvn_dependencies/mockito-all-1.9.5.jar
args[4]: microbenchmark
args[5]: /home/daveroar/Graduation_Studies/ThesisWork/JRefactoring/MockAbstraction/analysis_output/MockAnalysis
Soot started on Fri Apr 23 23:59:07 EDT 2021
Annotated Mock found: ca.liang.EmployeeDB employeeDB
<ca.liang.PayRollAnnotationMockTest: ca.liang.EmployeeDB employeeDB>
Annotated Mock found: ca.liang.BankService bankService
<ca.liang.PayRollAnnotationMockTest: ca.liang.BankService bankService>
Number of methods to be analyzed: 46
Statement: interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2)
InnerBox value: $r1
SootClass Type: java.util.List
Statement: interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r3)
InnerBox value: $r2
SootClass Type: java.util.List
Statement: interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r2)
InnerBox value: r1
SootClass Type: java.util.ArrayList
Statement: interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r3)
InnerBox value: r1
SootClass Type: java.util.ArrayList
Statement: virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r2)
InnerBox value: r1
SootClass Type: java.util.ArrayList
Statement: virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r3)
InnerBox value: r1
SootClass Type: java.util.ArrayList
Statement: interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r4)
InnerBox value: $r3
SootClass Type: java.util.List
 ====================================== 
** CLASS ca.liang.BankService
	method <init> : 
	method makePayment : 
 ====================================== 
** CLASS ca.liang.RootDriver
	method <init> : 
	method main : 
 ====================================== 
** CLASS ca.liang.PayRollAnnotationMockTest
	method <init> : 
	method init : 
Unit: specialinvoke $r1.<ca.liang.PayRoll: void <init>(ca.liang.EmployeeDB,ca.liang.BankService)>($r3, $r2)
Unit: $r1 = new ca.liang.PayRoll
Unit: r0 := @this: ca.liang.PayRollAnnotationMockTest
Unit: $r3 = r0.<ca.liang.PayRollAnnotationMockTest: ca.liang.EmployeeDB employeeDB>
Local: $r3
Possibly Mock: true

Unit: $r2 = r0.<ca.liang.PayRollAnnotationMockTest: ca.liang.BankService bankService>
Local: $r2
Possibly Mock: true

Unit: r0.<ca.liang.PayRollAnnotationMockTest: ca.liang.PayRoll payRoll> = $r1
Unit: staticinvoke <org.mockito.MockitoAnnotations: void initMocks(java.lang.Object)>(r0)
Unit: return
	method testNoEmployees : 
Unit: r0 := @this: ca.liang.PayRollAnnotationMockTest
Unit: return
Unit: specialinvoke r0.<ca.liang.PayRollAnnotationMockTest: void assertNumberOfPayments(int)>(0)
	method testEmployeesPaidIntra : 
Unit: $r9 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1)
Unit: r1[0] = $r5
Unit: r0 := @this: ca.liang.PayRollAnnotationMockTest
Unit: i0 = virtualinvoke r3.<ca.liang.PayRoll: int monthlyPayment()>()
Unit: $r8 = new ca.liang.EmployeeDB
Unit: $r5 = (ca.liang.Employee) $r4
Local: $r5
Possibly Mock: true

Unit: staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l1)
Unit: specialinvoke $r8.<ca.liang.EmployeeDB: void <init>(java.util.List)>($r9)
Unit: $l1 = (long) i0
Unit: $r7 = (ca.liang.Employee) $r6
Local: $r7
Possibly Mock: true

Unit: $r10 = new ca.liang.PayRoll
Unit: $r11 = r0.<ca.liang.PayRollAnnotationMockTest: ca.liang.BankService bankService>
Local: $r11
Possibly Mock: true

Unit: specialinvoke $r10.<ca.liang.PayRoll: void <init>(ca.liang.Employee[],ca.liang.BankService)>(r1, $r11)
Unit: $r6 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/Employee;")
Local: $r6
Possibly Mock: true

Unit: r1[1] = $r7
Unit: return
Unit: r1 = newarray (ca.liang.Employee)[2]
Unit: $r4 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/Employee;")
Local: $r4
Possibly Mock: true

Unit: r2 = $r8
Unit: r3 = $r10
	method testSingleEmployee : 
Unit: $r8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r7)
Unit: $r6 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r5)
Unit: $r10 = new ca.liang.PayRoll
Unit: r0 := @this: ca.liang.PayRollAnnotationMockTest
Unit: $r5 = virtualinvoke $r4.<ca.liang.EmployeeDB: java.util.List getAllEmployees()>()
Unit: $r1 = newarray (ca.liang.Employee)[1]
Unit: interfaceinvoke $r6.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r8)
Unit: $r11 = r0.<ca.liang.PayRollAnnotationMockTest: ca.liang.BankService bankService>
Local: $r11
Possibly Mock: true

Unit: $r4 = r0.<ca.liang.PayRollAnnotationMockTest: ca.liang.EmployeeDB employeeDB>
Local: $r4
Possibly Mock: true

Unit: $r2 = r0.<ca.liang.PayRollAnnotationMockTest: ca.liang.Employee[] employees>
Unit: $r12 = r0.<ca.liang.PayRollAnnotationMockTest: ca.liang.EmployeeDB employeeDB>
Local: $r12
Possibly Mock: true

Unit: r0.<ca.liang.PayRollAnnotationMockTest: ca.liang.PayRoll payRoll> = $r10
Unit: return
Unit: $r3 = specialinvoke r0.<ca.liang.PayRollAnnotationMockTest: ca.liang.Employee createTestEmployee(java.lang.String,java.lang.String,int)>("Test Employee", "ID0", 1000)
Unit: r0.<ca.liang.PayRollAnnotationMockTest: ca.liang.Employee[] employees> = $r1
Unit: $r7 = r0.<ca.liang.PayRollAnnotationMockTest: ca.liang.Employee[] employees>
Unit: specialinvoke r0.<ca.liang.PayRollAnnotationMockTest: void assertNumberOfPayments(int)>(1)
Unit: specialinvoke $r10.<ca.liang.PayRoll: void <init>(ca.liang.EmployeeDB,ca.liang.BankService)>($r12, $r11)
Unit: $r2[0] = $r3
	method testEmployeeIsPaid : 
Unit: return
Unit: $r2 = newarray (ca.liang.Employee)[1]
Unit: specialinvoke $r11.<ca.liang.PayRoll: void <init>(ca.liang.EmployeeDB,ca.liang.BankService)>($r13, $r12)
Unit: r0 := @this: ca.liang.PayRollAnnotationMockTest
Unit: $r12 = r0.<ca.liang.PayRollAnnotationMockTest: ca.liang.BankService bankService>
Local: $r12
Possibly Mock: true

Unit: $r7 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r6)
Unit: $r9 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r8)
Unit: r1 = "ID0"
Unit: virtualinvoke $r17.<ca.liang.BankService: void makePayment(java.lang.String,int)>(r1, s0)
Unit: $r3 = r0.<ca.liang.PayRollAnnotationMockTest: ca.liang.Employee[] employees>
Unit: $r3[0] = $r4
Unit: $r15 = staticinvoke <org.mockito.Mockito: org.mockito.verification.VerificationMode times(int)>(1)
Unit: $r17 = (ca.liang.BankService) $r16
Local: $r17
Possibly Mock: true

Unit: $r11 = new ca.liang.PayRoll
Unit: interfaceinvoke $r7.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r9)
Unit: $r14 = r0.<ca.liang.PayRollAnnotationMockTest: ca.liang.BankService bankService>
Local: $r14
Possibly Mock: true

Unit: $r6 = virtualinvoke $r5.<ca.liang.EmployeeDB: java.util.List getAllEmployees()>()
Unit: specialinvoke r0.<ca.liang.PayRollAnnotationMockTest: void assertNumberOfPayments(int)>(1)
Unit: $r8 = r0.<ca.liang.PayRollAnnotationMockTest: ca.liang.Employee[] employees>
Unit: s0 = 1000
Unit: $r13 = r0.<ca.liang.PayRollAnnotationMockTest: ca.liang.EmployeeDB employeeDB>
Local: $r13
Possibly Mock: true

Unit: r0.<ca.liang.PayRollAnnotationMockTest: ca.liang.Employee[] employees> = $r2
Unit: $r4 = specialinvoke r0.<ca.liang.PayRollAnnotationMockTest: ca.liang.Employee createTestEmployee(java.lang.String,java.lang.String,int)>("Test Employee", r1, s0)
Unit: $r5 = r0.<ca.liang.PayRollAnnotationMockTest: ca.liang.EmployeeDB employeeDB>
Local: $r5
Possibly Mock: true

Unit: $r16 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object,org.mockito.verification.VerificationMode)>($r14, $r15)
Local: $r16
Possibly Mock: true

Unit: r0.<ca.liang.PayRollAnnotationMockTest: ca.liang.PayRoll payRoll> = $r11
	method assertNumberOfPayments : 
	method createTestEmployee : 
 ====================================== 
** CLASS ca.liang.PayRoll
	method <init> : 
	method <init> : 
	method monthlyPayment : 
 ====================================== 
** CLASS ca.liang.Employee
	method <init> : 
	method getName : 
	method getBankId : 
	method getSalary : 
 ====================================== 
** CLASS ca.liang.PayRollArrayMockTest
	method <init> : 
	method init : 
Unit: r0.<ca.liang.PayRollArrayMockTest: ca.liang.Employee[] employees_nomock> = $r1
Unit: $r8 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/Employee;")
Local: $r8
Possibly Mock: true

Unit: $r7[0] = $r9
Unit: $r14 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r13)
Unit: interfaceinvoke $r12.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r14)
Unit: $r7 = r0.<ca.liang.PayRollArrayMockTest: ca.liang.Employee[] employees_mock>
Unit: $r16 = new ca.liang.PayRoll
Unit: $r17 = r0.<ca.liang.PayRollArrayMockTest: ca.liang.BankService bankService>
Unit: $r5 = (ca.liang.BankService) $r4
Local: $r5
Possibly Mock: true

Unit: $r13 = r0.<ca.liang.PayRollArrayMockTest: ca.liang.Employee[] employees_nomock>
Unit: return
Unit: r0.<ca.liang.PayRollArrayMockTest: ca.liang.EmployeeDB employeeDB> = $r3
Unit: r0 := @this: ca.liang.PayRollArrayMockTest
Unit: $r2 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/EmployeeDB;")
Local: $r2
Possibly Mock: true

Unit: $r4 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/BankService;")
Local: $r4
Possibly Mock: true

Unit: specialinvoke $r16.<ca.liang.PayRoll: void <init>(ca.liang.EmployeeDB,ca.liang.BankService)>($r18, $r17)
Unit: r0.<ca.liang.PayRollArrayMockTest: ca.liang.BankService bankService> = $r5
Unit: $r9 = (ca.liang.Employee) $r8
Local: $r9
Possibly Mock: true

Unit: $r10 = r0.<ca.liang.PayRollArrayMockTest: ca.liang.EmployeeDB employeeDB>
Unit: $r18 = r0.<ca.liang.PayRollArrayMockTest: ca.liang.EmployeeDB employeeDB>
Unit: $r12 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r11)
Unit: r0.<ca.liang.PayRollArrayMockTest: ca.liang.PayRoll payRoll> = $r16
Unit: $r1 = newarray (ca.liang.Employee)[0]
Unit: $r6 = newarray (ca.liang.Employee)[1]
Unit: r0.<ca.liang.PayRollArrayMockTest: ca.liang.Employee[] employees_mock> = $r6
Unit: $r3 = (ca.liang.EmployeeDB) $r2
Local: $r3
Possibly Mock: true

Unit: $r11 = virtualinvoke $r10.<ca.liang.EmployeeDB: java.util.List getAllEmployees()>()
	method testNoEmployees : 
Unit: return
Unit: r0 := @this: ca.liang.PayRollArrayMockTest
Unit: specialinvoke r0.<ca.liang.PayRollArrayMockTest: void assertNumberOfPayments(int)>(0)
	method testEmployeesPaidIntra : 
Unit: r0 := @this: ca.liang.PayRollArrayMockTest
Unit: r2 = $r9
Unit: $r7 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/Employee;")
Local: $r7
Possibly Mock: true

Unit: specialinvoke $r12.<ca.liang.PayRoll: void <init>(ca.liang.Employee[],ca.liang.BankService)>(r1, r3)
Unit: i0 = virtualinvoke r4.<ca.liang.PayRoll: int monthlyPayment()>()
Unit: r1[0] = $r6
Unit: $r10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1)
Unit: $l1 = (long) i0
Unit: r1 = newarray (ca.liang.Employee)[2]
Unit: $r8 = (ca.liang.Employee) $r7
Local: $r8
Possibly Mock: true

Unit: staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l1)
Unit: $r9 = new ca.liang.EmployeeDB
Unit: r4 = $r12
Unit: $r5 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/Employee;")
Local: $r5
Possibly Mock: true

Unit: $r6 = (ca.liang.Employee) $r5
Local: $r6
Possibly Mock: true

Unit: r1[1] = $r8
Unit: return
Unit: specialinvoke $r9.<ca.liang.EmployeeDB: void <init>(java.util.List)>($r10)
Unit: r3 = (ca.liang.BankService) $r11
Local: r3
Possibly Mock: true

Unit: $r11 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/BankService;")
Local: $r11
Possibly Mock: true

Unit: $r12 = new ca.liang.PayRoll
	method testSingleEmployeeFieldArrayNomock : 
Unit: r1 = "Test Employee"
Unit: $r7 = r0.<ca.liang.PayRollArrayMockTest: ca.liang.Employee[] employees_nomock>
Unit: r0 := @this: ca.liang.PayRollArrayMockTest
Unit: r0.<ca.liang.PayRollArrayMockTest: ca.liang.Employee[] employees_nomock> = $r4
Unit: specialinvoke $r5.<ca.liang.Employee: void <init>(java.lang.String,java.lang.String,int)>(r1, r2, s0)
Unit: $r4 = newarray (ca.liang.Employee)[1]
Unit: $r8 = virtualinvoke r3.<ca.liang.Employee: java.lang.String getName()>()
Unit: $r6 = r0.<ca.liang.PayRollArrayMockTest: ca.liang.Employee[] employees_nomock>
Unit: r3 = $r7[0]
Unit: s0 = 1000
Unit: return
Unit: staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r8, r1)
Unit: $r5 = new ca.liang.Employee
Unit: $r6[0] = $r5
Unit: r2 = "ID0"
	method testSingleEmployeeFieldArrayMock : 
Unit: r3 = $r4[0]
Unit: r0 := @this: ca.liang.PayRollArrayMockTest
Unit: $r4 = r0.<ca.liang.PayRollArrayMockTest: ca.liang.Employee[] employees_mock>
Unit: return
Unit: interfaceinvoke $r6.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>(r1)
Unit: r2 = "ID0"
Unit: $r6 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r5)
Unit: s0 = 1000
Unit: staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r8, r1)
Unit: $r5 = virtualinvoke r3.<ca.liang.Employee: java.lang.String getName()>()
Unit: $r8 = virtualinvoke r3.<ca.liang.Employee: java.lang.String getName()>()
Unit: r1 = "Test Employee"
	method testSingleEmployeeLocalArrayNomock : 
Unit: r2 = "Test Employee"
Unit: r0 := @this: ca.liang.PayRollArrayMockTest
Unit: r1[0] = $r5
Unit: staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r6, r2)
Unit: $r5 = new ca.liang.Employee
Unit: r4 = r1[0]
Unit: r3 = "ID0"
Unit: $r6 = virtualinvoke r4.<ca.liang.Employee: java.lang.String getName()>()
Unit: r1 = newarray (ca.liang.Employee)[1]
Unit: s0 = 1000
Unit: return
Unit: specialinvoke $r5.<ca.liang.Employee: void <init>(java.lang.String,java.lang.String,int)>(r2, r3, s0)
	method testSingleEmployeeLocalArrayMock : 
Unit: $r7 = virtualinvoke r4.<ca.liang.Employee: java.lang.String getName()>()
Unit: r5 = r1[0]
Unit: return
Unit: $r10 = virtualinvoke r5.<ca.liang.Employee: java.lang.String getName()>()
Unit: r3 = "ID0"
Unit: r0 := @this: ca.liang.PayRollArrayMockTest
Unit: interfaceinvoke $r8.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>(r2)
Unit: r1 = newarray (ca.liang.Employee)[1]
Unit: r2 = "Test Employee"
Unit: staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r10, r2)
Unit: s0 = 1000
Unit: $r8 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r7)
Unit: r1[0] = r4
Unit: r4 = (ca.liang.Employee) $r6
Local: r4
Possibly Mock: true

Unit: $r6 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/Employee;")
Local: $r6
Possibly Mock: true

	method testAllEmployeesArePaidArrayIntra : 
Unit: $r13 = virtualinvoke $r12.<ca.liang.EmployeeDB: java.util.List getAllEmployees()>()
Unit: $r20 = r0.<ca.liang.PayRollArrayMockTest: ca.liang.EmployeeDB employeeDB>
Unit: $r34 = r0.<ca.liang.PayRollArrayMockTest: ca.liang.Employee[] employees_mock>
Unit: $r36 = virtualinvoke $r35.<ca.liang.Employee: java.lang.String getBankId()>()
Unit: $r7[0] = r1
Unit: $r7[1] = r2
Unit: $r40 = $r39[0]
Unit: $r47 = interfaceinvoke $r46.<java.util.List: java.lang.Object get(int)>(1)
Unit: $r31 = virtualinvoke $r30.<ca.liang.Employee: java.lang.String getBankId()>()
Unit: $i1 = virtualinvoke $r40.<ca.liang.Employee: int getSalary()>()
Unit: $r8 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/EmployeeDB;")
Local: $r8
Possibly Mock: true

Unit: virtualinvoke $r24.<ca.liang.BankService: void makePayment(java.lang.String,int)>($r26, $i0)
Unit: $r7 = newarray (ca.liang.Employee)[2]
Unit: $r45 = $r44[1]
Unit: r0 := @this: ca.liang.PayRollArrayMockTest
Unit: r0.<ca.liang.PayRollArrayMockTest: ca.liang.Employee[] employees_mock> = $r7
Unit: $r28 = (java.lang.Integer) $r27
Unit: $r11 = (ca.liang.BankService) $r10
Local: $r11
Possibly Mock: true

Unit: $r15 = r0.<ca.liang.PayRollArrayMockTest: ca.liang.Employee[] employees_mock>
Unit: $r25 = virtualinvoke r3.<org.mockito.ArgumentCaptor: java.lang.Object capture()>()
Unit: r2 = (ca.liang.Employee) $r6
Local: r2
Possibly Mock: true

Unit: $r18 = new ca.liang.PayRoll
Unit: r3 = staticinvoke <org.mockito.ArgumentCaptor: org.mockito.ArgumentCaptor forClass(java.lang.Class)>(class "Ljava/lang/String;")
Unit: $r21 = r0.<ca.liang.PayRollArrayMockTest: ca.liang.BankService bankService>
Unit: $r23 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object,org.mockito.verification.VerificationMode)>($r21, $r22)
Local: $r23
Possibly Mock: true

Unit: r0.<ca.liang.PayRollArrayMockTest: ca.liang.PayRoll payRoll> = $r18
Unit: $i7 = virtualinvoke $r48.<java.lang.Integer: int intValue()>()
Unit: $r24 = (ca.liang.BankService) $r23
Local: $r24
Possibly Mock: true

Unit: $r12 = r0.<ca.liang.PayRollArrayMockTest: ca.liang.EmployeeDB employeeDB>
Unit: $l4 = (long) $i3
Unit: $r5 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/Employee;")
Local: $r5
Possibly Mock: true

Unit: specialinvoke $r18.<ca.liang.PayRoll: void <init>(ca.liang.EmployeeDB,ca.liang.BankService)>($r20, $r19)
Unit: $r42 = interfaceinvoke $r41.<java.util.List: java.lang.Object get(int)>(0)
Unit: staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l6, $l8)
Unit: staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l2, $l4)
Unit: $r22 = staticinvoke <org.mockito.Mockito: org.mockito.verification.VerificationMode times(int)>(2)
Unit: r0.<ca.liang.PayRollArrayMockTest: ca.liang.BankService bankService> = $r11
Unit: $r26 = (java.lang.String) $r25
Unit: $r14 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r13)
Unit: $i3 = virtualinvoke $r43.<java.lang.Integer: int intValue()>()
Unit: $l2 = (long) $i1
Unit: $l6 = (long) $i5
Unit: r1 = (ca.liang.Employee) $r5
Local: r1
Possibly Mock: true

Unit: $r6 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/Employee;")
Local: $r6
Possibly Mock: true

Unit: $r16 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r15)
Unit: r4 = staticinvoke <org.mockito.ArgumentCaptor: org.mockito.ArgumentCaptor forClass(java.lang.Class)>(class "Ljava/lang/Integer;")
Unit: interfaceinvoke $r14.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r16)
Unit: $r9 = (ca.liang.EmployeeDB) $r8
Local: $r9
Possibly Mock: true

Unit: $r39 = r0.<ca.liang.PayRollArrayMockTest: ca.liang.Employee[] employees_mock>
Unit: $r30 = $r29[0]
Unit: $r19 = r0.<ca.liang.PayRollArrayMockTest: ca.liang.BankService bankService>
Unit: $r29 = r0.<ca.liang.PayRollArrayMockTest: ca.liang.Employee[] employees_mock>
Unit: $r27 = virtualinvoke r4.<org.mockito.ArgumentCaptor: java.lang.Object capture()>()
Unit: $r37 = virtualinvoke r3.<org.mockito.ArgumentCaptor: java.util.List getAllValues()>()
Unit: $r41 = virtualinvoke r4.<org.mockito.ArgumentCaptor: java.util.List getAllValues()>()
Unit: $r48 = (java.lang.Integer) $r47
Unit: $r44 = r0.<ca.liang.PayRollArrayMockTest: ca.liang.Employee[] employees_mock>
Unit: $r33 = interfaceinvoke $r32.<java.util.List: java.lang.Object get(int)>(0)
Unit: staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r31, $r33)
Unit: $r38 = interfaceinvoke $r37.<java.util.List: java.lang.Object get(int)>(1)
Unit: $i0 = virtualinvoke $r28.<java.lang.Integer: int intValue()>()
Unit: $r32 = virtualinvoke r3.<org.mockito.ArgumentCaptor: java.util.List getAllValues()>()
Unit: $r10 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/BankService;")
Local: $r10
Possibly Mock: true

Unit: specialinvoke r0.<ca.liang.PayRollArrayMockTest: void assertNumberOfPayments(int)>(2)
Unit: $r35 = $r34[1]
Unit: $r43 = (java.lang.Integer) $r42
Unit: $r46 = virtualinvoke r4.<org.mockito.ArgumentCaptor: java.util.List getAllValues()>()
Unit: r0.<ca.liang.PayRollArrayMockTest: ca.liang.EmployeeDB employeeDB> = $r9
Unit: return
Unit: $l8 = (long) $i7
Unit: staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r36, $r38)
Unit: $i5 = virtualinvoke $r45.<ca.liang.Employee: int getSalary()>()
	method testAllEmployeesArePaidArray : 
Unit: $r15 = r0.<ca.liang.PayRollArrayMockTest: ca.liang.BankService bankService>
Unit: r2 = staticinvoke <org.mockito.ArgumentCaptor: org.mockito.ArgumentCaptor forClass(java.lang.Class)>(class "Ljava/lang/Integer;")
Unit: staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r27, $r29)
Unit: r0.<ca.liang.PayRollArrayMockTest: ca.liang.EmployeeDB employeeDB> = $r5
Unit: specialinvoke r0.<ca.liang.PayRollArrayMockTest: void assertNumberOfPayments(int)>(2)
Unit: $r36 = $r35[0]
Unit: $r8 = r0.<ca.liang.PayRollArrayMockTest: ca.liang.EmployeeDB employeeDB>
Unit: $l6 = (long) $i5
Unit: $r29 = interfaceinvoke $r28.<java.util.List: java.lang.Object get(int)>(0)
Unit: r1 = staticinvoke <org.mockito.ArgumentCaptor: org.mockito.ArgumentCaptor forClass(java.lang.Class)>(class "Ljava/lang/String;")
Unit: $r40 = r0.<ca.liang.PayRollArrayMockTest: ca.liang.Employee[] employees_mock>
Unit: $r23 = virtualinvoke r2.<org.mockito.ArgumentCaptor: java.lang.Object capture()>()
Unit: $r21 = virtualinvoke r1.<org.mockito.ArgumentCaptor: java.lang.Object capture()>()
Unit: $r42 = virtualinvoke r2.<org.mockito.ArgumentCaptor: java.util.List getAllValues()>()
Unit: specialinvoke $r14.<ca.liang.PayRoll: void <init>(ca.liang.EmployeeDB,ca.liang.BankService)>($r16, $r15)
Unit: $r22 = (java.lang.String) $r21
Unit: return
Unit: $i1 = virtualinvoke $r36.<ca.liang.Employee: int getSalary()>()
Unit: r0 := @this: ca.liang.PayRollArrayMockTest
Unit: virtualinvoke $r20.<ca.liang.BankService: void makePayment(java.lang.String,int)>($r22, $i0)
Unit: $r39 = (java.lang.Integer) $r38
Unit: $r12 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r11)
Unit: $r19 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object,org.mockito.verification.VerificationMode)>($r17, $r18)
Local: $r19
Possibly Mock: true

Unit: $r6 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/BankService;")
Local: $r6
Possibly Mock: true

Unit: $r5 = (ca.liang.EmployeeDB) $r4
Local: $r5
Possibly Mock: true

Unit: $r7 = (ca.liang.BankService) $r6
Local: $r7
Possibly Mock: true

Unit: $r28 = virtualinvoke r1.<org.mockito.ArgumentCaptor: java.util.List getAllValues()>()
Unit: $l8 = (long) $i7
Unit: $r44 = (java.lang.Integer) $r43
Unit: $i3 = virtualinvoke $r39.<java.lang.Integer: int intValue()>()
Unit: staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l2, $l4)
Unit: $r16 = r0.<ca.liang.PayRollArrayMockTest: ca.liang.EmployeeDB employeeDB>
Unit: staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l6, $l8)
Unit: staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r32, $r34)
Unit: r0.<ca.liang.PayRollArrayMockTest: ca.liang.PayRoll payRoll> = $r14
Unit: $r41 = $r40[1]
Unit: $l2 = (long) $i1
Unit: $l4 = (long) $i3
Unit: $r11 = r0.<ca.liang.PayRollArrayMockTest: ca.liang.Employee[] employees_mock>
Unit: $r31 = $r30[1]
Unit: $r34 = interfaceinvoke $r33.<java.util.List: java.lang.Object get(int)>(1)
Unit: $r24 = (java.lang.Integer) $r23
Unit: r0.<ca.liang.PayRollArrayMockTest: ca.liang.Employee[] employees_mock> = $r3
Unit: $r3 = specialinvoke r0.<ca.liang.PayRollArrayMockTest: ca.liang.Employee[] createEmployees()>()
Unit: $r37 = virtualinvoke r2.<org.mockito.ArgumentCaptor: java.util.List getAllValues()>()
Unit: $r17 = r0.<ca.liang.PayRollArrayMockTest: ca.liang.BankService bankService>
Unit: $r26 = $r25[0]
Unit: $r27 = virtualinvoke $r26.<ca.liang.Employee: java.lang.String getBankId()>()
Unit: $r32 = virtualinvoke $r31.<ca.liang.Employee: java.lang.String getBankId()>()
Unit: $r25 = r0.<ca.liang.PayRollArrayMockTest: ca.liang.Employee[] employees_mock>
Unit: $r33 = virtualinvoke r1.<org.mockito.ArgumentCaptor: java.util.List getAllValues()>()
Unit: $r10 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r9)
Unit: $r43 = interfaceinvoke $r42.<java.util.List: java.lang.Object get(int)>(1)
Unit: $r4 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/EmployeeDB;")
Local: $r4
Possibly Mock: true

Unit: $r9 = virtualinvoke $r8.<ca.liang.EmployeeDB: java.util.List getAllEmployees()>()
Unit: interfaceinvoke $r10.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r12)
Unit: $r38 = interfaceinvoke $r37.<java.util.List: java.lang.Object get(int)>(0)
Unit: $r35 = r0.<ca.liang.PayRollArrayMockTest: ca.liang.Employee[] employees_mock>
Unit: $i5 = virtualinvoke $r41.<ca.liang.Employee: int getSalary()>()
Unit: $i0 = virtualinvoke $r24.<java.lang.Integer: int intValue()>()
Unit: $r14 = new ca.liang.PayRoll
Unit: $r18 = staticinvoke <org.mockito.Mockito: org.mockito.verification.VerificationMode times(int)>(2)
Unit: $r30 = r0.<ca.liang.PayRollArrayMockTest: ca.liang.Employee[] employees_mock>
Unit: $r20 = (ca.liang.BankService) $r19
Local: $r20
Possibly Mock: true

Unit: r0.<ca.liang.PayRollArrayMockTest: ca.liang.BankService bankService> = $r7
Unit: $i7 = virtualinvoke $r44.<java.lang.Integer: int intValue()>()
	method assertNumberOfPayments : 
	method createTestEmployee : 
	method createEmployees : 
 ====================================== 
** CLASS ca.liang.EmployeeDB
	method <init> : 
	method getAllEmployees : 
 ====================================== 
** CLASS ca.liang.PayRollMockTest
	method <init> : 
	method init : 
Unit: $r11 = new ca.liang.PayRoll
Unit: $r3 = (ca.liang.EmployeeDB) $r2
Local: $r3
Possibly Mock: true

Unit: $r7 = virtualinvoke $r6.<ca.liang.EmployeeDB: java.util.List getAllEmployees()>()
Unit: r0.<ca.liang.PayRollMockTest: ca.liang.PayRoll payRoll> = $r11
Unit: $r5 = (ca.liang.BankService) $r4
Local: $r5
Possibly Mock: true

Unit: return
Unit: specialinvoke $r1.<java.util.ArrayList: void <init>()>()
Unit: $r4 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/BankService;")
Local: $r4
Possibly Mock: true

Unit: r0.<ca.liang.PayRollMockTest: ca.liang.BankService bankService> = $r5
Unit: $r6 = r0.<ca.liang.PayRollMockTest: ca.liang.EmployeeDB employeeDB>
Unit: r0.<ca.liang.PayRollMockTest: ca.liang.EmployeeDB employeeDB> = $r3
Unit: $r13 = r0.<ca.liang.PayRollMockTest: ca.liang.EmployeeDB employeeDB>
Unit: r0.<ca.liang.PayRollMockTest: java.util.List employees> = $r1
Unit: $r2 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/EmployeeDB;")
Local: $r2
Possibly Mock: true

Unit: specialinvoke $r11.<ca.liang.PayRoll: void <init>(ca.liang.EmployeeDB,ca.liang.BankService)>($r13, $r12)
Unit: r0 := @this: ca.liang.PayRollMockTest
Unit: $r8 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r7)
Unit: $r9 = r0.<ca.liang.PayRollMockTest: java.util.List employees>
Unit: $r12 = r0.<ca.liang.PayRollMockTest: ca.liang.BankService bankService>
Unit: $r1 = new java.util.ArrayList
Unit: interfaceinvoke $r8.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r9)
	method testNoEmployees : 
Unit: r0 := @this: ca.liang.PayRollMockTest
Unit: return
Unit: specialinvoke r0.<ca.liang.PayRollMockTest: void assertNumberOfPayments(int)>(0)
	method testNoEmployeesIntra : 
Unit: r4 = $r11
Unit: r3 = (ca.liang.BankService) $r7
Local: r3
Possibly Mock: true

Unit: $r6 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/EmployeeDB;")
Local: $r6
Possibly Mock: true

Unit: r1 = $r5
Unit: $r9 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r8)
Unit: $r7 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/BankService;")
Local: $r7
Possibly Mock: true

Unit: specialinvoke $r11.<ca.liang.PayRoll: void <init>(ca.liang.EmployeeDB,ca.liang.BankService)>(r2, r3)
Unit: $l1 = (long) i0
Unit: staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1)
Unit: r2 = (ca.liang.EmployeeDB) $r6
Local: r2
Possibly Mock: true

Unit: interfaceinvoke $r9.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>(r1)
Unit: $r11 = new ca.liang.PayRoll
Unit: i0 = virtualinvoke r4.<ca.liang.PayRoll: int monthlyPayment()>()
Unit: specialinvoke $r5.<java.util.ArrayList: void <init>()>()
Unit: $r8 = virtualinvoke r2.<ca.liang.EmployeeDB: java.util.List getAllEmployees()>()
Unit: return
Unit: $r5 = new java.util.ArrayList
Unit: r0 := @this: ca.liang.PayRollMockTest
	method testSingleEmployee : 
Unit: $r1 = r0.<ca.liang.PayRollMockTest: java.util.List employees>
Unit: $r2 = specialinvoke r0.<ca.liang.PayRollMockTest: ca.liang.Employee createTestEmployee(java.lang.String,java.lang.String,int)>("Test Employee", "ID0", 1000)
Unit: return
Unit: specialinvoke r0.<ca.liang.PayRollMockTest: void assertNumberOfPayments(int)>(1)
Unit: interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2)
Unit: r0 := @this: ca.liang.PayRollMockTest
	method testEmployeeIsPaid : 
Unit: r0 := @this: ca.liang.PayRollMockTest
Unit: $r5 = staticinvoke <org.mockito.Mockito: org.mockito.verification.VerificationMode times(int)>(1)
Unit: specialinvoke r0.<ca.liang.PayRollMockTest: void assertNumberOfPayments(int)>(1)
Unit: $r3 = specialinvoke r0.<ca.liang.PayRollMockTest: ca.liang.Employee createTestEmployee(java.lang.String,java.lang.String,int)>("Test Employee", r1, s0)
Unit: $r6 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object,org.mockito.verification.VerificationMode)>($r4, $r5)
Local: $r6
Possibly Mock: true

Unit: $r4 = r0.<ca.liang.PayRollMockTest: ca.liang.BankService bankService>
Unit: s0 = 1000
Unit: return
Unit: $r2 = r0.<ca.liang.PayRollMockTest: java.util.List employees>
Unit: $r7 = (ca.liang.BankService) $r6
Local: $r7
Possibly Mock: true

Unit: virtualinvoke $r7.<ca.liang.BankService: void makePayment(java.lang.String,int)>(r1, s0)
Unit: r1 = "ID0"
Unit: interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r3)
	method testAllEmployeesArePaid1 : 
Unit: $r52 = (java.lang.Integer) $r51
Unit: $r19 = r0.<ca.liang.PayRollMockTest: ca.liang.BankService bankService>
Unit: $r28 = (java.lang.Integer) $r27
Unit: $r9 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/EmployeeDB;")
Local: $r9
Possibly Mock: true

Unit: $r16 = r0.<ca.liang.PayRollMockTest: java.util.List employees>
Unit: return
Unit: virtualinvoke $r24.<ca.liang.BankService: void makePayment(java.lang.String,int)>($r26, $i0)
Unit: $r44 = virtualinvoke r5.<org.mockito.ArgumentCaptor: java.util.List getAllValues()>()
Unit: r1 = $r6
Unit: r0.<ca.liang.PayRollMockTest: java.util.List employees> = r1
Unit: $r27 = virtualinvoke r5.<org.mockito.ArgumentCaptor: java.lang.Object capture()>()
Unit: $r39 = virtualinvoke r4.<org.mockito.ArgumentCaptor: java.util.List getAllValues()>()
Unit: $r51 = interfaceinvoke $r50.<java.util.List: java.lang.Object get(int)>(1)
Unit: $l6 = (long) $i5
Unit: $r24 = (ca.liang.BankService) $r23
Local: $r24
Possibly Mock: true

Unit: $l2 = (long) $i1
Unit: specialinvoke $r18.<ca.liang.PayRoll: void <init>(ca.liang.EmployeeDB,ca.liang.BankService)>($r20, $r19)
Unit: $r18 = new ca.liang.PayRoll
Unit: $r10 = (ca.liang.EmployeeDB) $r9
Local: $r10
Possibly Mock: true

Unit: $l4 = (long) $i3
Unit: $r23 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object,org.mockito.verification.VerificationMode)>($r21, $r22)
Local: $r23
Possibly Mock: true

Unit: r5 = staticinvoke <org.mockito.ArgumentCaptor: org.mockito.ArgumentCaptor forClass(java.lang.Class)>(class "Ljava/lang/Integer;")
Unit: $r32 = virtualinvoke $r31.<ca.liang.Employee: java.lang.String getBankId()>()
Unit: $r49 = (ca.liang.Employee) $r48
Unit: $r37 = (ca.liang.Employee) $r36
Unit: $r15 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r14)
Unit: $r7 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/Employee;")
Local: $r7
Possibly Mock: true

Unit: interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r2)
Local: r1
Collection Mock: true

Unit: $i7 = virtualinvoke $r52.<java.lang.Integer: int intValue()>()
Unit: $r25 = virtualinvoke r4.<org.mockito.ArgumentCaptor: java.lang.Object capture()>()
Unit: r2 = (ca.liang.Employee) $r7
Local: r2
Possibly Mock: true

Unit: interfaceinvoke $r15.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r16)
Unit: $r20 = r0.<ca.liang.PayRollMockTest: ca.liang.EmployeeDB employeeDB>
Unit: $r33 = virtualinvoke r4.<org.mockito.ArgumentCaptor: java.util.List getAllValues()>()
Unit: staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r38, $r40)
Unit: $i5 = virtualinvoke $r49.<ca.liang.Employee: int getSalary()>()
Unit: r0.<ca.liang.PayRollMockTest: ca.liang.BankService bankService> = $r12
Unit: $i0 = virtualinvoke $r28.<java.lang.Integer: int intValue()>()
Unit: $r13 = r0.<ca.liang.PayRollMockTest: ca.liang.EmployeeDB employeeDB>
Unit: $r26 = (java.lang.String) $r25
Unit: $r31 = (ca.liang.Employee) $r30
Unit: $r36 = interfaceinvoke $r35.<java.util.List: java.lang.Object get(int)>(1)
Unit: $r6 = new java.util.ArrayList
Unit: $r35 = r0.<ca.liang.PayRollMockTest: java.util.List employees>
Unit: r0 := @this: ca.liang.PayRollMockTest
Unit: r0.<ca.liang.PayRollMockTest: ca.liang.PayRoll payRoll> = $r18
Unit: $r50 = virtualinvoke r5.<org.mockito.ArgumentCaptor: java.util.List getAllValues()>()
Unit: staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l6, $l8)
Unit: $r22 = staticinvoke <org.mockito.Mockito: org.mockito.verification.VerificationMode times(int)>(2)
Unit: $r45 = interfaceinvoke $r44.<java.util.List: java.lang.Object get(int)>(0)
Unit: r4 = staticinvoke <org.mockito.ArgumentCaptor: org.mockito.ArgumentCaptor forClass(java.lang.Class)>(class "Ljava/lang/String;")
Unit: specialinvoke r0.<ca.liang.PayRollMockTest: void assertNumberOfPayments(int)>(2)
Unit: $r47 = r0.<ca.liang.PayRollMockTest: java.util.List employees>
Unit: $r34 = interfaceinvoke $r33.<java.util.List: java.lang.Object get(int)>(0)
Unit: $r43 = (ca.liang.Employee) $r42
Unit: $r41 = r0.<ca.liang.PayRollMockTest: java.util.List employees>
Unit: interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r3)
Local: r1
Collection Mock: true

Unit: staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r32, $r34)
Unit: r0.<ca.liang.PayRollMockTest: ca.liang.EmployeeDB employeeDB> = $r10
Unit: $r11 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/BankService;")
Local: $r11
Possibly Mock: true

Unit: $r8 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/Employee;")
Local: $r8
Possibly Mock: true

Unit: $r14 = virtualinvoke $r13.<ca.liang.EmployeeDB: java.util.List getAllEmployees()>()
Unit: $i1 = virtualinvoke $r43.<ca.liang.Employee: int getSalary()>()
Unit: $i3 = virtualinvoke $r46.<java.lang.Integer: int intValue()>()
Unit: $r30 = interfaceinvoke $r29.<java.util.List: java.lang.Object get(int)>(0)
Unit: $r42 = interfaceinvoke $r41.<java.util.List: java.lang.Object get(int)>(0)
Unit: $r40 = interfaceinvoke $r39.<java.util.List: java.lang.Object get(int)>(1)
Unit: staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l2, $l4)
Unit: specialinvoke $r6.<java.util.ArrayList: void <init>()>()
Unit: $r21 = r0.<ca.liang.PayRollMockTest: ca.liang.BankService bankService>
Unit: $l8 = (long) $i7
Unit: r3 = (ca.liang.Employee) $r8
Local: r3
Possibly Mock: true

Unit: $r12 = (ca.liang.BankService) $r11
Local: $r12
Possibly Mock: true

Unit: $r38 = virtualinvoke $r37.<ca.liang.Employee: java.lang.String getBankId()>()
Unit: $r46 = (java.lang.Integer) $r45
Unit: $r48 = interfaceinvoke $r47.<java.util.List: java.lang.Object get(int)>(1)
Unit: $r29 = r0.<ca.liang.PayRollMockTest: java.util.List employees>
	method testAllEmployeesArePaid2 : 
Unit: $r15 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r14)
Unit: $r14 = virtualinvoke $r13.<ca.liang.EmployeeDB: java.util.List getAllEmployees()>()
Unit: r5 = staticinvoke <org.mockito.ArgumentCaptor: org.mockito.ArgumentCaptor forClass(java.lang.Class)>(class "Ljava/lang/Integer;")
Unit: $r45 = interfaceinvoke $r44.<java.util.List: java.lang.Object get(int)>(0)
Unit: $r46 = (java.lang.Integer) $r45
Unit: $r22 = staticinvoke <org.mockito.Mockito: org.mockito.verification.VerificationMode times(int)>(2)
Unit: $i1 = virtualinvoke $r43.<ca.liang.Employee: int getSalary()>()
Unit: $r9 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/EmployeeDB;")
Local: $r9
Possibly Mock: true

Unit: $l6 = (long) $i5
Unit: $r39 = virtualinvoke r4.<org.mockito.ArgumentCaptor: java.util.List getAllValues()>()
Unit: $r11 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/BankService;")
Local: $r11
Possibly Mock: true

Unit: $r20 = r0.<ca.liang.PayRollMockTest: ca.liang.EmployeeDB employeeDB>
Unit: $r37 = (ca.liang.Employee) $r36
Unit: $r13 = r0.<ca.liang.PayRollMockTest: ca.liang.EmployeeDB employeeDB>
Unit: r0.<ca.liang.PayRollMockTest: ca.liang.PayRoll payRoll> = $r18
Unit: $l4 = (long) $i3
Unit: $r36 = interfaceinvoke $r35.<java.util.List: java.lang.Object get(int)>(1)
Unit: $r24 = (ca.liang.BankService) $r23
Local: $r24
Possibly Mock: true

Unit: $r21 = r0.<ca.liang.PayRollMockTest: ca.liang.BankService bankService>
Unit: r0.<ca.liang.PayRollMockTest: ca.liang.EmployeeDB employeeDB> = $r10
Unit: $r16 = r0.<ca.liang.PayRollMockTest: java.util.List employees>
Unit: $r32 = virtualinvoke $r31.<ca.liang.Employee: java.lang.String getBankId()>()
Unit: $r10 = (ca.liang.EmployeeDB) $r9
Local: $r10
Possibly Mock: true

Unit: $r23 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object,org.mockito.verification.VerificationMode)>($r21, $r22)
Local: $r23
Possibly Mock: true

Unit: $r35 = r0.<ca.liang.PayRollMockTest: java.util.List employees>
Unit: $r41 = r0.<ca.liang.PayRollMockTest: java.util.List employees>
Unit: staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r38, $r40)
Unit: staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l2, $l4)
Unit: $r27 = virtualinvoke r5.<org.mockito.ArgumentCaptor: java.lang.Object capture()>()
Unit: $r31 = (ca.liang.Employee) $r30
Unit: $r26 = (java.lang.String) $r25
Unit: $i3 = virtualinvoke $r46.<java.lang.Integer: int intValue()>()
Unit: r1 = $r6
Unit: $r47 = r0.<ca.liang.PayRollMockTest: java.util.List employees>
Unit: $r42 = interfaceinvoke $r41.<java.util.List: java.lang.Object get(int)>(0)
Unit: $r18 = new ca.liang.PayRoll
Unit: $r40 = interfaceinvoke $r39.<java.util.List: java.lang.Object get(int)>(1)
Unit: $r49 = (ca.liang.Employee) $r48
Unit: $i5 = virtualinvoke $r49.<ca.liang.Employee: int getSalary()>()
Unit: virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r3)
Local: r1
Collection Mock: true

Unit: $r44 = virtualinvoke r5.<org.mockito.ArgumentCaptor: java.util.List getAllValues()>()
Unit: r3 = (ca.liang.Employee) $r8
Local: r3
Possibly Mock: true

Unit: $l2 = (long) $i1
Unit: specialinvoke $r18.<ca.liang.PayRoll: void <init>(ca.liang.EmployeeDB,ca.liang.BankService)>($r20, $r19)
Unit: $r25 = virtualinvoke r4.<org.mockito.ArgumentCaptor: java.lang.Object capture()>()
Unit: virtualinvoke $r24.<ca.liang.BankService: void makePayment(java.lang.String,int)>($r26, $i0)
Unit: r0.<ca.liang.PayRollMockTest: java.util.List employees> = r1
Unit: $i7 = virtualinvoke $r52.<java.lang.Integer: int intValue()>()
Unit: specialinvoke $r6.<java.util.ArrayList: void <init>()>()
Unit: $r51 = interfaceinvoke $r50.<java.util.List: java.lang.Object get(int)>(1)
Unit: $r48 = interfaceinvoke $r47.<java.util.List: java.lang.Object get(int)>(1)
Unit: $l8 = (long) $i7
Unit: interfaceinvoke $r15.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r16)
Unit: return
Unit: r0.<ca.liang.PayRollMockTest: ca.liang.BankService bankService> = $r12
Unit: $r12 = (ca.liang.BankService) $r11
Local: $r12
Possibly Mock: true

Unit: $r38 = virtualinvoke $r37.<ca.liang.Employee: java.lang.String getBankId()>()
Unit: $r52 = (java.lang.Integer) $r51
Unit: virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r2)
Local: r1
Collection Mock: true

Unit: staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l6, $l8)
Unit: $r33 = virtualinvoke r4.<org.mockito.ArgumentCaptor: java.util.List getAllValues()>()
Unit: r4 = staticinvoke <org.mockito.ArgumentCaptor: org.mockito.ArgumentCaptor forClass(java.lang.Class)>(class "Ljava/lang/String;")
Unit: $r6 = new java.util.ArrayList
Unit: $r34 = interfaceinvoke $r33.<java.util.List: java.lang.Object get(int)>(0)
Unit: r2 = (ca.liang.Employee) $r7
Local: r2
Possibly Mock: true

Unit: $i0 = virtualinvoke $r28.<java.lang.Integer: int intValue()>()
Unit: $r29 = r0.<ca.liang.PayRollMockTest: java.util.List employees>
Unit: $r43 = (ca.liang.Employee) $r42
Unit: $r50 = virtualinvoke r5.<org.mockito.ArgumentCaptor: java.util.List getAllValues()>()
Unit: specialinvoke r0.<ca.liang.PayRollMockTest: void assertNumberOfPayments(int)>(2)
Unit: r0 := @this: ca.liang.PayRollMockTest
Unit: $r30 = interfaceinvoke $r29.<java.util.List: java.lang.Object get(int)>(0)
Unit: staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r32, $r34)
Unit: $r8 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/Employee;")
Local: $r8
Possibly Mock: true

Unit: $r28 = (java.lang.Integer) $r27
Unit: $r7 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/Employee;")
Local: $r7
Possibly Mock: true

Unit: $r19 = r0.<ca.liang.PayRollMockTest: ca.liang.BankService bankService>
	method testInteractionOrder : 
Unit: $r12 = r0.<ca.liang.PayRollMockTest: ca.liang.BankService bankService>
Unit: r2 = staticinvoke <org.mockito.Mockito: org.mockito.InOrder inOrder(java.lang.Object[])>($r5)
Unit: return
Unit: $r7 = r0.<ca.liang.PayRollMockTest: ca.liang.BankService bankService>
Unit: s0 = 1000
Unit: r0 := @this: ca.liang.PayRollMockTest
Unit: virtualinvoke $r14.<ca.liang.BankService: void makePayment(java.lang.String,int)>(r1, s0)
Unit: virtualinvoke $r10.<ca.liang.EmployeeDB: java.util.List getAllEmployees()>()
Unit: specialinvoke r0.<ca.liang.PayRollMockTest: void assertNumberOfPayments(int)>(1)
Unit: $r13 = interfaceinvoke r2.<org.mockito.InOrder: java.lang.Object verify(java.lang.Object)>($r12)
Local: $r13
Possibly Mock: true

Unit: $r10 = (ca.liang.EmployeeDB) $r9
Local: $r10
Possibly Mock: true

Unit: interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r4)
Unit: $r3 = r0.<ca.liang.PayRollMockTest: java.util.List employees>
Unit: $r6 = r0.<ca.liang.PayRollMockTest: ca.liang.EmployeeDB employeeDB>
Unit: $r5[0] = $r6
Unit: $r5 = newarray (java.lang.Object)[2]
Unit: $r4 = specialinvoke r0.<ca.liang.PayRollMockTest: ca.liang.Employee createTestEmployee(java.lang.String,java.lang.String,int)>("Test Employee", r1, s0)
Unit: $r8 = r0.<ca.liang.PayRollMockTest: ca.liang.EmployeeDB employeeDB>
Unit: r1 = "ID0"
Unit: $r9 = interfaceinvoke r2.<org.mockito.InOrder: java.lang.Object verify(java.lang.Object)>($r8)
Local: $r9
Possibly Mock: true

Unit: $r14 = (ca.liang.BankService) $r13
Local: $r14
Possibly Mock: true

Unit: $r5[1] = $r7
	method assertNumberOfPayments : 
	method createTestEmployee : 
	method createEmployees : 

 ====================================== 
** CLASS ca.liang.PayRollAnnotationMockTest
Number of Methods with MustMock in class: 4
Number of Methods with ArrayMock in class: 0
Number of Methods with Collection in class: 0

 ====================================== 
** CLASS ca.liang.PayRollArrayMockTest
Number of Methods with MustMock in class: 5
Number of Methods with ArrayMock in class: 0
Number of Methods with Collection in class: 0

 ====================================== 
** CLASS ca.liang.PayRollMockTest
Number of Methods with MustMock in class: 6
Number of Methods with ArrayMock in class: 0
Number of Methods with Collection in class: 2

 ====================================== 
Benchmark microbenchmark Mock Stats
Total Number of Test Methods with MustMock: 15
Total Number of Test Methods with ArrayMock in class: 0
Total Number of Test Methods with Collection in class: 2

 ====================================== 
 INVOCATION STATISTICS 

** CLASS ca.liang.BankService
** CLASS ca.liang.RootDriver
** CLASS ca.liang.PayRollAnnotationMockTest
	method testSingleEmployee : 
	Total invocations on Mocks 1 : 

	InvokeExpr: virtualinvoke $r4.<ca.liang.EmployeeDB: java.util.List getAllEmployees()>()

	method testEmployeeIsPaid : 
	Total invocations on Mocks 2 : 

	InvokeExpr: virtualinvoke $r5.<ca.liang.EmployeeDB: java.util.List getAllEmployees()>()

	InvokeExpr: virtualinvoke $r17.<ca.liang.BankService: void makePayment(java.lang.String,int)>(r1, s0)

** CLASS ca.liang.PayRoll
** CLASS ca.liang.Employee
** CLASS ca.liang.PayRollArrayMockTest
	method testSingleEmployeeLocalArrayMock : 
	Total invocations on Mocks 1 : 

	InvokeExpr: virtualinvoke r4.<ca.liang.Employee: java.lang.String getName()>()

	method testAllEmployeesArePaidArrayIntra : 
	Total invocations on Mocks 1 : 

	InvokeExpr: virtualinvoke $r24.<ca.liang.BankService: void makePayment(java.lang.String,int)>($r26, $i0)

	method testAllEmployeesArePaidArray : 
	Total invocations on Mocks 1 : 

	InvokeExpr: virtualinvoke $r20.<ca.liang.BankService: void makePayment(java.lang.String,int)>($r22, $i0)

** CLASS ca.liang.EmployeeDB
** CLASS ca.liang.PayRollMockTest
	method testNoEmployeesIntra : 
	Total invocations on Mocks 1 : 

	InvokeExpr: virtualinvoke r2.<ca.liang.EmployeeDB: java.util.List getAllEmployees()>()

	method testEmployeeIsPaid : 
	Total invocations on Mocks 1 : 

	InvokeExpr: virtualinvoke $r7.<ca.liang.BankService: void makePayment(java.lang.String,int)>(r1, s0)

	method testAllEmployeesArePaid1 : 
	Total invocations on Mocks 1 : 

	InvokeExpr: virtualinvoke $r24.<ca.liang.BankService: void makePayment(java.lang.String,int)>($r26, $i0)

	method testAllEmployeesArePaid2 : 
	Total invocations on Mocks 1 : 

	InvokeExpr: virtualinvoke $r24.<ca.liang.BankService: void makePayment(java.lang.String,int)>($r26, $i0)

	method testInteractionOrder : 
	Total invocations on Mocks 2 : 

	InvokeExpr: virtualinvoke $r10.<ca.liang.EmployeeDB: java.util.List getAllEmployees()>()

	InvokeExpr: virtualinvoke $r14.<ca.liang.BankService: void makePayment(java.lang.String,int)>(r1, s0)

 ====================================== 
Benchmark Overall Stats 
Total Invocations: 160
Invocations On Mocks: 12

Soot finished on Fri Apr 23 23:59:48 EDT 2021
Soot has run for 0 min. 41 sec.
