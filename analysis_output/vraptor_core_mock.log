======================================
** CLASS br.com.caelum.vraptor.util.extjs.DefaultExtJsonTest
Number of Methods with MayMock in class: 1
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.util.test.MockValidatorTest
Number of Methods with MayMock in class: 2
Number of Methods with ArrayMock in class: 2
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.converter.LocaleBasedTimeConverterTest
Number of Methods with MayMock in class: 6
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.converter.LocaleBasedDateConverterTest
Number of Methods with MayMock in class: 6
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.converter.l10n.LocaleBasedPrimitiveFloatConverterTest
Number of Methods with MayMock in class: 5
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.converter.l10n.LocaleBasedFloatConverterTest
Number of Methods with MayMock in class: 5
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.converter.l10n.LocaleBasedDoubleConverterTest
Number of Methods with MayMock in class: 5
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.converter.l10n.LocaleBasedBigDecimalConverterTest
Number of Methods with MayMock in class: 5
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.converter.l10n.LocaleBasedPrimitiveDoubleConverterTest
Number of Methods with MayMock in class: 5
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.converter.LocaleBasedCalendarConverterTest
Number of Methods with MayMock in class: 6
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.converter.jodatime.LocaleBasedJodaTimeConverterTest
Number of Methods with MayMock in class: 3
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.converter.jodatime.DateTimeConverterTest
Number of Methods with MayMock in class: 5
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.converter.jodatime.LocalDateTimeConverterTest
Number of Methods with MayMock in class: 5
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.converter.jodatime.LocalDateConverterTest
Number of Methods with MayMock in class: 5
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.converter.jodatime.LocalTimeConverterTest
Number of Methods with MayMock in class: 3
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.converter.jodatime.DateMidnightConverterTest
Number of Methods with MayMock in class: 5
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.restfulie.relation.DefaultRelationBuilderTest
Number of Methods with MayMock in class: 3
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.restfulie.headers.DefaultRestHeadersHandlerTest
Number of Methods with MayMock in class: 5
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.restfulie.LinkConverterTest
Number of Methods with MayMock in class: 5
Number of Methods with ArrayMock in class: 2
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.restfulie.LinkConverterJSONTest
Number of Methods with MayMock in class: 4
Number of Methods with ArrayMock in class: 2
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.config.BasicConfigurationTest
Number of Methods with MayMock in class: 17
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.config.ApplicationConfigurationTest
Number of Methods with MayMock in class: 3
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.serialization.gson.adapters.MessageSerializerTest
Number of Methods with MayMock in class: 1
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.serialization.gson.GsonJSONSerializationTest
Number of Methods with MayMock in class: 3
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.serialization.xstream.XStreamXMLSerializationTest
Number of Methods with MayMock in class: 1
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.serialization.xstream.XStreamJSONSerializationTest
Number of Methods with MayMock in class: 3
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.serialization.xstream.XStreamJSONPSerializationTest
Number of Methods with MayMock in class: 1
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.serialization.HTMLSerializationTest
Number of Methods with MayMock in class: 5
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.serialization.I18nMessageSerializationTest
Number of Methods with MayMock in class: 1
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.serialization.DefaultRepresentationResultTest
Number of Methods with MayMock in class: 8
Number of Methods with ArrayMock in class: 1
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.VRaptorTest
Number of Methods with MayMock in class: 5
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.validator.ReplicatorOutjectorTest
Number of Methods with MayMock in class: 2
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.validator.BeanValidatorTest
Number of Methods with MayMock in class: 3
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.validator.DefaultValidatorTest
Number of Methods with MayMock in class: 12
Number of Methods with ArrayMock in class: 1
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.validator.ValidatorAcceptanceTest
Number of Methods with MayMock in class: 1
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.validator.MethodValidatorTest
Number of Methods with MayMock in class: 4
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.interceptor.ExceptionHandlerInterceptorTest
Number of Methods with MayMock in class: 3
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.interceptor.DeserializingInterceptorTest
Number of Methods with MayMock in class: 9
Number of Methods with ArrayMock in class: 2
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.interceptor.DownloadInterceptorTest
Number of Methods with MayMock in class: 8
Number of Methods with ArrayMock in class: 2
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.interceptor.FlashInterceptorTest
Number of Methods with MayMock in class: 7
Number of Methods with ArrayMock in class: 1
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.interceptor.ParametersInstantiatorInterceptorTest
Number of Methods with MayMock in class: 10
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.interceptor.InstantiateInterceptorTest
Number of Methods with MayMock in class: 2
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.interceptor.OutjectResultTest
Number of Methods with MayMock in class: 5
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.interceptor.download.FileDownloadTest
Number of Methods with MayMock in class: 4
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.interceptor.download.InputStreamDownloadTest
Number of Methods with MayMock in class: 3
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.interceptor.download.ByteArrayDownloadTest
Number of Methods with MayMock in class: 3
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.interceptor.ResourceLookupInterceptorTest
Number of Methods with MayMock in class: 4
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.interceptor.multipart.CommonsUploadMultipartInterceptorTest
Number of Methods with MayMock in class: 15
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.interceptor.ExecuteMethodInterceptorTest
Number of Methods with MayMock in class: 9
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.core.DefaultStaticContentHandlerTest
Number of Methods with MayMock in class: 4
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.core.ExceptionRecorderTest
Number of Methods with MayMock in class: 2
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.core.LazyInterceptorHandlerTest
Number of Methods with MayMock in class: 5
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.core.JstlLocalizationTest
Number of Methods with MayMock in class: 7
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.core.DefaultConvertersTest
Number of Methods with MayMock in class: 5
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.core.DefaultInterceptorStackTest
Number of Methods with MayMock in class: 3
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.core.DefaultResultTest
Number of Methods with MayMock in class: 18
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.core.ToInstantiateInterceptorHandlerTest
Number of Methods with MayMock in class: 3
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.resource.HttpMethodTest
Number of Methods with MayMock in class: 6
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.resource.ResourceNotFoundHandlerTest
Number of Methods with MayMock in class: 4
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.resource.DefaultMethodNotAllowedHandlerTest
Number of Methods with MayMock in class: 5
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.http.iogi.IogiParametersProviderTest
Number of Methods with MayMock in class: 6
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.http.iogi.MiscIogiSupportTest
Number of Methods with MayMock in class: 2
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.http.DefaultFormatResolverTest
Number of Methods with MayMock in class: 6
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.http.DefaultResourceTranslatorTest
Number of Methods with MayMock in class: 14
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.http.route.RulesTest
Number of Methods with MayMock in class: 2
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.http.route.RouteBuilderTest
Number of Methods with MayMock in class: 2
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.http.route.DefaultParametersControlTest
Number of Methods with MayMock in class: 25
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.http.route.PathAnnotationRoutesParserTest
Number of Methods with MayMock in class: 1
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.http.route.DefaultRouterTest
Number of Methods with MayMock in class: 8
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.http.route.FixedMethodStrategyTest
Number of Methods with MayMock in class: 2
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.http.route.DefaultTypeFinderTest
Number of Methods with MayMock in class: 2
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.http.VRaptorRequestTest
Number of Methods with MayMock in class: 1
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.http.EncodingHandlerFactoryTest
Number of Methods with MayMock in class: 3
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.http.WebXmlEncodingHandlerTest
Number of Methods with MayMock in class: 2
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.http.ParametersProviderTest
Number of Methods with MayMock in class: 2
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.http.ognl.VRaptorConvertersAdapterTest
Number of Methods with MayMock in class: 4
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.http.ognl.ListNullHandlerTest
Number of Methods with MayMock in class: 3
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.http.ognl.ListAccessorTest
Number of Methods with MayMock in class: 4
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.http.ognl.GenericNullHandlerTest
Number of Methods with MayMock in class: 6
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.http.ognl.ArrayAccessorTest
Number of Methods with MayMock in class: 2
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.http.ognl.MiscOgnlSupportTest
Number of Methods with MayMock in class: 3
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.http.ognl.OgnlGenericTypesSupportTest
Number of Methods with MayMock in class: 1
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.http.ognl.ReflectionBasedNullHandlerTest
Number of Methods with MayMock in class: 3
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.view.DefaultRefererResultTest
Number of Methods with MayMock in class: 7
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.view.DefaultHttpResultTest
Number of Methods with MayMock in class: 13
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.view.DefaultPathResolverTest
Number of Methods with MayMock in class: 4
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.view.DefaultPageResultTest
Number of Methods with MayMock in class: 15
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.view.DefaultLogicResultTest
Number of Methods with MayMock in class: 14
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.view.DefaultStatusTest
Number of Methods with MayMock in class: 14
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.view.LinkToHandlerTest
Number of Methods with MayMock in class: 7
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.view.DefaultValidationViewsFactoryTest
Number of Methods with MayMock in class: 25
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.deserialization.DefaultDeserializersTest
Number of Methods with MayMock in class: 5
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.deserialization.JsonDeserializerTest
Number of Methods with MayMock in class: 6
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.deserialization.gson.GsonDeserializerTest
Number of Methods with MayMock in class: 20
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.deserialization.XStreamXmlDeserializerTest
Number of Methods with MayMock in class: 7
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.deserialization.DeserializesHandlerTest
Number of Methods with MayMock in class: 2
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.scan.NullWebAppBootstrapTest
Number of Methods with MayMock in class: 1
Number of Methods with ArrayMock in class: 1
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.scan.WebBasedClasspathResolverTest
Number of Methods with MayMock in class: 1
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.scan.JavassistBootstrapGeneratorTest
Number of Methods with MayMock in class: 3
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.scan.ScannotationComponentScannerTest
Number of Methods with MayMock in class: 4
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.scan.DynamicWebAppBootstrapTest
Number of Methods with MayMock in class: 3
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.ioc.InterceptorStereotypeHandlerTest
Number of Methods with MayMock in class: 2
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.ioc.spring.SpringBasedContainerTest
Number of Methods with MayMock in class: 1
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.ioc.spring.SpringProviderTest
Number of Methods with MayMock in class: 5
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.ioc.AbstractComponentRegistryTest
Number of Methods with MayMock in class: 3
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.ioc.guice.SessionCustomScopeTest
Number of Methods with MayMock in class: 4
Number of Methods with ArrayMock in class: 1
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.ioc.pico.PicoComponentRegistryTest
Number of Methods with MayMock in class: 1
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
** CLASS br.com.caelum.vraptor.extra.ForwardToDefaultViewInterceptorTest
Number of Methods with MayMock in class: 3
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

======================================
Benchmark vraptor_vraptor_core_3.5.5 Mock Stats
Total Number of Test/Before/After Methods: 1119
Total Number of Test/Before/After Methods with May Mock: 565
Total Number of Test/Before/After Methods with ArrayMock: 15
Total Number of Test/Before/After Methods with Collection: 0
Total Number of Helper Methods: 229
Total Number of Helper Methods with MayMock: 12
Total Number of Helper Methods with ArrayMock: 0
Total Number of Helper Methods with CollectionMock: 0

======================================
INVOCATION STATISTICS


** CLASS br.com.caelum.vraptor.util.extjs.DefaultExtJsonTest



========== method  setUp ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r2.<javax.servlet.http.HttpServletResponse: java.io.PrintWriter getWriter()>()

 InvokeExpr: interfaceinvoke $r8.<br.com.caelum.vraptor.interceptor.TypeNameExtractor: java.lang.String nameFor(java.lang.reflect.Type)>(class "Lbr/com/caelum/vraptor/util/extjs/Data;")


** CLASS br.com.caelum.vraptor.util.ISO8601UtilTest


** CLASS br.com.caelum.vraptor.util.StringnifierTest


** CLASS br.com.caelum.vraptor.util.test.MockValidatorTest



========== method  containsMessageShouldReturnTrueWhenExpectedMessageExists ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke r1.<br.com.caelum.vraptor.validator.Message: java.lang.String getMessage()>()



========== method  containsMessageShouldReturnTrueWhenExpectedMessageWithParamsExists ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke r1.<br.com.caelum.vraptor.validator.Message: java.lang.String getMessage()>()


** CLASS br.com.caelum.vraptor.util.test.MockSerializationResultTest


** CLASS br.com.caelum.vraptor.util.test.MockHttpServletResponseTest


** CLASS br.com.caelum.vraptor.util.test.MockResultTest


** CLASS br.com.caelum.vraptor.util.test.MockHttpResultTest


** CLASS br.com.caelum.vraptor.converter.LocaleBasedTimeConverterTest



========== method  shouldBeAbleToConvert ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r2.<br.com.caelum.vraptor.http.MutableRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.request")



========== method  shouldUseTheDefaultLocale ========:

 Total invocations on Mocks 6 :

 InvokeExpr: interfaceinvoke $r3.<br.com.caelum.vraptor.http.MutableRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.request")

 InvokeExpr: interfaceinvoke $r7.<br.com.caelum.vraptor.http.MutableRequest: javax.servlet.http.HttpSession getSession()>()

 InvokeExpr: interfaceinvoke $r12.<javax.servlet.http.HttpSession: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.session")

 InvokeExpr: interfaceinvoke $r16.<javax.servlet.ServletContext: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.application")

 InvokeExpr: interfaceinvoke $r20.<javax.servlet.ServletContext: java.lang.String getInitParameter(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale")

 InvokeExpr: interfaceinvoke $r24.<br.com.caelum.vraptor.http.MutableRequest: java.util.Locale getLocale()>()



========== method  shouldThrowExceptionWhenUnableToParse ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r2.<br.com.caelum.vraptor.http.MutableRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.request")


** CLASS br.com.caelum.vraptor.converter.PrimitiveIntConverterTest


** CLASS br.com.caelum.vraptor.converter.PrimitiveShortConverterTest


** CLASS br.com.caelum.vraptor.converter.IntegerConverterTest


** CLASS br.com.caelum.vraptor.converter.PrimitiveFloatConverterTest


** CLASS br.com.caelum.vraptor.converter.PrimitiveDoubleConverterTest


** CLASS br.com.caelum.vraptor.converter.LocaleBasedDateConverterTest



========== method  shouldBeAbleToConvert ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.http.MutableRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.request")



========== method  shouldUseTheDefaultLocale ========:

 Total invocations on Mocks 6 :

 InvokeExpr: interfaceinvoke $r3.<br.com.caelum.vraptor.http.MutableRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.request")

 InvokeExpr: interfaceinvoke $r7.<br.com.caelum.vraptor.http.MutableRequest: javax.servlet.http.HttpSession getSession()>()

 InvokeExpr: interfaceinvoke $r12.<javax.servlet.http.HttpSession: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.session")

 InvokeExpr: interfaceinvoke $r16.<javax.servlet.ServletContext: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.application")

 InvokeExpr: interfaceinvoke $r20.<javax.servlet.ServletContext: java.lang.String getInitParameter(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale")

 InvokeExpr: interfaceinvoke $r24.<br.com.caelum.vraptor.http.MutableRequest: java.util.Locale getLocale()>()



========== method  shouldThrowExceptionWhenUnableToParse ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r2.<br.com.caelum.vraptor.http.MutableRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.request")


** CLASS br.com.caelum.vraptor.converter.BooleanConverterTest


** CLASS br.com.caelum.vraptor.converter.ShortConverterTest


** CLASS br.com.caelum.vraptor.converter.l10n.LocaleBasedPrimitiveFloatConverterTest



========== method  shouldBeAbleToConvertWithPTBR ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.http.MutableRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.request")



========== method  shouldBeAbleToConvertWithENUS ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.http.MutableRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.request")



========== method  shouldUseTheDefaultLocale ========:

 Total invocations on Mocks 6 :

 InvokeExpr: interfaceinvoke $r3.<br.com.caelum.vraptor.http.MutableRequest: javax.servlet.http.HttpSession getSession()>()

 InvokeExpr: interfaceinvoke $r8.<br.com.caelum.vraptor.http.MutableRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.request")

 InvokeExpr: interfaceinvoke $r12.<javax.servlet.http.HttpSession: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.session")

 InvokeExpr: interfaceinvoke $r16.<javax.servlet.ServletContext: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.application")

 InvokeExpr: interfaceinvoke $r20.<javax.servlet.ServletContext: java.lang.String getInitParameter(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale")

 InvokeExpr: interfaceinvoke $r24.<br.com.caelum.vraptor.http.MutableRequest: java.util.Locale getLocale()>()



========== method  shouldThrowExceptionWhenUnableToParse ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r2.<br.com.caelum.vraptor.http.MutableRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.request")


** CLASS br.com.caelum.vraptor.converter.l10n.LocaleBasedFloatConverterTest



========== method  shouldBeAbleToConvertWithPTBR ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.http.MutableRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.request")



========== method  shouldBeAbleToConvertWithENUS ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.http.MutableRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.request")



========== method  shouldUseTheDefaultLocale ========:

 Total invocations on Mocks 6 :

 InvokeExpr: interfaceinvoke $r4.<br.com.caelum.vraptor.http.MutableRequest: javax.servlet.http.HttpSession getSession()>()

 InvokeExpr: interfaceinvoke $r9.<br.com.caelum.vraptor.http.MutableRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.request")

 InvokeExpr: interfaceinvoke $r13.<javax.servlet.http.HttpSession: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.session")

 InvokeExpr: interfaceinvoke $r17.<javax.servlet.ServletContext: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.application")

 InvokeExpr: interfaceinvoke $r21.<javax.servlet.ServletContext: java.lang.String getInitParameter(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale")

 InvokeExpr: interfaceinvoke $r25.<br.com.caelum.vraptor.http.MutableRequest: java.util.Locale getLocale()>()



========== method  shouldThrowExceptionWhenUnableToParse ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r2.<br.com.caelum.vraptor.http.MutableRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.request")


** CLASS br.com.caelum.vraptor.converter.l10n.LocaleBasedDoubleConverterTest



========== method  shouldBeAbleToConvertWithPTBR ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.http.MutableRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.request")



========== method  shouldBeAbleToConvertWithENUS ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.http.MutableRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.request")



========== method  shouldUseTheDefaultLocale ========:

 Total invocations on Mocks 6 :

 InvokeExpr: interfaceinvoke $r4.<br.com.caelum.vraptor.http.MutableRequest: javax.servlet.http.HttpSession getSession()>()

 InvokeExpr: interfaceinvoke $r9.<br.com.caelum.vraptor.http.MutableRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.request")

 InvokeExpr: interfaceinvoke $r13.<javax.servlet.http.HttpSession: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.session")

 InvokeExpr: interfaceinvoke $r17.<javax.servlet.ServletContext: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.application")

 InvokeExpr: interfaceinvoke $r21.<javax.servlet.ServletContext: java.lang.String getInitParameter(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale")

 InvokeExpr: interfaceinvoke $r25.<br.com.caelum.vraptor.http.MutableRequest: java.util.Locale getLocale()>()



========== method  shouldThrowExceptionWhenUnableToParse ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r2.<br.com.caelum.vraptor.http.MutableRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.request")


** CLASS br.com.caelum.vraptor.converter.l10n.LocaleBasedBigDecimalConverterTest



========== method  shouldBeAbleToConvertWithPTBR ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.http.MutableRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.request")



========== method  shouldBeAbleToConvertWithENUS ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.http.MutableRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.request")



========== method  shouldUseTheDefaultLocale ========:

 Total invocations on Mocks 6 :

 InvokeExpr: interfaceinvoke $r4.<br.com.caelum.vraptor.http.MutableRequest: javax.servlet.http.HttpSession getSession()>()

 InvokeExpr: interfaceinvoke $r9.<br.com.caelum.vraptor.http.MutableRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.request")

 InvokeExpr: interfaceinvoke $r13.<javax.servlet.http.HttpSession: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.session")

 InvokeExpr: interfaceinvoke $r17.<javax.servlet.ServletContext: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.application")

 InvokeExpr: interfaceinvoke $r21.<javax.servlet.ServletContext: java.lang.String getInitParameter(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale")

 InvokeExpr: interfaceinvoke $r25.<br.com.caelum.vraptor.http.MutableRequest: java.util.Locale getLocale()>()



========== method  shouldThrowExceptionWhenUnableToParse ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r2.<br.com.caelum.vraptor.http.MutableRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.request")


** CLASS br.com.caelum.vraptor.converter.l10n.LocaleBasedPrimitiveDoubleConverterTest



========== method  shouldBeAbleToConvertWithPTBR ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.http.MutableRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.request")



========== method  shouldBeAbleToConvertWithENUS ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.http.MutableRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.request")



========== method  shouldUseTheDefaultLocale ========:

 Total invocations on Mocks 6 :

 InvokeExpr: interfaceinvoke $r3.<br.com.caelum.vraptor.http.MutableRequest: javax.servlet.http.HttpSession getSession()>()

 InvokeExpr: interfaceinvoke $r8.<br.com.caelum.vraptor.http.MutableRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.request")

 InvokeExpr: interfaceinvoke $r12.<javax.servlet.http.HttpSession: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.session")

 InvokeExpr: interfaceinvoke $r16.<javax.servlet.ServletContext: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.application")

 InvokeExpr: interfaceinvoke $r20.<javax.servlet.ServletContext: java.lang.String getInitParameter(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale")

 InvokeExpr: interfaceinvoke $r24.<br.com.caelum.vraptor.http.MutableRequest: java.util.Locale getLocale()>()



========== method  shouldThrowExceptionWhenUnableToParse ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r2.<br.com.caelum.vraptor.http.MutableRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.request")


** CLASS br.com.caelum.vraptor.converter.LongConverterTest


** CLASS br.com.caelum.vraptor.converter.EnumConverterTest


** CLASS br.com.caelum.vraptor.converter.LocaleBasedCalendarConverterTest



========== method  shouldBeAbleToConvert ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.http.MutableRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.request")



========== method  shouldUseTheDefaultLocale ========:

 Total invocations on Mocks 6 :

 InvokeExpr: interfaceinvoke $r4.<br.com.caelum.vraptor.http.MutableRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.request")

 InvokeExpr: interfaceinvoke $r8.<br.com.caelum.vraptor.http.MutableRequest: javax.servlet.http.HttpSession getSession()>()

 InvokeExpr: interfaceinvoke $r13.<javax.servlet.http.HttpSession: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.session")

 InvokeExpr: interfaceinvoke $r17.<javax.servlet.ServletContext: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.application")

 InvokeExpr: interfaceinvoke $r21.<javax.servlet.ServletContext: java.lang.String getInitParameter(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale")

 InvokeExpr: interfaceinvoke $r25.<br.com.caelum.vraptor.http.MutableRequest: java.util.Locale getLocale()>()



========== method  shouldThrowExceptionWhenUnableToParse ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r2.<br.com.caelum.vraptor.http.MutableRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.request")


** CLASS br.com.caelum.vraptor.converter.PrimitiveByteConverterTest


** CLASS br.com.caelum.vraptor.converter.PrimitiveBooleanConverterTest


** CLASS br.com.caelum.vraptor.converter.BigIntegerConverterTest


** CLASS br.com.caelum.vraptor.converter.DoubleConverterTest


** CLASS br.com.caelum.vraptor.converter.ByteConverterTest


** CLASS br.com.caelum.vraptor.converter.jodatime.LocaleBasedJodaTimeConverterTest



========== method  shouldUseTheDefaultLocale ========:

 Total invocations on Mocks 6 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.http.MutableRequest: javax.servlet.http.HttpSession getSession()>()

 InvokeExpr: interfaceinvoke $r6.<br.com.caelum.vraptor.http.MutableRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.request")

 InvokeExpr: interfaceinvoke $r10.<javax.servlet.http.HttpSession: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.session")

 InvokeExpr: interfaceinvoke $r14.<javax.servlet.ServletContext: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.application")

 InvokeExpr: interfaceinvoke $r18.<javax.servlet.ServletContext: java.lang.String getInitParameter(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale")

 InvokeExpr: interfaceinvoke $r22.<br.com.caelum.vraptor.http.MutableRequest: java.util.Locale getLocale()>()



========== method  shouldUseTheDefaulJvmtLocale ========:

 Total invocations on Mocks 6 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.http.MutableRequest: javax.servlet.http.HttpSession getSession()>()

 InvokeExpr: interfaceinvoke $r6.<br.com.caelum.vraptor.http.MutableRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.request")

 InvokeExpr: interfaceinvoke $r10.<javax.servlet.http.HttpSession: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.session")

 InvokeExpr: interfaceinvoke $r14.<javax.servlet.ServletContext: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.application")

 InvokeExpr: interfaceinvoke $r18.<javax.servlet.ServletContext: java.lang.String getInitParameter(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale")

 InvokeExpr: interfaceinvoke $r22.<br.com.caelum.vraptor.http.MutableRequest: java.util.Locale getLocale()>()


** CLASS br.com.caelum.vraptor.converter.jodatime.DateTimeConverterTest



========== method  shouldBeAbleToConvert ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.http.MutableRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.request")



========== method  shouldThrowExceptionWhenUnableToParse ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r2.<br.com.caelum.vraptor.http.MutableRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.request")


** CLASS br.com.caelum.vraptor.converter.jodatime.LocalDateTimeConverterTest



========== method  shouldBeAbleToConvert ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.http.MutableRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.request")



========== method  shouldThrowExceptionWhenUnableToParse ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r2.<br.com.caelum.vraptor.http.MutableRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.request")


** CLASS br.com.caelum.vraptor.converter.jodatime.LocalDateConverterTest



========== method  shouldBeAbleToConvert ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.http.MutableRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.request")



========== method  shouldThrowExceptionWhenUnableToParse ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r2.<br.com.caelum.vraptor.http.MutableRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.request")


** CLASS br.com.caelum.vraptor.converter.jodatime.LocalTimeConverterTest



========== method  shouldBeAbleToConvert ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.http.MutableRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.request")



========== method  shouldThrowExceptionWhenUnableToParse ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r2.<br.com.caelum.vraptor.http.MutableRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.request")


** CLASS br.com.caelum.vraptor.converter.jodatime.DateMidnightConverterTest



========== method  shouldBeAbleToConvert ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.http.MutableRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.request")



========== method  shouldThrowExceptionWhenUnableToParse ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r2.<br.com.caelum.vraptor.http.MutableRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.request")


** CLASS br.com.caelum.vraptor.converter.PrimitiveCharConverterTest


** CLASS br.com.caelum.vraptor.converter.PrimitiveLongConverterTest


** CLASS br.com.caelum.vraptor.converter.FloatConverterTest


** CLASS br.com.caelum.vraptor.converter.CharacterConverterTest


** CLASS br.com.caelum.vraptor.converter.BigDecimalConverterTest


** CLASS br.com.caelum.vraptor.restfulie.relation.DefaultRelationBuilderTest



========== method  shouldBuildRelationsOfControllersUsingMethodNameByDefault ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r3.<br.com.caelum.vraptor.http.route.Router: java.lang.String urlFor(java.lang.Class,java.lang.reflect.Method,java.lang.Object[])>(class "Lbr/com/caelum/vraptor/restfulie/relation/DefaultRelationBuilderTest$Controller;", $r2, $r1)



========== method  shouldBuildRelationsOfControllersUsingGivenName ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r3.<br.com.caelum.vraptor.http.route.Router: java.lang.String urlFor(java.lang.Class,java.lang.reflect.Method,java.lang.Object[])>(class "Lbr/com/caelum/vraptor/restfulie/relation/DefaultRelationBuilderTest$Controller;", $r2, $r1)


** CLASS br.com.caelum.vraptor.restfulie.headers.DefaultRestHeadersHandlerTest



========== method  whenResourceIsCacheableAddMaxAge ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r6.<javax.servlet.http.HttpServletResponse: void addHeader(java.lang.String,java.lang.String)>("Cache-control", "max-age=150")



========== method  whenNotExplicitlyRestfulEntityUseDefaultEtagAndLastModified ========:

 Total invocations on Mocks 4 :

 InvokeExpr: interfaceinvoke $r4.<br.com.caelum.vraptor.restfulie.headers.RestDefaults: java.util.Calendar getLastModifiedFor(br.com.caelum.vraptor.restfulie.hypermedia.HypermediaResource)>(r1)

 InvokeExpr: interfaceinvoke $r8.<br.com.caelum.vraptor.restfulie.headers.RestDefaults: java.lang.String getEtagFor(br.com.caelum.vraptor.restfulie.hypermedia.HypermediaResource)>(r1)

 InvokeExpr: interfaceinvoke $r15.<javax.servlet.http.HttpServletResponse: void addHeader(java.lang.String,java.lang.String)>("ETag", "custom etag")

 InvokeExpr: interfaceinvoke $r18.<javax.servlet.http.HttpServletResponse: void setDateHeader(java.lang.String,long)>("Last-modified", $l0)



========== method  whenRestfulEntityIsHandledShouldUseItsValues ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r6.<javax.servlet.http.HttpServletResponse: void addHeader(java.lang.String,java.lang.String)>("ETag", "MY ETAG")

 InvokeExpr: interfaceinvoke $r9.<javax.servlet.http.HttpServletResponse: void setDateHeader(java.lang.String,long)>("Last-modified", $l0)


** CLASS br.com.caelum.vraptor.restfulie.serialization.MethodValueSupportConverterTest


** CLASS br.com.caelum.vraptor.restfulie.serialization.RestfulSerializationJSONTest


** CLASS br.com.caelum.vraptor.restfulie.serialization.RestfulSerializationTest


** CLASS br.com.caelum.vraptor.restfulie.LinkConverterTest



========== method  setup ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r5.<br.com.caelum.vraptor.restfulie.Restfulie: br.com.caelum.vraptor.restfulie.relation.RelationBuilder newRelationBuilder()>()

 InvokeExpr: interfaceinvoke r1.<br.com.caelum.vraptor.config.Configuration: java.lang.String getApplicationPath()>()



========== method  shouldSetupRelations ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r7.<br.com.caelum.vraptor.restfulie.hypermedia.HypermediaResource: void configureRelations(br.com.caelum.vraptor.restfulie.relation.RelationBuilder)>($r6)



========== method  shouldSerializeOneLinkIfThereIsATransition ========:

 Total invocations on Mocks 3 :

 InvokeExpr: interfaceinvoke r1.<br.com.caelum.vraptor.restfulie.relation.Relation: java.lang.String getName()>()

 InvokeExpr: interfaceinvoke r1.<br.com.caelum.vraptor.restfulie.relation.Relation: java.lang.String getUri()>()

 InvokeExpr: interfaceinvoke $r10.<br.com.caelum.vraptor.restfulie.relation.RelationBuilder: java.util.List getRelations()>()



========== method  shouldSerializeAllLinksIfThereAreTransitions ========:

 Total invocations on Mocks 5 :

 InvokeExpr: interfaceinvoke r1.<br.com.caelum.vraptor.restfulie.relation.Relation: java.lang.String getName()>()

 InvokeExpr: interfaceinvoke r1.<br.com.caelum.vraptor.restfulie.relation.Relation: java.lang.String getUri()>()

 InvokeExpr: interfaceinvoke r2.<br.com.caelum.vraptor.restfulie.relation.Relation: java.lang.String getName()>()

 InvokeExpr: interfaceinvoke r2.<br.com.caelum.vraptor.restfulie.relation.Relation: java.lang.String getUri()>()

 InvokeExpr: interfaceinvoke $r18.<br.com.caelum.vraptor.restfulie.relation.RelationBuilder: java.util.List getRelations()>()


** CLASS br.com.caelum.vraptor.restfulie.LinkConverterJSONTest



========== method  setup ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r5.<br.com.caelum.vraptor.restfulie.Restfulie: br.com.caelum.vraptor.restfulie.relation.RelationBuilder newRelationBuilder()>()

 InvokeExpr: interfaceinvoke r1.<br.com.caelum.vraptor.config.Configuration: java.lang.String getApplicationPath()>()



========== method  shouldSerializeOneLinkIfThereIsATransition ========:

 Total invocations on Mocks 3 :

 InvokeExpr: interfaceinvoke r1.<br.com.caelum.vraptor.restfulie.relation.Relation: java.lang.String getName()>()

 InvokeExpr: interfaceinvoke r1.<br.com.caelum.vraptor.restfulie.relation.Relation: java.lang.String getUri()>()

 InvokeExpr: interfaceinvoke $r11.<br.com.caelum.vraptor.restfulie.relation.RelationBuilder: java.util.List getRelations()>()



========== method  shouldSerializeAllLinksIfThereAreTransitions ========:

 Total invocations on Mocks 5 :

 InvokeExpr: interfaceinvoke r1.<br.com.caelum.vraptor.restfulie.relation.Relation: java.lang.String getName()>()

 InvokeExpr: interfaceinvoke r1.<br.com.caelum.vraptor.restfulie.relation.Relation: java.lang.String getUri()>()

 InvokeExpr: interfaceinvoke r2.<br.com.caelum.vraptor.restfulie.relation.Relation: java.lang.String getName()>()

 InvokeExpr: interfaceinvoke r2.<br.com.caelum.vraptor.restfulie.relation.Relation: java.lang.String getUri()>()

 InvokeExpr: interfaceinvoke $r19.<br.com.caelum.vraptor.restfulie.relation.RelationBuilder: java.util.List getRelations()>()


** CLASS br.com.caelum.vraptor.config.BasicConfigurationTest



========== method  shouldReadRootDirectoryAsWebinfClasses ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r1.<javax.servlet.ServletContext: java.lang.String getRealPath(java.lang.String)>("/WEB-INF/classes/")



========== method  shouldUseSpringContainerAsDefaultProvider ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r1.<javax.servlet.ServletContext: java.lang.String getInitParameter(java.lang.String)>("br.com.caelum.vraptor.provider")



========== method  shouldUseGuiceAs1stAlternative ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r4.<javax.servlet.ServletContext: java.lang.String getInitParameter(java.lang.String)>("br.com.caelum.vraptor.provider")



========== method  shouldUsePicoAs2ndAlternative ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r4.<javax.servlet.ServletContext: java.lang.String getInitParameter(java.lang.String)>("br.com.caelum.vraptor.provider")



========== method  shouldThrowExceptionWhenProviderClassWasNotFound ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r2.<javax.servlet.ServletContext: java.lang.String getInitParameter(java.lang.String)>("br.com.caelum.vraptor.provider")



========== method  shouldThrowIllegalArgumentExceptionWhenProvidersWasNotFound ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r5.<javax.servlet.ServletContext: java.lang.String getInitParameter(java.lang.String)>("br.com.caelum.vraptor.provider")



========== method  shouldReturnThatHasNoBasePackageWhenInitParamNull ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r1.<javax.servlet.ServletContext: java.lang.String getInitParameter(java.lang.String)>("br.com.caelum.vraptor.packages")



========== method  shouldThrowMissingConfigurationExceptionIfHasNoBasePackages ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r1.<javax.servlet.ServletContext: java.lang.String getInitParameter(java.lang.String)>("br.com.caelum.vraptor.provider")



========== method  testIfClasspathScanningIsEnabled ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r1.<javax.servlet.ServletContext: java.lang.String getInitParameter(java.lang.String)>("br.com.caelum.vraptor.scanning")



========== method  testIfHasBasePackages ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r1.<javax.servlet.ServletContext: java.lang.String getInitParameter(java.lang.String)>("br.com.caelum.vraptor.packages")



========== method  shouldReturnBasePackagesWhenInitParamNotNull ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r1.<javax.servlet.ServletContext: java.lang.String getInitParameter(java.lang.String)>("br.com.caelum.vraptor.packages")



========== method  shouldReturnBasePackagesArrayWhenInitParamNotNullAndHasComas ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r1.<javax.servlet.ServletContext: java.lang.String getInitParameter(java.lang.String)>("br.com.caelum.vraptor.packages")



========== method  shouldReturnBasePackagesArrayWhenInitParamNotNullAndHasComasAndSpaces ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r1.<javax.servlet.ServletContext: java.lang.String getInitParameter(java.lang.String)>("br.com.caelum.vraptor.packages")



========== method  shouldReturnBasePackagesArrayWhenInitParamHasLeadingAndTrailingSpaces ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r1.<javax.servlet.ServletContext: java.lang.String getInitParameter(java.lang.String)>("br.com.caelum.vraptor.packages")



========== method  shouldAllowProviderOverriding ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r1.<javax.servlet.ServletContext: java.lang.String getInitParameter(java.lang.String)>("br.com.caelum.vraptor.provider")



========== method  shouldThrowInstantiationExceptionCauseIfThereIsSuchException ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r2.<javax.servlet.ServletContext: java.lang.String getInitParameter(java.lang.String)>("br.com.caelum.vraptor.provider")


** CLASS br.com.caelum.vraptor.config.ApplicationConfigurationTest



========== method  shouldNotUsePortWhenPortIs80 ========:

 Total invocations on Mocks 4 :

 InvokeExpr: interfaceinvoke $r1.<javax.servlet.http.HttpServletRequest: java.lang.String getScheme()>()

 InvokeExpr: interfaceinvoke $r5.<javax.servlet.http.HttpServletRequest: java.lang.String getServerName()>()

 InvokeExpr: interfaceinvoke $r9.<javax.servlet.http.HttpServletRequest: int getServerPort()>()

 InvokeExpr: interfaceinvoke $r14.<javax.servlet.http.HttpServletRequest: java.lang.String getContextPath()>()



========== method  shouldGiveFullUrlWithPortWhenPortIsNot80 ========:

 Total invocations on Mocks 4 :

 InvokeExpr: interfaceinvoke $r1.<javax.servlet.http.HttpServletRequest: java.lang.String getScheme()>()

 InvokeExpr: interfaceinvoke $r5.<javax.servlet.http.HttpServletRequest: java.lang.String getServerName()>()

 InvokeExpr: interfaceinvoke $r9.<javax.servlet.http.HttpServletRequest: int getServerPort()>()

 InvokeExpr: interfaceinvoke $r14.<javax.servlet.http.HttpServletRequest: java.lang.String getContextPath()>()


** CLASS br.com.caelum.vraptor.serialization.gson.adapters.MessageSerializerTest


** CLASS br.com.caelum.vraptor.serialization.gson.GsonJSONSerializationTest



========== method  setup ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r4.<javax.servlet.http.HttpServletResponse: java.io.PrintWriter getWriter()>()



========== method  shouldRunHibernateLazyInitialization ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke r2.<org.hibernate.proxy.HibernateProxy: org.hibernate.proxy.LazyInitializer getHibernateLazyInitializer()>()


** CLASS br.com.caelum.vraptor.serialization.xstream.XStreamXMLSerializationTest



========== method  setup ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: java.io.PrintWriter getWriter()>()


** CLASS br.com.caelum.vraptor.serialization.xstream.XStreamJSONSerializationTest



========== method  setup ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r4.<javax.servlet.http.HttpServletResponse: java.io.PrintWriter getWriter()>()



========== method  shouldRunHibernateLazyInitialization ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke r1.<org.hibernate.proxy.LazyInitializer: java.lang.Class getPersistentClass()>()

 InvokeExpr: interfaceinvoke $r14.<org.hibernate.proxy.LazyInitializer: void initialize()>()


** CLASS br.com.caelum.vraptor.serialization.xstream.XStreamJSONPSerializationTest



========== method  setup ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: java.io.PrintWriter getWriter()>()


** CLASS br.com.caelum.vraptor.serialization.PackageComparatorTest


** CLASS br.com.caelum.vraptor.serialization.HTMLSerializationTest



========== method  setUp ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.Result: br.com.caelum.vraptor.View use(java.lang.Class)>(class "Lbr/com/caelum/vraptor/view/PageResult;")



========== method  shouldForwardToDefaultViewWithoutAlias ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r6.<br.com.caelum.vraptor.view.PageResult: void defaultView()>()



========== method  shouldForwardToDefaultViewWithAlias ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r6.<br.com.caelum.vraptor.view.PageResult: void defaultView()>()



========== method  shouldIncludeOnResultWithoutAlias ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r3.<br.com.caelum.vraptor.interceptor.TypeNameExtractor: java.lang.String nameFor(java.lang.reflect.Type)>(class "Ljava/lang/Object;")

 InvokeExpr: interfaceinvoke $r11.<br.com.caelum.vraptor.Result: br.com.caelum.vraptor.Result include(java.lang.String,java.lang.Object)>("obj", r1)



========== method  shouldIncludeOnResultWithAlias ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r7.<br.com.caelum.vraptor.Result: br.com.caelum.vraptor.Result include(java.lang.String,java.lang.Object)>("Abc", r1)


** CLASS br.com.caelum.vraptor.serialization.I18nMessageSerializationTest



========== method  setup ========:

 Total invocations on Mocks 3 :

 InvokeExpr: interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: java.io.PrintWriter getWriter()>()

 InvokeExpr: interfaceinvoke r7.<br.com.caelum.vraptor.ioc.Container: java.lang.Object instanceFor(java.lang.Class)>(class "Lbr/com/caelum/vraptor/serialization/JSONSerialization;")

 InvokeExpr: interfaceinvoke r7.<br.com.caelum.vraptor.ioc.Container: java.lang.Object instanceFor(java.lang.Class)>(class "Lbr/com/caelum/vraptor/serialization/XMLSerialization;")


** CLASS br.com.caelum.vraptor.serialization.DefaultXMLConfigurationTest


** CLASS br.com.caelum.vraptor.serialization.DefaultRepresentationResultTest



========== method  setUp ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.Result: br.com.caelum.vraptor.View use(java.lang.Class)>(class "Lbr/com/caelum/vraptor/view/PageResult;")

 InvokeExpr: interfaceinvoke $r6.<br.com.caelum.vraptor.Result: br.com.caelum.vraptor.View use(java.lang.Class)>(class "Lbr/com/caelum/vraptor/view/Status;")



========== method  whenThereIsNoFormatGivenShouldForwardToDefaultPage ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r2.<br.com.caelum.vraptor.http.FormatResolver: java.lang.String getAcceptFormat()>()

 InvokeExpr: interfaceinvoke $r12.<br.com.caelum.vraptor.view.Status: void notAcceptable()>()



========== method  shouldSend404IfNothingIsRendered ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r2.<br.com.caelum.vraptor.http.FormatResolver: java.lang.String getAcceptFormat()>()

 InvokeExpr: interfaceinvoke $r11.<br.com.caelum.vraptor.view.Status: void notFound()>()



========== method  whenThereIsNoFormatGivenShouldForwardToDefaultPageWithAlias ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r3.<br.com.caelum.vraptor.http.FormatResolver: java.lang.String getAcceptFormat()>()

 InvokeExpr: interfaceinvoke $r13.<br.com.caelum.vraptor.view.Status: void notAcceptable()>()



========== method  whenThereIsAFormatGivenShouldUseCorrectSerializer ========:

 Total invocations on Mocks 3 :

 InvokeExpr: interfaceinvoke $r2.<br.com.caelum.vraptor.http.FormatResolver: java.lang.String getAcceptFormat()>()

 InvokeExpr: interfaceinvoke $r6.<br.com.caelum.vraptor.serialization.Serialization: boolean accepts(java.lang.String)>("xml")

 InvokeExpr: interfaceinvoke $r16.<br.com.caelum.vraptor.serialization.Serialization: br.com.caelum.vraptor.serialization.Serializer 'from'(java.lang.Object)>(r1)



========== method  whenThereIsAFormatGivenShouldUseCorrectSerializerWithAlias ========:

 Total invocations on Mocks 3 :

 InvokeExpr: interfaceinvoke $r2.<br.com.caelum.vraptor.http.FormatResolver: java.lang.String getAcceptFormat()>()

 InvokeExpr: interfaceinvoke $r6.<br.com.caelum.vraptor.serialization.Serialization: boolean accepts(java.lang.String)>("xml")

 InvokeExpr: interfaceinvoke $r16.<br.com.caelum.vraptor.serialization.Serialization: br.com.caelum.vraptor.serialization.Serializer 'from'(java.lang.Object,java.lang.String)>(r1, "Alias!")



========== method  whenSerializationDontAcceptsFormatItShouldntBeUsed ========:

 Total invocations on Mocks 3 :

 InvokeExpr: interfaceinvoke $r2.<br.com.caelum.vraptor.http.FormatResolver: java.lang.String getAcceptFormat()>()

 InvokeExpr: interfaceinvoke $r6.<br.com.caelum.vraptor.serialization.Serialization: boolean accepts(java.lang.String)>("xml")

 InvokeExpr: interfaceinvoke $r17.<br.com.caelum.vraptor.serialization.Serialization: br.com.caelum.vraptor.serialization.Serializer 'from'(java.lang.Object)>(r1)



========== method  whenTheResourceIsHypermediaAddRestHeaders ========:

 Total invocations on Mocks 4 :

 InvokeExpr: interfaceinvoke $r2.<br.com.caelum.vraptor.http.FormatResolver: java.lang.String getAcceptFormat()>()

 InvokeExpr: interfaceinvoke $r6.<br.com.caelum.vraptor.serialization.Serialization: boolean accepts(java.lang.String)>("xml")

 InvokeExpr: interfaceinvoke $r16.<br.com.caelum.vraptor.serialization.Serialization: br.com.caelum.vraptor.serialization.Serializer 'from'(java.lang.Object)>(r1)

 InvokeExpr: interfaceinvoke $r20.<br.com.caelum.vraptor.restfulie.RestHeadersHandler: void handle(br.com.caelum.vraptor.restfulie.hypermedia.HypermediaResource)>(r1)


** CLASS br.com.caelum.vraptor.VRaptorTest



========== method  shouldExecuteARequestUsingTheSpecifiedContainer ========:

 Total invocations on Mocks 10 :

 InvokeExpr: interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()

 InvokeExpr: interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getContextPath()>()

 InvokeExpr: interfaceinvoke $r12.<javax.servlet.ServletContext: java.net.URL getResource(java.lang.String)>("/unknown_file")

 InvokeExpr: interfaceinvoke $r16.<javax.servlet.FilterConfig: javax.servlet.ServletContext getServletContext()>()

 InvokeExpr: interfaceinvoke $r21.<javax.servlet.ServletContext: java.lang.String getInitParameter(java.lang.String)>("br.com.caelum.vraptor.provider")

 InvokeExpr: interfaceinvoke $r27.<javax.servlet.ServletContext: java.lang.Object getAttribute(java.lang.String)>("container")

 InvokeExpr: interfaceinvoke $r32.<br.com.caelum.vraptor.ioc.Container: java.lang.Object instanceFor(java.lang.Class)>(class "Lbr/com/caelum/vraptor/core/RequestExecution;")

 InvokeExpr: interfaceinvoke $r37.<br.com.caelum.vraptor.ioc.Container: java.lang.Object instanceFor(java.lang.Class)>(class "Lbr/com/caelum/vraptor/core/StaticContentHandler;")

 InvokeExpr: interfaceinvoke $r43.<br.com.caelum.vraptor.ioc.Container: java.lang.Object instanceFor(java.lang.Class)>(class "Lbr/com/caelum/vraptor/http/EncodingHandler;")

 InvokeExpr: interfaceinvoke $r53.<br.com.caelum.vraptor.core.RequestExecution: void execute()>()



========== method  shouldStopContainer ========:

 Total invocations on Mocks 3 :

 InvokeExpr: interfaceinvoke $r2.<javax.servlet.FilterConfig: javax.servlet.ServletContext getServletContext()>()

 InvokeExpr: interfaceinvoke $r7.<javax.servlet.ServletContext: java.lang.String getInitParameter(java.lang.String)>("br.com.caelum.vraptor.provider")

 InvokeExpr: interfaceinvoke $r13.<br.com.caelum.vraptor.ioc.Container: java.lang.Object instanceFor(java.lang.Class)>(class "Lbr/com/caelum/vraptor/core/StaticContentHandler;")



========== method  shouldDeferToContainerIfStaticFile ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke r4.<br.com.caelum.vraptor.core.StaticContentHandler: boolean requestingStaticFile(javax.servlet.http.HttpServletRequest)>(r2)

 InvokeExpr: interfaceinvoke $r18.<br.com.caelum.vraptor.core.StaticContentHandler: void deferProcessingToContainer(javax.servlet.FilterChain,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(r5, r2, r3)


** CLASS br.com.caelum.vraptor.validator.ReplicatorOutjectorTest



========== method  setUp ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.core.MethodInfo: br.com.caelum.vraptor.resource.ResourceMethod getResourceMethod()>()



========== method  shouldReplicateMethodParametersToNextRequest ========:

 Total invocations on Mocks 5 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.http.ParameterNameProvider: java.lang.String[] parameterNamesFor(java.lang.reflect.AccessibleObject)>($r3)

 InvokeExpr: interfaceinvoke $r8.<br.com.caelum.vraptor.core.MethodInfo: java.lang.Object[] getParameters()>()

 InvokeExpr: interfaceinvoke $r19.<br.com.caelum.vraptor.Result: br.com.caelum.vraptor.Result include(java.lang.String,java.lang.Object)>("first", $r20)

 InvokeExpr: interfaceinvoke $r24.<br.com.caelum.vraptor.Result: br.com.caelum.vraptor.Result include(java.lang.String,java.lang.Object)>("second", $r25)

 InvokeExpr: interfaceinvoke $r29.<br.com.caelum.vraptor.Result: br.com.caelum.vraptor.Result include(java.lang.String,java.lang.Object)>("third", $r30)


** CLASS br.com.caelum.vraptor.validator.ValidationsTest


** CLASS br.com.caelum.vraptor.validator.BeanValidatorTest



========== method  shouldValidateWithMyLocale ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r3.<br.com.caelum.vraptor.core.Localization: java.util.Locale getLocale()>()



========== method  shouldValidateWithDefaultLocale ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r3.<br.com.caelum.vraptor.core.Localization: java.util.Locale getLocale()>()


** CLASS br.com.caelum.vraptor.validator.DefaultValidatorTest



========== method  setup ========:

 Total invocations on Mocks 5 :

 InvokeExpr: interfaceinvoke $r11.<br.com.caelum.vraptor.Result: br.com.caelum.vraptor.View use(java.lang.Class)>(class "Lbr/com/caelum/vraptor/view/LogicResult;")

 InvokeExpr: interfaceinvoke $r16.<br.com.caelum.vraptor.Result: br.com.caelum.vraptor.View use(java.lang.Class)>(class "Lbr/com/caelum/vraptor/view/PageResult;")

 InvokeExpr: interfaceinvoke $r21.<br.com.caelum.vraptor.view.LogicResult: java.lang.Object forwardTo(java.lang.Class)>(class "Lbr/com/caelum/vraptor/validator/DefaultValidatorTest$MyComponent;")

 InvokeExpr: interfaceinvoke $r26.<br.com.caelum.vraptor.view.PageResult: java.lang.Object of(java.lang.Class)>(class "Lbr/com/caelum/vraptor/validator/DefaultValidatorTest$MyComponent;")

 InvokeExpr: interfaceinvoke $r31.<br.com.caelum.vraptor.core.Localization: java.util.ResourceBundle getBundle()>()



========== method  outjectsTheRequestParameters ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r9.<br.com.caelum.vraptor.validator.Outjector: void outjectRequestMap()>()



========== method  addsTheErrorsOnTheResult ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r9.<br.com.caelum.vraptor.Result: br.com.caelum.vraptor.Result include(java.lang.String,java.lang.Object)>($r11, $r15)



========== method  forwardToCustomOnErrorPage ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r2.<br.com.caelum.vraptor.view.LogicResult: java.lang.Object forwardTo(java.lang.Class)>(class "Lbr/com/caelum/vraptor/validator/DefaultValidatorTest$MyComponent;")

 InvokeExpr: interfaceinvoke $r15.<br.com.caelum.vraptor.validator.DefaultValidatorTest$MyComponent: void logic()>()



========== method  shouldNotRedirectIfHasNotErrors ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r11.<br.com.caelum.vraptor.validator.Outjector: void outjectRequestMap()>()



========== method  shouldAddBeanValidatorErrorsIfPossible ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r3.<br.com.caelum.vraptor.validator.BeanValidator: java.util.List validate(java.lang.Object,java.lang.Class[])>($r4, $r5)

 InvokeExpr: interfaceinvoke $r16.<br.com.caelum.vraptor.validator.BeanValidator: java.util.List validate(java.lang.Object,java.lang.Class[])>($r17, $r18)



========== method  shouldAddBeanValidatorErrorsIfPossibleForSpecificProperties ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r3.<br.com.caelum.vraptor.validator.BeanValidator: java.util.List validateProperties(java.lang.Object,java.lang.String[])>($r4, $r5)

 InvokeExpr: interfaceinvoke $r16.<br.com.caelum.vraptor.validator.BeanValidator: java.util.List validateProperties(java.lang.Object,java.lang.String[])>($r17, $r18)



========== method  testThatValidatorGoToRedirectsToTheErrorPageImmediatellyAndNotBeforeThis ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r8.<br.com.caelum.vraptor.view.PageResult: java.lang.Object of(java.lang.Class)>(class "Lbr/com/caelum/vraptor/validator/DefaultValidatorTest$MyComponent;")

 InvokeExpr: interfaceinvoke $r19.<br.com.caelum.vraptor.validator.DefaultValidatorTest$MyComponent: void logic()>()



========== method  shouldSetBundleOnI18nMessagesLazily ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r4.<br.com.caelum.vraptor.core.Localization: java.util.ResourceBundle getBundle()>()



========== method  shouldOnlySetBundleOnI18nMessagesThatHasNotBeenSetBefore ========:

 Total invocations on Mocks 2 :

 InvokeExpr: virtualinvoke r1.<br.com.caelum.vraptor.validator.I18nMessage: boolean hasBundle()>()

 InvokeExpr: virtualinvoke $r10.<br.com.caelum.vraptor.validator.I18nMessage: void setBundle(java.util.ResourceBundle)>($r12)


** CLASS br.com.caelum.vraptor.validator.ValidatorAcceptanceTest



========== method  setup ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r9.<br.com.caelum.vraptor.core.Localization: java.util.ResourceBundle getBundle()>()


** CLASS br.com.caelum.vraptor.validator.MethodValidatorTest



========== method  shouldValidateMethodWithConstraint ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r13.<br.com.caelum.vraptor.core.Localization: java.util.Locale getLocale()>()



========== method  shouldValidateMethodWithTwoConstraints ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r15.<br.com.caelum.vraptor.core.Localization: java.util.Locale getLocale()>()


** CLASS br.com.caelum.vraptor.interceptor.ExceptionHandlerInterceptorTest



========== method  withRootException ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r3.<br.com.caelum.vraptor.core.ExceptionMapper: br.com.caelum.vraptor.core.ExceptionRecorder findByException(java.lang.Exception)>(r1)

 InvokeExpr: virtualinvoke $r22.<br.com.caelum.vraptor.core.ExceptionRecorder: void replay(br.com.caelum.vraptor.Result)>($r21)



========== method  whenNotFoundException ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r4.<br.com.caelum.vraptor.core.ExceptionMapper: br.com.caelum.vraptor.core.ExceptionRecorder findByException(java.lang.Exception)>(r1)


** CLASS br.com.caelum.vraptor.interceptor.DefaultTypeNameExtractorTest


** CLASS br.com.caelum.vraptor.interceptor.DeserializingInterceptorTest



========== method  willSetHttpStatusCode415IfTheResourceMethodDoesNotSupportTheGivenMediaTypes ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r1.<javax.servlet.http.HttpServletRequest: java.lang.String getContentType()>()

 InvokeExpr: interfaceinvoke $r10.<br.com.caelum.vraptor.view.Status: void unsupportedMediaType(java.lang.String)>("Request with media type [image/jpeg]. Expecting one of [application/xml].")



========== method  willSetHttpStatusCode415IfThereIsNoDeserializerButIsAccepted ========:

 Total invocations on Mocks 3 :

 InvokeExpr: interfaceinvoke $r1.<javax.servlet.http.HttpServletRequest: java.lang.String getContentType()>()

 InvokeExpr: interfaceinvoke $r6.<br.com.caelum.vraptor.deserialization.Deserializers: br.com.caelum.vraptor.deserialization.Deserializer deserializerFor(java.lang.String,br.com.caelum.vraptor.ioc.Container)>("application/xml", $r5)

 InvokeExpr: interfaceinvoke $r15.<br.com.caelum.vraptor.view.Status: void unsupportedMediaType(java.lang.String)>("Unable to handle media type [application/xml]: no deserializer found.")



========== method  willSetMethodParametersWithDeserializationAndContinueStackAfterDeserialization ========:

 Total invocations on Mocks 4 :

 InvokeExpr: interfaceinvoke $r2.<javax.servlet.http.HttpServletRequest: java.lang.String getContentType()>()

 InvokeExpr: interfaceinvoke r1.<br.com.caelum.vraptor.deserialization.Deserializer: java.lang.Object[] deserialize(java.io.InputStream,br.com.caelum.vraptor.resource.ResourceMethod)>(null, $r9)

 InvokeExpr: interfaceinvoke $r15.<br.com.caelum.vraptor.deserialization.Deserializers: br.com.caelum.vraptor.deserialization.Deserializer deserializerFor(java.lang.String,br.com.caelum.vraptor.ioc.Container)>("application/xml", $r14)

 InvokeExpr: interfaceinvoke $r31.<br.com.caelum.vraptor.core.InterceptorStack: void next(br.com.caelum.vraptor.resource.ResourceMethod,java.lang.Object)>($r30, null)



========== method  willSetMethodParametersWithDeserializationEvenIfTheContentTypeHasCharsetDeclaration ========:

 Total invocations on Mocks 4 :

 InvokeExpr: interfaceinvoke $r2.<javax.servlet.http.HttpServletRequest: java.lang.String getContentType()>()

 InvokeExpr: interfaceinvoke r1.<br.com.caelum.vraptor.deserialization.Deserializer: java.lang.Object[] deserialize(java.io.InputStream,br.com.caelum.vraptor.resource.ResourceMethod)>(null, $r9)

 InvokeExpr: interfaceinvoke $r15.<br.com.caelum.vraptor.deserialization.Deserializers: br.com.caelum.vraptor.deserialization.Deserializer deserializerFor(java.lang.String,br.com.caelum.vraptor.ioc.Container)>("application/xml", $r14)

 InvokeExpr: interfaceinvoke $r31.<br.com.caelum.vraptor.core.InterceptorStack: void next(br.com.caelum.vraptor.resource.ResourceMethod,java.lang.Object)>($r30, null)



========== method  willDeserializeForAnyContentTypeIfPossible ========:

 Total invocations on Mocks 4 :

 InvokeExpr: interfaceinvoke $r3.<javax.servlet.http.HttpServletRequest: java.lang.String getContentType()>()

 InvokeExpr: interfaceinvoke r2.<br.com.caelum.vraptor.deserialization.Deserializer: java.lang.Object[] deserialize(java.io.InputStream,br.com.caelum.vraptor.resource.ResourceMethod)>(null, r1)

 InvokeExpr: interfaceinvoke $r19.<br.com.caelum.vraptor.deserialization.Deserializers: br.com.caelum.vraptor.deserialization.Deserializer deserializerFor(java.lang.String,br.com.caelum.vraptor.ioc.Container)>("application/xml", $r18)

 InvokeExpr: interfaceinvoke $r33.<br.com.caelum.vraptor.core.InterceptorStack: void next(br.com.caelum.vraptor.resource.ResourceMethod,java.lang.Object)>(r1, null)



========== method  shouldNotDeserializeIfHasNoContentType ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r2.<javax.servlet.http.HttpServletRequest: java.lang.String getContentType()>()

 InvokeExpr: interfaceinvoke $r22.<br.com.caelum.vraptor.core.InterceptorStack: void next(br.com.caelum.vraptor.resource.ResourceMethod,java.lang.Object)>(r1, null)



========== method  willSetOnlyNonNullParameters ========:

 Total invocations on Mocks 4 :

 InvokeExpr: interfaceinvoke $r2.<javax.servlet.http.HttpServletRequest: java.lang.String getContentType()>()

 InvokeExpr: interfaceinvoke r1.<br.com.caelum.vraptor.deserialization.Deserializer: java.lang.Object[] deserialize(java.io.InputStream,br.com.caelum.vraptor.resource.ResourceMethod)>(null, $r9)

 InvokeExpr: interfaceinvoke $r15.<br.com.caelum.vraptor.deserialization.Deserializers: br.com.caelum.vraptor.deserialization.Deserializer deserializerFor(java.lang.String,br.com.caelum.vraptor.ioc.Container)>("application/xml", $r14)

 InvokeExpr: interfaceinvoke $r31.<br.com.caelum.vraptor.core.InterceptorStack: void next(br.com.caelum.vraptor.resource.ResourceMethod,java.lang.Object)>($r30, null)



========== method  shouldThrowInterceptionExceptionIfAnIOExceptionOccurs ========:

 Total invocations on Mocks 3 :

 InvokeExpr: interfaceinvoke $r2.<javax.servlet.http.HttpServletRequest: javax.servlet.ServletInputStream getInputStream()>()

 InvokeExpr: interfaceinvoke $r8.<javax.servlet.http.HttpServletRequest: java.lang.String getContentType()>()

 InvokeExpr: interfaceinvoke $r14.<br.com.caelum.vraptor.deserialization.Deserializers: br.com.caelum.vraptor.deserialization.Deserializer deserializerFor(java.lang.String,br.com.caelum.vraptor.ioc.Container)>("application/xml", $r13)


** CLASS br.com.caelum.vraptor.interceptor.TopologicalSortedInterceptorRegistryTest


** CLASS br.com.caelum.vraptor.interceptor.DownloadInterceptorTest



========== method  setup ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r1.<javax.servlet.http.HttpServletResponse: javax.servlet.ServletOutputStream getOutputStream()>()



========== method  whenResultIsADownloadShouldUseIt ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r3.<br.com.caelum.vraptor.core.MethodInfo: java.lang.Object getResult()>()

 InvokeExpr: interfaceinvoke $r12.<br.com.caelum.vraptor.interceptor.download.Download: void write(javax.servlet.http.HttpServletResponse)>($r11)



========== method  whenResultIsAnInputStreamShouldCreateAInputStreamDownload ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r3.<br.com.caelum.vraptor.core.MethodInfo: java.lang.Object getResult()>()

 InvokeExpr: virtualinvoke $r13.<javax.servlet.ServletOutputStream: void write(byte[],int,int)>($r17, $i0, $i1)



========== method  whenResultIsAnInputStreamShouldCreateAByteArrayDownload ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r3.<br.com.caelum.vraptor.core.MethodInfo: java.lang.Object getResult()>()

 InvokeExpr: virtualinvoke $r12.<javax.servlet.ServletOutputStream: void write(byte[],int,int)>($r16, $i0, $i1)



========== method  whenResultIsAFileShouldCreateAFileDownload ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r4.<br.com.caelum.vraptor.core.MethodInfo: java.lang.Object getResult()>()

 InvokeExpr: virtualinvoke $r14.<javax.servlet.ServletOutputStream: void write(byte[],int,int)>($r19, $i0, $i1)



========== method  whenResultIsNullAndResultWasUsedShouldDoNothing ========:

 Total invocations on Mocks 3 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.core.MethodInfo: java.lang.Object getResult()>()

 InvokeExpr: interfaceinvoke $r5.<br.com.caelum.vraptor.Result: boolean used()>()

 InvokeExpr: interfaceinvoke $r16.<br.com.caelum.vraptor.core.InterceptorStack: void next(br.com.caelum.vraptor.resource.ResourceMethod,java.lang.Object)>($r15, null)



========== method  whenResultIsNullAndResultWasNotUsedShouldThrowNPE ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r2.<br.com.caelum.vraptor.core.MethodInfo: java.lang.Object getResult()>()

 InvokeExpr: interfaceinvoke $r6.<br.com.caelum.vraptor.Result: boolean used()>()



========== method  shouldThrowInterceptionExceptionIfIOExceptionOccurs ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r4.<br.com.caelum.vraptor.core.MethodInfo: java.lang.Object getResult()>()

 InvokeExpr: interfaceinvoke $r8.<br.com.caelum.vraptor.Result: boolean used()>()


** CLASS br.com.caelum.vraptor.interceptor.FlashInterceptorTest



========== method  shouldDoNothingWhenThereIsNoFlashParameters ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r1.<javax.servlet.http.HttpSession: java.lang.Object getAttribute(java.lang.String)>("br.com.caelum.vraptor.flash.parameters")



========== method  shouldAddAllFlashParametersToResult ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r1.<javax.servlet.http.HttpSession: java.lang.Object getAttribute(java.lang.String)>("br.com.caelum.vraptor.flash.parameters")

 InvokeExpr: interfaceinvoke $r11.<br.com.caelum.vraptor.Result: br.com.caelum.vraptor.Result include(java.lang.String,java.lang.Object)>("Abc", $r12)



========== method  shouldRemoveFlashIncludedParameters ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r1.<javax.servlet.http.HttpSession: java.lang.Object getAttribute(java.lang.String)>("br.com.caelum.vraptor.flash.parameters")

 InvokeExpr: interfaceinvoke $r11.<javax.servlet.http.HttpSession: void removeAttribute(java.lang.String)>("br.com.caelum.vraptor.flash.parameters")



========== method  shouldIncludeFlashParametersWhenARedirectHappens ========:

 Total invocations on Mocks 3 :

 InvokeExpr: interfaceinvoke $r3.<br.com.caelum.vraptor.Result: java.util.Map included()>()

 InvokeExpr: interfaceinvoke $r7.<javax.servlet.http.HttpSession: java.lang.Object getAttribute(java.lang.String)>("br.com.caelum.vraptor.flash.parameters")

 InvokeExpr: interfaceinvoke $r16.<javax.servlet.http.HttpSession: void setAttribute(java.lang.String,java.lang.Object)>("br.com.caelum.vraptor.flash.parameters", r1)



========== method  shouldNotIncludeFlashParametersWhenThereIsNoIncludedParameter ========:

 Total invocations on Mocks 3 :

 InvokeExpr: interfaceinvoke $r2.<br.com.caelum.vraptor.Result: java.util.Map included()>()

 InvokeExpr: interfaceinvoke $r6.<javax.servlet.http.HttpSession: java.lang.Object getAttribute(java.lang.String)>("br.com.caelum.vraptor.flash.parameters")

 InvokeExpr: interfaceinvoke $r16.<javax.servlet.http.HttpSession: void setAttribute(java.lang.String,java.lang.Object)>($r17, $r18)



========== method  shouldNotCrashWhenSessionIsInvalid ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r3.<br.com.caelum.vraptor.Result: java.util.Map included()>()

 InvokeExpr: interfaceinvoke $r12.<javax.servlet.http.HttpSession: java.lang.Object getAttribute(java.lang.String)>("br.com.caelum.vraptor.flash.parameters")


** CLASS br.com.caelum.vraptor.interceptor.ParametersInstantiatorInterceptorTest



========== method  setup ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.core.Localization: java.util.ResourceBundle getBundle()>()

 InvokeExpr: interfaceinvoke $r6.<br.com.caelum.vraptor.http.MutableRequest: java.util.Enumeration getParameterNames()>()



========== method  shouldUseTheProvidedParameters ========:

 Total invocations on Mocks 4 :

 InvokeExpr: interfaceinvoke $r7.<br.com.caelum.vraptor.http.ParametersProvider: java.lang.Object[] getParametersFor(br.com.caelum.vraptor.resource.ResourceMethod,java.util.List,java.util.ResourceBundle)>($r6, $r5, $r4)

 InvokeExpr: interfaceinvoke $r16.<br.com.caelum.vraptor.core.MethodInfo: void setParameters(java.lang.Object[])>(r1)

 InvokeExpr: interfaceinvoke $r20.<br.com.caelum.vraptor.core.InterceptorStack: void next(br.com.caelum.vraptor.resource.ResourceMethod,java.lang.Object)>($r19, null)

 InvokeExpr: interfaceinvoke $r23.<br.com.caelum.vraptor.Validator: void addAll(java.util.Collection)>($r24)



========== method  shouldConvertArrayParametersToIndexParameters ========:

 Total invocations on Mocks 5 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.http.MutableRequest: java.util.Enumeration getParameterNames()>()

 InvokeExpr: interfaceinvoke $r8.<br.com.caelum.vraptor.http.MutableRequest: java.lang.String[] getParameterValues(java.lang.String)>("someParam[].id")

 InvokeExpr: interfaceinvoke $r19.<br.com.caelum.vraptor.http.MutableRequest: void setParameter(java.lang.String,java.lang.String[])>("someParam[0].id", $r18)

 InvokeExpr: interfaceinvoke $r23.<br.com.caelum.vraptor.http.MutableRequest: void setParameter(java.lang.String,java.lang.String[])>("someParam[1].id", $r22)

 InvokeExpr: interfaceinvoke $r27.<br.com.caelum.vraptor.http.MutableRequest: void setParameter(java.lang.String,java.lang.String[])>("someParam[2].id", $r26)



========== method  shouldThrowExceptionWhenThereIsAParameterContainingDotClass ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.http.MutableRequest: java.util.Enumeration getParameterNames()>()

 InvokeExpr: interfaceinvoke $r8.<br.com.caelum.vraptor.http.MutableRequest: java.lang.String[] getParameterValues(java.lang.String)>("someParam.class.id")



========== method  shouldUseAndDiscardFlashParameters ========:

 Total invocations on Mocks 5 :

 InvokeExpr: interfaceinvoke $r5.<br.com.caelum.vraptor.view.FlashScope: java.lang.Object[] consumeParameters(br.com.caelum.vraptor.resource.ResourceMethod)>($r4)

 InvokeExpr: interfaceinvoke $r14.<br.com.caelum.vraptor.core.MethodInfo: void setParameters(java.lang.Object[])>(r1)

 InvokeExpr: interfaceinvoke $r18.<br.com.caelum.vraptor.core.InterceptorStack: void next(br.com.caelum.vraptor.resource.ResourceMethod,java.lang.Object)>($r17, null)

 InvokeExpr: interfaceinvoke $r21.<br.com.caelum.vraptor.Validator: void addAll(java.util.Collection)>($r22)

 InvokeExpr: interfaceinvoke $r29.<br.com.caelum.vraptor.http.ParametersProvider: java.lang.Object[] getParametersFor(br.com.caelum.vraptor.resource.ResourceMethod,java.util.List,java.util.ResourceBundle)>($r28, $r27, $r26)



========== method  shouldValidateParameters ========:

 Total invocations on Mocks 4 :

 InvokeExpr: interfaceinvoke $r7.<br.com.caelum.vraptor.http.ParametersProvider: java.lang.Object[] getParametersFor(br.com.caelum.vraptor.resource.ResourceMethod,java.util.List,java.util.ResourceBundle)>($r6, $r5, $r4)

 InvokeExpr: interfaceinvoke $r19.<br.com.caelum.vraptor.Validator: void addAll(java.util.Collection)>($r18)

 InvokeExpr: interfaceinvoke $r23.<br.com.caelum.vraptor.core.InterceptorStack: void next(br.com.caelum.vraptor.resource.ResourceMethod,java.lang.Object)>($r22, null)

 InvokeExpr: interfaceinvoke $r26.<br.com.caelum.vraptor.core.MethodInfo: void setParameters(java.lang.Object[])>(r1)



========== method  shouldThrowException ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r4.<br.com.caelum.vraptor.http.ParametersProvider: java.lang.Object[] getParametersFor(br.com.caelum.vraptor.resource.ResourceMethod,java.util.List,java.util.ResourceBundle)>($r3, $r2, $r1)



========== method  shouldAddHeaderInformationToRequestWhenHeaderParamAnnotationIsPresent ========:

 Total invocations on Mocks 7 :

 InvokeExpr: interfaceinvoke $r8.<br.com.caelum.vraptor.http.MutableRequest: java.lang.String getHeader(java.lang.String)>("X-MyApp-Password")

 InvokeExpr: interfaceinvoke $r14.<br.com.caelum.vraptor.http.ParametersProvider: java.lang.Object[] getParametersFor(br.com.caelum.vraptor.resource.ResourceMethod,java.util.List,java.util.ResourceBundle)>(r3, $r13, $r12)

 InvokeExpr: interfaceinvoke $r18.<br.com.caelum.vraptor.http.ParameterNameProvider: java.lang.String[] parameterNamesFor(java.lang.reflect.AccessibleObject)>(r2)

 InvokeExpr: interfaceinvoke $r27.<br.com.caelum.vraptor.http.MutableRequest: void setAttribute(java.lang.String,java.lang.Object)>("password", "123")

 InvokeExpr: interfaceinvoke $r30.<br.com.caelum.vraptor.core.MethodInfo: void setParameters(java.lang.Object[])>(r1)

 InvokeExpr: interfaceinvoke $r33.<br.com.caelum.vraptor.core.InterceptorStack: void next(br.com.caelum.vraptor.resource.ResourceMethod,java.lang.Object)>(r3, null)

 InvokeExpr: interfaceinvoke $r36.<br.com.caelum.vraptor.Validator: void addAll(java.util.Collection)>($r37)



========== method  shouldAddHeaderInformationToRequestWhenHeaderParamAnnotationIsNotPresent ========:

 Total invocations on Mocks 6 :

 InvokeExpr: interfaceinvoke $r10.<br.com.caelum.vraptor.http.ParametersProvider: java.lang.Object[] getParametersFor(br.com.caelum.vraptor.resource.ResourceMethod,java.util.List,java.util.ResourceBundle)>(r3, $r9, $r8)

 InvokeExpr: interfaceinvoke $r14.<br.com.caelum.vraptor.http.ParameterNameProvider: java.lang.String[] parameterNamesFor(java.lang.reflect.AccessibleObject)>(r2)

 InvokeExpr: interfaceinvoke $r24.<br.com.caelum.vraptor.http.MutableRequest: void setAttribute(java.lang.String,java.lang.Object)>($r25, $r26)

 InvokeExpr: interfaceinvoke $r29.<br.com.caelum.vraptor.core.MethodInfo: void setParameters(java.lang.Object[])>(r1)

 InvokeExpr: interfaceinvoke $r32.<br.com.caelum.vraptor.core.InterceptorStack: void next(br.com.caelum.vraptor.resource.ResourceMethod,java.lang.Object)>(r3, null)

 InvokeExpr: interfaceinvoke $r35.<br.com.caelum.vraptor.Validator: void addAll(java.util.Collection)>($r36)



========== method  shouldAddVariousHeaderInformationsToRequestWhenHeaderParamAnnotationIsPresent ========:

 Total invocations on Mocks 11 :

 InvokeExpr: interfaceinvoke $r8.<br.com.caelum.vraptor.http.MutableRequest: java.lang.String getHeader(java.lang.String)>("X-MyApp-User")

 InvokeExpr: interfaceinvoke $r12.<br.com.caelum.vraptor.http.MutableRequest: java.lang.String getHeader(java.lang.String)>("X-MyApp-Password")

 InvokeExpr: interfaceinvoke $r16.<br.com.caelum.vraptor.http.MutableRequest: java.lang.String getHeader(java.lang.String)>("X-MyApp-Token")

 InvokeExpr: interfaceinvoke $r22.<br.com.caelum.vraptor.http.ParametersProvider: java.lang.Object[] getParametersFor(br.com.caelum.vraptor.resource.ResourceMethod,java.util.List,java.util.ResourceBundle)>(r3, $r21, $r20)

 InvokeExpr: interfaceinvoke $r26.<br.com.caelum.vraptor.http.ParameterNameProvider: java.lang.String[] parameterNamesFor(java.lang.reflect.AccessibleObject)>(r2)

 InvokeExpr: interfaceinvoke $r35.<br.com.caelum.vraptor.http.MutableRequest: void setAttribute(java.lang.String,java.lang.Object)>("user", "user")

 InvokeExpr: interfaceinvoke $r38.<br.com.caelum.vraptor.http.MutableRequest: void setAttribute(java.lang.String,java.lang.Object)>("password", "123")

 InvokeExpr: interfaceinvoke $r41.<br.com.caelum.vraptor.http.MutableRequest: void setAttribute(java.lang.String,java.lang.Object)>("token", "daek2321")

 InvokeExpr: interfaceinvoke $r44.<br.com.caelum.vraptor.core.MethodInfo: void setParameters(java.lang.Object[])>(r1)

 InvokeExpr: interfaceinvoke $r47.<br.com.caelum.vraptor.core.InterceptorStack: void next(br.com.caelum.vraptor.resource.ResourceMethod,java.lang.Object)>(r3, null)

 InvokeExpr: interfaceinvoke $r50.<br.com.caelum.vraptor.Validator: void addAll(java.util.Collection)>($r51)


** CLASS br.com.caelum.vraptor.interceptor.InstantiateInterceptorTest



========== method  shouldUseContainerForNewComponent ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r8.<br.com.caelum.vraptor.resource.ResourceMethod: br.com.caelum.vraptor.resource.ResourceClass getResource()>()

 InvokeExpr: interfaceinvoke $r18.<br.com.caelum.vraptor.core.InterceptorStack: void next(br.com.caelum.vraptor.resource.ResourceMethod,java.lang.Object)>($r17, r1)



========== method  shouldNotInstantiateIfThereIsAlreadyAResource ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r10.<br.com.caelum.vraptor.core.InterceptorStack: void next(br.com.caelum.vraptor.resource.ResourceMethod,java.lang.Object)>($r9, r1)


** CLASS br.com.caelum.vraptor.interceptor.OutjectResultTest



========== method  shouldOutjectWithASimpleTypeName ========:

 Total invocations on Mocks 5 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.resource.ResourceMethod: java.lang.reflect.Method getMethod()>()

 InvokeExpr: interfaceinvoke $r8.<br.com.caelum.vraptor.core.MethodInfo: java.lang.Object getResult()>()

 InvokeExpr: interfaceinvoke $r12.<br.com.caelum.vraptor.interceptor.TypeNameExtractor: java.lang.String nameFor(java.lang.reflect.Type)>(class "Ljava/lang/String;")

 InvokeExpr: interfaceinvoke $r22.<br.com.caelum.vraptor.Result: br.com.caelum.vraptor.Result include(java.lang.String,java.lang.Object)>("string", "myString")

 InvokeExpr: interfaceinvoke $r28.<br.com.caelum.vraptor.core.InterceptorStack: void next(br.com.caelum.vraptor.resource.ResourceMethod,java.lang.Object)>($r27, $r26)



========== method  shouldOutjectACollectionAsAList ========:

 Total invocations on Mocks 5 :

 InvokeExpr: interfaceinvoke $r4.<br.com.caelum.vraptor.resource.ResourceMethod: java.lang.reflect.Method getMethod()>()

 InvokeExpr: interfaceinvoke $r8.<br.com.caelum.vraptor.core.MethodInfo: java.lang.Object getResult()>()

 InvokeExpr: interfaceinvoke $r12.<br.com.caelum.vraptor.interceptor.TypeNameExtractor: java.lang.String nameFor(java.lang.reflect.Type)>($r13)

 InvokeExpr: interfaceinvoke $r23.<br.com.caelum.vraptor.Result: br.com.caelum.vraptor.Result include(java.lang.String,java.lang.Object)>("stringList", "myString")

 InvokeExpr: interfaceinvoke $r29.<br.com.caelum.vraptor.core.InterceptorStack: void next(br.com.caelum.vraptor.resource.ResourceMethod,java.lang.Object)>($r28, $r27)



========== method  shouldNotOutjectIfThereIsNoReturnType ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.resource.ResourceMethod: java.lang.reflect.Method getMethod()>()



========== method  shouldNotOutjectIfReturnIsVoid ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.resource.ResourceMethod: java.lang.reflect.Method getMethod()>()


** CLASS br.com.caelum.vraptor.interceptor.DefaultInterceptorRegistryTest


** CLASS br.com.caelum.vraptor.interceptor.download.FileDownloadTest



========== method  setUp ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r9.<javax.servlet.http.HttpServletResponse: javax.servlet.ServletOutputStream getOutputStream()>()



========== method  shouldUseHeadersToHttpResponse ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r8.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>("Content-type", "type")

 InvokeExpr: interfaceinvoke $r12.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>("Content-disposition", "inline; filename=x.txt")


** CLASS br.com.caelum.vraptor.interceptor.download.InputStreamDownloadTest



========== method  setUp ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r6.<javax.servlet.http.HttpServletResponse: javax.servlet.ServletOutputStream getOutputStream()>()



========== method  shouldUseHeadersToHttpResponse ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r7.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>("Content-type", "type")


** CLASS br.com.caelum.vraptor.interceptor.download.ByteArrayDownloadTest



========== method  setUp ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r4.<javax.servlet.http.HttpServletResponse: javax.servlet.ServletOutputStream getOutputStream()>()



========== method  shouldUseHeadersToHttpResponse ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r8.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>("Content-type", "type")


** CLASS br.com.caelum.vraptor.interceptor.ResourceLookupInterceptorTest



========== method  shouldHandle404 ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r2.<br.com.caelum.vraptor.http.UrlToResourceTranslator: br.com.caelum.vraptor.resource.ResourceMethod translate(br.com.caelum.vraptor.core.RequestInfo)>($r1)

 InvokeExpr: interfaceinvoke $r12.<br.com.caelum.vraptor.resource.ResourceNotFoundHandler: void couldntFind(br.com.caelum.vraptor.core.RequestInfo)>($r11)



========== method  shouldHandle405 ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r4.<br.com.caelum.vraptor.http.UrlToResourceTranslator: br.com.caelum.vraptor.resource.ResourceMethod translate(br.com.caelum.vraptor.core.RequestInfo)>($r3)

 InvokeExpr: interfaceinvoke $r16.<br.com.caelum.vraptor.resource.MethodNotAllowedHandler: void deny(br.com.caelum.vraptor.core.RequestInfo,java.util.Set)>($r15, r1)



========== method  shouldUseResourceMethodFoundWithNextInterceptor ========:

 Total invocations on Mocks 3 :

 InvokeExpr: interfaceinvoke $r6.<br.com.caelum.vraptor.http.UrlToResourceTranslator: br.com.caelum.vraptor.resource.ResourceMethod translate(br.com.caelum.vraptor.core.RequestInfo)>($r5)

 InvokeExpr: interfaceinvoke $r12.<br.com.caelum.vraptor.core.InterceptorStack: void next(br.com.caelum.vraptor.resource.ResourceMethod,java.lang.Object)>(r1, null)

 InvokeExpr: interfaceinvoke $r15.<br.com.caelum.vraptor.core.MethodInfo: void setResourceMethod(br.com.caelum.vraptor.resource.ResourceMethod)>(r1)


** CLASS br.com.caelum.vraptor.interceptor.multipart.DefaultUploadedFileTest


** CLASS br.com.caelum.vraptor.interceptor.multipart.NullMultipartInterceptorTest


** CLASS br.com.caelum.vraptor.interceptor.multipart.CommonsUploadMultipartInterceptorTest



========== method  setup ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r6.<br.com.caelum.vraptor.interceptor.multipart.ServletFileUploadCreator: org.apache.commons.fileupload.servlet.ServletFileUpload create(org.apache.commons.fileupload.FileItemFactory)>($r8)



========== method  shouldNotAcceptFormURLEncoded ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r6.<javax.servlet.http.HttpServletRequest: java.lang.String getContentType()>()

 InvokeExpr: interfaceinvoke $r10.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()



========== method  shouldAcceptMultipart ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r6.<javax.servlet.http.HttpServletRequest: java.lang.String getContentType()>()

 InvokeExpr: interfaceinvoke $r10.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()



========== method  withFieldsOnly ========:

 Total invocations on Mocks 6 :

 InvokeExpr: interfaceinvoke $r11.<javax.servlet.http.HttpServletRequest: java.lang.String getCharacterEncoding()>()

 InvokeExpr: interfaceinvoke $r15.<javax.servlet.http.HttpServletRequest: java.lang.String getContentType()>()

 InvokeExpr: interfaceinvoke $r19.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()

 InvokeExpr: virtualinvoke $r24.<org.apache.commons.fileupload.servlet.ServletFileUpload: java.util.List parseRequest(javax.servlet.http.HttpServletRequest)>($r23)

 InvokeExpr: interfaceinvoke $r35.<br.com.caelum.vraptor.http.MutableRequest: void setParameter(java.lang.String,java.lang.String[])>("foo", $r34)

 InvokeExpr: interfaceinvoke $r39.<br.com.caelum.vraptor.http.MutableRequest: void setParameter(java.lang.String,java.lang.String[])>("bar", $r38)



========== method  withFieldsOnlyWithInvalidCharset ========:

 Total invocations on Mocks 6 :

 InvokeExpr: interfaceinvoke $r11.<javax.servlet.http.HttpServletRequest: java.lang.String getCharacterEncoding()>()

 InvokeExpr: interfaceinvoke $r15.<javax.servlet.http.HttpServletRequest: java.lang.String getContentType()>()

 InvokeExpr: interfaceinvoke $r19.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()

 InvokeExpr: virtualinvoke $r24.<org.apache.commons.fileupload.servlet.ServletFileUpload: java.util.List parseRequest(javax.servlet.http.HttpServletRequest)>($r23)

 InvokeExpr: interfaceinvoke $r35.<br.com.caelum.vraptor.http.MutableRequest: void setParameter(java.lang.String,java.lang.String[])>("foo", $r34)

 InvokeExpr: interfaceinvoke $r39.<br.com.caelum.vraptor.http.MutableRequest: void setParameter(java.lang.String,java.lang.String[])>("bar", $r38)



========== method  withFilesAndFields ========:

 Total invocations on Mocks 9 :

 InvokeExpr: interfaceinvoke $r17.<javax.servlet.http.HttpServletRequest: java.lang.String getContentType()>()

 InvokeExpr: interfaceinvoke $r21.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()

 InvokeExpr: virtualinvoke $r26.<org.apache.commons.fileupload.servlet.ServletFileUpload: java.util.List parseRequest(javax.servlet.http.HttpServletRequest)>($r25)

 InvokeExpr: interfaceinvoke $r37.<br.com.caelum.vraptor.http.MutableRequest: void setParameter(java.lang.String,java.lang.String[])>("foo", $r36)

 InvokeExpr: interfaceinvoke $r41.<br.com.caelum.vraptor.http.MutableRequest: void setParameter(java.lang.String,java.lang.String[])>("bar", $r40)

 InvokeExpr: interfaceinvoke $r45.<br.com.caelum.vraptor.http.MutableRequest: void setParameter(java.lang.String,java.lang.String[])>("thefile0", $r44)

 InvokeExpr: interfaceinvoke $r49.<br.com.caelum.vraptor.http.MutableRequest: void setParameter(java.lang.String,java.lang.String[])>("thefile1", $r48)

 InvokeExpr: interfaceinvoke $r52.<javax.servlet.http.HttpServletRequest: void setAttribute(java.lang.String,java.lang.Object)>($r54, $r55)

 InvokeExpr: interfaceinvoke $r58.<javax.servlet.http.HttpServletRequest: void setAttribute(java.lang.String,java.lang.Object)>($r60, $r61)



========== method  emptyFiles ========:

 Total invocations on Mocks 3 :

 InvokeExpr: interfaceinvoke $r11.<javax.servlet.http.HttpServletRequest: java.lang.String getContentType()>()

 InvokeExpr: interfaceinvoke $r15.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()

 InvokeExpr: virtualinvoke $r20.<org.apache.commons.fileupload.servlet.ServletFileUpload: java.util.List parseRequest(javax.servlet.http.HttpServletRequest)>($r19)



========== method  throwsInvalidParameterExceptionIfIOExceptionOccurs ========:

 Total invocations on Mocks 3 :

 InvokeExpr: interfaceinvoke $r16.<javax.servlet.http.HttpServletRequest: java.lang.String getContentType()>()

 InvokeExpr: interfaceinvoke $r20.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()

 InvokeExpr: virtualinvoke $r26.<org.apache.commons.fileupload.servlet.ServletFileUpload: java.util.List parseRequest(javax.servlet.http.HttpServletRequest)>($r25)



========== method  fieldsWithSameName ========:

 Total invocations on Mocks 7 :

 InvokeExpr: interfaceinvoke $r15.<javax.servlet.http.HttpServletRequest: java.lang.String getContentType()>()

 InvokeExpr: interfaceinvoke $r19.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()

 InvokeExpr: virtualinvoke $r24.<org.apache.commons.fileupload.servlet.ServletFileUpload: java.util.List parseRequest(javax.servlet.http.HttpServletRequest)>($r23)

 InvokeExpr: interfaceinvoke $r35.<br.com.caelum.vraptor.http.MutableRequest: void setParameter(java.lang.String,java.lang.String[])>("myfile0", $r34)

 InvokeExpr: interfaceinvoke $r39.<br.com.caelum.vraptor.http.MutableRequest: void setParameter(java.lang.String,java.lang.String[])>("myfile1", $r38)

 InvokeExpr: interfaceinvoke $r42.<javax.servlet.http.HttpServletRequest: void setAttribute(java.lang.String,java.lang.Object)>($r44, $r45)

 InvokeExpr: interfaceinvoke $r48.<javax.servlet.http.HttpServletRequest: void setAttribute(java.lang.String,java.lang.Object)>($r50, $r51)



========== method  multipleUpload ========:

 Total invocations on Mocks 7 :

 InvokeExpr: interfaceinvoke $r15.<javax.servlet.http.HttpServletRequest: java.lang.String getContentType()>()

 InvokeExpr: interfaceinvoke $r19.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()

 InvokeExpr: virtualinvoke $r24.<org.apache.commons.fileupload.servlet.ServletFileUpload: java.util.List parseRequest(javax.servlet.http.HttpServletRequest)>($r23)

 InvokeExpr: interfaceinvoke $r35.<br.com.caelum.vraptor.http.MutableRequest: void setParameter(java.lang.String,java.lang.String[])>("myfile0[0]", $r34)

 InvokeExpr: interfaceinvoke $r39.<br.com.caelum.vraptor.http.MutableRequest: void setParameter(java.lang.String,java.lang.String[])>("myfile0[1]", $r38)

 InvokeExpr: interfaceinvoke $r42.<javax.servlet.http.HttpServletRequest: void setAttribute(java.lang.String,java.lang.Object)>($r44, $r45)

 InvokeExpr: interfaceinvoke $r48.<javax.servlet.http.HttpServletRequest: void setAttribute(java.lang.String,java.lang.Object)>($r50, $r51)



========== method  doNothingWhenFileUploadExceptionOccurs ========:

 Total invocations on Mocks 1 :

 InvokeExpr: virtualinvoke $r8.<org.apache.commons.fileupload.servlet.ServletFileUpload: java.util.List parseRequest(javax.servlet.http.HttpServletRequest)>($r7)



========== method  shouldValidateWhenSizeLimitExceededExceptionOccurs ========:

 Total invocations on Mocks 2 :

 InvokeExpr: virtualinvoke $r8.<org.apache.commons.fileupload.servlet.ServletFileUpload: java.util.List parseRequest(javax.servlet.http.HttpServletRequest)>($r7)

 InvokeExpr: interfaceinvoke $r20.<br.com.caelum.vraptor.Validator: void add(br.com.caelum.vraptor.validator.Message)>($r22)



========== method  shouldCreateDirInsideAppIfTempDirAreNotAvailable ========:

 Total invocations on Mocks 4 :

 InvokeExpr: interfaceinvoke $r19.<javax.servlet.http.HttpServletRequest: java.lang.String getContentType()>()

 InvokeExpr: interfaceinvoke $r23.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()

 InvokeExpr: virtualinvoke $r28.<org.apache.commons.fileupload.servlet.ServletFileUpload: java.util.List parseRequest(javax.servlet.http.HttpServletRequest)>($r27)

 InvokeExpr: virtualinvoke $r37.<br.com.caelum.vraptor.interceptor.multipart.DefaultMultipartConfig: java.io.File createDirInsideApplication()>()



========== method  checkIfFileHasBeenUploaded ========:

 Total invocations on Mocks 4 :

 InvokeExpr: interfaceinvoke $r14.<javax.servlet.http.HttpServletRequest: java.lang.String getContentType()>()

 InvokeExpr: interfaceinvoke $r18.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()

 InvokeExpr: virtualinvoke $r23.<org.apache.commons.fileupload.servlet.ServletFileUpload: java.util.List parseRequest(javax.servlet.http.HttpServletRequest)>($r22)

 InvokeExpr: interfaceinvoke $r33.<javax.servlet.http.HttpServletRequest: void setAttribute(java.lang.String,java.lang.Object)>($r34, $r35)



========== method  handleValidatorMessageWhenFileUploadExceptionOccurs ========:

 Total invocations on Mocks 2 :

 InvokeExpr: virtualinvoke $r8.<org.apache.commons.fileupload.servlet.ServletFileUpload: java.util.List parseRequest(javax.servlet.http.HttpServletRequest)>($r7)

 InvokeExpr: interfaceinvoke $r20.<br.com.caelum.vraptor.Validator: void add(br.com.caelum.vraptor.validator.Message)>($r22)


** CLASS br.com.caelum.vraptor.interceptor.ExecuteMethodInterceptorTest



========== method  shouldInvokeTheMethodAndNotProceedWithInterceptorStack ========:

 Total invocations on Mocks 4 :

 InvokeExpr: interfaceinvoke $r8.<br.com.caelum.vraptor.core.MethodInfo: java.lang.Object[] getParameters()>()

 InvokeExpr: interfaceinvoke $r16.<br.com.caelum.vraptor.interceptor.DogAlike: void bark()>()

 InvokeExpr: interfaceinvoke $r19.<br.com.caelum.vraptor.core.InterceptorStack: void next(br.com.caelum.vraptor.resource.ResourceMethod,java.lang.Object)>(r1, r2)

 InvokeExpr: interfaceinvoke $r22.<br.com.caelum.vraptor.core.MethodInfo: void setResult(java.lang.Object)>("ok")



========== method  shouldThrowMethodExceptionIfThereIsAnInvocationException ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r14.<br.com.caelum.vraptor.core.MethodInfo: java.lang.Object[] getParameters()>()



========== method  shouldUseTheProvidedArguments ========:

 Total invocations on Mocks 4 :

 InvokeExpr: interfaceinvoke $r9.<br.com.caelum.vraptor.core.MethodInfo: java.lang.Object[] getParameters()>()

 InvokeExpr: interfaceinvoke $r18.<br.com.caelum.vraptor.interceptor.DogAlike: void bark(int)>(3)

 InvokeExpr: interfaceinvoke $r21.<br.com.caelum.vraptor.core.InterceptorStack: void next(br.com.caelum.vraptor.resource.ResourceMethod,java.lang.Object)>(r1, r2)

 InvokeExpr: interfaceinvoke $r24.<br.com.caelum.vraptor.core.MethodInfo: void setResult(java.lang.Object)>("ok")



========== method  shouldSetResultReturnedValueFromInvokedMethod ========:

 Total invocations on Mocks 3 :

 InvokeExpr: interfaceinvoke $r8.<br.com.caelum.vraptor.core.MethodInfo: java.lang.Object[] getParameters()>()

 InvokeExpr: interfaceinvoke $r17.<br.com.caelum.vraptor.core.InterceptorStack: void next(br.com.caelum.vraptor.resource.ResourceMethod,java.lang.Object)>(r1, r2)

 InvokeExpr: interfaceinvoke $r20.<br.com.caelum.vraptor.core.MethodInfo: void setResult(java.lang.Object)>("string")



========== method  shouldSetNullWhenNullReturnedFromInvokedMethod ========:

 Total invocations on Mocks 3 :

 InvokeExpr: interfaceinvoke $r8.<br.com.caelum.vraptor.core.MethodInfo: java.lang.Object[] getParameters()>()

 InvokeExpr: interfaceinvoke $r17.<br.com.caelum.vraptor.core.InterceptorStack: void next(br.com.caelum.vraptor.resource.ResourceMethod,java.lang.Object)>(r1, r2)

 InvokeExpr: interfaceinvoke $r20.<br.com.caelum.vraptor.core.MethodInfo: void setResult(java.lang.Object)>(null)



========== method  shouldSetOkWhenVoidReturnedFromInvokedMethod ========:

 Total invocations on Mocks 3 :

 InvokeExpr: interfaceinvoke $r8.<br.com.caelum.vraptor.core.MethodInfo: java.lang.Object[] getParameters()>()

 InvokeExpr: interfaceinvoke $r17.<br.com.caelum.vraptor.core.InterceptorStack: void next(br.com.caelum.vraptor.resource.ResourceMethod,java.lang.Object)>(r1, r2)

 InvokeExpr: interfaceinvoke $r20.<br.com.caelum.vraptor.core.MethodInfo: void setResult(java.lang.Object)>("ok")



========== method  shouldBeOkIfThereIsValidationErrorsAndYouSpecifiedWhereToGo ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r8.<br.com.caelum.vraptor.core.MethodInfo: java.lang.Object[] getParameters()>()

 InvokeExpr: interfaceinvoke $r21.<br.com.caelum.vraptor.Validator: boolean hasErrors()>()



========== method  shouldThrowExceptionIfYouHaventSpecifiedWhereToGoOnValidationError ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r9.<br.com.caelum.vraptor.core.MethodInfo: java.lang.Object[] getParameters()>()

 InvokeExpr: interfaceinvoke $r14.<br.com.caelum.vraptor.Validator: boolean hasErrors()>()


** CLASS br.com.caelum.vraptor.core.DefaultStaticContentHandlerTest



========== method  returnsTrueForRealStaticResources ========:

 Total invocations on Mocks 3 :

 InvokeExpr: interfaceinvoke $r3.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()

 InvokeExpr: interfaceinvoke $r11.<javax.servlet.http.HttpServletRequest: java.lang.String getContextPath()>()

 InvokeExpr: interfaceinvoke $r15.<javax.servlet.ServletContext: java.net.URL getResource(java.lang.String)>(r2)



========== method  returnsTrueForRealStaticResourcesWithQueryString ========:

 Total invocations on Mocks 3 :

 InvokeExpr: interfaceinvoke $r3.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()

 InvokeExpr: interfaceinvoke $r12.<javax.servlet.http.HttpServletRequest: java.lang.String getContextPath()>()

 InvokeExpr: interfaceinvoke $r16.<javax.servlet.ServletContext: java.net.URL getResource(java.lang.String)>(r2)



========== method  returnsTrueForRealStaticResourcesWithJSessionId ========:

 Total invocations on Mocks 3 :

 InvokeExpr: interfaceinvoke $r3.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()

 InvokeExpr: interfaceinvoke $r12.<javax.servlet.http.HttpServletRequest: java.lang.String getContextPath()>()

 InvokeExpr: interfaceinvoke $r16.<javax.servlet.ServletContext: java.net.URL getResource(java.lang.String)>(r2)



========== method  returnsFalseForNonStaticResources ========:

 Total invocations on Mocks 3 :

 InvokeExpr: interfaceinvoke $r4.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()

 InvokeExpr: interfaceinvoke $r12.<javax.servlet.http.HttpServletRequest: java.lang.String getContextPath()>()

 InvokeExpr: interfaceinvoke $r16.<javax.servlet.ServletContext: java.net.URL getResource(java.lang.String)>(r2)


** CLASS br.com.caelum.vraptor.core.SafeResourceBundleTest


** CLASS br.com.caelum.vraptor.core.ExceptionRecorderTest



========== method  withRootException ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r9.<br.com.caelum.vraptor.Result: void forwardTo(java.lang.String)>("/any-resource")



========== method  withNestedException ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r10.<br.com.caelum.vraptor.Result: void forwardTo(java.lang.String)>("/any-resource")


** CLASS br.com.caelum.vraptor.core.LazyInterceptorHandlerTest



========== method  setUp ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.ioc.Container: java.lang.Object instanceFor(java.lang.Class)>($r3)



========== method  shouldUseContainerIfInterceptorAccepts ========:

 Total invocations on Mocks 3 :

 InvokeExpr: interfaceinvoke $r9.<br.com.caelum.vraptor.ioc.Container: java.lang.Object instanceFor(java.lang.Class)>(class "Lbr/com/caelum/vraptor/core/LazyInterceptorHandlerTest$AlwaysAcceptInterceptor;")

 InvokeExpr: interfaceinvoke $r16.<br.com.caelum.vraptor.interceptor.Interceptor: void intercept(br.com.caelum.vraptor.core.InterceptorStack,br.com.caelum.vraptor.resource.ResourceMethod,java.lang.Object)>($r15, $r14, $r13)

 InvokeExpr: interfaceinvoke $r20.<br.com.caelum.vraptor.interceptor.Interceptor: boolean accepts(br.com.caelum.vraptor.resource.ResourceMethod)>($r22)



========== method  shouldNotUseContainerIfInterceptorDoesntAccept ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r10.<br.com.caelum.vraptor.ioc.Container: java.lang.Object instanceFor(java.lang.Class)>($r12)

 InvokeExpr: interfaceinvoke $r18.<br.com.caelum.vraptor.core.InterceptorStack: void next(br.com.caelum.vraptor.resource.ResourceMethod,java.lang.Object)>($r17, $r16)


** CLASS br.com.caelum.vraptor.core.JstlLocalizationTest



========== method  setUp ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r9.<br.com.caelum.vraptor.http.MutableRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.localizationContext.request")

 InvokeExpr: interfaceinvoke $r13.<br.com.caelum.vraptor.http.MutableRequest: javax.servlet.http.HttpSession getSession()>()



========== method  findLocaleFromRequest ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.http.MutableRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.request")



========== method  findLocaleFromSession ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r1.<javax.servlet.http.HttpSession: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.session")



========== method  findLocaleFromServletContext ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r1.<javax.servlet.ServletContext: java.lang.String getInitParameter(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale")



========== method  findLocaleFromRequestLocale ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.http.MutableRequest: java.util.Locale getLocale()>()



========== method  testLocaleWithSessionNotRequest ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.http.MutableRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.request")

 InvokeExpr: interfaceinvoke $r6.<javax.servlet.http.HttpSession: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.session")



========== method  testFallbackLocale ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.http.MutableRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.fallbackLocale.request")


** CLASS br.com.caelum.vraptor.core.DefaultConvertersTest



========== method  shouldRegisterConvertersForAllDefaultTypes ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r15.<br.com.caelum.vraptor.ioc.Container: java.lang.Object instanceFor(java.lang.Class)>(r21)



========== method  registersAndUsesTheConverterInstaceForTheSpecifiedType ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r3.<br.com.caelum.vraptor.ioc.Container: java.lang.Object instanceFor(java.lang.Class)>(class "Lbr/com/caelum/vraptor/core/DefaultConvertersTest$MyConverter;")



========== method  usesTheLastConverterInstanceRegisteredForTheSpecifiedType ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r4.<br.com.caelum.vraptor.ioc.Container: java.lang.Object instanceFor(java.lang.Class)>(class "Lbr/com/caelum/vraptor/core/DefaultConvertersTest$MySecondConverter;")



========== method  existsForWillReturnTrueForRegisteredConverters ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r2.<br.com.caelum.vraptor.ioc.Container: java.lang.Object instanceFor(java.lang.Class)>(class "Lbr/com/caelum/vraptor/core/DefaultConvertersTest$MyConverter;")


** CLASS br.com.caelum.vraptor.core.DefaultInterceptorStackTest



========== method  setUp ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r3.<br.com.caelum.vraptor.core.InterceptorHandlerFactory: br.com.caelum.vraptor.core.InterceptorHandler handlerFor(java.lang.Class)>(class "Lbr/com/caelum/vraptor/core/DefaultInterceptorStackTest$FirstInterceptor;")

 InvokeExpr: interfaceinvoke $r8.<br.com.caelum.vraptor.core.InterceptorHandlerFactory: br.com.caelum.vraptor.core.InterceptorHandler handlerFor(java.lang.Class)>(class "Lbr/com/caelum/vraptor/core/DefaultInterceptorStackTest$SecondInterceptor;")



========== method  testInvokesAllInterceptorsInItsCorrectOrder ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r11.<br.com.caelum.vraptor.core.InterceptorHandler: void execute(br.com.caelum.vraptor.core.InterceptorStack,br.com.caelum.vraptor.resource.ResourceMethod,java.lang.Object)>($r10, $r9, $r8)

 InvokeExpr: interfaceinvoke $r20.<br.com.caelum.vraptor.core.InterceptorHandler: void execute(br.com.caelum.vraptor.core.InterceptorStack,br.com.caelum.vraptor.resource.ResourceMethod,java.lang.Object)>($r19, $r18, $r17)



========== method  shouldAddNextInterceptorAsNext ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r11.<br.com.caelum.vraptor.core.InterceptorHandler: void execute(br.com.caelum.vraptor.core.InterceptorStack,br.com.caelum.vraptor.resource.ResourceMethod,java.lang.Object)>($r10, $r9, $r8)

 InvokeExpr: interfaceinvoke $r20.<br.com.caelum.vraptor.core.InterceptorHandler: void execute(br.com.caelum.vraptor.core.InterceptorStack,br.com.caelum.vraptor.resource.ResourceMethod,java.lang.Object)>($r19, $r18, $r17)


** CLASS br.com.caelum.vraptor.core.DefaultInterceptorHandlerFactoryTest


** CLASS br.com.caelum.vraptor.core.DefaultResultTest



========== method  shouldUseContainerForNewView ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r4.<br.com.caelum.vraptor.ioc.Container: java.lang.Object instanceFor(java.lang.Class)>(class "Lbr/com/caelum/vraptor/core/DefaultResultTest$MyView;")



========== method  shouldSetRequestAttribute ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r5.<javax.servlet.http.HttpServletRequest: void setAttribute(java.lang.String,java.lang.Object)>("my_key", "my_value")



========== method  shouldDelegateToPageResultOnForwardToURI ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r5.<br.com.caelum.vraptor.view.PageResult: void forwardTo(java.lang.String)>("/any/uri")



========== method  shouldDelegateToPageResultOnRedirectToURI ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r5.<br.com.caelum.vraptor.view.PageResult: void redirectTo(java.lang.String)>("/any/uri")



========== method  mockResult ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r4.<br.com.caelum.vraptor.ioc.Container: java.lang.Object instanceFor(java.lang.Class)>(r1)



========== method  shouldDelegateToPageResultOnPageOf ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r6.<br.com.caelum.vraptor.view.PageResult: java.lang.Object of(java.lang.Class)>(class "Lbr/com/caelum/vraptor/view/DefaultHttpResultTest$RandomController;")



========== method  shouldDelegateToLogicResultOnForwardToLogic ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r6.<br.com.caelum.vraptor.view.LogicResult: java.lang.Object forwardTo(java.lang.Class)>(class "Lbr/com/caelum/vraptor/view/DefaultHttpResultTest$RandomController;")



========== method  shouldDelegateToLogicResultOnRedirectToLogic ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r6.<br.com.caelum.vraptor.view.LogicResult: java.lang.Object redirectTo(java.lang.Class)>(class "Lbr/com/caelum/vraptor/view/DefaultHttpResultTest$RandomController;")



========== method  shouldDelegateToLogicResultOnRedirectToLogicWithInstance ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r7.<br.com.caelum.vraptor.view.LogicResult: java.lang.Object redirectTo(java.lang.Class)>(class "Lbr/com/caelum/vraptor/view/DefaultHttpResultTest$RandomController;")



========== method  shouldDelegateToLogicResultOnForwardToLogicWithInstance ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r7.<br.com.caelum.vraptor.view.LogicResult: java.lang.Object forwardTo(java.lang.Class)>(class "Lbr/com/caelum/vraptor/view/DefaultHttpResultTest$RandomController;")



========== method  shouldDelegateToPageResultOnPageOfWithInstance ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r7.<br.com.caelum.vraptor.view.PageResult: java.lang.Object of(java.lang.Class)>(class "Lbr/com/caelum/vraptor/view/DefaultHttpResultTest$RandomController;")



========== method  shouldDelegateToStatusOnNotFound ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r5.<br.com.caelum.vraptor.view.Status: void notFound()>()



========== method  shouldDelegateToStatusOnPermanentlyRedirectToUri ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r5.<br.com.caelum.vraptor.view.Status: void movedPermanentlyTo(java.lang.String)>("url")



========== method  shouldDelegateToStatusOnPermanentlyRedirectToControllerClass ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r6.<br.com.caelum.vraptor.view.Status: java.lang.Object movedPermanentlyTo(java.lang.Class)>(class "Lbr/com/caelum/vraptor/view/DefaultHttpResultTest$RandomController;")



========== method  shouldDelegateToStatusOnPermanentlyRedirectToControllerInstance ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r7.<br.com.caelum.vraptor.view.Status: java.lang.Object movedPermanentlyTo(java.lang.Class)>(class "Lbr/com/caelum/vraptor/view/DefaultHttpResultTest$RandomController;")



========== method  shouldIncludeExtractedNameWhenSimplyIncluding ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r3.<br.com.caelum.vraptor.interceptor.TypeNameExtractor: java.lang.String nameFor(java.lang.reflect.Type)>(class "Lbr/com/caelum/vraptor/core/DefaultResultTest$Account;")

 InvokeExpr: interfaceinvoke $r11.<javax.servlet.http.HttpServletRequest: void setAttribute(java.lang.String,java.lang.Object)>("account", r1)



========== method  shouldNotIncludeTheAttributeWhenTheValueIsNull ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r6.<javax.servlet.http.HttpServletRequest: void setAttribute(java.lang.String,java.lang.Object)>($r7, $r8)


** CLASS br.com.caelum.vraptor.core.DefaultMethodInfoTest


** CLASS br.com.caelum.vraptor.core.ToInstantiateInterceptorHandlerTest



========== method  shouldComplainWhenUnableToInstantiateAnInterceptor ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r2.<br.com.caelum.vraptor.ioc.Container: java.lang.Object instanceFor(java.lang.Class)>(class "Lbr/com/caelum/vraptor/core/ToInstantiateInterceptorHandlerTest$MyWeirdInterceptor;")



========== method  shouldInvokeInterceptorsMethodIfAbleToInstantiateIt ========:

 Total invocations on Mocks 3 :

 InvokeExpr: interfaceinvoke $r4.<br.com.caelum.vraptor.ioc.Container: java.lang.Object instanceFor(java.lang.Class)>(class "Lbr/com/caelum/vraptor/interceptor/Interceptor;")

 InvokeExpr: interfaceinvoke $r10.<br.com.caelum.vraptor.interceptor.Interceptor: boolean accepts(br.com.caelum.vraptor.resource.ResourceMethod)>($r9)

 InvokeExpr: interfaceinvoke $r23.<br.com.caelum.vraptor.interceptor.Interceptor: void intercept(br.com.caelum.vraptor.core.InterceptorStack,br.com.caelum.vraptor.resource.ResourceMethod,java.lang.Object)>($r22, $r21, r1)



========== method  shouldNotInvokeInterceptorsMethodIfInterceptorDoesntAcceptsResource ========:

 Total invocations on Mocks 4 :

 InvokeExpr: interfaceinvoke $r4.<br.com.caelum.vraptor.ioc.Container: java.lang.Object instanceFor(java.lang.Class)>(class "Lbr/com/caelum/vraptor/interceptor/Interceptor;")

 InvokeExpr: interfaceinvoke $r10.<br.com.caelum.vraptor.interceptor.Interceptor: boolean accepts(br.com.caelum.vraptor.resource.ResourceMethod)>($r9)

 InvokeExpr: interfaceinvoke $r24.<br.com.caelum.vraptor.interceptor.Interceptor: void intercept(br.com.caelum.vraptor.core.InterceptorStack,br.com.caelum.vraptor.resource.ResourceMethod,java.lang.Object)>($r23, $r22, r1)

 InvokeExpr: interfaceinvoke $r28.<br.com.caelum.vraptor.core.InterceptorStack: void next(br.com.caelum.vraptor.resource.ResourceMethod,java.lang.Object)>($r27, r1)


** CLASS br.com.caelum.vraptor.resource.HttpMethodTest



========== method  shouldConvertGETStringToGetMethodForRequestParameter ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r1.<javax.servlet.http.HttpServletRequest: java.lang.String getParameter(java.lang.String)>("_method")

 InvokeExpr: interfaceinvoke $r5.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()



========== method  shouldThrowExceptionForNotKnowHttpMethodsForRequestParameter ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r1.<javax.servlet.http.HttpServletRequest: java.lang.String getParameter(java.lang.String)>("_method")

 InvokeExpr: interfaceinvoke $r5.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()



========== method  shouldThrowIllegalArgumentExceptionIf_methodIsUsedInGETRequests ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r1.<javax.servlet.http.HttpServletRequest: java.lang.String getParameter(java.lang.String)>("_method")

 InvokeExpr: interfaceinvoke $r5.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()



========== method  shouldConvertGETStringToGetMethod ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r1.<javax.servlet.http.HttpServletRequest: java.lang.String getParameter(java.lang.String)>("_method")

 InvokeExpr: interfaceinvoke $r5.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()



========== method  shouldThrowExceptionForNotKnowHttpMethods ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r1.<javax.servlet.http.HttpServletRequest: java.lang.String getParameter(java.lang.String)>("_method")

 InvokeExpr: interfaceinvoke $r5.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()



========== method  shouldUseParameterNameBeforeTryingHttpRealMethod ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r1.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()

 InvokeExpr: interfaceinvoke $r5.<javax.servlet.http.HttpServletRequest: java.lang.String getParameter(java.lang.String)>("_method")


** CLASS br.com.caelum.vraptor.resource.ResourceNotFoundHandlerTest



========== method  couldntFindDefersRequestToContainer ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r8.<javax.servlet.FilterChain: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)>($r7, $r6)


** CLASS br.com.caelum.vraptor.resource.DefaultMethodNotAllowedHandlerTest



========== method  shouldAddAllowHeader ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r8.<br.com.caelum.vraptor.http.MutableResponse: void addHeader(java.lang.String,java.lang.String)>("Allow", "GET, POST")



========== method  shouldSendErrorMethodNotAllowed ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r8.<br.com.caelum.vraptor.http.MutableResponse: void sendError(int)>(405)



========== method  shouldNotSendMethodNotAllowedIfTheRequestMethodIsOptions ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.http.MutableRequest: java.lang.String getMethod()>()

 InvokeExpr: interfaceinvoke $r13.<br.com.caelum.vraptor.http.MutableResponse: void sendError(int)>(405)


** CLASS br.com.caelum.vraptor.http.iogi.IogiParametersProviderTest



========== method  canInjectADependencyProvidedByVraptor ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r8.<br.com.caelum.vraptor.ioc.Container: boolean canProvide(java.lang.Class)>(class "Lbr/com/caelum/vraptor/http/ParametersProviderTest$MyResource;")

 InvokeExpr: interfaceinvoke $r13.<br.com.caelum.vraptor.ioc.Container: java.lang.Object instanceFor(java.lang.Class)>(class "Lbr/com/caelum/vraptor/http/ParametersProviderTest$MyResource;")



========== method  willCreateAnIogiParameterForEachRequestParameterValue ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r18.<br.com.caelum.vraptor.http.iogi.InstantiatorWithErrors: java.lang.Object instantiate(br.com.caelum.iogi.reflection.Target,br.com.caelum.iogi.parameters.Parameters,java.util.List)>($r20, $r23, $r25)



========== method  willCreateATargerForEachFormalParameterDeclaredByTheMethod ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r13.<br.com.caelum.vraptor.http.iogi.InstantiatorWithErrors: java.lang.Object instantiate(br.com.caelum.iogi.reflection.Target,br.com.caelum.iogi.parameters.Parameters,java.util.List)>($r15, $r18, $r20)



========== method  isCapableOfDealingWithSets ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r3.<br.com.caelum.vraptor.http.ParameterNameProvider: java.lang.String[] parameterNamesFor(java.lang.reflect.AccessibleObject)>($r5)



========== method  isCapableOfDealingWithSetsOfObjects ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r3.<br.com.caelum.vraptor.http.ParameterNameProvider: java.lang.String[] parameterNamesFor(java.lang.reflect.AccessibleObject)>($r5)



========== method  shouldInjectOnlyAttributesWithSameType ========:

 Total invocations on Mocks 4 :

 InvokeExpr: interfaceinvoke $r10.<javax.servlet.http.HttpServletRequest: java.lang.Object getAttribute(java.lang.String)>("result")

 InvokeExpr: interfaceinvoke $r14.<javax.servlet.http.HttpServletRequest: java.lang.String[] getParameterValues(java.lang.String)>("result")

 InvokeExpr: interfaceinvoke $r19.<javax.servlet.http.HttpServletRequest: java.util.Enumeration getParameterNames()>()

 InvokeExpr: interfaceinvoke $r26.<br.com.caelum.vraptor.http.ParameterNameProvider: java.lang.String[] parameterNamesFor(java.lang.reflect.AccessibleObject)>($r27)


** CLASS br.com.caelum.vraptor.http.iogi.IogiGenericTypesSupportTest


** CLASS br.com.caelum.vraptor.http.iogi.MiscIogiSupportTest



========== method  isCapableOfDealingWithEmptyParameterForInternalValueWhichNeedsAConverter ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r5.<br.com.caelum.iogi.spi.LocaleProvider: java.util.Locale getLocale()>()


** CLASS br.com.caelum.vraptor.http.DefaultParameterNameProviderTest


** CLASS br.com.caelum.vraptor.http.DefaultFormatResolverTest



========== method  if_formatIsSpecifiedReturnIt ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r2.<javax.servlet.http.HttpServletRequest: java.lang.String getParameter(java.lang.String)>("_format")



========== method  if_formatIsSpecifiedReturnItEvenIfAcceptsHtml ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r2.<javax.servlet.http.HttpServletRequest: java.lang.String getParameter(java.lang.String)>("_format")

 InvokeExpr: interfaceinvoke $r6.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Accept")



========== method  if_formatNotSpecifiedShouldReturnRequestAcceptFormat ========:

 Total invocations on Mocks 4 :

 InvokeExpr: interfaceinvoke $r2.<javax.servlet.http.HttpServletRequest: java.lang.String getParameter(java.lang.String)>("_format")

 InvokeExpr: interfaceinvoke $r6.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Accept")

 InvokeExpr: interfaceinvoke $r10.<br.com.caelum.vraptor.view.AcceptHeaderToFormat: java.lang.String getFormat(java.lang.String)>("application/xml")

 InvokeExpr: interfaceinvoke $r18.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Accept")



========== method  if_formatNotSpecifiedAndNoAcceptsHaveFormat ========:

 Total invocations on Mocks 3 :

 InvokeExpr: interfaceinvoke $r2.<javax.servlet.http.HttpServletRequest: java.lang.String getParameter(java.lang.String)>("_format")

 InvokeExpr: interfaceinvoke $r6.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Accept")

 InvokeExpr: interfaceinvoke $r13.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Accept")



========== method  ifAcceptHeaderIsNullShouldReturnDefault ========:

 Total invocations on Mocks 3 :

 InvokeExpr: interfaceinvoke $r2.<javax.servlet.http.HttpServletRequest: java.lang.String getParameter(java.lang.String)>("_format")

 InvokeExpr: interfaceinvoke $r6.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Accept")

 InvokeExpr: interfaceinvoke $r10.<br.com.caelum.vraptor.view.AcceptHeaderToFormat: java.lang.String getFormat(java.lang.String)>(null)


** CLASS br.com.caelum.vraptor.http.DefaultResourceTranslatorTest



========== method  setup ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r7.<javax.servlet.http.HttpServletRequest: java.lang.String getContextPath()>()



========== method  handlesInclude ========:

 Total invocations on Mocks 3 :

 InvokeExpr: interfaceinvoke $r2.<javax.servlet.http.HttpServletRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.include.request_uri")

 InvokeExpr: interfaceinvoke $r6.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()

 InvokeExpr: interfaceinvoke $r12.<br.com.caelum.vraptor.http.route.Router: br.com.caelum.vraptor.resource.ResourceMethod parse(java.lang.String,br.com.caelum.vraptor.resource.HttpMethod,br.com.caelum.vraptor.http.MutableRequest)>("/url", $r11, $r10)



========== method  canHandleTheCorrectMethod ========:

 Total invocations on Mocks 3 :

 InvokeExpr: interfaceinvoke $r2.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()

 InvokeExpr: interfaceinvoke $r6.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()

 InvokeExpr: interfaceinvoke $r12.<br.com.caelum.vraptor.http.route.Router: br.com.caelum.vraptor.resource.ResourceMethod parse(java.lang.String,br.com.caelum.vraptor.resource.HttpMethod,br.com.caelum.vraptor.http.MutableRequest)>("/url", $r11, $r10)



========== method  shouldAcceptCaseInsensitiveRequestMethods ========:

 Total invocations on Mocks 3 :

 InvokeExpr: interfaceinvoke $r2.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()

 InvokeExpr: interfaceinvoke $r6.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()

 InvokeExpr: interfaceinvoke $r12.<br.com.caelum.vraptor.http.route.Router: br.com.caelum.vraptor.resource.ResourceMethod parse(java.lang.String,br.com.caelum.vraptor.resource.HttpMethod,br.com.caelum.vraptor.http.MutableRequest)>("/url", $r11, $r10)



========== method  shouldAcceptCaseInsensitiveGetRequestUsingThe_methodParameter ========:

 Total invocations on Mocks 4 :

 InvokeExpr: interfaceinvoke $r2.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()

 InvokeExpr: interfaceinvoke $r6.<javax.servlet.http.HttpServletRequest: java.lang.String getParameter(java.lang.String)>("_method")

 InvokeExpr: interfaceinvoke $r10.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()

 InvokeExpr: interfaceinvoke $r16.<br.com.caelum.vraptor.http.route.Router: br.com.caelum.vraptor.resource.ResourceMethod parse(java.lang.String,br.com.caelum.vraptor.resource.HttpMethod,br.com.caelum.vraptor.http.MutableRequest)>("/url", $r15, $r14)



========== method  shouldThrowExceptionWhenRequestANotKnownMethod ========:

 Total invocations on Mocks 3 :

 InvokeExpr: interfaceinvoke $r1.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()

 InvokeExpr: interfaceinvoke $r5.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()

 InvokeExpr: interfaceinvoke $r9.<br.com.caelum.vraptor.http.route.Router: br.com.caelum.vraptor.resource.ResourceMethod parse(java.lang.String,br.com.caelum.vraptor.resource.HttpMethod,br.com.caelum.vraptor.http.MutableRequest)>($r10, $r12, $r14)



========== method  shouldOverrideTheHttpMethodByUsingThe_methodParameter ========:

 Total invocations on Mocks 4 :

 InvokeExpr: interfaceinvoke $r2.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()

 InvokeExpr: interfaceinvoke $r6.<javax.servlet.http.HttpServletRequest: java.lang.String getParameter(java.lang.String)>("_method")

 InvokeExpr: interfaceinvoke $r10.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()

 InvokeExpr: interfaceinvoke $r16.<br.com.caelum.vraptor.http.route.Router: br.com.caelum.vraptor.resource.ResourceMethod parse(java.lang.String,br.com.caelum.vraptor.resource.HttpMethod,br.com.caelum.vraptor.http.MutableRequest)>("/url", $r15, $r14)



========== method  canHandleUrlIfRootContext ========:

 Total invocations on Mocks 4 :

 InvokeExpr: interfaceinvoke $r2.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()

 InvokeExpr: interfaceinvoke $r6.<javax.servlet.http.HttpServletRequest: java.lang.String getContextPath()>()

 InvokeExpr: interfaceinvoke $r10.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()

 InvokeExpr: interfaceinvoke $r16.<br.com.caelum.vraptor.http.route.Router: br.com.caelum.vraptor.resource.ResourceMethod parse(java.lang.String,br.com.caelum.vraptor.resource.HttpMethod,br.com.caelum.vraptor.http.MutableRequest)>("/url", $r15, $r14)



========== method  canHandleUrlIfNonRootContext ========:

 Total invocations on Mocks 4 :

 InvokeExpr: interfaceinvoke $r2.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()

 InvokeExpr: interfaceinvoke $r6.<javax.servlet.http.HttpServletRequest: java.lang.String getContextPath()>()

 InvokeExpr: interfaceinvoke $r10.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()

 InvokeExpr: interfaceinvoke $r16.<br.com.caelum.vraptor.http.route.Router: br.com.caelum.vraptor.resource.ResourceMethod parse(java.lang.String,br.com.caelum.vraptor.resource.HttpMethod,br.com.caelum.vraptor.http.MutableRequest)>("/url", $r15, $r14)



========== method  canHandleUrlIfPlainRootContext ========:

 Total invocations on Mocks 3 :

 InvokeExpr: interfaceinvoke $r2.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()

 InvokeExpr: interfaceinvoke $r6.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()

 InvokeExpr: interfaceinvoke $r12.<br.com.caelum.vraptor.http.route.Router: br.com.caelum.vraptor.resource.ResourceMethod parse(java.lang.String,br.com.caelum.vraptor.resource.HttpMethod,br.com.caelum.vraptor.http.MutableRequest)>("/", $r11, $r10)



========== method  canHandleComposedUrlIfPlainRootContext ========:

 Total invocations on Mocks 3 :

 InvokeExpr: interfaceinvoke $r2.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()

 InvokeExpr: interfaceinvoke $r6.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()

 InvokeExpr: interfaceinvoke $r12.<br.com.caelum.vraptor.http.route.Router: br.com.caelum.vraptor.resource.ResourceMethod parse(java.lang.String,br.com.caelum.vraptor.resource.HttpMethod,br.com.caelum.vraptor.http.MutableRequest)>("/products/1", $r11, $r10)



========== method  canHandleComposedUrlIfNonRootContext ========:

 Total invocations on Mocks 4 :

 InvokeExpr: interfaceinvoke $r2.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()

 InvokeExpr: interfaceinvoke $r6.<javax.servlet.http.HttpServletRequest: java.lang.String getContextPath()>()

 InvokeExpr: interfaceinvoke $r10.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()

 InvokeExpr: interfaceinvoke $r16.<br.com.caelum.vraptor.http.route.Router: br.com.caelum.vraptor.resource.ResourceMethod parse(java.lang.String,br.com.caelum.vraptor.resource.HttpMethod,br.com.caelum.vraptor.http.MutableRequest)>("/products/1", $r15, $r14)



========== method  canHandleUrlWithAppendedJSessionID ========:

 Total invocations on Mocks 4 :

 InvokeExpr: interfaceinvoke $r1.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()

 InvokeExpr: interfaceinvoke $r6.<javax.servlet.http.HttpServletRequest: java.lang.String getContextPath()>()

 InvokeExpr: interfaceinvoke $r10.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()

 InvokeExpr: interfaceinvoke $r16.<br.com.caelum.vraptor.http.route.Router: br.com.caelum.vraptor.resource.ResourceMethod parse(java.lang.String,br.com.caelum.vraptor.resource.HttpMethod,br.com.caelum.vraptor.http.MutableRequest)>("/products/1", $r15, $r14)



========== method  canHandleUrlIfNonRootContextButPlainRequest ========:

 Total invocations on Mocks 4 :

 InvokeExpr: interfaceinvoke $r2.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()

 InvokeExpr: interfaceinvoke $r6.<javax.servlet.http.HttpServletRequest: java.lang.String getContextPath()>()

 InvokeExpr: interfaceinvoke $r10.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>()

 InvokeExpr: interfaceinvoke $r16.<br.com.caelum.vraptor.http.route.Router: br.com.caelum.vraptor.resource.ResourceMethod parse(java.lang.String,br.com.caelum.vraptor.resource.HttpMethod,br.com.caelum.vraptor.http.MutableRequest)>("/", $r15, $r14)


** CLASS br.com.caelum.vraptor.http.route.RulesTest



========== method  setup ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r4.<br.com.caelum.vraptor.http.route.Router: br.com.caelum.vraptor.http.route.RouteBuilder builderFor(java.lang.String)>("")


** CLASS br.com.caelum.vraptor.http.route.PathAnnotationRoutesParserTest$AnnotatedController


** CLASS br.com.caelum.vraptor.http.route.RouteBuilderTest



========== method  setUp ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.http.ParameterNameProvider: java.lang.String[] parameterNamesFor(java.lang.reflect.AccessibleObject)>($r3)


** CLASS br.com.caelum.vraptor.http.route.DefaultParametersControlTest



========== method  registerExtraParametersFromAcessedUrl ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r9.<br.com.caelum.vraptor.http.MutableRequest: void setParameter(java.lang.String,java.lang.String[])>("dog.id", $r8)



========== method  registerParametersWithAsterisks ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r9.<br.com.caelum.vraptor.http.MutableRequest: void setParameter(java.lang.String,java.lang.String[])>("my.path", $r8)



========== method  registerParametersWithRegexes ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r9.<br.com.caelum.vraptor.http.MutableRequest: void setParameter(java.lang.String,java.lang.String[])>("hexa", $r8)



========== method  registerParametersWithMultipleRegexes ========:

 Total invocations on Mocks 3 :

 InvokeExpr: interfaceinvoke $r10.<br.com.caelum.vraptor.http.MutableRequest: void setParameter(java.lang.String,java.lang.String[])>("hash1", $r9)

 InvokeExpr: interfaceinvoke $r14.<br.com.caelum.vraptor.http.MutableRequest: void setParameter(java.lang.String,java.lang.String[])>("id", $r13)

 InvokeExpr: interfaceinvoke $r18.<br.com.caelum.vraptor.http.MutableRequest: void setParameter(java.lang.String,java.lang.String[])>("hash2", $r17)



========== method  shouldUseConverterIfItExists ========:

 Total invocations on Mocks 3 :

 InvokeExpr: interfaceinvoke $r2.<br.com.caelum.vraptor.core.Converters: boolean existsTwoWayFor(java.lang.Class)>(class "Lbr/com/caelum/vraptor/http/route/DefaultParametersControlTest$Client;")

 InvokeExpr: interfaceinvoke $r7.<br.com.caelum.vraptor.core.Converters: br.com.caelum.vraptor.TwoWayConverter twoWayConverterFor(java.lang.Class)>(class "Lbr/com/caelum/vraptor/http/route/DefaultParametersControlTest$Client;")

 InvokeExpr: interfaceinvoke $r12.<br.com.caelum.vraptor.TwoWayConverter: java.lang.String convert(java.lang.Object)>($r13)



========== method  shouldNotBeGreedyAtPatternCompiling ========:

 Total invocations on Mocks 3 :

 InvokeExpr: interfaceinvoke $r13.<br.com.caelum.vraptor.http.MutableRequest: void setParameter(java.lang.String,java.lang.String[])>("project.name", $r12)

 InvokeExpr: interfaceinvoke $r17.<br.com.caelum.vraptor.http.MutableRequest: void setParameter(java.lang.String,java.lang.String[])>("filename", $r16)

 InvokeExpr: interfaceinvoke $r21.<br.com.caelum.vraptor.http.MutableRequest: void setParameter(java.lang.String,java.lang.String[])>("buildId", $r20)



========== method  registerExtraParametersFromAcessedUrlWithGreedyParameters ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r9.<br.com.caelum.vraptor.http.MutableRequest: void setParameter(java.lang.String,java.lang.String[])>("pathToFile", $r8)



========== method  registerExtraParametersFromAcessedUrlWithGreedyAndDottedParameters ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r9.<br.com.caelum.vraptor.http.MutableRequest: void setParameter(java.lang.String,java.lang.String[])>("path.to.file", $r8)



========== method  shouldFillRequestWhenAPatternIsSpecified ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r16.<br.com.caelum.vraptor.http.MutableRequest: void setParameter(java.lang.String,java.lang.String[])>("project.id", $r15)



========== method  shouldDecodeUriParameters ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r9.<br.com.caelum.vraptor.http.MutableRequest: void setParameter(java.lang.String,java.lang.String[])>("name", $r8)

 InvokeExpr: interfaceinvoke $r14.<br.com.caelum.vraptor.http.MutableRequest: void setParameter(java.lang.String,java.lang.String[])>("name", $r13)


** CLASS br.com.caelum.vraptor.http.route.JavaEvaluatorTest


** CLASS br.com.caelum.vraptor.http.route.PathAnnotationRoutesParserTest



========== method  setup ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r4.<br.com.caelum.vraptor.http.route.Router: br.com.caelum.vraptor.http.route.RouteBuilder builderFor(java.lang.String)>($r5)


** CLASS br.com.caelum.vraptor.http.route.DefaultRouterTest



========== method  shouldThrowResourceNotFoundExceptionWhenNoRoutesMatchTheURI ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke r1.<br.com.caelum.vraptor.http.route.Route: boolean canHandle(java.lang.String)>($r4)



========== method  shouldThrowMethodNotAllowedExceptionWhenNoRoutesMatchTheURIWithGivenHttpMethod ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke r1.<br.com.caelum.vraptor.http.route.Route: boolean canHandle(java.lang.String)>($r4)

 InvokeExpr: interfaceinvoke r1.<br.com.caelum.vraptor.http.route.Route: java.util.EnumSet allowedMethods()>()



========== method  shouldObeyPriorityOfRoutes ========:

 Total invocations on Mocks 7 :

 InvokeExpr: interfaceinvoke r2.<br.com.caelum.vraptor.http.route.Route: br.com.caelum.vraptor.resource.ResourceMethod resourceMethod(br.com.caelum.vraptor.http.MutableRequest,java.lang.String)>($r8, "second")

 InvokeExpr: interfaceinvoke r1.<br.com.caelum.vraptor.http.route.Route: int getPriority()>()

 InvokeExpr: interfaceinvoke r2.<br.com.caelum.vraptor.http.route.Route: int getPriority()>()

 InvokeExpr: interfaceinvoke r1.<br.com.caelum.vraptor.http.route.Route: java.util.EnumSet allowedMethods()>()

 InvokeExpr: interfaceinvoke r2.<br.com.caelum.vraptor.http.route.Route: java.util.EnumSet allowedMethods()>()

 InvokeExpr: interfaceinvoke r1.<br.com.caelum.vraptor.http.route.Route: boolean canHandle(java.lang.String)>($r26)

 InvokeExpr: interfaceinvoke r2.<br.com.caelum.vraptor.http.route.Route: boolean canHandle(java.lang.String)>($r31)



========== method  acceptsASingleMappingRule ========:

 Total invocations on Mocks 4 :

 InvokeExpr: interfaceinvoke r1.<br.com.caelum.vraptor.http.route.Route: boolean canHandle(java.lang.String)>("/clients/add")

 InvokeExpr: interfaceinvoke r1.<br.com.caelum.vraptor.http.route.Route: java.util.EnumSet allowedMethods()>()

 InvokeExpr: interfaceinvoke r1.<br.com.caelum.vraptor.http.route.Route: br.com.caelum.vraptor.resource.ResourceMethod resourceMethod(br.com.caelum.vraptor.http.MutableRequest,java.lang.String)>($r13, "/clients/add")

 InvokeExpr: interfaceinvoke $r27.<br.com.caelum.vraptor.http.route.Route: int getPriority()>()



========== method  passesTheWebMethod ========:

 Total invocations on Mocks 4 :

 InvokeExpr: interfaceinvoke r2.<br.com.caelum.vraptor.http.route.Route: boolean canHandle(java.lang.String)>("/clients/add")

 InvokeExpr: interfaceinvoke r2.<br.com.caelum.vraptor.http.route.Route: java.util.EnumSet allowedMethods()>()

 InvokeExpr: interfaceinvoke r2.<br.com.caelum.vraptor.http.route.Route: br.com.caelum.vraptor.resource.ResourceMethod resourceMethod(br.com.caelum.vraptor.http.MutableRequest,java.lang.String)>($r13, "/clients/add")

 InvokeExpr: interfaceinvoke $r26.<br.com.caelum.vraptor.http.route.Route: int getPriority()>()



========== method  usesTheFirstRegisteredRuleMatchingThePattern ========:

 Total invocations on Mocks 4 :

 InvokeExpr: interfaceinvoke r1.<br.com.caelum.vraptor.http.route.Route: boolean canHandle(java.lang.String)>("/clients/add")

 InvokeExpr: interfaceinvoke r1.<br.com.caelum.vraptor.http.route.Route: java.util.EnumSet allowedMethods()>()

 InvokeExpr: interfaceinvoke r1.<br.com.caelum.vraptor.http.route.Route: br.com.caelum.vraptor.resource.ResourceMethod resourceMethod(br.com.caelum.vraptor.http.MutableRequest,java.lang.String)>($r21, "/clients/add")

 InvokeExpr: interfaceinvoke r1.<br.com.caelum.vraptor.http.route.Route: int getPriority()>()



========== method  throwsExceptionIfMoreThanOneUriMatchesWithSamePriority ========:

 Total invocations on Mocks 3 :

 InvokeExpr: interfaceinvoke r1.<br.com.caelum.vraptor.http.route.Route: boolean canHandle(java.lang.String)>("/clients/add")

 InvokeExpr: interfaceinvoke r1.<br.com.caelum.vraptor.http.route.Route: java.util.EnumSet allowedMethods()>()

 InvokeExpr: interfaceinvoke r1.<br.com.caelum.vraptor.http.route.Route: int getPriority()>()


** CLASS br.com.caelum.vraptor.http.route.FixedMethodStrategyTest



========== method  canTranslate ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r9.<br.com.caelum.vraptor.http.route.ParametersControl: boolean matches(java.lang.String)>("/clients/add")

 InvokeExpr: interfaceinvoke $r23.<br.com.caelum.vraptor.http.route.ParametersControl: void fillIntoRequest(java.lang.String,br.com.caelum.vraptor.http.MutableRequest)>("/clients/add", $r22)


** CLASS br.com.caelum.vraptor.http.route.DefaultTypeFinderTest



========== method  shouldGetTypesCorrectly ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r9.<br.com.caelum.vraptor.http.ParameterNameProvider: java.lang.String[] parameterNamesFor(java.lang.reflect.AccessibleObject)>(r1)



========== method  shouldGetTypesCorrectlyOnInheritance ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r9.<br.com.caelum.vraptor.http.ParameterNameProvider: java.lang.String[] parameterNamesFor(java.lang.reflect.AccessibleObject)>(r1)


** CLASS br.com.caelum.vraptor.http.VRaptorRequestTest



========== method  setup ========:

 Total invocations on Mocks 4 :

 InvokeExpr: interfaceinvoke $r7.<javax.servlet.http.HttpServletRequest: java.util.Enumeration getParameterNames()>()

 InvokeExpr: interfaceinvoke $r12.<javax.servlet.http.HttpServletRequest: java.util.Map getParameterMap()>()

 InvokeExpr: interfaceinvoke $r16.<javax.servlet.http.HttpServletRequest: java.lang.String getParameter(java.lang.String)>("name")

 InvokeExpr: interfaceinvoke $r20.<javax.servlet.http.HttpServletRequest: java.lang.String getParameter(java.lang.String)>("minimum")


** CLASS br.com.caelum.vraptor.http.EncodingHandlerFactoryTest



========== method  shouldReturnANullHandlerWhenThereIsNoEncodingInitParameter ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r2.<javax.servlet.ServletContext: java.lang.String getInitParameter(java.lang.String)>("br.com.caelum.vraptor.encoding")



========== method  shouldReturnAWebXmlHandlerWhenThereIsAnEncodingInitParameter ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r2.<javax.servlet.ServletContext: java.lang.String getInitParameter(java.lang.String)>("br.com.caelum.vraptor.encoding")


** CLASS br.com.caelum.vraptor.http.WebXmlEncodingHandlerTest



========== method  shouldSetEncodingToUTF8 ========:

 Total invocations on Mocks 3 :

 InvokeExpr: interfaceinvoke $r1.<javax.servlet.ServletContext: java.lang.String getInitParameter(java.lang.String)>("br.com.caelum.vraptor.encoding")

 InvokeExpr: interfaceinvoke $r10.<javax.servlet.http.HttpServletRequest: void setCharacterEncoding(java.lang.String)>("UTF-8")

 InvokeExpr: interfaceinvoke $r13.<javax.servlet.http.HttpServletResponse: void setCharacterEncoding(java.lang.String)>("UTF-8")


** CLASS br.com.caelum.vraptor.http.ParametersProviderTest



========== method  thereAreNoParameters ========:

 Total invocations on Mocks 3 :

 InvokeExpr: interfaceinvoke $r1.<javax.servlet.http.HttpServletRequest: java.util.Enumeration getParameterNames()>()

 InvokeExpr: interfaceinvoke $r7.<javax.servlet.http.HttpServletRequest: java.util.Map getParameterMap()>()

 InvokeExpr: interfaceinvoke $r12.<br.com.caelum.vraptor.http.ParameterNameProvider: java.lang.String[] parameterNamesFor(java.lang.reflect.AccessibleObject)>($r14)



========== method  requestParameterIs ========:

 Total invocations on Mocks 4 :

 InvokeExpr: interfaceinvoke $r6.<javax.servlet.http.HttpServletRequest: java.lang.String[] getParameterValues(java.lang.String)>(r2)

 InvokeExpr: interfaceinvoke $r11.<javax.servlet.http.HttpServletRequest: java.util.Enumeration getParameterNames()>()

 InvokeExpr: interfaceinvoke $r17.<br.com.caelum.vraptor.http.ParameterNameProvider: java.lang.String[] parameterNamesFor(java.lang.reflect.AccessibleObject)>($r18)

 InvokeExpr: interfaceinvoke $r23.<javax.servlet.http.HttpServletRequest: java.util.Map getParameterMap()>()


** CLASS br.com.caelum.vraptor.http.ognl.EmptyElementsRemovalTest


** CLASS br.com.caelum.vraptor.http.ognl.VRaptorConvertersAdapterTest



========== method  shouldInvokePrimitiveConverter ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r3.<br.com.caelum.vraptor.core.Converters: br.com.caelum.vraptor.Converter 'to'(java.lang.Class)>($r2)

 InvokeExpr: interfaceinvoke $r10.<br.com.caelum.vraptor.Converter: java.lang.Object convert(java.lang.String,java.lang.Class,java.util.ResourceBundle)>("2", $r9, $r8)



========== method  shouldInvokeCustomTypeConverter ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r2.<br.com.caelum.vraptor.core.Converters: br.com.caelum.vraptor.Converter 'to'(java.lang.Class)>(class "Lbr/com/caelum/vraptor/http/ognl/VRaptorConvertersAdapterTest$Tail;")

 InvokeExpr: interfaceinvoke $r8.<br.com.caelum.vraptor.Converter: java.lang.Object convert(java.lang.String,java.lang.Class,java.util.ResourceBundle)>("15", class "Lbr/com/caelum/vraptor/http/ognl/VRaptorConvertersAdapterTest$Tail;", $r7)



========== method  shouldThrowExceptionIfNoConverterIsFound ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r3.<br.com.caelum.vraptor.core.Converters: br.com.caelum.vraptor.Converter 'to'(java.lang.Class)>(class "Lbr/com/caelum/vraptor/http/ognl/VRaptorConvertersAdapterTest$Tail;")


** CLASS br.com.caelum.vraptor.http.ognl.ListNullHandlerTest



========== method  shouldNotSupportNonGenericLists ========:

 Total invocations on Mocks 3 :

 InvokeExpr: virtualinvoke r1.<ognl.SimpleNode: java.lang.String toString()>()

 InvokeExpr: virtualinvoke $r6.<ognl.Evaluation: ognl.SimpleNode getNode()>()

 InvokeExpr: virtualinvoke $r10.<ognl.Evaluation: java.lang.Object getSource()>()



========== method  shouldInsertItemsUntilTheRequiredPosition ========:

 Total invocations on Mocks 4 :

 InvokeExpr: virtualinvoke r1.<ognl.SimpleNode: java.lang.String toString()>()

 InvokeExpr: virtualinvoke $r6.<ognl.Evaluation: ognl.SimpleNode getNode()>()

 InvokeExpr: virtualinvoke $r10.<ognl.Evaluation: java.lang.Object getSource()>()

 InvokeExpr: virtualinvoke $r40.<br.com.caelum.vraptor.http.ognl.EmptyElementsRemoval: void add(java.util.Collection)>($r41)


** CLASS br.com.caelum.vraptor.http.ognl.ListAccessorTest



========== method  setup ========:

 Total invocations on Mocks 3 :

 InvokeExpr: virtualinvoke $r2.<ognl.OgnlContext: java.lang.Object getRoot()>()

 InvokeExpr: virtualinvoke $r7.<ognl.OgnlContext: java.lang.Object get(java.lang.Object)>("rootType")

 InvokeExpr: interfaceinvoke $r12.<br.com.caelum.vraptor.core.Converters: br.com.caelum.vraptor.Converter 'to'(java.lang.Class)>(class "Ljava/lang/String;")



========== method  gettingShouldReturnValueIfIndexFound ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>("nothing")

 InvokeExpr: interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>("guilherme")



========== method  settingShouldNullifyUpToIndex ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(0)

 InvokeExpr: interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(1)


** CLASS br.com.caelum.vraptor.http.ognl.GenericNullHandlerTest



========== method  shouldInstantiateArrayListForCollectionInterface ========:

 Total invocations on Mocks 1 :

 InvokeExpr: virtualinvoke $r12.<br.com.caelum.vraptor.http.ognl.EmptyElementsRemoval: void add(java.util.Collection)>($r11)



========== method  shouldInstantiateArrayListForListInterface ========:

 Total invocations on Mocks 1 :

 InvokeExpr: virtualinvoke $r12.<br.com.caelum.vraptor.http.ognl.EmptyElementsRemoval: void add(java.util.Collection)>($r11)



========== method  shouldInstantiateLinkedListForQueueInterface ========:

 Total invocations on Mocks 1 :

 InvokeExpr: virtualinvoke $r12.<br.com.caelum.vraptor.http.ognl.EmptyElementsRemoval: void add(java.util.Collection)>($r11)



========== method  shouldInstantiateHashSetListForSetInterface ========:

 Total invocations on Mocks 1 :

 InvokeExpr: virtualinvoke $r12.<br.com.caelum.vraptor.http.ognl.EmptyElementsRemoval: void add(java.util.Collection)>($r11)



========== method  shouldInstantiateTreeSetListForSortedSetInterface ========:

 Total invocations on Mocks 1 :

 InvokeExpr: virtualinvoke $r12.<br.com.caelum.vraptor.http.ognl.EmptyElementsRemoval: void add(java.util.Collection)>($r11)


** CLASS br.com.caelum.vraptor.http.ognl.ArrayAccessorTest



========== method  setup ========:

 Total invocations on Mocks 8 :

 InvokeExpr: virtualinvoke $r16.<ognl.OgnlContext: java.lang.Object get(java.lang.Object)>("removal")

 InvokeExpr: virtualinvoke $r20.<ognl.OgnlContext: java.lang.Object get(java.lang.Object)>("proxifier")

 InvokeExpr: virtualinvoke $r24.<ognl.OgnlContext: ognl.Evaluation getCurrentEvaluation()>()

 InvokeExpr: virtualinvoke $r29.<ognl.Evaluation: ognl.Evaluation getPrevious()>()

 InvokeExpr: virtualinvoke $r34.<ognl.Evaluation: ognl.SimpleNode getNode()>()

 InvokeExpr: virtualinvoke $r39.<ognl.SimpleNode: java.lang.String toString()>()

 InvokeExpr: virtualinvoke $r43.<ognl.Evaluation: java.lang.Object getSource()>()

 InvokeExpr: virtualinvoke $r48.<ognl.OgnlContext: ognl.TypeConverter getTypeConverter()>()



========== method  settingShouldNullifyUpToIndexAndIgnoreRemoval ========:

 Total invocations on Mocks 2 :

 InvokeExpr: virtualinvoke $r2.<ognl.OgnlContext: java.lang.Object getRoot()>()

 InvokeExpr: interfaceinvoke $r7.<ognl.TypeConverter: java.lang.Object convertValue(java.util.Map,java.lang.Object,java.lang.reflect.Member,java.lang.String,java.lang.Object,java.lang.Class)>($r8, $r9, $r11, $r12, $r13, $r15)


** CLASS br.com.caelum.vraptor.http.ognl.MiscOgnlSupportTest



========== method  setup ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r16.<br.com.caelum.vraptor.core.Converters: br.com.caelum.vraptor.Converter 'to'(java.lang.Class)>(class "Ljava/lang/String;")

 InvokeExpr: interfaceinvoke $r21.<br.com.caelum.vraptor.core.Converters: br.com.caelum.vraptor.Converter 'to'(java.lang.Class)>(class "Ljava/lang/Long;")



========== method  isCapableOfDealingWithEmptyParameterForInternalWrapperValue ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.core.Converters: br.com.caelum.vraptor.Converter 'to'(java.lang.Class)>(class "Ljava/lang/Integer;")



========== method  isCapableOfDealingWithEmptyParameterForInternalValueWhichNeedsAConverter ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke r1.<br.com.caelum.vraptor.http.MutableRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.jsp.jstl.fmt.locale.request")

 InvokeExpr: interfaceinvoke $r10.<br.com.caelum.vraptor.core.Converters: br.com.caelum.vraptor.Converter 'to'(java.lang.Class)>(class "Ljava/util/Calendar;")


** CLASS br.com.caelum.vraptor.http.ognl.OgnlGenericTypesSupportTest



========== method  setup ========:

 Total invocations on Mocks 4 :

 InvokeExpr: interfaceinvoke $r4.<br.com.caelum.vraptor.ioc.Container: java.lang.Object instanceFor(java.lang.Class)>(class "Lbr/com/caelum/vraptor/core/Converters;")

 InvokeExpr: interfaceinvoke $r9.<br.com.caelum.vraptor.core.Converters: br.com.caelum.vraptor.Converter 'to'(java.lang.Class)>(class "Ljava/lang/Long;")

 InvokeExpr: interfaceinvoke $r14.<br.com.caelum.vraptor.core.Converters: br.com.caelum.vraptor.Converter 'to'(java.lang.Class)>(class "Ljava/lang/String;")

 InvokeExpr: interfaceinvoke $r19.<br.com.caelum.vraptor.ioc.Container: java.lang.Object instanceFor(java.lang.Class)>(class "Lbr/com/caelum/vraptor/http/ognl/EmptyElementsRemoval;")


** CLASS br.com.caelum.vraptor.http.ognl.ReflectionBasedNullHandlerTest



========== method  setup ========:

 Total invocations on Mocks 3 :

 InvokeExpr: interfaceinvoke $r17.<br.com.caelum.vraptor.ioc.Container: java.lang.Object instanceFor(java.lang.Class)>(class "Lbr/com/caelum/vraptor/core/Converters;")

 InvokeExpr: interfaceinvoke $r22.<br.com.caelum.vraptor.core.Converters: br.com.caelum.vraptor.Converter 'to'(java.lang.Class)>(class "Ljava/lang/String;")

 InvokeExpr: interfaceinvoke $r27.<br.com.caelum.vraptor.core.Converters: br.com.caelum.vraptor.Converter 'to'(java.lang.Class)>(class "Ljava/lang/Long;")



========== method  shouldInstantiateAListOfStrings ========:

 Total invocations on Mocks 1 :

 InvokeExpr: virtualinvoke $r7.<br.com.caelum.vraptor.http.ognl.EmptyElementsRemoval: void add(java.util.Collection)>($r8)



========== method  shouldNotInstantiateIfLastTerm ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke r1.<ognl.TypeConverter: java.lang.Object convertValue(java.util.Map,java.lang.Object,java.lang.reflect.Member,java.lang.String,java.lang.Object,java.lang.Class)>($r10, r2, r4, "mouse", "22", class "Lbr/com/caelum/vraptor/http/ognl/Mouse;")


** CLASS br.com.caelum.vraptor.http.ParanamerNameProviderTest


** CLASS br.com.caelum.vraptor.view.DefaultRefererResultTest



========== method  whenThereIsNoRefererShouldThrowExceptionOnForward ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r2.<br.com.caelum.vraptor.http.MutableRequest: java.lang.String getHeader(java.lang.String)>("Referer")



========== method  whenThereIsNoRefererShouldThrowExceptionOnRedirect ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r2.<br.com.caelum.vraptor.http.MutableRequest: java.lang.String getHeader(java.lang.String)>("Referer")



========== method  whenRefererDontMatchAControllerShouldForwardToPage ========:

 Total invocations on Mocks 4 :

 InvokeExpr: interfaceinvoke $r3.<br.com.caelum.vraptor.http.MutableRequest: java.lang.String getHeader(java.lang.String)>("Referer")

 InvokeExpr: interfaceinvoke $r7.<br.com.caelum.vraptor.http.MutableRequest: java.lang.String getContextPath()>()

 InvokeExpr: interfaceinvoke $r13.<br.com.caelum.vraptor.http.route.Router: br.com.caelum.vraptor.resource.ResourceMethod parse(java.lang.String,br.com.caelum.vraptor.resource.HttpMethod,br.com.caelum.vraptor.http.MutableRequest)>("/no-controller", $r12, $r11)

 InvokeExpr: interfaceinvoke $r27.<br.com.caelum.vraptor.view.PageResult: void forwardTo(java.lang.String)>("/no-controller")



========== method  whenRefererDontMatchAControllerShouldRedirectToPage ========:

 Total invocations on Mocks 4 :

 InvokeExpr: interfaceinvoke $r3.<br.com.caelum.vraptor.http.MutableRequest: java.lang.String getHeader(java.lang.String)>("Referer")

 InvokeExpr: interfaceinvoke $r7.<br.com.caelum.vraptor.http.MutableRequest: java.lang.String getContextPath()>()

 InvokeExpr: interfaceinvoke $r13.<br.com.caelum.vraptor.http.route.Router: br.com.caelum.vraptor.resource.ResourceMethod parse(java.lang.String,br.com.caelum.vraptor.resource.HttpMethod,br.com.caelum.vraptor.http.MutableRequest)>("/no-controller", $r12, $r11)

 InvokeExpr: interfaceinvoke $r27.<br.com.caelum.vraptor.view.PageResult: void redirectTo(java.lang.String)>("/no-controller")



========== method  whenRefererMatchesAControllerShouldRedirectToIt ========:

 Total invocations on Mocks 6 :

 InvokeExpr: interfaceinvoke $r9.<br.com.caelum.vraptor.http.MutableRequest: java.lang.String getHeader(java.lang.String)>("Referer")

 InvokeExpr: interfaceinvoke $r13.<br.com.caelum.vraptor.http.MutableRequest: java.lang.String getContextPath()>()

 InvokeExpr: interfaceinvoke $r19.<br.com.caelum.vraptor.http.route.Router: br.com.caelum.vraptor.resource.ResourceMethod parse(java.lang.String,br.com.caelum.vraptor.resource.HttpMethod,br.com.caelum.vraptor.http.MutableRequest)>("/no-controller", $r18, $r17)

 InvokeExpr: interfaceinvoke r1.<br.com.caelum.vraptor.view.LogicResult: java.lang.Object redirectTo(java.lang.Class)>(class "Lbr/com/caelum/vraptor/view/DefaultRefererResultTest$RefererController;")

 InvokeExpr: interfaceinvoke $r34.<br.com.caelum.vraptor.view.LogicResult: java.lang.Object redirectTo(java.lang.Class)>(class "Lbr/com/caelum/vraptor/view/DefaultRefererResultTest$RefererController;")

 InvokeExpr: virtualinvoke $r37.<br.com.caelum.vraptor.view.DefaultRefererResultTest$RefererController: void index()>()



========== method  whenRefererMatchesAControllerShouldForwardToIt ========:

 Total invocations on Mocks 6 :

 InvokeExpr: interfaceinvoke $r9.<br.com.caelum.vraptor.http.MutableRequest: java.lang.String getHeader(java.lang.String)>("Referer")

 InvokeExpr: interfaceinvoke $r13.<br.com.caelum.vraptor.http.MutableRequest: java.lang.String getContextPath()>()

 InvokeExpr: interfaceinvoke $r19.<br.com.caelum.vraptor.http.route.Router: br.com.caelum.vraptor.resource.ResourceMethod parse(java.lang.String,br.com.caelum.vraptor.resource.HttpMethod,br.com.caelum.vraptor.http.MutableRequest)>("/no-controller", $r18, $r17)

 InvokeExpr: interfaceinvoke r1.<br.com.caelum.vraptor.view.LogicResult: java.lang.Object forwardTo(java.lang.Class)>(class "Lbr/com/caelum/vraptor/view/DefaultRefererResultTest$RefererController;")

 InvokeExpr: interfaceinvoke $r34.<br.com.caelum.vraptor.view.LogicResult: java.lang.Object forwardTo(java.lang.Class)>(class "Lbr/com/caelum/vraptor/view/DefaultRefererResultTest$RefererController;")

 InvokeExpr: virtualinvoke $r37.<br.com.caelum.vraptor.view.DefaultRefererResultTest$RefererController: void index()>()


** CLASS br.com.caelum.vraptor.view.DefaultHttpResultTest



========== method  shouldDelegateToStatus ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r4.<br.com.caelum.vraptor.view.Status: void movedPermanentlyTo(java.lang.String)>("/my/uri")



========== method  shouldDelegateToStatusWhenMovingToLogic ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.view.Status: java.lang.Object movedPermanentlyTo(java.lang.Class)>(class "Lbr/com/caelum/vraptor/view/DefaultHttpResultTest$RandomController;")

 InvokeExpr: interfaceinvoke $r11.<br.com.caelum.vraptor.view.Status: java.lang.Object movedPermanentlyTo(java.lang.Class)>(class "Lbr/com/caelum/vraptor/view/DefaultHttpResultTest$RandomController;")



========== method  shouldHeadersProperly ========:

 Total invocations on Mocks 3 :

 InvokeExpr: interfaceinvoke $r5.<javax.servlet.http.HttpServletResponse: void addDateHeader(java.lang.String,long)>("key", 10L)

 InvokeExpr: interfaceinvoke $r10.<javax.servlet.http.HttpServletResponse: void addHeader(java.lang.String,java.lang.String)>("key", "value")

 InvokeExpr: interfaceinvoke $r15.<javax.servlet.http.HttpServletResponse: void addIntHeader(java.lang.String,int)>("key", 10)



========== method  shouldSendError ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r4.<javax.servlet.http.HttpServletResponse: void sendError(int)>(500)



========== method  shouldThrowsResultExceptionIfAnIOExceptionWhenSendError ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r12.<javax.servlet.http.HttpServletResponse: void sendError(int)>($i1)



========== method  shouldSendErrorWithMessage ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r4.<javax.servlet.http.HttpServletResponse: void sendError(int,java.lang.String)>(500, "A simple message")



========== method  shouldThrowResultExceptionIfAnIOExceptionWhenSendErrorWithMessage ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r13.<javax.servlet.http.HttpServletResponse: void sendError(int,java.lang.String)>($i1, $r14)



========== method  shouldSetStatusCode ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r4.<javax.servlet.http.HttpServletResponse: void setStatus(int)>(500)



========== method  shouldWriteStringBody ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r3.<javax.servlet.http.HttpServletResponse: java.io.PrintWriter getWriter()>()

 InvokeExpr: virtualinvoke $r10.<java.io.PrintWriter: void print(java.lang.String)>($r11)


** CLASS br.com.caelum.vraptor.view.DefaultPathResolverTest



========== method  config ========:

 Total invocations on Mocks 3 :

 InvokeExpr: interfaceinvoke $r3.<br.com.caelum.vraptor.resource.ResourceMethod: br.com.caelum.vraptor.resource.ResourceClass getResource()>()

 InvokeExpr: interfaceinvoke $r8.<br.com.caelum.vraptor.resource.ResourceMethod: java.lang.reflect.Method getMethod()>()

 InvokeExpr: interfaceinvoke $r15.<br.com.caelum.vraptor.resource.ResourceClass: java.lang.Class getType()>()



========== method  shouldUseResourceTypeAndMethodNameToResolveJsp ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r2.<br.com.caelum.vraptor.http.FormatResolver: java.lang.String getAcceptFormat()>()



========== method  shouldUseTheFormatIfSupplied ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r2.<br.com.caelum.vraptor.http.FormatResolver: java.lang.String getAcceptFormat()>()



========== method  shouldIgnoreHtmlFormat ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r2.<br.com.caelum.vraptor.http.FormatResolver: java.lang.String getAcceptFormat()>()


** CLASS br.com.caelum.vraptor.view.DefaultAcceptHeaderToFormatTest


** CLASS br.com.caelum.vraptor.view.DefaultPageResultTest



========== method  shouldRedirectIncludingContext ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.http.MutableRequest: java.lang.String getContextPath()>()

 InvokeExpr: interfaceinvoke $r8.<br.com.caelum.vraptor.http.MutableResponse: void sendRedirect(java.lang.String)>("/context/any/url")



========== method  shouldNotIncludeContextPathIfURIIsAbsolute ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r5.<br.com.caelum.vraptor.http.MutableRequest: java.lang.String getContextPath()>()

 InvokeExpr: interfaceinvoke $r10.<br.com.caelum.vraptor.http.MutableResponse: void sendRedirect(java.lang.String)>("http://vraptor.caelum.com.br")



========== method  shouldForwardToGivenURI ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.http.MutableRequest: javax.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)>("/any/url")

 InvokeExpr: interfaceinvoke $r12.<javax.servlet.RequestDispatcher: void forward(javax.servlet.ServletRequest,javax.servlet.ServletResponse)>($r11, $r10)



========== method  shouldThrowResultExceptionIfServletExceptionOccursWhileForwarding ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.http.MutableRequest: javax.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)>($r2)



========== method  shouldThrowResultExceptionIfIOExceptionOccursWhileForwarding ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.http.MutableRequest: javax.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)>($r2)



========== method  shouldAllowCustomPathResolverWhileForwardingView ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.http.MutableRequest: javax.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)>("fixed")

 InvokeExpr: interfaceinvoke $r12.<javax.servlet.RequestDispatcher: void forward(javax.servlet.ServletRequest,javax.servlet.ServletResponse)>($r11, $r10)



========== method  shouldThrowResultExceptionIfServletExceptionOccursWhileForwardingView ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.http.MutableRequest: javax.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)>($r2)



========== method  shouldThrowResultExceptionIfIOExceptionOccursWhileForwardingView ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.http.MutableRequest: javax.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)>($r2)



========== method  shouldAllowCustomPathResolverWhileIncluding ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.http.MutableRequest: javax.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)>("fixed")

 InvokeExpr: interfaceinvoke $r12.<javax.servlet.RequestDispatcher: void include(javax.servlet.ServletRequest,javax.servlet.ServletResponse)>($r11, $r10)



========== method  shouldThrowResultExceptionIfServletExceptionOccursWhileIncluding ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.http.MutableRequest: javax.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)>($r2)



========== method  shouldThrowResultExceptionIfIOExceptionOccursWhileIncluding ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.http.MutableRequest: javax.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)>($r2)



========== method  shoudNotExecuteLogicWhenUsingResultOf ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r2.<br.com.caelum.vraptor.http.MutableRequest: javax.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)>($r3)


** CLASS br.com.caelum.vraptor.view.DefaultLogicResultTest



========== method  shouldIncludeReturnValueOnForward ========:

 Total invocations on Mocks 3 :

 InvokeExpr: interfaceinvoke $r2.<br.com.caelum.vraptor.interceptor.TypeNameExtractor: java.lang.String nameFor(java.lang.reflect.Type)>(class "Ljava/lang/String;")

 InvokeExpr: interfaceinvoke $r14.<javax.servlet.RequestDispatcher: void forward(javax.servlet.ServletRequest,javax.servlet.ServletResponse)>($r13, $r12)

 InvokeExpr: interfaceinvoke $r17.<br.com.caelum.vraptor.http.MutableRequest: void setAttribute(java.lang.String,java.lang.Object)>("string", "A value")



========== method  shouldExecuteTheLogicAndRedirectToItsViewOnForward ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r15.<javax.servlet.RequestDispatcher: void forward(javax.servlet.ServletRequest,javax.servlet.ServletResponse)>($r14, $r13)



========== method  givenDispatcherWillBeReturnedWhenRequested ========:

 Total invocations on Mocks 3 :

 InvokeExpr: interfaceinvoke $r3.<br.com.caelum.vraptor.ioc.Container: java.lang.Object instanceFor(java.lang.Class)>(class "Lbr/com/caelum/vraptor/view/DefaultLogicResultTest$MyComponent;")

 InvokeExpr: interfaceinvoke $r7.<br.com.caelum.vraptor.view.PathResolver: java.lang.String pathFor(br.com.caelum.vraptor.resource.ResourceMethod)>($r9)

 InvokeExpr: interfaceinvoke $r13.<br.com.caelum.vraptor.http.MutableRequest: javax.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)>("Abc123")



========== method  shouldForwardToMethodsDefaultViewWhenResponseIsNotCommited ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r2.<br.com.caelum.vraptor.http.MutableResponse: boolean isCommitted()>()

 InvokeExpr: interfaceinvoke $r14.<javax.servlet.RequestDispatcher: void forward(javax.servlet.ServletRequest,javax.servlet.ServletResponse)>($r13, $r12)



========== method  shouldNotForwardToMethodsDefaultViewWhenResponseIsCommited ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r2.<br.com.caelum.vraptor.http.MutableResponse: boolean isCommitted()>()

 InvokeExpr: interfaceinvoke $r15.<javax.servlet.RequestDispatcher: void forward(javax.servlet.ServletRequest,javax.servlet.ServletResponse)>($r14, $r13)



========== method  shouldPutParametersOnFlashScopeOnRedirect ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r6.<br.com.caelum.vraptor.view.FlashScope: void includeParameters(br.com.caelum.vraptor.resource.ResourceMethod,java.lang.Object[])>($r9, $r11)



========== method  shouldNotPutParametersOnFlashScopeOnRedirectIfThereAreNoParameters ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r7.<br.com.caelum.vraptor.view.FlashScope: void includeParameters(br.com.caelum.vraptor.resource.ResourceMethod,java.lang.Object[])>($r9, $r11)



========== method  clientRedirectingWillRedirectToTranslatedUrl ========:

 Total invocations on Mocks 3 :

 InvokeExpr: interfaceinvoke $r2.<br.com.caelum.vraptor.http.MutableRequest: java.lang.String getContextPath()>()

 InvokeExpr: interfaceinvoke $r8.<br.com.caelum.vraptor.http.route.Router: java.lang.String urlFor(java.lang.Class,java.lang.reflect.Method,java.lang.Object[])>(class "Lbr/com/caelum/vraptor/view/DefaultLogicResultTest$MyComponent;", $r9, $r10)

 InvokeExpr: interfaceinvoke $r19.<br.com.caelum.vraptor.http.MutableResponse: void sendRedirect(java.lang.String)>("/contextcustom_url")



========== method  canRedirectWhenLogicMethodIsNotAnnotatedWithHttpMethods ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r6.<br.com.caelum.vraptor.http.MutableResponse: void sendRedirect(java.lang.String)>($r8)



========== method  canRedirectWhenLogicMethodIsAnnotatedWithHttpGetMethod ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r6.<br.com.caelum.vraptor.http.MutableResponse: void sendRedirect(java.lang.String)>($r8)



========== method  cannotRedirectWhenLogicMethodIsAnnotatedWithAnyHttpMethodButGet ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r9.<br.com.caelum.vraptor.http.MutableResponse: void sendRedirect(java.lang.String)>($r11)



========== method  shouldNotWrapValidationExceptionWhenForwarding ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r2.<br.com.caelum.vraptor.http.MutableResponse: boolean isCommitted()>()



========== method  shouldForwardToTheRightDefaultValue ========:

 Total invocations on Mocks 4 :

 InvokeExpr: interfaceinvoke r1.<br.com.caelum.vraptor.Result: br.com.caelum.vraptor.View use(java.lang.Class)>(class "Lbr/com/caelum/vraptor/view/PageResult;")

 InvokeExpr: interfaceinvoke $r13.<br.com.caelum.vraptor.ioc.Container: java.lang.Object instanceFor(java.lang.Class)>(class "Lbr/com/caelum/vraptor/view/DefaultLogicResultTest$TheComponent;")

 InvokeExpr: interfaceinvoke $r20.<br.com.caelum.vraptor.view.PathResolver: java.lang.String pathFor(br.com.caelum.vraptor.resource.ResourceMethod)>($r24)

 InvokeExpr: interfaceinvoke $r28.<br.com.caelum.vraptor.http.MutableRequest: javax.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)>($r29)


** CLASS br.com.caelum.vraptor.view.DefaultStatusTest



========== method  shouldSetNotFoundStatus ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r4.<javax.servlet.http.HttpServletResponse: void sendError(int)>(404)



========== method  shouldSetHeader ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r4.<javax.servlet.http.HttpServletResponse: void addHeader(java.lang.String,java.lang.String)>("Content-type", "application/xml")



========== method  shouldSetCreatedStatus ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r4.<javax.servlet.http.HttpServletResponse: void setStatus(int)>(201)



========== method  shouldSetCreatedStatusAndLocationWithAppPath ========:

 Total invocations on Mocks 3 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.config.Configuration: java.lang.String getApplicationPath()>()

 InvokeExpr: interfaceinvoke $r8.<javax.servlet.http.HttpServletResponse: void setStatus(int)>(201)

 InvokeExpr: interfaceinvoke $r11.<javax.servlet.http.HttpServletResponse: void addHeader(java.lang.String,java.lang.String)>("Location", "http://myapp.com/newResource")



========== method  shouldSetOkStatus ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r4.<javax.servlet.http.HttpServletResponse: void setStatus(int)>(200)



========== method  shouldSetConflictStatus ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r4.<javax.servlet.http.HttpServletResponse: void sendError(int)>(409)



========== method  shouldSetAcceptedStatus ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r4.<javax.servlet.http.HttpServletResponse: void setStatus(int)>(202)



========== method  shouldSetMethodNotAllowedStatus ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r7.<javax.servlet.http.HttpServletResponse: void sendError(int)>(405)

 InvokeExpr: interfaceinvoke $r10.<javax.servlet.http.HttpServletResponse: void addHeader(java.lang.String,java.lang.String)>("Allow", "GET, POST")



========== method  shouldSetMovedPermanentlyStatus ========:

 Total invocations on Mocks 3 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.config.Configuration: java.lang.String getApplicationPath()>()

 InvokeExpr: interfaceinvoke $r8.<javax.servlet.http.HttpServletResponse: void setStatus(int)>(301)

 InvokeExpr: interfaceinvoke $r11.<javax.servlet.http.HttpServletResponse: void addHeader(java.lang.String,java.lang.String)>("Location", "http://myapp.com/newURL")



========== method  shouldMoveToExactlyURIWhenItIsNotAbsolute ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r4.<javax.servlet.http.HttpServletResponse: void addHeader(java.lang.String,java.lang.String)>("Location", "http://www.caelum.com.br")

 InvokeExpr: interfaceinvoke $r7.<javax.servlet.http.HttpServletResponse: void setStatus(int)>(301)



========== method  shouldSetMovedPermanentlyStatusOfLogic ========:

 Total invocations on Mocks 4 :

 InvokeExpr: interfaceinvoke $r2.<br.com.caelum.vraptor.config.Configuration: java.lang.String getApplicationPath()>()

 InvokeExpr: interfaceinvoke $r8.<br.com.caelum.vraptor.http.route.Router: java.lang.String urlFor(java.lang.Class,java.lang.reflect.Method,java.lang.Object[])>($r10, $r13, $r12)

 InvokeExpr: interfaceinvoke $r23.<javax.servlet.http.HttpServletResponse: void setStatus(int)>(301)

 InvokeExpr: interfaceinvoke $r26.<javax.servlet.http.HttpServletResponse: void addHeader(java.lang.String,java.lang.String)>("Location", "http://myapp.com/resource/method")


** CLASS br.com.caelum.vraptor.view.LinkToHandlerTest



========== method  setUp ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r4.<javax.servlet.ServletContext: java.lang.String getContextPath()>()



========== method  shouldReturnWantedUrlWithoutArgs ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r4.<br.com.caelum.vraptor.http.route.Router: java.lang.String urlFor(java.lang.Class,java.lang.reflect.Method,java.lang.Object[])>(class "Lbr/com/caelum/vraptor/view/LinkToHandlerTest$TestController;", $r3, $r2)



========== method  shouldReturnWantedUrlWithParamArgs ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r4.<br.com.caelum.vraptor.http.route.Router: java.lang.String urlFor(java.lang.Class,java.lang.reflect.Method,java.lang.Object[])>(class "Lbr/com/caelum/vraptor/view/LinkToHandlerTest$TestController;", $r5, $r3)



========== method  shouldReturnWantedUrlWithPartialParamArgs ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r5.<br.com.caelum.vraptor.http.route.Router: java.lang.String urlFor(java.lang.Class,java.lang.reflect.Method,java.lang.Object[])>(class "Lbr/com/caelum/vraptor/view/LinkToHandlerTest$TestController;", $r4, $r3)



========== method  shouldReturnWantedUrlForOverrideMethodWithParamArgs ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r5.<br.com.caelum.vraptor.http.route.Router: java.lang.String urlFor(java.lang.Class,java.lang.reflect.Method,java.lang.Object[])>(class "Lbr/com/caelum/vraptor/view/SubGenericController;", $r6, $r7)



========== method  shouldReturnWantedUrlForOverrideMethodWithParialParamArgs ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r5.<br.com.caelum.vraptor.http.route.Router: java.lang.String urlFor(java.lang.Class,java.lang.reflect.Method,java.lang.Object[])>(class "Lbr/com/caelum/vraptor/view/SubGenericController;", $r6, $r7)



========== method  shouldUseExactlyMatchedMethodIfTheMethodIsOverloaded ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r5.<br.com.caelum.vraptor.http.route.Router: java.lang.String urlFor(java.lang.Class,java.lang.reflect.Method,java.lang.Object[])>(class "Lbr/com/caelum/vraptor/view/LinkToHandlerTest$TestController;", $r4, $r3)


** CLASS br.com.caelum.vraptor.view.DefaultValidationViewsFactoryTest



========== method  shouldUseValidationVersionOfLogicResult ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.Result: br.com.caelum.vraptor.View use(java.lang.Class)>(class "Lbr/com/caelum/vraptor/view/LogicResult;")



========== method  shouldThrowExceptionOnlyAtTheEndOfValidationCall ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.Result: br.com.caelum.vraptor.View use(java.lang.Class)>(class "Lbr/com/caelum/vraptor/view/LogicResult;")

 InvokeExpr: interfaceinvoke $r6.<br.com.caelum.vraptor.Result: br.com.caelum.vraptor.View use(java.lang.Class)>(class "Lbr/com/caelum/vraptor/view/PageResult;")



========== method  shouldUseValidationVersionOfPageResult ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.Result: br.com.caelum.vraptor.View use(java.lang.Class)>(class "Lbr/com/caelum/vraptor/view/PageResult;")



========== method  shouldUseValidationVersionOfEmptyResult ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.Result: br.com.caelum.vraptor.View use(java.lang.Class)>(class "Lbr/com/caelum/vraptor/view/EmptyResult;")



========== method  onHttpResultShouldNotThrowExceptionsOnHeaders ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r3.<br.com.caelum.vraptor.Result: br.com.caelum.vraptor.View use(java.lang.Class)>(class "Lbr/com/caelum/vraptor/view/HttpResult;")



========== method  onHttpResultShouldThrowExceptionsOnSendError ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r3.<br.com.caelum.vraptor.Result: br.com.caelum.vraptor.View use(java.lang.Class)>(class "Lbr/com/caelum/vraptor/view/HttpResult;")



========== method  onHttpResultShouldThrowExceptionsOnSendErrorWithMessage ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r3.<br.com.caelum.vraptor.Result: br.com.caelum.vraptor.View use(java.lang.Class)>(class "Lbr/com/caelum/vraptor/view/HttpResult;")



========== method  onHttpResultShouldThrowExceptionsOnSetStatus ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r3.<br.com.caelum.vraptor.Result: br.com.caelum.vraptor.View use(java.lang.Class)>(class "Lbr/com/caelum/vraptor/view/HttpResult;")



========== method  shouldBeAbleToChainMethodsOnHttpResult ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r3.<br.com.caelum.vraptor.Result: br.com.caelum.vraptor.View use(java.lang.Class)>(class "Lbr/com/caelum/vraptor/view/HttpResult;")



========== method  onHttpResultShouldThrowExceptionsOnMoved ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r4.<br.com.caelum.vraptor.Result: br.com.caelum.vraptor.View use(java.lang.Class)>(class "Lbr/com/caelum/vraptor/view/HttpResult;")

 InvokeExpr: interfaceinvoke r1.<br.com.caelum.vraptor.view.HttpResult: java.lang.Object movedPermanentlyTo(java.lang.Class)>(class "Lbr/com/caelum/vraptor/view/DefaultValidationViewsFactoryTest$RandomComponent;")



========== method  onHttpResultShouldThrowExceptionsOnMovedToLogic ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r3.<br.com.caelum.vraptor.Result: br.com.caelum.vraptor.View use(java.lang.Class)>(class "Lbr/com/caelum/vraptor/view/HttpResult;")



========== method  onRefererResultShouldThrowExceptionsOnForward ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r3.<br.com.caelum.vraptor.Result: br.com.caelum.vraptor.View use(java.lang.Class)>(class "Lbr/com/caelum/vraptor/view/RefererResult;")



========== method  onRefererResultShouldThrowExceptionsOnRedirect ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r3.<br.com.caelum.vraptor.Result: br.com.caelum.vraptor.View use(java.lang.Class)>(class "Lbr/com/caelum/vraptor/view/RefererResult;")



========== method  onStatusResultShouldThrowExceptionsOnNotFound ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r3.<br.com.caelum.vraptor.Result: br.com.caelum.vraptor.View use(java.lang.Class)>(class "Lbr/com/caelum/vraptor/view/Status;")



========== method  onStatusResultShouldThrowExceptionsOnHeader ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r3.<br.com.caelum.vraptor.Result: br.com.caelum.vraptor.View use(java.lang.Class)>(class "Lbr/com/caelum/vraptor/view/Status;")



========== method  onStatusResultShouldThrowExceptionsOnCreated ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r3.<br.com.caelum.vraptor.Result: br.com.caelum.vraptor.View use(java.lang.Class)>(class "Lbr/com/caelum/vraptor/view/Status;")



========== method  onStatusResultShouldThrowExceptionsOnCreatedWithLocation ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r3.<br.com.caelum.vraptor.Result: br.com.caelum.vraptor.View use(java.lang.Class)>(class "Lbr/com/caelum/vraptor/view/Status;")



========== method  onStatusResultShouldThrowExceptionsOnOk ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r3.<br.com.caelum.vraptor.Result: br.com.caelum.vraptor.View use(java.lang.Class)>(class "Lbr/com/caelum/vraptor/view/Status;")



========== method  onStatusResultShouldThrowExceptionsOnConflict ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r3.<br.com.caelum.vraptor.Result: br.com.caelum.vraptor.View use(java.lang.Class)>(class "Lbr/com/caelum/vraptor/view/Status;")



========== method  onStatusResultShouldThrowExceptionsOnMethodNotAllowed ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r3.<br.com.caelum.vraptor.Result: br.com.caelum.vraptor.View use(java.lang.Class)>(class "Lbr/com/caelum/vraptor/view/Status;")



========== method  onStatusResultShouldThrowExceptionsOnMovedPermanentlyTo ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r3.<br.com.caelum.vraptor.Result: br.com.caelum.vraptor.View use(java.lang.Class)>(class "Lbr/com/caelum/vraptor/view/Status;")



========== method  onStatusResultShouldThrowExceptionsOnMovedPermanentlyToLogic ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r4.<br.com.caelum.vraptor.Result: br.com.caelum.vraptor.View use(java.lang.Class)>(class "Lbr/com/caelum/vraptor/view/Status;")

 InvokeExpr: interfaceinvoke r1.<br.com.caelum.vraptor.view.Status: java.lang.Object movedPermanentlyTo(java.lang.Class)>(class "Lbr/com/caelum/vraptor/view/DefaultValidationViewsFactoryTest$RandomComponent;")



========== method  onXMLSerializationResultShouldThrowExceptionOnlyOnSerializeMethod ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r7.<br.com.caelum.vraptor.Result: br.com.caelum.vraptor.View use(java.lang.Class)>(class "Lbr/com/caelum/vraptor/serialization/JSONSerialization;")

 InvokeExpr: interfaceinvoke r1.<br.com.caelum.vraptor.serialization.JSONSerialization: br.com.caelum.vraptor.serialization.Serializer 'from'(java.lang.Object)>($r11)



========== method  onSerializerResultsShouldBeAbleToCreateValidationInstancesEvenIfChildClassesUsesCovariantType ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r5.<br.com.caelum.vraptor.Result: br.com.caelum.vraptor.View use(java.lang.Class)>(class "Lbr/com/caelum/vraptor/serialization/JSONSerialization;")

 InvokeExpr: interfaceinvoke r1.<br.com.caelum.vraptor.serialization.JSONSerialization: br.com.caelum.vraptor.serialization.Serializer 'from'(java.lang.Object)>($r9)


** CLASS br.com.caelum.vraptor.deserialization.DefaultDeserializersTest



========== method  shouldNotCallDeserializerIfItDoesntAcceptGivenContentType ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r8.<br.com.caelum.vraptor.ioc.Container: java.lang.Object instanceFor(java.lang.Class)>(class "Lbr/com/caelum/vraptor/deserialization/DefaultDeserializersTest$MyDeserializer;")



========== method  shouldUseTheDeserializerThatAcceptsTheGivenContentType ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r7.<br.com.caelum.vraptor.ioc.Container: java.lang.Object instanceFor(java.lang.Class)>(class "Lbr/com/caelum/vraptor/deserialization/DefaultDeserializersTest$MyDeserializer;")



========== method  shouldUseTheDeserializerThatAcceptsTheGivenContentTypeIfVendorized ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r7.<br.com.caelum.vraptor.ioc.Container: java.lang.Object instanceFor(java.lang.Class)>(class "Lbr/com/caelum/vraptor/deserialization/DefaultDeserializersTest$MyDeserializer;")



========== method  shouldUseTheDeserializerThatAcceptsTheGivenContentTypeIfAtomizedAlike ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r7.<br.com.caelum.vraptor.ioc.Container: java.lang.Object instanceFor(java.lang.Class)>(class "Lbr/com/caelum/vraptor/deserialization/DefaultDeserializersTest$MyDeserializer;")


** CLASS br.com.caelum.vraptor.deserialization.JsonDeserializerTest



========== method  shouldBeAbleToDeserializeACat ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r8.<br.com.caelum.vraptor.http.ParameterNameProvider: java.lang.String[] parameterNamesFor(java.lang.reflect.AccessibleObject)>($r9)



========== method  shouldBeAbleToDeserializeACatWhenMethodHasMoreThanOneArgument ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r8.<br.com.caelum.vraptor.http.ParameterNameProvider: java.lang.String[] parameterNamesFor(java.lang.reflect.AccessibleObject)>($r9)



========== method  shouldBeAbleToDeserializeACatWhenMethodHasMoreThanOneArgumentAndTheXmlIsTheLastOne ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r8.<br.com.caelum.vraptor.http.ParameterNameProvider: java.lang.String[] parameterNamesFor(java.lang.reflect.AccessibleObject)>($r9)



========== method  shouldBeAbleToDeserializeACatNamedDifferently ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r8.<br.com.caelum.vraptor.http.ParameterNameProvider: java.lang.String[] parameterNamesFor(java.lang.reflect.AccessibleObject)>($r9)



========== method  shouldBeAbleToDeserializeACatWhenAliasConfiguredByAnnotations ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r8.<br.com.caelum.vraptor.http.ParameterNameProvider: java.lang.String[] parameterNamesFor(java.lang.reflect.AccessibleObject)>($r9)


** CLASS br.com.caelum.vraptor.deserialization.gson.GsonDeserializerTest



========== method  setUp ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r10.<br.com.caelum.vraptor.core.Localization: java.util.Locale getLocale()>()



========== method  shouldBeAbleToDeserializeADog ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r8.<br.com.caelum.vraptor.http.ParameterNameProvider: java.lang.String[] parameterNamesFor(java.lang.reflect.AccessibleObject)>($r9)



========== method  shouldBeAbleToDeserializeAListOfDogs ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r8.<br.com.caelum.vraptor.http.ParameterNameProvider: java.lang.String[] parameterNamesFor(java.lang.reflect.AccessibleObject)>($r9)



========== method  shouldBeAbleToDeserializeAListOfDogsWithNoRoot ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r8.<br.com.caelum.vraptor.http.ParameterNameProvider: java.lang.String[] parameterNamesFor(java.lang.reflect.AccessibleObject)>($r9)



========== method  shouldBeAbleToDeserializeAListOfDogsWhenMethodHasMoreThenOneParameter ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r9.<br.com.caelum.vraptor.http.ParameterNameProvider: java.lang.String[] parameterNamesFor(java.lang.reflect.AccessibleObject)>($r10)



========== method  shouldBeAbleToDeserializeADogWithoutRoot ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r8.<br.com.caelum.vraptor.http.ParameterNameProvider: java.lang.String[] parameterNamesFor(java.lang.reflect.AccessibleObject)>($r9)



========== method  shouldBeAbleToDeserializeADogWithDeserializerAdapter ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r15.<br.com.caelum.vraptor.http.ParameterNameProvider: java.lang.String[] parameterNamesFor(java.lang.reflect.AccessibleObject)>($r16)



========== method  shouldBeAbleToDeserializeADogWhenMethodHasMoreThanOneArgument ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r8.<br.com.caelum.vraptor.http.ParameterNameProvider: java.lang.String[] parameterNamesFor(java.lang.reflect.AccessibleObject)>($r9)



========== method  shouldBeAbleToDeserializeADogWhenMethodHasMoreThanOneArgumentAndHasNotRoot ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r8.<br.com.caelum.vraptor.http.ParameterNameProvider: java.lang.String[] parameterNamesFor(java.lang.reflect.AccessibleObject)>($r9)



========== method  shouldBeAbleToDeserializeADogWhenMethodHasMoreThanOneArgumentAndTheXmlIsTheLastOne ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r8.<br.com.caelum.vraptor.http.ParameterNameProvider: java.lang.String[] parameterNamesFor(java.lang.reflect.AccessibleObject)>($r9)



========== method  shouldBeAbleToDeserializeADogNamedDifferently ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r8.<br.com.caelum.vraptor.http.ParameterNameProvider: java.lang.String[] parameterNamesFor(java.lang.reflect.AccessibleObject)>($r9)



========== method  shouldDeserializeADogWithCalendarAttribute ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r9.<br.com.caelum.vraptor.http.ParameterNameProvider: java.lang.String[] parameterNamesFor(java.lang.reflect.AccessibleObject)>($r10)

 InvokeExpr: interfaceinvoke $r16.<br.com.caelum.vraptor.http.ParameterNameProvider: java.lang.String[] parameterNamesFor(java.lang.reflect.AccessibleObject)>($r17)



========== method  shouldDeserializeADogWithCalendarAsISO8601Attribute ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r10.<br.com.caelum.vraptor.http.ParameterNameProvider: java.lang.String[] parameterNamesFor(java.lang.reflect.AccessibleObject)>($r11)



========== method  shouldDeserializeADogWithCalendarAsObjectAttribute ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r9.<br.com.caelum.vraptor.http.ParameterNameProvider: java.lang.String[] parameterNamesFor(java.lang.reflect.AccessibleObject)>($r10)



========== method  shouldHonorRequestHeaderAcceptCharset ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r8.<br.com.caelum.vraptor.http.ParameterNameProvider: java.lang.String[] parameterNamesFor(java.lang.reflect.AccessibleObject)>($r9)

 InvokeExpr: interfaceinvoke $r14.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Accept-Charset")



========== method  whenNoCharsetHeaderIsFoundThanAssumeItIsUTF8 ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r8.<br.com.caelum.vraptor.http.ParameterNameProvider: java.lang.String[] parameterNamesFor(java.lang.reflect.AccessibleObject)>($r9)

 InvokeExpr: interfaceinvoke $r14.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Accept-Charset")



========== method  shouldByPassDeserializationWhenHasNoContent ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r7.<br.com.caelum.vraptor.http.ParameterNameProvider: java.lang.String[] parameterNamesFor(java.lang.reflect.AccessibleObject)>($r8)



========== method  shouldDeserializeFromGenericTypeOneParam ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r16.<br.com.caelum.vraptor.http.ParameterNameProvider: java.lang.String[] parameterNamesFor(java.lang.reflect.AccessibleObject)>($r17)



========== method  shouldDeserializeFromGenericTypeTwoParams ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r17.<br.com.caelum.vraptor.http.ParameterNameProvider: java.lang.String[] parameterNamesFor(java.lang.reflect.AccessibleObject)>($r18)



========== method  shouldDeserializeWithoutGenericType ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r17.<br.com.caelum.vraptor.http.ParameterNameProvider: java.lang.String[] parameterNamesFor(java.lang.reflect.AccessibleObject)>($r18)


** CLASS br.com.caelum.vraptor.deserialization.XStreamXmlDeserializerTest



========== method  shouldBeAbleToDeserializeAPersonWithDog ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r8.<br.com.caelum.vraptor.http.ParameterNameProvider: java.lang.String[] parameterNamesFor(java.lang.reflect.AccessibleObject)>($r9)



========== method  shouldBeAbleToDeserializeADog ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r8.<br.com.caelum.vraptor.http.ParameterNameProvider: java.lang.String[] parameterNamesFor(java.lang.reflect.AccessibleObject)>($r9)



========== method  shouldBeAbleToDeserializeADogWhenMethodHasMoreThanOneArgument ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r8.<br.com.caelum.vraptor.http.ParameterNameProvider: java.lang.String[] parameterNamesFor(java.lang.reflect.AccessibleObject)>($r9)



========== method  shouldBeAbleToDeserializeADogWhenMethodHasMoreThanOneArgumentAndTheXmlIsTheLastOne ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r8.<br.com.caelum.vraptor.http.ParameterNameProvider: java.lang.String[] parameterNamesFor(java.lang.reflect.AccessibleObject)>($r9)



========== method  shouldBeAbleToDeserializeADogNamedDifferently ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r8.<br.com.caelum.vraptor.http.ParameterNameProvider: java.lang.String[] parameterNamesFor(java.lang.reflect.AccessibleObject)>($r9)



========== method  shouldBeAbleToDeserializeADogWhenAliasConfiguredByAnnotations ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r8.<br.com.caelum.vraptor.http.ParameterNameProvider: java.lang.String[] parameterNamesFor(java.lang.reflect.AccessibleObject)>($r9)


** CLASS br.com.caelum.vraptor.deserialization.DeserializesHandlerTest



========== method  shouldRegisterTypesOnDeserializers ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r4.<br.com.caelum.vraptor.deserialization.Deserializers: void register(java.lang.Class)>(class "Lbr/com/caelum/vraptor/deserialization/DeserializesHandlerTest$MyDeserializer;")


** CLASS br.com.caelum.vraptor.scan.NullWebAppBootstrapTest


** CLASS br.com.caelum.vraptor.scan.WebBasedClasspathResolverTest



========== method  callerContextDifferentFromRequestedClassLoaderReturnsCurrentClassLoader ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke r1.<javax.servlet.ServletContext: int getMajorVersion()>()

 InvokeExpr: interfaceinvoke r1.<javax.servlet.ServletContext: java.lang.ClassLoader getClassLoader()>()


** CLASS br.com.caelum.vraptor.scan.JavassistBootstrapGeneratorTest



========== method  shouldThrowScannerExceptionIfAnErrorOccurs ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r5.<br.com.caelum.vraptor.scan.ClasspathResolver: java.net.URL findWebInfClassesLocation()>()


** CLASS br.com.caelum.vraptor.scan.ScannotationComponentScannerTest



========== method  shouldScanWEBINFClasses ========:

 Total invocations on Mocks 3 :

 InvokeExpr: interfaceinvoke $r3.<br.com.caelum.vraptor.scan.ClasspathResolver: java.util.List findBasePackages()>()

 InvokeExpr: interfaceinvoke $r10.<br.com.caelum.vraptor.scan.ClasspathResolver: java.lang.ClassLoader getClassLoader()>()

 InvokeExpr: interfaceinvoke $r14.<br.com.caelum.vraptor.scan.ClasspathResolver: java.net.URL findWebInfClassesLocation()>()



========== method  shouldScanBasePackages ========:

 Total invocations on Mocks 3 :

 InvokeExpr: interfaceinvoke $r8.<br.com.caelum.vraptor.scan.ClasspathResolver: java.util.List findBasePackages()>()

 InvokeExpr: interfaceinvoke $r14.<br.com.caelum.vraptor.scan.ClasspathResolver: java.lang.ClassLoader getClassLoader()>()

 InvokeExpr: interfaceinvoke $r18.<br.com.caelum.vraptor.scan.ClasspathResolver: java.net.URL findWebInfClassesLocation()>()



========== method  shouldReturnEmptyCollectionIfWebinfClassesNotFound ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r4.<br.com.caelum.vraptor.scan.ClasspathResolver: java.net.URL findWebInfClassesLocation()>()



========== method  shouldThrowScannerExceptionIfHasExceptionWhenProcessWebinfClasses ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r4.<br.com.caelum.vraptor.scan.ClasspathResolver: java.net.URL findWebInfClassesLocation()>()


** CLASS br.com.caelum.vraptor.scan.DynamicWebAppBootstrapTest



========== method  shouldConfigureAllClasses ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r9.<br.com.caelum.vraptor.ComponentRegistry: void deepRegister(java.lang.Class)>(class "Lbr/com/caelum/vraptor/scan/ResourceA;")



========== method  shouldNotDoAnythingIfHasNoClasses ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r7.<br.com.caelum.vraptor.ComponentRegistry: void deepRegister(java.lang.Class)>($r9)


** CLASS br.com.caelum.vraptor.proxy.CglibProxifierTest


** CLASS br.com.caelum.vraptor.proxy.ReflectionInstanceCreatorTest


** CLASS br.com.caelum.vraptor.proxy.JavassistProxifierTest


** CLASS br.com.caelum.vraptor.ioc.InterceptorStereotypeHandlerTest



========== method  shouldRegisterInterceptorsOnRegistry ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r6.<br.com.caelum.vraptor.interceptor.InterceptorRegistry: void register(java.lang.Class[])>($r5)


** CLASS br.com.caelum.vraptor.ioc.spring.VRaptorScopeResolverTest


** CLASS br.com.caelum.vraptor.ioc.spring.SpringBasedContainerTest



========== method  initContainer ========:

 Total invocations on Mocks 6 :

 InvokeExpr: interfaceinvoke $r6.<javax.servlet.ServletContext: java.lang.String getInitParameter(java.lang.String)>("br.com.caelum.vraptor.packages")

 InvokeExpr: interfaceinvoke $r10.<javax.servlet.ServletContext: java.lang.String getRealPath(java.lang.String)>($r11)

 InvokeExpr: interfaceinvoke $r18.<javax.servlet.ServletContext: java.lang.String getInitParameter(java.lang.String)>("br.com.caelum.vraptor.scanning")

 InvokeExpr: interfaceinvoke $r22.<javax.servlet.ServletContext: java.lang.ClassLoader getClassLoader()>()

 InvokeExpr: interfaceinvoke $r29.<javax.servlet.ServletContext: java.util.Enumeration getInitParameterNames()>()

 InvokeExpr: interfaceinvoke $r33.<javax.servlet.ServletContext: java.util.Enumeration getAttributeNames()>()


** CLASS br.com.caelum.vraptor.ioc.spring.SpringProviderTest



========== method  shouldIncludeTheApplicationContextOnTheRootApplicationContextParamIfNotSet ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r2.<javax.servlet.ServletContext: java.util.Enumeration getAttributeNames()>()

 InvokeExpr: interfaceinvoke $r13.<javax.servlet.ServletContext: void setAttribute(java.lang.String,java.lang.Object)>($r15, $r16)



========== method  shouldNotIncludeTheApplicationContextOnTheRootApplicationContextParamIfAlreadySet ========:

 Total invocations on Mocks 3 :

 InvokeExpr: interfaceinvoke $r4.<javax.servlet.ServletContext: java.util.Enumeration getAttributeNames()>()

 InvokeExpr: interfaceinvoke $r11.<javax.servlet.ServletContext: java.lang.Object getAttribute(java.lang.String)>($r10)

 InvokeExpr: interfaceinvoke $r21.<javax.servlet.ServletContext: void setAttribute(java.lang.String,java.lang.Object)>($r23, $r24)



========== method  shouldLoadInitParameterForBasePackages ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r2.<javax.servlet.ServletContext: java.util.Enumeration getAttributeNames()>()



========== method  defaultExpectations ========:

 Total invocations on Mocks 5 :

 InvokeExpr: interfaceinvoke $r1.<javax.servlet.ServletContext: java.lang.String getInitParameter(java.lang.String)>("br.com.caelum.vraptor.packages")

 InvokeExpr: interfaceinvoke $r5.<javax.servlet.ServletContext: java.lang.String getRealPath(java.lang.String)>("/WEB-INF/classes")

 InvokeExpr: interfaceinvoke $r12.<javax.servlet.ServletContext: java.lang.String getInitParameter(java.lang.String)>("br.com.caelum.vraptor.scanning")

 InvokeExpr: interfaceinvoke $r16.<javax.servlet.ServletContext: java.lang.ClassLoader getClassLoader()>()

 InvokeExpr: interfaceinvoke $r22.<javax.servlet.ServletContext: java.util.Enumeration getInitParameterNames()>()


** CLASS br.com.caelum.vraptor.ioc.ComponentFactoryIntrospectorTest


** CLASS br.com.caelum.vraptor.ioc.AbstractComponentRegistryTest



========== method  shouldRegisterComponentAndImplementedInterfaces ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r4.<br.com.caelum.vraptor.ComponentRegistry: void register(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Runnable;", class "Lbr/com/caelum/vraptor/ioc/AbstractComponentRegistryTest$RunnableComponent;")

 InvokeExpr: interfaceinvoke $r7.<br.com.caelum.vraptor.ComponentRegistry: void register(java.lang.Class,java.lang.Class)>(class "Lbr/com/caelum/vraptor/ioc/AbstractComponentRegistryTest$RunnableComponent;", class "Lbr/com/caelum/vraptor/ioc/AbstractComponentRegistryTest$RunnableComponent;")



========== method  shouldRegisterComponentUsingAllPossibleSupertypes ========:

 Total invocations on Mocks 10 :

 InvokeExpr: interfaceinvoke $r4.<br.com.caelum.vraptor.ComponentRegistry: void register(java.lang.Class,java.lang.Class)>(class "Lbr/com/caelum/vraptor/ioc/AbstractComponentRegistryTest$ArrayListSubclass;", class "Lbr/com/caelum/vraptor/ioc/AbstractComponentRegistryTest$ArrayListSubclass;")

 InvokeExpr: interfaceinvoke $r7.<br.com.caelum.vraptor.ComponentRegistry: void register(java.lang.Class,java.lang.Class)>(class "Ljava/util/ArrayList;", class "Lbr/com/caelum/vraptor/ioc/AbstractComponentRegistryTest$ArrayListSubclass;")

 InvokeExpr: interfaceinvoke $r10.<br.com.caelum.vraptor.ComponentRegistry: void register(java.lang.Class,java.lang.Class)>(class "Ljava/util/List;", class "Lbr/com/caelum/vraptor/ioc/AbstractComponentRegistryTest$ArrayListSubclass;")

 InvokeExpr: interfaceinvoke $r13.<br.com.caelum.vraptor.ComponentRegistry: void register(java.lang.Class,java.lang.Class)>(class "Ljava/util/Collection;", class "Lbr/com/caelum/vraptor/ioc/AbstractComponentRegistryTest$ArrayListSubclass;")

 InvokeExpr: interfaceinvoke $r16.<br.com.caelum.vraptor.ComponentRegistry: void register(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Iterable;", class "Lbr/com/caelum/vraptor/ioc/AbstractComponentRegistryTest$ArrayListSubclass;")

 InvokeExpr: interfaceinvoke $r19.<br.com.caelum.vraptor.ComponentRegistry: void register(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Cloneable;", class "Lbr/com/caelum/vraptor/ioc/AbstractComponentRegistryTest$ArrayListSubclass;")

 InvokeExpr: interfaceinvoke $r22.<br.com.caelum.vraptor.ComponentRegistry: void register(java.lang.Class,java.lang.Class)>(class "Ljava/io/Serializable;", class "Lbr/com/caelum/vraptor/ioc/AbstractComponentRegistryTest$ArrayListSubclass;")

 InvokeExpr: interfaceinvoke $r25.<br.com.caelum.vraptor.ComponentRegistry: void register(java.lang.Class,java.lang.Class)>(class "Ljava/util/RandomAccess;", class "Lbr/com/caelum/vraptor/ioc/AbstractComponentRegistryTest$ArrayListSubclass;")

 InvokeExpr: interfaceinvoke $r28.<br.com.caelum.vraptor.ComponentRegistry: void register(java.lang.Class,java.lang.Class)>(class "Ljava/util/AbstractList;", class "Lbr/com/caelum/vraptor/ioc/AbstractComponentRegistryTest$ArrayListSubclass;")

 InvokeExpr: interfaceinvoke $r31.<br.com.caelum.vraptor.ComponentRegistry: void register(java.lang.Class,java.lang.Class)>(class "Ljava/util/AbstractCollection;", class "Lbr/com/caelum/vraptor/ioc/AbstractComponentRegistryTest$ArrayListSubclass;")


** CLASS br.com.caelum.vraptor.ioc.guice.GuiceProviderTest


** CLASS br.com.caelum.vraptor.ioc.guice.SessionCustomScopeTest



========== method  setUp ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r5.<javax.servlet.http.HttpSession: java.lang.String getId()>()



========== method  shouldInvokeListenersOnStop ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r7.<br.com.caelum.vraptor.ioc.guice.LifecycleListener: void onEvent()>()



========== method  shouldRemoveListenersOnStop ========:

 Total invocations on Mocks 1 :

 InvokeExpr: interfaceinvoke $r9.<br.com.caelum.vraptor.ioc.guice.LifecycleListener: void onEvent()>()


** CLASS br.com.caelum.vraptor.ioc.GenericContainerTest


** CLASS br.com.caelum.vraptor.ioc.pico.CustomPicoProviderTest


** CLASS br.com.caelum.vraptor.ioc.pico.PicoBasedContainerTest


** CLASS br.com.caelum.vraptor.ioc.pico.PicoProviderTest


** CLASS br.com.caelum.vraptor.ioc.pico.PicoComponentRegistryTest



========== method  setup ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r12.<br.com.caelum.vraptor.http.MutableRequest: javax.servlet.http.HttpSession getSession()>()

 InvokeExpr: interfaceinvoke $r17.<javax.servlet.http.HttpSession: java.lang.Object getAttribute(java.lang.String)>($r18)


** CLASS br.com.caelum.vraptor.extra.ForwardToDefaultViewInterceptorTest



========== method  doesNothingIfResultWasAlreadyUsed ========:

 Total invocations on Mocks 2 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.Result: boolean used()>()

 InvokeExpr: interfaceinvoke $r10.<br.com.caelum.vraptor.Result: br.com.caelum.vraptor.View use(java.lang.Class)>(class "Lbr/com/caelum/vraptor/view/PageResult;")



========== method  shouldForwardToViewWhenResultWasNotUsed ========:

 Total invocations on Mocks 3 :

 InvokeExpr: interfaceinvoke $r1.<br.com.caelum.vraptor.Result: boolean used()>()

 InvokeExpr: interfaceinvoke $r6.<br.com.caelum.vraptor.Result: br.com.caelum.vraptor.View use(java.lang.Class)>(class "Lbr/com/caelum/vraptor/view/PageResult;")

 InvokeExpr: interfaceinvoke $r14.<br.com.caelum.vraptor.Result: br.com.caelum.vraptor.View use(java.lang.Class)>(class "Lbr/com/caelum/vraptor/view/PageResult;")

Benchmark Overall Stats
Total Invocations: 5868
Invocations On Mocks: 942

Soot finished on Tue Jun 22 20:44:09 EDT 2021
Soot has run for 4 min. 45 sec.
