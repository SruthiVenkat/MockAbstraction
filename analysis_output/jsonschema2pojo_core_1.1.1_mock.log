 ====================================== 
** CLASS org.jsonschema2pojo.SchemaStoreTest
Number of Methods with MayMock in class: 1
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0



 ====================================== 
** CLASS org.jsonschema2pojo.util.LanguageFeaturesTest
Number of Methods with MayMock in class: 1
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0



 ====================================== 
** CLASS org.jsonschema2pojo.util.NameHelperTest
Number of Methods with MayMock in class: 1
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

 ====================================== 
** CLASS org.jsonschema2pojo.AnnotatorFactoryTest
Number of Methods with MayMock in class: 1
Number of Methods with ArrayMock in class: 1
Number of Methods with CollectionMock in class: 0

 ====================================== 
** CLASS org.jsonschema2pojo.SchemaMapperTest
Number of Methods with MayMock in class: 4
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

 ====================================== 
** CLASS org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest
Number of Methods with MayMock in class: 7
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

 ====================================== 
** CLASS org.jsonschema2pojo.rules.FormatRuleJodaTest
Number of Methods with MayMock in class: 1
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

 ====================================== 
** CLASS org.jsonschema2pojo.rules.RequiredArrayRuleTest
Number of Methods with MayMock in class: 1
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

 ====================================== 
** CLASS org.jsonschema2pojo.rules.EnumRuleTest
Number of Methods with MayMock in class: 3
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

 ====================================== 
** CLASS org.jsonschema2pojo.rules.SchemaRuleTest
Number of Methods with MayMock in class: 4
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

 ====================================== 
** CLASS org.jsonschema2pojo.rules.PropertyRuleTest
Number of Methods with MayMock in class: 3
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

 ====================================== 
** CLASS org.jsonschema2pojo.rules.PatternRuleTest
Number of Methods with MayMock in class: 3
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

 ====================================== 
** CLASS org.jsonschema2pojo.rules.DigitsRuleTest
Number of Methods with MayMock in class: 4
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

 ====================================== 
** CLASS org.jsonschema2pojo.rules.FormatRuleTest
Number of Methods with MayMock in class: 1
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

 ====================================== 
** CLASS org.jsonschema2pojo.rules.TypeRuleTest
Number of Methods with MayMock in class: 29
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

 ====================================== 
** CLASS org.jsonschema2pojo.rules.FormatRuleArraysTest
Number of Methods with MayMock in class: 1
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

 ====================================== 
** CLASS org.jsonschema2pojo.rules.FormatRulePrimitivesTest
Number of Methods with MayMock in class: 1
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

 ====================================== 
** CLASS org.jsonschema2pojo.rules.ArrayRuleTest
Number of Methods with MayMock in class: 5
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

 ====================================== 
** CLASS org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest
Number of Methods with MayMock in class: 7
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

 ====================================== 
** CLASS org.jsonschema2pojo.rules.RuleFactoryImplTest
Number of Methods with MayMock in class: 3
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

 ====================================== 
** CLASS org.jsonschema2pojo.rules.MinimumMaximumRuleTest
Number of Methods with MayMock in class: 6
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

 ====================================== 
** CLASS org.jsonschema2pojo.SourceSortOrderTest
Number of Methods with MayMock in class: 5
Number of Methods with ArrayMock in class: 0
Number of Methods with CollectionMock in class: 0

 ====================================== 
Benchmark jsonschema2pojo_core_1.1.1 Mock Stats
Total Number of Test/Before/After Methods: 145
Total Number of Test/Before/After Methods with May Mock: 76
Total Number of Test/Before/After Methods with ArrayMock: 1
Total Number of Test/Before/After Methods with Collection: 0
Total Number of Helper Methods: 54
Total Number of Helper Methods with MayMock: 16
Total Number of Helper Methods with ArrayMock: 0
Total Number of Helper Methods with CollectionMock: 0

 ====================================== 
 INVOCATION STATISTICS 


** CLASS org.jsonschema2pojo.SchemaStoreTest


** CLASS org.jsonschema2pojo.FragmentResolverTest


** CLASS org.jsonschema2pojo.util.InflectorTest


** CLASS org.jsonschema2pojo.util.LanguageFeaturesTest



========== method  mockConfig ========: 

	Total invocations on Mocks 1 : 

	InvokeExpr: interfaceinvoke r1.<org.jsonschema2pojo.GenerationConfig: java.lang.String getTargetVersion()>()


** CLASS org.jsonschema2pojo.util.MakeUniqueClassNameTest


** CLASS org.jsonschema2pojo.util.TypeUtilTest


** CLASS org.jsonschema2pojo.util.NameHelperTest



========== method  helper ========: 

	Total invocations on Mocks 1 : 

	InvokeExpr: interfaceinvoke r1.<org.jsonschema2pojo.GenerationConfig: boolean isUseTitleAsClassname()>()


** CLASS org.jsonschema2pojo.AnnotatorFactoryTest


** CLASS org.jsonschema2pojo.SchemaMapperTest



========== method  generateReadsSchemaAsObject ========: 

	Total invocations on Mocks 3 : 

	InvokeExpr: virtualinvoke r2.<org.jsonschema2pojo.rules.RuleFactory: org.jsonschema2pojo.rules.Rule getSchemaRule()>()

	InvokeExpr: virtualinvoke r2.<org.jsonschema2pojo.rules.RuleFactory: org.jsonschema2pojo.GenerationConfig getGenerationConfig()>()

	InvokeExpr: virtualinvoke $r21.<org.jsonschema2pojo.rules.SchemaRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>($r23, $r25, $r27, $r29, $r31)



========== method  generateCreatesSchemaFromExampleJsonWhenInJsonMode ========: 

	Total invocations on Mocks 5 : 

	InvokeExpr: interfaceinvoke r4.<org.jsonschema2pojo.GenerationConfig: org.jsonschema2pojo.SourceType getSourceType()>()

	InvokeExpr: virtualinvoke r5.<org.jsonschema2pojo.SchemaGenerator: com.fasterxml.jackson.databind.node.ObjectNode schemaFromExample(java.net.URL)>(r1)

	InvokeExpr: virtualinvoke r6.<org.jsonschema2pojo.rules.RuleFactory: org.jsonschema2pojo.rules.Rule getSchemaRule()>()

	InvokeExpr: virtualinvoke r6.<org.jsonschema2pojo.rules.RuleFactory: org.jsonschema2pojo.GenerationConfig getGenerationConfig()>()

	InvokeExpr: virtualinvoke $r31.<org.jsonschema2pojo.rules.SchemaRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>($r33, $r35, $r37, $r39, $r41)



========== method  generateCreatesSchemaFromExampleJSONAsStringInput ========: 

	Total invocations on Mocks 5 : 

	InvokeExpr: interfaceinvoke r4.<org.jsonschema2pojo.GenerationConfig: org.jsonschema2pojo.SourceType getSourceType()>()

	InvokeExpr: virtualinvoke r5.<org.jsonschema2pojo.SchemaGenerator: com.fasterxml.jackson.databind.node.ObjectNode schemaFromExample(com.fasterxml.jackson.databind.JsonNode)>($r19)

	InvokeExpr: virtualinvoke r6.<org.jsonschema2pojo.rules.RuleFactory: org.jsonschema2pojo.rules.Rule getSchemaRule()>()

	InvokeExpr: virtualinvoke r6.<org.jsonschema2pojo.rules.RuleFactory: org.jsonschema2pojo.GenerationConfig getGenerationConfig()>()

	InvokeExpr: virtualinvoke $r34.<org.jsonschema2pojo.rules.SchemaRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>($r36, $r38, $r40, $r42, $r44)



========== method  generateCreatesSchemaFromSchemaAsStringInput ========: 

	Total invocations on Mocks 3 : 

	InvokeExpr: virtualinvoke r3.<org.jsonschema2pojo.rules.RuleFactory: org.jsonschema2pojo.rules.Rule getSchemaRule()>()

	InvokeExpr: virtualinvoke r3.<org.jsonschema2pojo.rules.RuleFactory: org.jsonschema2pojo.GenerationConfig getGenerationConfig()>()

	InvokeExpr: virtualinvoke $r22.<org.jsonschema2pojo.rules.SchemaRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>($r24, $r26, $r28, $r30, $r32)


** CLASS org.jsonschema2pojo.ContentResolverTest


** CLASS org.jsonschema2pojo.ContentResolverNetworkTest


** CLASS org.jsonschema2pojo.rules.RequiredRuleTest


** CLASS org.jsonschema2pojo.rules.DynamicPropertiesRuleTest


** CLASS org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest



========== method  testMinLength ========: 

	Total invocations on Mocks 9 : 

	InvokeExpr: interfaceinvoke $r2.<org.jsonschema2pojo.GenerationConfig: boolean isIncludeJsr303Annotations()>()

	InvokeExpr: virtualinvoke $r8.<com.fasterxml.jackson.databind.JsonNode: int asInt()>()

	InvokeExpr: virtualinvoke $r13.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>("minLength")

	InvokeExpr: virtualinvoke $r18.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Size;")

	InvokeExpr: virtualinvoke $r23.<com.fasterxml.jackson.databind.JsonNode: boolean has(java.lang.String)>("minLength")

	InvokeExpr: virtualinvoke $r28.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JType type()>()

	InvokeExpr: virtualinvoke $r43.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Size;")

	InvokeExpr: virtualinvoke $r48.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,int)>("min", i0)

	InvokeExpr: virtualinvoke $r53.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,java.lang.String)>($r55, $r56)



========== method  testMaxLength ========: 

	Total invocations on Mocks 9 : 

	InvokeExpr: interfaceinvoke $r2.<org.jsonschema2pojo.GenerationConfig: boolean isIncludeJsr303Annotations()>()

	InvokeExpr: virtualinvoke $r8.<com.fasterxml.jackson.databind.JsonNode: int asInt()>()

	InvokeExpr: virtualinvoke $r13.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>("maxLength")

	InvokeExpr: virtualinvoke $r18.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Size;")

	InvokeExpr: virtualinvoke $r23.<com.fasterxml.jackson.databind.JsonNode: boolean has(java.lang.String)>("maxLength")

	InvokeExpr: virtualinvoke $r28.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JType type()>()

	InvokeExpr: virtualinvoke $r43.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Size;")

	InvokeExpr: virtualinvoke $r48.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,int)>("max", i0)

	InvokeExpr: virtualinvoke $r53.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,int)>($r55, $i2)



========== method  testMaxAndMinLength ========: 

	Total invocations on Mocks 12 : 

	InvokeExpr: interfaceinvoke $r3.<org.jsonschema2pojo.GenerationConfig: boolean isIncludeJsr303Annotations()>()

	InvokeExpr: virtualinvoke $r11.<com.fasterxml.jackson.databind.JsonNode: int asInt()>()

	InvokeExpr: virtualinvoke r1.<com.fasterxml.jackson.databind.JsonNode: int asInt()>()

	InvokeExpr: virtualinvoke $r20.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>("minLength")

	InvokeExpr: virtualinvoke $r25.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>("maxLength")

	InvokeExpr: virtualinvoke $r29.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Size;")

	InvokeExpr: virtualinvoke $r34.<com.fasterxml.jackson.databind.JsonNode: boolean has(java.lang.String)>("minLength")

	InvokeExpr: virtualinvoke $r39.<com.fasterxml.jackson.databind.JsonNode: boolean has(java.lang.String)>("maxLength")

	InvokeExpr: virtualinvoke $r44.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JType type()>()

	InvokeExpr: virtualinvoke $r59.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Size;")

	InvokeExpr: virtualinvoke $r64.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,int)>("min", i0)

	InvokeExpr: virtualinvoke $r69.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,int)>("max", i1)



========== method  testMaxAndMinLengthGenericsOnType ========: 

	Total invocations on Mocks 12 : 

	InvokeExpr: interfaceinvoke $r3.<org.jsonschema2pojo.GenerationConfig: boolean isIncludeJsr303Annotations()>()

	InvokeExpr: virtualinvoke $r11.<com.fasterxml.jackson.databind.JsonNode: int asInt()>()

	InvokeExpr: virtualinvoke r1.<com.fasterxml.jackson.databind.JsonNode: int asInt()>()

	InvokeExpr: virtualinvoke $r20.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>("minLength")

	InvokeExpr: virtualinvoke $r25.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>("maxLength")

	InvokeExpr: virtualinvoke $r29.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Size;")

	InvokeExpr: virtualinvoke $r34.<com.fasterxml.jackson.databind.JsonNode: boolean has(java.lang.String)>("minLength")

	InvokeExpr: virtualinvoke $r39.<com.fasterxml.jackson.databind.JsonNode: boolean has(java.lang.String)>("maxLength")

	InvokeExpr: virtualinvoke $r44.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JType type()>()

	InvokeExpr: virtualinvoke $r63.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Size;")

	InvokeExpr: virtualinvoke $r68.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,int)>("min", i0)

	InvokeExpr: virtualinvoke $r73.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,int)>("max", i1)



========== method  testNotUsed ========: 

	Total invocations on Mocks 6 : 

	InvokeExpr: interfaceinvoke $r2.<org.jsonschema2pojo.GenerationConfig: boolean isIncludeJsr303Annotations()>()

	InvokeExpr: virtualinvoke $r7.<com.fasterxml.jackson.databind.JsonNode: boolean has(java.lang.String)>("minLength")

	InvokeExpr: virtualinvoke $r12.<com.fasterxml.jackson.databind.JsonNode: boolean has(java.lang.String)>("maxLength")

	InvokeExpr: virtualinvoke $r17.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JType type()>()

	InvokeExpr: virtualinvoke $r32.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Size;")

	InvokeExpr: virtualinvoke $r37.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,int)>($r38, $i0)



========== method  jsrDisable ========: 

	Total invocations on Mocks 3 : 

	InvokeExpr: interfaceinvoke $r2.<org.jsonschema2pojo.GenerationConfig: boolean isIncludeJsr303Annotations()>()

	InvokeExpr: virtualinvoke $r14.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Size;")

	InvokeExpr: virtualinvoke $r19.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,int)>($r20, $i0)


** CLASS org.jsonschema2pojo.rules.FormatRuleJodaTest


** CLASS org.jsonschema2pojo.rules.RequiredArrayRuleTest



========== method  setupRuleFactoryToIncludeJsr303 ========: 

	Total invocations on Mocks 2 : 

	InvokeExpr: interfaceinvoke r1.<org.jsonschema2pojo.GenerationConfig: char[] getPropertyWordDelimiters()>()

	InvokeExpr: interfaceinvoke r1.<org.jsonschema2pojo.GenerationConfig: boolean isIncludeJsr303Annotations()>()


** CLASS org.jsonschema2pojo.rules.EnumRuleTest



========== method  wireUpConfig ========: 

	Total invocations on Mocks 4 : 

	InvokeExpr: virtualinvoke $r1.<org.jsonschema2pojo.rules.RuleFactory: org.jsonschema2pojo.util.NameHelper getNameHelper()>()

	InvokeExpr: virtualinvoke $r6.<org.jsonschema2pojo.rules.RuleFactory: org.jsonschema2pojo.RuleLogger getLogger()>()

	InvokeExpr: virtualinvoke $r11.<org.jsonschema2pojo.rules.RuleFactory: org.jsonschema2pojo.Annotator getAnnotator()>()

	InvokeExpr: virtualinvoke $r16.<org.jsonschema2pojo.rules.RuleFactory: org.jsonschema2pojo.rules.Rule getTypeRule()>()



========== method  applyGeneratesUniqueEnumNamesForMultipleEnumNodesWithSameName ========: 

	Total invocations on Mocks 4 : 

	InvokeExpr: virtualinvoke $r9.<org.jsonschema2pojo.util.NameHelper: java.lang.String getClassName(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>($r10, $r12)

	InvokeExpr: virtualinvoke $r16.<org.jsonschema2pojo.util.NameHelper: java.lang.String replaceIllegalCharacters(java.lang.String)>($r17)

	InvokeExpr: virtualinvoke $r21.<org.jsonschema2pojo.util.NameHelper: java.lang.String normalizeName(java.lang.String)>($r22)

	InvokeExpr: virtualinvoke $r36.<org.jsonschema2pojo.rules.TypeRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>("status", r5, null, r2, $r35)


** CLASS org.jsonschema2pojo.rules.TitleRuleTest


** CLASS org.jsonschema2pojo.rules.SchemaRuleTest



========== method  refsToOtherSchemasAreLoaded ========: 

	Total invocations on Mocks 5 : 

	InvokeExpr: interfaceinvoke r4.<org.jsonschema2pojo.GenerationConfig: java.lang.String getRefFragmentPathDelimiters()>()

	InvokeExpr: virtualinvoke $r20.<org.jsonschema2pojo.rules.RuleFactory: org.jsonschema2pojo.rules.Rule getTypeRule()>()

	InvokeExpr: virtualinvoke $r24.<org.jsonschema2pojo.rules.RuleFactory: org.jsonschema2pojo.SchemaStore getSchemaStore()>()

	InvokeExpr: virtualinvoke $r29.<org.jsonschema2pojo.rules.RuleFactory: org.jsonschema2pojo.GenerationConfig getGenerationConfig()>()

	InvokeExpr: virtualinvoke $r36.<org.jsonschema2pojo.rules.TypeRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>($r38, $r40, $r42, $r45, $r47)



========== method  enumAsRootIsGeneratedCorrectly ========: 

	Total invocations on Mocks 7 : 

	InvokeExpr: virtualinvoke r4.<org.jsonschema2pojo.Schema: com.fasterxml.jackson.databind.JsonNode getContent()>()

	InvokeExpr: virtualinvoke r4.<org.jsonschema2pojo.Schema: org.jsonschema2pojo.Schema deriveChildSchema(com.fasterxml.jackson.databind.JsonNode)>($r16)

	InvokeExpr: virtualinvoke r4.<org.jsonschema2pojo.Schema: void setJavaTypeIfEmpty(com.sun.codemodel.JType)>(r3)

	InvokeExpr: virtualinvoke $r21.<org.jsonschema2pojo.rules.RuleFactory: org.jsonschema2pojo.rules.Rule getEnumRule()>()

	InvokeExpr: virtualinvoke r5.<org.jsonschema2pojo.rules.EnumRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>("nodeName", r2, null, r3, r4)

	InvokeExpr: virtualinvoke $r31.<org.jsonschema2pojo.rules.EnumRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>("nodeName", r1, null, r3, r4)

	InvokeExpr: virtualinvoke $r35.<org.jsonschema2pojo.Schema: void setJavaTypeIfEmpty(com.sun.codemodel.JType)>(r3)



========== method  existingTypeIsUsedWhenTypeIsAlreadyGenerated ========: 

	Total invocations on Mocks 3 : 

	InvokeExpr: interfaceinvoke r5.<org.jsonschema2pojo.GenerationConfig: java.lang.String getRefFragmentPathDelimiters()>()

	InvokeExpr: virtualinvoke $r16.<org.jsonschema2pojo.rules.RuleFactory: org.jsonschema2pojo.SchemaStore getSchemaStore()>()

	InvokeExpr: virtualinvoke $r20.<org.jsonschema2pojo.rules.RuleFactory: org.jsonschema2pojo.GenerationConfig getGenerationConfig()>()


** CLASS org.jsonschema2pojo.rules.PropertyRuleTest



========== method  setup ========: 

	Total invocations on Mocks 2 : 

	InvokeExpr: interfaceinvoke $r2.<org.jsonschema2pojo.GenerationConfig: boolean isIncludeGetters()>()

	InvokeExpr: interfaceinvoke $r7.<org.jsonschema2pojo.GenerationConfig: boolean isUseOptionalForGetters()>()



========== method  getMockedSchema ========: 

	Total invocations on Mocks 2 : 

	InvokeExpr: virtualinvoke r2.<org.jsonschema2pojo.Schema: com.fasterxml.jackson.databind.JsonNode getContent()>()

	InvokeExpr: virtualinvoke r2.<org.jsonschema2pojo.Schema: org.jsonschema2pojo.Schema deriveChildSchema(com.fasterxml.jackson.databind.JsonNode)>($r8)


** CLASS org.jsonschema2pojo.rules.PatternRuleTest



========== method  testRegex ========: 

	Total invocations on Mocks 6 : 

	InvokeExpr: interfaceinvoke $r3.<org.jsonschema2pojo.GenerationConfig: boolean isIncludeJsr303Annotations()>()

	InvokeExpr: virtualinvoke $r8.<com.fasterxml.jackson.databind.JsonNode: java.lang.String asText()>()

	InvokeExpr: virtualinvoke $r12.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Pattern;")

	InvokeExpr: virtualinvoke $r17.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JType type()>()

	InvokeExpr: virtualinvoke $r32.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Pattern;")

	InvokeExpr: virtualinvoke $r37.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,java.lang.String)>("regexp", "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$")



========== method  jsrDisable ========: 

	Total invocations on Mocks 3 : 

	InvokeExpr: interfaceinvoke $r2.<org.jsonschema2pojo.GenerationConfig: boolean isIncludeJsr303Annotations()>()

	InvokeExpr: virtualinvoke $r14.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Pattern;")

	InvokeExpr: virtualinvoke $r19.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,java.lang.String)>($r20, $r21)


** CLASS org.jsonschema2pojo.rules.DigitsRuleTest



========== method  testHasIntegerAndFractionalDigits ========: 

	Total invocations on Mocks 12 : 

	InvokeExpr: interfaceinvoke $r2.<org.jsonschema2pojo.GenerationConfig: boolean isIncludeJsr303Annotations()>()

	InvokeExpr: virtualinvoke $r9.<com.fasterxml.jackson.databind.JsonNode: int asInt()>()

	InvokeExpr: virtualinvoke $r14.<com.fasterxml.jackson.databind.JsonNode: int asInt()>()

	InvokeExpr: virtualinvoke $r19.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>("integerDigits")

	InvokeExpr: virtualinvoke $r24.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>("fractionalDigits")

	InvokeExpr: virtualinvoke $r29.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Digits;")

	InvokeExpr: virtualinvoke $r34.<com.fasterxml.jackson.databind.JsonNode: boolean has(java.lang.String)>("integerDigits")

	InvokeExpr: virtualinvoke $r39.<com.fasterxml.jackson.databind.JsonNode: boolean has(java.lang.String)>("fractionalDigits")

	InvokeExpr: virtualinvoke $r44.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JType type()>()

	InvokeExpr: virtualinvoke $r59.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Digits;")

	InvokeExpr: virtualinvoke $r64.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,int)>("integer", i0)

	InvokeExpr: virtualinvoke $r69.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,int)>("fraction", i1)



========== method  testNotUsed ========: 

	Total invocations on Mocks 6 : 

	InvokeExpr: interfaceinvoke $r2.<org.jsonschema2pojo.GenerationConfig: boolean isIncludeJsr303Annotations()>()

	InvokeExpr: virtualinvoke $r7.<com.fasterxml.jackson.databind.JsonNode: boolean has(java.lang.String)>("integerDigits")

	InvokeExpr: virtualinvoke $r12.<com.fasterxml.jackson.databind.JsonNode: boolean has(java.lang.String)>("fractionalDigits")

	InvokeExpr: virtualinvoke $r17.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JType type()>()

	InvokeExpr: virtualinvoke $r32.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Size;")

	InvokeExpr: virtualinvoke $r37.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,int)>($r38, $i0)



========== method  jsrDisable ========: 

	Total invocations on Mocks 3 : 

	InvokeExpr: interfaceinvoke $r2.<org.jsonschema2pojo.GenerationConfig: boolean isIncludeJsr303Annotations()>()

	InvokeExpr: virtualinvoke $r14.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/DecimalMin;")

	InvokeExpr: virtualinvoke $r19.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,int)>($r20, $i0)


** CLASS org.jsonschema2pojo.rules.FormatRuleTest


** CLASS org.jsonschema2pojo.rules.TypeRuleTest



========== method  wireUpConfig ========: 

	Total invocations on Mocks 1 : 

	InvokeExpr: virtualinvoke $r1.<org.jsonschema2pojo.rules.RuleFactory: org.jsonschema2pojo.GenerationConfig getGenerationConfig()>()



========== method  applyGeneratesDate ========: 

	Total invocations on Mocks 2 : 

	InvokeExpr: virtualinvoke r5.<org.jsonschema2pojo.rules.FormatRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JType,org.jsonschema2pojo.Schema)>($r17, $r19, $r21, $r23, $r25)

	InvokeExpr: virtualinvoke $r29.<org.jsonschema2pojo.rules.RuleFactory: org.jsonschema2pojo.rules.Rule getFormatRule()>()



========== method  applyGeneratesIntegerPrimitive ========: 

	Total invocations on Mocks 1 : 

	InvokeExpr: interfaceinvoke $r10.<org.jsonschema2pojo.GenerationConfig: boolean isUsePrimitives()>()



========== method  applyGeneratesIntegerUsingJavaTypeIntegerPrimitive ========: 

	Total invocations on Mocks 1 : 

	InvokeExpr: interfaceinvoke $r11.<org.jsonschema2pojo.GenerationConfig: boolean isUsePrimitives()>()



========== method  applyGeneratesBigInteger ========: 

	Total invocations on Mocks 1 : 

	InvokeExpr: interfaceinvoke $r10.<org.jsonschema2pojo.GenerationConfig: boolean isUseBigIntegers()>()



========== method  applyGeneratesBigIntegerOverridingLong ========: 

	Total invocations on Mocks 2 : 

	InvokeExpr: interfaceinvoke $r10.<org.jsonschema2pojo.GenerationConfig: boolean isUseBigIntegers()>()

	InvokeExpr: interfaceinvoke $r15.<org.jsonschema2pojo.GenerationConfig: boolean isUseLongIntegers()>()



========== method  applyGeneratesBigDecimal ========: 

	Total invocations on Mocks 1 : 

	InvokeExpr: interfaceinvoke $r10.<org.jsonschema2pojo.GenerationConfig: boolean isUseBigDecimals()>()



========== method  applyGeneratesBigDecimalOverridingDouble ========: 

	Total invocations on Mocks 2 : 

	InvokeExpr: interfaceinvoke $r10.<org.jsonschema2pojo.GenerationConfig: boolean isUseDoubleNumbers()>()

	InvokeExpr: interfaceinvoke $r15.<org.jsonschema2pojo.GenerationConfig: boolean isUseBigDecimals()>()



========== method  applyGeneratesIntegerUsingJavaTypeInteger ========: 

	Total invocations on Mocks 1 : 

	InvokeExpr: interfaceinvoke $r11.<org.jsonschema2pojo.GenerationConfig: boolean isUsePrimitives()>()



========== method  applyGeneratesIntegerUsingJavaTypeLongPrimitive ========: 

	Total invocations on Mocks 1 : 

	InvokeExpr: interfaceinvoke $r11.<org.jsonschema2pojo.GenerationConfig: boolean isUsePrimitives()>()



========== method  applyGeneratesIntegerUsingJavaTypeLong ========: 

	Total invocations on Mocks 1 : 

	InvokeExpr: interfaceinvoke $r11.<org.jsonschema2pojo.GenerationConfig: boolean isUsePrimitives()>()



========== method  applyGeneratesIntegerUsingJavaTypeLongPrimitiveWhenMaximumGreaterThanIntegerMax ========: 

	Total invocations on Mocks 1 : 

	InvokeExpr: interfaceinvoke $r11.<org.jsonschema2pojo.GenerationConfig: boolean isUsePrimitives()>()



========== method  applyGeneratesIntegerUsingJavaTypeLongWhenMaximumGreaterThanIntegerMax ========: 

	Total invocations on Mocks 1 : 

	InvokeExpr: interfaceinvoke $r11.<org.jsonschema2pojo.GenerationConfig: boolean isUsePrimitives()>()



========== method  applyGeneratesIntegerUsingJavaTypeLongPrimitiveWhenMaximumLessThanIntegerMin ========: 

	Total invocations on Mocks 1 : 

	InvokeExpr: interfaceinvoke $r11.<org.jsonschema2pojo.GenerationConfig: boolean isUsePrimitives()>()



========== method  applyGeneratesIntegerUsingJavaTypeLongWhenMaximumLessThanIntegerMin ========: 

	Total invocations on Mocks 1 : 

	InvokeExpr: interfaceinvoke $r11.<org.jsonschema2pojo.GenerationConfig: boolean isUsePrimitives()>()



========== method  applyGeneratesIntegerUsingJavaTypeLongPrimitiveWhenMinimumLessThanIntegerMin ========: 

	Total invocations on Mocks 1 : 

	InvokeExpr: interfaceinvoke $r11.<org.jsonschema2pojo.GenerationConfig: boolean isUsePrimitives()>()



========== method  applyGeneratesIntegerUsingJavaTypeLongWhenMinimumLessThanIntegerMin ========: 

	Total invocations on Mocks 1 : 

	InvokeExpr: interfaceinvoke $r11.<org.jsonschema2pojo.GenerationConfig: boolean isUsePrimitives()>()



========== method  applyGeneratesIntegerUsingJavaTypeLongPrimitiveWhenMinimumGreaterThanIntegerMax ========: 

	Total invocations on Mocks 1 : 

	InvokeExpr: interfaceinvoke $r11.<org.jsonschema2pojo.GenerationConfig: boolean isUsePrimitives()>()



========== method  applyGeneratesIntegerUsingJavaTypeLongWhenMinimumGreaterThanIntegerMax ========: 

	Total invocations on Mocks 1 : 

	InvokeExpr: interfaceinvoke $r11.<org.jsonschema2pojo.GenerationConfig: boolean isUsePrimitives()>()



========== method  applyGeneratesNumber ========: 

	Total invocations on Mocks 1 : 

	InvokeExpr: interfaceinvoke $r10.<org.jsonschema2pojo.GenerationConfig: boolean isUseDoubleNumbers()>()



========== method  applyGeneratesNumberPrimitive ========: 

	Total invocations on Mocks 2 : 

	InvokeExpr: interfaceinvoke $r10.<org.jsonschema2pojo.GenerationConfig: boolean isUsePrimitives()>()

	InvokeExpr: interfaceinvoke $r15.<org.jsonschema2pojo.GenerationConfig: boolean isUseDoubleNumbers()>()



========== method  applyGeneratesNumberUsingJavaTypeFloatPrimitive ========: 

	Total invocations on Mocks 1 : 

	InvokeExpr: interfaceinvoke $r11.<org.jsonschema2pojo.GenerationConfig: boolean isUsePrimitives()>()



========== method  applyGeneratesNumberUsingJavaTypeFloat ========: 

	Total invocations on Mocks 1 : 

	InvokeExpr: interfaceinvoke $r11.<org.jsonschema2pojo.GenerationConfig: boolean isUsePrimitives()>()



========== method  applyGeneratesNumberUsingJavaTypeDoublePrimitive ========: 

	Total invocations on Mocks 1 : 

	InvokeExpr: interfaceinvoke $r11.<org.jsonschema2pojo.GenerationConfig: boolean isUsePrimitives()>()



========== method  applyGeneratesNumberUsingJavaTypeDouble ========: 

	Total invocations on Mocks 1 : 

	InvokeExpr: interfaceinvoke $r11.<org.jsonschema2pojo.GenerationConfig: boolean isUsePrimitives()>()



========== method  applyGeneratesBooleanPrimitive ========: 

	Total invocations on Mocks 1 : 

	InvokeExpr: interfaceinvoke $r10.<org.jsonschema2pojo.GenerationConfig: boolean isUsePrimitives()>()



========== method  applyGeneratesArray ========: 

	Total invocations on Mocks 2 : 

	InvokeExpr: virtualinvoke r4.<org.jsonschema2pojo.rules.ArrayRule: com.sun.codemodel.JClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JPackage,org.jsonschema2pojo.Schema)>("fooBar", r2, null, r1, null)

	InvokeExpr: virtualinvoke $r17.<org.jsonschema2pojo.rules.RuleFactory: org.jsonschema2pojo.rules.Rule getArrayRule()>()



========== method  applyGeneratesCustomObject ========: 

	Total invocations on Mocks 2 : 

	InvokeExpr: virtualinvoke r4.<org.jsonschema2pojo.rules.ObjectRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JPackage,org.jsonschema2pojo.Schema)>("fooBar", r2, null, r1, null)

	InvokeExpr: virtualinvoke $r17.<org.jsonschema2pojo.rules.RuleFactory: org.jsonschema2pojo.rules.Rule getObjectRule()>()


** CLASS org.jsonschema2pojo.rules.FormatRuleArraysTest


** CLASS org.jsonschema2pojo.rules.FormatRulePrimitivesTest


** CLASS org.jsonschema2pojo.rules.DescriptionRuleTest


** CLASS org.jsonschema2pojo.rules.ArrayRuleTest



========== method  arrayWithUniqueItemsProducesSet ========: 

	Total invocations on Mocks 1 : 

	InvokeExpr: virtualinvoke r6.<org.jsonschema2pojo.Schema: org.jsonschema2pojo.Schema deriveChildSchema(com.fasterxml.jackson.databind.JsonNode)>($r19)



========== method  arrayWithNonUniqueItemsProducesList ========: 

	Total invocations on Mocks 3 : 

	InvokeExpr: virtualinvoke r6.<org.jsonschema2pojo.Schema: java.net.URI getId()>()

	InvokeExpr: virtualinvoke r6.<org.jsonschema2pojo.Schema: org.jsonschema2pojo.Schema deriveChildSchema(com.fasterxml.jackson.databind.JsonNode)>($r23)

	InvokeExpr: interfaceinvoke $r27.<org.jsonschema2pojo.GenerationConfig: boolean isUseDoubleNumbers()>()



========== method  arrayOfPrimitivesProducesCollectionOfWrapperTypes ========: 

	Total invocations on Mocks 4 : 

	InvokeExpr: virtualinvoke r6.<org.jsonschema2pojo.Schema: java.net.URI getId()>()

	InvokeExpr: virtualinvoke r6.<org.jsonschema2pojo.Schema: org.jsonschema2pojo.Schema deriveChildSchema(com.fasterxml.jackson.databind.JsonNode)>($r23)

	InvokeExpr: interfaceinvoke $r27.<org.jsonschema2pojo.GenerationConfig: boolean isUsePrimitives()>()

	InvokeExpr: interfaceinvoke $r32.<org.jsonschema2pojo.GenerationConfig: boolean isUseDoubleNumbers()>()



========== method  arrayDefaultsToNonUnique ========: 

	Total invocations on Mocks 2 : 

	InvokeExpr: virtualinvoke r6.<org.jsonschema2pojo.Schema: java.net.URI getId()>()

	InvokeExpr: virtualinvoke r6.<org.jsonschema2pojo.Schema: org.jsonschema2pojo.Schema deriveChildSchema(com.fasterxml.jackson.databind.JsonNode)>($r23)


** CLASS org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest



========== method  testMinLength ========: 

	Total invocations on Mocks 9 : 

	InvokeExpr: interfaceinvoke $r2.<org.jsonschema2pojo.GenerationConfig: boolean isIncludeJsr303Annotations()>()

	InvokeExpr: virtualinvoke $r8.<com.fasterxml.jackson.databind.JsonNode: int asInt()>()

	InvokeExpr: virtualinvoke $r13.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>("minItems")

	InvokeExpr: virtualinvoke $r18.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Size;")

	InvokeExpr: virtualinvoke $r23.<com.fasterxml.jackson.databind.JsonNode: boolean has(java.lang.String)>("minItems")

	InvokeExpr: virtualinvoke $r28.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JType type()>()

	InvokeExpr: virtualinvoke $r43.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Size;")

	InvokeExpr: virtualinvoke $r48.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,int)>("min", i0)

	InvokeExpr: virtualinvoke $r53.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,java.lang.String)>($r55, $r56)



========== method  testMaxLength ========: 

	Total invocations on Mocks 9 : 

	InvokeExpr: interfaceinvoke $r2.<org.jsonschema2pojo.GenerationConfig: boolean isIncludeJsr303Annotations()>()

	InvokeExpr: virtualinvoke $r8.<com.fasterxml.jackson.databind.JsonNode: int asInt()>()

	InvokeExpr: virtualinvoke $r13.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>("maxItems")

	InvokeExpr: virtualinvoke $r18.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Size;")

	InvokeExpr: virtualinvoke $r23.<com.fasterxml.jackson.databind.JsonNode: boolean has(java.lang.String)>("maxItems")

	InvokeExpr: virtualinvoke $r28.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JType type()>()

	InvokeExpr: virtualinvoke $r43.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Size;")

	InvokeExpr: virtualinvoke $r48.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,int)>("max", i0)

	InvokeExpr: virtualinvoke $r53.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,int)>($r55, $i2)



========== method  testMaxAndMinLength ========: 

	Total invocations on Mocks 12 : 

	InvokeExpr: interfaceinvoke $r3.<org.jsonschema2pojo.GenerationConfig: boolean isIncludeJsr303Annotations()>()

	InvokeExpr: virtualinvoke $r11.<com.fasterxml.jackson.databind.JsonNode: int asInt()>()

	InvokeExpr: virtualinvoke r1.<com.fasterxml.jackson.databind.JsonNode: int asInt()>()

	InvokeExpr: virtualinvoke $r20.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>("minItems")

	InvokeExpr: virtualinvoke $r25.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>("maxItems")

	InvokeExpr: virtualinvoke $r29.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Size;")

	InvokeExpr: virtualinvoke $r34.<com.fasterxml.jackson.databind.JsonNode: boolean has(java.lang.String)>("minItems")

	InvokeExpr: virtualinvoke $r39.<com.fasterxml.jackson.databind.JsonNode: boolean has(java.lang.String)>("maxItems")

	InvokeExpr: virtualinvoke $r44.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JType type()>()

	InvokeExpr: virtualinvoke $r59.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Size;")

	InvokeExpr: virtualinvoke $r64.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,int)>("min", i0)

	InvokeExpr: virtualinvoke $r69.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,int)>("max", i1)



========== method  testMaxAndMinLengthGenericsOnType ========: 

	Total invocations on Mocks 12 : 

	InvokeExpr: interfaceinvoke $r3.<org.jsonschema2pojo.GenerationConfig: boolean isIncludeJsr303Annotations()>()

	InvokeExpr: virtualinvoke $r11.<com.fasterxml.jackson.databind.JsonNode: int asInt()>()

	InvokeExpr: virtualinvoke r1.<com.fasterxml.jackson.databind.JsonNode: int asInt()>()

	InvokeExpr: virtualinvoke $r20.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>("minItems")

	InvokeExpr: virtualinvoke $r25.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>("maxItems")

	InvokeExpr: virtualinvoke $r29.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Size;")

	InvokeExpr: virtualinvoke $r34.<com.fasterxml.jackson.databind.JsonNode: boolean has(java.lang.String)>("minItems")

	InvokeExpr: virtualinvoke $r39.<com.fasterxml.jackson.databind.JsonNode: boolean has(java.lang.String)>("maxItems")

	InvokeExpr: virtualinvoke $r44.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JType type()>()

	InvokeExpr: virtualinvoke $r63.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Size;")

	InvokeExpr: virtualinvoke $r68.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,int)>("min", i0)

	InvokeExpr: virtualinvoke $r73.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,int)>("max", i1)



========== method  testNotUsed ========: 

	Total invocations on Mocks 6 : 

	InvokeExpr: interfaceinvoke $r2.<org.jsonschema2pojo.GenerationConfig: boolean isIncludeJsr303Annotations()>()

	InvokeExpr: virtualinvoke $r7.<com.fasterxml.jackson.databind.JsonNode: boolean has(java.lang.String)>("minItems")

	InvokeExpr: virtualinvoke $r12.<com.fasterxml.jackson.databind.JsonNode: boolean has(java.lang.String)>("maxItems")

	InvokeExpr: virtualinvoke $r17.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JType type()>()

	InvokeExpr: virtualinvoke $r32.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Size;")

	InvokeExpr: virtualinvoke $r37.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,int)>($r38, $i0)



========== method  jsrDisable ========: 

	Total invocations on Mocks 3 : 

	InvokeExpr: interfaceinvoke $r2.<org.jsonschema2pojo.GenerationConfig: boolean isIncludeJsr303Annotations()>()

	InvokeExpr: virtualinvoke $r14.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Size;")

	InvokeExpr: virtualinvoke $r19.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,int)>($r20, $i0)


** CLASS org.jsonschema2pojo.rules.CommentRuleTest


** CLASS org.jsonschema2pojo.rules.RuleFactoryImplTest


** CLASS org.jsonschema2pojo.rules.MinimumMaximumRuleTest



========== method  testMinimum ========: 

	Total invocations on Mocks 10 : 

	InvokeExpr: interfaceinvoke $r3.<org.jsonschema2pojo.GenerationConfig: boolean isIncludeJsr303Annotations()>()

	InvokeExpr: virtualinvoke $r9.<com.fasterxml.jackson.databind.JsonNode: java.lang.String asText()>()

	InvokeExpr: virtualinvoke $r13.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>("minimum")

	InvokeExpr: virtualinvoke $r18.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/DecimalMin;")

	InvokeExpr: virtualinvoke $r23.<com.fasterxml.jackson.databind.JsonNode: boolean has(java.lang.String)>("minimum")

	InvokeExpr: virtualinvoke $r28.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JType type()>()

	InvokeExpr: virtualinvoke $r43.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/DecimalMin;")

	InvokeExpr: virtualinvoke $r48.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,java.lang.String)>("value", r1)

	InvokeExpr: virtualinvoke $r53.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/DecimalMax;")

	InvokeExpr: virtualinvoke $r58.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,java.lang.String)>($r60, $r61)



========== method  testMaximum ========: 

	Total invocations on Mocks 10 : 

	InvokeExpr: interfaceinvoke $r3.<org.jsonschema2pojo.GenerationConfig: boolean isIncludeJsr303Annotations()>()

	InvokeExpr: virtualinvoke $r9.<com.fasterxml.jackson.databind.JsonNode: java.lang.String asText()>()

	InvokeExpr: virtualinvoke $r13.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>("maximum")

	InvokeExpr: virtualinvoke $r18.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/DecimalMax;")

	InvokeExpr: virtualinvoke $r23.<com.fasterxml.jackson.databind.JsonNode: boolean has(java.lang.String)>("maximum")

	InvokeExpr: virtualinvoke $r28.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JType type()>()

	InvokeExpr: virtualinvoke $r43.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/DecimalMax;")

	InvokeExpr: virtualinvoke $r48.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,java.lang.String)>("value", r1)

	InvokeExpr: virtualinvoke $r53.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/DecimalMin;")

	InvokeExpr: virtualinvoke $r58.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,java.lang.String)>($r60, $r61)



========== method  testMaximumAndMinimum ========: 

	Total invocations on Mocks 14 : 

	InvokeExpr: interfaceinvoke $r5.<org.jsonschema2pojo.GenerationConfig: boolean isIncludeJsr303Annotations()>()

	InvokeExpr: virtualinvoke $r13.<com.fasterxml.jackson.databind.JsonNode: java.lang.String asText()>()

	InvokeExpr: virtualinvoke r3.<com.fasterxml.jackson.databind.JsonNode: java.lang.String asText()>()

	InvokeExpr: virtualinvoke $r20.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>("minimum")

	InvokeExpr: virtualinvoke $r25.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>("maximum")

	InvokeExpr: virtualinvoke $r29.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/DecimalMin;")

	InvokeExpr: virtualinvoke $r34.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/DecimalMax;")

	InvokeExpr: virtualinvoke $r39.<com.fasterxml.jackson.databind.JsonNode: boolean has(java.lang.String)>("minimum")

	InvokeExpr: virtualinvoke $r44.<com.fasterxml.jackson.databind.JsonNode: boolean has(java.lang.String)>("maximum")

	InvokeExpr: virtualinvoke $r49.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JType type()>()

	InvokeExpr: virtualinvoke $r64.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/DecimalMin;")

	InvokeExpr: virtualinvoke $r69.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,java.lang.String)>("value", r1)

	InvokeExpr: virtualinvoke $r74.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/DecimalMax;")

	InvokeExpr: virtualinvoke $r79.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,java.lang.String)>("value", r2)



========== method  testNotUsed ========: 

	Total invocations on Mocks 7 : 

	InvokeExpr: interfaceinvoke $r2.<org.jsonschema2pojo.GenerationConfig: boolean isIncludeJsr303Annotations()>()

	InvokeExpr: virtualinvoke $r7.<com.fasterxml.jackson.databind.JsonNode: boolean has(java.lang.String)>("minimum")

	InvokeExpr: virtualinvoke $r12.<com.fasterxml.jackson.databind.JsonNode: boolean has(java.lang.String)>("maximum")

	InvokeExpr: virtualinvoke $r17.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JType type()>()

	InvokeExpr: virtualinvoke $r32.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Size;")

	InvokeExpr: virtualinvoke $r37.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,java.lang.String)>($r38, $r39)

	InvokeExpr: virtualinvoke $r44.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,java.lang.String)>($r45, $r46)



========== method  jsrDisable ========: 

	Total invocations on Mocks 5 : 

	InvokeExpr: interfaceinvoke $r2.<org.jsonschema2pojo.GenerationConfig: boolean isIncludeJsr303Annotations()>()

	InvokeExpr: virtualinvoke $r14.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/DecimalMin;")

	InvokeExpr: virtualinvoke $r19.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,java.lang.String)>($r20, $r21)

	InvokeExpr: virtualinvoke $r26.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/DecimalMax;")

	InvokeExpr: virtualinvoke $r31.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,java.lang.String)>($r32, $r33)


** CLASS org.jsonschema2pojo.SourceSortOrderTest



========== method  testTwoFilesAreCompared ========: 

	Total invocations on Mocks 1 : 

	InvokeExpr: virtualinvoke $r6.<java.io.File: int compareTo(java.io.File)>(r3)



========== method  testTwoDirectoriesAreCompared ========: 

	Total invocations on Mocks 1 : 

	InvokeExpr: virtualinvoke $r6.<java.io.File: int compareTo(java.io.File)>(r3)



========== method  filesBeforeDirectories_FILES_FIRST ========: 

	Total invocations on Mocks 2 : 

	InvokeExpr: virtualinvoke $r13.<java.io.File: int compareTo(java.io.File)>($r15)

	InvokeExpr: virtualinvoke $r18.<java.io.File: int compareTo(java.io.File)>($r20)



========== method  filesBeforeDirectories_SUBDIRS_FIRST ========: 

	Total invocations on Mocks 2 : 

	InvokeExpr: virtualinvoke $r13.<java.io.File: int compareTo(java.io.File)>($r15)

	InvokeExpr: virtualinvoke $r18.<java.io.File: int compareTo(java.io.File)>($r20)



========== method  mockFile ========: 

	Total invocations on Mocks 1 : 

	InvokeExpr: virtualinvoke r1.<java.io.File: boolean isDirectory()>()

Benchmark Overall Stats 
Total Invocations: 1896
Invocations On Mocks: 276

Soot finished on Thu Jun 24 00:28:51 EDT 2021
Soot has run for 4 min. 42 sec.

