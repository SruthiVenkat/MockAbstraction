 ====================================== 
** CLASS org.jsonschema2pojo.SchemaStoreTest
Number of Methods with May Mock in class: 1
Number of Methods with ArrayMock in class: 0
Number of Methods with Collection in class: 0

 ====================================== 
** CLASS org.jsonschema2pojo.AnnotatorFactoryTest
Number of Methods with May Mock in class: 1
Number of Methods with ArrayMock in class: 1
Number of Methods with Collection in class: 0

 ====================================== 
** CLASS org.jsonschema2pojo.SchemaMapperTest
Number of Methods with May Mock in class: 4
Number of Methods with ArrayMock in class: 0
Number of Methods with Collection in class: 0

 ====================================== 
** CLASS org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest
Number of Methods with May Mock in class: 7
Number of Methods with ArrayMock in class: 0
Number of Methods with Collection in class: 0

 ====================================== 
** CLASS org.jsonschema2pojo.rules.SchemaRuleTest
Number of Methods with May Mock in class: 3
Number of Methods with ArrayMock in class: 0
Number of Methods with Collection in class: 0

 ====================================== 
** CLASS org.jsonschema2pojo.rules.PatternRuleTest
Number of Methods with May Mock in class: 3
Number of Methods with ArrayMock in class: 0
Number of Methods with Collection in class: 0

 ====================================== 
** CLASS org.jsonschema2pojo.rules.DigitsRuleTest
Number of Methods with May Mock in class: 4
Number of Methods with ArrayMock in class: 0
Number of Methods with Collection in class: 0

 ====================================== 
** CLASS org.jsonschema2pojo.rules.TypeRuleTest
Number of Methods with May Mock in class: 3
Number of Methods with ArrayMock in class: 0
Number of Methods with Collection in class: 0

 ====================================== 
** CLASS org.jsonschema2pojo.rules.ArrayRuleTest
Number of Methods with May Mock in class: 4
Number of Methods with ArrayMock in class: 0
Number of Methods with Collection in class: 0

 ====================================== 
** CLASS org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest
Number of Methods with May Mock in class: 7
Number of Methods with ArrayMock in class: 0
Number of Methods with Collection in class: 0

 ====================================== 
** CLASS org.jsonschema2pojo.rules.RuleFactoryImplTest
Number of Methods with May Mock in class: 3
Number of Methods with ArrayMock in class: 0
Number of Methods with Collection in class: 0

 ====================================== 
** CLASS org.jsonschema2pojo.rules.MinimumMaximumRuleTest
Number of Methods with May Mock in class: 6
Number of Methods with ArrayMock in class: 0
Number of Methods with Collection in class: 0

 ====================================== 
** CLASS org.jsonschema2pojo.SourceSortOrderTest
Number of Methods with May Mock in class: 2
Number of Methods with ArrayMock in class: 0
Number of Methods with Collection in class: 0

 ====================================== 
Benchmark jsonschema2pojo_core_1.1.1 Mock Stats
Total Number of Test/Before/After Methods: 145
Total Number of Test/Before/After Methods with May Mock: 48
Total Number of Test/Before/After Methods with ArrayMock in class: 1
Total Number of Test/Before/After Methods with Collection in class: 0

 ====================================== 
 INVOCATION STATISTICS 


** CLASS org.jsonschema2pojo.FileCodeWriterWithEncoding


** CLASS org.jsonschema2pojo.AnnotatorFactory


** CLASS org.jsonschema2pojo.NoopAnnotator


** CLASS org.jsonschema2pojo.SchemaMapper$1


** CLASS org.jsonschema2pojo.util.ParcelableHelper


** CLASS org.jsonschema2pojo.util.SerializableHelper


** CLASS org.jsonschema2pojo.util.Inflector


** CLASS org.jsonschema2pojo.util.NameHelper


** CLASS org.jsonschema2pojo.util.Inflector$RuleAndReplacement


** CLASS org.jsonschema2pojo.util.LanguageFeatures


** CLASS org.jsonschema2pojo.util.SerializableHelper$1


** CLASS org.jsonschema2pojo.util.Inflector$Builder


** CLASS org.jsonschema2pojo.util.MakeUniqueClassName


** CLASS org.jsonschema2pojo.util.Inflector$1


** CLASS org.jsonschema2pojo.util.TypeUtil


** CLASS org.jsonschema2pojo.util.URLUtil


** CLASS org.jsonschema2pojo.util.Models


** CLASS org.jsonschema2pojo.util.AnnotationHelper


** CLASS org.jsonschema2pojo.util.ReflectionHelper


** CLASS org.jsonschema2pojo.util.URLUtil$1


** CLASS org.jsonschema2pojo.SchemaMapper


** CLASS org.jsonschema2pojo.DefaultGenerationConfig


** CLASS org.jsonschema2pojo.FileCodeWriterWithEncoding$1


** CLASS org.jsonschema2pojo.SourceType


** CLASS org.jsonschema2pojo.SourceSortOrder


** CLASS org.jsonschema2pojo.CompositeAnnotator


** CLASS org.jsonschema2pojo.InclusionLevel


** CLASS org.jsonschema2pojo.AbstractAnnotator


** CLASS org.jsonschema2pojo.Jackson2Annotator$1


** CLASS org.jsonschema2pojo.SourceSortOrder$1


** CLASS org.jsonschema2pojo.RuleLogger


** CLASS org.jsonschema2pojo.Schema


** CLASS org.jsonschema2pojo.SchemaGenerator


** CLASS org.jsonschema2pojo.AbstractRuleLogger


** CLASS org.jsonschema2pojo.Jsonschema2Pojo


** CLASS org.jsonschema2pojo.Jackson2Annotator


** CLASS org.jsonschema2pojo.GenerationConfig


** CLASS org.jsonschema2pojo.SourceSortOrder$2$1


** CLASS org.jsonschema2pojo.SourceSortOrder$3


** CLASS org.jsonschema2pojo.SourceSortOrder$3$1


** CLASS org.jsonschema2pojo.SourceSortOrder$2


** CLASS org.jsonschema2pojo.SchemaStore


** CLASS org.jsonschema2pojo.exception.GenerationException


** CLASS org.jsonschema2pojo.exception.ClassAlreadyExistsException


** CLASS org.jsonschema2pojo.ContentResolver


** CLASS org.jsonschema2pojo.AllFileFilter


** CLASS org.jsonschema2pojo.model.EnumDefinitionExtensionType


** CLASS org.jsonschema2pojo.model.EnumDefinition


** CLASS org.jsonschema2pojo.model.EnumValueDefinition


** CLASS org.jsonschema2pojo.Annotator


** CLASS org.jsonschema2pojo.Moshi1Annotator


** CLASS org.jsonschema2pojo.URLProtocol


** CLASS org.jsonschema2pojo.AbstractTypeInfoAwareAnnotator


** CLASS org.jsonschema2pojo.FragmentResolver


** CLASS org.jsonschema2pojo.GsonAnnotator


** CLASS org.jsonschema2pojo.AnnotatorFactory$1


** CLASS org.jsonschema2pojo.rules.TitleRule


** CLASS org.jsonschema2pojo.rules.DynamicPropertiesRule


** CLASS org.jsonschema2pojo.rules.DescriptionRule


** CLASS org.jsonschema2pojo.rules.AdditionalPropertiesRule


** CLASS org.jsonschema2pojo.rules.ValidRule


** CLASS org.jsonschema2pojo.rules.MinItemsMaxItemsRule


** CLASS org.jsonschema2pojo.rules.JavaNameRule


** CLASS org.jsonschema2pojo.rules.PropertyRule


** CLASS org.jsonschema2pojo.rules.MinimumMaximumRule


** CLASS org.jsonschema2pojo.rules.RuleFactory


** CLASS org.jsonschema2pojo.rules.SchemaRule


** CLASS org.jsonschema2pojo.rules.RequiredRule


** CLASS org.jsonschema2pojo.rules.DigitsRule


** CLASS org.jsonschema2pojo.rules.EnumRule


** CLASS org.jsonschema2pojo.rules.CommentRule


** CLASS org.jsonschema2pojo.rules.PrimitiveTypes


** CLASS org.jsonschema2pojo.rules.TypeRule


** CLASS org.jsonschema2pojo.rules.ConstructorRule


** CLASS org.jsonschema2pojo.rules.PropertiesRule


** CLASS org.jsonschema2pojo.rules.MinLengthMaxLengthRule


** CLASS org.jsonschema2pojo.rules.RequiredArrayRule


** CLASS org.jsonschema2pojo.rules.BuilderRule


** CLASS org.jsonschema2pojo.rules.DefaultRule


** CLASS org.jsonschema2pojo.rules.PatternRule


** CLASS org.jsonschema2pojo.rules.ObjectRule


** CLASS org.jsonschema2pojo.rules.ArrayRule


** CLASS org.jsonschema2pojo.rules.Rule


** CLASS org.jsonschema2pojo.rules.NotRequiredRule


** CLASS org.jsonschema2pojo.rules.MediaRule


** CLASS org.jsonschema2pojo.rules.FormatRule


** CLASS org.jsonschema2pojo.AnnotationStyle


** CLASS org.jsonschema2pojo.SchemaStoreTest


** CLASS org.jsonschema2pojo.FragmentResolverTest


** CLASS org.jsonschema2pojo.util.InflectorTest


** CLASS org.jsonschema2pojo.util.LanguageFeaturesTest


** CLASS org.jsonschema2pojo.util.MakeUniqueClassNameTest


** CLASS org.jsonschema2pojo.util.LanguageFeaturesTest$VersionEnum


** CLASS org.jsonschema2pojo.util.TypeUtilTest


** CLASS org.jsonschema2pojo.util.Driver


** CLASS org.jsonschema2pojo.util.NameHelperTest


** CLASS org.jsonschema2pojo.AnnotatorFactoryTest


** CLASS org.jsonschema2pojo.SchemaMapperTest



========== method  generateReadsSchemaAsObject ========: 

	Total invocations on Mocks 3 : 

	InvokeExpr: virtualinvoke r2.<org.jsonschema2pojo.rules.RuleFactory: org.jsonschema2pojo.rules.Rule getSchemaRule()>()

	InvokeExpr: virtualinvoke r2.<org.jsonschema2pojo.rules.RuleFactory: org.jsonschema2pojo.GenerationConfig getGenerationConfig()>()

	InvokeExpr: virtualinvoke $r21.<org.jsonschema2pojo.rules.SchemaRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>($r23, $r25, $r27, $r29, $r31)



========== method  generateCreatesSchemaFromExampleJsonWhenInJsonMode ========: 

	Total invocations on Mocks 5 : 

	InvokeExpr: interfaceinvoke r4.<org.jsonschema2pojo.GenerationConfig: org.jsonschema2pojo.SourceType getSourceType()>()

	InvokeExpr: virtualinvoke r5.<org.jsonschema2pojo.SchemaGenerator: com.fasterxml.jackson.databind.node.ObjectNode schemaFromExample(java.net.URL)>(r1)

	InvokeExpr: virtualinvoke r6.<org.jsonschema2pojo.rules.RuleFactory: org.jsonschema2pojo.rules.Rule getSchemaRule()>()

	InvokeExpr: virtualinvoke r6.<org.jsonschema2pojo.rules.RuleFactory: org.jsonschema2pojo.GenerationConfig getGenerationConfig()>()

	InvokeExpr: virtualinvoke $r31.<org.jsonschema2pojo.rules.SchemaRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>($r33, $r35, $r37, $r39, $r41)



========== method  generateCreatesSchemaFromExampleJSONAsStringInput ========: 

	Total invocations on Mocks 5 : 

	InvokeExpr: interfaceinvoke r4.<org.jsonschema2pojo.GenerationConfig: org.jsonschema2pojo.SourceType getSourceType()>()

	InvokeExpr: virtualinvoke r5.<org.jsonschema2pojo.SchemaGenerator: com.fasterxml.jackson.databind.node.ObjectNode schemaFromExample(com.fasterxml.jackson.databind.JsonNode)>($r19)

	InvokeExpr: virtualinvoke r6.<org.jsonschema2pojo.rules.RuleFactory: org.jsonschema2pojo.rules.Rule getSchemaRule()>()

	InvokeExpr: virtualinvoke r6.<org.jsonschema2pojo.rules.RuleFactory: org.jsonschema2pojo.GenerationConfig getGenerationConfig()>()

	InvokeExpr: virtualinvoke $r34.<org.jsonschema2pojo.rules.SchemaRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>($r36, $r38, $r40, $r42, $r44)



========== method  generateCreatesSchemaFromSchemaAsStringInput ========: 

	Total invocations on Mocks 3 : 

	InvokeExpr: virtualinvoke r3.<org.jsonschema2pojo.rules.RuleFactory: org.jsonschema2pojo.rules.Rule getSchemaRule()>()

	InvokeExpr: virtualinvoke r3.<org.jsonschema2pojo.rules.RuleFactory: org.jsonschema2pojo.GenerationConfig getGenerationConfig()>()

	InvokeExpr: virtualinvoke $r22.<org.jsonschema2pojo.rules.SchemaRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>($r24, $r26, $r28, $r30, $r32)


** CLASS org.jsonschema2pojo.ContentResolverTest


** CLASS org.jsonschema2pojo.ContentResolverNetworkTest


** CLASS org.jsonschema2pojo.RootDriver


** CLASS org.jsonschema2pojo.rules.RequiredRuleTest


** CLASS org.jsonschema2pojo.rules.DynamicPropertiesRuleTest


** CLASS org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest



========== method  testMinLength ========: 

	Total invocations on Mocks 9 : 

	InvokeExpr: interfaceinvoke $r2.<org.jsonschema2pojo.GenerationConfig: boolean isIncludeJsr303Annotations()>()

	InvokeExpr: virtualinvoke $r8.<com.fasterxml.jackson.databind.JsonNode: int asInt()>()

	InvokeExpr: virtualinvoke $r13.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>("minLength")

	InvokeExpr: virtualinvoke $r18.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Size;")

	InvokeExpr: virtualinvoke $r23.<com.fasterxml.jackson.databind.JsonNode: boolean has(java.lang.String)>("minLength")

	InvokeExpr: virtualinvoke $r28.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JType type()>()

	InvokeExpr: virtualinvoke $r43.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Size;")

	InvokeExpr: virtualinvoke $r48.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,int)>("min", i0)

	InvokeExpr: virtualinvoke $r53.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,java.lang.String)>($r55, $r56)



========== method  testMaxLength ========: 

	Total invocations on Mocks 9 : 

	InvokeExpr: interfaceinvoke $r2.<org.jsonschema2pojo.GenerationConfig: boolean isIncludeJsr303Annotations()>()

	InvokeExpr: virtualinvoke $r8.<com.fasterxml.jackson.databind.JsonNode: int asInt()>()

	InvokeExpr: virtualinvoke $r13.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>("maxLength")

	InvokeExpr: virtualinvoke $r18.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Size;")

	InvokeExpr: virtualinvoke $r23.<com.fasterxml.jackson.databind.JsonNode: boolean has(java.lang.String)>("maxLength")

	InvokeExpr: virtualinvoke $r28.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JType type()>()

	InvokeExpr: virtualinvoke $r43.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Size;")

	InvokeExpr: virtualinvoke $r48.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,int)>("max", i0)

	InvokeExpr: virtualinvoke $r53.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,int)>($r55, $i2)



========== method  testMaxAndMinLength ========: 

	Total invocations on Mocks 12 : 

	InvokeExpr: interfaceinvoke $r3.<org.jsonschema2pojo.GenerationConfig: boolean isIncludeJsr303Annotations()>()

	InvokeExpr: virtualinvoke $r11.<com.fasterxml.jackson.databind.JsonNode: int asInt()>()

	InvokeExpr: virtualinvoke r1.<com.fasterxml.jackson.databind.JsonNode: int asInt()>()

	InvokeExpr: virtualinvoke $r20.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>("minLength")

	InvokeExpr: virtualinvoke $r25.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>("maxLength")

	InvokeExpr: virtualinvoke $r29.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Size;")

	InvokeExpr: virtualinvoke $r34.<com.fasterxml.jackson.databind.JsonNode: boolean has(java.lang.String)>("minLength")

	InvokeExpr: virtualinvoke $r39.<com.fasterxml.jackson.databind.JsonNode: boolean has(java.lang.String)>("maxLength")

	InvokeExpr: virtualinvoke $r44.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JType type()>()

	InvokeExpr: virtualinvoke $r59.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Size;")

	InvokeExpr: virtualinvoke $r64.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,int)>("min", i0)

	InvokeExpr: virtualinvoke $r69.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,int)>("max", i1)



========== method  testMaxAndMinLengthGenericsOnType ========: 

	Total invocations on Mocks 12 : 

	InvokeExpr: interfaceinvoke $r3.<org.jsonschema2pojo.GenerationConfig: boolean isIncludeJsr303Annotations()>()

	InvokeExpr: virtualinvoke $r11.<com.fasterxml.jackson.databind.JsonNode: int asInt()>()

	InvokeExpr: virtualinvoke r1.<com.fasterxml.jackson.databind.JsonNode: int asInt()>()

	InvokeExpr: virtualinvoke $r20.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>("minLength")

	InvokeExpr: virtualinvoke $r25.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>("maxLength")

	InvokeExpr: virtualinvoke $r29.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Size;")

	InvokeExpr: virtualinvoke $r34.<com.fasterxml.jackson.databind.JsonNode: boolean has(java.lang.String)>("minLength")

	InvokeExpr: virtualinvoke $r39.<com.fasterxml.jackson.databind.JsonNode: boolean has(java.lang.String)>("maxLength")

	InvokeExpr: virtualinvoke $r44.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JType type()>()

	InvokeExpr: virtualinvoke $r63.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Size;")

	InvokeExpr: virtualinvoke $r68.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,int)>("min", i0)

	InvokeExpr: virtualinvoke $r73.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,int)>("max", i1)



========== method  testNotUsed ========: 

	Total invocations on Mocks 6 : 

	InvokeExpr: interfaceinvoke $r2.<org.jsonschema2pojo.GenerationConfig: boolean isIncludeJsr303Annotations()>()

	InvokeExpr: virtualinvoke $r7.<com.fasterxml.jackson.databind.JsonNode: boolean has(java.lang.String)>("minLength")

	InvokeExpr: virtualinvoke $r12.<com.fasterxml.jackson.databind.JsonNode: boolean has(java.lang.String)>("maxLength")

	InvokeExpr: virtualinvoke $r17.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JType type()>()

	InvokeExpr: virtualinvoke $r32.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Size;")

	InvokeExpr: virtualinvoke $r37.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,int)>($r38, $i0)



========== method  jsrDisable ========: 

	Total invocations on Mocks 3 : 

	InvokeExpr: interfaceinvoke $r2.<org.jsonschema2pojo.GenerationConfig: boolean isIncludeJsr303Annotations()>()

	InvokeExpr: virtualinvoke $r14.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Size;")

	InvokeExpr: virtualinvoke $r19.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,int)>($r20, $i0)


** CLASS org.jsonschema2pojo.rules.FormatRuleJodaTest


** CLASS org.jsonschema2pojo.rules.RequiredArrayRuleTest


** CLASS org.jsonschema2pojo.rules.EnumRuleTest


** CLASS org.jsonschema2pojo.rules.TitleRuleTest


** CLASS org.jsonschema2pojo.rules.SchemaRuleTest



========== method  refsToOtherSchemasAreLoaded ========: 

	Total invocations on Mocks 2 : 

	InvokeExpr: interfaceinvoke r4.<org.jsonschema2pojo.GenerationConfig: java.lang.String getRefFragmentPathDelimiters()>()

	InvokeExpr: virtualinvoke $r36.<org.jsonschema2pojo.rules.TypeRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>($r38, $r40, $r42, $r45, $r47)



========== method  enumAsRootIsGeneratedCorrectly ========: 

	Total invocations on Mocks 6 : 

	InvokeExpr: virtualinvoke r4.<org.jsonschema2pojo.Schema: com.fasterxml.jackson.databind.JsonNode getContent()>()

	InvokeExpr: virtualinvoke r4.<org.jsonschema2pojo.Schema: org.jsonschema2pojo.Schema deriveChildSchema(com.fasterxml.jackson.databind.JsonNode)>($r16)

	InvokeExpr: virtualinvoke r4.<org.jsonschema2pojo.Schema: void setJavaTypeIfEmpty(com.sun.codemodel.JType)>(r3)

	InvokeExpr: virtualinvoke r5.<org.jsonschema2pojo.rules.EnumRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>("nodeName", r2, null, r3, r4)

	InvokeExpr: virtualinvoke $r31.<org.jsonschema2pojo.rules.EnumRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>("nodeName", r1, null, r3, r4)

	InvokeExpr: virtualinvoke $r35.<org.jsonschema2pojo.Schema: void setJavaTypeIfEmpty(com.sun.codemodel.JType)>(r3)



========== method  existingTypeIsUsedWhenTypeIsAlreadyGenerated ========: 

	Total invocations on Mocks 1 : 

	InvokeExpr: interfaceinvoke r5.<org.jsonschema2pojo.GenerationConfig: java.lang.String getRefFragmentPathDelimiters()>()


** CLASS org.jsonschema2pojo.rules.PropertyRuleTest


** CLASS org.jsonschema2pojo.rules.PatternRuleTest



========== method  testRegex ========: 

	Total invocations on Mocks 6 : 

	InvokeExpr: interfaceinvoke $r3.<org.jsonschema2pojo.GenerationConfig: boolean isIncludeJsr303Annotations()>()

	InvokeExpr: virtualinvoke $r8.<com.fasterxml.jackson.databind.JsonNode: java.lang.String asText()>()

	InvokeExpr: virtualinvoke $r12.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Pattern;")

	InvokeExpr: virtualinvoke $r17.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JType type()>()

	InvokeExpr: virtualinvoke $r32.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Pattern;")

	InvokeExpr: virtualinvoke $r37.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,java.lang.String)>("regexp", "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$")



========== method  jsrDisable ========: 

	Total invocations on Mocks 3 : 

	InvokeExpr: interfaceinvoke $r2.<org.jsonschema2pojo.GenerationConfig: boolean isIncludeJsr303Annotations()>()

	InvokeExpr: virtualinvoke $r14.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Pattern;")

	InvokeExpr: virtualinvoke $r19.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,java.lang.String)>($r20, $r21)


** CLASS org.jsonschema2pojo.rules.DigitsRuleTest



========== method  testHasIntegerAndFractionalDigits ========: 

	Total invocations on Mocks 12 : 

	InvokeExpr: interfaceinvoke $r2.<org.jsonschema2pojo.GenerationConfig: boolean isIncludeJsr303Annotations()>()

	InvokeExpr: virtualinvoke $r9.<com.fasterxml.jackson.databind.JsonNode: int asInt()>()

	InvokeExpr: virtualinvoke $r14.<com.fasterxml.jackson.databind.JsonNode: int asInt()>()

	InvokeExpr: virtualinvoke $r19.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>("integerDigits")

	InvokeExpr: virtualinvoke $r24.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>("fractionalDigits")

	InvokeExpr: virtualinvoke $r29.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Digits;")

	InvokeExpr: virtualinvoke $r34.<com.fasterxml.jackson.databind.JsonNode: boolean has(java.lang.String)>("integerDigits")

	InvokeExpr: virtualinvoke $r39.<com.fasterxml.jackson.databind.JsonNode: boolean has(java.lang.String)>("fractionalDigits")

	InvokeExpr: virtualinvoke $r44.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JType type()>()

	InvokeExpr: virtualinvoke $r59.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Digits;")

	InvokeExpr: virtualinvoke $r64.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,int)>("integer", i0)

	InvokeExpr: virtualinvoke $r69.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,int)>("fraction", i1)



========== method  testNotUsed ========: 

	Total invocations on Mocks 6 : 

	InvokeExpr: interfaceinvoke $r2.<org.jsonschema2pojo.GenerationConfig: boolean isIncludeJsr303Annotations()>()

	InvokeExpr: virtualinvoke $r7.<com.fasterxml.jackson.databind.JsonNode: boolean has(java.lang.String)>("integerDigits")

	InvokeExpr: virtualinvoke $r12.<com.fasterxml.jackson.databind.JsonNode: boolean has(java.lang.String)>("fractionalDigits")

	InvokeExpr: virtualinvoke $r17.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JType type()>()

	InvokeExpr: virtualinvoke $r32.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Size;")

	InvokeExpr: virtualinvoke $r37.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,int)>($r38, $i0)



========== method  jsrDisable ========: 

	Total invocations on Mocks 3 : 

	InvokeExpr: interfaceinvoke $r2.<org.jsonschema2pojo.GenerationConfig: boolean isIncludeJsr303Annotations()>()

	InvokeExpr: virtualinvoke $r14.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/DecimalMin;")

	InvokeExpr: virtualinvoke $r19.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,int)>($r20, $i0)


** CLASS org.jsonschema2pojo.rules.FormatRuleTest


** CLASS org.jsonschema2pojo.rules.TypeRuleTest



========== method  applyGeneratesDate ========: 

	Total invocations on Mocks 1 : 

	InvokeExpr: virtualinvoke r5.<org.jsonschema2pojo.rules.FormatRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JType,org.jsonschema2pojo.Schema)>($r17, $r19, $r21, $r23, $r25)



========== method  applyGeneratesArray ========: 

	Total invocations on Mocks 1 : 

	InvokeExpr: virtualinvoke r4.<org.jsonschema2pojo.rules.ArrayRule: com.sun.codemodel.JClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JPackage,org.jsonschema2pojo.Schema)>("fooBar", r2, null, r1, null)



========== method  applyGeneratesCustomObject ========: 

	Total invocations on Mocks 1 : 

	InvokeExpr: virtualinvoke r4.<org.jsonschema2pojo.rules.ObjectRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JPackage,org.jsonschema2pojo.Schema)>("fooBar", r2, null, r1, null)


** CLASS org.jsonschema2pojo.rules.EnumRuleTest$1


** CLASS org.jsonschema2pojo.rules.FormatRuleArraysTest


** CLASS org.jsonschema2pojo.rules.FormatRulePrimitivesTest


** CLASS org.jsonschema2pojo.rules.DescriptionRuleTest


** CLASS org.jsonschema2pojo.rules.ArrayRuleTest



========== method  arrayWithUniqueItemsProducesSet ========: 

	Total invocations on Mocks 1 : 

	InvokeExpr: virtualinvoke r6.<org.jsonschema2pojo.Schema: org.jsonschema2pojo.Schema deriveChildSchema(com.fasterxml.jackson.databind.JsonNode)>($r19)



========== method  arrayWithNonUniqueItemsProducesList ========: 

	Total invocations on Mocks 2 : 

	InvokeExpr: virtualinvoke r6.<org.jsonschema2pojo.Schema: java.net.URI getId()>()

	InvokeExpr: virtualinvoke r6.<org.jsonschema2pojo.Schema: org.jsonschema2pojo.Schema deriveChildSchema(com.fasterxml.jackson.databind.JsonNode)>($r23)



========== method  arrayOfPrimitivesProducesCollectionOfWrapperTypes ========: 

	Total invocations on Mocks 2 : 

	InvokeExpr: virtualinvoke r6.<org.jsonschema2pojo.Schema: java.net.URI getId()>()

	InvokeExpr: virtualinvoke r6.<org.jsonschema2pojo.Schema: org.jsonschema2pojo.Schema deriveChildSchema(com.fasterxml.jackson.databind.JsonNode)>($r23)



========== method  arrayDefaultsToNonUnique ========: 

	Total invocations on Mocks 2 : 

	InvokeExpr: virtualinvoke r6.<org.jsonschema2pojo.Schema: java.net.URI getId()>()

	InvokeExpr: virtualinvoke r6.<org.jsonschema2pojo.Schema: org.jsonschema2pojo.Schema deriveChildSchema(com.fasterxml.jackson.databind.JsonNode)>($r23)


** CLASS org.jsonschema2pojo.rules.EnumRuleTest$FirstArgAnswer


** CLASS org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest



========== method  testMinLength ========: 

	Total invocations on Mocks 9 : 

	InvokeExpr: interfaceinvoke $r2.<org.jsonschema2pojo.GenerationConfig: boolean isIncludeJsr303Annotations()>()

	InvokeExpr: virtualinvoke $r8.<com.fasterxml.jackson.databind.JsonNode: int asInt()>()

	InvokeExpr: virtualinvoke $r13.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>("minItems")

	InvokeExpr: virtualinvoke $r18.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Size;")

	InvokeExpr: virtualinvoke $r23.<com.fasterxml.jackson.databind.JsonNode: boolean has(java.lang.String)>("minItems")

	InvokeExpr: virtualinvoke $r28.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JType type()>()

	InvokeExpr: virtualinvoke $r43.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Size;")

	InvokeExpr: virtualinvoke $r48.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,int)>("min", i0)

	InvokeExpr: virtualinvoke $r53.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,java.lang.String)>($r55, $r56)



========== method  testMaxLength ========: 

	Total invocations on Mocks 9 : 

	InvokeExpr: interfaceinvoke $r2.<org.jsonschema2pojo.GenerationConfig: boolean isIncludeJsr303Annotations()>()

	InvokeExpr: virtualinvoke $r8.<com.fasterxml.jackson.databind.JsonNode: int asInt()>()

	InvokeExpr: virtualinvoke $r13.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>("maxItems")

	InvokeExpr: virtualinvoke $r18.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Size;")

	InvokeExpr: virtualinvoke $r23.<com.fasterxml.jackson.databind.JsonNode: boolean has(java.lang.String)>("maxItems")

	InvokeExpr: virtualinvoke $r28.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JType type()>()

	InvokeExpr: virtualinvoke $r43.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Size;")

	InvokeExpr: virtualinvoke $r48.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,int)>("max", i0)

	InvokeExpr: virtualinvoke $r53.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,int)>($r55, $i2)



========== method  testMaxAndMinLength ========: 

	Total invocations on Mocks 12 : 

	InvokeExpr: interfaceinvoke $r3.<org.jsonschema2pojo.GenerationConfig: boolean isIncludeJsr303Annotations()>()

	InvokeExpr: virtualinvoke $r11.<com.fasterxml.jackson.databind.JsonNode: int asInt()>()

	InvokeExpr: virtualinvoke r1.<com.fasterxml.jackson.databind.JsonNode: int asInt()>()

	InvokeExpr: virtualinvoke $r20.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>("minItems")

	InvokeExpr: virtualinvoke $r25.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>("maxItems")

	InvokeExpr: virtualinvoke $r29.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Size;")

	InvokeExpr: virtualinvoke $r34.<com.fasterxml.jackson.databind.JsonNode: boolean has(java.lang.String)>("minItems")

	InvokeExpr: virtualinvoke $r39.<com.fasterxml.jackson.databind.JsonNode: boolean has(java.lang.String)>("maxItems")

	InvokeExpr: virtualinvoke $r44.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JType type()>()

	InvokeExpr: virtualinvoke $r59.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Size;")

	InvokeExpr: virtualinvoke $r64.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,int)>("min", i0)

	InvokeExpr: virtualinvoke $r69.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,int)>("max", i1)



========== method  testMaxAndMinLengthGenericsOnType ========: 

	Total invocations on Mocks 12 : 

	InvokeExpr: interfaceinvoke $r3.<org.jsonschema2pojo.GenerationConfig: boolean isIncludeJsr303Annotations()>()

	InvokeExpr: virtualinvoke $r11.<com.fasterxml.jackson.databind.JsonNode: int asInt()>()

	InvokeExpr: virtualinvoke r1.<com.fasterxml.jackson.databind.JsonNode: int asInt()>()

	InvokeExpr: virtualinvoke $r20.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>("minItems")

	InvokeExpr: virtualinvoke $r25.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>("maxItems")

	InvokeExpr: virtualinvoke $r29.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Size;")

	InvokeExpr: virtualinvoke $r34.<com.fasterxml.jackson.databind.JsonNode: boolean has(java.lang.String)>("minItems")

	InvokeExpr: virtualinvoke $r39.<com.fasterxml.jackson.databind.JsonNode: boolean has(java.lang.String)>("maxItems")

	InvokeExpr: virtualinvoke $r44.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JType type()>()

	InvokeExpr: virtualinvoke $r63.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Size;")

	InvokeExpr: virtualinvoke $r68.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,int)>("min", i0)

	InvokeExpr: virtualinvoke $r73.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,int)>("max", i1)



========== method  testNotUsed ========: 

	Total invocations on Mocks 6 : 

	InvokeExpr: interfaceinvoke $r2.<org.jsonschema2pojo.GenerationConfig: boolean isIncludeJsr303Annotations()>()

	InvokeExpr: virtualinvoke $r7.<com.fasterxml.jackson.databind.JsonNode: boolean has(java.lang.String)>("minItems")

	InvokeExpr: virtualinvoke $r12.<com.fasterxml.jackson.databind.JsonNode: boolean has(java.lang.String)>("maxItems")

	InvokeExpr: virtualinvoke $r17.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JType type()>()

	InvokeExpr: virtualinvoke $r32.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Size;")

	InvokeExpr: virtualinvoke $r37.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,int)>($r38, $i0)



========== method  jsrDisable ========: 

	Total invocations on Mocks 3 : 

	InvokeExpr: interfaceinvoke $r2.<org.jsonschema2pojo.GenerationConfig: boolean isIncludeJsr303Annotations()>()

	InvokeExpr: virtualinvoke $r14.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Size;")

	InvokeExpr: virtualinvoke $r19.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,int)>($r20, $i0)


** CLASS org.jsonschema2pojo.rules.CommentRuleTest


** CLASS org.jsonschema2pojo.rules.Driver


** CLASS org.jsonschema2pojo.rules.RuleFactoryImplTest


** CLASS org.jsonschema2pojo.rules.MinimumMaximumRuleTest



========== method  testMinimum ========: 

	Total invocations on Mocks 10 : 

	InvokeExpr: interfaceinvoke $r3.<org.jsonschema2pojo.GenerationConfig: boolean isIncludeJsr303Annotations()>()

	InvokeExpr: virtualinvoke $r9.<com.fasterxml.jackson.databind.JsonNode: java.lang.String asText()>()

	InvokeExpr: virtualinvoke $r13.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>("minimum")

	InvokeExpr: virtualinvoke $r18.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/DecimalMin;")

	InvokeExpr: virtualinvoke $r23.<com.fasterxml.jackson.databind.JsonNode: boolean has(java.lang.String)>("minimum")

	InvokeExpr: virtualinvoke $r28.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JType type()>()

	InvokeExpr: virtualinvoke $r43.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/DecimalMin;")

	InvokeExpr: virtualinvoke $r48.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,java.lang.String)>("value", r1)

	InvokeExpr: virtualinvoke $r53.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/DecimalMax;")

	InvokeExpr: virtualinvoke $r58.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,java.lang.String)>($r60, $r61)



========== method  testMaximum ========: 

	Total invocations on Mocks 10 : 

	InvokeExpr: interfaceinvoke $r3.<org.jsonschema2pojo.GenerationConfig: boolean isIncludeJsr303Annotations()>()

	InvokeExpr: virtualinvoke $r9.<com.fasterxml.jackson.databind.JsonNode: java.lang.String asText()>()

	InvokeExpr: virtualinvoke $r13.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>("maximum")

	InvokeExpr: virtualinvoke $r18.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/DecimalMax;")

	InvokeExpr: virtualinvoke $r23.<com.fasterxml.jackson.databind.JsonNode: boolean has(java.lang.String)>("maximum")

	InvokeExpr: virtualinvoke $r28.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JType type()>()

	InvokeExpr: virtualinvoke $r43.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/DecimalMax;")

	InvokeExpr: virtualinvoke $r48.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,java.lang.String)>("value", r1)

	InvokeExpr: virtualinvoke $r53.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/DecimalMin;")

	InvokeExpr: virtualinvoke $r58.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,java.lang.String)>($r60, $r61)



========== method  testMaximumAndMinimum ========: 

	Total invocations on Mocks 14 : 

	InvokeExpr: interfaceinvoke $r5.<org.jsonschema2pojo.GenerationConfig: boolean isIncludeJsr303Annotations()>()

	InvokeExpr: virtualinvoke $r13.<com.fasterxml.jackson.databind.JsonNode: java.lang.String asText()>()

	InvokeExpr: virtualinvoke r3.<com.fasterxml.jackson.databind.JsonNode: java.lang.String asText()>()

	InvokeExpr: virtualinvoke $r20.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>("minimum")

	InvokeExpr: virtualinvoke $r25.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>("maximum")

	InvokeExpr: virtualinvoke $r29.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/DecimalMin;")

	InvokeExpr: virtualinvoke $r34.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/DecimalMax;")

	InvokeExpr: virtualinvoke $r39.<com.fasterxml.jackson.databind.JsonNode: boolean has(java.lang.String)>("minimum")

	InvokeExpr: virtualinvoke $r44.<com.fasterxml.jackson.databind.JsonNode: boolean has(java.lang.String)>("maximum")

	InvokeExpr: virtualinvoke $r49.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JType type()>()

	InvokeExpr: virtualinvoke $r64.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/DecimalMin;")

	InvokeExpr: virtualinvoke $r69.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,java.lang.String)>("value", r1)

	InvokeExpr: virtualinvoke $r74.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/DecimalMax;")

	InvokeExpr: virtualinvoke $r79.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,java.lang.String)>("value", r2)



========== method  testNotUsed ========: 

	Total invocations on Mocks 7 : 

	InvokeExpr: interfaceinvoke $r2.<org.jsonschema2pojo.GenerationConfig: boolean isIncludeJsr303Annotations()>()

	InvokeExpr: virtualinvoke $r7.<com.fasterxml.jackson.databind.JsonNode: boolean has(java.lang.String)>("minimum")

	InvokeExpr: virtualinvoke $r12.<com.fasterxml.jackson.databind.JsonNode: boolean has(java.lang.String)>("maximum")

	InvokeExpr: virtualinvoke $r17.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JType type()>()

	InvokeExpr: virtualinvoke $r32.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/Size;")

	InvokeExpr: virtualinvoke $r37.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,java.lang.String)>($r38, $r39)

	InvokeExpr: virtualinvoke $r44.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,java.lang.String)>($r45, $r46)



========== method  jsrDisable ========: 

	Total invocations on Mocks 5 : 

	InvokeExpr: interfaceinvoke $r2.<org.jsonschema2pojo.GenerationConfig: boolean isIncludeJsr303Annotations()>()

	InvokeExpr: virtualinvoke $r14.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/DecimalMin;")

	InvokeExpr: virtualinvoke $r19.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,java.lang.String)>($r20, $r21)

	InvokeExpr: virtualinvoke $r26.<com.sun.codemodel.JFieldVar: com.sun.codemodel.JAnnotationUse annotate(java.lang.Class)>(class "Ljavax/validation/constraints/DecimalMax;")

	InvokeExpr: virtualinvoke $r31.<com.sun.codemodel.JAnnotationUse: com.sun.codemodel.JAnnotationUse param(java.lang.String,java.lang.String)>($r32, $r33)


** CLASS org.jsonschema2pojo.example.Example$1


** CLASS org.jsonschema2pojo.example.Example


** CLASS org.jsonschema2pojo.example.Driver


** CLASS org.jsonschema2pojo.SourceSortOrderTest



========== method  filesBeforeDirectories_FILES_FIRST ========: 

	Total invocations on Mocks 2 : 

	InvokeExpr: virtualinvoke $r13.<java.io.File: int compareTo(java.io.File)>($r15)

	InvokeExpr: virtualinvoke $r18.<java.io.File: int compareTo(java.io.File)>($r20)



========== method  filesBeforeDirectories_SUBDIRS_FIRST ========: 

	Total invocations on Mocks 2 : 

	InvokeExpr: virtualinvoke $r13.<java.io.File: int compareTo(java.io.File)>($r15)

	InvokeExpr: virtualinvoke $r18.<java.io.File: int compareTo(java.io.File)>($r20)


** CLASS org.jsonschema2pojo.SourceSortOrder$1$lambda_getComparator_0__4


** CLASS org.jsonschema2pojo.util.ReflectionHelper$lambda_getBaseBuilderClass_3__33


** CLASS org.jsonschema2pojo.util.ReflectionHelper$lambda_getAllPackageClasses_6__60


** CLASS org.jsonschema2pojo.rules.AdditionalPropertiesRule$lambda_addInnerBuilder_0__63


** CLASS org.jsonschema2pojo.util.ReflectionHelper$lambda_getBaseBuilderClass_2__76


** CLASS org.jsonschema2pojo.util.ReflectionHelper$lambda_getConcreteBuilderClass_0__77


** CLASS org.jsonschema2pojo.util.ReflectionHelper$lambda__getClass_4__121


** CLASS org.jsonschema2pojo.util.ReflectionHelper$lambda__getClass_5__122

Benchmark Overall Stats 
Total Invocations: 1730
Invocations On Mocks: 217

Soot finished on Wed Jun 02 18:45:23 EDT 2021
Soot has run for 2 min. 39 sec. 

