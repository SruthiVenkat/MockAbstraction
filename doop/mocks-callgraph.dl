#ifdef USE_BASIC
.decl CallGraphEdgeNotLambda(s:number, mi:MethodInvocation, t:number, ms:Method)
CallGraphEdgeNotLambda(0, mi, 0, ms) :-
  basic.ResolveInvocation(rv, mi, ms),
  basic.VirtualMethodInvocation_BaseType(mi, rv).
CallGraphEdgeNotLambda(0, mi, 0, ms) :-
  MethodInvocation_Method(mi, ms).
#endif

#ifdef USE_CALLGRAPH
.decl AnyCallGraphEdge(mi:MethodInvocation, ms:Method)
.decl CallGraphEdgeNotLambda(callerCtx:symbol, mi:MethodInvocation, calleeCtx:symbol, ms:Method)
CallGraphEdgeNotLambda("", mi, "", ms) :-
  AnyCallGraphEdge(mi, ms).

AnyCallGraphEdge(?i, ?m) :- mainAnalysis.CallGraphEdge(_, ?i, _, ?m).
AnyCallGraphEdge(?i, ?m) :- mainAnalysis.InvokedynamicBootCallGraphEdge(_, ?i, _, ?m).
AnyCallGraphEdge(?i, ?m) :- mainAnalysis.MethodHandleCallGraphEdge(_, ?i, _, ?m, _, _).
// AnyCallGraphEdge(?from, ?to) :- mainAnalysis.ReflectiveCallGraphEdge(_, ?from, _, ?to).
//AnyCallGraphEdge(?from, ?to) :- mainAnalysis.TamiflexCallGraphEdge(_, ?from, _, ?to).
// AnyCallGraphEdge(?from, ?to) :- mainAnalysis.ProxyCallGraphEdge(_, ?from, _, ?to).
AnyCallGraphEdge(?i, ?m) :- mainAnalysis.OpaqueCallGraphEdge(?i, ?m).
#endif
