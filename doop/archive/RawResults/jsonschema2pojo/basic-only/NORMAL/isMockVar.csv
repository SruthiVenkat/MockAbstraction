<org.jsonschema2pojo.rules.DigitsRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/field#_0
<org.jsonschema2pojo.rules.PatternRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/field#_0
<org.jsonschema2pojo.rules.RuleFactory: void <init>(org.jsonschema2pojo.GenerationConfig,org.jsonschema2pojo.Annotator,org.jsonschema2pojo.SchemaStore)>/generationConfig#_0
<org.jsonschema2pojo.rules.RuleFactory: void setGenerationConfig(org.jsonschema2pojo.GenerationConfig)>/generationConfig#_0
<org.jsonschema2pojo.rules.FormatRuleTest: void <init>(java.lang.String,java.lang.Class)>/$stack8
<org.jsonschema2pojo.util.NameHelperTest: org.jsonschema2pojo.util.NameHelper helper(boolean)>/config#_75
<org.jsonschema2pojo.rules.SchemaRuleTest: void <init>()>/$stack4
<org.jsonschema2pojo.rules.FormatRuleArraysTest: void <init>(java.lang.String,java.lang.Class)>/$stack13
<org.jsonschema2pojo.rules.MinLengthMaxLengthRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/field#_0
<org.jsonschema2pojo.rules.MinItemsMaxItemsRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/field#_0
<org.jsonschema2pojo.rules.PatternRuleTest: void setUp()>/$stack4
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void setUp()>/$stack4
<org.jsonschema2pojo.SchemaMapperTest: void generateReadsSchemaAsObject()>/mockRuleFactory#_48
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromExampleJsonWhenInJsonMode()>/mockRuleFactory#_81
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromExampleJSONAsStringInput()>/mockRuleFactory#_110
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromSchemaAsStringInput()>/mockRuleFactory#_130
<org.jsonschema2pojo.rules.MinimumMaximumRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/field#_0
<org.jsonschema2pojo.rules.DigitsRuleTest: void setUp()>/$stack4
<org.hamcrest.core.IsEqual: org.hamcrest.Matcher equalTo(java.lang.Object)>/operand#_0
<org.jsonschema2pojo.rules.EnumRuleTest: void <init>()>/$stack14
<org.jsonschema2pojo.rules.PropertyRuleTest: void <init>()>/$stack6
<org.jsonschema2pojo.rules.ArrayRuleTest: void <init>()>/$stack6
<org.jsonschema2pojo.rules.FormatRulePrimitivesTest: void <init>(java.lang.Class,java.lang.Class)>/$stack21
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void setUp()>/$stack4
<org.jsonschema2pojo.rules.TypeRuleTest: void <init>()>/$stack6
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void setUp()>/$stack4
<org.jsonschema2pojo.rules.RuleFactoryImplTest: void generationConfigIsReturned()>/mockGenerationConfig#_80
<org.jsonschema2pojo.rules.FormatRuleJodaTest: void setupConfig()>/$stack22
<org.mockito.internal.MockitoCore: java.lang.Object verify(java.lang.Object,org.mockito.verification.VerificationMode)>/mock#_0
<org.hamcrest.core.IsSame: org.hamcrest.Matcher sameInstance(java.lang.Object)>/target#_0
<org.mockito.internal.MockitoCore: org.mockito.MockingDetails mockingDetails(java.lang.Object)>/toInspect#_0
<org.jsonschema2pojo.rules.PropertyRule: boolean isDeclaredAs(java.lang.String,java.lang.String,com.fasterxml.jackson.databind.JsonNode,org.jsonschema2pojo.Schema)>/schema#_0
<org.jsonschema2pojo.SchemaStoreTest: void setIfEmptyOnlySetsIfEmpty()>/firstClass#_152
<org.jsonschema2pojo.SchemaStoreTest: void setIfEmptyOnlySetsIfEmpty()>/$stack12
<org.jsonschema2pojo.SchemaStoreTest: void setIfEmptyOnlySetsIfEmpty()>/secondClass#_153
<org.jsonschema2pojo.SchemaStoreTest: void setIfEmptyOnlySetsIfEmpty()>/$stack15
<org.jsonschema2pojo.SourceSortOrderTest: void testTwoFilesAreCompared(java.util.Comparator)>/mockFileA#_52
<org.jsonschema2pojo.SourceSortOrderTest: void testTwoDirectoriesAreCompared(java.util.Comparator)>/mockDirA#_60
<org.jsonschema2pojo.SourceSortOrderTest: void filesBeforeDirectories_FILES_FIRST()>/mockFile#_70
<org.jsonschema2pojo.SourceSortOrderTest: void filesBeforeDirectories_FILES_FIRST()>/mockDir#_71
<org.jsonschema2pojo.SourceSortOrderTest: void filesBeforeDirectories_SUBDIRS_FIRST()>/mockFile#_83
<org.jsonschema2pojo.SourceSortOrderTest: void filesBeforeDirectories_SUBDIRS_FIRST()>/mockDir#_84
<org.mockito.internal.util.MockUtil: org.mockito.invocation.MockHandler getMockHandler(java.lang.Object)>/mock#_0
<org.mockito.internal.util.MockUtil: org.mockito.internal.stubbing.InvocationContainerImpl getInvocationContainer(java.lang.Object)>/mock#_0
<org.mockito.internal.util.MockUtil: boolean isSpy(java.lang.Object)>/mock#_0
<org.mockito.internal.util.MockUtil: org.mockito.mock.MockName getMockName(java.lang.Object)>/mock#_0
<org.mockito.internal.util.MockUtil: org.mockito.mock.MockCreationSettings getMockSettings(java.lang.Object)>/mock#_0
<org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>/value#_0
<org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>/operand#_0
<org.hamcrest.Matchers: org.hamcrest.Matcher sameInstance(java.lang.Object)>/target#_0
<org.jsonschema2pojo.rules.SchemaRuleTest: void refsToOtherSchemasAreLoaded()>/$stack29
<org.jsonschema2pojo.rules.SchemaRuleTest: void refsToOtherSchemasAreLoaded()>/$stack34
<org.jsonschema2pojo.rules.SchemaRuleTest: void refsToOtherSchemasAreLoaded()>/mockTypeRule#_63
<org.jsonschema2pojo.rules.SchemaRuleTest: void enumAsRootIsGeneratedCorrectly()>/enumRule#_96
<org.jsonschema2pojo.rules.SchemaRuleTest: void enumAsRootIsGeneratedCorrectly()>/schema#_91
<org.jsonschema2pojo.rules.SchemaRuleTest: void existingTypeIsUsedWhenTypeIsAlreadyGenerated()>/$stack19
<org.jsonschema2pojo.rules.SchemaRuleTest: void existingTypeIsUsedWhenTypeIsAlreadyGenerated()>/$stack23
<org.jsonschema2pojo.rules.SchemaRuleTest: void existingTypeIsUsedWhenTypeIsAlreadyGenerated()>/previouslyGeneratedType#_111
<org.jsonschema2pojo.rules.SchemaRuleTest: void existingTypeIsUsedWhenTypeIsAlreadyGenerated()>/result#_128
<org.mockito.internal.exceptions.Reporter: org.mockito.exceptions.base.MockitoException stubPassedToVerify(java.lang.Object)>/mock#_0
<org.mockito.internal.util.DefaultMockingDetails: boolean isMock()>/$stack1
<org.mockito.internal.util.DefaultMockingDetails: boolean isSpy()>/$stack1
<org.mockito.internal.util.DefaultMockingDetails: org.mockito.internal.stubbing.InvocationContainerImpl getInvocationContainer()>/$stack1
<org.mockito.internal.util.DefaultMockingDetails: org.mockito.invocation.MockHandler mockHandler()>/$stack1
<org.jsonschema2pojo.AnnotatorFactoryTest: void canCreateCompositeAnnotator()>/annotator1#_54
<org.jsonschema2pojo.AnnotatorFactoryTest: void canCreateCompositeAnnotator()>/annotator2#_55
<org.jsonschema2pojo.rules.PatternRuleTest: void testRegex()>/$stack30
<org.jsonschema2pojo.rules.PatternRuleTest: void testRegex()>/$stack32
<org.jsonschema2pojo.rules.PatternRuleTest: void testRegex()>/$stack38
<org.jsonschema2pojo.rules.PatternRuleTest: void jsrDisable()>/$stack12
<org.jsonschema2pojo.rules.PatternRuleTest: void jsrDisable()>/$stack13
<org.jsonschema2pojo.rules.PatternRuleTest: void jsrDisable()>/$stack18
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack44
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack46
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack52
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack57
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack62
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack44
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack46
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack52
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack57
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack62
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack68
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack70
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack76
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack82
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack88
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testNotUsed()>/$stack32
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testNotUsed()>/$stack33
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testNotUsed()>/$stack38
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testNotUsed()>/$stack45
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void jsrDisable()>/$stack12
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void jsrDisable()>/$stack13
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void jsrDisable()>/$stack18
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void jsrDisable()>/$stack25
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void jsrDisable()>/$stack30
<org.jsonschema2pojo.SchemaMapperTest: void generateReadsSchemaAsObject()>/$stack11
<org.jsonschema2pojo.SchemaMapperTest: void generateReadsSchemaAsObject()>/mockSchemaRule#_46
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromExampleJsonWhenInJsonMode()>/$stack26
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromExampleJsonWhenInJsonMode()>/mockSchemaRule#_73
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromExampleJSONAsStringInput()>/$stack29
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromExampleJSONAsStringInput()>/mockSchemaRule#_102
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromSchemaAsStringInput()>/$stack14
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromSchemaAsStringInput()>/mockSchemaRule#_128
<org.jsonschema2pojo.rules.DynamicPropertiesRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/$stack25
<org.hamcrest.core.IsEqual: boolean areEqual(java.lang.Object,java.lang.Object)>/expected#_0
<org.hamcrest.core.IsEqual: boolean areArrayLengthsEqual(java.lang.Object,java.lang.Object)>/expectedArray#_0
<org.hamcrest.core.IsEqual: boolean areArrayElementsEqual(java.lang.Object,java.lang.Object)>/expectedArray#_0
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack65
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack67
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack73
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack79
<org.jsonschema2pojo.rules.DigitsRuleTest: void testNotUsed()>/$stack32
<org.jsonschema2pojo.rules.DigitsRuleTest: void testNotUsed()>/$stack33
<org.jsonschema2pojo.rules.DigitsRuleTest: void testNotUsed()>/$stack38
<org.jsonschema2pojo.rules.DigitsRuleTest: void jsrDisable()>/$stack12
<org.jsonschema2pojo.rules.DigitsRuleTest: void jsrDisable()>/$stack13
<org.jsonschema2pojo.rules.DigitsRuleTest: void jsrDisable()>/$stack18
<org.jsonschema2pojo.rules.EnumRuleTest: void wireUpConfig()>/$stack7
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMinLength()>/$stack45
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMinLength()>/$stack47
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMinLength()>/$stack53
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMinLength()>/$stack58
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxLength()>/$stack45
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxLength()>/$stack47
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxLength()>/$stack53
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxLength()>/$stack58
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/$stack65
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/$stack67
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/$stack73
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/$stack79
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack69
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack71
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack77
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack83
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testNotUsed()>/$stack32
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testNotUsed()>/$stack33
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testNotUsed()>/$stack38
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void jsrDisable()>/$stack12
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void jsrDisable()>/$stack13
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void jsrDisable()>/$stack18
<org.jsonschema2pojo.rules.TypeRuleTest: void wireUpConfig()>/$stack2
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesDate()>/mockDateType#_79
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesArray()>/mockArrayType#_559
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesCustomObject()>/mockObjectType#_577
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMinLength()>/$stack45
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMinLength()>/$stack47
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMinLength()>/$stack53
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMinLength()>/$stack58
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxLength()>/$stack45
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxLength()>/$stack47
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxLength()>/$stack53
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxLength()>/$stack58
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/$stack65
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/$stack67
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/$stack73
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/$stack79
<org.jsonschema2pojo.rules.RuleFactoryImplTest: void generationConfigIsReturned()>/$stack9
<org.jsonschema2pojo.rules.RuleFactoryImplTest: void generationConfigIsReturned()>/mockRuleLogger#_81
<org.jsonschema2pojo.rules.RuleFactoryImplTest: void generationConfigIsReturned()>/$stack12
<org.jsonschema2pojo.rules.RuleFactoryImplTest: void generationRuleLoggerIsReturned()>/mockRuleLogger#_94
<org.jsonschema2pojo.rules.RuleFactoryImplTest: void generationRuleLoggerIsReturned()>/$stack10
<org.jsonschema2pojo.rules.RuleFactoryImplTest: void schemaStoreIsReturned()>/mockSchemaStore#_105
<org.jsonschema2pojo.rules.RuleFactoryImplTest: void schemaStoreIsReturned()>/$stack7
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack69
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack71
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack77
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack83
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testNotUsed()>/$stack32
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testNotUsed()>/$stack33
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testNotUsed()>/$stack38
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void jsrDisable()>/$stack12
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void jsrDisable()>/$stack13
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void jsrDisable()>/$stack18
<org.jsonschema2pojo.rules.FormatRule: void <init>(org.jsonschema2pojo.rules.RuleFactory)>/$stack2
<org.jsonschema2pojo.rules.FormatRule: java.util.Map getFormatTypeMapping(org.jsonschema2pojo.GenerationConfig)>/config#_0
<org.mockito.internal.debugging.InvocationsPrinter: java.lang.String printInvocations(java.lang.Object)>/mock#_0
<org.mockito.internal.MockitoCore: void assertNotStubOnlyMock(java.lang.Object)>/mock#_0
<org.hamcrest.core.Is: org.hamcrest.Matcher is(java.lang.Object)>/value#_0
<org.jsonschema2pojo.util.LanguageFeaturesTest: void correctTestForJava7()>/$stack2
<org.jsonschema2pojo.util.LanguageFeaturesTest: void correctTestForJava8()>/$stack2
<org.mockito.Mockito: org.mockito.MockingDetails mockingDetails(java.lang.Object)>/toInspect#_0
<org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>/methodCall#_0
<org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>/mock#_0
<org.mockito.Mockito: java.lang.Object verify(java.lang.Object,org.mockito.verification.VerificationMode)>/mock#_0
<org.hamcrest.MatcherAssert: void assertThat(java.lang.String,java.lang.Object,org.hamcrest.Matcher)>/actual#_0
<org.jsonschema2pojo.Schema: void setJavaTypeIfEmpty(com.sun.codemodel.JType)>/javaType#_0
<org.jsonschema2pojo.SourceSortOrderTest: void testTwoFilesAreCompared(java.util.Comparator)>/mockFileB#_53
<org.jsonschema2pojo.SourceSortOrderTest: void testTwoDirectoriesAreCompared(java.util.Comparator)>/mockDirB#_61
<org.mockito.internal.util.MockUtil: boolean isMock(java.lang.Object)>/mock#_0
<org.jsonschema2pojo.rules.SchemaRuleTest: void refsToOtherSchemasAreLoaded()>/mockGenerationConfig#_60
<org.jsonschema2pojo.rules.SchemaRuleTest: void existingTypeIsUsedWhenTypeIsAlreadyGenerated()>/mockGenerationConfig#_119
<org.jsonschema2pojo.SchemaStore: org.jsonschema2pojo.Schema create(org.jsonschema2pojo.Schema,java.lang.String,java.lang.String)>/parent#_0
<org.mockito.internal.util.DefaultMockingDetails: java.lang.String printInvocations()>/$stack2
<org.jsonschema2pojo.rules.RequiredArrayRuleTest: void setupRuleFactoryToIncludeJsr303()>/config#_93
<org.jsonschema2pojo.rules.PatternRuleTest: void testRegex()>/$stack16
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack19
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack24
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack19
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack24
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack28
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/maxSubNode#_141
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack37
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack42
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromExampleJsonWhenInJsonMode()>/mockGenerationConfig#_75
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromExampleJSONAsStringInput()>/mockGenerationConfig#_104
<org.hamcrest.core.IsEqual: void describeTo(org.hamcrest.Description)>/$stack2
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack29
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack34
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack39
<org.jsonschema2pojo.rules.EnumRuleTest: void wireUpConfig()>/$stack4
<org.jsonschema2pojo.rules.EnumRuleTest: void wireUpConfig()>/$stack9
<org.jsonschema2pojo.rules.EnumRuleTest: void wireUpConfig()>/$stack14
<org.jsonschema2pojo.rules.EnumRuleTest: void wireUpConfig()>/$stack19
<org.jsonschema2pojo.rules.PropertyRuleTest: org.jsonschema2pojo.Schema getMockedSchema(com.fasterxml.jackson.databind.node.ObjectNode)>/schema#_63
<org.jsonschema2pojo.rules.ArrayRuleTest: void arrayWithUniqueItemsProducesSet()>/schema#_60
<org.jsonschema2pojo.rules.ArrayRuleTest: void arrayWithNonUniqueItemsProducesList()>/schema#_84
<org.jsonschema2pojo.rules.ArrayRuleTest: void arrayOfPrimitivesProducesCollectionOfWrapperTypes()>/schema#_110
<org.jsonschema2pojo.rules.ArrayRuleTest: void arrayDefaultsToNonUnique()>/schema#_137
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMinLength()>/$stack20
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMinLength()>/$stack25
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxLength()>/$stack20
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxLength()>/$stack25
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/$stack30
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/maxSubNode#_136
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/$stack39
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack30
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/maxSubNode#_159
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack39
<org.jsonschema2pojo.rules.TypeRuleTest: void wireUpConfig()>/$stack4
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesDate()>/mockFormatRule#_80
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesArray()>/mockArrayRule#_560
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesCustomObject()>/mockObjectRule#_578
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMinLength()>/$stack20
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMinLength()>/$stack25
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxLength()>/$stack20
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxLength()>/$stack25
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/$stack30
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/maxSubNode#_136
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/$stack39
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack30
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/maxSubNode#_159
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack39
<org.junit.Assert: void failNotSame(java.lang.String,java.lang.Object,java.lang.Object)>/expected#_0
<org.junit.Assert: void failNotSame(java.lang.String,java.lang.Object,java.lang.Object)>/actual#_0
<org.jsonschema2pojo.rules.SchemaRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/schema#_0
<org.hamcrest.core.IsSame: void describeTo(org.hamcrest.Description)>/$stack3
<org.jsonschema2pojo.rules.PropertyRule: com.fasterxml.jackson.databind.JsonNode resolveRefs(com.fasterxml.jackson.databind.JsonNode,org.jsonschema2pojo.Schema)>/parent#_0
<org.jsonschema2pojo.rules.TypeRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/$stack59
<org.jsonschema2pojo.rules.TypeRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/$stack51
<org.jsonschema2pojo.rules.TypeRule: com.sun.codemodel.JType getIntegerType(com.sun.codemodel.JCodeModel,com.fasterxml.jackson.databind.JsonNode,org.jsonschema2pojo.GenerationConfig)>/config#_0
<org.jsonschema2pojo.rules.TypeRule: com.sun.codemodel.JType getNumberType(com.sun.codemodel.JCodeModel,org.jsonschema2pojo.GenerationConfig)>/config#_0
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromExampleJsonWhenInJsonMode()>/mockSchemaGenerator#_78
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromExampleJSONAsStringInput()>/mockSchemaGenerator#_107
<org.jsonschema2pojo.rules.PropertyRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/schema#_0
<org.jsonschema2pojo.rules.PatternRuleTest: void testRegex()>/result#_102
<org.jsonschema2pojo.rules.PatternRuleTest: void jsrDisable()>/result#_112
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/result#_108
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/result#_127
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/result#_152
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testNotUsed()>/result#_168
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void jsrDisable()>/result#_179
<org.hamcrest.core.IsEqual: boolean matches(java.lang.Object)>/$stack2
<org.hamcrest.core.IsEqual: boolean areArraysEqual(java.lang.Object,java.lang.Object)>/expectedArray#_0
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/result#_112
<org.jsonschema2pojo.rules.DigitsRuleTest: void testNotUsed()>/result#_127
<org.jsonschema2pojo.rules.DigitsRuleTest: void jsrDisable()>/result#_137
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMinLength()>/result#_105
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxLength()>/result#_123
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/result#_146
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/result#_169
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testNotUsed()>/result#_184
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void jsrDisable()>/result#_194
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMinLength()>/result#_105
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxLength()>/result#_123
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/result#_146
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/result#_169
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testNotUsed()>/result#_184
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void jsrDisable()>/result#_194
<org.junit.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>/expected#_0
<org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>/expected#_0
<org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>/actual#_0
<org.junit.Assert: void assertThat(java.lang.String,java.lang.Object,org.hamcrest.Matcher)>/actual#_0
<org.jsonschema2pojo.rules.SchemaRule: java.lang.String nameFromRef(java.lang.String)>/$stack12
<org.jsonschema2pojo.rules.PatternRuleTest: void testRegex()>/$stack27
<org.jsonschema2pojo.rules.PatternRuleTest: void jsrDisable()>/$stack9
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack41
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack41
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack65
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testNotUsed()>/$stack29
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void jsrDisable()>/$stack9
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack62
<org.jsonschema2pojo.rules.DigitsRuleTest: void testNotUsed()>/$stack29
<org.jsonschema2pojo.rules.DigitsRuleTest: void jsrDisable()>/$stack9
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMinLength()>/$stack42
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxLength()>/$stack42
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/$stack62
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack66
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testNotUsed()>/$stack29
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void jsrDisable()>/$stack9
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMinLength()>/$stack42
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxLength()>/$stack42
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/$stack62
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack66
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testNotUsed()>/$stack29
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void jsrDisable()>/$stack9
<org.jsonschema2pojo.rules.TypeRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/$stack55
<org.junit.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>/actual#_0
<org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>/actual#_0
<org.jsonschema2pojo.rules.EnumRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/schema#_0
<org.jsonschema2pojo.rules.PropertyRule: boolean isRequired(java.lang.String,com.fasterxml.jackson.databind.JsonNode,org.jsonschema2pojo.Schema)>/schema#_0
<org.jsonschema2pojo.rules.PropertyRule: boolean useOptional(java.lang.String,com.fasterxml.jackson.databind.JsonNode,org.jsonschema2pojo.Schema)>/schema#_0
<org.jsonschema2pojo.rules.PatternRuleTest: void testRegex()>/$stack26
<org.jsonschema2pojo.rules.PatternRuleTest: void jsrDisable()>/$stack8
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack40
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack40
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack64
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testNotUsed()>/$stack28
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void jsrDisable()>/$stack8
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack61
<org.jsonschema2pojo.rules.DigitsRuleTest: void testNotUsed()>/$stack28
<org.jsonschema2pojo.rules.DigitsRuleTest: void jsrDisable()>/$stack8
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMinLength()>/$stack41
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxLength()>/$stack41
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/$stack61
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack65
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testNotUsed()>/$stack28
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void jsrDisable()>/$stack8
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMinLength()>/$stack41
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxLength()>/$stack41
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/$stack61
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack65
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testNotUsed()>/$stack28
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void jsrDisable()>/$stack8
<org.jsonschema2pojo.rules.EnumRule: void addEnumConstants(org.jsonschema2pojo.model.EnumDefinition,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/schema#_0
<org.jsonschema2pojo.rules.TypeRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/schema#_0
<org.jsonschema2pojo.rules.EnumRuleTest: void applyGeneratesUniqueEnumNamesForMultipleEnumNodesWithSameName()>/$stack38
<org.jsonschema2pojo.rules.EnumRuleTest: void applyGeneratesUniqueEnumNamesForMultipleEnumNodesWithSameName()>/$stack45
<org.jsonschema2pojo.rules.EnumRuleTest: void applyGeneratesUniqueEnumNamesForMultipleEnumNodesWithSameName()>/$stack48
<org.jsonschema2pojo.rules.ArrayRule: com.sun.codemodel.JClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JPackage,org.jsonschema2pojo.Schema)>/schema#_0
<org.jsonschema2pojo.rules.PropertyRuleTest: com.sun.codemodel.JDefinedClass applyRule(com.fasterxml.jackson.databind.node.ObjectNode,com.fasterxml.jackson.databind.node.ObjectNode)>/$stack9
<org.jsonschema2pojo.rules.PropertyRule: void propertyAnnotations(java.lang.String,com.fasterxml.jackson.databind.JsonNode,org.jsonschema2pojo.Schema,com.sun.codemodel.JDocCommentable)>/schema#_0
<org.jsonschema2pojo.AnnotatorFactoryTest: void canCreateCompositeAnnotator()>/$stack4
<org.jsonschema2pojo.AnnotatorFactoryTest: void canCreateCompositeAnnotator()>/$stack5
<org.jsonschema2pojo.rules.EnumRuleTest: void <init>()>/$stack5
<org.jsonschema2pojo.rules.EnumRuleTest: void <init>()>/$stack6
<org.jsonschema2pojo.rules.SchemaRuleTest: void <init>()>/$stack1
<org.jsonschema2pojo.rules.SchemaRuleTest: void <init>()>/$stack2
<org.jsonschema2pojo.SchemaMapperTest: void generateReadsSchemaAsObject()>/$stack7
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromExampleJsonWhenInJsonMode()>/$stack22
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromExampleJSONAsStringInput()>/$stack25
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromSchemaAsStringInput()>/$stack10
<org.jsonschema2pojo.rules.EnumRuleTest: void <init>()>/$stack7
<org.jsonschema2pojo.rules.EnumRuleTest: void <init>()>/$stack8
<org.jsonschema2pojo.rules.TypeRuleTest: void <init>()>/$stack3
<org.jsonschema2pojo.rules.TypeRuleTest: void <init>()>/$stack4
<org.jsonschema2pojo.SourceSortOrderTest: void testTwoFilesAreCompared(java.util.Comparator)>/$stack8
<org.jsonschema2pojo.SourceSortOrderTest: void testTwoFilesAreCompared(java.util.Comparator)>/$stack9
<org.jsonschema2pojo.SourceSortOrderTest: void testTwoDirectoriesAreCompared(java.util.Comparator)>/$stack8
<org.jsonschema2pojo.SourceSortOrderTest: void testTwoDirectoriesAreCompared(java.util.Comparator)>/$stack9
<org.jsonschema2pojo.SourceSortOrderTest: void filesBeforeDirectories_FILES_FIRST()>/$stack17
<org.jsonschema2pojo.SourceSortOrderTest: void filesBeforeDirectories_FILES_FIRST()>/$stack18
<org.jsonschema2pojo.SourceSortOrderTest: void filesBeforeDirectories_FILES_FIRST()>/$stack23
<org.jsonschema2pojo.SourceSortOrderTest: void filesBeforeDirectories_FILES_FIRST()>/$stack24
<org.jsonschema2pojo.SourceSortOrderTest: void filesBeforeDirectories_SUBDIRS_FIRST()>/$stack17
<org.jsonschema2pojo.SourceSortOrderTest: void filesBeforeDirectories_SUBDIRS_FIRST()>/$stack18
<org.jsonschema2pojo.SourceSortOrderTest: void filesBeforeDirectories_SUBDIRS_FIRST()>/$stack23
<org.jsonschema2pojo.SourceSortOrderTest: void filesBeforeDirectories_SUBDIRS_FIRST()>/$stack24
<org.jsonschema2pojo.SourceSortOrderTest: java.io.File mockFile(boolean)>/$stack3
<org.jsonschema2pojo.SourceSortOrderTest: java.io.File mockFile(boolean)>/mockFile#_102
<org.jsonschema2pojo.rules.EnumRuleTest: void <init>()>/$stack3
<org.jsonschema2pojo.rules.EnumRuleTest: void <init>()>/$stack4
<org.jsonschema2pojo.rules.SchemaRuleTest: void enumAsRootIsGeneratedCorrectly()>/$stack14
<org.jsonschema2pojo.rules.SchemaRuleTest: void enumAsRootIsGeneratedCorrectly()>/$stack37
<org.jsonschema2pojo.rules.SchemaRuleTest: void enumAsRootIsGeneratedCorrectly()>/$stack38
<org.jsonschema2pojo.rules.EnumRuleTest: void <init>()>/$stack1
<org.jsonschema2pojo.rules.EnumRuleTest: void <init>()>/$stack2
<org.jsonschema2pojo.rules.PropertyRuleTest: org.jsonschema2pojo.Schema getMockedSchema(com.fasterxml.jackson.databind.node.ObjectNode)>/$stack3
<org.jsonschema2pojo.rules.ArrayRuleTest: void arrayWithUniqueItemsProducesSet()>/$stack20
<org.jsonschema2pojo.rules.ArrayRuleTest: void arrayWithNonUniqueItemsProducesList()>/$stack20
<org.jsonschema2pojo.rules.ArrayRuleTest: void arrayOfPrimitivesProducesCollectionOfWrapperTypes()>/$stack20
<org.jsonschema2pojo.rules.ArrayRuleTest: void arrayDefaultsToNonUnique()>/$stack20
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack17
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/$stack15
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack15
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/$stack15
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack15
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesCustomObject()>/$stack14
<org.jsonschema2pojo.rules.FormatRuleTest: void <init>(java.lang.String,java.lang.Class)>/$stack3
<org.jsonschema2pojo.rules.FormatRuleTest: void <init>(java.lang.String,java.lang.Class)>/$stack4
<org.jsonschema2pojo.util.NameHelperTest: org.jsonschema2pojo.util.NameHelper helper(boolean)>/$stack3
<org.jsonschema2pojo.rules.SchemaRuleTest: void refsToOtherSchemasAreLoaded()>/$stack19
<org.jsonschema2pojo.rules.SchemaRuleTest: void existingTypeIsUsedWhenTypeIsAlreadyGenerated()>/$stack14
<org.jsonschema2pojo.rules.RequiredArrayRuleTest: void setupRuleFactoryToIncludeJsr303()>/$stack3
<org.jsonschema2pojo.rules.FormatRuleArraysTest: void <init>(java.lang.String,java.lang.Class)>/$stack3
<org.jsonschema2pojo.rules.FormatRuleArraysTest: void <init>(java.lang.String,java.lang.Class)>/$stack4
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromExampleJsonWhenInJsonMode()>/$stack13
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromExampleJSONAsStringInput()>/$stack14
<org.jsonschema2pojo.rules.PropertyRuleTest: void <init>()>/$stack1
<org.jsonschema2pojo.rules.PropertyRuleTest: void <init>()>/$stack2
<org.jsonschema2pojo.rules.ArrayRuleTest: void <init>()>/$stack1
<org.jsonschema2pojo.rules.ArrayRuleTest: void <init>()>/$stack2
<org.jsonschema2pojo.rules.FormatRulePrimitivesTest: void <init>(java.lang.Class,java.lang.Class)>/$stack3
<org.jsonschema2pojo.rules.FormatRulePrimitivesTest: void <init>(java.lang.Class,java.lang.Class)>/$stack4
<org.jsonschema2pojo.rules.TypeRuleTest: void <init>()>/$stack1
<org.jsonschema2pojo.rules.TypeRuleTest: void <init>()>/$stack2
<org.jsonschema2pojo.rules.RuleFactoryImplTest: void generationConfigIsReturned()>/$stack4
<org.jsonschema2pojo.rules.RuleFactoryImplTest: void generationRuleLoggerIsReturned()>/$stack4
<org.jsonschema2pojo.rules.RuleFactoryImplTest: void generationRuleLoggerIsReturned()>/mockGenerationConfig#_93
<org.jsonschema2pojo.rules.FormatRuleJodaTest: void <init>(java.lang.String,java.lang.Class)>/$stack3
<org.jsonschema2pojo.rules.FormatRuleJodaTest: void <init>(java.lang.String,java.lang.Class)>/$stack4
<org.jsonschema2pojo.util.LanguageFeaturesTest: org.jsonschema2pojo.GenerationConfig mockConfig(java.lang.String)>/$stack2
<org.jsonschema2pojo.util.LanguageFeaturesTest: org.jsonschema2pojo.GenerationConfig mockConfig(java.lang.String)>/config#_90
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromExampleJsonWhenInJsonMode()>/$stack18
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromExampleJSONAsStringInput()>/$stack19
<org.jsonschema2pojo.rules.SchemaRuleTest: void refsToOtherSchemasAreLoaded()>/$stack23
<org.jsonschema2pojo.rules.SchemaRuleTest: void refsToOtherSchemasAreLoaded()>/$stack41
<org.jsonschema2pojo.rules.SchemaRuleTest: void refsToOtherSchemasAreLoaded()>/$stack42
<org.jsonschema2pojo.rules.EnumRuleTest: void <init>()>/$stack9
<org.jsonschema2pojo.rules.EnumRuleTest: void <init>()>/$stack10
<org.jsonschema2pojo.rules.SchemaRuleTest: void enumAsRootIsGeneratedCorrectly()>/$stack23
<org.jsonschema2pojo.rules.SchemaRuleTest: void enumAsRootIsGeneratedCorrectly()>/$stack33
<org.jsonschema2pojo.rules.SchemaRuleTest: void enumAsRootIsGeneratedCorrectly()>/$stack34
<org.jsonschema2pojo.SchemaStoreTest: void setIfEmptyOnlySetsIfEmpty()>/$stack5
<org.jsonschema2pojo.SchemaStoreTest: void setIfEmptyOnlySetsIfEmpty()>/$stack6
<org.jsonschema2pojo.rules.SchemaRuleTest: void existingTypeIsUsedWhenTypeIsAlreadyGenerated()>/$stack8
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesDate()>/$stack17
<org.jsonschema2pojo.rules.RuleFactoryImplTest: void schemaStoreIsReturned()>/$stack3
<org.jsonschema2pojo.rules.PatternRuleTest: void testRegex()>/$stack34
<org.jsonschema2pojo.rules.PatternRuleTest: void testRegex()>/$stack35
<org.jsonschema2pojo.rules.PatternRuleTest: void jsrDisable()>/$stack15
<org.jsonschema2pojo.rules.PatternRuleTest: void jsrDisable()>/$stack16
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack48
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack49
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack59
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack60
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack48
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack49
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack59
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack60
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack72
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack73
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack84
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack85
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testNotUsed()>/$stack35
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testNotUsed()>/$stack36
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void jsrDisable()>/$stack15
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void jsrDisable()>/$stack16
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void jsrDisable()>/$stack27
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void jsrDisable()>/$stack28
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack69
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack70
<org.jsonschema2pojo.rules.DigitsRuleTest: void testNotUsed()>/$stack35
<org.jsonschema2pojo.rules.DigitsRuleTest: void testNotUsed()>/$stack36
<org.jsonschema2pojo.rules.DigitsRuleTest: void jsrDisable()>/$stack15
<org.jsonschema2pojo.rules.DigitsRuleTest: void jsrDisable()>/$stack16
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMinLength()>/$stack49
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMinLength()>/$stack50
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxLength()>/$stack49
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxLength()>/$stack50
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/$stack69
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/$stack70
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack73
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack74
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testNotUsed()>/$stack35
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testNotUsed()>/$stack36
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void jsrDisable()>/$stack15
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void jsrDisable()>/$stack16
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMinLength()>/$stack49
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMinLength()>/$stack50
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxLength()>/$stack49
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxLength()>/$stack50
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/$stack69
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/$stack70
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack73
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack74
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testNotUsed()>/$stack35
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testNotUsed()>/$stack36
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void jsrDisable()>/$stack15
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void jsrDisable()>/$stack16
<org.jsonschema2pojo.SchemaMapperTest: void generateReadsSchemaAsObject()>/$stack6
<org.jsonschema2pojo.SchemaMapperTest: void generateReadsSchemaAsObject()>/$stack23
<org.jsonschema2pojo.SchemaMapperTest: void generateReadsSchemaAsObject()>/$stack24
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromExampleJsonWhenInJsonMode()>/$stack12
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromExampleJsonWhenInJsonMode()>/$stack33
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromExampleJsonWhenInJsonMode()>/$stack34
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromExampleJSONAsStringInput()>/$stack13
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromExampleJSONAsStringInput()>/$stack36
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromExampleJSONAsStringInput()>/$stack37
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromSchemaAsStringInput()>/$stack9
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromSchemaAsStringInput()>/$stack24
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromSchemaAsStringInput()>/$stack25
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesArray()>/$stack14
<org.jsonschema2pojo.rules.EnumRuleTest: void <init>()>/$stack11
<org.jsonschema2pojo.rules.EnumRuleTest: void <init>()>/$stack12
<org.jsonschema2pojo.rules.RuleFactoryImplTest: void generationConfigIsReturned()>/$stack5
<org.jsonschema2pojo.rules.RuleFactoryImplTest: void generationRuleLoggerIsReturned()>/$stack5
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesArray()>/$stack15
<org.jsonschema2pojo.rules.PatternRuleTest: void testRegex()>/$stack40
<org.jsonschema2pojo.rules.PatternRuleTest: void testRegex()>/$stack41
<org.jsonschema2pojo.rules.PatternRuleTest: void jsrDisable()>/$stack20
<org.jsonschema2pojo.rules.PatternRuleTest: void jsrDisable()>/$stack21
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack54
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack55
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack64
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack65
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack54
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack55
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack64
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack65
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack78
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack79
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack90
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack91
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testNotUsed()>/$stack40
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testNotUsed()>/$stack41
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testNotUsed()>/$stack47
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testNotUsed()>/$stack48
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void jsrDisable()>/$stack20
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void jsrDisable()>/$stack21
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void jsrDisable()>/$stack32
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void jsrDisable()>/$stack33
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack75
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack76
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack81
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack82
<org.jsonschema2pojo.rules.DigitsRuleTest: void testNotUsed()>/$stack40
<org.jsonschema2pojo.rules.DigitsRuleTest: void testNotUsed()>/$stack41
<org.jsonschema2pojo.rules.DigitsRuleTest: void jsrDisable()>/$stack20
<org.jsonschema2pojo.rules.DigitsRuleTest: void jsrDisable()>/$stack21
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMinLength()>/$stack55
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMinLength()>/$stack56
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMinLength()>/$stack60
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMinLength()>/$stack61
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxLength()>/$stack55
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxLength()>/$stack56
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxLength()>/$stack60
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxLength()>/$stack61
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/$stack75
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/$stack76
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/$stack81
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/$stack82
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack79
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack80
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack85
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack86
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testNotUsed()>/$stack40
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testNotUsed()>/$stack41
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void jsrDisable()>/$stack20
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void jsrDisable()>/$stack21
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMinLength()>/$stack55
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMinLength()>/$stack56
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMinLength()>/$stack60
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMinLength()>/$stack61
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxLength()>/$stack55
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxLength()>/$stack56
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxLength()>/$stack60
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxLength()>/$stack61
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/$stack75
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/$stack76
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/$stack81
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/$stack82
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack79
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack80
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack85
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack86
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testNotUsed()>/$stack40
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testNotUsed()>/$stack41
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void jsrDisable()>/$stack20
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void jsrDisable()>/$stack21
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesDate()>/$stack18
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesCustomObject()>/$stack15
<org.mockito.Mockito: org.mockito.MockingDetails mockingDetails(java.lang.Object)>/@parameter0
<org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>/@parameter0
<org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>/@parameter0
<org.mockito.Mockito: java.lang.Object verify(java.lang.Object,org.mockito.verification.VerificationMode)>/@parameter0
<org.hamcrest.MatcherAssert: void assertThat(java.lang.String,java.lang.Object,org.hamcrest.Matcher)>/@parameter1
<org.jsonschema2pojo.rules.DigitsRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/@parameter1
<org.jsonschema2pojo.rules.DigitsRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/node#_0
<org.jsonschema2pojo.rules.DigitsRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/@parameter3
<org.jsonschema2pojo.rules.DigitsRule: boolean isApplicableType(com.sun.codemodel.JFieldVar)>/@parameter0
<org.jsonschema2pojo.rules.DigitsRule: boolean isApplicableType(com.sun.codemodel.JFieldVar)>/field#_0
<org.jsonschema2pojo.util.NameHelper: void <init>(org.jsonschema2pojo.GenerationConfig)>/@parameter0
<org.jsonschema2pojo.util.NameHelper: void <init>(org.jsonschema2pojo.GenerationConfig)>/generationConfig#_0
<org.jsonschema2pojo.Schema: void setJavaType(com.sun.codemodel.JType)>/@parameter0
<org.jsonschema2pojo.Schema: void setJavaType(com.sun.codemodel.JType)>/javaType#_0
<org.jsonschema2pojo.Schema: void setJavaTypeIfEmpty(com.sun.codemodel.JType)>/@parameter0
<org.jsonschema2pojo.rules.PatternRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/@parameter1
<org.jsonschema2pojo.rules.PatternRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/node#_0
<org.jsonschema2pojo.rules.PatternRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/@parameter3
<org.jsonschema2pojo.rules.PatternRule: boolean isApplicableType(com.sun.codemodel.JFieldVar)>/@parameter0
<org.jsonschema2pojo.rules.PatternRule: boolean isApplicableType(com.sun.codemodel.JFieldVar)>/field#_0
<org.jsonschema2pojo.rules.RuleFactory: void <init>(org.jsonschema2pojo.GenerationConfig,org.jsonschema2pojo.Annotator,org.jsonschema2pojo.SchemaStore)>/@parameter0
<org.jsonschema2pojo.rules.RuleFactory: void <init>(org.jsonschema2pojo.GenerationConfig,org.jsonschema2pojo.Annotator,org.jsonschema2pojo.SchemaStore)>/@parameter2
<org.jsonschema2pojo.rules.RuleFactory: void <init>(org.jsonschema2pojo.GenerationConfig,org.jsonschema2pojo.Annotator,org.jsonschema2pojo.SchemaStore)>/schemaStore#_0
<org.jsonschema2pojo.rules.RuleFactory: void setGenerationConfig(org.jsonschema2pojo.GenerationConfig)>/@parameter0
<org.jsonschema2pojo.rules.RuleFactory: void setLogger(org.jsonschema2pojo.RuleLogger)>/@parameter0
<org.jsonschema2pojo.rules.RuleFactory: void setLogger(org.jsonschema2pojo.RuleLogger)>/logger#_0
<org.mockito.internal.util.MockUtil: org.mockito.invocation.MockHandler getMockHandler(java.lang.Object)>/@parameter0
<org.mockito.internal.util.MockUtil: org.mockito.internal.stubbing.InvocationContainerImpl getInvocationContainer(java.lang.Object)>/@parameter0
<org.mockito.internal.util.MockUtil: boolean isSpy(java.lang.Object)>/@parameter0
<org.mockito.internal.util.MockUtil: boolean isMock(java.lang.Object)>/@parameter0
<org.mockito.internal.util.MockUtil: org.mockito.mock.MockName getMockName(java.lang.Object)>/@parameter0
<org.mockito.internal.util.MockUtil: org.mockito.mock.MockCreationSettings getMockSettings(java.lang.Object)>/@parameter0
<org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>/@parameter0
<org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>/@parameter0
<org.hamcrest.Matchers: org.hamcrest.Matcher sameInstance(java.lang.Object)>/@parameter0
<org.mockito.internal.exceptions.Reporter: org.mockito.exceptions.base.MockitoException stubPassedToVerify(java.lang.Object)>/@parameter0
<org.jsonschema2pojo.SchemaStore: org.jsonschema2pojo.Schema create(org.jsonschema2pojo.Schema,java.lang.String,java.lang.String)>/@parameter0
<org.jsonschema2pojo.SchemaStore: boolean selfReferenceWithoutParentFile(org.jsonschema2pojo.Schema,java.lang.String)>/@parameter0
<org.jsonschema2pojo.SchemaStore: boolean selfReferenceWithoutParentFile(org.jsonschema2pojo.Schema,java.lang.String)>/parent#_0
<org.mockito.internal.util.DefaultMockingDetails: void <init>(java.lang.Object)>/@parameter0
<org.mockito.internal.util.DefaultMockingDetails: void <init>(java.lang.Object)>/toInspect#_0
<org.jsonschema2pojo.rules.MinLengthMaxLengthRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/@parameter1
<org.jsonschema2pojo.rules.MinLengthMaxLengthRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/node#_0
<org.jsonschema2pojo.rules.MinLengthMaxLengthRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/@parameter3
<org.jsonschema2pojo.rules.MinLengthMaxLengthRule: boolean isApplicableType(com.sun.codemodel.JFieldVar)>/@parameter0
<org.jsonschema2pojo.rules.MinLengthMaxLengthRule: boolean isApplicableType(com.sun.codemodel.JFieldVar)>/field#_0
<org.jsonschema2pojo.rules.MinItemsMaxItemsRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/@parameter1
<org.jsonschema2pojo.rules.MinItemsMaxItemsRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/node#_0
<org.jsonschema2pojo.rules.MinItemsMaxItemsRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/@parameter3
<org.jsonschema2pojo.rules.MinItemsMaxItemsRule: boolean isApplicableType(com.sun.codemodel.JFieldVar)>/@parameter0
<org.jsonschema2pojo.rules.MinItemsMaxItemsRule: boolean isApplicableType(com.sun.codemodel.JFieldVar)>/field#_0
<org.jsonschema2pojo.rules.EnumRule: void <init>(org.jsonschema2pojo.rules.RuleFactory)>/@parameter0
<org.jsonschema2pojo.rules.EnumRule: void <init>(org.jsonschema2pojo.rules.RuleFactory)>/ruleFactory#_0
<org.jsonschema2pojo.rules.EnumRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/@parameter4
<org.jsonschema2pojo.rules.EnumRule: void addEnumConstants(org.jsonschema2pojo.model.EnumDefinition,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/@parameter2
<org.jsonschema2pojo.rules.TypeRule: void <init>(org.jsonschema2pojo.rules.RuleFactory)>/@parameter0
<org.jsonschema2pojo.rules.TypeRule: void <init>(org.jsonschema2pojo.rules.RuleFactory)>/ruleFactory#_0
<org.jsonschema2pojo.rules.TypeRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/@parameter4
<org.jsonschema2pojo.rules.TypeRule: com.sun.codemodel.JType unboxIfNecessary(com.sun.codemodel.JType,org.jsonschema2pojo.GenerationConfig)>/@parameter1
<org.jsonschema2pojo.rules.TypeRule: com.sun.codemodel.JType unboxIfNecessary(com.sun.codemodel.JType,org.jsonschema2pojo.GenerationConfig)>/config#_0
<org.jsonschema2pojo.rules.TypeRule: com.sun.codemodel.JType getIntegerType(com.sun.codemodel.JCodeModel,com.fasterxml.jackson.databind.JsonNode,org.jsonschema2pojo.GenerationConfig)>/@parameter2
<org.jsonschema2pojo.rules.TypeRule: com.sun.codemodel.JType getNumberType(com.sun.codemodel.JCodeModel,org.jsonschema2pojo.GenerationConfig)>/@parameter1
<org.jsonschema2pojo.SchemaMapper: void <init>(org.jsonschema2pojo.rules.RuleFactory,org.jsonschema2pojo.SchemaGenerator)>/@parameter0
<org.jsonschema2pojo.SchemaMapper: void <init>(org.jsonschema2pojo.rules.RuleFactory,org.jsonschema2pojo.SchemaGenerator)>/ruleFactory#_0
<org.jsonschema2pojo.SchemaMapper: void <init>(org.jsonschema2pojo.rules.RuleFactory,org.jsonschema2pojo.SchemaGenerator)>/@parameter1
<org.jsonschema2pojo.SchemaMapper: void <init>(org.jsonschema2pojo.rules.RuleFactory,org.jsonschema2pojo.SchemaGenerator)>/schemaGenerator#_0
<org.jsonschema2pojo.util.LanguageFeatures: boolean canUseJava7(org.jsonschema2pojo.GenerationConfig)>/@parameter0
<org.jsonschema2pojo.util.LanguageFeatures: boolean canUseJava7(org.jsonschema2pojo.GenerationConfig)>/config#_0
<org.jsonschema2pojo.util.LanguageFeatures: boolean canUseJava8(org.jsonschema2pojo.GenerationConfig)>/@parameter0
<org.jsonschema2pojo.util.LanguageFeatures: boolean canUseJava8(org.jsonschema2pojo.GenerationConfig)>/config#_0
<org.jsonschema2pojo.rules.MinimumMaximumRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/@parameter1
<org.jsonschema2pojo.rules.MinimumMaximumRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/node#_0
<org.jsonschema2pojo.rules.MinimumMaximumRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/@parameter3
<org.jsonschema2pojo.rules.MinimumMaximumRule: boolean isApplicableType(com.sun.codemodel.JFieldVar)>/@parameter0
<org.jsonschema2pojo.rules.MinimumMaximumRule: boolean isApplicableType(com.sun.codemodel.JFieldVar)>/field#_0
<org.hamcrest.core.IsEqual: void <init>(java.lang.Object)>/@parameter0
<org.hamcrest.core.IsEqual: void <init>(java.lang.Object)>/equalArg#_0
<org.hamcrest.core.IsEqual: boolean areEqual(java.lang.Object,java.lang.Object)>/@parameter1
<org.hamcrest.core.IsEqual: boolean areArraysEqual(java.lang.Object,java.lang.Object)>/@parameter1
<org.hamcrest.core.IsEqual: boolean areArrayLengthsEqual(java.lang.Object,java.lang.Object)>/@parameter1
<org.hamcrest.core.IsEqual: boolean areArrayElementsEqual(java.lang.Object,java.lang.Object)>/@parameter1
<org.hamcrest.core.IsEqual: boolean isArray(java.lang.Object)>/@parameter0
<org.hamcrest.core.IsEqual: boolean isArray(java.lang.Object)>/o#_0
<org.hamcrest.core.IsEqual: org.hamcrest.Matcher equalTo(java.lang.Object)>/@parameter0
<org.jsonschema2pojo.rules.ArrayRule: com.sun.codemodel.JClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JPackage,org.jsonschema2pojo.Schema)>/@parameter4
<org.jsonschema2pojo.rules.FormatRule: java.util.Map getFormatTypeMapping(org.jsonschema2pojo.GenerationConfig)>/@parameter0
<org.jsonschema2pojo.rules.FormatRule: java.lang.Class getDateTimeType(org.jsonschema2pojo.GenerationConfig)>/@parameter0
<org.jsonschema2pojo.rules.FormatRule: java.lang.Class getDateTimeType(org.jsonschema2pojo.GenerationConfig)>/config#_0
<org.jsonschema2pojo.rules.FormatRule: java.lang.Class getDateType(org.jsonschema2pojo.GenerationConfig)>/@parameter0
<org.jsonschema2pojo.rules.FormatRule: java.lang.Class getDateType(org.jsonschema2pojo.GenerationConfig)>/config#_0
<org.jsonschema2pojo.rules.FormatRule: java.lang.Class getTimeType(org.jsonschema2pojo.GenerationConfig)>/@parameter0
<org.jsonschema2pojo.rules.FormatRule: java.lang.Class getTimeType(org.jsonschema2pojo.GenerationConfig)>/config#_0
<org.junit.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>/@parameter1
<org.junit.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>/@parameter2
<org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>/@parameter0
<org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>/@parameter1
<org.junit.Assert: void failNotSame(java.lang.String,java.lang.Object,java.lang.Object)>/@parameter1
<org.junit.Assert: void failNotSame(java.lang.String,java.lang.Object,java.lang.Object)>/@parameter2
<org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>/@parameter0
<org.junit.Assert: void assertThat(java.lang.String,java.lang.Object,org.hamcrest.Matcher)>/@parameter1
<org.jsonschema2pojo.rules.SchemaRule: void <init>(org.jsonschema2pojo.rules.RuleFactory)>/@parameter0
<org.jsonschema2pojo.rules.SchemaRule: void <init>(org.jsonschema2pojo.rules.RuleFactory)>/ruleFactory#_0
<org.jsonschema2pojo.rules.SchemaRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/@parameter4
<org.mockito.internal.debugging.InvocationsPrinter: java.lang.String printInvocations(java.lang.Object)>/@parameter0
<org.jsonschema2pojo.Jsonschema2Pojo: java.lang.String getNodeName(java.lang.String,org.jsonschema2pojo.GenerationConfig)>/@parameter1
<org.jsonschema2pojo.Jsonschema2Pojo: java.lang.String getNodeName(java.lang.String,org.jsonschema2pojo.GenerationConfig)>/config#_0
<org.mockito.internal.MockitoCore: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>/@parameter0
<org.mockito.internal.MockitoCore: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>/methodCall#_0
<org.mockito.internal.MockitoCore: java.lang.Object verify(java.lang.Object,org.mockito.verification.VerificationMode)>/@parameter0
<org.hamcrest.core.IsSame: void <init>(java.lang.Object)>/@parameter0
<org.hamcrest.core.IsSame: void <init>(java.lang.Object)>/object#_0
<org.hamcrest.core.IsSame: org.hamcrest.Matcher sameInstance(java.lang.Object)>/@parameter0
<org.mockito.internal.MockitoCore: void assertNotStubOnlyMock(java.lang.Object)>/@parameter0
<org.mockito.internal.MockitoCore: org.mockito.MockingDetails mockingDetails(java.lang.Object)>/@parameter0
<org.jsonschema2pojo.rules.PropertyRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/@parameter4
<org.jsonschema2pojo.rules.PropertyRule: boolean hasEnumerated(org.jsonschema2pojo.Schema,java.lang.String,java.lang.String)>/@parameter0
<org.jsonschema2pojo.rules.PropertyRule: boolean hasEnumerated(org.jsonschema2pojo.Schema,java.lang.String,java.lang.String)>/schema#_0
<org.jsonschema2pojo.rules.PropertyRule: boolean isDeclaredAs(java.lang.String,java.lang.String,com.fasterxml.jackson.databind.JsonNode,org.jsonschema2pojo.Schema)>/@parameter3
<org.jsonschema2pojo.rules.PropertyRule: boolean isRequired(java.lang.String,com.fasterxml.jackson.databind.JsonNode,org.jsonschema2pojo.Schema)>/@parameter2
<org.jsonschema2pojo.rules.PropertyRule: boolean useOptional(java.lang.String,com.fasterxml.jackson.databind.JsonNode,org.jsonschema2pojo.Schema)>/@parameter2
<org.jsonschema2pojo.rules.PropertyRule: void propertyAnnotations(java.lang.String,com.fasterxml.jackson.databind.JsonNode,org.jsonschema2pojo.Schema,com.sun.codemodel.JDocCommentable)>/@parameter2
<org.jsonschema2pojo.rules.PropertyRule: com.fasterxml.jackson.databind.JsonNode resolveRefs(com.fasterxml.jackson.databind.JsonNode,org.jsonschema2pojo.Schema)>/@parameter1
<org.hamcrest.core.Is: org.hamcrest.Matcher is(java.lang.Object)>/@parameter0
<org.jsonschema2pojo.SourceSortOrderTest: java.io.File mockFile()>/$stack1
<org.jsonschema2pojo.SourceSortOrderTest: java.io.File mockDirectory()>/$stack1
<org.mockito.BDDMockito$ThenImpl: java.lang.Object should()>/$stack2
<org.mockito.BDDMockito$ThenImpl: java.lang.Object should(org.mockito.verification.VerificationMode)>/$stack3
<org.jsonschema2pojo.rules.ValidRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/$stack7
<org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>/$stack3
<org.mockito.Mockito: java.lang.Object verify(java.lang.Object,org.mockito.verification.VerificationMode)>/$stack3
<org.jsonschema2pojo.rules.DigitsRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/$stack8
<org.jsonschema2pojo.rules.DigitsRule: java.lang.Object apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,java.lang.Object,org.jsonschema2pojo.Schema)>/$stack7
<org.jsonschema2pojo.rules.AdditionalPropertiesRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/$stack9
<org.jsonschema2pojo.rules.AdditionalPropertiesRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/$stack19
<org.jsonschema2pojo.rules.AdditionalPropertiesRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/$stack22
<org.jsonschema2pojo.rules.AdditionalPropertiesRule: com.sun.codemodel.JMethod addBuilder(com.sun.codemodel.JDefinedClass,com.sun.codemodel.JType,com.sun.codemodel.JFieldVar)>/$stack6
<org.jsonschema2pojo.Schema: void setJavaTypeIfEmpty(com.sun.codemodel.JType)>/$stack2
<org.jsonschema2pojo.rules.PatternRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/$stack8
<org.jsonschema2pojo.rules.PatternRule: java.lang.Object apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,java.lang.Object,org.jsonschema2pojo.Schema)>/$stack7
<org.jsonschema2pojo.rules.ConstructorRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/generationConfig#_61
<org.jsonschema2pojo.rules.ConstructorRule: void handleMultiChoiceConstructorConfiguration(com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/generationConfig#_102
<org.jsonschema2pojo.rules.ConstructorRule: void addFieldsConstructor(com.sun.codemodel.JDefinedClass,java.util.Set,java.util.Set)>/generationConfig#_143
<org.jsonschema2pojo.rules.ConstructorRule: void addCopyConstructor(com.sun.codemodel.JDefinedClass,java.util.Set,java.util.Set)>/generationConfig#_158
<org.jsonschema2pojo.rules.ConstructorRule: com.sun.codemodel.JMethod generateFieldsConstructor(com.sun.codemodel.JDefinedClass,java.util.Set,java.util.Set)>/generationConfig#_346
<org.mockito.internal.InOrderImpl: java.lang.Object verify(java.lang.Object)>/$stack3
<org.mockito.internal.InOrderImpl: java.lang.Object verify(java.lang.Object,org.mockito.verification.VerificationMode)>/$stack21
<org.mockito.internal.InOrderImpl: java.lang.Object verify(java.lang.Object,org.mockito.verification.VerificationMode)>/$stack10
<org.jsonschema2pojo.rules.NotRequiredRule: com.sun.codemodel.JDocCommentable apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDocCommentable,org.jsonschema2pojo.Schema)>/$stack12
<org.jsonschema2pojo.rules.MinLengthMaxLengthRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/$stack8
<org.jsonschema2pojo.rules.MinLengthMaxLengthRule: java.lang.Object apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,java.lang.Object,org.jsonschema2pojo.Schema)>/$stack7
<org.jsonschema2pojo.rules.MinItemsMaxItemsRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/$stack8
<org.jsonschema2pojo.rules.MinItemsMaxItemsRule: java.lang.Object apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,java.lang.Object,org.jsonschema2pojo.Schema)>/$stack7
<org.jsonschema2pojo.rules.EnumRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/$stack88
<org.jsonschema2pojo.rules.EnumRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/$stack24
<org.jsonschema2pojo.rules.EnumRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/$stack42
<org.jsonschema2pojo.rules.EnumRule: org.jsonschema2pojo.model.EnumDefinition buildEnumDefinition(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JType)>/logger#_240
<org.jsonschema2pojo.rules.EnumRule: org.jsonschema2pojo.model.EnumDefinition buildEnumDefinitionWithJavaEnumsExtension(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JType)>/$stack37
<org.jsonschema2pojo.rules.RequiredArrayRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/$stack28
<org.jsonschema2pojo.rules.RequiredArrayRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/$stack31
<org.jsonschema2pojo.SchemaMapper: com.fasterxml.jackson.databind.node.ObjectNode readSchema(java.net.URL)>/$stack5
<org.jsonschema2pojo.SchemaMapper: com.fasterxml.jackson.databind.node.ObjectNode readSchema(java.net.URL)>/$stack20
<org.jsonschema2pojo.SchemaMapper: com.sun.codemodel.JType generate(com.sun.codemodel.JCodeModel,java.lang.String,java.lang.String,java.lang.String)>/$stack10
<org.jsonschema2pojo.rules.PropertiesRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/$stack11
<org.jsonschema2pojo.util.ReflectionHelper: org.jsonschema2pojo.Schema getSuperSchema(com.fasterxml.jackson.databind.JsonNode,org.jsonschema2pojo.Schema,boolean)>/$stack17
<org.jsonschema2pojo.util.ReflectionHelper: org.jsonschema2pojo.Schema getSuperSchema(com.fasterxml.jackson.databind.JsonNode,org.jsonschema2pojo.Schema,boolean)>/$stack19
<org.jsonschema2pojo.util.ReflectionHelper: com.sun.codemodel.JDefinedClass definedClassOrNullFromType(com.sun.codemodel.JType)>/$stack19
<org.jsonschema2pojo.util.ReflectionHelper: org.jsonschema2pojo.Schema resolveSchemaRefsRecursive(org.jsonschema2pojo.Schema)>/$stack6
<org.jsonschema2pojo.util.ReflectionHelper: org.jsonschema2pojo.Schema resolveSchemaRefsRecursive(org.jsonschema2pojo.Schema)>/$stack10
<org.jsonschema2pojo.rules.MinimumMaximumRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/$stack8
<org.jsonschema2pojo.rules.MinimumMaximumRule: java.lang.Object apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,java.lang.Object,org.jsonschema2pojo.Schema)>/$stack7
<org.jsonschema2pojo.rules.DynamicPropertiesRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/$stack10
<org.jsonschema2pojo.rules.DynamicPropertiesRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/$stack13
<org.jsonschema2pojo.rules.DynamicPropertiesRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/$stack39
<org.jsonschema2pojo.rules.DynamicPropertiesRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/$stack46
<org.jsonschema2pojo.rules.DynamicPropertiesRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/$stack16
<org.jsonschema2pojo.rules.DynamicPropertiesRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/$stack19
<org.jsonschema2pojo.rules.DynamicPropertiesRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/$stack22
<org.jsonschema2pojo.rules.DefaultRule: com.sun.codemodel.JExpression getDefaultList(com.sun.codemodel.JType,com.fasterxml.jackson.databind.JsonNode)>/$stack18
<org.jsonschema2pojo.rules.DefaultRule: com.sun.codemodel.JExpression getDefaultSet(com.sun.codemodel.JType,com.fasterxml.jackson.databind.JsonNode)>/$stack18
<org.jsonschema2pojo.rules.RequiredRule: com.sun.codemodel.JDocCommentable apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDocCommentable,org.jsonschema2pojo.Schema)>/$stack17
<org.jsonschema2pojo.rules.RequiredRule: com.sun.codemodel.JDocCommentable apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDocCommentable,org.jsonschema2pojo.Schema)>/$stack20
<org.jsonschema2pojo.rules.RequiredRule: com.sun.codemodel.JDocCommentable apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDocCommentable,org.jsonschema2pojo.Schema)>/$stack8
<org.jsonschema2pojo.rules.ObjectRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JPackage,org.jsonschema2pojo.Schema)>/$stack21
<org.jsonschema2pojo.rules.ObjectRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JPackage,org.jsonschema2pojo.Schema)>/$stack87
<org.jsonschema2pojo.rules.ObjectRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JPackage,org.jsonschema2pojo.Schema)>/$stack38
<org.jsonschema2pojo.rules.ObjectRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JPackage,org.jsonschema2pojo.Schema)>/$stack41
<org.jsonschema2pojo.rules.ObjectRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JPackage,org.jsonschema2pojo.Schema)>/$stack44
<org.jsonschema2pojo.rules.ObjectRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JPackage,org.jsonschema2pojo.Schema)>/$stack47
<org.jsonschema2pojo.rules.ObjectRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JPackage,org.jsonschema2pojo.Schema)>/$stack50
<org.jsonschema2pojo.rules.ObjectRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JPackage,org.jsonschema2pojo.Schema)>/$stack53
<org.jsonschema2pojo.rules.ObjectRule: void addParcelSupport(com.sun.codemodel.JDefinedClass)>/$stack10
<org.jsonschema2pojo.rules.ObjectRule: com.sun.codemodel.JDefinedClass createClass(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JPackage)>/$stack41
<org.jsonschema2pojo.rules.ObjectRule: com.sun.codemodel.JDefinedClass createClass(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JPackage)>/$stack47
<org.mockito.BDDMockito$ThenImpl: java.lang.Object should(org.mockito.InOrder)>/$stack3
<org.mockito.BDDMockito$ThenImpl: java.lang.Object should(org.mockito.InOrder,org.mockito.verification.VerificationMode)>/$stack4
<org.jsonschema2pojo.rules.ObjectRule: void addToString(com.sun.codemodel.JDefinedClass)>/$stack18
<org.jsonschema2pojo.rules.ObjectRule: boolean usesPolymorphicDeserialization(com.fasterxml.jackson.databind.JsonNode)>/$stack4
<org.jsonschema2pojo.rules.ObjectRule: boolean usesPolymorphicDeserialization(com.fasterxml.jackson.databind.JsonNode)>/$stack8
<org.jsonschema2pojo.rules.FormatRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JType,org.jsonschema2pojo.Schema)>/$stack13
<org.jsonschema2pojo.rules.SchemaRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/$stack24
<org.jsonschema2pojo.rules.SchemaRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/$stack28
<org.jsonschema2pojo.rules.SchemaRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/$stack40
<org.jsonschema2pojo.rules.SchemaRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/$stack33
<org.jsonschema2pojo.rules.SchemaRule: java.lang.Object apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,java.lang.Object,org.jsonschema2pojo.Schema)>/$stack7
<org.jsonschema2pojo.rules.PropertyRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/$stack20
<org.jsonschema2pojo.rules.PropertyRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/$stack23
<org.jsonschema2pojo.rules.PropertyRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/$stack30
<org.jsonschema2pojo.rules.PropertyRule: com.fasterxml.jackson.databind.JsonNode resolveRefs(com.fasterxml.jackson.databind.JsonNode,org.jsonschema2pojo.Schema)>/$stack7
<org.jsonschema2pojo.rules.PropertyRule: com.fasterxml.jackson.databind.JsonNode resolveRefs(com.fasterxml.jackson.databind.JsonNode,org.jsonschema2pojo.Schema)>/$stack11
<org.jsonschema2pojo.rules.PropertyRule: com.sun.codemodel.JType getReturnType(com.sun.codemodel.JDefinedClass,com.sun.codemodel.JFieldVar,boolean,boolean)>/$stack8
<org.jsonschema2pojo.rules.PropertyRule: com.sun.codemodel.JMethod addGetter(com.sun.codemodel.JDefinedClass,com.sun.codemodel.JFieldVar,java.lang.String,com.fasterxml.jackson.databind.JsonNode,boolean,boolean)>/$stack17
<org.jsonschema2pojo.rules.PropertyRule: com.sun.codemodel.JMethod addBuilderMethod(com.sun.codemodel.JDefinedClass,com.sun.codemodel.JFieldVar,java.lang.String,com.fasterxml.jackson.databind.JsonNode)>/$stack7
<org.mockito.plugins.MockMaker: org.mockito.invocation.MockHandler getHandler(java.lang.Object)>/@parameter0
<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>/@parameter0
<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>/@parameter0
<org.hamcrest.Matcher: boolean matches(java.lang.Object)>/@parameter0
<org.hamcrest.Matcher: void describeMismatch(java.lang.Object,org.hamcrest.Description)>/@parameter0
<org.jsonschema2pojo.rules.Rule: java.lang.Object apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,java.lang.Object,org.jsonschema2pojo.Schema)>/@parameter4
<org.jsonschema2pojo.util.NameHelper: java.lang.String capitalizeTrailingWords(java.lang.String)>/$stack8
<org.jsonschema2pojo.util.NameHelper: java.lang.String getClassName(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>/$stack5
<org.jsonschema2pojo.util.NameHelper: java.lang.String getClassName(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JPackage)>/$stack10
<org.jsonschema2pojo.util.NameHelper: java.lang.String getClassName(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JPackage)>/$stack12
<org.jsonschema2pojo.Schema: com.sun.codemodel.JType getJavaType()>/$stack1
<org.jsonschema2pojo.Schema: boolean isGenerated()>/$stack1
<org.jsonschema2pojo.rules.RuleFactory: org.jsonschema2pojo.GenerationConfig getGenerationConfig()>/$stack1
<org.jsonschema2pojo.rules.RuleFactory: org.jsonschema2pojo.RuleLogger getLogger()>/$stack1
<org.jsonschema2pojo.rules.RuleFactory: org.jsonschema2pojo.SchemaStore getSchemaStore()>/$stack1
<org.jsonschema2pojo.rules.SchemaRuleTest: void refsToOtherSchemasAreLoaded()>/$stack24
<org.jsonschema2pojo.rules.SchemaRuleTest: void refsToOtherSchemasAreLoaded()>/$stack28
<org.jsonschema2pojo.rules.SchemaRuleTest: void refsToOtherSchemasAreLoaded()>/$stack33
<org.jsonschema2pojo.rules.SchemaRuleTest: void enumAsRootIsGeneratedCorrectly()>/$stack24
<org.jsonschema2pojo.rules.SchemaRuleTest: void existingTypeIsUsedWhenTypeIsAlreadyGenerated()>/$stack18
<org.jsonschema2pojo.rules.SchemaRuleTest: void existingTypeIsUsedWhenTypeIsAlreadyGenerated()>/$stack22
<org.mockito.internal.util.DefaultMockingDetails: java.lang.Object getMock()>/$stack1
<org.mockito.internal.util.DefaultMockingDetails: void assertGoodMock()>/$stack1
<org.mockito.internal.util.DefaultMockingDetails: void assertGoodMock()>/$stack6
<org.jsonschema2pojo.rules.FormatRuleArraysTest: void <init>(java.lang.String,java.lang.Class)>/$stack5
<org.jsonschema2pojo.rules.EnumRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/$stack23
<org.jsonschema2pojo.rules.EnumRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/$stack41
<org.jsonschema2pojo.rules.EnumRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/$stack49
<org.jsonschema2pojo.rules.EnumRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/$stack64
<org.jsonschema2pojo.rules.EnumRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/$stack70
<org.jsonschema2pojo.rules.EnumRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/$stack76
<org.jsonschema2pojo.rules.EnumRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/$stack82
<org.jsonschema2pojo.rules.EnumRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/$stack87
<org.jsonschema2pojo.rules.EnumRule: void addEnumConstants(org.jsonschema2pojo.model.EnumDefinition,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/$stack26
<org.jsonschema2pojo.rules.EnumRule: void addEnumConstants(org.jsonschema2pojo.model.EnumDefinition,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/$stack37
<org.jsonschema2pojo.rules.EnumRule: void addEnumConstants(org.jsonschema2pojo.model.EnumDefinition,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema)>/$stack41
<org.jsonschema2pojo.rules.EnumRule: org.jsonschema2pojo.model.EnumDefinition buildEnumDefinition(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JType)>/$stack12
<org.jsonschema2pojo.rules.EnumRule: org.jsonschema2pojo.model.EnumDefinition buildEnumDefinitionWithJavaEnumsExtension(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JType)>/$stack36
<org.jsonschema2pojo.rules.EnumRule: void addFactoryMethod(org.jsonschema2pojo.model.EnumDefinition,com.sun.codemodel.JDefinedClass)>/$stack31
<org.jsonschema2pojo.rules.EnumRule: void addFieldAccessors(com.sun.codemodel.JDefinedClass,com.sun.codemodel.JFieldVar)>/$stack11
<org.jsonschema2pojo.rules.EnumRule: java.lang.String getEnumName(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer)>/$stack9
<org.jsonschema2pojo.rules.EnumRule: java.lang.String getEnumName(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer)>/$stack12
<org.jsonschema2pojo.rules.EnumRule: java.lang.String getEnumName(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer)>/$stack16
<org.jsonschema2pojo.rules.EnumRule: java.lang.String getConstantName(java.lang.String,java.lang.String)>/$stack22
<org.jsonschema2pojo.rules.PatternRuleTest: void testRegex()>/$stack3
<org.jsonschema2pojo.rules.PatternRuleTest: void testRegex()>/$stack9
<org.jsonschema2pojo.rules.PatternRuleTest: void testRegex()>/$stack13
<org.jsonschema2pojo.rules.PatternRuleTest: void testRegex()>/$stack18
<org.jsonschema2pojo.rules.PatternRuleTest: void jsrDisable()>/$stack2
<org.jsonschema2pojo.rules.TypeRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/$stack11
<org.jsonschema2pojo.rules.TypeRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/$stack21
<org.jsonschema2pojo.rules.TypeRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/$stack29
<org.jsonschema2pojo.rules.TypeRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/$stack44
<org.jsonschema2pojo.rules.TypeRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/$stack50
<org.jsonschema2pojo.rules.TypeRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/$stack54
<org.jsonschema2pojo.rules.TypeRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/$stack58
<org.jsonschema2pojo.SchemaMapper: com.sun.codemodel.JType generate(com.sun.codemodel.JCodeModel,java.lang.String,java.lang.String,java.net.URL)>/$stack9
<org.jsonschema2pojo.SchemaMapper: com.fasterxml.jackson.databind.node.ObjectNode readSchema(java.net.URL)>/$stack3
<org.jsonschema2pojo.SchemaMapper: com.fasterxml.jackson.databind.node.ObjectNode readSchema(java.net.URL)>/$stack19
<org.jsonschema2pojo.SchemaMapper: com.fasterxml.jackson.databind.node.ObjectNode readSchema(java.net.URL)>/$stack9
<org.jsonschema2pojo.SchemaMapper: com.sun.codemodel.JType generate(com.sun.codemodel.JCodeModel,java.lang.String,java.lang.String,java.lang.String,java.net.URI)>/$stack11
<org.jsonschema2pojo.SchemaMapper: com.sun.codemodel.JType generate(com.sun.codemodel.JCodeModel,java.lang.String,java.lang.String,java.lang.String)>/$stack9
<org.jsonschema2pojo.SchemaMapper: com.sun.codemodel.JType generate(com.sun.codemodel.JCodeModel,java.lang.String,java.lang.String,java.lang.String)>/$stack15
<org.jsonschema2pojo.SchemaMapper: com.sun.codemodel.JType generate(com.sun.codemodel.JCodeModel,java.lang.String,java.lang.String,java.lang.String)>/$stack23
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack3
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack16
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack26
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack12
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack21
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack32
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack3
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack16
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack26
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack12
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack21
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack32
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack5
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack25
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack30
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack44
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack50
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack18
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack34
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack39
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack56
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testNotUsed()>/$stack2
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testNotUsed()>/$stack8
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testNotUsed()>/$stack14
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testNotUsed()>/$stack20
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void jsrDisable()>/$stack2
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack4
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack26
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack31
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack41
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack47
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack14
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack20
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack36
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack53
<org.jsonschema2pojo.rules.DigitsRuleTest: void testNotUsed()>/$stack2
<org.jsonschema2pojo.rules.DigitsRuleTest: void testNotUsed()>/$stack8
<org.jsonschema2pojo.rules.DigitsRuleTest: void testNotUsed()>/$stack14
<org.jsonschema2pojo.rules.DigitsRuleTest: void testNotUsed()>/$stack20
<org.jsonschema2pojo.rules.DigitsRuleTest: void jsrDisable()>/$stack2
<org.jsonschema2pojo.rules.EnumRuleTest: void wireUpConfig()>/$stack1
<org.jsonschema2pojo.rules.EnumRuleTest: void wireUpConfig()>/$stack6
<org.jsonschema2pojo.rules.EnumRuleTest: void wireUpConfig()>/$stack11
<org.jsonschema2pojo.rules.EnumRuleTest: void wireUpConfig()>/$stack16
<org.jsonschema2pojo.rules.EnumRuleTest: void applyGeneratesUniqueEnumNamesForMultipleEnumNodesWithSameName()>/$stack9
<org.jsonschema2pojo.rules.EnumRuleTest: void applyGeneratesUniqueEnumNamesForMultipleEnumNodesWithSameName()>/$stack16
<org.jsonschema2pojo.rules.EnumRuleTest: void applyGeneratesUniqueEnumNamesForMultipleEnumNodesWithSameName()>/$stack21
<org.jsonschema2pojo.rules.EnumRuleTest: void applyGeneratesUniqueEnumNamesForMultipleEnumNodesWithSameName()>/$stack39
<org.jsonschema2pojo.rules.PropertyRuleTest: void setup()>/$stack2
<org.jsonschema2pojo.rules.PropertyRuleTest: void setup()>/$stack8
<org.jsonschema2pojo.rules.ArrayRuleTest: void arrayWithNonUniqueItemsProducesList()>/$stack30
<org.jsonschema2pojo.rules.ArrayRuleTest: void arrayOfPrimitivesProducesCollectionOfWrapperTypes()>/$stack30
<org.jsonschema2pojo.rules.ArrayRuleTest: void arrayOfPrimitivesProducesCollectionOfWrapperTypes()>/$stack36
<org.jsonschema2pojo.rules.FormatRulePrimitivesTest: void <init>(java.lang.Class,java.lang.Class)>/$stack5
<org.jsonschema2pojo.rules.FormatRulePrimitivesTest: void <init>(java.lang.Class,java.lang.Class)>/$stack11
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMinLength()>/$stack3
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMinLength()>/$stack17
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMinLength()>/$stack27
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMinLength()>/$stack11
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMinLength()>/$stack22
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMinLength()>/$stack33
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxLength()>/$stack3
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxLength()>/$stack17
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxLength()>/$stack27
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxLength()>/$stack11
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxLength()>/$stack22
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxLength()>/$stack33
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/$stack5
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/$stack27
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/$stack32
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/$stack41
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/$stack47
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/$stack16
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/$stack36
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/$stack53
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack5
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack27
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack32
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack41
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack47
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack16
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack36
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack53
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testNotUsed()>/$stack2
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testNotUsed()>/$stack8
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testNotUsed()>/$stack14
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testNotUsed()>/$stack20
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void jsrDisable()>/$stack2
<org.jsonschema2pojo.rules.TypeRuleTest: void wireUpConfig()>/$stack1
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesDate()>/$stack32
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesIntegerPrimitive()>/$stack12
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesIntegerUsingJavaTypeIntegerPrimitive()>/$stack13
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesBigInteger()>/$stack12
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesBigIntegerOverridingLong()>/$stack12
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesBigIntegerOverridingLong()>/$stack18
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesBigDecimal()>/$stack12
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesBigDecimalOverridingDouble()>/$stack12
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesBigDecimalOverridingDouble()>/$stack18
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesIntegerUsingJavaTypeInteger()>/$stack13
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesIntegerUsingJavaTypeLongPrimitive()>/$stack13
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesIntegerUsingJavaTypeLong()>/$stack13
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesIntegerUsingJavaTypeLongPrimitiveWhenMaximumGreaterThanIntegerMax()>/$stack13
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesIntegerUsingJavaTypeLongWhenMaximumGreaterThanIntegerMax()>/$stack13
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesIntegerUsingJavaTypeLongPrimitiveWhenMaximumLessThanIntegerMin()>/$stack13
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesIntegerUsingJavaTypeLongWhenMaximumLessThanIntegerMin()>/$stack13
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesIntegerUsingJavaTypeLongPrimitiveWhenMinimumLessThanIntegerMin()>/$stack13
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesIntegerUsingJavaTypeLongWhenMinimumLessThanIntegerMin()>/$stack13
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesIntegerUsingJavaTypeLongPrimitiveWhenMinimumGreaterThanIntegerMax()>/$stack13
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesIntegerUsingJavaTypeLongWhenMinimumGreaterThanIntegerMax()>/$stack13
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesNumber()>/$stack12
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesNumberPrimitive()>/$stack12
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesNumberPrimitive()>/$stack18
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesNumberUsingJavaTypeFloatPrimitive()>/$stack13
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesNumberUsingJavaTypeFloat()>/$stack13
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesNumberUsingJavaTypeDoublePrimitive()>/$stack13
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesNumberUsingJavaTypeDouble()>/$stack13
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesBooleanPrimitive()>/$stack12
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesArray()>/$stack19
<org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesCustomObject()>/$stack19
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMinLength()>/$stack3
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMinLength()>/$stack17
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMinLength()>/$stack27
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMinLength()>/$stack11
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMinLength()>/$stack22
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMinLength()>/$stack33
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxLength()>/$stack3
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxLength()>/$stack17
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxLength()>/$stack27
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxLength()>/$stack11
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxLength()>/$stack22
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxLength()>/$stack33
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/$stack5
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/$stack27
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/$stack32
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/$stack41
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/$stack47
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/$stack16
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/$stack36
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/$stack53
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack5
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack27
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack32
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack41
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack47
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack16
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack36
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack53
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testNotUsed()>/$stack2
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testNotUsed()>/$stack8
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testNotUsed()>/$stack14
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testNotUsed()>/$stack20
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void jsrDisable()>/$stack2
<org.jsonschema2pojo.rules.SchemaRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/$stack10
<org.jsonschema2pojo.rules.SchemaRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/$stack14
<org.jsonschema2pojo.rules.SchemaRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/$stack23
<org.jsonschema2pojo.rules.SchemaRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/$stack27
<org.jsonschema2pojo.rules.SchemaRule: java.lang.String nameFromRef(java.lang.String)>/$stack11
<org.jsonschema2pojo.rules.FormatRuleJodaTest: void setupConfig()>/$stack1
<org.jsonschema2pojo.rules.FormatRuleJodaTest: void setupConfig()>/$stack7
<org.jsonschema2pojo.rules.FormatRuleJodaTest: void setupConfig()>/$stack13
<org.hamcrest.core.IsSame: boolean matches(java.lang.Object)>/$stack2
