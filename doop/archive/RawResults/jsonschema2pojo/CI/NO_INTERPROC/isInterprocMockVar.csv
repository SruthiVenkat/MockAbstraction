<org.jsonschema2pojo.util.LanguageFeaturesTest: void correctTestForJava7()>/$stack2
<org.jsonschema2pojo.util.LanguageFeaturesTest: void correctTestForJava8()>/$stack2
<org.jsonschema2pojo.rules.PropertyRuleTest: com.sun.codemodel.JDefinedClass applyRule(com.fasterxml.jackson.databind.node.ObjectNode,com.fasterxml.jackson.databind.node.ObjectNode)>/$stack9
<org.jsonschema2pojo.rules.SchemaRuleTest: void refsToOtherSchemasAreLoaded()>/$stack41
<org.jsonschema2pojo.rules.SchemaRuleTest: void enumAsRootIsGeneratedCorrectly()>/$stack37
<org.jsonschema2pojo.rules.SchemaRuleTest: void enumAsRootIsGeneratedCorrectly()>/$stack33
<org.jsonschema2pojo.SchemaMapperTest: void generateReadsSchemaAsObject()>/$stack23
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromExampleJsonWhenInJsonMode()>/$stack33
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromExampleJSONAsStringInput()>/$stack36
<org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromSchemaAsStringInput()>/$stack24
<org.jsonschema2pojo.SourceSortOrderTest: void filesBeforeDirectories_FILES_FIRST()>/$stack17
<org.jsonschema2pojo.SourceSortOrderTest: void filesBeforeDirectories_FILES_FIRST()>/$stack23
<org.jsonschema2pojo.SourceSortOrderTest: void filesBeforeDirectories_SUBDIRS_FIRST()>/$stack17
<org.jsonschema2pojo.SourceSortOrderTest: void filesBeforeDirectories_SUBDIRS_FIRST()>/$stack23
<org.jsonschema2pojo.rules.PatternRuleTest: void testRegex()>/$stack34
<org.jsonschema2pojo.rules.PatternRuleTest: void testRegex()>/$stack40
<org.jsonschema2pojo.rules.PatternRuleTest: void jsrDisable()>/$stack15
<org.jsonschema2pojo.rules.PatternRuleTest: void jsrDisable()>/$stack20
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack48
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack59
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack54
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum()>/$stack64
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack48
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack59
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack54
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum()>/$stack64
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack72
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack84
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack78
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum()>/$stack90
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testNotUsed()>/$stack35
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testNotUsed()>/$stack40
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testNotUsed()>/$stack47
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void jsrDisable()>/$stack15
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void jsrDisable()>/$stack27
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void jsrDisable()>/$stack20
<org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void jsrDisable()>/$stack32
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack69
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack75
<org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits()>/$stack81
<org.jsonschema2pojo.rules.DigitsRuleTest: void testNotUsed()>/$stack35
<org.jsonschema2pojo.rules.DigitsRuleTest: void testNotUsed()>/$stack40
<org.jsonschema2pojo.rules.DigitsRuleTest: void jsrDisable()>/$stack15
<org.jsonschema2pojo.rules.DigitsRuleTest: void jsrDisable()>/$stack20
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMinLength()>/$stack49
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMinLength()>/$stack55
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMinLength()>/$stack60
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxLength()>/$stack49
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxLength()>/$stack55
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxLength()>/$stack60
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/$stack69
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/$stack75
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength()>/$stack81
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack73
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack79
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack85
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testNotUsed()>/$stack35
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testNotUsed()>/$stack40
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void jsrDisable()>/$stack15
<org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void jsrDisable()>/$stack20
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMinLength()>/$stack49
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMinLength()>/$stack55
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMinLength()>/$stack60
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxLength()>/$stack49
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxLength()>/$stack55
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxLength()>/$stack60
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/$stack69
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/$stack75
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength()>/$stack81
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack73
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack79
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType()>/$stack85
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testNotUsed()>/$stack35
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testNotUsed()>/$stack40
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void jsrDisable()>/$stack15
<org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void jsrDisable()>/$stack20
<org.jsonschema2pojo.SourceSortOrderTest: void testTwoFilesAreCompared(java.util.Comparator)>/$stack8
<org.jsonschema2pojo.SourceSortOrderTest: void testTwoDirectoriesAreCompared(java.util.Comparator)>/$stack8
<org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>/@parameter0
<org.mockito.Mockito: java.lang.Object verify(java.lang.Object,org.mockito.verification.VerificationMode)>/@parameter0
<org.jsonschema2pojo.rules.DigitsRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/@parameter1
<org.jsonschema2pojo.rules.DigitsRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/@parameter3
<org.jsonschema2pojo.util.NameHelper: void <init>(org.jsonschema2pojo.GenerationConfig)>/@parameter0
<org.jsonschema2pojo.Schema: void setJavaType(com.sun.codemodel.JType)>/@parameter0
<org.jsonschema2pojo.Schema: void setJavaTypeIfEmpty(com.sun.codemodel.JType)>/@parameter0
<org.jsonschema2pojo.rules.PatternRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/@parameter1
<org.jsonschema2pojo.rules.PatternRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/@parameter3
<org.jsonschema2pojo.rules.RuleFactory: void <init>(org.jsonschema2pojo.GenerationConfig,org.jsonschema2pojo.Annotator,org.jsonschema2pojo.SchemaStore)>/@parameter0
<org.jsonschema2pojo.rules.RuleFactory: void <init>(org.jsonschema2pojo.GenerationConfig,org.jsonschema2pojo.Annotator,org.jsonschema2pojo.SchemaStore)>/@parameter2
<org.jsonschema2pojo.rules.RuleFactory: void setGenerationConfig(org.jsonschema2pojo.GenerationConfig)>/@parameter0
<org.jsonschema2pojo.rules.RuleFactory: void setLogger(org.jsonschema2pojo.RuleLogger)>/@parameter0
<org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>/@parameter0
<org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>/@parameter0
<org.hamcrest.Matchers: org.hamcrest.Matcher sameInstance(java.lang.Object)>/@parameter0
<org.jsonschema2pojo.rules.MinLengthMaxLengthRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/@parameter1
<org.jsonschema2pojo.rules.MinLengthMaxLengthRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/@parameter3
<org.jsonschema2pojo.rules.MinItemsMaxItemsRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/@parameter1
<org.jsonschema2pojo.rules.MinItemsMaxItemsRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/@parameter3
<org.jsonschema2pojo.rules.EnumRule: void <init>(org.jsonschema2pojo.rules.RuleFactory)>/@parameter0
<org.jsonschema2pojo.rules.EnumRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/@parameter4
<org.jsonschema2pojo.rules.TypeRule: void <init>(org.jsonschema2pojo.rules.RuleFactory)>/@parameter0
<org.jsonschema2pojo.SchemaMapper: void <init>(org.jsonschema2pojo.rules.RuleFactory,org.jsonschema2pojo.SchemaGenerator)>/@parameter0
<org.jsonschema2pojo.SchemaMapper: void <init>(org.jsonschema2pojo.rules.RuleFactory,org.jsonschema2pojo.SchemaGenerator)>/@parameter1
<org.jsonschema2pojo.rules.MinimumMaximumRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/@parameter1
<org.jsonschema2pojo.rules.MinimumMaximumRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema)>/@parameter3
<org.jsonschema2pojo.rules.ArrayRule: com.sun.codemodel.JClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JPackage,org.jsonschema2pojo.Schema)>/@parameter4
<org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>/@parameter0
<org.jsonschema2pojo.rules.SchemaRule: void <init>(org.jsonschema2pojo.rules.RuleFactory)>/@parameter0
<org.jsonschema2pojo.rules.SchemaRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema)>/@parameter4
<org.jsonschema2pojo.SourceSortOrderTest: java.io.File mockFile()>/$stack1
<org.jsonschema2pojo.SourceSortOrderTest: java.io.File mockDirectory()>/$stack1
