org.jsonschema2pojo.Jsonschema2Pojo: java.lang.String getNodeName(java.lang.String,org.jsonschema2pojo.GenerationConfig) 2
org.jsonschema2pojo.SchemaMapper: com.fasterxml.jackson.databind.node.ObjectNode readSchema(java.net.URL) 5
org.jsonschema2pojo.SchemaMapper: com.sun.codemodel.JType generate(com.sun.codemodel.JCodeModel,java.lang.String,java.lang.String,java.lang.String) 4
org.jsonschema2pojo.SchemaMapper: com.sun.codemodel.JType generate(com.sun.codemodel.JCodeModel,java.lang.String,java.lang.String,java.lang.String,java.net.URI) 1
org.jsonschema2pojo.SchemaMapper: com.sun.codemodel.JType generate(com.sun.codemodel.JCodeModel,java.lang.String,java.lang.String,java.net.URL) 1
org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromExampleJSONAsStringInput() 5
org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromExampleJsonWhenInJsonMode() 5
org.jsonschema2pojo.SchemaMapperTest: void generateCreatesSchemaFromSchemaAsStringInput() 3
org.jsonschema2pojo.SchemaMapperTest: void generateReadsSchemaAsObject() 3
org.jsonschema2pojo.SchemaStore: boolean selfReferenceWithoutParentFile(org.jsonschema2pojo.Schema,java.lang.String) 2
org.jsonschema2pojo.SchemaStore: org.jsonschema2pojo.Schema create(org.jsonschema2pojo.Schema,java.lang.String,java.lang.String) 4
org.jsonschema2pojo.SourceSortOrderTest: java.io.File mockFile(boolean) 1
org.jsonschema2pojo.SourceSortOrderTest: void filesBeforeDirectories_FILES_FIRST() 2
org.jsonschema2pojo.SourceSortOrderTest: void filesBeforeDirectories_SUBDIRS_FIRST() 2
org.jsonschema2pojo.SourceSortOrderTest: void testTwoDirectoriesAreCompared(java.util.Comparator) 1
org.jsonschema2pojo.SourceSortOrderTest: void testTwoFilesAreCompared(java.util.Comparator) 1
org.jsonschema2pojo.rules.AdditionalPropertiesRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema) 3
org.jsonschema2pojo.rules.AdditionalPropertiesRule: com.sun.codemodel.JMethod addBuilder(com.sun.codemodel.JDefinedClass,com.sun.codemodel.JType,com.sun.codemodel.JFieldVar) 1
org.jsonschema2pojo.rules.ArrayRule: com.sun.codemodel.JClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JPackage,org.jsonschema2pojo.Schema) 2
org.jsonschema2pojo.rules.ArrayRuleTest: void arrayDefaultsToNonUnique() 2
org.jsonschema2pojo.rules.ArrayRuleTest: void arrayOfPrimitivesProducesCollectionOfWrapperTypes() 4
org.jsonschema2pojo.rules.ArrayRuleTest: void arrayWithNonUniqueItemsProducesList() 3
org.jsonschema2pojo.rules.ArrayRuleTest: void arrayWithUniqueItemsProducesSet() 1
org.jsonschema2pojo.rules.ConstructorRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema) 1
org.jsonschema2pojo.rules.ConstructorRule: com.sun.codemodel.JMethod generateFieldsConstructor(com.sun.codemodel.JDefinedClass,java.util.Set,java.util.Set) 3
org.jsonschema2pojo.rules.ConstructorRule: void addCopyConstructor(com.sun.codemodel.JDefinedClass,java.util.Set,java.util.Set) 2
org.jsonschema2pojo.rules.ConstructorRule: void addFieldsConstructor(com.sun.codemodel.JDefinedClass,java.util.Set,java.util.Set) 2
org.jsonschema2pojo.rules.ConstructorRule: void handleMultiChoiceConstructorConfiguration(com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema) 3
org.jsonschema2pojo.rules.DefaultRule: com.sun.codemodel.JExpression getDefaultList(com.sun.codemodel.JType,com.fasterxml.jackson.databind.JsonNode) 1
org.jsonschema2pojo.rules.DefaultRule: com.sun.codemodel.JExpression getDefaultSet(com.sun.codemodel.JType,com.fasterxml.jackson.databind.JsonNode) 1
org.jsonschema2pojo.rules.DigitsRule: boolean isApplicableType(com.sun.codemodel.JFieldVar) 1
org.jsonschema2pojo.rules.DigitsRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema) 6
org.jsonschema2pojo.rules.DigitsRuleTest: void jsrDisable() 3
org.jsonschema2pojo.rules.DigitsRuleTest: void testHasIntegerAndFractionalDigits() 12
org.jsonschema2pojo.rules.DigitsRuleTest: void testNotUsed() 6
org.jsonschema2pojo.rules.DynamicPropertiesRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema) 7
org.jsonschema2pojo.rules.EnumRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema) 12
org.jsonschema2pojo.rules.EnumRule: java.lang.String getConstantName(java.lang.String,java.lang.String) 1
org.jsonschema2pojo.rules.EnumRule: java.lang.String getEnumName(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer) 3
org.jsonschema2pojo.rules.EnumRule: org.jsonschema2pojo.model.EnumDefinition buildEnumDefinition(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JType) 3
org.jsonschema2pojo.rules.EnumRule: org.jsonschema2pojo.model.EnumDefinition buildEnumDefinitionWithJavaEnumsExtension(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JType) 2
org.jsonschema2pojo.rules.EnumRule: void addEnumConstants(org.jsonschema2pojo.model.EnumDefinition,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema) 3
org.jsonschema2pojo.rules.EnumRule: void addFactoryMethod(org.jsonschema2pojo.model.EnumDefinition,com.sun.codemodel.JDefinedClass) 1
org.jsonschema2pojo.rules.EnumRule: void addFieldAccessors(com.sun.codemodel.JDefinedClass,com.sun.codemodel.JFieldVar) 1
org.jsonschema2pojo.rules.EnumRuleTest: void applyGeneratesUniqueEnumNamesForMultipleEnumNodesWithSameName() 4
org.jsonschema2pojo.rules.EnumRuleTest: void wireUpConfig() 4
org.jsonschema2pojo.rules.FormatRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JType,org.jsonschema2pojo.Schema) 1
org.jsonschema2pojo.rules.FormatRule: java.lang.Class getDateTimeType(org.jsonschema2pojo.GenerationConfig) 2
org.jsonschema2pojo.rules.FormatRule: java.lang.Class getDateType(org.jsonschema2pojo.GenerationConfig) 2
org.jsonschema2pojo.rules.FormatRule: java.lang.Class getTimeType(org.jsonschema2pojo.GenerationConfig) 2
org.jsonschema2pojo.rules.FormatRule: java.util.Map getFormatTypeMapping(org.jsonschema2pojo.GenerationConfig) 1
org.jsonschema2pojo.rules.FormatRuleArraysTest: void <init>(java.lang.String,java.lang.Class) 1
org.jsonschema2pojo.rules.FormatRuleJodaTest: void setupConfig() 3
org.jsonschema2pojo.rules.FormatRulePrimitivesTest: void <init>(java.lang.Class,java.lang.Class) 2
org.jsonschema2pojo.rules.MinItemsMaxItemsRule: boolean isApplicableType(com.sun.codemodel.JFieldVar) 2
org.jsonschema2pojo.rules.MinItemsMaxItemsRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema) 8
org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void jsrDisable() 3
org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLength() 12
org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxAndMinLengthGenericsOnType() 12
org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMaxLength() 9
org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testMinLength() 9
org.jsonschema2pojo.rules.MinItemsMaxItemsRuleTest: void testNotUsed() 6
org.jsonschema2pojo.rules.MinLengthMaxLengthRule: boolean isApplicableType(com.sun.codemodel.JFieldVar) 2
org.jsonschema2pojo.rules.MinLengthMaxLengthRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema) 8
org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void jsrDisable() 3
org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLength() 12
org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxAndMinLengthGenericsOnType() 12
org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMaxLength() 9
org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testMinLength() 9
org.jsonschema2pojo.rules.MinLengthMaxLengthRuleTest: void testNotUsed() 6
org.jsonschema2pojo.rules.MinimumMaximumRule: boolean isApplicableType(com.sun.codemodel.JFieldVar) 1
org.jsonschema2pojo.rules.MinimumMaximumRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema) 7
org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void jsrDisable() 5
org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximum() 10
org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMaximumAndMinimum() 14
org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testMinimum() 10
org.jsonschema2pojo.rules.MinimumMaximumRuleTest: void testNotUsed() 7
org.jsonschema2pojo.rules.NotRequiredRule: com.sun.codemodel.JDocCommentable apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDocCommentable,org.jsonschema2pojo.Schema) 1
org.jsonschema2pojo.rules.ObjectRule: boolean usesPolymorphicDeserialization(com.fasterxml.jackson.databind.JsonNode) 2
org.jsonschema2pojo.rules.ObjectRule: com.sun.codemodel.JDefinedClass createClass(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JPackage) 2
org.jsonschema2pojo.rules.ObjectRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JPackage,org.jsonschema2pojo.Schema) 8
org.jsonschema2pojo.rules.ObjectRule: void addParcelSupport(com.sun.codemodel.JDefinedClass) 1
org.jsonschema2pojo.rules.ObjectRule: void addToString(com.sun.codemodel.JDefinedClass) 1
org.jsonschema2pojo.rules.PatternRule: boolean isApplicableType(com.sun.codemodel.JFieldVar) 1
org.jsonschema2pojo.rules.PatternRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema) 3
org.jsonschema2pojo.rules.PatternRuleTest: void jsrDisable() 3
org.jsonschema2pojo.rules.PatternRuleTest: void testRegex() 6
org.jsonschema2pojo.rules.PropertiesRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema) 1
org.jsonschema2pojo.rules.PropertyRule: boolean hasEnumerated(org.jsonschema2pojo.Schema,java.lang.String,java.lang.String) 1
org.jsonschema2pojo.rules.PropertyRule: com.fasterxml.jackson.databind.JsonNode resolveRefs(com.fasterxml.jackson.databind.JsonNode,org.jsonschema2pojo.Schema) 2
org.jsonschema2pojo.rules.PropertyRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema) 3
org.jsonschema2pojo.rules.PropertyRule: com.sun.codemodel.JMethod addBuilderMethod(com.sun.codemodel.JDefinedClass,com.sun.codemodel.JFieldVar,java.lang.String,com.fasterxml.jackson.databind.JsonNode) 1
org.jsonschema2pojo.rules.PropertyRule: com.sun.codemodel.JMethod addGetter(com.sun.codemodel.JDefinedClass,com.sun.codemodel.JFieldVar,java.lang.String,com.fasterxml.jackson.databind.JsonNode,boolean,boolean) 1
org.jsonschema2pojo.rules.PropertyRule: com.sun.codemodel.JType getReturnType(com.sun.codemodel.JDefinedClass,com.sun.codemodel.JFieldVar,boolean,boolean) 1
org.jsonschema2pojo.rules.PropertyRuleTest: org.jsonschema2pojo.Schema getMockedSchema(com.fasterxml.jackson.databind.node.ObjectNode) 2
org.jsonschema2pojo.rules.PropertyRuleTest: void setup() 2
org.jsonschema2pojo.rules.RequiredArrayRule: com.sun.codemodel.JDefinedClass apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDefinedClass,org.jsonschema2pojo.Schema) 2
org.jsonschema2pojo.rules.RequiredArrayRuleTest: void setupRuleFactoryToIncludeJsr303() 2
org.jsonschema2pojo.rules.RequiredRule: com.sun.codemodel.JDocCommentable apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JDocCommentable,org.jsonschema2pojo.Schema) 3
org.jsonschema2pojo.rules.SchemaRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema) 7
org.jsonschema2pojo.rules.SchemaRule: java.lang.String nameFromRef(java.lang.String) 1
org.jsonschema2pojo.rules.SchemaRuleTest: void enumAsRootIsGeneratedCorrectly() 7
org.jsonschema2pojo.rules.SchemaRuleTest: void existingTypeIsUsedWhenTypeIsAlreadyGenerated() 3
org.jsonschema2pojo.rules.SchemaRuleTest: void refsToOtherSchemasAreLoaded() 5
org.jsonschema2pojo.rules.TypeRule: com.sun.codemodel.JType apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JClassContainer,org.jsonschema2pojo.Schema) 7
org.jsonschema2pojo.rules.TypeRule: com.sun.codemodel.JType getIntegerType(com.sun.codemodel.JCodeModel,com.fasterxml.jackson.databind.JsonNode,org.jsonschema2pojo.GenerationConfig) 2
org.jsonschema2pojo.rules.TypeRule: com.sun.codemodel.JType getNumberType(com.sun.codemodel.JCodeModel,org.jsonschema2pojo.GenerationConfig) 2
org.jsonschema2pojo.rules.TypeRule: com.sun.codemodel.JType unboxIfNecessary(com.sun.codemodel.JType,org.jsonschema2pojo.GenerationConfig) 1
org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesArray() 2
org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesBigDecimal() 1
org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesBigDecimalOverridingDouble() 2
org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesBigInteger() 1
org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesBigIntegerOverridingLong() 2
org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesBooleanPrimitive() 1
org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesCustomObject() 2
org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesDate() 2
org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesIntegerPrimitive() 1
org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesIntegerUsingJavaTypeInteger() 1
org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesIntegerUsingJavaTypeIntegerPrimitive() 1
org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesIntegerUsingJavaTypeLong() 1
org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesIntegerUsingJavaTypeLongPrimitive() 1
org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesIntegerUsingJavaTypeLongPrimitiveWhenMaximumGreaterThanIntegerMax() 1
org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesIntegerUsingJavaTypeLongPrimitiveWhenMaximumLessThanIntegerMin() 1
org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesIntegerUsingJavaTypeLongPrimitiveWhenMinimumGreaterThanIntegerMax() 1
org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesIntegerUsingJavaTypeLongPrimitiveWhenMinimumLessThanIntegerMin() 1
org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesIntegerUsingJavaTypeLongWhenMaximumGreaterThanIntegerMax() 1
org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesIntegerUsingJavaTypeLongWhenMaximumLessThanIntegerMin() 1
org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesIntegerUsingJavaTypeLongWhenMinimumGreaterThanIntegerMax() 1
org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesIntegerUsingJavaTypeLongWhenMinimumLessThanIntegerMin() 1
org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesNumber() 1
org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesNumberPrimitive() 2
org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesNumberUsingJavaTypeDouble() 1
org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesNumberUsingJavaTypeDoublePrimitive() 1
org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesNumberUsingJavaTypeFloat() 1
org.jsonschema2pojo.rules.TypeRuleTest: void applyGeneratesNumberUsingJavaTypeFloatPrimitive() 1
org.jsonschema2pojo.rules.TypeRuleTest: void wireUpConfig() 1
org.jsonschema2pojo.rules.ValidRule: com.sun.codemodel.JFieldVar apply(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JFieldVar,org.jsonschema2pojo.Schema) 1
org.jsonschema2pojo.util.LanguageFeatures: boolean canUseJava7(org.jsonschema2pojo.GenerationConfig) 1
org.jsonschema2pojo.util.LanguageFeatures: boolean canUseJava8(org.jsonschema2pojo.GenerationConfig) 1
org.jsonschema2pojo.util.LanguageFeaturesTest: org.jsonschema2pojo.GenerationConfig mockConfig(java.lang.String) 1
org.jsonschema2pojo.util.NameHelper: java.lang.String capitalizeTrailingWords(java.lang.String) 1
org.jsonschema2pojo.util.NameHelper: java.lang.String getClassName(java.lang.String,com.fasterxml.jackson.databind.JsonNode) 1
org.jsonschema2pojo.util.NameHelper: java.lang.String getClassName(java.lang.String,com.fasterxml.jackson.databind.JsonNode,com.sun.codemodel.JPackage) 2
org.jsonschema2pojo.util.NameHelperTest: org.jsonschema2pojo.util.NameHelper helper(boolean) 1
org.jsonschema2pojo.util.ReflectionHelper: com.sun.codemodel.JDefinedClass definedClassOrNullFromType(com.sun.codemodel.JType) 1
org.jsonschema2pojo.util.ReflectionHelper: org.jsonschema2pojo.Schema getSuperSchema(com.fasterxml.jackson.databind.JsonNode,org.jsonschema2pojo.Schema,boolean) 2
org.jsonschema2pojo.util.ReflectionHelper: org.jsonschema2pojo.Schema resolveSchemaRefsRecursive(org.jsonschema2pojo.Schema) 2
