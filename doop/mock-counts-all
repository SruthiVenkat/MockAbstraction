bootique-basic-only-NO_INTERPROC
Total number of mock counts in bootique-results/basic-only-counts-NO_INTERPROC is 99 
commons-collections-basic-only-NO_INTERPROC
Total number of mock counts in commons-collection4-results/basic-only-counts-NO_INTERPROC is 3 
flink-core-basic-only-NO_INTERPROC
Total number of mock counts in flink-core-results/basic-only-counts-NO_INTERPROC is 40 
jsonschema2pojo-basic-only-NO_INTERPROC
Total number of mock counts in jsonschema2pojo-core-results/basic-only-counts-NO_INTERPROC is 282 
maven-core-basic-only-NO_INTERPROC
Total number of mock counts in maven-core-results/basic-only-counts-NO_INTERPROC is 23 
microbenchmark-basic-only-NO_INTERPROC
Total number of mock counts in microbenchmark-results/basic-only-counts-NO_INTERPROC is 123 
quartz-core-basic-only-NO_INTERPROC
Total number of mock counts in quartz-core-results/basic-only-counts-NO_INTERPROC is 21 
vraptor-core-basic-only-NO_INTERPROC
Total number of mock counts in vraptor-core-results/basic-only-counts-NO_INTERPROC is 963 
mybatis-basic-only-NO_INTERPROC
Total number of mock counts in mybatis-results/basic-only-counts-NO_INTERPROC is 577 
bootique-basic-only-NORMAL
Removed row: ['org.mockito.internal.MockitoCore:', 'java.lang.Object', 'verify(java.lang.Object,org.mockito.verification.VerificationMode)', '1']
Removed row: ['org.mockito.internal.util.DefaultMockingDetails:', 'void', 'assertGoodMock()', '1']
Removed row: ['org.mockito.internal.util.MockUtil:', 'org.mockito.invocation.MockHandler', 'getMockHandler(java.lang.Object)', '1']
Total number of mock counts in bootique-results/basic-only-counts-NORMAL is 120 
commons-collections-basic-only-NORMAL
Removed row: ['org.junit.Assert:', 'boolean', 'isEquals(java.lang.Object,java.lang.Object)', '1']
Removed row: ['org.junit.Assert:', 'java.lang.String', 'formatClassAndValue(java.lang.Object,java.lang.String)', '1']
Removed row: ['org.junit.ComparisonFailure$ComparisonCompactor:', 'java.lang.String', 'compact(java.lang.String)', '1']
Removed row: ['org.junit.ComparisonFailure$ComparisonCompactor:', 'java.lang.String', 'sharedPrefix()', '4']
Removed row: ['org.junit.ComparisonFailure$ComparisonCompactor:', 'java.lang.String', 'sharedSuffix(java.lang.String)', '5']
Removed row: ['org.junit.ComparisonFailure$ComparisonCompactor$DiffExtractor:', 'java.lang.String', 'extractDiff(java.lang.String)', '2']
Total number of mock counts in commons-collection4-results/basic-only-counts-NORMAL is 23 
flink-core-basic-only-NORMAL
Removed row: ['com.esotericsoftware.kryo.Kryo:', 'boolean', 'isFinal(java.lang.Class)', '1']
Removed row: ['com.esotericsoftware.kryo.Kryo:', 'com.esotericsoftware.kryo.Registration', 'getRegistration(java.lang.Class)', '2']
Removed row: ['com.esotericsoftware.kryo.Kryo:', 'com.esotericsoftware.kryo.Serializer', 'getDefaultSerializer(java.lang.Class)', '2']
Removed row: ['com.esotericsoftware.kryo.Kryo:', 'int', 'readReferenceOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,boolean)', '1']
Removed row: ['com.esotericsoftware.kryo.Registration:', 'void', 'setSerializer(com.esotericsoftware.kryo.Serializer)', '1']
Removed row: ['com.esotericsoftware.kryo.factories.ReflectionSerializerFactory:', 'com.esotericsoftware.kryo.Serializer', 'makeSerializer(com.esotericsoftware.kryo.Kryo,java.lang.Class,java.lang.Class)', '5']
Removed row: ['com.esotericsoftware.kryo.serializers.DefaultSerializers$ClassSerializer:', 'java.lang.Class', 'read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)', '1']
Removed row: ['com.esotericsoftware.kryo.util.DefaultClassResolver:', 'com.esotericsoftware.kryo.Registration', 'register(com.esotericsoftware.kryo.Registration)', '1']
Removed row: ['com.esotericsoftware.kryo.util.ObjectMap:', 'java.lang.Object', 'put_internal(java.lang.Object,java.lang.Object)', '5']
Removed row: ['com.esotericsoftware.kryo.util.ObjectMap:', 'void', 'push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)', '1']
Removed row: ['com.esotericsoftware.kryo.util.ObjectMap:', 'void', 'putResize(java.lang.Object,java.lang.Object)', '1']
Removed row: ['com.esotericsoftware.kryo.util.Util:', 'int', 'getDimensionCount(java.lang.Class)', '1']
Removed row: ['com.esotericsoftware.kryo.util.Util:', 'java.lang.Class', 'getElementClass(java.lang.Class)', '2']
Removed row: ['com.esotericsoftware.kryo.util.Util:', 'java.lang.String', 'className(java.lang.Class)', '4']
Removed row: ['org.junit.Assert:', 'boolean', 'isEquals(java.lang.Object,java.lang.Object)', '1']
Removed row: ['org.junit.Assert:', 'java.lang.String', 'formatClassAndValue(java.lang.Object,java.lang.String)', '1']
Removed row: ['org.junit.ComparisonFailure$ComparisonCompactor:', 'java.lang.String', 'compact(java.lang.String)', '1']
Removed row: ['org.junit.ComparisonFailure$ComparisonCompactor:', 'java.lang.String', 'sharedPrefix()', '6']
Removed row: ['org.junit.ComparisonFailure$ComparisonCompactor:', 'java.lang.String', 'sharedSuffix(java.lang.String)', '8']
Removed row: ['org.junit.ComparisonFailure$ComparisonCompactor$DiffExtractor:', 'java.lang.String', 'extractDiff(java.lang.String)', '2']
Removed row: ['org.mockito.internal.MockitoCore:', 'java.lang.Object', 'verify(java.lang.Object,org.mockito.verification.VerificationMode)', '1']
Removed row: ['org.mockito.internal.util.DefaultMockingDetails:', 'void', 'assertGoodMock()', '1']
Removed row: ['org.mockito.internal.util.MockUtil:', 'org.mockito.invocation.MockHandler', 'getMockHandler(java.lang.Object)', '1']
Total number of mock counts in flink-core-results/basic-only-counts-NORMAL is 1262 
jsonschema2pojo-basic-only-NORMAL
Removed row: ['org.hamcrest.core.IsEqual:', 'boolean', 'isArray(java.lang.Object)', '1']
Removed row: ['org.mockito.internal.MockitoCore:', 'java.lang.Object', 'verify(java.lang.Object,org.mockito.verification.VerificationMode)', '1']
Removed row: ['org.mockito.internal.util.DefaultMockingDetails:', 'void', 'assertGoodMock()', '1']
Removed row: ['org.mockito.internal.util.MockUtil:', 'org.mockito.invocation.MockHandler', 'getMockHandler(java.lang.Object)', '1']
Total number of mock counts in jsonschema2pojo-core-results/basic-only-counts-NORMAL is 462 
maven-core-basic-only-NORMAL
Removed row: ['org.junit.Assert:', 'boolean', 'isEquals(java.lang.Object,java.lang.Object)', '1']
Removed row: ['org.junit.Assert:', 'java.lang.String', 'formatClassAndValue(java.lang.Object,java.lang.String)', '1']
Removed row: ['org.junit.ComparisonFailure$ComparisonCompactor:', 'java.lang.String', 'compact(java.lang.String)', '1']
Removed row: ['org.junit.ComparisonFailure$ComparisonCompactor:', 'java.lang.String', 'sharedPrefix()', '6']
Removed row: ['org.junit.ComparisonFailure$ComparisonCompactor:', 'java.lang.String', 'sharedSuffix(java.lang.String)', '8']
Removed row: ['org.junit.ComparisonFailure$ComparisonCompactor$DiffExtractor:', 'java.lang.String', 'extractDiff(java.lang.String)', '2']
Removed row: ['org.mockito.internal.MockitoCore:', 'java.lang.Object', 'verify(java.lang.Object,org.mockito.verification.VerificationMode)', '1']
Removed row: ['org.mockito.internal.util.DefaultMockingDetails:', 'void', 'assertGoodMock()', '1']
Removed row: ['org.mockito.internal.util.MockUtil:', 'org.mockito.invocation.MockHandler', 'getMockHandler(java.lang.Object)', '1']
Total number of mock counts in maven-core-results/basic-only-counts-NORMAL is 31 
microbenchmark-basic-only-NORMAL
Removed row: ['org.mockito.internal.MockitoCore:', 'java.lang.Object', 'verify(java.lang.Object,org.mockito.verification.VerificationMode)', '1']
Total number of mock counts in microbenchmark-results/basic-only-counts-NORMAL is 132 
quartz-core-basic-only-NORMAL
Removed row: ['org.mockito.internal.MockitoCore:', 'java.lang.Object', 'verify(java.lang.Object,org.mockito.verification.VerificationMode)', '1']
Total number of mock counts in quartz-core-results/basic-only-counts-NORMAL is 23 
vraptor-core-basic-only-NORMAL
Removed row: ['br.com.caelum.iogi.conversion.LocaleBasedCalendarConverter:', 'java.util.Locale', 'providedOrDefault()', '1']
Removed row: ['javax.servlet.ServletRequestWrapper:', 'boolean', 'isAsyncStarted()', '1']
Removed row: ['javax.servlet.ServletRequestWrapper:', 'boolean', 'isAsyncSupported()', '1']
Removed row: ['javax.servlet.ServletRequestWrapper:', 'boolean', 'isSecure()', '1']
Removed row: ['javax.servlet.ServletRequestWrapper:', 'boolean', 'isWrapperFor(java.lang.Class)', '2']
Removed row: ['javax.servlet.ServletRequestWrapper:', 'boolean', 'isWrapperFor(javax.servlet.ServletRequest)', '1']
Removed row: ['javax.servlet.ServletRequestWrapper:', 'int', 'getContentLength()', '1']
Removed row: ['javax.servlet.ServletRequestWrapper:', 'int', 'getLocalPort()', '1']
Removed row: ['javax.servlet.ServletRequestWrapper:', 'int', 'getRemotePort()', '1']
Removed row: ['javax.servlet.ServletRequestWrapper:', 'int', 'getServerPort()', '1']
Removed row: ['javax.servlet.ServletRequestWrapper:', 'java.io.BufferedReader', 'getReader()', '1']
Removed row: ['javax.servlet.ServletRequestWrapper:', 'java.lang.Object', 'getAttribute(java.lang.String)', '1']
Removed row: ['javax.servlet.ServletRequestWrapper:', 'java.lang.String', 'getCharacterEncoding()', '1']
Removed row: ['javax.servlet.ServletRequestWrapper:', 'java.lang.String', 'getContentType()', '1']
Removed row: ['javax.servlet.ServletRequestWrapper:', 'java.lang.String', 'getLocalAddr()', '1']
Removed row: ['javax.servlet.ServletRequestWrapper:', 'java.lang.String', 'getLocalName()', '1']
Removed row: ['javax.servlet.ServletRequestWrapper:', 'java.lang.String', 'getParameter(java.lang.String)', '1']
Removed row: ['javax.servlet.ServletRequestWrapper:', 'java.lang.String', 'getProtocol()', '1']
Removed row: ['javax.servlet.ServletRequestWrapper:', 'java.lang.String', 'getRealPath(java.lang.String)', '1']
Removed row: ['javax.servlet.ServletRequestWrapper:', 'java.lang.String', 'getRemoteAddr()', '1']
Removed row: ['javax.servlet.ServletRequestWrapper:', 'java.lang.String', 'getRemoteHost()', '1']
Removed row: ['javax.servlet.ServletRequestWrapper:', 'java.lang.String', 'getScheme()', '1']
Removed row: ['javax.servlet.ServletRequestWrapper:', 'java.lang.String', 'getServerName()', '1']
Removed row: ['javax.servlet.ServletRequestWrapper:', 'java.lang.String[]', 'getParameterValues(java.lang.String)', '1']
Removed row: ['javax.servlet.ServletRequestWrapper:', 'java.util.Enumeration', 'getAttributeNames()', '1']
Removed row: ['javax.servlet.ServletRequestWrapper:', 'java.util.Enumeration', 'getLocales()', '1']
Removed row: ['javax.servlet.ServletRequestWrapper:', 'java.util.Enumeration', 'getParameterNames()', '1']
Removed row: ['javax.servlet.ServletRequestWrapper:', 'java.util.Locale', 'getLocale()', '1']
Removed row: ['javax.servlet.ServletRequestWrapper:', 'java.util.Map', 'getParameterMap()', '1']
Removed row: ['javax.servlet.ServletRequestWrapper:', 'javax.servlet.AsyncContext', 'getAsyncContext()', '1']
Removed row: ['javax.servlet.ServletRequestWrapper:', 'javax.servlet.AsyncContext', 'startAsync()', '1']
Removed row: ['javax.servlet.ServletRequestWrapper:', 'javax.servlet.AsyncContext', 'startAsync(javax.servlet.ServletRequest,javax.servlet.ServletResponse)', '1']
Removed row: ['javax.servlet.ServletRequestWrapper:', 'javax.servlet.DispatcherType', 'getDispatcherType()', '1']
Removed row: ['javax.servlet.ServletRequestWrapper:', 'javax.servlet.RequestDispatcher', 'getRequestDispatcher(java.lang.String)', '1']
Removed row: ['javax.servlet.ServletRequestWrapper:', 'javax.servlet.ServletContext', 'getServletContext()', '1']
Removed row: ['javax.servlet.ServletRequestWrapper:', 'javax.servlet.ServletInputStream', 'getInputStream()', '1']
Removed row: ['javax.servlet.ServletRequestWrapper:', 'void', 'removeAttribute(java.lang.String)', '1']
Removed row: ['javax.servlet.ServletRequestWrapper:', 'void', 'setAttribute(java.lang.String,java.lang.Object)', '1']
Removed row: ['javax.servlet.ServletRequestWrapper:', 'void', 'setCharacterEncoding(java.lang.String)', '1']
Removed row: ['javax.servlet.ServletResponseWrapper:', 'boolean', 'isCommitted()', '1']
Removed row: ['javax.servlet.ServletResponseWrapper:', 'boolean', 'isWrapperFor(java.lang.Class)', '2']
Removed row: ['javax.servlet.ServletResponseWrapper:', 'boolean', 'isWrapperFor(javax.servlet.ServletResponse)', '1']
Removed row: ['javax.servlet.ServletResponseWrapper:', 'int', 'getBufferSize()', '1']
Removed row: ['javax.servlet.ServletResponseWrapper:', 'java.io.PrintWriter', 'getWriter()', '1']
Removed row: ['javax.servlet.ServletResponseWrapper:', 'java.lang.String', 'getCharacterEncoding()', '1']
Removed row: ['javax.servlet.ServletResponseWrapper:', 'java.lang.String', 'getContentType()', '1']
Removed row: ['javax.servlet.ServletResponseWrapper:', 'java.util.Locale', 'getLocale()', '1']
Removed row: ['javax.servlet.ServletResponseWrapper:', 'javax.servlet.ServletOutputStream', 'getOutputStream()', '1']
Removed row: ['javax.servlet.ServletResponseWrapper:', 'void', 'flushBuffer()', '1']
Removed row: ['javax.servlet.ServletResponseWrapper:', 'void', 'reset()', '1']
Removed row: ['javax.servlet.ServletResponseWrapper:', 'void', 'resetBuffer()', '1']
Removed row: ['javax.servlet.ServletResponseWrapper:', 'void', 'setBufferSize(int)', '1']
Removed row: ['javax.servlet.ServletResponseWrapper:', 'void', 'setCharacterEncoding(java.lang.String)', '1']
Removed row: ['javax.servlet.ServletResponseWrapper:', 'void', 'setContentLength(int)', '1']
Removed row: ['javax.servlet.ServletResponseWrapper:', 'void', 'setContentType(java.lang.String)', '1']
Removed row: ['javax.servlet.ServletResponseWrapper:', 'void', 'setLocale(java.util.Locale)', '1']
Removed row: ['javax.servlet.http.HttpServletRequestWrapper:', 'boolean', 'authenticate(javax.servlet.http.HttpServletResponse)', '1']
Removed row: ['javax.servlet.http.HttpServletRequestWrapper:', 'boolean', 'isRequestedSessionIdFromCookie()', '1']
Removed row: ['javax.servlet.http.HttpServletRequestWrapper:', 'boolean', 'isRequestedSessionIdFromURL()', '1']
Removed row: ['javax.servlet.http.HttpServletRequestWrapper:', 'boolean', 'isRequestedSessionIdFromUrl()', '1']
Removed row: ['javax.servlet.http.HttpServletRequestWrapper:', 'boolean', 'isRequestedSessionIdValid()', '1']
Removed row: ['javax.servlet.http.HttpServletRequestWrapper:', 'boolean', 'isUserInRole(java.lang.String)', '1']
Removed row: ['javax.servlet.http.HttpServletRequestWrapper:', 'int', 'getIntHeader(java.lang.String)', '1']
Removed row: ['javax.servlet.http.HttpServletRequestWrapper:', 'java.lang.String', 'getAuthType()', '1']
Removed row: ['javax.servlet.http.HttpServletRequestWrapper:', 'java.lang.String', 'getContextPath()', '1']
Removed row: ['javax.servlet.http.HttpServletRequestWrapper:', 'java.lang.String', 'getHeader(java.lang.String)', '1']
Removed row: ['javax.servlet.http.HttpServletRequestWrapper:', 'java.lang.String', 'getMethod()', '1']
Removed row: ['javax.servlet.http.HttpServletRequestWrapper:', 'java.lang.String', 'getPathInfo()', '1']
Removed row: ['javax.servlet.http.HttpServletRequestWrapper:', 'java.lang.String', 'getPathTranslated()', '1']
Removed row: ['javax.servlet.http.HttpServletRequestWrapper:', 'java.lang.String', 'getQueryString()', '1']
Removed row: ['javax.servlet.http.HttpServletRequestWrapper:', 'java.lang.String', 'getRemoteUser()', '1']
Removed row: ['javax.servlet.http.HttpServletRequestWrapper:', 'java.lang.String', 'getRequestURI()', '1']
Removed row: ['javax.servlet.http.HttpServletRequestWrapper:', 'java.lang.String', 'getRequestedSessionId()', '1']
Removed row: ['javax.servlet.http.HttpServletRequestWrapper:', 'java.lang.String', 'getServletPath()', '1']
Removed row: ['javax.servlet.http.HttpServletRequestWrapper:', 'java.lang.StringBuffer', 'getRequestURL()', '1']
Removed row: ['javax.servlet.http.HttpServletRequestWrapper:', 'java.security.Principal', 'getUserPrincipal()', '1']
Removed row: ['javax.servlet.http.HttpServletRequestWrapper:', 'java.util.Collection', 'getParts()', '1']
Removed row: ['javax.servlet.http.HttpServletRequestWrapper:', 'java.util.Enumeration', 'getHeaderNames()', '1']
Removed row: ['javax.servlet.http.HttpServletRequestWrapper:', 'java.util.Enumeration', 'getHeaders(java.lang.String)', '1']
Removed row: ['javax.servlet.http.HttpServletRequestWrapper:', 'javax.servlet.http.Cookie[]', 'getCookies()', '1']
Removed row: ['javax.servlet.http.HttpServletRequestWrapper:', 'javax.servlet.http.HttpSession', 'getSession()', '1']
Removed row: ['javax.servlet.http.HttpServletRequestWrapper:', 'javax.servlet.http.HttpSession', 'getSession(boolean)', '1']
Removed row: ['javax.servlet.http.HttpServletRequestWrapper:', 'javax.servlet.http.Part', 'getPart(java.lang.String)', '1']
Removed row: ['javax.servlet.http.HttpServletRequestWrapper:', 'long', 'getDateHeader(java.lang.String)', '1']
Removed row: ['javax.servlet.http.HttpServletRequestWrapper:', 'void', 'login(java.lang.String,java.lang.String)', '1']
Removed row: ['javax.servlet.http.HttpServletRequestWrapper:', 'void', 'logout()', '1']
Removed row: ['javax.servlet.http.HttpServletResponseWrapper:', 'boolean', 'containsHeader(java.lang.String)', '1']
Removed row: ['javax.servlet.http.HttpServletResponseWrapper:', 'int', 'getStatus()', '1']
Removed row: ['javax.servlet.http.HttpServletResponseWrapper:', 'java.lang.String', 'encodeRedirectURL(java.lang.String)', '1']
Removed row: ['javax.servlet.http.HttpServletResponseWrapper:', 'java.lang.String', 'encodeRedirectUrl(java.lang.String)', '1']
Removed row: ['javax.servlet.http.HttpServletResponseWrapper:', 'java.lang.String', 'encodeURL(java.lang.String)', '1']
Removed row: ['javax.servlet.http.HttpServletResponseWrapper:', 'java.lang.String', 'encodeUrl(java.lang.String)', '1']
Removed row: ['javax.servlet.http.HttpServletResponseWrapper:', 'java.lang.String', 'getHeader(java.lang.String)', '1']
Removed row: ['javax.servlet.http.HttpServletResponseWrapper:', 'java.util.Collection', 'getHeaderNames()', '1']
Removed row: ['javax.servlet.http.HttpServletResponseWrapper:', 'java.util.Collection', 'getHeaders(java.lang.String)', '1']
Removed row: ['javax.servlet.http.HttpServletResponseWrapper:', 'void', 'addCookie(javax.servlet.http.Cookie)', '1']
Removed row: ['javax.servlet.http.HttpServletResponseWrapper:', 'void', 'addDateHeader(java.lang.String,long)', '1']
Removed row: ['javax.servlet.http.HttpServletResponseWrapper:', 'void', 'addHeader(java.lang.String,java.lang.String)', '1']
Removed row: ['javax.servlet.http.HttpServletResponseWrapper:', 'void', 'addIntHeader(java.lang.String,int)', '1']
Removed row: ['javax.servlet.http.HttpServletResponseWrapper:', 'void', 'sendError(int)', '1']
Removed row: ['javax.servlet.http.HttpServletResponseWrapper:', 'void', 'sendError(int,java.lang.String)', '1']
Removed row: ['javax.servlet.http.HttpServletResponseWrapper:', 'void', 'sendRedirect(java.lang.String)', '1']
Removed row: ['javax.servlet.http.HttpServletResponseWrapper:', 'void', 'setDateHeader(java.lang.String,long)', '1']
Removed row: ['javax.servlet.http.HttpServletResponseWrapper:', 'void', 'setHeader(java.lang.String,java.lang.String)', '1']
Removed row: ['javax.servlet.http.HttpServletResponseWrapper:', 'void', 'setIntHeader(java.lang.String,int)', '1']
Removed row: ['javax.servlet.http.HttpServletResponseWrapper:', 'void', 'setStatus(int)', '1']
Removed row: ['javax.servlet.http.HttpServletResponseWrapper:', 'void', 'setStatus(int,java.lang.String)', '1']
Removed row: ['javax.servlet.jsp.jstl.core.Config:', 'java.lang.Object', 'get(javax.servlet.ServletContext,java.lang.String)', '1']
Removed row: ['javax.servlet.jsp.jstl.core.Config:', 'java.lang.Object', 'get(javax.servlet.ServletRequest,java.lang.String)', '1']
Removed row: ['net.vidageek.mirror.get.DefaultGetterHandler:', 'void', '<init>(net.vidageek.mirror.provider.ReflectionProvider,java.lang.Object)', '1']
Removed row: ['net.vidageek.mirror.invoke.DefaultInvocationHandler:', 'java.lang.Object', 'getterFor(java.lang.String)', '1']
Removed row: ['net.vidageek.mirror.invoke.DefaultInvocationHandler:', 'void', '<init>(net.vidageek.mirror.provider.ReflectionProvider,java.lang.Object)', '1']
Removed row: ['net.vidageek.mirror.set.DefaultSetterHandler:', 'void', '<init>(net.vidageek.mirror.provider.ReflectionProvider,java.lang.Object)', '1']
Removed row: ['ognl.ASTAdd:', 'java.lang.String', 'toGetSourceString(ognl.OgnlContext,java.lang.Object)', '6']
Removed row: ['ognl.ASTCtor:', 'java.lang.Object', 'getValueBody(ognl.OgnlContext,java.lang.Object)', '1']
Removed row: ['ognl.ASTList:', 'java.lang.String', 'toGetSourceString(ognl.OgnlContext,java.lang.Object)', '7']
Removed row: ['ognl.ASTMethod:', 'java.lang.String', 'toGetSourceString(ognl.OgnlContext,java.lang.Object)', '1']
Removed row: ['ognl.ASTMethod:', 'java.lang.String', 'toSetSourceString(ognl.OgnlContext,java.lang.Object)', '1']
Removed row: ['ognl.ASTProperty:', 'int', 'getIndexedPropertyType(ognl.OgnlContext,java.lang.Object)', '1']
Removed row: ['ognl.ASTProperty:', 'java.lang.String', 'toGetSourceString(ognl.OgnlContext,java.lang.Object)', '15']
Removed row: ['ognl.ASTProperty:', 'java.lang.String', 'toSetSourceString(ognl.OgnlContext,java.lang.Object)', '14']
Removed row: ['ognl.ASTProperty:', 'java.lang.reflect.Method', 'getIndexedWriteMethod(java.beans.PropertyDescriptor)', '2']
Removed row: ['ognl.ASTSequence:', 'java.lang.String', 'toGetSourceString(ognl.OgnlContext,java.lang.Object)', '1']
Removed row: ['ognl.ASTStaticMethod:', 'java.lang.String', 'toGetSourceString(ognl.OgnlContext,java.lang.Object)', '1']
Removed row: ['ognl.ASTVarRef:', 'java.lang.String', 'toGetSourceString(ognl.OgnlContext,java.lang.Object)', '1']
Removed row: ['ognl.ArrayPropertyAccessor:', 'java.lang.String', 'getSourceAccessor(ognl.OgnlContext,java.lang.Object,java.lang.Object)', '1']
Removed row: ['ognl.ArrayPropertyAccessor:', 'java.lang.String', 'getSourceSetter(ognl.OgnlContext,java.lang.Object,java.lang.Object)', '1']
Removed row: ['ognl.ArrayPropertyAccessor:', 'void', 'setProperty(java.util.Map,java.lang.Object,java.lang.Object,java.lang.Object)', '2']
Removed row: ['ognl.Evaluation:', 'java.lang.String', 'toString(boolean,boolean,java.lang.String)', '1']
Removed row: ['ognl.EvaluationPool:', 'void', 'recycle(ognl.Evaluation)', '1']
Removed row: ['ognl.EvaluationPool:', 'void', 'recycleAll(ognl.Evaluation)', '2']
Removed row: ['ognl.ListPropertyAccessor:', 'java.lang.Object', 'getProperty(java.util.Map,java.lang.Object,java.lang.Object)', '8']
Removed row: ['ognl.ListPropertyAccessor:', 'java.lang.String', 'getSourceAccessor(ognl.OgnlContext,java.lang.Object,java.lang.Object)', '1']
Removed row: ['ognl.ListPropertyAccessor:', 'java.lang.String', 'getSourceSetter(ognl.OgnlContext,java.lang.Object,java.lang.Object)', '1']
Removed row: ['ognl.ListPropertyAccessor:', 'void', 'setProperty(java.util.Map,java.lang.Object,java.lang.Object,java.lang.Object)', '7']
Removed row: ['ognl.NoSuchPropertyException:', 'java.lang.String', 'getReason(java.lang.Object,java.lang.Object)', '2']
Removed row: ['ognl.NumericExpression:', 'java.lang.String', 'coerceToNumeric(java.lang.String,ognl.OgnlContext,ognl.Node)', '3']
Removed row: ['ognl.ObjectPropertyAccessor:', 'java.lang.Object', 'setPossibleProperty(java.util.Map,java.lang.Object,java.lang.String,java.lang.Object)', '1']
Removed row: ['ognl.ObjectPropertyAccessor:', 'java.lang.String', 'getSourceAccessor(ognl.OgnlContext,java.lang.Object,java.lang.Object)', '1']
Removed row: ['ognl.ObjectPropertyAccessor:', 'java.lang.String', 'getSourceSetter(ognl.OgnlContext,java.lang.Object,java.lang.Object)', '2']
Removed row: ['ognl.OgnlContext:', 'void', 'setRoot(java.lang.Object)', '1']
Removed row: ['ognl.OgnlOps:', 'boolean', 'booleanValue(java.lang.Object)', '4']
Removed row: ['ognl.OgnlRuntime:', 'boolean', 'isFieldAccessible(ognl.OgnlContext,java.lang.Object,java.lang.reflect.Field,java.lang.String)', '1']
Removed row: ['ognl.OgnlRuntime:', 'boolean', 'isMethodAccessible(ognl.OgnlContext,java.lang.Object,java.lang.reflect.Method,java.lang.String)', '2']
Removed row: ['ognl.OgnlRuntime:', 'boolean', 'setFieldValue(ognl.OgnlContext,java.lang.Object,java.lang.String,java.lang.Object)', '7']
Removed row: ['ognl.OgnlRuntime:', 'boolean', 'setMethodValue(ognl.OgnlContext,java.lang.Object,java.lang.String,java.lang.Object,boolean)', '3']
Removed row: ['ognl.OgnlRuntime:', 'java.lang.Class', 'classForName(ognl.OgnlContext,java.lang.String)', '1']
Removed row: ['ognl.OgnlRuntime:', 'java.lang.Class[]', 'findParameterTypes(java.lang.Class,java.lang.reflect.Method)', '3']
Removed row: ['ognl.OgnlRuntime:', 'java.lang.Object', 'callAppropriateMethod(ognl.OgnlContext,java.lang.Object,java.lang.Object,java.lang.String,java.lang.String,java.util.List,java.lang.Object[])', '1']
Removed row: ['ognl.OgnlRuntime:', 'java.lang.Object', 'callConstructor(ognl.OgnlContext,java.lang.String,java.lang.Object[])', '1']
Removed row: ['ognl.OgnlRuntime:', 'java.lang.Object', 'getConvertedType(ognl.OgnlContext,java.lang.Object,java.lang.reflect.Member,java.lang.String,java.lang.Object,java.lang.Class)', '2']
Removed row: ['ognl.OgnlRuntime:', 'java.lang.Object', 'getFieldValue(ognl.OgnlContext,java.lang.Object,java.lang.String,boolean)', '4']
Removed row: ['ognl.OgnlRuntime:', 'java.lang.Object', 'getMethodValue(ognl.OgnlContext,java.lang.Object,java.lang.String,boolean)', '3']
Removed row: ['ognl.OgnlRuntime:', 'java.lang.String', 'getChildSource(ognl.OgnlContext,java.lang.Object,ognl.Node,boolean)', '1']
Removed row: ['ognl.OgnlRuntime:', 'java.lang.reflect.Method', 'getAppropriateMethod(ognl.OgnlContext,java.lang.Object,java.lang.Object,java.lang.String,java.util.List,java.lang.Object[],java.lang.Object[])', '1']
Removed row: ['ognl.OgnlRuntime:', 'java.lang.reflect.Method', 'getConvertedMethodAndArgs(ognl.OgnlContext,java.lang.Object,java.lang.String,java.util.List,java.lang.Object[],java.lang.Object[])', '2']
Removed row: ['ognl.OgnlRuntime:', 'java.lang.reflect.Method', 'getMethod(ognl.OgnlContext,java.lang.Class,java.lang.String,ognl.Node[],boolean)', '1']
Removed row: ['ognl.enhance.ContextClassLoader:', 'java.lang.Class', 'findClass(java.lang.String)', '1']
Removed row: ['ognl.enhance.ExpressionCompiler:', 'java.lang.Class', 'getRootExpressionClass(ognl.Node,ognl.OgnlContext)', '1']
Removed row: ['ognl.enhance.ExpressionCompiler:', 'java.lang.String', 'castExpression(ognl.OgnlContext,ognl.Node,java.lang.String)', '2']
Removed row: ['ognl.enhance.ExpressionCompiler:', 'java.lang.String', 'getCastString(java.lang.Class)', '3']
Removed row: ['org.apache.commons.fileupload.servlet.ServletFileUpload:', 'boolean', 'isMultipartContent(javax.servlet.http.HttpServletRequest)', '1']
Removed row: ['org.apache.commons.fileupload.servlet.ServletRequestContext:', 'int', 'getContentLength()', '1']
Removed row: ['org.apache.commons.fileupload.servlet.ServletRequestContext:', 'java.io.InputStream', 'getInputStream()', '1']
Removed row: ['org.apache.commons.fileupload.servlet.ServletRequestContext:', 'java.lang.String', 'getCharacterEncoding()', '1']
Removed row: ['org.apache.commons.fileupload.servlet.ServletRequestContext:', 'java.lang.String', 'getContentType()', '1']
Removed row: ['org.apache.commons.fileupload.servlet.ServletRequestContext:', 'long', 'contentLength()', '2']
Removed row: ['org.hamcrest.core.IsEqual:', 'boolean', 'isArray(java.lang.Object)', '1']
Removed row: ['org.mockito.internal.stubbing.answers.Returns:', 'java.lang.Class', 'getReturnType()', '1']
Removed row: ['org.mockito.internal.stubbing.answers.Returns:', 'java.lang.String', 'printReturnType()', '1']
Removed row: ['org.mockito.internal.util.MockUtil:', 'boolean', 'isMockitoMock(java.lang.Object)', '1']
Removed row: ['org.mockito.internal.util.MockUtil:', 'org.mockito.internal.creation.MethodInterceptorFilter', 'getInterceptor(java.lang.Object)', '1']
Removed row: ['org.springframework.web.context.request.RequestContextListener:', 'void', 'requestDestroyed(javax.servlet.ServletRequestEvent)', '1']
Removed row: ['org.springframework.web.context.request.RequestContextListener:', 'void', 'requestInitialized(javax.servlet.ServletRequestEvent)', '2']
Removed row: ['org.springframework.web.context.request.ServletRequestAttributes:', 'java.lang.Object', 'getAttribute(java.lang.String,int)', '1']
Removed row: ['org.springframework.web.context.request.ServletRequestAttributes:', 'java.lang.String', 'toString()', '1']
Removed row: ['org.springframework.web.context.request.ServletRequestAttributes:', 'java.lang.String[]', 'getAttributeNames(int)', '1']
Removed row: ['org.springframework.web.context.request.ServletRequestAttributes:', 'javax.servlet.http.HttpSession', 'getSession(boolean)', '1']
Removed row: ['org.springframework.web.context.request.ServletRequestAttributes:', 'void', 'removeAttribute(java.lang.String,int)', '1']
Removed row: ['org.springframework.web.context.request.ServletRequestAttributes:', 'void', 'setAttribute(java.lang.String,java.lang.Object,int)', '1']
Removed row: ['org.springframework.web.context.request.ServletRequestAttributes:', 'void', 'updateAccessedSessionAttributes()', '1']
Removed row: ['org.springframework.web.context.request.ServletWebRequest:', 'boolean', 'checkNotModified(long)', '2']
Removed row: ['org.springframework.web.context.request.ServletWebRequest:', 'boolean', 'isSecure()', '1']
Removed row: ['org.springframework.web.context.request.ServletWebRequest:', 'boolean', 'isUserInRole(java.lang.String)', '1']
Removed row: ['org.springframework.web.context.request.ServletWebRequest:', 'java.lang.Object', 'getNativeRequest(java.lang.Class)', '1']
Removed row: ['org.springframework.web.context.request.ServletWebRequest:', 'java.lang.Object', 'getNativeResponse(java.lang.Class)', '1']
Removed row: ['org.springframework.web.context.request.ServletWebRequest:', 'java.lang.String', 'getContextPath()', '1']
Removed row: ['org.springframework.web.context.request.ServletWebRequest:', 'java.lang.String', 'getDescription(boolean)', '4']
Removed row: ['org.springframework.web.context.request.ServletWebRequest:', 'java.lang.String', 'getHeader(java.lang.String)', '1']
Removed row: ['org.springframework.web.context.request.ServletWebRequest:', 'java.lang.String', 'getParameter(java.lang.String)', '1']
Removed row: ['org.springframework.web.context.request.ServletWebRequest:', 'java.lang.String', 'getRemoteUser()', '1']
Removed row: ['org.springframework.web.context.request.ServletWebRequest:', 'java.lang.String[]', 'getHeaderValues(java.lang.String)', '1']
Removed row: ['org.springframework.web.context.request.ServletWebRequest:', 'java.lang.String[]', 'getParameterValues(java.lang.String)', '1']
Removed row: ['org.springframework.web.context.request.ServletWebRequest:', 'java.security.Principal', 'getUserPrincipal()', '1']
Removed row: ['org.springframework.web.context.request.ServletWebRequest:', 'java.util.Iterator', 'getHeaderNames()', '1']
Removed row: ['org.springframework.web.context.request.ServletWebRequest:', 'java.util.Iterator', 'getParameterNames()', '1']
Removed row: ['org.springframework.web.context.request.ServletWebRequest:', 'java.util.Locale', 'getLocale()', '1']
Removed row: ['org.springframework.web.context.request.ServletWebRequest:', 'java.util.Map', 'getParameterMap()', '1']
Removed row: ['org.springframework.web.context.support.WebApplicationContextUtils:', 'org.springframework.web.context.WebApplicationContext', 'getWebApplicationContext(javax.servlet.ServletContext,java.lang.String)', '1']
Removed row: ['org.springframework.web.context.support.WebApplicationContextUtils$SessionObjectFactory:', 'javax.servlet.http.HttpSession', 'getObject()', '1']
Total number of mock counts in vraptor-core-results/basic-only-counts-NORMAL is 1301 
mybatis-basic-only-NORMAL
Removed row: ['org.junit.jupiter.api.AssertionUtils:', 'boolean', 'objectsAreEqual(java.lang.Object,java.lang.Object)', '1']
Removed row: ['org.junit.jupiter.api.AssertionUtils:', 'java.lang.String', 'getCanonicalName(java.lang.Class)', '3']
Removed row: ['org.junit.jupiter.api.AssertionUtils:', 'java.lang.String', 'getClassName(java.lang.Object)', '1']
Removed row: ['org.junit.platform.commons.util.StringUtils:', 'java.lang.String', 'defaultToString(java.lang.Object)', '1']
Removed row: ['org.junit.platform.commons.util.StringUtils:', 'java.lang.String', 'nullSafeToString(java.lang.Object)', '3']
Removed row: ['org.mockito.internal.MockitoCore:', 'java.lang.Object', 'verify(java.lang.Object,org.mockito.verification.VerificationMode)', '1']
Removed row: ['org.mockito.internal.util.DefaultMockingDetails:', 'void', 'assertGoodMock()', '1']
Removed row: ['org.mockito.internal.util.MockUtil:', 'org.mockito.invocation.MockHandler', 'getMockHandler(java.lang.Object)', '1']
Removed row: ['org.opentest4j.ValueWrapper:', 'void', '<init>(java.lang.Object,java.lang.String)', '1']
Total number of mock counts in mybatis-results/basic-only-counts-NORMAL is 644 
bootique-context-insensitive-NO_INTERPROC
Total number of mock counts in bootique-results/context-insensitive-counts-NO_INTERPROC is 99 
commons-collections-context-insensitive-NO_INTERPROC
Total number of mock counts in commons-collection4-results/context-insensitive-counts-NO_INTERPROC is 3 
flink-core-context-insensitive-NO_INTERPROC
Total number of mock counts in flink-core-results/context-insensitive-counts-NO_INTERPROC is 40 
jsonschema2pojo-context-insensitive-NO_INTERPROC
Total number of mock counts in jsonschema2pojo-core-results/context-insensitive-counts-NO_INTERPROC is 282 
maven-core-context-insensitive-NO_INTERPROC
Total number of mock counts in maven-core-results/context-insensitive-counts-NO_INTERPROC is 23 
microbenchmark-context-insensitive-NO_INTERPROC
Total number of mock counts in microbenchmark-results/context-insensitive-counts-NO_INTERPROC is 123 
quartz-core-context-insensitive-NO_INTERPROC
Total number of mock counts in quartz-core-results/context-insensitive-counts-NO_INTERPROC is 21 
vraptor-core-context-insensitive-NO_INTERPROC
Total number of mock counts in vraptor-core-results/context-insensitive-counts-NO_INTERPROC is 962 
mybatis-context-insensitive-NO_INTERPROC
Total number of mock counts in mybatis-results/context-insensitive-counts-NO_INTERPROC is 577 
bootique-context-insensitive-NORMAL
Removed row: ['org.mockito.internal.MockitoCore:', 'java.lang.Object', 'verify(java.lang.Object,org.mockito.verification.VerificationMode)', '1']
Removed row: ['org.mockito.internal.util.DefaultMockingDetails:', 'void', 'assertGoodMock()', '1']
Removed row: ['org.mockito.internal.util.MockUtil:', 'org.mockito.invocation.MockHandler', 'getMockHandler(java.lang.Object)', '1']
Total number of mock counts in bootique-results/context-insensitive-counts-NORMAL is 122 
commons-collections-context-insensitive-NORMAL
Removed row: ['org.junit.Assert:', 'boolean', 'isEquals(java.lang.Object,java.lang.Object)', '1']
Removed row: ['org.junit.Assert:', 'java.lang.String', 'formatClassAndValue(java.lang.Object,java.lang.String)', '1']
Removed row: ['org.junit.ComparisonFailure$ComparisonCompactor:', 'java.lang.String', 'compact(java.lang.String)', '1']
Removed row: ['org.junit.ComparisonFailure$ComparisonCompactor:', 'java.lang.String', 'sharedPrefix()', '4']
Removed row: ['org.junit.ComparisonFailure$ComparisonCompactor:', 'java.lang.String', 'sharedSuffix(java.lang.String)', '5']
Removed row: ['org.junit.ComparisonFailure$ComparisonCompactor$DiffExtractor:', 'java.lang.String', 'extractDiff(java.lang.String)', '2']
Total number of mock counts in commons-collection4-results/context-insensitive-counts-NORMAL is 23 
flink-core-context-insensitive-NORMAL
Removed row: ['com.esotericsoftware.kryo.Kryo:', 'boolean', 'writeReferenceOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,boolean)', '1']
Removed row: ['com.esotericsoftware.kryo.Kryo:', 'com.esotericsoftware.kryo.Registration', 'getRegistration(java.lang.Class)', '2']
Removed row: ['com.esotericsoftware.kryo.Kryo:', 'com.esotericsoftware.kryo.Serializer', 'getDefaultSerializer(java.lang.Class)', '2']
Removed row: ['com.esotericsoftware.kryo.Kryo:', 'int', 'readReferenceOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,boolean)', '1']
Removed row: ['com.esotericsoftware.kryo.Kryo:', 'java.lang.Object', 'copy(java.lang.Object)', '2']
Removed row: ['com.esotericsoftware.kryo.Kryo:', 'void', 'writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)', '1']
Removed row: ['com.esotericsoftware.kryo.Kryo:', 'void', 'writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)', '2']
Removed row: ['com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy:', 'org.objenesis.instantiator.ObjectInstantiator', 'newInstantiatorOf(java.lang.Class)', '7']
Removed row: ['com.esotericsoftware.kryo.Registration:', 'void', 'setSerializer(com.esotericsoftware.kryo.Serializer)', '1']
Removed row: ['com.esotericsoftware.kryo.factories.ReflectionSerializerFactory:', 'com.esotericsoftware.kryo.Serializer', 'makeSerializer(com.esotericsoftware.kryo.Kryo,java.lang.Class,java.lang.Class)', '5']
Removed row: ['com.esotericsoftware.kryo.io.Output:', 'void', 'writeAscii_slow(java.lang.String,int)', '1']
Removed row: ['com.esotericsoftware.kryo.io.Output:', 'void', 'writeString(java.lang.String)', '4']
Removed row: ['com.esotericsoftware.kryo.io.Output:', 'void', 'writeString_slow(java.lang.CharSequence,int,int)', '1']
Removed row: ['com.esotericsoftware.kryo.serializers.DefaultSerializers$BooleanSerializer:', 'void', 'write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Boolean)', '1']
Removed row: ['com.esotericsoftware.kryo.serializers.DefaultSerializers$ByteSerializer:', 'void', 'write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Byte)', '1']
Removed row: ['com.esotericsoftware.kryo.serializers.DefaultSerializers$CharSerializer:', 'void', 'write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Character)', '1']
Removed row: ['com.esotericsoftware.kryo.serializers.DefaultSerializers$DoubleSerializer:', 'void', 'write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Double)', '1']
Removed row: ['com.esotericsoftware.kryo.serializers.DefaultSerializers$FloatSerializer:', 'void', 'write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Float)', '1']
Removed row: ['com.esotericsoftware.kryo.serializers.DefaultSerializers$IntSerializer:', 'void', 'write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Integer)', '1']
Removed row: ['com.esotericsoftware.kryo.serializers.DefaultSerializers$LongSerializer:', 'void', 'write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Long)', '1']
Removed row: ['com.esotericsoftware.kryo.serializers.DefaultSerializers$ShortSerializer:', 'void', 'write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Short)', '1']
Removed row: ['com.esotericsoftware.kryo.util.DefaultClassResolver:', 'com.esotericsoftware.kryo.Registration', 'register(com.esotericsoftware.kryo.Registration)', '1']
Removed row: ['com.esotericsoftware.kryo.util.ObjectMap:', 'java.lang.Object', 'get(java.lang.Object)', '4']
Removed row: ['com.esotericsoftware.kryo.util.ObjectMap:', 'java.lang.Object', 'getStash(java.lang.Object)', '1']
Removed row: ['com.esotericsoftware.kryo.util.ObjectMap:', 'java.lang.Object', 'put_internal(java.lang.Object,java.lang.Object)', '5']
Removed row: ['com.esotericsoftware.kryo.util.ObjectMap:', 'void', 'push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)', '1']
Removed row: ['com.esotericsoftware.kryo.util.ObjectMap:', 'void', 'putResize(java.lang.Object,java.lang.Object)', '1']
Removed row: ['com.esotericsoftware.kryo.util.Util:', 'int', 'getDimensionCount(java.lang.Class)', '1']
Removed row: ['com.esotericsoftware.kryo.util.Util:', 'java.lang.Class', 'getElementClass(java.lang.Class)', '2']
Removed row: ['com.esotericsoftware.kryo.util.Util:', 'java.lang.String', 'className(java.lang.Class)', '4']
Removed row: ['com.esotericsoftware.kryo.util.Util:', 'java.lang.String', 'string(java.lang.Object)', '1']
Removed row: ['com.esotericsoftware.kryo.util.Util:', 'void', 'log(java.lang.String,java.lang.Object)', '1']
Removed row: ['com.esotericsoftware.reflectasm.AccessClassLoader:', 'java.lang.ClassLoader', 'getParentClassLoader(java.lang.Class)', '1']
Removed row: ['com.esotericsoftware.reflectasm.ConstructorAccess:', 'com.esotericsoftware.reflectasm.ConstructorAccess', 'get(java.lang.Class)', '10']
Removed row: ['javassist.CtMethod:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['javassist.bytecode.MemberrefInfo:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.apache.logging.log4j.MarkerManager$Log4jMarker:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.apache.logging.log4j.spi.Provider:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.apache.logging.log4j.util.LoaderUtil$UrlResource:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.hamcrest.BaseDescription:', 'java.lang.String', 'descriptionOf(java.lang.Object)', '2']
Removed row: ['org.hamcrest.BaseDescription:', 'org.hamcrest.Description', 'appendDescriptionOf(org.hamcrest.SelfDescribing)', '1']
Removed row: ['org.hamcrest.BaseDescription:', 'org.hamcrest.Description', 'appendValue(java.lang.Object)', '2']
Removed row: ['org.hamcrest.BaseDescription:', 'org.hamcrest.Description', 'appendValueList(java.lang.String,java.lang.String,java.lang.String,java.lang.Iterable)', '1']
Removed row: ['org.hamcrest.BaseDescription:', 'void', 'toJavaSyntax(java.lang.String)', '2']
Removed row: ['org.hamcrest.TypeSafeMatcher:', 'void', 'describeMismatch(java.lang.Object,org.hamcrest.Description)', '1']
Removed row: ['org.hamcrest.collection.IsEmptyCollection:', 'boolean', 'matchesSafely(java.util.Collection)', '1']
Removed row: ['org.hamcrest.collection.IsIterableContainingInAnyOrder:', 'boolean', 'matchesSafely(java.lang.Iterable,org.hamcrest.Description)', '1']
Removed row: ['org.hamcrest.collection.IsIterableContainingInOrder:', 'boolean', 'matchesSafely(java.lang.Iterable,org.hamcrest.Description)', '1']
Removed row: ['org.hamcrest.core.IsCollectionContaining:', 'boolean', 'matchesSafely(java.lang.Iterable,org.hamcrest.Description)', '1']
Removed row: ['org.hamcrest.core.IsEqual:', 'boolean', 'areEqual(java.lang.Object,java.lang.Object)', '1']
Removed row: ['org.hamcrest.core.IsEqual:', 'boolean', 'isArray(java.lang.Object)', '1']
Removed row: ['org.hamcrest.core.IsInstanceOf:', 'boolean', 'matches(java.lang.Object,org.hamcrest.Description)', '1']
Removed row: ['org.hamcrest.core.StringContains:', 'boolean', 'evalSubstringOf(java.lang.String)', '1']
Removed row: ['org.hamcrest.internal.ArrayIterator:', 'void', '<init>(java.lang.Object)', '1']
Removed row: ['org.hamcrest.number.OrderingComparison:', 'boolean', 'matchesSafely(java.lang.Comparable)', '1']
Removed row: ['org.hamcrest.number.OrderingComparison:', 'void', 'describeMismatchSafely(java.lang.Comparable,org.hamcrest.Description)', '1']
Removed row: ['org.joda.time.base.AbstractPartial:', 'boolean', 'equals(java.lang.Object)', '4']
Removed row: ['org.joda.time.chrono.BasicChronology:', 'boolean', 'equals(java.lang.Object)', '3']
Removed row: ['org.joda.time.chrono.ISOChronology:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.joda.time.field.MillisDurationField:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.joda.time.field.PreciseDurationField:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.joda.time.field.ScaledDurationField:', 'boolean', 'equals(java.lang.Object)', '2']
Removed row: ['org.joda.time.field.UnsupportedDurationField:', 'boolean', 'equals(java.lang.Object)', '2']
Removed row: ['org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.joda.time.tz.FixedDateTimeZone:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.junit.Assert:', 'boolean', 'isEquals(java.lang.Object,java.lang.Object)', '1']
Removed row: ['org.junit.Assert:', 'java.lang.String', 'formatClassAndValue(java.lang.Object,java.lang.String)', '1']
Removed row: ['org.junit.ComparisonFailure$ComparisonCompactor:', 'java.lang.String', 'compact(java.lang.String)', '1']
Removed row: ['org.junit.ComparisonFailure$ComparisonCompactor:', 'java.lang.String', 'sharedPrefix()', '6']
Removed row: ['org.junit.ComparisonFailure$ComparisonCompactor:', 'java.lang.String', 'sharedSuffix(java.lang.String)', '8']
Removed row: ['org.junit.ComparisonFailure$ComparisonCompactor$DiffExtractor:', 'java.lang.String', 'extractDiff(java.lang.String)', '2']
Removed row: ['org.junit.internal.matchers.ThrowableMessageMatcher:', 'boolean', 'matchesSafely(java.lang.Throwable)', '1']
Removed row: ['org.junit.internal.matchers.ThrowableMessageMatcher:', 'void', 'describeMismatchSafely(java.lang.Throwable,org.hamcrest.Description)', '1']
Removed row: ['org.mockito.internal.MockitoCore:', 'java.lang.Object', 'verify(java.lang.Object,org.mockito.verification.VerificationMode)', '1']
Removed row: ['org.mockito.internal.util.DefaultMockingDetails:', 'void', 'assertGoodMock()', '1']
Removed row: ['org.mockito.internal.util.MockUtil:', 'org.mockito.invocation.MockHandler', 'getMockHandler(java.lang.Object)', '1']
Removed row: ['org.objenesis.instantiator.android.Android10Instantiator:', 'java.lang.Object', 'newInstance()', '1']
Removed row: ['org.objenesis.instantiator.android.Android17Instantiator:', 'java.lang.Object', 'newInstance()', '1']
Removed row: ['org.objenesis.instantiator.android.Android18Instantiator:', 'java.lang.Object', 'newInstance()', '1']
Removed row: ['org.objenesis.instantiator.gcj.GCJInstantiator:', 'java.lang.Object', 'newInstance()', '1']
Removed row: ['org.objenesis.instantiator.gcj.GCJSerializationInstantiator:', 'java.lang.Object', 'newInstance()', '1']
Removed row: ['org.objenesis.instantiator.jrockit.JRockitLegacyInstantiator:', 'java.lang.Object', 'newInstance()', '1']
Removed row: ['org.objenesis.instantiator.sun.UnsafeFactoryInstantiator:', 'java.lang.Object', 'newInstance()', '1']
Removed row: ['org.slf4j.helpers.BasicMarker:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.slf4j.helpers.SubstituteLogger:', 'boolean', 'equals(java.lang.Object)', '1']
Total number of mock counts in flink-core-results/context-insensitive-counts-NORMAL is 1389 
jsonschema2pojo-context-insensitive-NORMAL
Removed row: ['com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.fasterxml.jackson.core.JsonLocation:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.fasterxml.jackson.core.io.SerializedString:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.fasterxml.jackson.databind.PropertyName:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.fasterxml.jackson.databind.introspect.MemberKey:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.fasterxml.jackson.databind.jsontype.NamedType:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.fasterxml.jackson.databind.type.ArrayType:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.fasterxml.jackson.databind.type.ClassKey:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.fasterxml.jackson.databind.type.CollectionLikeType:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.fasterxml.jackson.databind.type.MapLikeType:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.fasterxml.jackson.databind.type.ReferenceType:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.fasterxml.jackson.databind.type.ResolvedRecursiveType:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.fasterxml.jackson.databind.type.SimpleType:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.fasterxml.jackson.databind.type.TypeBindings$AsKey:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.fasterxml.jackson.databind.util.ClassUtil:', 'boolean', 'hasClass(java.lang.Object,java.lang.Class)', '1']
Removed row: ['com.fasterxml.jackson.databind.util.TypeKey:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.github.tomakehurst.wiremock.admin.RequestSpec:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.github.tomakehurst.wiremock.global.GlobalSettings:', 'boolean', 'equals(java.lang.Object)', '4']
Removed row: ['com.github.tomakehurst.wiremock.http.RequestMethod:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.github.tomakehurst.wiremock.stubbing.Scenario:', 'boolean', 'equals(java.lang.Object)', '5']
Removed row: ['com.google.common.collect.AbstractMapEntry:', 'boolean', 'equals(java.lang.Object)', '2']
Removed row: ['com.google.common.collect.Iterables:', 'boolean', 'all(java.lang.Iterable,com.google.common.base.Predicate)', '1']
Removed row: ['com.google.common.collect.Lists:', 'boolean', 'equalsImpl(java.util.List,java.lang.Object)', '3']
Removed row: ['com.google.common.collect.Sets:', 'boolean', 'equalsImpl(java.util.Set,java.lang.Object)', '1']
Removed row: ['com.sun.codemodel.JClass:', 'com.sun.codemodel.JClass', 'narrow(com.sun.codemodel.JType)', '1']
Removed row: ['com.sun.codemodel.JDefinedClass:', 'com.sun.codemodel.JDefinedClass', '_extends(com.sun.codemodel.JClass)', '2']
Removed row: ['com.sun.codemodel.JMethod:', 'boolean', 'hasSignature(com.sun.codemodel.JType[])', '1']
Removed row: ['com.sun.codemodel.JNarrowedClass:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.sun.codemodel.JNarrowedClass:', 'com.sun.codemodel.JClass', '_extends()', '1']
Removed row: ['com.sun.codemodel.JVar:', 'com.sun.codemodel.JAnnotationUse', 'annotate(java.lang.Class)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'boolean', 'nodeEquals(japa.parser.ast.Node,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.BlockComment,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.LineComment,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.TypeParameter,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.body.AnnotationDeclaration,japa.parser.ast.Node)', '4']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.body.AnnotationMemberDeclaration,japa.parser.ast.Node)', '5']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.body.BaseParameter,japa.parser.ast.Node)', '3']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.body.ClassOrInterfaceDeclaration,japa.parser.ast.Node)', '8']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.body.ConstructorDeclaration,japa.parser.ast.Node)', '7']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.body.EnumConstantDeclaration,japa.parser.ast.Node)', '4']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.body.EnumDeclaration,japa.parser.ast.Node)', '6']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.body.FieldDeclaration,japa.parser.ast.Node)', '4']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.body.InitializerDeclaration,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.body.JavadocComment,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.body.MethodDeclaration,japa.parser.ast.Node)', '9']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.body.MultiTypeParameter,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.body.Parameter,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.body.VariableDeclarator,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.body.VariableDeclaratorId,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.ArrayAccessExpr,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.ArrayCreationExpr,japa.parser.ast.Node)', '4']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.ArrayInitializerExpr,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.AssignExpr,japa.parser.ast.Node)', '3']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.BinaryExpr,japa.parser.ast.Node)', '3']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.BooleanLiteralExpr,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.CastExpr,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.CharLiteralExpr,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.ClassExpr,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.ConditionalExpr,japa.parser.ast.Node)', '3']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.DoubleLiteralExpr,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.EnclosedExpr,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.FieldAccessExpr,japa.parser.ast.Node)', '3']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.InstanceOfExpr,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.IntegerLiteralExpr,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.IntegerLiteralMinValueExpr,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.LongLiteralExpr,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.LongLiteralMinValueExpr,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.MarkerAnnotationExpr,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.MemberValuePair,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.MethodCallExpr,japa.parser.ast.Node)', '4']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.NameExpr,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.NormalAnnotationExpr,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.ObjectCreationExpr,japa.parser.ast.Node)', '5']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.QualifiedNameExpr,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.SingleMemberAnnotationExpr,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.StringLiteralExpr,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.SuperExpr,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.ThisExpr,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.UnaryExpr,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.VariableDeclarationExpr,japa.parser.ast.Node)', '4']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.AssertStmt,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.BlockStmt,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.BreakStmt,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.CatchClause,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.ContinueStmt,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.DoStmt,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.ExplicitConstructorInvocationStmt,japa.parser.ast.Node)', '3']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.ExpressionStmt,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.ForStmt,japa.parser.ast.Node)', '4']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.ForeachStmt,japa.parser.ast.Node)', '3']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.IfStmt,japa.parser.ast.Node)', '3']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.LabeledStmt,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.ReturnStmt,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.SwitchEntryStmt,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.SwitchStmt,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.SynchronizedStmt,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.ThrowStmt,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.TryStmt,japa.parser.ast.Node)', '3']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.TypeDeclarationStmt,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.WhileStmt,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.type.ClassOrInterfaceType,japa.parser.ast.Node)', '3']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.type.PrimitiveType,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.type.ReferenceType,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.type.WildcardType,japa.parser.ast.Node)', '2']
Removed row: ['org.hamcrest.BaseDescription:', 'java.lang.String', 'descriptionOf(java.lang.Object)', '2']
Removed row: ['org.hamcrest.BaseDescription:', 'org.hamcrest.Description', 'appendValue(java.lang.Object)', '2']
Removed row: ['org.hamcrest.BaseDescription:', 'void', 'toJavaSyntax(java.lang.String)', '2']
Removed row: ['org.hamcrest.TypeSafeMatcher:', 'void', 'describeMismatch(java.lang.Object,org.hamcrest.Description)', '1']
Removed row: ['org.hamcrest.collection.IsCollectionWithSize:', 'java.lang.Integer', 'featureValueOf(java.util.Collection)', '1']
Removed row: ['org.hamcrest.core.IsEqual:', 'boolean', 'areEqual(java.lang.Object,java.lang.Object)', '1']
Removed row: ['org.hamcrest.core.IsEqual:', 'boolean', 'isArray(java.lang.Object)', '1']
Removed row: ['org.hamcrest.core.IsInstanceOf:', 'boolean', 'matches(java.lang.Object,org.hamcrest.Description)', '1']
Removed row: ['org.hamcrest.internal.ArrayIterator:', 'void', '<init>(java.lang.Object)', '1']
Removed row: ['org.hamcrest.number.OrderingComparison:', 'boolean', 'matchesSafely(java.lang.Comparable)', '1']
Removed row: ['org.hamcrest.number.OrderingComparison:', 'void', 'describeMismatchSafely(java.lang.Comparable,org.hamcrest.Description)', '1']
Removed row: ['org.mockito.internal.MockitoCore:', 'java.lang.Object', 'verify(java.lang.Object,org.mockito.verification.VerificationMode)', '1']
Removed row: ['org.mockito.internal.util.DefaultMockingDetails:', 'void', 'assertGoodMock()', '1']
Removed row: ['org.mockito.internal.util.MockUtil:', 'org.mockito.invocation.MockHandler', 'getMockHandler(java.lang.Object)', '1']
Removed row: ['org.slf4j.helpers.SubstituteLogger:', 'boolean', 'equals(java.lang.Object)', '1']
Total number of mock counts in jsonschema2pojo-core-results/context-insensitive-counts-NORMAL is 604 
maven-core-context-insensitive-NORMAL
Removed row: ['org.junit.Assert:', 'boolean', 'isEquals(java.lang.Object,java.lang.Object)', '1']
Removed row: ['org.junit.Assert:', 'java.lang.String', 'formatClassAndValue(java.lang.Object,java.lang.String)', '1']
Removed row: ['org.junit.ComparisonFailure$ComparisonCompactor:', 'java.lang.String', 'compact(java.lang.String)', '1']
Removed row: ['org.junit.ComparisonFailure$ComparisonCompactor:', 'java.lang.String', 'sharedPrefix()', '6']
Removed row: ['org.junit.ComparisonFailure$ComparisonCompactor:', 'java.lang.String', 'sharedSuffix(java.lang.String)', '8']
Removed row: ['org.junit.ComparisonFailure$ComparisonCompactor$DiffExtractor:', 'java.lang.String', 'extractDiff(java.lang.String)', '2']
Removed row: ['org.mockito.internal.MockitoCore:', 'java.lang.Object', 'verify(java.lang.Object,org.mockito.verification.VerificationMode)', '1']
Removed row: ['org.mockito.internal.util.DefaultMockingDetails:', 'void', 'assertGoodMock()', '1']
Removed row: ['org.mockito.internal.util.MockUtil:', 'org.mockito.invocation.MockHandler', 'getMockHandler(java.lang.Object)', '1']
Total number of mock counts in maven-core-results/context-insensitive-counts-NORMAL is 39 
microbenchmark-context-insensitive-NORMAL
Removed row: ['org.mockito.internal.MockitoCore:', 'java.lang.Object', 'verify(java.lang.Object,org.mockito.verification.VerificationMode)', '1']
Removed row: ['org.mockito.internal.creation.CglibMockMaker:', 'org.mockito.invocation.MockHandler', 'getHandler(java.lang.Object)', '1']
Total number of mock counts in microbenchmark-results/context-insensitive-counts-NORMAL is 132 
quartz-core-context-insensitive-NORMAL
Removed row: ['org.mockito.internal.MockitoCore:', 'java.lang.Object', 'verify(java.lang.Object,org.mockito.verification.VerificationMode)', '1']
Removed row: ['org.mockito.internal.creation.CglibMockMaker:', 'org.mockito.invocation.MockHandler', 'getHandler(java.lang.Object)', '1']
Total number of mock counts in quartz-core-results/context-insensitive-counts-NORMAL is 31 
vraptor-core-context-insensitive-NORMAL
Traceback (most recent call last):
  File "./process-count.py", line 24, in <module>
    clazz, return_type, meth, count = row
ValueError: too many values to unpack (expected 4)
mybatis-context-insensitive-NORMAL
Removed row: ['com.github.dockerjava.api.model.Bind:', 'boolean', 'equals(java.lang.Object)', '7']
Removed row: ['com.mysql.cj.AbstractPreparedQuery:', 'void', 'streamToBytes(com.mysql.cj.protocol.a.NativePacketPayload,java.io.InputStream,boolean,long,boolean)', '2']
Removed row: ['com.mysql.cj.AbstractQueryBindings:', 'byte[]', 'streamToBytes(int,boolean)', '5']
Removed row: ['com.mysql.cj.AbstractQueryBindings:', 'void', 'setObject(int,java.lang.Object)', '9']
Removed row: ['com.mysql.cj.ClientPreparedQueryBindings:', 'boolean', 'isEscapeNeededForString(java.lang.String,int)', '1']
Removed row: ['com.mysql.cj.ClientPreparedQueryBindings:', 'void', 'setBigDecimal(int,java.math.BigDecimal)', '1']
Removed row: ['com.mysql.cj.ClientPreparedQueryBindings:', 'void', 'setBlob(int,java.sql.Blob)', '1']
Removed row: ['com.mysql.cj.ClientPreparedQueryBindings:', 'void', 'setCharacterStream(int,java.io.Reader,int)', '1']
Removed row: ['com.mysql.cj.ClientPreparedQueryBindings:', 'void', 'setClob(int,java.sql.Clob)', '4']
Removed row: ['com.mysql.cj.ClientPreparedQueryBindings:', 'void', 'setNString(int,java.lang.String)', '3']
Removed row: ['com.mysql.cj.ClientPreparedQueryBindings:', 'void', 'setString(int,java.lang.String)', '4']
Removed row: ['com.mysql.cj.ClientPreparedQueryBindings:', 'void', 'setTimestamp(int,java.sql.Timestamp,java.util.Calendar,int)', '1']
Removed row: ['com.mysql.cj.ServerPreparedQuery:', 'void', 'serverLongData(int,com.mysql.cj.ServerPreparedQueryBindValue)', '2']
Removed row: ['com.mysql.cj.ServerPreparedQuery:', 'void', 'storeReader(int,com.mysql.cj.protocol.a.NativePacketPayload,java.io.Reader)', '3']
Removed row: ['com.mysql.cj.ServerPreparedQuery:', 'void', 'storeStream(int,com.mysql.cj.protocol.a.NativePacketPayload,java.io.InputStream)', '3']
Removed row: ['com.mysql.cj.ServerPreparedQueryBindValue:', 'byte[]', 'getByteValue()', '1']
Removed row: ['com.mysql.cj.ServerPreparedQueryBindValue:', 'java.lang.String', 'toString(boolean)', '3']
Removed row: ['com.mysql.cj.ServerPreparedQueryBindValue:', 'long', 'getBoundLength()', '1']
Removed row: ['com.mysql.cj.ServerPreparedQueryBindValue:', 'void', 'storeBinding(com.mysql.cj.protocol.a.NativePacketPayload,boolean,java.lang.String,com.mysql.cj.exceptions.ExceptionInterceptor)', '6']
Removed row: ['com.mysql.cj.ServerPreparedQueryBindValue:', 'void', 'storeDateTime(com.mysql.cj.protocol.a.NativePacketPayload)', '1']
Removed row: ['com.mysql.cj.ServerPreparedQueryBindings:', 'void', 'setBigDecimal(int,java.math.BigDecimal)', '1']
Removed row: ['com.mysql.cj.ServerPreparedQueryBindings:', 'void', 'setBlob(int,java.sql.Blob)', '1']
Removed row: ['com.mysql.cj.ServerPreparedQueryBindings:', 'void', 'setClob(int,java.sql.Clob)', '2']
Removed row: ['com.mysql.cj.ServerPreparedQueryBindings:', 'void', 'setTimestamp(int,java.sql.Timestamp,java.util.Calendar,int)', '1']
Removed row: ['com.mysql.cj.jdbc.DatabaseMetaData$ComparableWrapper:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.mysql.cj.jdbc.DatabaseMetaData$ComparableWrapper:', 'int', 'compareTo(com.mysql.cj.jdbc.DatabaseMetaData$ComparableWrapper)', '1']
Removed row: ['com.mysql.cj.jdbc.MysqlSQLXML:', 'boolean', 'isEmpty()', '1']
Removed row: ['com.mysql.cj.jdbc.ServerPreparedStatement:', 'int', 'setOneBatchedParameterSet(java.sql.PreparedStatement,int,java.lang.Object)', '6']
Removed row: ['com.mysql.cj.jdbc.ServerPreparedStatement:', 'java.lang.String', 'asSql(boolean)', '6']
Removed row: ['com.mysql.cj.util.StringUtils:', 'byte[]', 'getBytes(java.lang.String)', '1']
Removed row: ['com.mysql.cj.util.StringUtils:', 'byte[]', 'getBytes(java.lang.String,java.lang.String)', '1']
Removed row: ['com.mysql.cj.util.StringUtils:', 'byte[]', 'getBytesWrapped(java.lang.String,char,char,java.lang.String)', '2']
Removed row: ['com.mysql.cj.util.Util:', 'int', 'readBlock(java.io.InputStream,byte[],com.mysql.cj.exceptions.ExceptionInterceptor)', '1']
Removed row: ['com.mysql.cj.util.Util:', 'int', 'readBlock(java.io.InputStream,byte[],int,com.mysql.cj.exceptions.ExceptionInterceptor)', '1']
Removed row: ['com.mysql.cj.util.Util:', 'int', 'readFully(java.io.Reader,char[],int)', '1']
Removed row: ['com.sun.beans.TypeResolver:', 'java.lang.reflect.Type', 'resolve(java.lang.reflect.Type,java.lang.reflect.Type)', '1']
Removed row: ['java.security.UnresolvedPermission:', 'void', '<init>(java.lang.String,java.lang.String,java.lang.String,java.security.cert.Certificate[])', '2']
Removed row: ['java.text.MessageFormat:', 'java.lang.StringBuffer', 'subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)', '1']
Removed row: ['java.util.concurrent.ConcurrentHashMap:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['net.sf.cglib.core.ClassInfo:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['net.sf.cglib.core.MethodInfo:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.apache.log4j.CategoryKey:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.assertj.core.api.AbstractAssert:', 'org.assertj.core.api.AbstractStringAssert', 'asString()', '1']
Removed row: ['org.assertj.core.api.AbstractCompletableFutureAssert:', 'org.assertj.core.api.AbstractCompletableFutureAssert', 'hasFailed()', '2']
Removed row: ['org.assertj.core.api.AbstractCompletableFutureAssert:', 'org.assertj.core.api.AbstractCompletableFutureAssert', 'hasNotFailed()', '2']
Removed row: ['org.assertj.core.api.AbstractCompletableFutureAssert:', 'org.assertj.core.api.AbstractCompletableFutureAssert', 'isCancelled()', '1']
Removed row: ['org.assertj.core.api.AbstractCompletableFutureAssert:', 'org.assertj.core.api.AbstractCompletableFutureAssert', 'isCompleted()', '2']
Removed row: ['org.assertj.core.api.AbstractCompletableFutureAssert:', 'org.assertj.core.api.AbstractCompletableFutureAssert', 'isCompletedExceptionally()', '1']
Removed row: ['org.assertj.core.api.AbstractCompletableFutureAssert:', 'org.assertj.core.api.AbstractCompletableFutureAssert', 'isCompletedWithValue(java.lang.Object)', '1']
Removed row: ['org.assertj.core.api.AbstractCompletableFutureAssert:', 'org.assertj.core.api.AbstractCompletableFutureAssert', 'isCompletedWithValueMatching(java.util.function.Predicate,org.assertj.core.presentation.PredicateDescription)', '1']
Removed row: ['org.assertj.core.api.AbstractCompletableFutureAssert:', 'org.assertj.core.api.AbstractCompletableFutureAssert', 'isDone()', '1']
Removed row: ['org.assertj.core.api.AbstractCompletableFutureAssert:', 'org.assertj.core.api.AbstractCompletableFutureAssert', 'isNotCancelled()', '1']
Removed row: ['org.assertj.core.api.AbstractCompletableFutureAssert:', 'org.assertj.core.api.AbstractCompletableFutureAssert', 'isNotCompleted()', '2']
Removed row: ['org.assertj.core.api.AbstractCompletableFutureAssert:', 'org.assertj.core.api.AbstractCompletableFutureAssert', 'isNotCompletedExceptionally()', '1']
Removed row: ['org.assertj.core.api.AbstractCompletableFutureAssert:', 'org.assertj.core.api.AbstractCompletableFutureAssert', 'isNotDone()', '1']
Removed row: ['org.assertj.core.api.AbstractCompletableFutureAssert:', 'org.assertj.core.api.AbstractThrowableAssert', 'hasFailedWithThrowableThat()', '1']
Removed row: ['org.assertj.core.api.AbstractDoubleAssert:', 'org.assertj.core.api.AbstractDoubleAssert', 'isEqualTo(double)', '2']
Removed row: ['org.assertj.core.api.AbstractDoubleAssert:', 'org.assertj.core.api.AbstractDoubleAssert', 'isGreaterThanOrEqualTo(double)', '1']
Removed row: ['org.assertj.core.api.AbstractDoubleAssert:', 'org.assertj.core.api.AbstractDoubleAssert', 'isLessThanOrEqualTo(double)', '1']
Removed row: ['org.assertj.core.api.AbstractDoubleAssert:', 'org.assertj.core.api.AbstractDoubleAssert', 'isNotEqualTo(double)', '1']
Removed row: ['org.assertj.core.api.AbstractDoubleAssert:', 'void', 'assertIsPrimitiveNonZero()', '1']
Removed row: ['org.assertj.core.api.AbstractDoubleAssert:', 'void', 'assertIsPrimitiveZero()', '1']
Removed row: ['org.assertj.core.api.AbstractDurationAssert:', 'org.assertj.core.api.AbstractDurationAssert', 'hasDays(long)', '1']
Removed row: ['org.assertj.core.api.AbstractDurationAssert:', 'org.assertj.core.api.AbstractDurationAssert', 'hasHours(long)', '1']
Removed row: ['org.assertj.core.api.AbstractDurationAssert:', 'org.assertj.core.api.AbstractDurationAssert', 'hasMillis(long)', '1']
Removed row: ['org.assertj.core.api.AbstractDurationAssert:', 'org.assertj.core.api.AbstractDurationAssert', 'hasMinutes(long)', '1']
Removed row: ['org.assertj.core.api.AbstractDurationAssert:', 'org.assertj.core.api.AbstractDurationAssert', 'hasNanos(long)', '1']
Removed row: ['org.assertj.core.api.AbstractDurationAssert:', 'org.assertj.core.api.AbstractDurationAssert', 'hasSeconds(long)', '1']
Removed row: ['org.assertj.core.api.AbstractFloatAssert:', 'org.assertj.core.api.AbstractFloatAssert', 'isEqualTo(float)', '2']
Removed row: ['org.assertj.core.api.AbstractFloatAssert:', 'org.assertj.core.api.AbstractFloatAssert', 'isGreaterThanOrEqualTo(float)', '1']
Removed row: ['org.assertj.core.api.AbstractFloatAssert:', 'org.assertj.core.api.AbstractFloatAssert', 'isLessThanOrEqualTo(float)', '1']
Removed row: ['org.assertj.core.api.AbstractFloatAssert:', 'org.assertj.core.api.AbstractFloatAssert', 'isNotEqualTo(float)', '1']
Removed row: ['org.assertj.core.api.AbstractFloatAssert:', 'void', 'assertIsPrimitiveNonZero()', '1']
Removed row: ['org.assertj.core.api.AbstractFloatAssert:', 'void', 'assertIsPrimitiveZero()', '1']
Removed row: ['org.assertj.core.api.AbstractInstantAssert:', 'org.assertj.core.api.AbstractInstantAssert', 'isAfter(java.time.Instant)', '1']
Removed row: ['org.assertj.core.api.AbstractInstantAssert:', 'org.assertj.core.api.AbstractInstantAssert', 'isAfterOrEqualTo(java.time.Instant)', '1']
Removed row: ['org.assertj.core.api.AbstractInstantAssert:', 'org.assertj.core.api.AbstractInstantAssert', 'isBefore(java.time.Instant)', '1']
Removed row: ['org.assertj.core.api.AbstractInstantAssert:', 'org.assertj.core.api.AbstractInstantAssert', 'isBeforeOrEqualTo(java.time.Instant)', '1']
Removed row: ['org.assertj.core.api.AbstractIterableAssert:', 'java.lang.Object', 'lastElement()', '3']
Removed row: ['org.assertj.core.api.AbstractIterableAssert:', 'org.assertj.core.api.AbstractAssert', 'internalElement(int)', '2']
Removed row: ['org.assertj.core.api.AbstractIterableAssert:', 'org.assertj.core.api.AbstractAssert', 'internalFirst()', '1']
Removed row: ['org.assertj.core.api.AbstractIterableAssert:', 'org.assertj.core.api.AbstractIterableAssert', 'filteredOnAssertions(java.util.function.Consumer)', '1']
Removed row: ['org.assertj.core.api.AbstractIterableAssert:', 'org.assertj.core.api.AbstractIterableAssert', 'hasOnlyOneElementSatisfying(java.util.function.Consumer)', '1']
Removed row: ['org.assertj.core.api.AbstractIterableAssert:', 'org.assertj.core.api.AbstractIterableAssert', 'internalFilteredOn(java.util.function.Predicate)', '1']
Removed row: ['org.assertj.core.api.AbstractIterableAssert:', 'org.assertj.core.api.AbstractListAssert', 'extracting(java.util.function.Function[])', '1']
Removed row: ['org.assertj.core.api.AbstractIterableAssert:', 'org.assertj.core.api.AbstractListAssert', 'flatExtracting(java.util.function.Function[])', '1']
Removed row: ['org.assertj.core.api.AbstractIterableAssert:', 'org.assertj.core.api.AbstractListAssert', 'flatExtracting(org.assertj.core.api.iterable.ThrowingExtractor[])', '1']
Removed row: ['org.assertj.core.api.AbstractLocalDateAssert:', 'org.assertj.core.api.AbstractLocalDateAssert', 'isAfter(java.time.LocalDate)', '1']
Removed row: ['org.assertj.core.api.AbstractLocalDateAssert:', 'org.assertj.core.api.AbstractLocalDateAssert', 'isAfterOrEqualTo(java.time.LocalDate)', '1']
Removed row: ['org.assertj.core.api.AbstractLocalDateAssert:', 'org.assertj.core.api.AbstractLocalDateAssert', 'isBefore(java.time.LocalDate)', '1']
Removed row: ['org.assertj.core.api.AbstractLocalDateAssert:', 'org.assertj.core.api.AbstractLocalDateAssert', 'isBeforeOrEqualTo(java.time.LocalDate)', '1']
Removed row: ['org.assertj.core.api.AbstractLocalDateAssert:', 'org.assertj.core.api.AbstractLocalDateAssert', 'isToday()', '1']
Removed row: ['org.assertj.core.api.AbstractLocalTimeAssert:', 'org.assertj.core.api.AbstractLocalTimeAssert', 'isAfter(java.time.LocalTime)', '1']
Removed row: ['org.assertj.core.api.AbstractLocalTimeAssert:', 'org.assertj.core.api.AbstractLocalTimeAssert', 'isAfterOrEqualTo(java.time.LocalTime)', '1']
Removed row: ['org.assertj.core.api.AbstractLocalTimeAssert:', 'org.assertj.core.api.AbstractLocalTimeAssert', 'isBefore(java.time.LocalTime)', '1']
Removed row: ['org.assertj.core.api.AbstractLocalTimeAssert:', 'org.assertj.core.api.AbstractLocalTimeAssert', 'isBeforeOrEqualTo(java.time.LocalTime)', '1']
Removed row: ['org.assertj.core.api.AbstractLongAdderAssert:', 'org.assertj.core.api.AbstractLongAdderAssert', 'doesNotHaveValue(long)', '1']
Removed row: ['org.assertj.core.api.AbstractLongAdderAssert:', 'org.assertj.core.api.AbstractLongAdderAssert', 'hasValue(long)', '1']
Removed row: ['org.assertj.core.api.AbstractLongAdderAssert:', 'org.assertj.core.api.AbstractLongAdderAssert', 'isBetween(java.lang.Long,java.lang.Long)', '1']
Removed row: ['org.assertj.core.api.AbstractLongAdderAssert:', 'org.assertj.core.api.AbstractLongAdderAssert', 'isCloseTo(java.lang.Long,org.assertj.core.data.Offset)', '1']
Removed row: ['org.assertj.core.api.AbstractLongAdderAssert:', 'org.assertj.core.api.AbstractLongAdderAssert', 'isCloseTo(java.lang.Long,org.assertj.core.data.Percentage)', '1']
Removed row: ['org.assertj.core.api.AbstractLongAdderAssert:', 'org.assertj.core.api.AbstractLongAdderAssert', 'isEqualByComparingTo(java.lang.Long)', '1']
Removed row: ['org.assertj.core.api.AbstractLongAdderAssert:', 'org.assertj.core.api.AbstractLongAdderAssert', 'isGreaterThan(java.lang.Long)', '1']
Removed row: ['org.assertj.core.api.AbstractLongAdderAssert:', 'org.assertj.core.api.AbstractLongAdderAssert', 'isGreaterThanOrEqualTo(java.lang.Long)', '1']
Removed row: ['org.assertj.core.api.AbstractLongAdderAssert:', 'org.assertj.core.api.AbstractLongAdderAssert', 'isLessThan(java.lang.Long)', '1']
Removed row: ['org.assertj.core.api.AbstractLongAdderAssert:', 'org.assertj.core.api.AbstractLongAdderAssert', 'isLessThanOrEqualTo(java.lang.Long)', '1']
Removed row: ['org.assertj.core.api.AbstractLongAdderAssert:', 'org.assertj.core.api.AbstractLongAdderAssert', 'isNegative()', '1']
Removed row: ['org.assertj.core.api.AbstractLongAdderAssert:', 'org.assertj.core.api.AbstractLongAdderAssert', 'isNotCloseTo(java.lang.Long,org.assertj.core.data.Offset)', '1']
Removed row: ['org.assertj.core.api.AbstractLongAdderAssert:', 'org.assertj.core.api.AbstractLongAdderAssert', 'isNotCloseTo(java.lang.Long,org.assertj.core.data.Percentage)', '1']
Removed row: ['org.assertj.core.api.AbstractLongAdderAssert:', 'org.assertj.core.api.AbstractLongAdderAssert', 'isNotEqualByComparingTo(java.lang.Long)', '1']
Removed row: ['org.assertj.core.api.AbstractLongAdderAssert:', 'org.assertj.core.api.AbstractLongAdderAssert', 'isNotNegative()', '1']
Removed row: ['org.assertj.core.api.AbstractLongAdderAssert:', 'org.assertj.core.api.AbstractLongAdderAssert', 'isNotPositive()', '1']
Removed row: ['org.assertj.core.api.AbstractLongAdderAssert:', 'org.assertj.core.api.AbstractLongAdderAssert', 'isNotZero()', '1']
Removed row: ['org.assertj.core.api.AbstractLongAdderAssert:', 'org.assertj.core.api.AbstractLongAdderAssert', 'isOne()', '1']
Removed row: ['org.assertj.core.api.AbstractLongAdderAssert:', 'org.assertj.core.api.AbstractLongAdderAssert', 'isPositive()', '1']
Removed row: ['org.assertj.core.api.AbstractLongAdderAssert:', 'org.assertj.core.api.AbstractLongAdderAssert', 'isStrictlyBetween(java.lang.Long,java.lang.Long)', '1']
Removed row: ['org.assertj.core.api.AbstractLongAdderAssert:', 'org.assertj.core.api.AbstractLongAdderAssert', 'isZero()', '1']
Removed row: ['org.assertj.core.api.AbstractMapAssert:', 'org.assertj.core.api.AbstractListAssert', 'extractingFromEntries(java.util.function.Function)', '1']
Removed row: ['org.assertj.core.api.AbstractMapAssert:', 'org.assertj.core.api.AbstractListAssert', 'extractingFromEntries(java.util.function.Function[])', '1']
Removed row: ['org.assertj.core.api.AbstractMapAssert:', 'org.assertj.core.api.AbstractMapSizeAssert', 'size()', '1']
Removed row: ['org.assertj.core.api.AbstractMapAssert:', 'org.assertj.core.api.AbstractObjectAssert', 'extracting(java.lang.Object)', '1']
Removed row: ['org.assertj.core.api.AbstractMapAssert:', 'org.assertj.core.api.AbstractObjectAssert', 'internalExtractingByKey(java.lang.Object)', '1']
Removed row: ['org.assertj.core.api.AbstractObjectArrayAssert:', 'java.lang.Object[]', 'toGenericArray(java.util.List)', '1']
Removed row: ['org.assertj.core.api.AbstractOffsetDateTimeAssert:', 'org.assertj.core.api.AbstractOffsetDateTimeAssert', 'isAtSameInstantAs(java.time.OffsetDateTime)', '1']
Removed row: ['org.assertj.core.api.AbstractOffsetTimeAssert:', 'org.assertj.core.api.AbstractOffsetTimeAssert', 'isAfter(java.time.OffsetTime)', '1']
Removed row: ['org.assertj.core.api.AbstractOffsetTimeAssert:', 'org.assertj.core.api.AbstractOffsetTimeAssert', 'isAfterOrEqualTo(java.time.OffsetTime)', '1']
Removed row: ['org.assertj.core.api.AbstractOffsetTimeAssert:', 'org.assertj.core.api.AbstractOffsetTimeAssert', 'isBefore(java.time.OffsetTime)', '1']
Removed row: ['org.assertj.core.api.AbstractOffsetTimeAssert:', 'org.assertj.core.api.AbstractOffsetTimeAssert', 'isBeforeOrEqualTo(java.time.OffsetTime)', '1']
Removed row: ['org.assertj.core.api.AbstractOptionalAssert:', 'org.assertj.core.api.AbstractObjectAssert', 'internalGet()', '1']
Removed row: ['org.assertj.core.api.AbstractOptionalAssert:', 'org.assertj.core.api.AbstractOptionalAssert', 'contains(java.lang.Object)', '3']
Removed row: ['org.assertj.core.api.AbstractOptionalAssert:', 'org.assertj.core.api.AbstractOptionalAssert', 'containsInstanceOf(java.lang.Class)', '1']
Removed row: ['org.assertj.core.api.AbstractOptionalAssert:', 'org.assertj.core.api.AbstractOptionalAssert', 'containsSame(java.lang.Object)', '2']
Removed row: ['org.assertj.core.api.AbstractOptionalAssert:', 'org.assertj.core.api.AbstractOptionalAssert', 'flatMap(java.util.function.Function)', '1']
Removed row: ['org.assertj.core.api.AbstractOptionalAssert:', 'org.assertj.core.api.AbstractOptionalAssert', 'hasValueSatisfying(java.util.function.Consumer)', '1']
Removed row: ['org.assertj.core.api.AbstractOptionalAssert:', 'org.assertj.core.api.AbstractOptionalAssert', 'hasValueSatisfying(org.assertj.core.api.Condition)', '1']
Removed row: ['org.assertj.core.api.AbstractOptionalAssert:', 'org.assertj.core.api.AbstractOptionalAssert', 'isEmpty()', '1']
Removed row: ['org.assertj.core.api.AbstractOptionalAssert:', 'org.assertj.core.api.AbstractOptionalAssert', 'map(java.util.function.Function)', '1']
Removed row: ['org.assertj.core.api.AbstractOptionalAssert:', 'void', 'assertValueIsPresent()', '1']
Removed row: ['org.assertj.core.api.AbstractOptionalDoubleAssert:', 'org.assertj.core.api.AbstractOptionalDoubleAssert', 'hasValue(double)', '3']
Removed row: ['org.assertj.core.api.AbstractOptionalDoubleAssert:', 'org.assertj.core.api.AbstractOptionalDoubleAssert', 'hasValueCloseTo(java.lang.Double,org.assertj.core.data.Offset)', '3']
Removed row: ['org.assertj.core.api.AbstractOptionalDoubleAssert:', 'org.assertj.core.api.AbstractOptionalDoubleAssert', 'hasValueCloseTo(java.lang.Double,org.assertj.core.data.Percentage)', '3']
Removed row: ['org.assertj.core.api.AbstractOptionalDoubleAssert:', 'org.assertj.core.api.AbstractOptionalDoubleAssert', 'isEmpty()', '1']
Removed row: ['org.assertj.core.api.AbstractOptionalDoubleAssert:', 'org.assertj.core.api.AbstractOptionalDoubleAssert', 'isPresent()', '1']
Removed row: ['org.assertj.core.api.AbstractOptionalIntAssert:', 'org.assertj.core.api.AbstractOptionalIntAssert', 'hasValue(int)', '3']
Removed row: ['org.assertj.core.api.AbstractOptionalIntAssert:', 'org.assertj.core.api.AbstractOptionalIntAssert', 'isEmpty()', '1']
Removed row: ['org.assertj.core.api.AbstractOptionalIntAssert:', 'org.assertj.core.api.AbstractOptionalIntAssert', 'isPresent()', '1']
Removed row: ['org.assertj.core.api.AbstractOptionalLongAssert:', 'org.assertj.core.api.AbstractOptionalLongAssert', 'hasValue(long)', '3']
Removed row: ['org.assertj.core.api.AbstractOptionalLongAssert:', 'org.assertj.core.api.AbstractOptionalLongAssert', 'isEmpty()', '1']
Removed row: ['org.assertj.core.api.AbstractOptionalLongAssert:', 'org.assertj.core.api.AbstractOptionalLongAssert', 'isPresent()', '1']
Removed row: ['org.assertj.core.api.AbstractPeriodAssert:', 'org.assertj.core.api.AbstractPeriodAssert', 'hasDays(int)', '1']
Removed row: ['org.assertj.core.api.AbstractPeriodAssert:', 'org.assertj.core.api.AbstractPeriodAssert', 'hasMonths(int)', '1']
Removed row: ['org.assertj.core.api.AbstractPeriodAssert:', 'org.assertj.core.api.AbstractPeriodAssert', 'hasYears(int)', '1']
Removed row: ['org.assertj.core.api.AbstractPeriodAssert:', 'org.assertj.core.api.AbstractPeriodAssert', 'isNegative()', '1']
Removed row: ['org.assertj.core.api.AbstractPeriodAssert:', 'org.assertj.core.api.AbstractPeriodAssert', 'isPositive()', '1']
Removed row: ['org.assertj.core.api.AbstractPredicateAssert:', 'org.assertj.core.api.AbstractPredicateAssert', 'accepts(java.lang.Object[])', '1']
Removed row: ['org.assertj.core.api.AbstractPredicateAssert:', 'org.assertj.core.api.AbstractPredicateAssert', 'rejects(java.lang.Object[])', '1']
Removed row: ['org.assertj.core.api.AbstractThrowableAssert:', 'org.assertj.core.api.AbstractThrowableAssert', 'getCause()', '1']
Removed row: ['org.assertj.core.api.AbstractZonedDateTimeAssert:', 'java.time.ZonedDateTime', 'sameInstantInActualTimeZone(java.time.ZonedDateTime)', '1']
Removed row: ['org.assertj.core.api.AtomicBooleanAssert:', 'void', 'assertEqual(boolean)', '1']
Removed row: ['org.assertj.core.api.AtomicIntegerAssert:', 'org.assertj.core.api.AtomicIntegerAssert', 'doesNotHaveValue(int)', '1']
Removed row: ['org.assertj.core.api.AtomicIntegerAssert:', 'org.assertj.core.api.AtomicIntegerAssert', 'hasNegativeValue()', '1']
Removed row: ['org.assertj.core.api.AtomicIntegerAssert:', 'org.assertj.core.api.AtomicIntegerAssert', 'hasNonNegativeValue()', '1']
Removed row: ['org.assertj.core.api.AtomicIntegerAssert:', 'org.assertj.core.api.AtomicIntegerAssert', 'hasNonPositiveValue()', '1']
Removed row: ['org.assertj.core.api.AtomicIntegerAssert:', 'org.assertj.core.api.AtomicIntegerAssert', 'hasPositiveValue()', '1']
Removed row: ['org.assertj.core.api.AtomicIntegerAssert:', 'org.assertj.core.api.AtomicIntegerAssert', 'hasValue(int)', '1']
Removed row: ['org.assertj.core.api.AtomicIntegerAssert:', 'org.assertj.core.api.AtomicIntegerAssert', 'hasValueBetween(int,int)', '1']
Removed row: ['org.assertj.core.api.AtomicIntegerAssert:', 'org.assertj.core.api.AtomicIntegerAssert', 'hasValueCloseTo(int,org.assertj.core.data.Offset)', '1']
Removed row: ['org.assertj.core.api.AtomicIntegerAssert:', 'org.assertj.core.api.AtomicIntegerAssert', 'hasValueCloseTo(int,org.assertj.core.data.Percentage)', '1']
Removed row: ['org.assertj.core.api.AtomicIntegerAssert:', 'org.assertj.core.api.AtomicIntegerAssert', 'hasValueGreaterThan(int)', '1']
Removed row: ['org.assertj.core.api.AtomicIntegerAssert:', 'org.assertj.core.api.AtomicIntegerAssert', 'hasValueGreaterThanOrEqualTo(int)', '1']
Removed row: ['org.assertj.core.api.AtomicIntegerAssert:', 'org.assertj.core.api.AtomicIntegerAssert', 'hasValueLessThan(int)', '1']
Removed row: ['org.assertj.core.api.AtomicIntegerAssert:', 'org.assertj.core.api.AtomicIntegerAssert', 'hasValueLessThanOrEqualTo(int)', '1']
Removed row: ['org.assertj.core.api.AtomicIntegerFieldUpdaterAssert:', 'java.lang.Integer', 'getActualValue(java.lang.Object)', '1']
Removed row: ['org.assertj.core.api.AtomicLongAssert:', 'org.assertj.core.api.AtomicLongAssert', 'doesNotHaveValue(long)', '1']
Removed row: ['org.assertj.core.api.AtomicLongAssert:', 'org.assertj.core.api.AtomicLongAssert', 'hasNegativeValue()', '1']
Removed row: ['org.assertj.core.api.AtomicLongAssert:', 'org.assertj.core.api.AtomicLongAssert', 'hasNonNegativeValue()', '1']
Removed row: ['org.assertj.core.api.AtomicLongAssert:', 'org.assertj.core.api.AtomicLongAssert', 'hasNonPositiveValue()', '1']
Removed row: ['org.assertj.core.api.AtomicLongAssert:', 'org.assertj.core.api.AtomicLongAssert', 'hasPositiveValue()', '1']
Removed row: ['org.assertj.core.api.AtomicLongAssert:', 'org.assertj.core.api.AtomicLongAssert', 'hasValue(long)', '1']
Removed row: ['org.assertj.core.api.AtomicLongAssert:', 'org.assertj.core.api.AtomicLongAssert', 'hasValueBetween(long,long)', '1']
Removed row: ['org.assertj.core.api.AtomicLongAssert:', 'org.assertj.core.api.AtomicLongAssert', 'hasValueCloseTo(long,org.assertj.core.data.Offset)', '1']
Removed row: ['org.assertj.core.api.AtomicLongAssert:', 'org.assertj.core.api.AtomicLongAssert', 'hasValueCloseTo(long,org.assertj.core.data.Percentage)', '1']
Removed row: ['org.assertj.core.api.AtomicLongAssert:', 'org.assertj.core.api.AtomicLongAssert', 'hasValueGreaterThan(long)', '1']
Removed row: ['org.assertj.core.api.AtomicLongAssert:', 'org.assertj.core.api.AtomicLongAssert', 'hasValueGreaterThanOrEqualTo(long)', '1']
Removed row: ['org.assertj.core.api.AtomicLongAssert:', 'org.assertj.core.api.AtomicLongAssert', 'hasValueLessThan(long)', '1']
Removed row: ['org.assertj.core.api.AtomicLongAssert:', 'org.assertj.core.api.AtomicLongAssert', 'hasValueLessThanOrEqualTo(long)', '1']
Removed row: ['org.assertj.core.api.AtomicLongFieldUpdaterAssert:', 'java.lang.Long', 'getActualValue(java.lang.Object)', '1']
Removed row: ['org.assertj.core.api.AtomicMarkableReferenceAssert:', 'java.lang.Object', 'getReference()', '1']
Removed row: ['org.assertj.core.api.AtomicMarkableReferenceAssert:', 'org.assertj.core.api.AtomicMarkableReferenceAssert', 'isMarked()', '1']
Removed row: ['org.assertj.core.api.AtomicMarkableReferenceAssert:', 'org.assertj.core.api.AtomicMarkableReferenceAssert', 'isNotMarked()', '1']
Removed row: ['org.assertj.core.api.AtomicReferenceAssert:', 'org.assertj.core.api.AtomicReferenceAssert', 'doesNotHaveValue(java.lang.Object)', '1']
Removed row: ['org.assertj.core.api.AtomicReferenceAssert:', 'org.assertj.core.api.AtomicReferenceAssert', 'hasValue(java.lang.Object)', '1']
Removed row: ['org.assertj.core.api.AtomicReferenceFieldUpdaterAssert:', 'java.lang.Object', 'getActualValue(java.lang.Object)', '1']
Removed row: ['org.assertj.core.api.AtomicStampedReferenceAssert:', 'java.lang.Object', 'getReference()', '1']
Removed row: ['org.assertj.core.api.AtomicStampedReferenceAssert:', 'org.assertj.core.api.AtomicStampedReferenceAssert', 'hasStamp(int)', '1']
Removed row: ['org.assertj.core.error.ShouldBeInstance:', 'void', '<init>(java.lang.Object,java.lang.Class)', '1']
Removed row: ['org.assertj.core.error.ShouldContainCharSequence:', 'org.assertj.core.error.ErrorMessageFactory', 'shouldContain(java.lang.Throwable,java.lang.CharSequence)', '1']
Removed row: ['org.assertj.core.error.ShouldHaveMessage:', 'void', '<init>(java.lang.Throwable,java.lang.String)', '1']
Removed row: ['org.assertj.core.error.ShouldHaveMessageMatchingRegex:', 'void', '<init>(java.lang.Throwable,java.lang.CharSequence)', '1']
Removed row: ['org.assertj.core.internal.Booleans:', 'void', 'assertEqual(org.assertj.core.api.AssertionInfo,java.lang.Boolean,boolean)', '1']
Removed row: ['org.assertj.core.internal.IterableElementComparisonStrategy:', 'boolean', 'compareElementsOf(java.lang.Iterable,java.lang.Iterable)', '1']
Removed row: ['org.assertj.core.internal.Strings:', 'boolean', 'hasContent(java.lang.CharSequence)', '1']
Removed row: ['org.assertj.core.internal.Strings:', 'java.lang.String', 'removeAllWhitespaces(java.lang.CharSequence)', '3']
Removed row: ['org.assertj.core.internal.Strings:', 'void', 'assertStartsWith(org.assertj.core.api.AssertionInfo,java.lang.CharSequence,java.lang.CharSequence)', '1']
Removed row: ['org.assertj.core.internal.Throwables:', 'void', 'assertHasMessage(org.assertj.core.api.AssertionInfo,java.lang.Throwable,java.lang.String)', '2']
Removed row: ['org.assertj.core.internal.Throwables:', 'void', 'assertHasMessageContaining(org.assertj.core.api.AssertionInfo,java.lang.Throwable,java.lang.String)', '2']
Removed row: ['org.assertj.core.internal.Throwables:', 'void', 'assertHasMessageEndingWith(org.assertj.core.api.AssertionInfo,java.lang.Throwable,java.lang.String)', '3']
Removed row: ['org.assertj.core.internal.Throwables:', 'void', 'assertHasMessageMatching(org.assertj.core.api.AssertionInfo,java.lang.Throwable,java.lang.String)', '2']
Removed row: ['org.assertj.core.internal.Throwables:', 'void', 'assertHasMessageStartingWith(org.assertj.core.api.AssertionInfo,java.lang.Throwable,java.lang.String)', '3']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'boolean', 'hasCustomFormatterFor(java.lang.Object)', '1']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.Object', 'classNameOf(java.lang.Object)', '3']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'classNameDisambiguation(java.lang.Object)', '1']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'customFormat(java.lang.Object)', '1']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'defaultToStringWithClassNameDisambiguation(java.lang.Object)', '1']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'fallbackToStringOf(java.lang.Object)', '1']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'format(java.lang.Iterable,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)', '1']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'toStringOf(java.io.File)', '1']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'toStringOf(java.lang.Class)', '1']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'toStringOf(java.lang.Number)', '1']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'toStringOf(java.lang.Object)', '1']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'toStringOf(java.text.SimpleDateFormat)', '1']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'toStringOf(java.time.Duration)', '1']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'toStringOf(java.util.Comparator)', '5']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'toStringOf(java.util.Map)', '1']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'toStringOf(java.util.concurrent.Future)', '3']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'toStringOf(java.util.concurrent.atomic.AtomicBoolean)', '1']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'toStringOf(java.util.concurrent.atomic.AtomicInteger)', '1']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'toStringOf(java.util.concurrent.atomic.AtomicLong)', '1']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'toStringOf(java.util.concurrent.atomic.AtomicMarkableReference)', '2']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'toStringOf(java.util.concurrent.atomic.AtomicReference)', '1']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'toStringOf(java.util.concurrent.atomic.AtomicStampedReference)', '2']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'toStringOf(java.util.concurrent.atomic.LongAdder)', '1']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'toStringOf(org.assertj.core.groups.Tuple)', '1']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'toStringOf(org.assertj.core.internal.ComparatorBasedComparisonStrategy)', '2']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'toStringOf(org.assertj.core.presentation.PredicateDescription)', '1']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'toStringOf(org.assertj.core.util.diff.ChangeDelta)', '3']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'toStringOf(org.assertj.core.util.diff.DeleteDelta)', '2']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'toStringOf(org.assertj.core.util.diff.InsertDelta)', '2']
Removed row: ['org.assertj.core.util.Arrays:', 'boolean', 'isArray(java.lang.Object)', '1']
Removed row: ['org.assertj.core.util.Arrays:', 'boolean', 'isArrayTypePrimitive(java.lang.Object)', '1']
Removed row: ['org.assertj.core.util.DateUtil:', 'java.lang.String', 'formatAsDatetime(java.util.Calendar)', '1']
Removed row: ['org.assertj.core.util.IterableUtil:', 'int', 'sizeOf(java.lang.Iterable)', '1']
Removed row: ['org.assertj.core.util.Streams:', 'java.util.stream.Stream', 'stream(java.lang.Iterable)', '2']
Removed row: ['org.assertj.core.util.Throwables:', 'java.lang.String', 'getStackTrace(java.lang.Throwable)', '1']
Removed row: ['org.h2.api.TimestampWithTimeZone:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.h2.jdbc.JdbcArray:', 'void', '<init>(org.h2.jdbc.JdbcConnection,org.h2.value.Value,int)', '1']
Removed row: ['org.h2.jdbc.JdbcConnection:', 'org.h2.jdbc.JdbcConnection$Settings', 'getSettings()', '5']
Removed row: ['org.h2.jdbc.JdbcPreparedStatement:', 'void', 'setArray(int,java.sql.Array)', '1']
Removed row: ['org.h2.jdbc.JdbcPreparedStatement:', 'void', 'setObject(int,java.lang.Object,int)', '1']
Removed row: ['org.h2.jdbc.JdbcResultSet:', 'java.lang.Object', 'extractObjectOfType(java.lang.Class,org.h2.value.Value)', '1']
Removed row: ['org.h2.message.TraceObject:', 'java.lang.String', 'quoteBigDecimal(java.math.BigDecimal)', '1']
Removed row: ['org.h2.message.TraceObject:', 'java.lang.String', 'quoteDate(java.sql.Date)', '1']
Removed row: ['org.h2.message.TraceObject:', 'java.lang.String', 'quoteTime(java.sql.Time)', '1']
Removed row: ['org.h2.message.TraceObject:', 'java.lang.String', 'quoteTimestamp(java.sql.Timestamp)', '1']
Removed row: ['org.h2.result.SimpleResult$Column:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.h2.util.DateTimeUtils:', 'int', 'parseNanos(java.lang.String,int,int)', '1']
Removed row: ['org.h2.util.IntervalUtils:', 'int', 'skipWS(java.lang.String,int)', '2']
Removed row: ['org.h2.util.IntervalUtils:', 'int', 'skipWSEnd(java.lang.String,int)', '2']
Removed row: ['org.h2.util.IntervalUtils:', 'long', 'parseIntervalLeading(java.lang.String,int,int,boolean)', '2']
Removed row: ['org.h2.util.IntervalUtils:', 'long', 'parseIntervalRemainingSeconds(java.lang.String,int)', '3']
Removed row: ['org.h2.util.IntervalUtils:', 'org.h2.value.ValueInterval', 'parseFormattedInterval(org.h2.api.IntervalQualifier,java.lang.String)', '24']
Removed row: ['org.h2.util.IntervalUtils:', 'org.h2.value.ValueInterval', 'parseInterval(org.h2.api.IntervalQualifier,boolean,java.lang.String)', '21']
Removed row: ['org.h2.util.IntervalUtils:', 'org.h2.value.ValueInterval', 'parseInterval2(org.h2.api.IntervalQualifier,java.lang.String,char,int,boolean)', '3']
Removed row: ['org.h2.util.JSR310Utils:', 'org.h2.value.Value', 'instantToValue(java.lang.Object)', '2']
Removed row: ['org.h2.util.JSR310Utils:', 'org.h2.value.Value', 'localDateTimeToValue(java.lang.Object)', '2']
Removed row: ['org.h2.util.JSR310Utils:', 'org.h2.value.Value', 'localDateToValue(java.lang.Object)', '3']
Removed row: ['org.h2.util.JSR310Utils:', 'org.h2.value.Value', 'localTimeToValue(java.lang.Object)', '1']
Removed row: ['org.h2.util.JSR310Utils:', 'org.h2.value.ValueInterval', 'durationToValue(java.lang.Object)', '2']
Removed row: ['org.h2.util.JSR310Utils:', 'org.h2.value.ValueInterval', 'periodToValue(java.lang.Object)', '3']
Removed row: ['org.h2.util.JSR310Utils:', 'org.h2.value.ValueTimeTimeZone', 'offsetTimeToValue(java.lang.Object)', '2']
Removed row: ['org.h2.util.JSR310Utils:', 'org.h2.value.ValueTimestampTimeZone', 'offsetDateTimeToValue(java.lang.Object)', '2']
Removed row: ['org.h2.util.JSR310Utils:', 'org.h2.value.ValueTimestampTimeZone', 'zonedDateTimeToValue(java.lang.Object)', '2']
Removed row: ['org.h2.util.StringUtils:', 'int', 'parseUInt31(java.lang.String,int,int)', '4']
Removed row: ['org.h2.util.StringUtils:', 'java.lang.String', 'cache(java.lang.String)', '3']
Removed row: ['org.h2.util.StringUtils:', 'java.lang.String', 'quoteJavaString(java.lang.String)', '1']
Removed row: ['org.h2.util.StringUtils:', 'java.lang.String', 'toUpperEnglish(java.lang.String)', '4']
Removed row: ['org.h2.util.StringUtils:', 'java.lang.StringBuilder', 'quoteStringSQL(java.lang.StringBuilder,java.lang.String)', '2']
Removed row: ['org.h2.util.StringUtils:', 'void', 'javaEncode(java.lang.String,java.lang.StringBuilder,boolean)', '2']
Removed row: ['org.h2.util.geometry.EWKTUtils$EWKTSource:', 'boolean', 'hasCoordinate()', '2']
Removed row: ['org.h2.util.geometry.EWKTUtils$EWKTSource:', 'boolean', 'hasData()', '1']
Removed row: ['org.h2.util.geometry.EWKTUtils$EWKTSource:', 'boolean', 'hasMoreCoordinates()', '2']
Removed row: ['org.h2.util.geometry.EWKTUtils$EWKTSource:', 'boolean', 'readEmpty()', '2']
Removed row: ['org.h2.util.geometry.EWKTUtils$EWKTSource:', 'double', 'readCoordinate()', '4']
Removed row: ['org.h2.util.geometry.EWKTUtils$EWKTSource:', 'int', 'getItemCount()', '2']
Removed row: ['org.h2.util.geometry.EWKTUtils$EWKTSource:', 'int', 'match(java.lang.String,int)', '2']
Removed row: ['org.h2.util.geometry.EWKTUtils$EWKTSource:', 'int', 'readDimensionSystem()', '3']
Removed row: ['org.h2.util.geometry.EWKTUtils$EWKTSource:', 'int', 'readSRID()', '4']
Removed row: ['org.h2.util.geometry.EWKTUtils$EWKTSource:', 'int', 'readType()', '2']
Removed row: ['org.h2.util.geometry.EWKTUtils$EWKTSource:', 'java.lang.String', 'toString()', '2']
Removed row: ['org.h2.util.geometry.EWKTUtils$EWKTSource:', 'void', 'checkStringEnd(int)', '1']
Removed row: ['org.h2.util.geometry.EWKTUtils$EWKTSource:', 'void', 'read(char)', '2']
Removed row: ['org.h2.util.geometry.EWKTUtils$EWKTSource:', 'void', 'skipWS()', '2']
Removed row: ['org.h2.util.json.JSONByteArrayTarget:', 'java.io.ByteArrayOutputStream', 'encodeString(java.io.ByteArrayOutputStream,java.lang.String)', '3']
Removed row: ['org.h2.value.DataType:', 'boolean', 'isGeometry(java.lang.Object)', '1']
Removed row: ['org.h2.value.DataType:', 'int', 'convertSQLTypeToValueType(int,java.lang.String)', '3']
Removed row: ['org.h2.value.DataType:', 'org.h2.value.Value', 'convertToValue1(org.h2.engine.SessionInterface,java.lang.Object,int)', '20']
Removed row: ['org.h2.value.Value:', 'long', 'convertToLong(java.math.BigDecimal,java.lang.Object)', '4']
Removed row: ['org.h2.value.Value:', 'org.h2.value.ValueBoolean', 'convertToBoolean()', '8']
Removed row: ['org.h2.value.Value:', 'org.h2.value.ValueByte', 'convertToByte(java.lang.Object)', '1']
Removed row: ['org.h2.value.Value:', 'org.h2.value.ValueBytes', 'convertToBytes(org.h2.engine.CastDataProvider)', '2']
Removed row: ['org.h2.value.Value:', 'org.h2.value.ValueDate', 'convertToDate()', '1']
Removed row: ['org.h2.value.Value:', 'org.h2.value.ValueDecimal', 'convertToDecimal()', '1']
Removed row: ['org.h2.value.Value:', 'org.h2.value.ValueDouble', 'convertToDouble()', '2']
Removed row: ['org.h2.value.Value:', 'org.h2.value.ValueFloat', 'convertToFloat()', '2']
Removed row: ['org.h2.value.Value:', 'org.h2.value.ValueInt', 'convertToInt(java.lang.Object)', '1']
Removed row: ['org.h2.value.Value:', 'org.h2.value.ValueJavaObject', 'convertToJavaObject()', '1']
Removed row: ['org.h2.value.Value:', 'org.h2.value.ValueLobDb', 'convertToBlob()', '1']
Removed row: ['org.h2.value.Value:', 'org.h2.value.ValueLobDb', 'convertToClob()', '1']
Removed row: ['org.h2.value.Value:', 'org.h2.value.ValueLong', 'convertToLong(java.lang.Object)', '1']
Removed row: ['org.h2.value.Value:', 'org.h2.value.ValueShort', 'convertToShort(java.lang.Object)', '1']
Removed row: ['org.h2.value.Value:', 'org.h2.value.ValueTime', 'convertToTime(org.h2.engine.CastDataProvider,boolean)', '1']
Removed row: ['org.h2.value.Value:', 'org.h2.value.ValueTimeTimeZone', 'convertToTimeTimeZone(org.h2.engine.CastDataProvider,boolean)', '1']
Removed row: ['org.h2.value.Value:', 'org.h2.value.ValueTimestamp', 'convertToTimestamp(org.h2.engine.CastDataProvider,boolean)', '1']
Removed row: ['org.h2.value.Value:', 'org.h2.value.ValueTimestampTimeZone', 'convertToTimestampTimeZone(org.h2.engine.CastDataProvider,boolean)', '1']
Removed row: ['org.h2.value.ValueDate:', 'org.h2.value.ValueDate', 'get(java.util.TimeZone,java.sql.Date)', '1']
Removed row: ['org.h2.value.ValueDecimal:', 'boolean', 'checkPrecision(long)', '1']
Removed row: ['org.h2.value.ValueDecimal:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.h2.value.ValueDecimal:', 'int', 'compareTypeSafe(org.h2.value.Value,org.h2.value.CompareMode,org.h2.engine.CastDataProvider)', '1']
Removed row: ['org.h2.value.ValueDecimal:', 'int', 'getMemory()', '1']
Removed row: ['org.h2.value.ValueDecimal:', 'int', 'getSignum()', '1']
Removed row: ['org.h2.value.ValueDecimal:', 'int', 'hashCode()', '1']
Removed row: ['org.h2.value.ValueDecimal:', 'java.lang.String', 'getString()', '1']
Removed row: ['org.h2.value.ValueDecimal:', 'org.h2.value.TypeInfo', 'getType()', '2']
Removed row: ['org.h2.value.ValueDecimal:', 'org.h2.value.Value', 'add(org.h2.value.Value)', '1']
Removed row: ['org.h2.value.ValueDecimal:', 'org.h2.value.Value', 'convertPrecision(long)', '2']
Removed row: ['org.h2.value.ValueDecimal:', 'org.h2.value.Value', 'convertScale(boolean,int)', '2']
Removed row: ['org.h2.value.ValueDecimal:', 'org.h2.value.Value', 'divide(org.h2.value.Value)', '3']
Removed row: ['org.h2.value.ValueDecimal:', 'org.h2.value.Value', 'multiply(org.h2.value.Value)', '1']
Removed row: ['org.h2.value.ValueDecimal:', 'org.h2.value.Value', 'negate()', '1']
Removed row: ['org.h2.value.ValueDecimal:', 'org.h2.value.Value', 'subtract(org.h2.value.Value)', '1']
Removed row: ['org.h2.value.ValueDecimal:', 'org.h2.value.ValueDecimal', 'get(java.math.BigInteger)', '1']
Removed row: ['org.h2.value.ValueDecimal:', 'org.h2.value.ValueDecimal', 'modulus(org.h2.value.Value)', '2']
Removed row: ['org.h2.value.ValueDecimal:', 'void', '<init>(java.math.BigDecimal)', '2']
Removed row: ['org.h2.value.ValueJavaObject$NotSerialized:', 'boolean', 'equals(java.lang.Object)', '2']
Removed row: ['org.h2.value.ValueJavaObject$NotSerialized:', 'int', 'hashCode()', '1']
Removed row: ['org.h2.value.ValueJavaObject$NotSerialized:', 'java.lang.String', 'getString()', '1']
Removed row: ['org.h2.value.ValueJavaObject$NotSerialized:', 'org.h2.value.TypeInfo', 'createType(java.lang.String)', '1']
Removed row: ['org.h2.value.ValueJson:', 'org.h2.value.ValueJson', 'get(java.lang.String)', '1']
Removed row: ['org.h2.value.ValueJson:', 'org.h2.value.ValueJson', 'get(java.math.BigDecimal)', '3']
Removed row: ['org.h2.value.ValueLob:', 'int', 'compare(org.h2.value.Value,org.h2.value.Value)', '6']
Removed row: ['org.h2.value.ValueLobDb:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.h2.value.ValueResultSet:', 'org.h2.value.ValueResultSet', 'get(org.h2.engine.SessionInterface,java.sql.ResultSet,int)', '3']
Removed row: ['org.h2.value.ValueString:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.h2.value.ValueString:', 'int', 'getMemory()', '1']
Removed row: ['org.h2.value.ValueString:', 'int', 'hashCode()', '1']
Removed row: ['org.h2.value.ValueString:', 'org.h2.value.TypeInfo', 'getType()', '1']
Removed row: ['org.h2.value.ValueString:', 'org.h2.value.Value', 'convertPrecision(long)', '2']
Removed row: ['org.h2.value.ValueString:', 'org.h2.value.Value', 'get(java.lang.String,org.h2.engine.CastDataProvider)', '2']
Removed row: ['org.h2.value.ValueStringFixed:', 'java.lang.String', 'trimRight(java.lang.String,int)', '3']
Removed row: ['org.h2.value.ValueStringFixed:', 'org.h2.value.ValueStringFixed', 'get(java.lang.String)', '1']
Removed row: ['org.h2.value.ValueStringIgnoreCase:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.h2.value.ValueStringIgnoreCase:', 'int', 'hashCode()', '1']
Removed row: ['org.h2.value.ValueStringIgnoreCase:', 'org.h2.value.ValueStringIgnoreCase', 'get(java.lang.String)', '2']
Removed row: ['org.h2.value.ValueTime:', 'org.h2.value.ValueTime', 'get(java.util.TimeZone,java.sql.Time)', '1']
Removed row: ['org.h2.value.ValueTimestamp:', 'org.h2.value.ValueTimestamp', 'get(java.util.TimeZone,java.sql.Timestamp)', '2']
Removed row: ['org.h2.value.ValueTimestampTimeZone:', 'org.h2.value.ValueTimestampTimeZone', 'get(org.h2.api.TimestampWithTimeZone)', '3']
Removed row: ['org.h2.value.ValueUuid:', 'org.h2.value.ValueUuid', 'get(java.lang.String)', '2']
Removed row: ['org.h2.value.ValueUuid:', 'org.h2.value.ValueUuid', 'get(java.util.UUID)', '2']
Removed row: ['org.junit.Assert:', 'java.lang.String', 'format(java.lang.String,java.lang.Object,java.lang.Object)', '1']
Removed row: ['org.junit.jupiter.api.AssertionUtils:', 'boolean', 'objectsAreEqual(java.lang.Object,java.lang.Object)', '1']
Removed row: ['org.junit.jupiter.api.AssertionUtils:', 'java.lang.String', 'formatValues(java.lang.Object,java.lang.Object)', '1']
Removed row: ['org.junit.jupiter.api.AssertionUtils:', 'java.lang.String', 'getCanonicalName(java.lang.Class)', '3']
Removed row: ['org.junit.jupiter.api.AssertionUtils:', 'java.lang.String', 'getClassName(java.lang.Object)', '1']
Removed row: ['org.junit.platform.commons.util.StringUtils:', 'java.lang.String', 'defaultToString(java.lang.Object)', '1']
Removed row: ['org.junit.platform.commons.util.StringUtils:', 'java.lang.String', 'nullSafeToString(java.lang.Object)', '3']
Removed row: ['org.mockito.internal.MockitoCore:', 'java.lang.Object', 'verify(java.lang.Object,org.mockito.verification.VerificationMode)', '1']
Removed row: ['org.mockito.internal.util.DefaultMockingDetails:', 'void', 'assertGoodMock()', '1']
Removed row: ['org.mockito.internal.util.MockUtil:', 'org.mockito.invocation.MockHandler', 'getMockHandler(java.lang.Object)', '1']
Removed row: ['org.opentest4j.ValueWrapper:', 'org.opentest4j.ValueWrapper', 'create(java.lang.Object,java.lang.String)', '1']
Removed row: ['org.opentest4j.ValueWrapper:', 'void', '<init>(java.lang.Object,java.lang.String)', '1']
Removed row: ['org.postgresql.Driver:', 'org.postgresql.util.HostSpec[]', 'hostSpecs(java.util.Properties)', '2']
Removed row: ['org.postgresql.core.BaseQueryKey:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.postgresql.core.PGStream:', 'void', 'send(org.postgresql.util.ByteStreamWriter)', '2']
Removed row: ['org.postgresql.core.PGStream:', 'void', 'sendStream(java.io.InputStream,int)', '1']
Removed row: ['org.postgresql.core.QueryWithReturningColumnsKey:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.postgresql.core.ResultHandlerBase:', 'void', 'handleError(java.sql.SQLException)', '1']
Removed row: ['org.postgresql.core.ResultHandlerBase:', 'void', 'handleWarning(java.sql.SQLWarning)', '1']
Removed row: ['org.postgresql.core.Utils:', 'byte[]', 'encodeUTF8(java.lang.String)', '1']
Removed row: ['org.postgresql.core.Utils:', 'java.lang.StringBuilder', 'escapeIdentifier(java.lang.StringBuilder,java.lang.String)', '1']
Removed row: ['org.postgresql.core.Utils:', 'void', 'doAppendEscapedIdentifier(java.lang.Appendable,java.lang.String)', '2']
Removed row: ['org.postgresql.core.v3.ConnectionFactoryImpl:', 'boolean', 'isPrimary(org.postgresql.core.QueryExecutor)', '1']
Removed row: ['org.postgresql.core.v3.ConnectionFactoryImpl:', 'void', 'doAuthentication(org.postgresql.core.PGStream,java.lang.String,java.lang.String,java.util.Properties)', '4']
Removed row: ['org.postgresql.core.v3.QueryExecutorImpl:', 'void', 'processResults(org.postgresql.core.ResultHandler,int)', '6']
Removed row: ['org.postgresql.core.v3.SimpleParameterList:', 'int', 'getV3Length(int)', '3']
Removed row: ['org.postgresql.core.v3.SimpleParameterList:', 'java.lang.String', 'toString(int,boolean)', '1']
Removed row: ['org.postgresql.core.v3.SimpleParameterList:', 'void', 'streamBytea(org.postgresql.core.PGStream,org.postgresql.util.StreamWrapper)', '5']
Removed row: ['org.postgresql.fastpath.Fastpath:', 'void', 'addFunctions(java.sql.ResultSet)', '3']
Removed row: ['org.postgresql.hostchooser.HostRequirement:', 'org.postgresql.hostchooser.HostRequirement', 'getTargetServerType(java.lang.String)', '1']
Removed row: ['org.postgresql.jdbc.AbstractBlobClob:', 'org.postgresql.largeobject.LargeObject', 'getLo(boolean)', '1']
Removed row: ['org.postgresql.jdbc.AbstractBlobClob:', 'void', 'addSubLO(org.postgresql.largeobject.LargeObject)', '1']
Removed row: ['org.postgresql.jdbc.ArrayDecoding:', 'org.postgresql.jdbc.ArrayDecoding$ArrayDecoder', 'getDecoder(int,org.postgresql.core.BaseConnection)', '1']
Removed row: ['org.postgresql.jdbc.ArrayDecoding:', 'org.postgresql.jdbc.ArrayDecoding$PgArrayList', 'buildArrayList(java.lang.String,char)', '1']
Removed row: ['org.postgresql.jdbc.ArrayDecoding$12:', 'java.lang.Object', 'parseValue(java.lang.String,org.postgresql.core.BaseConnection)', '1']
Removed row: ['org.postgresql.jdbc.ArrayDecoding$13:', 'java.lang.Object', 'parseValue(java.lang.String,org.postgresql.core.BaseConnection)', '1']
Removed row: ['org.postgresql.jdbc.ArrayDecoding$14:', 'java.lang.Object', 'parseValue(java.lang.String,org.postgresql.core.BaseConnection)', '1']
Removed row: ['org.postgresql.jdbc.ArrayDecoding$8:', 'java.lang.Object', 'parseValue(int,java.nio.ByteBuffer,org.postgresql.core.BaseConnection)', '1']
Removed row: ['org.postgresql.jdbc.ArrayDecoding$MappedTypeObjectArrayDecoder:', 'java.lang.Object', 'parseValue(int,java.nio.ByteBuffer,org.postgresql.core.BaseConnection)', '1']
Removed row: ['org.postgresql.jdbc.ArrayDecoding$MappedTypeObjectArrayDecoder:', 'java.lang.Object', 'parseValue(java.lang.String,org.postgresql.core.BaseConnection)', '1']
Removed row: ['org.postgresql.jdbc.ArrayEncoding:', 'org.postgresql.jdbc.ArrayEncoding$ArrayEncoder', 'getArrayEncoder(java.lang.Object)', '1']
Removed row: ['org.postgresql.jdbc.BatchResultHandler:', 'void', 'handleCommandStatus(java.lang.String,long,long)', '1']
Removed row: ['org.postgresql.jdbc.BatchResultHandler:', 'void', 'updateGeneratedKeys()', '1']
Removed row: ['org.postgresql.jdbc.BooleanTypeUtil:', 'boolean', 'castToBoolean(java.lang.Object)', '1']
Removed row: ['org.postgresql.jdbc.BooleanTypeUtil:', 'boolean', 'fromCharacter(java.lang.Character)', '10']
Removed row: ['org.postgresql.jdbc.BooleanTypeUtil:', 'boolean', 'fromNumber(java.lang.Number)', '1']
Removed row: ['org.postgresql.jdbc.BooleanTypeUtil:', 'boolean', 'fromString(java.lang.String)', '1']
Removed row: ['org.postgresql.jdbc.FieldMetadata:', 'long', 'getSize()', '3']
Removed row: ['org.postgresql.jdbc.FieldMetadata$Key:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.postgresql.jdbc.PgArray:', 'java.lang.Object', 'buildArray(org.postgresql.jdbc.ArrayDecoding$PgArrayList,int,int)', '1']
Removed row: ['org.postgresql.jdbc.PgArray:', 'java.lang.String', 'getBaseTypeName()', '2']
Removed row: ['org.postgresql.jdbc.PgArray:', 'org.postgresql.jdbc.ArrayDecoding$PgArrayList', 'buildArrayList(java.lang.String)', '1']
Removed row: ['org.postgresql.jdbc.PgCallableStatement:', 'boolean', 'executeWithFlags(int)', '6']
Removed row: ['org.postgresql.jdbc.PgPreparedStatement:', 'long', 'createBlob(int,java.io.InputStream,long)', '2']
Removed row: ['org.postgresql.jdbc.PgPreparedStatement:', 'void', 'setArray(int,java.sql.Array)', '3']
Removed row: ['org.postgresql.jdbc.PgPreparedStatement:', 'void', 'setBlob(int,java.sql.Blob)', '2']
Removed row: ['org.postgresql.jdbc.PgPreparedStatement:', 'void', 'setClob(int,java.sql.Clob)', '2']
Removed row: ['org.postgresql.jdbc.PgPreparedStatement:', 'void', 'setNumber(int,java.lang.Number)', '1']
Removed row: ['org.postgresql.jdbc.PgPreparedStatement:', 'void', 'setObject(int,java.lang.Object)', '11']
Removed row: ['org.postgresql.jdbc.PgPreparedStatement:', 'void', 'setPGobject(int,org.postgresql.util.PGobject)', '4']
Removed row: ['org.postgresql.jdbc.PgPreparedStatement:', 'void', 'setSQLXML(int,java.sql.SQLXML)', '1']
Removed row: ['org.postgresql.jdbc.PgPreparedStatement:', 'void', 'setTime(int,java.sql.Time,java.util.Calendar)', '2']
Removed row: ['org.postgresql.jdbc.PgPreparedStatement:', 'void', 'setTimestamp(int,java.sql.Timestamp,java.util.Calendar)', '2']
Removed row: ['org.postgresql.jdbc.PgPreparedStatement:', 'void', 'setUuid(int,java.util.UUID)', '3']
Removed row: ['org.postgresql.jdbc.PgResultSet:', 'byte', 'getByte(int)', '1']
Removed row: ['org.postgresql.jdbc.PgResultSet:', 'double', 'toDouble(java.lang.String)', '1']
Removed row: ['org.postgresql.jdbc.PgResultSet:', 'float', 'toFloat(java.lang.String)', '1']
Removed row: ['org.postgresql.jdbc.PgResultSet:', 'int', 'findColumnIndex(java.lang.String)', '1']
Removed row: ['org.postgresql.jdbc.PgResultSet:', 'int', 'toInt(java.lang.String)', '1']
Removed row: ['org.postgresql.jdbc.PgResultSet:', 'java.lang.Number', 'getNumeric(int,int,boolean)', '1']
Removed row: ['org.postgresql.jdbc.PgResultSet:', 'java.lang.Object', 'getObject(int,java.lang.Class)', '3']
Removed row: ['org.postgresql.jdbc.PgResultSet:', 'java.lang.Object', 'internalGetObject(int,org.postgresql.core.Field)', '3']
Removed row: ['org.postgresql.jdbc.PgResultSet:', 'java.lang.String', 'getString(int)', '2']
Removed row: ['org.postgresql.jdbc.PgResultSet:', 'java.lang.String', 'trimMoney(java.lang.String)', '6']
Removed row: ['org.postgresql.jdbc.PgResultSet:', 'java.lang.String', 'trimString(int,java.lang.String)', '2']
Removed row: ['org.postgresql.jdbc.PgResultSet:', 'java.math.BigDecimal', 'toBigDecimal(java.lang.String)', '1']
Removed row: ['org.postgresql.jdbc.PgResultSet:', 'java.sql.Date', 'getDate(int,java.util.Calendar)', '1']
Removed row: ['org.postgresql.jdbc.PgResultSet:', 'long', 'toLong(java.lang.String)', '1']
Removed row: ['org.postgresql.jdbc.PgResultSet:', 'short', 'toShort(java.lang.String)', '1']
Removed row: ['org.postgresql.jdbc.PgResultSet:', 'void', 'addRows(java.util.List)', '1']
Removed row: ['org.postgresql.jdbc.PgResultSet:', 'void', 'initRowBuffer()', '1']
Removed row: ['org.postgresql.jdbc.PgResultSet:', 'void', 'parseQuery()', '1']
Removed row: ['org.postgresql.jdbc.PgResultSetMetaData:', 'void', 'fetchFieldMetaData()', '8']
Removed row: ['org.postgresql.jdbc.PgStatement:', 'java.sql.ResultSet', 'getSingleResultSet()', '2']
Removed row: ['org.postgresql.jdbc.PgStatement:', 'org.postgresql.jdbc.BatchResultHandler', 'internalExecuteBatch()', '5']
Removed row: ['org.postgresql.jdbc.PgStatement:', 'void', 'executeInternal(org.postgresql.core.CachedQuery,org.postgresql.core.ParameterList,int)', '2']
Removed row: ['org.postgresql.jdbc.PgStatement$StatementResultHandler:', 'void', 'append(org.postgresql.jdbc.ResultWrapper)', '1']
Removed row: ['org.postgresql.jdbc.TimestampUtils:', 'java.lang.String', 'toString(java.time.LocalDate)', '1']
Removed row: ['org.postgresql.jdbc.TimestampUtils:', 'java.lang.String', 'toString(java.time.LocalDateTime)', '4']
Removed row: ['org.postgresql.jdbc.TimestampUtils:', 'java.lang.String', 'toString(java.time.LocalTime)', '3']
Removed row: ['org.postgresql.jdbc.TimestampUtils:', 'java.lang.String', 'toString(java.time.OffsetDateTime)', '6']
Removed row: ['org.postgresql.jdbc.TimestampUtils:', 'java.lang.String', 'toString(java.util.Calendar,java.sql.Date,boolean)', '2']
Removed row: ['org.postgresql.jdbc.TimestampUtils:', 'java.lang.String', 'toString(java.util.Calendar,java.sql.Timestamp,boolean)', '4']
Removed row: ['org.postgresql.jdbc.TimestampUtils:', 'java.sql.Date', 'convertToDate(long,java.util.TimeZone)', '2']
Removed row: ['org.postgresql.jdbc.TimestampUtils:', 'java.sql.Time', 'convertToTime(long,java.util.TimeZone)', '2']
Removed row: ['org.postgresql.jdbc.TimestampUtils:', 'java.sql.Timestamp', 'toTimestamp(java.util.Calendar,java.lang.String)', '3']
Removed row: ['org.postgresql.jdbc.TimestampUtils:', 'java.time.LocalDateTime', 'toLocalDateTime(java.lang.String)', '3']
Removed row: ['org.postgresql.jdbc.TimestampUtils:', 'java.time.LocalTime', 'toLocalTime(java.lang.String)', '1']
Removed row: ['org.postgresql.jdbc.TimestampUtils:', 'java.time.OffsetDateTime', 'toOffsetDateTime(java.lang.String)', '3']
Removed row: ['org.postgresql.jdbc.TimestampUtils:', 'long', 'guessTimestamp(long,java.util.TimeZone)', '2']
Removed row: ['org.postgresql.jdbc.TimestampUtils:', 'org.postgresql.jdbc.TimestampUtils$ParsedTimestamp', 'parseBackendTimestamp(java.lang.String)', '1']
Removed row: ['org.postgresql.jdbc.TimestampUtils:', 'void', 'appendDate(java.lang.StringBuilder,java.time.LocalDate)', '3']
Removed row: ['org.postgresql.jdbc.TimestampUtils:', 'void', 'appendEra(java.lang.StringBuilder,java.time.LocalDate)', '1']
Removed row: ['org.postgresql.jdbc.TimestampUtils:', 'void', 'appendTime(java.lang.StringBuilder,java.time.LocalTime)', '4']
Removed row: ['org.postgresql.jdbc.TimestampUtils:', 'void', 'toBinDate(java.util.TimeZone,byte[],java.sql.Date)', '2']
Removed row: ['org.postgresql.jdbc.TypeInfoCache:', 'char', 'getArrayDelimiter(int)', '4']
Removed row: ['org.postgresql.jdbc.TypeInfoCache:', 'int', 'getPGArrayElement(int)', '8']
Removed row: ['org.postgresql.jdbc.TypeInfoCache:', 'int', 'getPGType(java.lang.String)', '4']
Removed row: ['org.postgresql.jdbc.TypeInfoCache:', 'int', 'getSQLType(java.lang.String)', '4']
Removed row: ['org.postgresql.jdbc.TypeInfoCache:', 'int', 'getSQLTypeFromQueryResult(java.sql.ResultSet)', '2']
Removed row: ['org.postgresql.jdbc.TypeInfoCache:', 'java.lang.String', 'getPGType(int)', '11']
Removed row: ['org.postgresql.jdbc.TypeInfoCache:', 'java.lang.String', 'getTypeForAlias(java.lang.String)', '2']
Removed row: ['org.postgresql.jre7.sasl.ScramAuthenticator:', 'void', 'sendScramClientFirstMessage()', '2']
Removed row: ['org.postgresql.jre7.sasl.ScramAuthenticator:', 'void', 'verifyServerSignature(int)', '1']
Removed row: ['org.postgresql.largeobject.LargeObjectManager:', 'void', '<init>(org.postgresql.core.BaseConnection)', '1']
Removed row: ['org.postgresql.shaded.com.ongres.scram.common.ScramAttributes:', 'void', '<init>(java.lang.String,int,char)', '1']
Removed row: ['org.postgresql.shaded.com.ongres.scram.common.ScramFunctions:', 'byte[]', 'hash(org.postgresql.shaded.com.ongres.scram.common.ScramMechanism,byte[])', '1']
Removed row: ['org.postgresql.shaded.com.ongres.scram.common.ScramFunctions:', 'byte[]', 'hmac(org.postgresql.shaded.com.ongres.scram.common.ScramMechanism,byte[],byte[])', '1']
Removed row: ['org.postgresql.shaded.com.ongres.scram.common.ScramFunctions:', 'byte[]', 'saltedPassword(org.postgresql.shaded.com.ongres.scram.common.ScramMechanism,org.postgresql.shaded.com.ongres.scram.common.stringprep.StringPreparation,java.lang.String,byte[],int)', '1']
Removed row: ['org.postgresql.shaded.com.ongres.scram.common.ScramMechanisms:', 'byte[]', 'saltedPassword(org.postgresql.shaded.com.ongres.scram.common.stringprep.StringPreparation,java.lang.String,byte[],int)', '3']
Removed row: ['org.postgresql.shaded.com.ongres.scram.common.ScramStringFormatting:', 'java.lang.String', 'base64Encode(java.lang.String)', '1']
Removed row: ['org.postgresql.shaded.com.ongres.scram.common.ScramStringFormatting:', 'java.lang.String', 'toSaslName(java.lang.String)', '2']
Removed row: ['org.postgresql.shaded.com.ongres.scram.common.bouncycastle.base64.Base64:', 'byte[]', 'decode(java.lang.String)', '1']
Removed row: ['org.postgresql.shaded.com.ongres.scram.common.bouncycastle.base64.Base64Encoder:', 'int', 'decode(java.lang.String,java.io.OutputStream)', '11']
Removed row: ['org.postgresql.shaded.com.ongres.scram.common.bouncycastle.base64.Base64Encoder:', 'int', 'nextI(java.lang.String,int,int)', '1']
Removed row: ['org.postgresql.shaded.com.ongres.scram.common.exception.ScramServerErrorException:', 'java.lang.String', 'toString(org.postgresql.shaded.com.ongres.scram.common.message.ServerFinalMessage$Error)', '1']
Removed row: ['org.postgresql.shaded.com.ongres.scram.common.message.ClientFinalMessage:', 'java.lang.String', 'generateCBind(org.postgresql.shaded.com.ongres.scram.common.gssapi.Gs2Header,byte[])', '1']
Removed row: ['org.postgresql.shaded.com.ongres.scram.common.message.ClientFirstMessage:', 'boolean', 'isChannelBinding()', '1']
Removed row: ['org.postgresql.shaded.com.ongres.scram.common.message.ClientFirstMessage:', 'java.lang.String', 'getAuthzid()', '1']
Removed row: ['org.postgresql.shaded.com.ongres.scram.common.message.ClientFirstMessage:', 'java.lang.String', 'getChannelBindingName()', '1']
Removed row: ['org.postgresql.shaded.com.ongres.scram.common.message.ClientFirstMessage:', 'org.postgresql.shaded.com.ongres.scram.common.gssapi.Gs2CbindFlag', 'getChannelBindingFlag()', '1']
Removed row: ['org.postgresql.shaded.com.ongres.scram.common.message.ServerFirstMessage:', 'org.postgresql.shaded.com.ongres.scram.common.message.ServerFirstMessage', 'parseFrom(java.lang.String,java.lang.String)', '3']
Removed row: ['org.postgresql.shaded.com.ongres.scram.common.stringprep.StringPreparations:', 'java.lang.String', 'normalize(java.lang.String)', '1']
Removed row: ['org.postgresql.shaded.com.ongres.scram.common.util.AbstractCharAttributeValue:', 'char', 'getChar()', '1']
Removed row: ['org.postgresql.shaded.com.ongres.scram.common.util.AbstractCharAttributeValue:', 'java.lang.StringBuffer', 'writeTo(java.lang.StringBuffer)', '1']
Removed row: ['org.postgresql.shaded.com.ongres.scram.common.util.AbstractCharAttributeValue:', 'void', '<init>(org.postgresql.shaded.com.ongres.scram.common.util.CharAttribute,java.lang.String)', '1']
Removed row: ['org.postgresql.shaded.com.ongres.scram.common.util.Preconditions:', 'java.lang.String', 'checkNotEmpty(java.lang.String,java.lang.String)', '1']
Removed row: ['org.postgresql.shaded.com.ongres.scram.common.util.StringWritableCsv:', 'java.lang.String[]', 'parseFrom(java.lang.String,int,int)', '2']
Removed row: ['org.postgresql.shaded.com.ongres.scram.common.util.UsAsciiUtils:', 'java.lang.String', 'toPrintable(java.lang.String)', '3']
Removed row: ['org.postgresql.util.HStoreConverter:', 'byte[]', 'toBytes(java.util.Map,org.postgresql.core.Encoding)', '3']
Removed row: ['org.postgresql.util.HStoreConverter:', 'int', 'appendUntilQuote(java.lang.StringBuilder,java.lang.String,int)', '3']
Removed row: ['org.postgresql.util.HStoreConverter:', 'java.lang.String', 'toString(java.util.Map)', '3']
Removed row: ['org.postgresql.util.HStoreConverter:', 'java.util.Map', 'fromString(java.lang.String)', '3']
Removed row: ['org.postgresql.util.HStoreConverter:', 'void', 'appendEscaped(java.lang.StringBuilder,java.lang.Object)', '2']
Removed row: ['org.postgresql.util.JdbcBlackHole:', 'void', 'close(java.sql.ResultSet)', '1']
Removed row: ['org.postgresql.util.PGobject:', 'boolean', 'equals(java.lang.Object)', '2']
Removed row: ['org.postgresql.util.PGobject:', 'int', 'hashCode()', '1']
Removed row: ['org.postgresql.util.PGtokenizer:', 'java.lang.String', 'remove(java.lang.String,java.lang.String,java.lang.String)', '5']
Removed row: ['org.slf4j.helpers.SubstituteLogger:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.testcontainers.images.ImageData:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.testcontainers.shaded.com.google.common.base.Preconditions:', 'java.lang.String', 'format(java.lang.String,java.lang.Object[])', '4']
Removed row: ['org.testcontainers.shaded.com.google.common.collect.AbstractMapEntry:', 'boolean', 'equals(java.lang.Object)', '2']
Removed row: ['org.testcontainers.shaded.com.google.common.collect.ImmutableSet:', 'boolean', 'equals(java.lang.Object)', '2']
Removed row: ['org.testcontainers.shaded.com.google.common.collect.Sets:', 'boolean', 'equalsImpl(java.util.Set,java.lang.Object)', '1']
Removed row: ['org.testcontainers.utility.DockerImageName:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.testcontainers.utility.TestcontainersConfiguration:', 'boolean', 'equals(java.lang.Object)', '2']
Removed row: ['sun.security.pkcs.SignerInfo:', 'java.util.ArrayList', 'getCertificateChain(sun.security.pkcs.PKCS7)', '3']
Removed row: ['sun.security.pkcs.SignerInfo:', 'sun.security.pkcs.SignerInfo', 'verify(sun.security.pkcs.PKCS7,byte[])', '1']
Removed row: ['sun.security.provider.PolicyFile:', 'java.security.cert.Certificate[]', 'getSignerCertificates(java.security.CodeSource)', '2']
Removed row: ['sun.security.provider.PolicyFile$SelfPermission:', 'void', '<init>(java.lang.String,java.lang.String,java.lang.String,java.security.cert.Certificate[])', '2']
Removed row: ['sun.security.util.ManifestEntryVerifier:', 'void', 'setEntry(java.lang.String,java.util.jar.JarEntry)', '3']
Removed row: ['sun.security.util.SignatureFileVerifier:', 'boolean', 'verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)', '3']
Removed row: ['sun.security.util.SignatureFileVerifier:', 'boolean', 'verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)', '3']
Removed row: ['sun.security.util.SignatureFileVerifier:', 'boolean', 'verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)', '3']
Removed row: ['sun.security.x509.X509CRLImpl:', 'javax.security.auth.x500.X500Principal', 'getCertIssuer(sun.security.x509.X509CRLEntryImpl,javax.security.auth.x500.X500Principal)', '1']
Removed row: ['sun.security.x509.X509CertImpl:', 'boolean', 'hasUnsupportedCriticalExtension()', '1']
Removed row: ['sun.security.x509.X509CertImpl:', 'boolean[]', 'getKeyUsage()', '1']
Removed row: ['sun.security.x509.X509CertImpl:', 'java.math.BigInteger', 'getSerialNumber()', '1']
Removed row: ['sun.security.x509.X509CertInfo:', 'void', 'verifyCert(sun.security.x509.X500Name,sun.security.x509.CertificateExtensions)', '2']
Total number of mock counts in mybatis-results/context-insensitive-counts-NORMAL is 1345 
bootique-context-insensitive-plusplus-NO_INTERPROC
Total number of mock counts in bootique-results/context-insensitive-plusplus-counts-NO_INTERPROC is 99 
commons-collections-context-insensitive-plusplus-NO_INTERPROC
Total number of mock counts in commons-collection4-results/context-insensitive-plusplus-counts-NO_INTERPROC is 3 
flink-core-context-insensitive-plusplus-NO_INTERPROC
Total number of mock counts in flink-core-results/context-insensitive-plusplus-counts-NO_INTERPROC is 40 
jsonschema2pojo-context-insensitive-plusplus-NO_INTERPROC
Total number of mock counts in jsonschema2pojo-core-results/context-insensitive-plusplus-counts-NO_INTERPROC is 282 
maven-core-context-insensitive-plusplus-NO_INTERPROC
Total number of mock counts in maven-core-results/context-insensitive-plusplus-counts-NO_INTERPROC is 23 
microbenchmark-context-insensitive-plusplus-NO_INTERPROC
Total number of mock counts in microbenchmark-results/context-insensitive-plusplus-counts-NO_INTERPROC is 123 
quartz-core-context-insensitive-plusplus-NO_INTERPROC
Total number of mock counts in quartz-core-results/context-insensitive-plusplus-counts-NO_INTERPROC is 21 
vraptor-core-context-insensitive-plusplus-NO_INTERPROC
Total number of mock counts in vraptor-core-results/context-insensitive-plusplus-counts-NO_INTERPROC is 962 
mybatis-context-insensitive-plusplus-NO_INTERPROC
Total number of mock counts in mybatis-results/context-insensitive-plusplus-counts-NO_INTERPROC is 577 
bootique-context-insensitive-plusplus-NORMAL
Removed row: ['org.mockito.internal.MockitoCore:', 'java.lang.Object', 'verify(java.lang.Object,org.mockito.verification.VerificationMode)', '1']
Removed row: ['org.mockito.internal.util.DefaultMockingDetails:', 'void', 'assertGoodMock()', '1']
Removed row: ['org.mockito.internal.util.MockUtil:', 'org.mockito.invocation.MockHandler', 'getMockHandler(java.lang.Object)', '1']
Total number of mock counts in bootique-results/context-insensitive-plusplus-counts-NORMAL is 122 
commons-collections-context-insensitive-plusplus-NORMAL
Removed row: ['org.junit.Assert:', 'boolean', 'isEquals(java.lang.Object,java.lang.Object)', '1']
Removed row: ['org.junit.Assert:', 'java.lang.String', 'formatClassAndValue(java.lang.Object,java.lang.String)', '1']
Removed row: ['org.junit.ComparisonFailure$ComparisonCompactor:', 'java.lang.String', 'compact(java.lang.String)', '1']
Removed row: ['org.junit.ComparisonFailure$ComparisonCompactor:', 'java.lang.String', 'sharedPrefix()', '4']
Removed row: ['org.junit.ComparisonFailure$ComparisonCompactor:', 'java.lang.String', 'sharedSuffix(java.lang.String)', '5']
Removed row: ['org.junit.ComparisonFailure$ComparisonCompactor$DiffExtractor:', 'java.lang.String', 'extractDiff(java.lang.String)', '2']
Total number of mock counts in commons-collection4-results/context-insensitive-plusplus-counts-NORMAL is 23 
flink-core-context-insensitive-plusplus-NORMAL
Removed row: ['com.esotericsoftware.kryo.Kryo:', 'boolean', 'writeReferenceOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,boolean)', '1']
Removed row: ['com.esotericsoftware.kryo.Kryo:', 'com.esotericsoftware.kryo.Registration', 'getRegistration(java.lang.Class)', '2']
Removed row: ['com.esotericsoftware.kryo.Kryo:', 'com.esotericsoftware.kryo.Serializer', 'getDefaultSerializer(java.lang.Class)', '2']
Removed row: ['com.esotericsoftware.kryo.Kryo:', 'int', 'readReferenceOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,boolean)', '1']
Removed row: ['com.esotericsoftware.kryo.Kryo:', 'java.lang.Object', 'copy(java.lang.Object)', '2']
Removed row: ['com.esotericsoftware.kryo.Kryo:', 'void', 'writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)', '1']
Removed row: ['com.esotericsoftware.kryo.Kryo:', 'void', 'writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)', '2']
Removed row: ['com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy:', 'org.objenesis.instantiator.ObjectInstantiator', 'newInstantiatorOf(java.lang.Class)', '7']
Removed row: ['com.esotericsoftware.kryo.Registration:', 'void', 'setSerializer(com.esotericsoftware.kryo.Serializer)', '1']
Removed row: ['com.esotericsoftware.kryo.factories.ReflectionSerializerFactory:', 'com.esotericsoftware.kryo.Serializer', 'makeSerializer(com.esotericsoftware.kryo.Kryo,java.lang.Class,java.lang.Class)', '5']
Removed row: ['com.esotericsoftware.kryo.io.Output:', 'void', 'writeAscii_slow(java.lang.String,int)', '1']
Removed row: ['com.esotericsoftware.kryo.io.Output:', 'void', 'writeString(java.lang.String)', '4']
Removed row: ['com.esotericsoftware.kryo.io.Output:', 'void', 'writeString_slow(java.lang.CharSequence,int,int)', '1']
Removed row: ['com.esotericsoftware.kryo.serializers.DefaultSerializers$BooleanSerializer:', 'void', 'write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Boolean)', '1']
Removed row: ['com.esotericsoftware.kryo.serializers.DefaultSerializers$ByteSerializer:', 'void', 'write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Byte)', '1']
Removed row: ['com.esotericsoftware.kryo.serializers.DefaultSerializers$CharSerializer:', 'void', 'write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Character)', '1']
Removed row: ['com.esotericsoftware.kryo.serializers.DefaultSerializers$DoubleSerializer:', 'void', 'write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Double)', '1']
Removed row: ['com.esotericsoftware.kryo.serializers.DefaultSerializers$FloatSerializer:', 'void', 'write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Float)', '1']
Removed row: ['com.esotericsoftware.kryo.serializers.DefaultSerializers$IntSerializer:', 'void', 'write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Integer)', '1']
Removed row: ['com.esotericsoftware.kryo.serializers.DefaultSerializers$LongSerializer:', 'void', 'write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Long)', '1']
Removed row: ['com.esotericsoftware.kryo.serializers.DefaultSerializers$ShortSerializer:', 'void', 'write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Short)', '1']
Removed row: ['com.esotericsoftware.kryo.util.DefaultClassResolver:', 'com.esotericsoftware.kryo.Registration', 'register(com.esotericsoftware.kryo.Registration)', '1']
Removed row: ['com.esotericsoftware.kryo.util.ObjectMap:', 'java.lang.Object', 'get(java.lang.Object)', '4']
Removed row: ['com.esotericsoftware.kryo.util.ObjectMap:', 'java.lang.Object', 'getStash(java.lang.Object)', '1']
Removed row: ['com.esotericsoftware.kryo.util.ObjectMap:', 'java.lang.Object', 'put_internal(java.lang.Object,java.lang.Object)', '5']
Removed row: ['com.esotericsoftware.kryo.util.ObjectMap:', 'void', 'push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)', '1']
Removed row: ['com.esotericsoftware.kryo.util.ObjectMap:', 'void', 'putResize(java.lang.Object,java.lang.Object)', '1']
Removed row: ['com.esotericsoftware.kryo.util.Util:', 'int', 'getDimensionCount(java.lang.Class)', '1']
Removed row: ['com.esotericsoftware.kryo.util.Util:', 'java.lang.Class', 'getElementClass(java.lang.Class)', '2']
Removed row: ['com.esotericsoftware.kryo.util.Util:', 'java.lang.String', 'className(java.lang.Class)', '4']
Removed row: ['com.esotericsoftware.kryo.util.Util:', 'java.lang.String', 'string(java.lang.Object)', '1']
Removed row: ['com.esotericsoftware.kryo.util.Util:', 'void', 'log(java.lang.String,java.lang.Object)', '1']
Removed row: ['com.esotericsoftware.reflectasm.AccessClassLoader:', 'java.lang.ClassLoader', 'getParentClassLoader(java.lang.Class)', '1']
Removed row: ['com.esotericsoftware.reflectasm.ConstructorAccess:', 'com.esotericsoftware.reflectasm.ConstructorAccess', 'get(java.lang.Class)', '10']
Removed row: ['javassist.CtMethod:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['javassist.bytecode.MemberrefInfo:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.apache.logging.log4j.MarkerManager$Log4jMarker:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.apache.logging.log4j.spi.Provider:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.apache.logging.log4j.util.LoaderUtil$UrlResource:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.hamcrest.BaseDescription:', 'java.lang.String', 'descriptionOf(java.lang.Object)', '2']
Removed row: ['org.hamcrest.BaseDescription:', 'org.hamcrest.Description', 'appendDescriptionOf(org.hamcrest.SelfDescribing)', '1']
Removed row: ['org.hamcrest.BaseDescription:', 'org.hamcrest.Description', 'appendValue(java.lang.Object)', '2']
Removed row: ['org.hamcrest.BaseDescription:', 'org.hamcrest.Description', 'appendValueList(java.lang.String,java.lang.String,java.lang.String,java.lang.Iterable)', '1']
Removed row: ['org.hamcrest.BaseDescription:', 'void', 'toJavaSyntax(java.lang.String)', '2']
Removed row: ['org.hamcrest.TypeSafeMatcher:', 'void', 'describeMismatch(java.lang.Object,org.hamcrest.Description)', '1']
Removed row: ['org.hamcrest.collection.IsEmptyCollection:', 'boolean', 'matchesSafely(java.util.Collection)', '1']
Removed row: ['org.hamcrest.collection.IsIterableContainingInAnyOrder:', 'boolean', 'matchesSafely(java.lang.Iterable,org.hamcrest.Description)', '1']
Removed row: ['org.hamcrest.collection.IsIterableContainingInOrder:', 'boolean', 'matchesSafely(java.lang.Iterable,org.hamcrest.Description)', '1']
Removed row: ['org.hamcrest.core.IsCollectionContaining:', 'boolean', 'matchesSafely(java.lang.Iterable,org.hamcrest.Description)', '1']
Removed row: ['org.hamcrest.core.IsEqual:', 'boolean', 'areEqual(java.lang.Object,java.lang.Object)', '1']
Removed row: ['org.hamcrest.core.IsEqual:', 'boolean', 'isArray(java.lang.Object)', '1']
Removed row: ['org.hamcrest.core.IsInstanceOf:', 'boolean', 'matches(java.lang.Object,org.hamcrest.Description)', '1']
Removed row: ['org.hamcrest.core.StringContains:', 'boolean', 'evalSubstringOf(java.lang.String)', '1']
Removed row: ['org.hamcrest.internal.ArrayIterator:', 'void', '<init>(java.lang.Object)', '1']
Removed row: ['org.hamcrest.number.OrderingComparison:', 'boolean', 'matchesSafely(java.lang.Comparable)', '1']
Removed row: ['org.hamcrest.number.OrderingComparison:', 'void', 'describeMismatchSafely(java.lang.Comparable,org.hamcrest.Description)', '1']
Removed row: ['org.joda.time.base.AbstractPartial:', 'boolean', 'equals(java.lang.Object)', '4']
Removed row: ['org.joda.time.chrono.BasicChronology:', 'boolean', 'equals(java.lang.Object)', '3']
Removed row: ['org.joda.time.chrono.ISOChronology:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.joda.time.field.MillisDurationField:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.joda.time.field.PreciseDurationField:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.joda.time.field.ScaledDurationField:', 'boolean', 'equals(java.lang.Object)', '2']
Removed row: ['org.joda.time.field.UnsupportedDurationField:', 'boolean', 'equals(java.lang.Object)', '2']
Removed row: ['org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.joda.time.tz.FixedDateTimeZone:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.junit.Assert:', 'boolean', 'isEquals(java.lang.Object,java.lang.Object)', '1']
Removed row: ['org.junit.Assert:', 'java.lang.String', 'formatClassAndValue(java.lang.Object,java.lang.String)', '1']
Removed row: ['org.junit.ComparisonFailure$ComparisonCompactor:', 'java.lang.String', 'compact(java.lang.String)', '1']
Removed row: ['org.junit.ComparisonFailure$ComparisonCompactor:', 'java.lang.String', 'sharedPrefix()', '6']
Removed row: ['org.junit.ComparisonFailure$ComparisonCompactor:', 'java.lang.String', 'sharedSuffix(java.lang.String)', '8']
Removed row: ['org.junit.ComparisonFailure$ComparisonCompactor$DiffExtractor:', 'java.lang.String', 'extractDiff(java.lang.String)', '2']
Removed row: ['org.junit.internal.matchers.ThrowableMessageMatcher:', 'boolean', 'matchesSafely(java.lang.Throwable)', '1']
Removed row: ['org.junit.internal.matchers.ThrowableMessageMatcher:', 'void', 'describeMismatchSafely(java.lang.Throwable,org.hamcrest.Description)', '1']
Removed row: ['org.mockito.internal.MockitoCore:', 'java.lang.Object', 'verify(java.lang.Object,org.mockito.verification.VerificationMode)', '1']
Removed row: ['org.mockito.internal.util.DefaultMockingDetails:', 'void', 'assertGoodMock()', '1']
Removed row: ['org.mockito.internal.util.MockUtil:', 'org.mockito.invocation.MockHandler', 'getMockHandler(java.lang.Object)', '1']
Removed row: ['org.objenesis.instantiator.android.Android10Instantiator:', 'java.lang.Object', 'newInstance()', '1']
Removed row: ['org.objenesis.instantiator.android.Android17Instantiator:', 'java.lang.Object', 'newInstance()', '1']
Removed row: ['org.objenesis.instantiator.android.Android18Instantiator:', 'java.lang.Object', 'newInstance()', '1']
Removed row: ['org.objenesis.instantiator.gcj.GCJInstantiator:', 'java.lang.Object', 'newInstance()', '1']
Removed row: ['org.objenesis.instantiator.gcj.GCJSerializationInstantiator:', 'java.lang.Object', 'newInstance()', '1']
Removed row: ['org.objenesis.instantiator.jrockit.JRockitLegacyInstantiator:', 'java.lang.Object', 'newInstance()', '1']
Removed row: ['org.objenesis.instantiator.sun.UnsafeFactoryInstantiator:', 'java.lang.Object', 'newInstance()', '1']
Removed row: ['org.slf4j.helpers.BasicMarker:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.slf4j.helpers.SubstituteLogger:', 'boolean', 'equals(java.lang.Object)', '1']
Total number of mock counts in flink-core-results/context-insensitive-plusplus-counts-NORMAL is 1374 
jsonschema2pojo-context-insensitive-plusplus-NORMAL
Removed row: ['com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.fasterxml.jackson.core.JsonLocation:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.fasterxml.jackson.core.io.SerializedString:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.fasterxml.jackson.databind.PropertyName:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.fasterxml.jackson.databind.introspect.MemberKey:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.fasterxml.jackson.databind.jsontype.NamedType:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.fasterxml.jackson.databind.type.ArrayType:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.fasterxml.jackson.databind.type.ClassKey:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.fasterxml.jackson.databind.type.CollectionLikeType:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.fasterxml.jackson.databind.type.MapLikeType:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.fasterxml.jackson.databind.type.ReferenceType:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.fasterxml.jackson.databind.type.ResolvedRecursiveType:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.fasterxml.jackson.databind.type.SimpleType:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.fasterxml.jackson.databind.type.TypeBindings$AsKey:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.fasterxml.jackson.databind.util.ClassUtil:', 'boolean', 'hasClass(java.lang.Object,java.lang.Class)', '1']
Removed row: ['com.fasterxml.jackson.databind.util.TypeKey:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.github.tomakehurst.wiremock.admin.RequestSpec:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.github.tomakehurst.wiremock.global.GlobalSettings:', 'boolean', 'equals(java.lang.Object)', '4']
Removed row: ['com.github.tomakehurst.wiremock.stubbing.Scenario:', 'boolean', 'equals(java.lang.Object)', '5']
Removed row: ['com.google.common.collect.AbstractMapEntry:', 'boolean', 'equals(java.lang.Object)', '2']
Removed row: ['com.sun.codemodel.JClass:', 'com.sun.codemodel.JClass', 'narrow(com.sun.codemodel.JType)', '1']
Removed row: ['com.sun.codemodel.JDefinedClass:', 'com.sun.codemodel.JDefinedClass', '_extends(com.sun.codemodel.JClass)', '2']
Removed row: ['com.sun.codemodel.JMethod:', 'boolean', 'hasSignature(com.sun.codemodel.JType[])', '1']
Removed row: ['com.sun.codemodel.JNarrowedClass:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.sun.codemodel.JNarrowedClass:', 'com.sun.codemodel.JClass', '_extends()', '1']
Removed row: ['com.sun.codemodel.JVar:', 'com.sun.codemodel.JAnnotationUse', 'annotate(java.lang.Class)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'boolean', 'nodeEquals(japa.parser.ast.Node,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.BlockComment,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.LineComment,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.TypeParameter,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.body.AnnotationDeclaration,japa.parser.ast.Node)', '4']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.body.AnnotationMemberDeclaration,japa.parser.ast.Node)', '5']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.body.BaseParameter,japa.parser.ast.Node)', '3']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.body.ClassOrInterfaceDeclaration,japa.parser.ast.Node)', '8']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.body.ConstructorDeclaration,japa.parser.ast.Node)', '7']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.body.EnumConstantDeclaration,japa.parser.ast.Node)', '4']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.body.EnumDeclaration,japa.parser.ast.Node)', '6']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.body.FieldDeclaration,japa.parser.ast.Node)', '4']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.body.InitializerDeclaration,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.body.JavadocComment,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.body.MethodDeclaration,japa.parser.ast.Node)', '9']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.body.MultiTypeParameter,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.body.Parameter,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.body.VariableDeclarator,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.body.VariableDeclaratorId,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.ArrayAccessExpr,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.ArrayCreationExpr,japa.parser.ast.Node)', '4']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.ArrayInitializerExpr,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.AssignExpr,japa.parser.ast.Node)', '3']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.BinaryExpr,japa.parser.ast.Node)', '3']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.BooleanLiteralExpr,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.CastExpr,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.CharLiteralExpr,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.ClassExpr,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.ConditionalExpr,japa.parser.ast.Node)', '3']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.DoubleLiteralExpr,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.EnclosedExpr,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.FieldAccessExpr,japa.parser.ast.Node)', '3']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.InstanceOfExpr,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.IntegerLiteralExpr,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.IntegerLiteralMinValueExpr,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.LongLiteralExpr,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.LongLiteralMinValueExpr,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.MarkerAnnotationExpr,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.MemberValuePair,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.MethodCallExpr,japa.parser.ast.Node)', '4']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.NameExpr,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.NormalAnnotationExpr,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.ObjectCreationExpr,japa.parser.ast.Node)', '5']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.QualifiedNameExpr,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.SingleMemberAnnotationExpr,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.StringLiteralExpr,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.SuperExpr,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.ThisExpr,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.UnaryExpr,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.VariableDeclarationExpr,japa.parser.ast.Node)', '4']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.AssertStmt,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.BlockStmt,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.BreakStmt,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.CatchClause,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.ContinueStmt,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.DoStmt,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.ExplicitConstructorInvocationStmt,japa.parser.ast.Node)', '3']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.ExpressionStmt,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.ForStmt,japa.parser.ast.Node)', '4']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.ForeachStmt,japa.parser.ast.Node)', '3']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.IfStmt,japa.parser.ast.Node)', '3']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.LabeledStmt,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.ReturnStmt,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.SwitchEntryStmt,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.SwitchStmt,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.SynchronizedStmt,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.ThrowStmt,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.TryStmt,japa.parser.ast.Node)', '3']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.TypeDeclarationStmt,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.WhileStmt,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.type.ClassOrInterfaceType,japa.parser.ast.Node)', '3']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.type.PrimitiveType,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.type.ReferenceType,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.type.WildcardType,japa.parser.ast.Node)', '2']
Removed row: ['org.hamcrest.BaseDescription:', 'java.lang.String', 'descriptionOf(java.lang.Object)', '2']
Removed row: ['org.hamcrest.BaseDescription:', 'org.hamcrest.Description', 'appendValue(java.lang.Object)', '2']
Removed row: ['org.hamcrest.BaseDescription:', 'void', 'toJavaSyntax(java.lang.String)', '2']
Removed row: ['org.hamcrest.TypeSafeMatcher:', 'void', 'describeMismatch(java.lang.Object,org.hamcrest.Description)', '1']
Removed row: ['org.hamcrest.collection.IsCollectionWithSize:', 'java.lang.Integer', 'featureValueOf(java.util.Collection)', '1']
Removed row: ['org.hamcrest.core.IsEqual:', 'boolean', 'areEqual(java.lang.Object,java.lang.Object)', '1']
Removed row: ['org.hamcrest.core.IsEqual:', 'boolean', 'isArray(java.lang.Object)', '1']
Removed row: ['org.hamcrest.core.IsInstanceOf:', 'boolean', 'matches(java.lang.Object,org.hamcrest.Description)', '1']
Removed row: ['org.hamcrest.internal.ArrayIterator:', 'void', '<init>(java.lang.Object)', '1']
Removed row: ['org.hamcrest.number.OrderingComparison:', 'boolean', 'matchesSafely(java.lang.Comparable)', '1']
Removed row: ['org.hamcrest.number.OrderingComparison:', 'void', 'describeMismatchSafely(java.lang.Comparable,org.hamcrest.Description)', '1']
Removed row: ['org.mockito.internal.MockitoCore:', 'java.lang.Object', 'verify(java.lang.Object,org.mockito.verification.VerificationMode)', '1']
Removed row: ['org.mockito.internal.util.DefaultMockingDetails:', 'void', 'assertGoodMock()', '1']
Removed row: ['org.mockito.internal.util.MockUtil:', 'org.mockito.invocation.MockHandler', 'getMockHandler(java.lang.Object)', '1']
Removed row: ['org.slf4j.helpers.SubstituteLogger:', 'boolean', 'equals(java.lang.Object)', '1']
Total number of mock counts in jsonschema2pojo-core-results/context-insensitive-plusplus-counts-NORMAL is 604 
maven-core-context-insensitive-plusplus-NORMAL
Removed row: ['org.junit.Assert:', 'boolean', 'isEquals(java.lang.Object,java.lang.Object)', '1']
Removed row: ['org.junit.Assert:', 'java.lang.String', 'formatClassAndValue(java.lang.Object,java.lang.String)', '1']
Removed row: ['org.junit.ComparisonFailure$ComparisonCompactor:', 'java.lang.String', 'compact(java.lang.String)', '1']
Removed row: ['org.junit.ComparisonFailure$ComparisonCompactor:', 'java.lang.String', 'sharedPrefix()', '6']
Removed row: ['org.junit.ComparisonFailure$ComparisonCompactor:', 'java.lang.String', 'sharedSuffix(java.lang.String)', '8']
Removed row: ['org.junit.ComparisonFailure$ComparisonCompactor$DiffExtractor:', 'java.lang.String', 'extractDiff(java.lang.String)', '2']
Removed row: ['org.mockito.internal.MockitoCore:', 'java.lang.Object', 'verify(java.lang.Object,org.mockito.verification.VerificationMode)', '1']
Removed row: ['org.mockito.internal.util.DefaultMockingDetails:', 'void', 'assertGoodMock()', '1']
Removed row: ['org.mockito.internal.util.MockUtil:', 'org.mockito.invocation.MockHandler', 'getMockHandler(java.lang.Object)', '1']
Total number of mock counts in maven-core-results/context-insensitive-plusplus-counts-NORMAL is 39 
microbenchmark-context-insensitive-plusplus-NORMAL
Removed row: ['org.mockito.internal.MockitoCore:', 'java.lang.Object', 'verify(java.lang.Object,org.mockito.verification.VerificationMode)', '1']
Removed row: ['org.mockito.internal.creation.CglibMockMaker:', 'org.mockito.invocation.MockHandler', 'getHandler(java.lang.Object)', '1']
Total number of mock counts in microbenchmark-results/context-insensitive-plusplus-counts-NORMAL is 132 
quartz-core-context-insensitive-plusplus-NORMAL
Removed row: ['org.mockito.internal.MockitoCore:', 'java.lang.Object', 'verify(java.lang.Object,org.mockito.verification.VerificationMode)', '1']
Removed row: ['org.mockito.internal.creation.CglibMockMaker:', 'org.mockito.invocation.MockHandler', 'getHandler(java.lang.Object)', '1']
Total number of mock counts in quartz-core-results/context-insensitive-plusplus-counts-NORMAL is 31 
vraptor-core-context-insensitive-plusplus-NORMAL
Traceback (most recent call last):
  File "./process-count.py", line 24, in <module>
    clazz, return_type, meth, count = row
ValueError: too many values to unpack (expected 4)
mybatis-context-insensitive-plusplus-NORMAL
Removed row: ['com.github.dockerjava.api.model.Bind:', 'boolean', 'equals(java.lang.Object)', '7']
Removed row: ['com.mysql.cj.AbstractPreparedQuery:', 'void', 'streamToBytes(com.mysql.cj.protocol.a.NativePacketPayload,java.io.InputStream,boolean,long,boolean)', '2']
Removed row: ['com.mysql.cj.AbstractQueryBindings:', 'byte[]', 'streamToBytes(int,boolean)', '5']
Removed row: ['com.mysql.cj.AbstractQueryBindings:', 'void', 'setObject(int,java.lang.Object)', '9']
Removed row: ['com.mysql.cj.ClientPreparedQueryBindings:', 'boolean', 'isEscapeNeededForString(java.lang.String,int)', '1']
Removed row: ['com.mysql.cj.ClientPreparedQueryBindings:', 'void', 'setBigDecimal(int,java.math.BigDecimal)', '1']
Removed row: ['com.mysql.cj.ClientPreparedQueryBindings:', 'void', 'setBlob(int,java.sql.Blob)', '1']
Removed row: ['com.mysql.cj.ClientPreparedQueryBindings:', 'void', 'setCharacterStream(int,java.io.Reader,int)', '1']
Removed row: ['com.mysql.cj.ClientPreparedQueryBindings:', 'void', 'setClob(int,java.sql.Clob)', '4']
Removed row: ['com.mysql.cj.ClientPreparedQueryBindings:', 'void', 'setNString(int,java.lang.String)', '3']
Removed row: ['com.mysql.cj.ClientPreparedQueryBindings:', 'void', 'setString(int,java.lang.String)', '4']
Removed row: ['com.mysql.cj.ClientPreparedQueryBindings:', 'void', 'setTimestamp(int,java.sql.Timestamp,java.util.Calendar,int)', '1']
Removed row: ['com.mysql.cj.ServerPreparedQuery:', 'void', 'serverLongData(int,com.mysql.cj.ServerPreparedQueryBindValue)', '2']
Removed row: ['com.mysql.cj.ServerPreparedQuery:', 'void', 'storeReader(int,com.mysql.cj.protocol.a.NativePacketPayload,java.io.Reader)', '3']
Removed row: ['com.mysql.cj.ServerPreparedQuery:', 'void', 'storeStream(int,com.mysql.cj.protocol.a.NativePacketPayload,java.io.InputStream)', '3']
Removed row: ['com.mysql.cj.ServerPreparedQueryBindValue:', 'byte[]', 'getByteValue()', '1']
Removed row: ['com.mysql.cj.ServerPreparedQueryBindValue:', 'java.lang.String', 'toString(boolean)', '3']
Removed row: ['com.mysql.cj.ServerPreparedQueryBindValue:', 'long', 'getBoundLength()', '1']
Removed row: ['com.mysql.cj.ServerPreparedQueryBindValue:', 'void', 'storeBinding(com.mysql.cj.protocol.a.NativePacketPayload,boolean,java.lang.String,com.mysql.cj.exceptions.ExceptionInterceptor)', '6']
Removed row: ['com.mysql.cj.ServerPreparedQueryBindValue:', 'void', 'storeDateTime(com.mysql.cj.protocol.a.NativePacketPayload)', '1']
Removed row: ['com.mysql.cj.ServerPreparedQueryBindings:', 'void', 'setBigDecimal(int,java.math.BigDecimal)', '1']
Removed row: ['com.mysql.cj.ServerPreparedQueryBindings:', 'void', 'setBlob(int,java.sql.Blob)', '1']
Removed row: ['com.mysql.cj.ServerPreparedQueryBindings:', 'void', 'setClob(int,java.sql.Clob)', '2']
Removed row: ['com.mysql.cj.ServerPreparedQueryBindings:', 'void', 'setTimestamp(int,java.sql.Timestamp,java.util.Calendar,int)', '1']
Removed row: ['com.mysql.cj.jdbc.DatabaseMetaData$ComparableWrapper:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.mysql.cj.jdbc.DatabaseMetaData$ComparableWrapper:', 'int', 'compareTo(com.mysql.cj.jdbc.DatabaseMetaData$ComparableWrapper)', '1']
Removed row: ['com.mysql.cj.jdbc.MysqlSQLXML:', 'boolean', 'isEmpty()', '1']
Removed row: ['com.mysql.cj.jdbc.ServerPreparedStatement:', 'int', 'setOneBatchedParameterSet(java.sql.PreparedStatement,int,java.lang.Object)', '6']
Removed row: ['com.mysql.cj.jdbc.ServerPreparedStatement:', 'java.lang.String', 'asSql(boolean)', '6']
Removed row: ['com.mysql.cj.util.StringUtils:', 'byte[]', 'getBytes(java.lang.String)', '1']
Removed row: ['com.mysql.cj.util.StringUtils:', 'byte[]', 'getBytes(java.lang.String,java.lang.String)', '1']
Removed row: ['com.mysql.cj.util.StringUtils:', 'byte[]', 'getBytesWrapped(java.lang.String,char,char,java.lang.String)', '2']
Removed row: ['com.mysql.cj.util.Util:', 'int', 'readBlock(java.io.InputStream,byte[],com.mysql.cj.exceptions.ExceptionInterceptor)', '1']
Removed row: ['com.mysql.cj.util.Util:', 'int', 'readBlock(java.io.InputStream,byte[],int,com.mysql.cj.exceptions.ExceptionInterceptor)', '1']
Removed row: ['com.mysql.cj.util.Util:', 'int', 'readFully(java.io.Reader,char[],int)', '1']
Removed row: ['com.sun.beans.TypeResolver:', 'java.lang.reflect.Type', 'resolve(java.lang.reflect.Type,java.lang.reflect.Type)', '1']
Removed row: ['java.text.MessageFormat:', 'java.lang.StringBuffer', 'subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)', '1']
Removed row: ['java.util.concurrent.ConcurrentHashMap:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['net.sf.cglib.core.ClassInfo:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['net.sf.cglib.core.MethodInfo:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.apache.log4j.CategoryKey:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.assertj.core.api.AbstractAssert:', 'org.assertj.core.api.AbstractStringAssert', 'asString()', '1']
Removed row: ['org.assertj.core.api.AbstractCompletableFutureAssert:', 'org.assertj.core.api.AbstractCompletableFutureAssert', 'hasFailed()', '2']
Removed row: ['org.assertj.core.api.AbstractCompletableFutureAssert:', 'org.assertj.core.api.AbstractCompletableFutureAssert', 'hasNotFailed()', '2']
Removed row: ['org.assertj.core.api.AbstractCompletableFutureAssert:', 'org.assertj.core.api.AbstractCompletableFutureAssert', 'isCancelled()', '1']
Removed row: ['org.assertj.core.api.AbstractCompletableFutureAssert:', 'org.assertj.core.api.AbstractCompletableFutureAssert', 'isCompleted()', '2']
Removed row: ['org.assertj.core.api.AbstractCompletableFutureAssert:', 'org.assertj.core.api.AbstractCompletableFutureAssert', 'isCompletedExceptionally()', '1']
Removed row: ['org.assertj.core.api.AbstractCompletableFutureAssert:', 'org.assertj.core.api.AbstractCompletableFutureAssert', 'isCompletedWithValue(java.lang.Object)', '1']
Removed row: ['org.assertj.core.api.AbstractCompletableFutureAssert:', 'org.assertj.core.api.AbstractCompletableFutureAssert', 'isCompletedWithValueMatching(java.util.function.Predicate,org.assertj.core.presentation.PredicateDescription)', '1']
Removed row: ['org.assertj.core.api.AbstractCompletableFutureAssert:', 'org.assertj.core.api.AbstractCompletableFutureAssert', 'isDone()', '1']
Removed row: ['org.assertj.core.api.AbstractCompletableFutureAssert:', 'org.assertj.core.api.AbstractCompletableFutureAssert', 'isNotCancelled()', '1']
Removed row: ['org.assertj.core.api.AbstractCompletableFutureAssert:', 'org.assertj.core.api.AbstractCompletableFutureAssert', 'isNotCompleted()', '2']
Removed row: ['org.assertj.core.api.AbstractCompletableFutureAssert:', 'org.assertj.core.api.AbstractCompletableFutureAssert', 'isNotCompletedExceptionally()', '1']
Removed row: ['org.assertj.core.api.AbstractCompletableFutureAssert:', 'org.assertj.core.api.AbstractCompletableFutureAssert', 'isNotDone()', '1']
Removed row: ['org.assertj.core.api.AbstractCompletableFutureAssert:', 'org.assertj.core.api.AbstractThrowableAssert', 'hasFailedWithThrowableThat()', '1']
Removed row: ['org.assertj.core.api.AbstractDoubleAssert:', 'org.assertj.core.api.AbstractDoubleAssert', 'isEqualTo(double)', '2']
Removed row: ['org.assertj.core.api.AbstractDoubleAssert:', 'org.assertj.core.api.AbstractDoubleAssert', 'isGreaterThanOrEqualTo(double)', '1']
Removed row: ['org.assertj.core.api.AbstractDoubleAssert:', 'org.assertj.core.api.AbstractDoubleAssert', 'isLessThanOrEqualTo(double)', '1']
Removed row: ['org.assertj.core.api.AbstractDoubleAssert:', 'org.assertj.core.api.AbstractDoubleAssert', 'isNotEqualTo(double)', '1']
Removed row: ['org.assertj.core.api.AbstractDoubleAssert:', 'void', 'assertIsPrimitiveNonZero()', '1']
Removed row: ['org.assertj.core.api.AbstractDoubleAssert:', 'void', 'assertIsPrimitiveZero()', '1']
Removed row: ['org.assertj.core.api.AbstractDurationAssert:', 'org.assertj.core.api.AbstractDurationAssert', 'hasDays(long)', '1']
Removed row: ['org.assertj.core.api.AbstractDurationAssert:', 'org.assertj.core.api.AbstractDurationAssert', 'hasHours(long)', '1']
Removed row: ['org.assertj.core.api.AbstractDurationAssert:', 'org.assertj.core.api.AbstractDurationAssert', 'hasMillis(long)', '1']
Removed row: ['org.assertj.core.api.AbstractDurationAssert:', 'org.assertj.core.api.AbstractDurationAssert', 'hasMinutes(long)', '1']
Removed row: ['org.assertj.core.api.AbstractDurationAssert:', 'org.assertj.core.api.AbstractDurationAssert', 'hasNanos(long)', '1']
Removed row: ['org.assertj.core.api.AbstractDurationAssert:', 'org.assertj.core.api.AbstractDurationAssert', 'hasSeconds(long)', '1']
Removed row: ['org.assertj.core.api.AbstractFloatAssert:', 'org.assertj.core.api.AbstractFloatAssert', 'isEqualTo(float)', '2']
Removed row: ['org.assertj.core.api.AbstractFloatAssert:', 'org.assertj.core.api.AbstractFloatAssert', 'isGreaterThanOrEqualTo(float)', '1']
Removed row: ['org.assertj.core.api.AbstractFloatAssert:', 'org.assertj.core.api.AbstractFloatAssert', 'isLessThanOrEqualTo(float)', '1']
Removed row: ['org.assertj.core.api.AbstractFloatAssert:', 'org.assertj.core.api.AbstractFloatAssert', 'isNotEqualTo(float)', '1']
Removed row: ['org.assertj.core.api.AbstractFloatAssert:', 'void', 'assertIsPrimitiveNonZero()', '1']
Removed row: ['org.assertj.core.api.AbstractFloatAssert:', 'void', 'assertIsPrimitiveZero()', '1']
Removed row: ['org.assertj.core.api.AbstractInstantAssert:', 'org.assertj.core.api.AbstractInstantAssert', 'isAfter(java.time.Instant)', '1']
Removed row: ['org.assertj.core.api.AbstractInstantAssert:', 'org.assertj.core.api.AbstractInstantAssert', 'isAfterOrEqualTo(java.time.Instant)', '1']
Removed row: ['org.assertj.core.api.AbstractInstantAssert:', 'org.assertj.core.api.AbstractInstantAssert', 'isBefore(java.time.Instant)', '1']
Removed row: ['org.assertj.core.api.AbstractInstantAssert:', 'org.assertj.core.api.AbstractInstantAssert', 'isBeforeOrEqualTo(java.time.Instant)', '1']
Removed row: ['org.assertj.core.api.AbstractIterableAssert:', 'java.lang.Object', 'lastElement()', '3']
Removed row: ['org.assertj.core.api.AbstractIterableAssert:', 'org.assertj.core.api.AbstractAssert', 'internalElement(int)', '2']
Removed row: ['org.assertj.core.api.AbstractIterableAssert:', 'org.assertj.core.api.AbstractAssert', 'internalFirst()', '1']
Removed row: ['org.assertj.core.api.AbstractIterableAssert:', 'org.assertj.core.api.AbstractIterableAssert', 'filteredOnAssertions(java.util.function.Consumer)', '1']
Removed row: ['org.assertj.core.api.AbstractIterableAssert:', 'org.assertj.core.api.AbstractIterableAssert', 'hasOnlyOneElementSatisfying(java.util.function.Consumer)', '1']
Removed row: ['org.assertj.core.api.AbstractIterableAssert:', 'org.assertj.core.api.AbstractIterableAssert', 'internalFilteredOn(java.util.function.Predicate)', '1']
Removed row: ['org.assertj.core.api.AbstractIterableAssert:', 'org.assertj.core.api.AbstractListAssert', 'extracting(java.util.function.Function[])', '1']
Removed row: ['org.assertj.core.api.AbstractIterableAssert:', 'org.assertj.core.api.AbstractListAssert', 'flatExtracting(java.util.function.Function[])', '1']
Removed row: ['org.assertj.core.api.AbstractIterableAssert:', 'org.assertj.core.api.AbstractListAssert', 'flatExtracting(org.assertj.core.api.iterable.ThrowingExtractor[])', '1']
Removed row: ['org.assertj.core.api.AbstractLocalDateAssert:', 'org.assertj.core.api.AbstractLocalDateAssert', 'isAfter(java.time.LocalDate)', '1']
Removed row: ['org.assertj.core.api.AbstractLocalDateAssert:', 'org.assertj.core.api.AbstractLocalDateAssert', 'isAfterOrEqualTo(java.time.LocalDate)', '1']
Removed row: ['org.assertj.core.api.AbstractLocalDateAssert:', 'org.assertj.core.api.AbstractLocalDateAssert', 'isBefore(java.time.LocalDate)', '1']
Removed row: ['org.assertj.core.api.AbstractLocalDateAssert:', 'org.assertj.core.api.AbstractLocalDateAssert', 'isBeforeOrEqualTo(java.time.LocalDate)', '1']
Removed row: ['org.assertj.core.api.AbstractLocalDateAssert:', 'org.assertj.core.api.AbstractLocalDateAssert', 'isToday()', '1']
Removed row: ['org.assertj.core.api.AbstractLocalTimeAssert:', 'org.assertj.core.api.AbstractLocalTimeAssert', 'isAfter(java.time.LocalTime)', '1']
Removed row: ['org.assertj.core.api.AbstractLocalTimeAssert:', 'org.assertj.core.api.AbstractLocalTimeAssert', 'isAfterOrEqualTo(java.time.LocalTime)', '1']
Removed row: ['org.assertj.core.api.AbstractLocalTimeAssert:', 'org.assertj.core.api.AbstractLocalTimeAssert', 'isBefore(java.time.LocalTime)', '1']
Removed row: ['org.assertj.core.api.AbstractLocalTimeAssert:', 'org.assertj.core.api.AbstractLocalTimeAssert', 'isBeforeOrEqualTo(java.time.LocalTime)', '1']
Removed row: ['org.assertj.core.api.AbstractLongAdderAssert:', 'org.assertj.core.api.AbstractLongAdderAssert', 'doesNotHaveValue(long)', '1']
Removed row: ['org.assertj.core.api.AbstractLongAdderAssert:', 'org.assertj.core.api.AbstractLongAdderAssert', 'hasValue(long)', '1']
Removed row: ['org.assertj.core.api.AbstractLongAdderAssert:', 'org.assertj.core.api.AbstractLongAdderAssert', 'isBetween(java.lang.Long,java.lang.Long)', '1']
Removed row: ['org.assertj.core.api.AbstractLongAdderAssert:', 'org.assertj.core.api.AbstractLongAdderAssert', 'isCloseTo(java.lang.Long,org.assertj.core.data.Offset)', '1']
Removed row: ['org.assertj.core.api.AbstractLongAdderAssert:', 'org.assertj.core.api.AbstractLongAdderAssert', 'isCloseTo(java.lang.Long,org.assertj.core.data.Percentage)', '1']
Removed row: ['org.assertj.core.api.AbstractLongAdderAssert:', 'org.assertj.core.api.AbstractLongAdderAssert', 'isEqualByComparingTo(java.lang.Long)', '1']
Removed row: ['org.assertj.core.api.AbstractLongAdderAssert:', 'org.assertj.core.api.AbstractLongAdderAssert', 'isGreaterThan(java.lang.Long)', '1']
Removed row: ['org.assertj.core.api.AbstractLongAdderAssert:', 'org.assertj.core.api.AbstractLongAdderAssert', 'isGreaterThanOrEqualTo(java.lang.Long)', '1']
Removed row: ['org.assertj.core.api.AbstractLongAdderAssert:', 'org.assertj.core.api.AbstractLongAdderAssert', 'isLessThan(java.lang.Long)', '1']
Removed row: ['org.assertj.core.api.AbstractLongAdderAssert:', 'org.assertj.core.api.AbstractLongAdderAssert', 'isLessThanOrEqualTo(java.lang.Long)', '1']
Removed row: ['org.assertj.core.api.AbstractLongAdderAssert:', 'org.assertj.core.api.AbstractLongAdderAssert', 'isNegative()', '1']
Removed row: ['org.assertj.core.api.AbstractLongAdderAssert:', 'org.assertj.core.api.AbstractLongAdderAssert', 'isNotCloseTo(java.lang.Long,org.assertj.core.data.Offset)', '1']
Removed row: ['org.assertj.core.api.AbstractLongAdderAssert:', 'org.assertj.core.api.AbstractLongAdderAssert', 'isNotCloseTo(java.lang.Long,org.assertj.core.data.Percentage)', '1']
Removed row: ['org.assertj.core.api.AbstractLongAdderAssert:', 'org.assertj.core.api.AbstractLongAdderAssert', 'isNotEqualByComparingTo(java.lang.Long)', '1']
Removed row: ['org.assertj.core.api.AbstractLongAdderAssert:', 'org.assertj.core.api.AbstractLongAdderAssert', 'isNotNegative()', '1']
Removed row: ['org.assertj.core.api.AbstractLongAdderAssert:', 'org.assertj.core.api.AbstractLongAdderAssert', 'isNotPositive()', '1']
Removed row: ['org.assertj.core.api.AbstractLongAdderAssert:', 'org.assertj.core.api.AbstractLongAdderAssert', 'isNotZero()', '1']
Removed row: ['org.assertj.core.api.AbstractLongAdderAssert:', 'org.assertj.core.api.AbstractLongAdderAssert', 'isOne()', '1']
Removed row: ['org.assertj.core.api.AbstractLongAdderAssert:', 'org.assertj.core.api.AbstractLongAdderAssert', 'isPositive()', '1']
Removed row: ['org.assertj.core.api.AbstractLongAdderAssert:', 'org.assertj.core.api.AbstractLongAdderAssert', 'isStrictlyBetween(java.lang.Long,java.lang.Long)', '1']
Removed row: ['org.assertj.core.api.AbstractLongAdderAssert:', 'org.assertj.core.api.AbstractLongAdderAssert', 'isZero()', '1']
Removed row: ['org.assertj.core.api.AbstractMapAssert:', 'org.assertj.core.api.AbstractListAssert', 'extractingFromEntries(java.util.function.Function)', '1']
Removed row: ['org.assertj.core.api.AbstractMapAssert:', 'org.assertj.core.api.AbstractListAssert', 'extractingFromEntries(java.util.function.Function[])', '1']
Removed row: ['org.assertj.core.api.AbstractMapAssert:', 'org.assertj.core.api.AbstractMapSizeAssert', 'size()', '1']
Removed row: ['org.assertj.core.api.AbstractMapAssert:', 'org.assertj.core.api.AbstractObjectAssert', 'extracting(java.lang.Object)', '1']
Removed row: ['org.assertj.core.api.AbstractMapAssert:', 'org.assertj.core.api.AbstractObjectAssert', 'internalExtractingByKey(java.lang.Object)', '1']
Removed row: ['org.assertj.core.api.AbstractObjectArrayAssert:', 'java.lang.Object[]', 'toGenericArray(java.util.List)', '1']
Removed row: ['org.assertj.core.api.AbstractOffsetDateTimeAssert:', 'org.assertj.core.api.AbstractOffsetDateTimeAssert', 'isAtSameInstantAs(java.time.OffsetDateTime)', '1']
Removed row: ['org.assertj.core.api.AbstractOffsetTimeAssert:', 'org.assertj.core.api.AbstractOffsetTimeAssert', 'isAfter(java.time.OffsetTime)', '1']
Removed row: ['org.assertj.core.api.AbstractOffsetTimeAssert:', 'org.assertj.core.api.AbstractOffsetTimeAssert', 'isAfterOrEqualTo(java.time.OffsetTime)', '1']
Removed row: ['org.assertj.core.api.AbstractOffsetTimeAssert:', 'org.assertj.core.api.AbstractOffsetTimeAssert', 'isBefore(java.time.OffsetTime)', '1']
Removed row: ['org.assertj.core.api.AbstractOffsetTimeAssert:', 'org.assertj.core.api.AbstractOffsetTimeAssert', 'isBeforeOrEqualTo(java.time.OffsetTime)', '1']
Removed row: ['org.assertj.core.api.AbstractOptionalAssert:', 'org.assertj.core.api.AbstractObjectAssert', 'internalGet()', '1']
Removed row: ['org.assertj.core.api.AbstractOptionalAssert:', 'org.assertj.core.api.AbstractOptionalAssert', 'contains(java.lang.Object)', '3']
Removed row: ['org.assertj.core.api.AbstractOptionalAssert:', 'org.assertj.core.api.AbstractOptionalAssert', 'containsInstanceOf(java.lang.Class)', '1']
Removed row: ['org.assertj.core.api.AbstractOptionalAssert:', 'org.assertj.core.api.AbstractOptionalAssert', 'containsSame(java.lang.Object)', '2']
Removed row: ['org.assertj.core.api.AbstractOptionalAssert:', 'org.assertj.core.api.AbstractOptionalAssert', 'flatMap(java.util.function.Function)', '1']
Removed row: ['org.assertj.core.api.AbstractOptionalAssert:', 'org.assertj.core.api.AbstractOptionalAssert', 'hasValueSatisfying(java.util.function.Consumer)', '1']
Removed row: ['org.assertj.core.api.AbstractOptionalAssert:', 'org.assertj.core.api.AbstractOptionalAssert', 'hasValueSatisfying(org.assertj.core.api.Condition)', '1']
Removed row: ['org.assertj.core.api.AbstractOptionalAssert:', 'org.assertj.core.api.AbstractOptionalAssert', 'isEmpty()', '1']
Removed row: ['org.assertj.core.api.AbstractOptionalAssert:', 'org.assertj.core.api.AbstractOptionalAssert', 'map(java.util.function.Function)', '1']
Removed row: ['org.assertj.core.api.AbstractOptionalAssert:', 'void', 'assertValueIsPresent()', '1']
Removed row: ['org.assertj.core.api.AbstractOptionalDoubleAssert:', 'org.assertj.core.api.AbstractOptionalDoubleAssert', 'hasValue(double)', '3']
Removed row: ['org.assertj.core.api.AbstractOptionalDoubleAssert:', 'org.assertj.core.api.AbstractOptionalDoubleAssert', 'hasValueCloseTo(java.lang.Double,org.assertj.core.data.Offset)', '3']
Removed row: ['org.assertj.core.api.AbstractOptionalDoubleAssert:', 'org.assertj.core.api.AbstractOptionalDoubleAssert', 'hasValueCloseTo(java.lang.Double,org.assertj.core.data.Percentage)', '3']
Removed row: ['org.assertj.core.api.AbstractOptionalDoubleAssert:', 'org.assertj.core.api.AbstractOptionalDoubleAssert', 'isEmpty()', '1']
Removed row: ['org.assertj.core.api.AbstractOptionalDoubleAssert:', 'org.assertj.core.api.AbstractOptionalDoubleAssert', 'isPresent()', '1']
Removed row: ['org.assertj.core.api.AbstractOptionalIntAssert:', 'org.assertj.core.api.AbstractOptionalIntAssert', 'hasValue(int)', '3']
Removed row: ['org.assertj.core.api.AbstractOptionalIntAssert:', 'org.assertj.core.api.AbstractOptionalIntAssert', 'isEmpty()', '1']
Removed row: ['org.assertj.core.api.AbstractOptionalIntAssert:', 'org.assertj.core.api.AbstractOptionalIntAssert', 'isPresent()', '1']
Removed row: ['org.assertj.core.api.AbstractOptionalLongAssert:', 'org.assertj.core.api.AbstractOptionalLongAssert', 'hasValue(long)', '3']
Removed row: ['org.assertj.core.api.AbstractOptionalLongAssert:', 'org.assertj.core.api.AbstractOptionalLongAssert', 'isEmpty()', '1']
Removed row: ['org.assertj.core.api.AbstractOptionalLongAssert:', 'org.assertj.core.api.AbstractOptionalLongAssert', 'isPresent()', '1']
Removed row: ['org.assertj.core.api.AbstractPeriodAssert:', 'org.assertj.core.api.AbstractPeriodAssert', 'hasDays(int)', '1']
Removed row: ['org.assertj.core.api.AbstractPeriodAssert:', 'org.assertj.core.api.AbstractPeriodAssert', 'hasMonths(int)', '1']
Removed row: ['org.assertj.core.api.AbstractPeriodAssert:', 'org.assertj.core.api.AbstractPeriodAssert', 'hasYears(int)', '1']
Removed row: ['org.assertj.core.api.AbstractPeriodAssert:', 'org.assertj.core.api.AbstractPeriodAssert', 'isNegative()', '1']
Removed row: ['org.assertj.core.api.AbstractPeriodAssert:', 'org.assertj.core.api.AbstractPeriodAssert', 'isPositive()', '1']
Removed row: ['org.assertj.core.api.AbstractPredicateAssert:', 'org.assertj.core.api.AbstractPredicateAssert', 'accepts(java.lang.Object[])', '1']
Removed row: ['org.assertj.core.api.AbstractPredicateAssert:', 'org.assertj.core.api.AbstractPredicateAssert', 'rejects(java.lang.Object[])', '1']
Removed row: ['org.assertj.core.api.AbstractThrowableAssert:', 'org.assertj.core.api.AbstractThrowableAssert', 'getCause()', '1']
Removed row: ['org.assertj.core.api.AbstractZonedDateTimeAssert:', 'java.time.ZonedDateTime', 'sameInstantInActualTimeZone(java.time.ZonedDateTime)', '1']
Removed row: ['org.assertj.core.api.AtomicBooleanAssert:', 'void', 'assertEqual(boolean)', '1']
Removed row: ['org.assertj.core.api.AtomicIntegerAssert:', 'org.assertj.core.api.AtomicIntegerAssert', 'doesNotHaveValue(int)', '1']
Removed row: ['org.assertj.core.api.AtomicIntegerAssert:', 'org.assertj.core.api.AtomicIntegerAssert', 'hasNegativeValue()', '1']
Removed row: ['org.assertj.core.api.AtomicIntegerAssert:', 'org.assertj.core.api.AtomicIntegerAssert', 'hasNonNegativeValue()', '1']
Removed row: ['org.assertj.core.api.AtomicIntegerAssert:', 'org.assertj.core.api.AtomicIntegerAssert', 'hasNonPositiveValue()', '1']
Removed row: ['org.assertj.core.api.AtomicIntegerAssert:', 'org.assertj.core.api.AtomicIntegerAssert', 'hasPositiveValue()', '1']
Removed row: ['org.assertj.core.api.AtomicIntegerAssert:', 'org.assertj.core.api.AtomicIntegerAssert', 'hasValue(int)', '1']
Removed row: ['org.assertj.core.api.AtomicIntegerAssert:', 'org.assertj.core.api.AtomicIntegerAssert', 'hasValueBetween(int,int)', '1']
Removed row: ['org.assertj.core.api.AtomicIntegerAssert:', 'org.assertj.core.api.AtomicIntegerAssert', 'hasValueCloseTo(int,org.assertj.core.data.Offset)', '1']
Removed row: ['org.assertj.core.api.AtomicIntegerAssert:', 'org.assertj.core.api.AtomicIntegerAssert', 'hasValueCloseTo(int,org.assertj.core.data.Percentage)', '1']
Removed row: ['org.assertj.core.api.AtomicIntegerAssert:', 'org.assertj.core.api.AtomicIntegerAssert', 'hasValueGreaterThan(int)', '1']
Removed row: ['org.assertj.core.api.AtomicIntegerAssert:', 'org.assertj.core.api.AtomicIntegerAssert', 'hasValueGreaterThanOrEqualTo(int)', '1']
Removed row: ['org.assertj.core.api.AtomicIntegerAssert:', 'org.assertj.core.api.AtomicIntegerAssert', 'hasValueLessThan(int)', '1']
Removed row: ['org.assertj.core.api.AtomicIntegerAssert:', 'org.assertj.core.api.AtomicIntegerAssert', 'hasValueLessThanOrEqualTo(int)', '1']
Removed row: ['org.assertj.core.api.AtomicIntegerFieldUpdaterAssert:', 'java.lang.Integer', 'getActualValue(java.lang.Object)', '1']
Removed row: ['org.assertj.core.api.AtomicLongAssert:', 'org.assertj.core.api.AtomicLongAssert', 'doesNotHaveValue(long)', '1']
Removed row: ['org.assertj.core.api.AtomicLongAssert:', 'org.assertj.core.api.AtomicLongAssert', 'hasNegativeValue()', '1']
Removed row: ['org.assertj.core.api.AtomicLongAssert:', 'org.assertj.core.api.AtomicLongAssert', 'hasNonNegativeValue()', '1']
Removed row: ['org.assertj.core.api.AtomicLongAssert:', 'org.assertj.core.api.AtomicLongAssert', 'hasNonPositiveValue()', '1']
Removed row: ['org.assertj.core.api.AtomicLongAssert:', 'org.assertj.core.api.AtomicLongAssert', 'hasPositiveValue()', '1']
Removed row: ['org.assertj.core.api.AtomicLongAssert:', 'org.assertj.core.api.AtomicLongAssert', 'hasValue(long)', '1']
Removed row: ['org.assertj.core.api.AtomicLongAssert:', 'org.assertj.core.api.AtomicLongAssert', 'hasValueBetween(long,long)', '1']
Removed row: ['org.assertj.core.api.AtomicLongAssert:', 'org.assertj.core.api.AtomicLongAssert', 'hasValueCloseTo(long,org.assertj.core.data.Offset)', '1']
Removed row: ['org.assertj.core.api.AtomicLongAssert:', 'org.assertj.core.api.AtomicLongAssert', 'hasValueCloseTo(long,org.assertj.core.data.Percentage)', '1']
Removed row: ['org.assertj.core.api.AtomicLongAssert:', 'org.assertj.core.api.AtomicLongAssert', 'hasValueGreaterThan(long)', '1']
Removed row: ['org.assertj.core.api.AtomicLongAssert:', 'org.assertj.core.api.AtomicLongAssert', 'hasValueGreaterThanOrEqualTo(long)', '1']
Removed row: ['org.assertj.core.api.AtomicLongAssert:', 'org.assertj.core.api.AtomicLongAssert', 'hasValueLessThan(long)', '1']
Removed row: ['org.assertj.core.api.AtomicLongAssert:', 'org.assertj.core.api.AtomicLongAssert', 'hasValueLessThanOrEqualTo(long)', '1']
Removed row: ['org.assertj.core.api.AtomicLongFieldUpdaterAssert:', 'java.lang.Long', 'getActualValue(java.lang.Object)', '1']
Removed row: ['org.assertj.core.api.AtomicMarkableReferenceAssert:', 'java.lang.Object', 'getReference()', '1']
Removed row: ['org.assertj.core.api.AtomicMarkableReferenceAssert:', 'org.assertj.core.api.AtomicMarkableReferenceAssert', 'isMarked()', '1']
Removed row: ['org.assertj.core.api.AtomicMarkableReferenceAssert:', 'org.assertj.core.api.AtomicMarkableReferenceAssert', 'isNotMarked()', '1']
Removed row: ['org.assertj.core.api.AtomicReferenceAssert:', 'org.assertj.core.api.AtomicReferenceAssert', 'doesNotHaveValue(java.lang.Object)', '1']
Removed row: ['org.assertj.core.api.AtomicReferenceAssert:', 'org.assertj.core.api.AtomicReferenceAssert', 'hasValue(java.lang.Object)', '1']
Removed row: ['org.assertj.core.api.AtomicReferenceFieldUpdaterAssert:', 'java.lang.Object', 'getActualValue(java.lang.Object)', '1']
Removed row: ['org.assertj.core.api.AtomicStampedReferenceAssert:', 'java.lang.Object', 'getReference()', '1']
Removed row: ['org.assertj.core.api.AtomicStampedReferenceAssert:', 'org.assertj.core.api.AtomicStampedReferenceAssert', 'hasStamp(int)', '1']
Removed row: ['org.assertj.core.error.ShouldBeInstance:', 'void', '<init>(java.lang.Object,java.lang.Class)', '1']
Removed row: ['org.assertj.core.error.ShouldContainCharSequence:', 'org.assertj.core.error.ErrorMessageFactory', 'shouldContain(java.lang.Throwable,java.lang.CharSequence)', '1']
Removed row: ['org.assertj.core.error.ShouldHaveMessage:', 'void', '<init>(java.lang.Throwable,java.lang.String)', '1']
Removed row: ['org.assertj.core.error.ShouldHaveMessageMatchingRegex:', 'void', '<init>(java.lang.Throwable,java.lang.CharSequence)', '1']
Removed row: ['org.assertj.core.internal.Booleans:', 'void', 'assertEqual(org.assertj.core.api.AssertionInfo,java.lang.Boolean,boolean)', '1']
Removed row: ['org.assertj.core.internal.IterableElementComparisonStrategy:', 'boolean', 'compareElementsOf(java.lang.Iterable,java.lang.Iterable)', '1']
Removed row: ['org.assertj.core.internal.Strings:', 'boolean', 'hasContent(java.lang.CharSequence)', '1']
Removed row: ['org.assertj.core.internal.Strings:', 'java.lang.String', 'removeAllWhitespaces(java.lang.CharSequence)', '3']
Removed row: ['org.assertj.core.internal.Strings:', 'void', 'assertStartsWith(org.assertj.core.api.AssertionInfo,java.lang.CharSequence,java.lang.CharSequence)', '1']
Removed row: ['org.assertj.core.internal.Throwables:', 'void', 'assertHasMessage(org.assertj.core.api.AssertionInfo,java.lang.Throwable,java.lang.String)', '2']
Removed row: ['org.assertj.core.internal.Throwables:', 'void', 'assertHasMessageContaining(org.assertj.core.api.AssertionInfo,java.lang.Throwable,java.lang.String)', '2']
Removed row: ['org.assertj.core.internal.Throwables:', 'void', 'assertHasMessageEndingWith(org.assertj.core.api.AssertionInfo,java.lang.Throwable,java.lang.String)', '3']
Removed row: ['org.assertj.core.internal.Throwables:', 'void', 'assertHasMessageMatching(org.assertj.core.api.AssertionInfo,java.lang.Throwable,java.lang.String)', '2']
Removed row: ['org.assertj.core.internal.Throwables:', 'void', 'assertHasMessageStartingWith(org.assertj.core.api.AssertionInfo,java.lang.Throwable,java.lang.String)', '3']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'boolean', 'hasCustomFormatterFor(java.lang.Object)', '1']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.Object', 'classNameOf(java.lang.Object)', '3']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'classNameDisambiguation(java.lang.Object)', '1']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'customFormat(java.lang.Object)', '1']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'defaultToStringWithClassNameDisambiguation(java.lang.Object)', '1']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'fallbackToStringOf(java.lang.Object)', '1']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'format(java.lang.Iterable,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)', '1']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'toStringOf(java.io.File)', '1']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'toStringOf(java.lang.Class)', '1']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'toStringOf(java.lang.Number)', '1']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'toStringOf(java.lang.Object)', '1']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'toStringOf(java.text.SimpleDateFormat)', '1']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'toStringOf(java.time.Duration)', '1']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'toStringOf(java.util.Comparator)', '5']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'toStringOf(java.util.Map)', '1']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'toStringOf(java.util.concurrent.Future)', '3']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'toStringOf(java.util.concurrent.atomic.AtomicBoolean)', '1']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'toStringOf(java.util.concurrent.atomic.AtomicInteger)', '1']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'toStringOf(java.util.concurrent.atomic.AtomicLong)', '1']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'toStringOf(java.util.concurrent.atomic.AtomicMarkableReference)', '2']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'toStringOf(java.util.concurrent.atomic.AtomicReference)', '1']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'toStringOf(java.util.concurrent.atomic.AtomicStampedReference)', '2']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'toStringOf(java.util.concurrent.atomic.LongAdder)', '1']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'toStringOf(org.assertj.core.groups.Tuple)', '1']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'toStringOf(org.assertj.core.internal.ComparatorBasedComparisonStrategy)', '2']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'toStringOf(org.assertj.core.presentation.PredicateDescription)', '1']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'toStringOf(org.assertj.core.util.diff.ChangeDelta)', '3']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'toStringOf(org.assertj.core.util.diff.DeleteDelta)', '2']
Removed row: ['org.assertj.core.presentation.StandardRepresentation:', 'java.lang.String', 'toStringOf(org.assertj.core.util.diff.InsertDelta)', '2']
Removed row: ['org.assertj.core.util.Arrays:', 'boolean', 'isArray(java.lang.Object)', '1']
Removed row: ['org.assertj.core.util.Arrays:', 'boolean', 'isArrayTypePrimitive(java.lang.Object)', '1']
Removed row: ['org.assertj.core.util.DateUtil:', 'java.lang.String', 'formatAsDatetime(java.util.Calendar)', '1']
Removed row: ['org.assertj.core.util.IterableUtil:', 'int', 'sizeOf(java.lang.Iterable)', '1']
Removed row: ['org.assertj.core.util.Streams:', 'java.util.stream.Stream', 'stream(java.lang.Iterable)', '2']
Removed row: ['org.assertj.core.util.Throwables:', 'java.lang.String', 'getStackTrace(java.lang.Throwable)', '1']
Removed row: ['org.h2.api.TimestampWithTimeZone:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.h2.jdbc.JdbcArray:', 'void', '<init>(org.h2.jdbc.JdbcConnection,org.h2.value.Value,int)', '1']
Removed row: ['org.h2.jdbc.JdbcConnection:', 'org.h2.jdbc.JdbcConnection$Settings', 'getSettings()', '5']
Removed row: ['org.h2.jdbc.JdbcPreparedStatement:', 'void', 'setArray(int,java.sql.Array)', '1']
Removed row: ['org.h2.jdbc.JdbcPreparedStatement:', 'void', 'setObject(int,java.lang.Object,int)', '1']
Removed row: ['org.h2.jdbc.JdbcResultSet:', 'java.lang.Object', 'extractObjectOfType(java.lang.Class,org.h2.value.Value)', '1']
Removed row: ['org.h2.message.TraceObject:', 'java.lang.String', 'quoteBigDecimal(java.math.BigDecimal)', '1']
Removed row: ['org.h2.message.TraceObject:', 'java.lang.String', 'quoteDate(java.sql.Date)', '1']
Removed row: ['org.h2.message.TraceObject:', 'java.lang.String', 'quoteTime(java.sql.Time)', '1']
Removed row: ['org.h2.message.TraceObject:', 'java.lang.String', 'quoteTimestamp(java.sql.Timestamp)', '1']
Removed row: ['org.h2.result.SimpleResult$Column:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.h2.util.DateTimeUtils:', 'int', 'parseNanos(java.lang.String,int,int)', '1']
Removed row: ['org.h2.util.IntervalUtils:', 'int', 'skipWS(java.lang.String,int)', '2']
Removed row: ['org.h2.util.IntervalUtils:', 'int', 'skipWSEnd(java.lang.String,int)', '2']
Removed row: ['org.h2.util.IntervalUtils:', 'long', 'parseIntervalLeading(java.lang.String,int,int,boolean)', '2']
Removed row: ['org.h2.util.IntervalUtils:', 'long', 'parseIntervalRemainingSeconds(java.lang.String,int)', '3']
Removed row: ['org.h2.util.IntervalUtils:', 'org.h2.value.ValueInterval', 'parseFormattedInterval(org.h2.api.IntervalQualifier,java.lang.String)', '24']
Removed row: ['org.h2.util.IntervalUtils:', 'org.h2.value.ValueInterval', 'parseInterval(org.h2.api.IntervalQualifier,boolean,java.lang.String)', '21']
Removed row: ['org.h2.util.IntervalUtils:', 'org.h2.value.ValueInterval', 'parseInterval2(org.h2.api.IntervalQualifier,java.lang.String,char,int,boolean)', '3']
Removed row: ['org.h2.util.JSR310Utils:', 'org.h2.value.Value', 'instantToValue(java.lang.Object)', '2']
Removed row: ['org.h2.util.JSR310Utils:', 'org.h2.value.Value', 'localDateTimeToValue(java.lang.Object)', '2']
Removed row: ['org.h2.util.JSR310Utils:', 'org.h2.value.Value', 'localDateToValue(java.lang.Object)', '3']
Removed row: ['org.h2.util.JSR310Utils:', 'org.h2.value.Value', 'localTimeToValue(java.lang.Object)', '1']
Removed row: ['org.h2.util.JSR310Utils:', 'org.h2.value.ValueInterval', 'durationToValue(java.lang.Object)', '2']
Removed row: ['org.h2.util.JSR310Utils:', 'org.h2.value.ValueInterval', 'periodToValue(java.lang.Object)', '3']
Removed row: ['org.h2.util.JSR310Utils:', 'org.h2.value.ValueTimeTimeZone', 'offsetTimeToValue(java.lang.Object)', '2']
Removed row: ['org.h2.util.JSR310Utils:', 'org.h2.value.ValueTimestampTimeZone', 'offsetDateTimeToValue(java.lang.Object)', '2']
Removed row: ['org.h2.util.JSR310Utils:', 'org.h2.value.ValueTimestampTimeZone', 'zonedDateTimeToValue(java.lang.Object)', '2']
Removed row: ['org.h2.util.StringUtils:', 'int', 'parseUInt31(java.lang.String,int,int)', '4']
Removed row: ['org.h2.util.StringUtils:', 'java.lang.String', 'cache(java.lang.String)', '3']
Removed row: ['org.h2.util.StringUtils:', 'java.lang.String', 'quoteJavaString(java.lang.String)', '1']
Removed row: ['org.h2.util.StringUtils:', 'java.lang.String', 'toUpperEnglish(java.lang.String)', '4']
Removed row: ['org.h2.util.StringUtils:', 'java.lang.StringBuilder', 'quoteStringSQL(java.lang.StringBuilder,java.lang.String)', '2']
Removed row: ['org.h2.util.StringUtils:', 'void', 'javaEncode(java.lang.String,java.lang.StringBuilder,boolean)', '2']
Removed row: ['org.h2.util.geometry.EWKTUtils$EWKTSource:', 'boolean', 'hasCoordinate()', '2']
Removed row: ['org.h2.util.geometry.EWKTUtils$EWKTSource:', 'boolean', 'hasData()', '1']
Removed row: ['org.h2.util.geometry.EWKTUtils$EWKTSource:', 'boolean', 'hasMoreCoordinates()', '2']
Removed row: ['org.h2.util.geometry.EWKTUtils$EWKTSource:', 'boolean', 'readEmpty()', '2']
Removed row: ['org.h2.util.geometry.EWKTUtils$EWKTSource:', 'double', 'readCoordinate()', '4']
Removed row: ['org.h2.util.geometry.EWKTUtils$EWKTSource:', 'int', 'getItemCount()', '2']
Removed row: ['org.h2.util.geometry.EWKTUtils$EWKTSource:', 'int', 'match(java.lang.String,int)', '2']
Removed row: ['org.h2.util.geometry.EWKTUtils$EWKTSource:', 'int', 'readDimensionSystem()', '3']
Removed row: ['org.h2.util.geometry.EWKTUtils$EWKTSource:', 'int', 'readSRID()', '4']
Removed row: ['org.h2.util.geometry.EWKTUtils$EWKTSource:', 'int', 'readType()', '2']
Removed row: ['org.h2.util.geometry.EWKTUtils$EWKTSource:', 'java.lang.String', 'toString()', '2']
Removed row: ['org.h2.util.geometry.EWKTUtils$EWKTSource:', 'void', 'checkStringEnd(int)', '1']
Removed row: ['org.h2.util.geometry.EWKTUtils$EWKTSource:', 'void', 'read(char)', '2']
Removed row: ['org.h2.util.geometry.EWKTUtils$EWKTSource:', 'void', 'skipWS()', '2']
Removed row: ['org.h2.util.json.JSONByteArrayTarget:', 'java.io.ByteArrayOutputStream', 'encodeString(java.io.ByteArrayOutputStream,java.lang.String)', '3']
Removed row: ['org.h2.value.DataType:', 'boolean', 'isGeometry(java.lang.Object)', '1']
Removed row: ['org.h2.value.DataType:', 'int', 'convertSQLTypeToValueType(int,java.lang.String)', '3']
Removed row: ['org.h2.value.DataType:', 'org.h2.value.Value', 'convertToValue1(org.h2.engine.SessionInterface,java.lang.Object,int)', '20']
Removed row: ['org.h2.value.Value:', 'long', 'convertToLong(java.math.BigDecimal,java.lang.Object)', '4']
Removed row: ['org.h2.value.Value:', 'org.h2.value.ValueBoolean', 'convertToBoolean()', '8']
Removed row: ['org.h2.value.Value:', 'org.h2.value.ValueByte', 'convertToByte(java.lang.Object)', '1']
Removed row: ['org.h2.value.Value:', 'org.h2.value.ValueBytes', 'convertToBytes(org.h2.engine.CastDataProvider)', '2']
Removed row: ['org.h2.value.Value:', 'org.h2.value.ValueDate', 'convertToDate()', '1']
Removed row: ['org.h2.value.Value:', 'org.h2.value.ValueDecimal', 'convertToDecimal()', '1']
Removed row: ['org.h2.value.Value:', 'org.h2.value.ValueDouble', 'convertToDouble()', '2']
Removed row: ['org.h2.value.Value:', 'org.h2.value.ValueFloat', 'convertToFloat()', '2']
Removed row: ['org.h2.value.Value:', 'org.h2.value.ValueInt', 'convertToInt(java.lang.Object)', '1']
Removed row: ['org.h2.value.Value:', 'org.h2.value.ValueJavaObject', 'convertToJavaObject()', '1']
Removed row: ['org.h2.value.Value:', 'org.h2.value.ValueLobDb', 'convertToBlob()', '1']
Removed row: ['org.h2.value.Value:', 'org.h2.value.ValueLobDb', 'convertToClob()', '1']
Removed row: ['org.h2.value.Value:', 'org.h2.value.ValueLong', 'convertToLong(java.lang.Object)', '1']
Removed row: ['org.h2.value.Value:', 'org.h2.value.ValueShort', 'convertToShort(java.lang.Object)', '1']
Removed row: ['org.h2.value.Value:', 'org.h2.value.ValueTime', 'convertToTime(org.h2.engine.CastDataProvider,boolean)', '1']
Removed row: ['org.h2.value.Value:', 'org.h2.value.ValueTimeTimeZone', 'convertToTimeTimeZone(org.h2.engine.CastDataProvider,boolean)', '1']
Removed row: ['org.h2.value.Value:', 'org.h2.value.ValueTimestamp', 'convertToTimestamp(org.h2.engine.CastDataProvider,boolean)', '1']
Removed row: ['org.h2.value.Value:', 'org.h2.value.ValueTimestampTimeZone', 'convertToTimestampTimeZone(org.h2.engine.CastDataProvider,boolean)', '1']
Removed row: ['org.h2.value.ValueDate:', 'org.h2.value.ValueDate', 'get(java.util.TimeZone,java.sql.Date)', '1']
Removed row: ['org.h2.value.ValueDecimal:', 'boolean', 'checkPrecision(long)', '1']
Removed row: ['org.h2.value.ValueDecimal:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.h2.value.ValueDecimal:', 'int', 'compareTypeSafe(org.h2.value.Value,org.h2.value.CompareMode,org.h2.engine.CastDataProvider)', '1']
Removed row: ['org.h2.value.ValueDecimal:', 'int', 'getMemory()', '1']
Removed row: ['org.h2.value.ValueDecimal:', 'int', 'getSignum()', '1']
Removed row: ['org.h2.value.ValueDecimal:', 'int', 'hashCode()', '1']
Removed row: ['org.h2.value.ValueDecimal:', 'java.lang.String', 'getString()', '1']
Removed row: ['org.h2.value.ValueDecimal:', 'org.h2.value.TypeInfo', 'getType()', '2']
Removed row: ['org.h2.value.ValueDecimal:', 'org.h2.value.Value', 'add(org.h2.value.Value)', '1']
Removed row: ['org.h2.value.ValueDecimal:', 'org.h2.value.Value', 'convertPrecision(long)', '2']
Removed row: ['org.h2.value.ValueDecimal:', 'org.h2.value.Value', 'convertScale(boolean,int)', '2']
Removed row: ['org.h2.value.ValueDecimal:', 'org.h2.value.Value', 'divide(org.h2.value.Value)', '3']
Removed row: ['org.h2.value.ValueDecimal:', 'org.h2.value.Value', 'multiply(org.h2.value.Value)', '1']
Removed row: ['org.h2.value.ValueDecimal:', 'org.h2.value.Value', 'negate()', '1']
Removed row: ['org.h2.value.ValueDecimal:', 'org.h2.value.Value', 'subtract(org.h2.value.Value)', '1']
Removed row: ['org.h2.value.ValueDecimal:', 'org.h2.value.ValueDecimal', 'get(java.math.BigInteger)', '1']
Removed row: ['org.h2.value.ValueDecimal:', 'org.h2.value.ValueDecimal', 'modulus(org.h2.value.Value)', '2']
Removed row: ['org.h2.value.ValueDecimal:', 'void', '<init>(java.math.BigDecimal)', '2']
Removed row: ['org.h2.value.ValueJavaObject$NotSerialized:', 'boolean', 'equals(java.lang.Object)', '2']
Removed row: ['org.h2.value.ValueJavaObject$NotSerialized:', 'int', 'hashCode()', '1']
Removed row: ['org.h2.value.ValueJavaObject$NotSerialized:', 'java.lang.String', 'getString()', '1']
Removed row: ['org.h2.value.ValueJavaObject$NotSerialized:', 'org.h2.value.TypeInfo', 'createType(java.lang.String)', '1']
Removed row: ['org.h2.value.ValueJson:', 'org.h2.value.ValueJson', 'get(java.lang.String)', '1']
Removed row: ['org.h2.value.ValueJson:', 'org.h2.value.ValueJson', 'get(java.math.BigDecimal)', '3']
Removed row: ['org.h2.value.ValueLob:', 'int', 'compare(org.h2.value.Value,org.h2.value.Value)', '6']
Removed row: ['org.h2.value.ValueLobDb:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.h2.value.ValueResultSet:', 'org.h2.value.ValueResultSet', 'get(org.h2.engine.SessionInterface,java.sql.ResultSet,int)', '3']
Removed row: ['org.h2.value.ValueString:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.h2.value.ValueString:', 'int', 'getMemory()', '1']
Removed row: ['org.h2.value.ValueString:', 'int', 'hashCode()', '1']
Removed row: ['org.h2.value.ValueString:', 'org.h2.value.TypeInfo', 'getType()', '1']
Removed row: ['org.h2.value.ValueString:', 'org.h2.value.Value', 'convertPrecision(long)', '2']
Removed row: ['org.h2.value.ValueString:', 'org.h2.value.Value', 'get(java.lang.String,org.h2.engine.CastDataProvider)', '2']
Removed row: ['org.h2.value.ValueStringFixed:', 'java.lang.String', 'trimRight(java.lang.String,int)', '3']
Removed row: ['org.h2.value.ValueStringFixed:', 'org.h2.value.ValueStringFixed', 'get(java.lang.String)', '1']
Removed row: ['org.h2.value.ValueStringIgnoreCase:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.h2.value.ValueStringIgnoreCase:', 'int', 'hashCode()', '1']
Removed row: ['org.h2.value.ValueStringIgnoreCase:', 'org.h2.value.ValueStringIgnoreCase', 'get(java.lang.String)', '2']
Removed row: ['org.h2.value.ValueTime:', 'org.h2.value.ValueTime', 'get(java.util.TimeZone,java.sql.Time)', '1']
Removed row: ['org.h2.value.ValueTimestamp:', 'org.h2.value.ValueTimestamp', 'get(java.util.TimeZone,java.sql.Timestamp)', '2']
Removed row: ['org.h2.value.ValueTimestampTimeZone:', 'org.h2.value.ValueTimestampTimeZone', 'get(org.h2.api.TimestampWithTimeZone)', '3']
Removed row: ['org.h2.value.ValueUuid:', 'org.h2.value.ValueUuid', 'get(java.lang.String)', '2']
Removed row: ['org.h2.value.ValueUuid:', 'org.h2.value.ValueUuid', 'get(java.util.UUID)', '2']
Removed row: ['org.junit.Assert:', 'java.lang.String', 'format(java.lang.String,java.lang.Object,java.lang.Object)', '1']
Removed row: ['org.junit.jupiter.api.AssertionUtils:', 'boolean', 'objectsAreEqual(java.lang.Object,java.lang.Object)', '1']
Removed row: ['org.junit.jupiter.api.AssertionUtils:', 'java.lang.String', 'formatValues(java.lang.Object,java.lang.Object)', '1']
Removed row: ['org.junit.jupiter.api.AssertionUtils:', 'java.lang.String', 'getCanonicalName(java.lang.Class)', '3']
Removed row: ['org.junit.jupiter.api.AssertionUtils:', 'java.lang.String', 'getClassName(java.lang.Object)', '1']
Removed row: ['org.junit.platform.commons.util.StringUtils:', 'java.lang.String', 'defaultToString(java.lang.Object)', '1']
Removed row: ['org.junit.platform.commons.util.StringUtils:', 'java.lang.String', 'nullSafeToString(java.lang.Object)', '3']
Removed row: ['org.mockito.internal.MockitoCore:', 'java.lang.Object', 'verify(java.lang.Object,org.mockito.verification.VerificationMode)', '1']
Removed row: ['org.mockito.internal.util.DefaultMockingDetails:', 'void', 'assertGoodMock()', '1']
Removed row: ['org.mockito.internal.util.MockUtil:', 'org.mockito.invocation.MockHandler', 'getMockHandler(java.lang.Object)', '1']
Removed row: ['org.opentest4j.ValueWrapper:', 'org.opentest4j.ValueWrapper', 'create(java.lang.Object,java.lang.String)', '1']
Removed row: ['org.opentest4j.ValueWrapper:', 'void', '<init>(java.lang.Object,java.lang.String)', '1']
Removed row: ['org.postgresql.Driver:', 'org.postgresql.util.HostSpec[]', 'hostSpecs(java.util.Properties)', '2']
Removed row: ['org.postgresql.core.BaseQueryKey:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.postgresql.core.PGStream:', 'void', 'send(org.postgresql.util.ByteStreamWriter)', '2']
Removed row: ['org.postgresql.core.QueryWithReturningColumnsKey:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.postgresql.core.ResultHandlerBase:', 'void', 'handleError(java.sql.SQLException)', '1']
Removed row: ['org.postgresql.core.ResultHandlerBase:', 'void', 'handleWarning(java.sql.SQLWarning)', '1']
Removed row: ['org.postgresql.core.Utils:', 'byte[]', 'encodeUTF8(java.lang.String)', '1']
Removed row: ['org.postgresql.core.Utils:', 'java.lang.StringBuilder', 'escapeIdentifier(java.lang.StringBuilder,java.lang.String)', '1']
Removed row: ['org.postgresql.core.Utils:', 'void', 'doAppendEscapedIdentifier(java.lang.Appendable,java.lang.String)', '2']
Removed row: ['org.postgresql.core.v3.ConnectionFactoryImpl:', 'boolean', 'isPrimary(org.postgresql.core.QueryExecutor)', '1']
Removed row: ['org.postgresql.core.v3.ConnectionFactoryImpl:', 'void', 'doAuthentication(org.postgresql.core.PGStream,java.lang.String,java.lang.String,java.util.Properties)', '4']
Removed row: ['org.postgresql.core.v3.QueryExecutorImpl:', 'void', 'processResults(org.postgresql.core.ResultHandler,int)', '6']
Removed row: ['org.postgresql.core.v3.SimpleParameterList:', 'int', 'getV3Length(int)', '3']
Removed row: ['org.postgresql.core.v3.SimpleParameterList:', 'java.lang.String', 'toString(int,boolean)', '1']
Removed row: ['org.postgresql.core.v3.SimpleParameterList:', 'void', 'streamBytea(org.postgresql.core.PGStream,org.postgresql.util.StreamWrapper)', '5']
Removed row: ['org.postgresql.fastpath.Fastpath:', 'void', 'addFunctions(java.sql.ResultSet)', '3']
Removed row: ['org.postgresql.hostchooser.HostRequirement:', 'org.postgresql.hostchooser.HostRequirement', 'getTargetServerType(java.lang.String)', '1']
Removed row: ['org.postgresql.jdbc.AbstractBlobClob:', 'org.postgresql.largeobject.LargeObject', 'getLo(boolean)', '1']
Removed row: ['org.postgresql.jdbc.AbstractBlobClob:', 'void', 'addSubLO(org.postgresql.largeobject.LargeObject)', '1']
Removed row: ['org.postgresql.jdbc.ArrayDecoding:', 'org.postgresql.jdbc.ArrayDecoding$ArrayDecoder', 'getDecoder(int,org.postgresql.core.BaseConnection)', '1']
Removed row: ['org.postgresql.jdbc.ArrayDecoding:', 'org.postgresql.jdbc.ArrayDecoding$PgArrayList', 'buildArrayList(java.lang.String,char)', '1']
Removed row: ['org.postgresql.jdbc.ArrayDecoding$12:', 'java.lang.Object', 'parseValue(java.lang.String,org.postgresql.core.BaseConnection)', '1']
Removed row: ['org.postgresql.jdbc.ArrayDecoding$13:', 'java.lang.Object', 'parseValue(java.lang.String,org.postgresql.core.BaseConnection)', '1']
Removed row: ['org.postgresql.jdbc.ArrayDecoding$14:', 'java.lang.Object', 'parseValue(java.lang.String,org.postgresql.core.BaseConnection)', '1']
Removed row: ['org.postgresql.jdbc.ArrayDecoding$8:', 'java.lang.Object', 'parseValue(int,java.nio.ByteBuffer,org.postgresql.core.BaseConnection)', '1']
Removed row: ['org.postgresql.jdbc.ArrayDecoding$MappedTypeObjectArrayDecoder:', 'java.lang.Object', 'parseValue(int,java.nio.ByteBuffer,org.postgresql.core.BaseConnection)', '1']
Removed row: ['org.postgresql.jdbc.ArrayDecoding$MappedTypeObjectArrayDecoder:', 'java.lang.Object', 'parseValue(java.lang.String,org.postgresql.core.BaseConnection)', '1']
Removed row: ['org.postgresql.jdbc.ArrayEncoding:', 'org.postgresql.jdbc.ArrayEncoding$ArrayEncoder', 'getArrayEncoder(java.lang.Object)', '1']
Removed row: ['org.postgresql.jdbc.BatchResultHandler:', 'void', 'handleCommandStatus(java.lang.String,long,long)', '1']
Removed row: ['org.postgresql.jdbc.BatchResultHandler:', 'void', 'updateGeneratedKeys()', '1']
Removed row: ['org.postgresql.jdbc.BooleanTypeUtil:', 'boolean', 'castToBoolean(java.lang.Object)', '1']
Removed row: ['org.postgresql.jdbc.BooleanTypeUtil:', 'boolean', 'fromCharacter(java.lang.Character)', '10']
Removed row: ['org.postgresql.jdbc.BooleanTypeUtil:', 'boolean', 'fromNumber(java.lang.Number)', '1']
Removed row: ['org.postgresql.jdbc.BooleanTypeUtil:', 'boolean', 'fromString(java.lang.String)', '1']
Removed row: ['org.postgresql.jdbc.FieldMetadata:', 'long', 'getSize()', '3']
Removed row: ['org.postgresql.jdbc.FieldMetadata$Key:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.postgresql.jdbc.PgArray:', 'java.lang.Object', 'buildArray(org.postgresql.jdbc.ArrayDecoding$PgArrayList,int,int)', '1']
Removed row: ['org.postgresql.jdbc.PgArray:', 'java.lang.String', 'getBaseTypeName()', '2']
Removed row: ['org.postgresql.jdbc.PgArray:', 'org.postgresql.jdbc.ArrayDecoding$PgArrayList', 'buildArrayList(java.lang.String)', '1']
Removed row: ['org.postgresql.jdbc.PgCallableStatement:', 'boolean', 'executeWithFlags(int)', '6']
Removed row: ['org.postgresql.jdbc.PgPreparedStatement:', 'long', 'createBlob(int,java.io.InputStream,long)', '2']
Removed row: ['org.postgresql.jdbc.PgPreparedStatement:', 'void', 'setArray(int,java.sql.Array)', '3']
Removed row: ['org.postgresql.jdbc.PgPreparedStatement:', 'void', 'setBlob(int,java.sql.Blob)', '2']
Removed row: ['org.postgresql.jdbc.PgPreparedStatement:', 'void', 'setClob(int,java.sql.Clob)', '2']
Removed row: ['org.postgresql.jdbc.PgPreparedStatement:', 'void', 'setNumber(int,java.lang.Number)', '1']
Removed row: ['org.postgresql.jdbc.PgPreparedStatement:', 'void', 'setObject(int,java.lang.Object)', '11']
Removed row: ['org.postgresql.jdbc.PgPreparedStatement:', 'void', 'setPGobject(int,org.postgresql.util.PGobject)', '4']
Removed row: ['org.postgresql.jdbc.PgPreparedStatement:', 'void', 'setSQLXML(int,java.sql.SQLXML)', '1']
Removed row: ['org.postgresql.jdbc.PgPreparedStatement:', 'void', 'setTime(int,java.sql.Time,java.util.Calendar)', '2']
Removed row: ['org.postgresql.jdbc.PgPreparedStatement:', 'void', 'setTimestamp(int,java.sql.Timestamp,java.util.Calendar)', '2']
Removed row: ['org.postgresql.jdbc.PgPreparedStatement:', 'void', 'setUuid(int,java.util.UUID)', '3']
Removed row: ['org.postgresql.jdbc.PgResultSet:', 'byte', 'getByte(int)', '1']
Removed row: ['org.postgresql.jdbc.PgResultSet:', 'double', 'toDouble(java.lang.String)', '1']
Removed row: ['org.postgresql.jdbc.PgResultSet:', 'float', 'toFloat(java.lang.String)', '1']
Removed row: ['org.postgresql.jdbc.PgResultSet:', 'int', 'findColumnIndex(java.lang.String)', '1']
Removed row: ['org.postgresql.jdbc.PgResultSet:', 'int', 'toInt(java.lang.String)', '1']
Removed row: ['org.postgresql.jdbc.PgResultSet:', 'java.lang.Number', 'getNumeric(int,int,boolean)', '1']
Removed row: ['org.postgresql.jdbc.PgResultSet:', 'java.lang.Object', 'getObject(int,java.lang.Class)', '3']
Removed row: ['org.postgresql.jdbc.PgResultSet:', 'java.lang.Object', 'internalGetObject(int,org.postgresql.core.Field)', '3']
Removed row: ['org.postgresql.jdbc.PgResultSet:', 'java.lang.String', 'getString(int)', '2']
Removed row: ['org.postgresql.jdbc.PgResultSet:', 'java.lang.String', 'trimMoney(java.lang.String)', '6']
Removed row: ['org.postgresql.jdbc.PgResultSet:', 'java.lang.String', 'trimString(int,java.lang.String)', '2']
Removed row: ['org.postgresql.jdbc.PgResultSet:', 'java.math.BigDecimal', 'toBigDecimal(java.lang.String)', '1']
Removed row: ['org.postgresql.jdbc.PgResultSet:', 'java.sql.Date', 'getDate(int,java.util.Calendar)', '1']
Removed row: ['org.postgresql.jdbc.PgResultSet:', 'long', 'toLong(java.lang.String)', '1']
Removed row: ['org.postgresql.jdbc.PgResultSet:', 'short', 'toShort(java.lang.String)', '1']
Removed row: ['org.postgresql.jdbc.PgResultSet:', 'void', 'addRows(java.util.List)', '1']
Removed row: ['org.postgresql.jdbc.PgResultSet:', 'void', 'initRowBuffer()', '1']
Removed row: ['org.postgresql.jdbc.PgResultSet:', 'void', 'parseQuery()', '1']
Removed row: ['org.postgresql.jdbc.PgResultSetMetaData:', 'void', 'fetchFieldMetaData()', '8']
Removed row: ['org.postgresql.jdbc.PgStatement:', 'java.sql.ResultSet', 'getSingleResultSet()', '2']
Removed row: ['org.postgresql.jdbc.PgStatement:', 'org.postgresql.jdbc.BatchResultHandler', 'internalExecuteBatch()', '5']
Removed row: ['org.postgresql.jdbc.PgStatement:', 'void', 'executeInternal(org.postgresql.core.CachedQuery,org.postgresql.core.ParameterList,int)', '2']
Removed row: ['org.postgresql.jdbc.PgStatement$StatementResultHandler:', 'void', 'append(org.postgresql.jdbc.ResultWrapper)', '1']
Removed row: ['org.postgresql.jdbc.TimestampUtils:', 'java.lang.String', 'toString(java.time.LocalDate)', '1']
Removed row: ['org.postgresql.jdbc.TimestampUtils:', 'java.lang.String', 'toString(java.time.LocalDateTime)', '4']
Removed row: ['org.postgresql.jdbc.TimestampUtils:', 'java.lang.String', 'toString(java.time.LocalTime)', '3']
Removed row: ['org.postgresql.jdbc.TimestampUtils:', 'java.lang.String', 'toString(java.time.OffsetDateTime)', '6']
Removed row: ['org.postgresql.jdbc.TimestampUtils:', 'java.lang.String', 'toString(java.util.Calendar,java.sql.Date,boolean)', '2']
Removed row: ['org.postgresql.jdbc.TimestampUtils:', 'java.lang.String', 'toString(java.util.Calendar,java.sql.Timestamp,boolean)', '4']
Removed row: ['org.postgresql.jdbc.TimestampUtils:', 'java.sql.Date', 'convertToDate(long,java.util.TimeZone)', '2']
Removed row: ['org.postgresql.jdbc.TimestampUtils:', 'java.sql.Time', 'convertToTime(long,java.util.TimeZone)', '2']
Removed row: ['org.postgresql.jdbc.TimestampUtils:', 'java.sql.Timestamp', 'toTimestamp(java.util.Calendar,java.lang.String)', '3']
Removed row: ['org.postgresql.jdbc.TimestampUtils:', 'java.time.LocalDateTime', 'toLocalDateTime(java.lang.String)', '3']
Removed row: ['org.postgresql.jdbc.TimestampUtils:', 'java.time.LocalTime', 'toLocalTime(java.lang.String)', '1']
Removed row: ['org.postgresql.jdbc.TimestampUtils:', 'java.time.OffsetDateTime', 'toOffsetDateTime(java.lang.String)', '3']
Removed row: ['org.postgresql.jdbc.TimestampUtils:', 'long', 'guessTimestamp(long,java.util.TimeZone)', '2']
Removed row: ['org.postgresql.jdbc.TimestampUtils:', 'org.postgresql.jdbc.TimestampUtils$ParsedTimestamp', 'parseBackendTimestamp(java.lang.String)', '1']
Removed row: ['org.postgresql.jdbc.TimestampUtils:', 'void', 'appendDate(java.lang.StringBuilder,java.time.LocalDate)', '3']
Removed row: ['org.postgresql.jdbc.TimestampUtils:', 'void', 'appendEra(java.lang.StringBuilder,java.time.LocalDate)', '1']
Removed row: ['org.postgresql.jdbc.TimestampUtils:', 'void', 'appendTime(java.lang.StringBuilder,java.time.LocalTime)', '4']
Removed row: ['org.postgresql.jdbc.TimestampUtils:', 'void', 'toBinDate(java.util.TimeZone,byte[],java.sql.Date)', '2']
Removed row: ['org.postgresql.jdbc.TypeInfoCache:', 'char', 'getArrayDelimiter(int)', '4']
Removed row: ['org.postgresql.jdbc.TypeInfoCache:', 'int', 'getPGArrayElement(int)', '8']
Removed row: ['org.postgresql.jdbc.TypeInfoCache:', 'int', 'getPGType(java.lang.String)', '4']
Removed row: ['org.postgresql.jdbc.TypeInfoCache:', 'int', 'getSQLType(java.lang.String)', '3']
Removed row: ['org.postgresql.jdbc.TypeInfoCache:', 'int', 'getSQLTypeFromQueryResult(java.sql.ResultSet)', '2']
Removed row: ['org.postgresql.jdbc.TypeInfoCache:', 'java.lang.String', 'getPGType(int)', '11']
Removed row: ['org.postgresql.jdbc.TypeInfoCache:', 'java.lang.String', 'getTypeForAlias(java.lang.String)', '2']
Removed row: ['org.postgresql.jre7.sasl.ScramAuthenticator:', 'void', 'sendScramClientFirstMessage()', '2']
Removed row: ['org.postgresql.jre7.sasl.ScramAuthenticator:', 'void', 'verifyServerSignature(int)', '1']
Removed row: ['org.postgresql.largeobject.LargeObjectManager:', 'void', '<init>(org.postgresql.core.BaseConnection)', '1']
Removed row: ['org.postgresql.shaded.com.ongres.scram.common.ScramAttributes:', 'void', '<init>(java.lang.String,int,char)', '1']
Removed row: ['org.postgresql.shaded.com.ongres.scram.common.ScramFunctions:', 'byte[]', 'hash(org.postgresql.shaded.com.ongres.scram.common.ScramMechanism,byte[])', '1']
Removed row: ['org.postgresql.shaded.com.ongres.scram.common.ScramFunctions:', 'byte[]', 'hmac(org.postgresql.shaded.com.ongres.scram.common.ScramMechanism,byte[],byte[])', '1']
Removed row: ['org.postgresql.shaded.com.ongres.scram.common.ScramFunctions:', 'byte[]', 'saltedPassword(org.postgresql.shaded.com.ongres.scram.common.ScramMechanism,org.postgresql.shaded.com.ongres.scram.common.stringprep.StringPreparation,java.lang.String,byte[],int)', '1']
Removed row: ['org.postgresql.shaded.com.ongres.scram.common.ScramMechanisms:', 'byte[]', 'saltedPassword(org.postgresql.shaded.com.ongres.scram.common.stringprep.StringPreparation,java.lang.String,byte[],int)', '3']
Removed row: ['org.postgresql.shaded.com.ongres.scram.common.ScramStringFormatting:', 'java.lang.String', 'base64Encode(java.lang.String)', '1']
Removed row: ['org.postgresql.shaded.com.ongres.scram.common.ScramStringFormatting:', 'java.lang.String', 'toSaslName(java.lang.String)', '2']
Removed row: ['org.postgresql.shaded.com.ongres.scram.common.bouncycastle.base64.Base64:', 'byte[]', 'decode(java.lang.String)', '1']
Removed row: ['org.postgresql.shaded.com.ongres.scram.common.bouncycastle.base64.Base64Encoder:', 'int', 'decode(java.lang.String,java.io.OutputStream)', '11']
Removed row: ['org.postgresql.shaded.com.ongres.scram.common.bouncycastle.base64.Base64Encoder:', 'int', 'nextI(java.lang.String,int,int)', '1']
Removed row: ['org.postgresql.shaded.com.ongres.scram.common.exception.ScramServerErrorException:', 'java.lang.String', 'toString(org.postgresql.shaded.com.ongres.scram.common.message.ServerFinalMessage$Error)', '1']
Removed row: ['org.postgresql.shaded.com.ongres.scram.common.message.ClientFinalMessage:', 'java.lang.String', 'generateCBind(org.postgresql.shaded.com.ongres.scram.common.gssapi.Gs2Header,byte[])', '1']
Removed row: ['org.postgresql.shaded.com.ongres.scram.common.message.ClientFirstMessage:', 'boolean', 'isChannelBinding()', '1']
Removed row: ['org.postgresql.shaded.com.ongres.scram.common.message.ClientFirstMessage:', 'java.lang.String', 'getAuthzid()', '1']
Removed row: ['org.postgresql.shaded.com.ongres.scram.common.message.ClientFirstMessage:', 'java.lang.String', 'getChannelBindingName()', '1']
Removed row: ['org.postgresql.shaded.com.ongres.scram.common.message.ClientFirstMessage:', 'org.postgresql.shaded.com.ongres.scram.common.gssapi.Gs2CbindFlag', 'getChannelBindingFlag()', '1']
Removed row: ['org.postgresql.shaded.com.ongres.scram.common.message.ServerFirstMessage:', 'org.postgresql.shaded.com.ongres.scram.common.message.ServerFirstMessage', 'parseFrom(java.lang.String,java.lang.String)', '3']
Removed row: ['org.postgresql.shaded.com.ongres.scram.common.stringprep.StringPreparations:', 'java.lang.String', 'normalize(java.lang.String)', '1']
Removed row: ['org.postgresql.shaded.com.ongres.scram.common.util.AbstractCharAttributeValue:', 'char', 'getChar()', '1']
Removed row: ['org.postgresql.shaded.com.ongres.scram.common.util.AbstractCharAttributeValue:', 'java.lang.StringBuffer', 'writeTo(java.lang.StringBuffer)', '1']
Removed row: ['org.postgresql.shaded.com.ongres.scram.common.util.AbstractCharAttributeValue:', 'void', '<init>(org.postgresql.shaded.com.ongres.scram.common.util.CharAttribute,java.lang.String)', '1']
Removed row: ['org.postgresql.shaded.com.ongres.scram.common.util.Preconditions:', 'java.lang.String', 'checkNotEmpty(java.lang.String,java.lang.String)', '1']
Removed row: ['org.postgresql.shaded.com.ongres.scram.common.util.StringWritableCsv:', 'java.lang.String[]', 'parseFrom(java.lang.String,int,int)', '2']
Removed row: ['org.postgresql.shaded.com.ongres.scram.common.util.UsAsciiUtils:', 'java.lang.String', 'toPrintable(java.lang.String)', '3']
Removed row: ['org.postgresql.util.HStoreConverter:', 'byte[]', 'toBytes(java.util.Map,org.postgresql.core.Encoding)', '3']
Removed row: ['org.postgresql.util.HStoreConverter:', 'int', 'appendUntilQuote(java.lang.StringBuilder,java.lang.String,int)', '3']
Removed row: ['org.postgresql.util.HStoreConverter:', 'java.lang.String', 'toString(java.util.Map)', '3']
Removed row: ['org.postgresql.util.HStoreConverter:', 'java.util.Map', 'fromString(java.lang.String)', '3']
Removed row: ['org.postgresql.util.HStoreConverter:', 'void', 'appendEscaped(java.lang.StringBuilder,java.lang.Object)', '2']
Removed row: ['org.postgresql.util.JdbcBlackHole:', 'void', 'close(java.sql.ResultSet)', '1']
Removed row: ['org.postgresql.util.PGobject:', 'boolean', 'equals(java.lang.Object)', '2']
Removed row: ['org.postgresql.util.PGobject:', 'int', 'hashCode()', '1']
Removed row: ['org.postgresql.util.PGtokenizer:', 'java.lang.String', 'remove(java.lang.String,java.lang.String,java.lang.String)', '5']
Removed row: ['org.slf4j.helpers.SubstituteLogger:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.testcontainers.images.ImageData:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.testcontainers.shaded.com.google.common.base.Preconditions:', 'java.lang.String', 'format(java.lang.String,java.lang.Object[])', '4']
Removed row: ['org.testcontainers.shaded.com.google.common.collect.AbstractMapEntry:', 'boolean', 'equals(java.lang.Object)', '2']
Removed row: ['org.testcontainers.utility.DockerImageName:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.testcontainers.utility.TestcontainersConfiguration:', 'boolean', 'equals(java.lang.Object)', '2']
Removed row: ['sun.security.util.ManifestEntryVerifier:', 'void', 'setEntry(java.lang.String,java.util.jar.JarEntry)', '3']
Removed row: ['sun.security.util.SignatureFileVerifier:', 'boolean', 'verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)', '3']
Removed row: ['sun.security.util.SignatureFileVerifier:', 'boolean', 'verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)', '3']
Removed row: ['sun.security.util.SignatureFileVerifier:', 'boolean', 'verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)', '3']
Total number of mock counts in mybatis-results/context-insensitive-plusplus-counts-NORMAL is 1345 
bootique-1-object-sensitive-NO_INTERPROC
Total number of mock counts in bootique-results/1-object-sensitive-counts-NO_INTERPROC is 0 
commons-collections-1-object-sensitive-NO_INTERPROC
Total number of mock counts in commons-collection4-results/1-object-sensitive-counts-NO_INTERPROC is 3 
flink-core-1-object-sensitive-NO_INTERPROC
Total number of mock counts in flink-core-results/1-object-sensitive-counts-NO_INTERPROC is 40 
jsonschema2pojo-1-object-sensitive-NO_INTERPROC
Total number of mock counts in jsonschema2pojo-core-results/1-object-sensitive-counts-NO_INTERPROC is 282 
maven-core-1-object-sensitive-NO_INTERPROC
Total number of mock counts in maven-core-results/1-object-sensitive-counts-NO_INTERPROC is 23 
microbenchmark-1-object-sensitive-NO_INTERPROC
Total number of mock counts in microbenchmark-results/1-object-sensitive-counts-NO_INTERPROC is 123 
quartz-core-1-object-sensitive-NO_INTERPROC
Total number of mock counts in quartz-core-results/1-object-sensitive-counts-NO_INTERPROC is 21 
vraptor-core-1-object-sensitive-NO_INTERPROC
Total number of mock counts in vraptor-core-results/1-object-sensitive-counts-NO_INTERPROC is 0 
mybatis-1-object-sensitive-NO_INTERPROC
Total number of mock counts in mybatis-results/1-object-sensitive-counts-NO_INTERPROC is 0 
bootique-1-object-sensitive-NORMAL
Total number of mock counts in bootique-results/1-object-sensitive-counts-NORMAL is 0 
commons-collections-1-object-sensitive-NORMAL
Removed row: ['org.junit.Assert:', 'boolean', 'isEquals(java.lang.Object,java.lang.Object)', '1']
Removed row: ['org.junit.Assert:', 'java.lang.String', 'formatClassAndValue(java.lang.Object,java.lang.String)', '1']
Removed row: ['org.junit.ComparisonFailure$ComparisonCompactor:', 'java.lang.String', 'compact(java.lang.String)', '1']
Removed row: ['org.junit.ComparisonFailure$ComparisonCompactor:', 'java.lang.String', 'sharedPrefix()', '4']
Removed row: ['org.junit.ComparisonFailure$ComparisonCompactor:', 'java.lang.String', 'sharedSuffix(java.lang.String)', '5']
Removed row: ['org.junit.ComparisonFailure$ComparisonCompactor$DiffExtractor:', 'java.lang.String', 'extractDiff(java.lang.String)', '2']
Total number of mock counts in commons-collection4-results/1-object-sensitive-counts-NORMAL is 23 
flink-core-1-object-sensitive-NORMAL
Removed row: ['com.esotericsoftware.kryo.Kryo:', 'boolean', 'writeReferenceOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,boolean)', '1']
Removed row: ['com.esotericsoftware.kryo.Kryo:', 'com.esotericsoftware.kryo.Registration', 'getRegistration(java.lang.Class)', '2']
Removed row: ['com.esotericsoftware.kryo.Kryo:', 'com.esotericsoftware.kryo.Serializer', 'getDefaultSerializer(java.lang.Class)', '2']
Removed row: ['com.esotericsoftware.kryo.Kryo:', 'java.lang.Object', 'copy(java.lang.Object)', '2']
Removed row: ['com.esotericsoftware.kryo.Kryo:', 'void', 'writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)', '1']
Removed row: ['com.esotericsoftware.kryo.Kryo:', 'void', 'writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)', '2']
Removed row: ['com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy:', 'org.objenesis.instantiator.ObjectInstantiator', 'newInstantiatorOf(java.lang.Class)', '7']
Removed row: ['com.esotericsoftware.kryo.Registration:', 'void', 'setSerializer(com.esotericsoftware.kryo.Serializer)', '1']
Removed row: ['com.esotericsoftware.kryo.factories.ReflectionSerializerFactory:', 'com.esotericsoftware.kryo.Serializer', 'makeSerializer(com.esotericsoftware.kryo.Kryo,java.lang.Class,java.lang.Class)', '5']
Removed row: ['com.esotericsoftware.kryo.io.Output:', 'void', 'writeAscii_slow(java.lang.String,int)', '1']
Removed row: ['com.esotericsoftware.kryo.io.Output:', 'void', 'writeString(java.lang.String)', '4']
Removed row: ['com.esotericsoftware.kryo.io.Output:', 'void', 'writeString_slow(java.lang.CharSequence,int,int)', '1']
Removed row: ['com.esotericsoftware.kryo.serializers.DefaultSerializers$BooleanSerializer:', 'void', 'write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Boolean)', '1']
Removed row: ['com.esotericsoftware.kryo.serializers.DefaultSerializers$ByteSerializer:', 'void', 'write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Byte)', '1']
Removed row: ['com.esotericsoftware.kryo.serializers.DefaultSerializers$CharSerializer:', 'void', 'write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Character)', '1']
Removed row: ['com.esotericsoftware.kryo.serializers.DefaultSerializers$DoubleSerializer:', 'void', 'write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Double)', '1']
Removed row: ['com.esotericsoftware.kryo.serializers.DefaultSerializers$FloatSerializer:', 'void', 'write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Float)', '1']
Removed row: ['com.esotericsoftware.kryo.serializers.DefaultSerializers$IntSerializer:', 'void', 'write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Integer)', '1']
Removed row: ['com.esotericsoftware.kryo.serializers.DefaultSerializers$LongSerializer:', 'void', 'write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Long)', '1']
Removed row: ['com.esotericsoftware.kryo.serializers.DefaultSerializers$ShortSerializer:', 'void', 'write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Short)', '1']
Removed row: ['com.esotericsoftware.kryo.util.ObjectMap:', 'java.lang.Object', 'get(java.lang.Object)', '4']
Removed row: ['com.esotericsoftware.kryo.util.ObjectMap:', 'java.lang.Object', 'getStash(java.lang.Object)', '1']
Removed row: ['com.esotericsoftware.kryo.util.Util:', 'int', 'getDimensionCount(java.lang.Class)', '1']
Removed row: ['com.esotericsoftware.kryo.util.Util:', 'java.lang.Class', 'getElementClass(java.lang.Class)', '2']
Removed row: ['com.esotericsoftware.kryo.util.Util:', 'java.lang.String', 'className(java.lang.Class)', '4']
Removed row: ['com.esotericsoftware.kryo.util.Util:', 'java.lang.String', 'string(java.lang.Object)', '1']
Removed row: ['com.esotericsoftware.kryo.util.Util:', 'void', 'log(java.lang.String,java.lang.Object)', '1']
Removed row: ['com.esotericsoftware.reflectasm.AccessClassLoader:', 'java.lang.ClassLoader', 'getParentClassLoader(java.lang.Class)', '1']
Removed row: ['com.esotericsoftware.reflectasm.ConstructorAccess:', 'com.esotericsoftware.reflectasm.ConstructorAccess', 'get(java.lang.Class)', '10']
Removed row: ['javassist.CtMethod:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['javassist.bytecode.MemberrefInfo:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.apache.logging.log4j.MarkerManager$Log4jMarker:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.apache.logging.log4j.spi.Provider:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.apache.logging.log4j.util.LoaderUtil$UrlResource:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.hamcrest.BaseDescription:', 'java.lang.String', 'descriptionOf(java.lang.Object)', '2']
Removed row: ['org.hamcrest.BaseDescription:', 'org.hamcrest.Description', 'appendDescriptionOf(org.hamcrest.SelfDescribing)', '1']
Removed row: ['org.hamcrest.BaseDescription:', 'org.hamcrest.Description', 'appendValue(java.lang.Object)', '2']
Removed row: ['org.hamcrest.BaseDescription:', 'org.hamcrest.Description', 'appendValueList(java.lang.String,java.lang.String,java.lang.String,java.lang.Iterable)', '1']
Removed row: ['org.hamcrest.BaseDescription:', 'void', 'toJavaSyntax(java.lang.String)', '2']
Removed row: ['org.hamcrest.TypeSafeMatcher:', 'void', 'describeMismatch(java.lang.Object,org.hamcrest.Description)', '1']
Removed row: ['org.hamcrest.collection.IsEmptyCollection:', 'boolean', 'matchesSafely(java.util.Collection)', '1']
Removed row: ['org.hamcrest.collection.IsIterableContainingInAnyOrder:', 'boolean', 'matchesSafely(java.lang.Iterable,org.hamcrest.Description)', '1']
Removed row: ['org.hamcrest.collection.IsIterableContainingInOrder:', 'boolean', 'matchesSafely(java.lang.Iterable,org.hamcrest.Description)', '1']
Removed row: ['org.hamcrest.core.IsCollectionContaining:', 'boolean', 'matchesSafely(java.lang.Iterable,org.hamcrest.Description)', '1']
Removed row: ['org.hamcrest.core.IsEqual:', 'boolean', 'areEqual(java.lang.Object,java.lang.Object)', '1']
Removed row: ['org.hamcrest.core.IsEqual:', 'boolean', 'isArray(java.lang.Object)', '1']
Removed row: ['org.hamcrest.core.IsInstanceOf:', 'boolean', 'matches(java.lang.Object,org.hamcrest.Description)', '1']
Removed row: ['org.hamcrest.core.StringContains:', 'boolean', 'evalSubstringOf(java.lang.String)', '1']
Removed row: ['org.hamcrest.internal.ArrayIterator:', 'void', '<init>(java.lang.Object)', '1']
Removed row: ['org.hamcrest.number.OrderingComparison:', 'boolean', 'matchesSafely(java.lang.Comparable)', '1']
Removed row: ['org.hamcrest.number.OrderingComparison:', 'void', 'describeMismatchSafely(java.lang.Comparable,org.hamcrest.Description)', '1']
Removed row: ['org.joda.time.base.AbstractPartial:', 'boolean', 'equals(java.lang.Object)', '4']
Removed row: ['org.joda.time.chrono.BasicChronology:', 'boolean', 'equals(java.lang.Object)', '3']
Removed row: ['org.joda.time.chrono.ISOChronology:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.joda.time.field.MillisDurationField:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.joda.time.field.PreciseDurationField:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.joda.time.field.ScaledDurationField:', 'boolean', 'equals(java.lang.Object)', '2']
Removed row: ['org.joda.time.field.UnsupportedDurationField:', 'boolean', 'equals(java.lang.Object)', '2']
Removed row: ['org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.joda.time.tz.FixedDateTimeZone:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.junit.Assert:', 'boolean', 'isEquals(java.lang.Object,java.lang.Object)', '1']
Removed row: ['org.junit.Assert:', 'java.lang.String', 'formatClassAndValue(java.lang.Object,java.lang.String)', '1']
Removed row: ['org.junit.ComparisonFailure$ComparisonCompactor:', 'java.lang.String', 'compact(java.lang.String)', '1']
Removed row: ['org.junit.ComparisonFailure$ComparisonCompactor:', 'java.lang.String', 'sharedPrefix()', '6']
Removed row: ['org.junit.ComparisonFailure$ComparisonCompactor:', 'java.lang.String', 'sharedSuffix(java.lang.String)', '8']
Removed row: ['org.junit.ComparisonFailure$ComparisonCompactor$DiffExtractor:', 'java.lang.String', 'extractDiff(java.lang.String)', '2']
Removed row: ['org.junit.internal.matchers.ThrowableMessageMatcher:', 'boolean', 'matchesSafely(java.lang.Throwable)', '1']
Removed row: ['org.junit.internal.matchers.ThrowableMessageMatcher:', 'void', 'describeMismatchSafely(java.lang.Throwable,org.hamcrest.Description)', '1']
Removed row: ['org.mockito.internal.MockitoCore:', 'java.lang.Object', 'verify(java.lang.Object,org.mockito.verification.VerificationMode)', '1']
Removed row: ['org.mockito.internal.util.DefaultMockingDetails:', 'void', 'assertGoodMock()', '1']
Removed row: ['org.mockito.internal.util.MockUtil:', 'org.mockito.invocation.MockHandler', 'getMockHandler(java.lang.Object)', '1']
Removed row: ['org.objenesis.instantiator.android.Android10Instantiator:', 'java.lang.Object', 'newInstance()', '1']
Removed row: ['org.objenesis.instantiator.android.Android17Instantiator:', 'java.lang.Object', 'newInstance()', '1']
Removed row: ['org.objenesis.instantiator.android.Android18Instantiator:', 'java.lang.Object', 'newInstance()', '1']
Removed row: ['org.objenesis.instantiator.gcj.GCJInstantiator:', 'java.lang.Object', 'newInstance()', '1']
Removed row: ['org.objenesis.instantiator.gcj.GCJSerializationInstantiator:', 'java.lang.Object', 'newInstance()', '1']
Removed row: ['org.objenesis.instantiator.jrockit.JRockitLegacyInstantiator:', 'java.lang.Object', 'newInstance()', '1']
Removed row: ['org.objenesis.instantiator.sun.UnsafeFactoryInstantiator:', 'java.lang.Object', 'newInstance()', '1']
Removed row: ['org.slf4j.helpers.BasicMarker:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['org.slf4j.helpers.SubstituteLogger:', 'boolean', 'equals(java.lang.Object)', '1']
Total number of mock counts in flink-core-results/1-object-sensitive-counts-NORMAL is 1229 
jsonschema2pojo-1-object-sensitive-NORMAL
Removed row: ['com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.fasterxml.jackson.core.JsonLocation:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.fasterxml.jackson.core.io.SerializedString:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.fasterxml.jackson.databind.PropertyName:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.fasterxml.jackson.databind.introspect.MemberKey:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.fasterxml.jackson.databind.jsontype.NamedType:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.fasterxml.jackson.databind.type.ArrayType:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.fasterxml.jackson.databind.type.ClassKey:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.fasterxml.jackson.databind.type.CollectionLikeType:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.fasterxml.jackson.databind.type.MapLikeType:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.fasterxml.jackson.databind.type.ReferenceType:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.fasterxml.jackson.databind.type.ResolvedRecursiveType:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.fasterxml.jackson.databind.type.SimpleType:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.fasterxml.jackson.databind.type.TypeBindings$AsKey:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.fasterxml.jackson.databind.util.ClassUtil:', 'boolean', 'hasClass(java.lang.Object,java.lang.Class)', '1']
Removed row: ['com.fasterxml.jackson.databind.util.TypeKey:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.github.tomakehurst.wiremock.admin.RequestSpec:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.google.common.collect.AbstractMapEntry:', 'boolean', 'equals(java.lang.Object)', '2']
Removed row: ['com.sun.codemodel.JClass:', 'com.sun.codemodel.JClass', 'narrow(com.sun.codemodel.JType)', '1']
Removed row: ['com.sun.codemodel.JDefinedClass:', 'com.sun.codemodel.JDefinedClass', '_extends(com.sun.codemodel.JClass)', '2']
Removed row: ['com.sun.codemodel.JMethod:', 'boolean', 'hasSignature(com.sun.codemodel.JType[])', '1']
Removed row: ['com.sun.codemodel.JNarrowedClass:', 'boolean', 'equals(java.lang.Object)', '1']
Removed row: ['com.sun.codemodel.JNarrowedClass:', 'com.sun.codemodel.JClass', '_extends()', '1']
Removed row: ['com.sun.codemodel.JVar:', 'com.sun.codemodel.JAnnotationUse', 'annotate(java.lang.Class)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'boolean', 'nodeEquals(japa.parser.ast.Node,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.BlockComment,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.LineComment,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.TypeParameter,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.body.AnnotationDeclaration,japa.parser.ast.Node)', '4']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.body.AnnotationMemberDeclaration,japa.parser.ast.Node)', '5']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.body.BaseParameter,japa.parser.ast.Node)', '3']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.body.ClassOrInterfaceDeclaration,japa.parser.ast.Node)', '8']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.body.ConstructorDeclaration,japa.parser.ast.Node)', '7']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.body.EnumConstantDeclaration,japa.parser.ast.Node)', '4']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.body.EnumDeclaration,japa.parser.ast.Node)', '6']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.body.FieldDeclaration,japa.parser.ast.Node)', '4']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.body.InitializerDeclaration,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.body.JavadocComment,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.body.MethodDeclaration,japa.parser.ast.Node)', '9']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.body.MultiTypeParameter,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.body.Parameter,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.body.VariableDeclarator,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.body.VariableDeclaratorId,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.ArrayAccessExpr,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.ArrayCreationExpr,japa.parser.ast.Node)', '4']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.ArrayInitializerExpr,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.AssignExpr,japa.parser.ast.Node)', '3']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.BinaryExpr,japa.parser.ast.Node)', '3']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.BooleanLiteralExpr,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.CastExpr,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.CharLiteralExpr,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.ClassExpr,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.ConditionalExpr,japa.parser.ast.Node)', '3']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.DoubleLiteralExpr,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.EnclosedExpr,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.FieldAccessExpr,japa.parser.ast.Node)', '3']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.InstanceOfExpr,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.IntegerLiteralExpr,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.IntegerLiteralMinValueExpr,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.LongLiteralExpr,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.LongLiteralMinValueExpr,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.MarkerAnnotationExpr,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.MemberValuePair,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.MethodCallExpr,japa.parser.ast.Node)', '4']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.NameExpr,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.NormalAnnotationExpr,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.ObjectCreationExpr,japa.parser.ast.Node)', '5']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.QualifiedNameExpr,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.SingleMemberAnnotationExpr,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.StringLiteralExpr,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.SuperExpr,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.ThisExpr,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.UnaryExpr,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.expr.VariableDeclarationExpr,japa.parser.ast.Node)', '4']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.AssertStmt,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.BlockStmt,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.BreakStmt,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.CatchClause,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.ContinueStmt,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.DoStmt,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.ExplicitConstructorInvocationStmt,japa.parser.ast.Node)', '3']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.ExpressionStmt,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.ForStmt,japa.parser.ast.Node)', '4']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.ForeachStmt,japa.parser.ast.Node)', '3']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.IfStmt,japa.parser.ast.Node)', '3']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.LabeledStmt,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.ReturnStmt,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.SwitchEntryStmt,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.SwitchStmt,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.SynchronizedStmt,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.ThrowStmt,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.TryStmt,japa.parser.ast.Node)', '3']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.TypeDeclarationStmt,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.stmt.WhileStmt,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.type.ClassOrInterfaceType,japa.parser.ast.Node)', '3']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.type.PrimitiveType,japa.parser.ast.Node)', '1']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.type.ReferenceType,japa.parser.ast.Node)', '2']
Removed row: ['japa.parser.ast.visitor.EqualsVisitor:', 'java.lang.Boolean', 'visit(japa.parser.ast.type.WildcardType,japa.parser.ast.Node)', '2']
Removed row: ['org.hamcrest.BaseDescription:', 'java.lang.String', 'descriptionOf(java.lang.Object)', '2']
Removed row: ['org.hamcrest.BaseDescription:', 'org.hamcrest.Description', 'appendValue(java.lang.Object)', '2']
Removed row: ['org.hamcrest.BaseDescription:', 'void', 'toJavaSyntax(java.lang.String)', '2']
Removed row: ['org.hamcrest.TypeSafeMatcher:', 'void', 'describeMismatch(java.lang.Object,org.hamcrest.Description)', '1']
Removed row: ['org.hamcrest.collection.IsCollectionWithSize:', 'java.lang.Integer', 'featureValueOf(java.util.Collection)', '1']
Removed row: ['org.hamcrest.core.IsEqual:', 'boolean', 'areEqual(java.lang.Object,java.lang.Object)', '1']
Removed row: ['org.hamcrest.core.IsEqual:', 'boolean', 'isArray(java.lang.Object)', '1']
Removed row: ['org.hamcrest.core.IsInstanceOf:', 'boolean', 'matches(java.lang.Object,org.hamcrest.Description)', '1']
Removed row: ['org.hamcrest.internal.ArrayIterator:', 'void', '<init>(java.lang.Object)', '1']
Removed row: ['org.hamcrest.number.OrderingComparison:', 'boolean', 'matchesSafely(java.lang.Comparable)', '1']
Removed row: ['org.hamcrest.number.OrderingComparison:', 'void', 'describeMismatchSafely(java.lang.Comparable,org.hamcrest.Description)', '1']
Removed row: ['org.mockito.internal.MockitoCore:', 'java.lang.Object', 'verify(java.lang.Object,org.mockito.verification.VerificationMode)', '1']
Removed row: ['org.mockito.internal.util.DefaultMockingDetails:', 'void', 'assertGoodMock()', '1']
Removed row: ['org.mockito.internal.util.MockUtil:', 'org.mockito.invocation.MockHandler', 'getMockHandler(java.lang.Object)', '1']
Removed row: ['org.slf4j.helpers.SubstituteLogger:', 'boolean', 'equals(java.lang.Object)', '1']
Total number of mock counts in jsonschema2pojo-core-results/1-object-sensitive-counts-NORMAL is 604 
maven-core-1-object-sensitive-NORMAL
Removed row: ['org.junit.Assert:', 'boolean', 'isEquals(java.lang.Object,java.lang.Object)', '1']
Removed row: ['org.junit.Assert:', 'java.lang.String', 'formatClassAndValue(java.lang.Object,java.lang.String)', '1']
Removed row: ['org.junit.ComparisonFailure$ComparisonCompactor:', 'java.lang.String', 'compact(java.lang.String)', '1']
Removed row: ['org.junit.ComparisonFailure$ComparisonCompactor:', 'java.lang.String', 'sharedPrefix()', '6']
Removed row: ['org.junit.ComparisonFailure$ComparisonCompactor:', 'java.lang.String', 'sharedSuffix(java.lang.String)', '8']
Removed row: ['org.junit.ComparisonFailure$ComparisonCompactor$DiffExtractor:', 'java.lang.String', 'extractDiff(java.lang.String)', '2']
Removed row: ['org.mockito.internal.MockitoCore:', 'java.lang.Object', 'verify(java.lang.Object,org.mockito.verification.VerificationMode)', '1']
Removed row: ['org.mockito.internal.util.DefaultMockingDetails:', 'void', 'assertGoodMock()', '1']
Removed row: ['org.mockito.internal.util.MockUtil:', 'org.mockito.invocation.MockHandler', 'getMockHandler(java.lang.Object)', '1']
Total number of mock counts in maven-core-results/1-object-sensitive-counts-NORMAL is 39 
microbenchmark-1-object-sensitive-NORMAL
Removed row: ['org.mockito.internal.MockitoCore:', 'java.lang.Object', 'verify(java.lang.Object,org.mockito.verification.VerificationMode)', '1']
Removed row: ['org.mockito.internal.creation.CglibMockMaker:', 'org.mockito.invocation.MockHandler', 'getHandler(java.lang.Object)', '1']
Total number of mock counts in microbenchmark-results/1-object-sensitive-counts-NORMAL is 132 
quartz-core-1-object-sensitive-NORMAL
Removed row: ['org.mockito.internal.MockitoCore:', 'java.lang.Object', 'verify(java.lang.Object,org.mockito.verification.VerificationMode)', '1']
Removed row: ['org.mockito.internal.creation.CglibMockMaker:', 'org.mockito.invocation.MockHandler', 'getHandler(java.lang.Object)', '1']
Total number of mock counts in quartz-core-results/1-object-sensitive-counts-NORMAL is 31 
vraptor-core-1-object-sensitive-NORMAL
Total number of mock counts in vraptor-core-results/1-object-sensitive-counts-NORMAL is 0 
mybatis-1-object-sensitive-NORMAL
Total number of mock counts in mybatis-results/1-object-sensitive-counts-NORMAL is 0 
