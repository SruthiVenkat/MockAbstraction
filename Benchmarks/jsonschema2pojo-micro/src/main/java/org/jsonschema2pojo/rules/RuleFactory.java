/**
 * Copyright Â© 2010-2020 Nokia
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jsonschema2pojo.rules;

import org.jsonschema2pojo.Annotator;
import org.jsonschema2pojo.DefaultGenerationConfig;
import org.jsonschema2pojo.GenerationConfig;
import org.jsonschema2pojo.Jackson2Annotator;
import org.jsonschema2pojo.RuleLogger;
import org.jsonschema2pojo.SchemaStore;

import com.sun.codemodel.JClass;
import com.sun.codemodel.JClassContainer;
import com.sun.codemodel.JDefinedClass;
import com.sun.codemodel.JDocComment;
import com.sun.codemodel.JDocCommentable;
import com.sun.codemodel.JFieldVar;
import com.sun.codemodel.JPackage;
import com.sun.codemodel.JType;

/**
 * Provides factory/creation methods for the code generation rules.
 */
public class RuleFactory {

    private RuleLogger logger;
    private GenerationConfig generationConfig;
    private Annotator annotator;
    private SchemaStore schemaStore;

    /**
     * Create a new rule factory with the given generation config options.
     *
     * @param generationConfig
     *            The generation config options for type generation. These
     *            config options will influence the java code generated by rules
     *            created by this factory.
     * @param annotator
     *            the annotator used to mark up Java types with any annotations
     *            that are required to build JSON compatible types
     * @param schemaStore
     *            the object used by this factory to get and store schemas
     */
    public RuleFactory(GenerationConfig generationConfig, Annotator annotator, SchemaStore schemaStore) {
        this.generationConfig = generationConfig;
        this.annotator = annotator;
        this.schemaStore = schemaStore;
    }

    /**
     * Create a rule factory with the default generation config options.
     *
     * @see DefaultGenerationConfig
     */
    public RuleFactory() {
        this(new DefaultGenerationConfig(), new Jackson2Annotator(new DefaultGenerationConfig()), new SchemaStore());
    }

    /**
     * Provides a rule instance that should be applied when a "format"
     * declaration is found in the schema.
     *
     * @return a schema rule that can handle the "format" declaration.
     */
    public Rule<JType, JType> getFormatRule() {
        return new FormatRule(this);
    }

    /**
     * Provides a rule instance that should be applied when a "pattern"
     * declaration is found in the schema for a property.
     *
     * @return a schema rule that can handle the "pattern" declaration.
     */
    public Rule<JFieldVar, JFieldVar> getPatternRule() {
        return new PatternRule(this);
    }

    /**
     * Gets the configuration options that will influence the java code
     * generated by rules created by this factory.
     *
     * @return A configuration object containing all configuration property
     *         values.
     */
    public GenerationConfig getGenerationConfig() {
        return generationConfig;
    }

    /**
     * The generation config options for type generation. These config options
     * will influence the java code generated by rules created by this factory.
     *
     * @param generationConfig
     *            Generation config
     */
    public void setGenerationConfig(final GenerationConfig generationConfig) {
        this.generationConfig = generationConfig;
    }

    /**
     * Gets the annotator that will in apply annotations to the generated code
     * to allow correct serialization and deserialization, according to the
     * chosen annotation style.
     *
     * @return an annotator that can annotate various code constructs for JSON
     *         support
     */
    public Annotator getAnnotator() {
        return annotator;
    }

    /**
     * The annotator used to mark up Java types with any annotations that are
     * required to build JSON compatible types
     *
     * @param annotator
     *            the annotator
     */
    public void setAnnotator(final Annotator annotator) {
        this.annotator = annotator;
    }

    /**
     * Provides a rule logger that abstracts the logging method of invoking frameworks
     *
     * @return a logger interface to native logging framework
     */
    public RuleLogger getLogger() {
        return logger;
    }

    /**
     * The logger the factory will provide to rules.
     *
     * @param logger
     *            the logger
     */
    public void setLogger(RuleLogger logger) {
        this.logger = logger;
    }

    /**
     * Gets the store that finds and saves JSON schemas
     *
     * @return a store that finds and caches schema objects during type
     *         generation.
     */
    public SchemaStore getSchemaStore() {
        return schemaStore;
    }

    /**
     * The object used by this factory to get and store schemas
     *
     * @param schemaStore
     *            schema store
     */
    public void setSchemaStore(final SchemaStore schemaStore) {
        this.schemaStore = schemaStore;
    }

}
