public class org.apache.commons.collections4.map.CaseInsensitiveMapTest extends org.apache.commons.collections4.map.AbstractIterableMapTest
{

    public void <init>(java.lang.String)
    {
        org.apache.commons.collections4.map.CaseInsensitiveMapTest r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.collections4.map.CaseInsensitiveMapTest;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.collections4.map.AbstractIterableMapTest: void <init>(java.lang.String)>(r1);

        return;
    }

    public static junit.framework.Test suite()
    {
        junit.framework.TestSuite $r0;

        $r0 = staticinvoke <org.apache.commons.collections4.BulkTest: junit.framework.TestSuite makeSuite(java.lang.Class)>(class "Lorg/apache/commons/collections4/map/CaseInsensitiveMapTest;");

        return $r0;
    }

    public org.apache.commons.collections4.map.CaseInsensitiveMap makeObject()
    {
        org.apache.commons.collections4.map.CaseInsensitiveMapTest r0;
        org.apache.commons.collections4.map.CaseInsensitiveMap $r1;

        r0 := @this: org.apache.commons.collections4.map.CaseInsensitiveMapTest;

        $r1 = new org.apache.commons.collections4.map.CaseInsensitiveMap;

        specialinvoke $r1.<org.apache.commons.collections4.map.CaseInsensitiveMap: void <init>()>();

        return $r1;
    }

    public java.lang.String getCompatibilityVersion()
    {
        org.apache.commons.collections4.map.CaseInsensitiveMapTest r0;

        r0 := @this: org.apache.commons.collections4.map.CaseInsensitiveMapTest;

        return "4";
    }

    public void testCaseInsensitive()
    {
        org.apache.commons.collections4.map.CaseInsensitiveMapTest r0;
        org.apache.commons.collections4.map.CaseInsensitiveMap r1;
        java.lang.Object $r4, $r5, $r7;

        r0 := @this: org.apache.commons.collections4.map.CaseInsensitiveMapTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.map.CaseInsensitiveMapTest: org.apache.commons.collections4.map.CaseInsensitiveMap makeObject()>();

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("One", "One");

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("Two", "Two");

        $r4 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("one");

        staticinvoke <org.apache.commons.collections4.map.CaseInsensitiveMapTest: void assertEquals(java.lang.Object,java.lang.Object)>("One", $r4);

        $r5 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("oNe");

        staticinvoke <org.apache.commons.collections4.map.CaseInsensitiveMapTest: void assertEquals(java.lang.Object,java.lang.Object)>("One", $r5);

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("two", "Three");

        $r7 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("Two");

        staticinvoke <org.apache.commons.collections4.map.CaseInsensitiveMapTest: void assertEquals(java.lang.Object,java.lang.Object)>("Three", $r7);

        return;
    }

    public void testNullHandling()
    {
        org.apache.commons.collections4.map.CaseInsensitiveMapTest r0;
        org.apache.commons.collections4.map.CaseInsensitiveMap r1;
        java.util.Set r2;
        java.lang.Object $r6, $r8;
        boolean $z0, $z1, $z2;
        int $i0;

        r0 := @this: org.apache.commons.collections4.map.CaseInsensitiveMapTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.map.CaseInsensitiveMapTest: org.apache.commons.collections4.map.CaseInsensitiveMap makeObject()>();

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("One", "One");

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("Two", "Two");

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(null, "Three");

        $r6 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(null);

        staticinvoke <org.apache.commons.collections4.map.CaseInsensitiveMapTest: void assertEquals(java.lang.Object,java.lang.Object)>("Three", $r6);

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(null, "Four");

        $r8 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(null);

        staticinvoke <org.apache.commons.collections4.map.CaseInsensitiveMapTest: void assertEquals(java.lang.Object,java.lang.Object)>("Four", $r8);

        r2 = interfaceinvoke r1.<java.util.Map: java.util.Set keySet()>();

        $z0 = interfaceinvoke r2.<java.util.Set: boolean contains(java.lang.Object)>("one");

        staticinvoke <org.apache.commons.collections4.map.CaseInsensitiveMapTest: void assertTrue(boolean)>($z0);

        $z1 = interfaceinvoke r2.<java.util.Set: boolean contains(java.lang.Object)>("two");

        staticinvoke <org.apache.commons.collections4.map.CaseInsensitiveMapTest: void assertTrue(boolean)>($z1);

        $z2 = interfaceinvoke r2.<java.util.Set: boolean contains(java.lang.Object)>(null);

        staticinvoke <org.apache.commons.collections4.map.CaseInsensitiveMapTest: void assertTrue(boolean)>($z2);

        $i0 = interfaceinvoke r2.<java.util.Set: int size()>();

        staticinvoke <org.apache.commons.collections4.map.CaseInsensitiveMapTest: void assertEquals(int,int)>(3, $i0);

        return;
    }

    public void testPutAll()
    {
        org.apache.commons.collections4.map.CaseInsensitiveMapTest r0;
        java.util.Set r3;
        java.util.HashMap $r4;
        java.lang.Integer $r9;
        org.apache.commons.collections4.map.CaseInsensitiveMap $r11;
        int $i0, $i1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.String $r12, $r14;
        java.lang.Object $r13;

        r0 := @this: org.apache.commons.collections4.map.CaseInsensitiveMapTest;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("One", "One");

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("Two", "Two");

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("one", "Three");

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(null, "Four");

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(20);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, "Five");

        $r11 = new org.apache.commons.collections4.map.CaseInsensitiveMap;

        specialinvoke $r11.<org.apache.commons.collections4.map.CaseInsensitiveMap: void <init>(java.util.Map)>($r4);

        $i0 = interfaceinvoke $r11.<java.util.Map: int size()>();

        staticinvoke <org.apache.commons.collections4.map.CaseInsensitiveMapTest: void assertEquals(int,int)>(4, $i0);

        r3 = interfaceinvoke $r11.<java.util.Map: java.util.Set keySet()>();

        $z0 = interfaceinvoke r3.<java.util.Set: boolean contains(java.lang.Object)>("one");

        staticinvoke <org.apache.commons.collections4.map.CaseInsensitiveMapTest: void assertTrue(boolean)>($z0);

        $z1 = interfaceinvoke r3.<java.util.Set: boolean contains(java.lang.Object)>("two");

        staticinvoke <org.apache.commons.collections4.map.CaseInsensitiveMapTest: void assertTrue(boolean)>($z1);

        $z2 = interfaceinvoke r3.<java.util.Set: boolean contains(java.lang.Object)>(null);

        staticinvoke <org.apache.commons.collections4.map.CaseInsensitiveMapTest: void assertTrue(boolean)>($z2);

        $r12 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(20);

        $z3 = interfaceinvoke r3.<java.util.Set: boolean contains(java.lang.Object)>($r12);

        staticinvoke <org.apache.commons.collections4.map.CaseInsensitiveMapTest: void assertTrue(boolean)>($z3);

        $i1 = interfaceinvoke r3.<java.util.Set: int size()>();

        staticinvoke <org.apache.commons.collections4.map.CaseInsensitiveMapTest: void assertEquals(int,int)>(4, $i1);

        $z4 = interfaceinvoke $r11.<java.util.Map: boolean containsValue(java.lang.Object)>("One");

        if $z4 == 0 goto label1;

        $z5 = interfaceinvoke $r11.<java.util.Map: boolean containsValue(java.lang.Object)>("Three");

        if $z5 != 0 goto label2;

     label1:
        $z6 = 1;

        goto label3;

     label2:
        $z6 = 0;

     label3:
        staticinvoke <org.apache.commons.collections4.map.CaseInsensitiveMapTest: void assertTrue(boolean)>($z6);

        $r13 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(null);

        $r14 = (java.lang.String) $r13;

        staticinvoke <org.apache.commons.collections4.map.CaseInsensitiveMapTest: void assertEquals(java.lang.String,java.lang.String)>("Four", $r14);

        return;
    }

    public void testClone()
    {
        org.apache.commons.collections4.map.CaseInsensitiveMapTest r0;
        org.apache.commons.collections4.map.CaseInsensitiveMap r2, $r3;
        int $i0, $i1;
        java.lang.Object $r5, $r6;

        r0 := @this: org.apache.commons.collections4.map.CaseInsensitiveMapTest;

        $r3 = new org.apache.commons.collections4.map.CaseInsensitiveMap;

        specialinvoke $r3.<org.apache.commons.collections4.map.CaseInsensitiveMap: void <init>(int)>(10);

        virtualinvoke $r3.<org.apache.commons.collections4.map.CaseInsensitiveMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("1", "1");

        r2 = virtualinvoke $r3.<org.apache.commons.collections4.map.CaseInsensitiveMap: org.apache.commons.collections4.map.CaseInsensitiveMap clone()>();

        $i0 = virtualinvoke $r3.<org.apache.commons.collections4.map.CaseInsensitiveMap: int size()>();

        $i1 = virtualinvoke r2.<org.apache.commons.collections4.map.CaseInsensitiveMap: int size()>();

        staticinvoke <org.apache.commons.collections4.map.CaseInsensitiveMapTest: void assertEquals(int,int)>($i0, $i1);

        $r5 = virtualinvoke $r3.<org.apache.commons.collections4.map.CaseInsensitiveMap: java.lang.Object get(java.lang.Object)>("1");

        $r6 = virtualinvoke r2.<org.apache.commons.collections4.map.CaseInsensitiveMap: java.lang.Object get(java.lang.Object)>("1");

        staticinvoke <org.apache.commons.collections4.map.CaseInsensitiveMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r5, $r6);

        return;
    }

    public void testLocaleIndependence()
    {
        org.apache.commons.collections4.map.CaseInsensitiveMapTest r0;
        java.util.Locale r1, r5, $r9, $r10, $r11, $r30;
        int i0, $i1, i2, i3;
        java.util.Locale[] $r8;
        java.lang.String[][] $r12;
        java.lang.String[] $r13, $r14, $r15, $r16, $r21, $r22, $r26, $r35;
        java.lang.StringBuilder $r17, $r18, $r19, $r29, $r31, $r32, $r33;
        java.lang.String $r20, $r23, $r24, $r27, $r34, $r36, $r38;
        boolean $z0;
        org.apache.commons.collections4.map.CaseInsensitiveMap $r25;
        java.lang.Object $r37;
        java.lang.Throwable $r39;

        r0 := @this: org.apache.commons.collections4.map.CaseInsensitiveMapTest;

        r1 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r8 = newarray (java.util.Locale)[3];

        $r9 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r8[0] = $r9;

        $r10 = new java.util.Locale;

        specialinvoke $r10.<java.util.Locale: void <init>(java.lang.String,java.lang.String,java.lang.String)>("tr", "", "");

        $r8[1] = $r10;

        $r11 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r8[2] = $r11;

        $r12 = newarray (java.lang.String[])[4];

        $r13 = newarray (java.lang.String)[2];

        $r13[0] = "i";

        $r13[1] = "I";

        $r12[0] = $r13;

        $r14 = newarray (java.lang.String)[2];

        $r14[0] = "\u03c2";

        $r14[1] = "\u03c3";

        $r12[1] = $r14;

        $r15 = newarray (java.lang.String)[2];

        $r15[0] = "\u03a3";

        $r15[1] = "\u03c2";

        $r12[2] = $r15;

        $r16 = newarray (java.lang.String)[2];

        $r16[0] = "\u03a3";

        $r16[1] = "\u03c3";

        $r12[3] = $r16;

     label1:
        i0 = lengthof $r8;

        i2 = 0;

     label2:
        if i2 >= i0 goto label5;

        r5 = $r8[i2];

        staticinvoke <java.util.Locale: void setDefault(java.util.Locale)>(r5);

        i3 = 0;

     label3:
        $i1 = lengthof $r12;

        if i3 >= $i1 goto label4;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Test data corrupt: ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $r21 = $r12[i3];

        $r24 = $r21[0];

        $r22 = $r12[i3];

        $r23 = $r22[1];

        $z0 = virtualinvoke $r24.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r23);

        staticinvoke <org.apache.commons.collections4.map.CaseInsensitiveMapTest: void assertTrue(java.lang.String,boolean)>($r20, $z0);

        $r25 = new org.apache.commons.collections4.map.CaseInsensitiveMap;

        specialinvoke $r25.<org.apache.commons.collections4.map.CaseInsensitiveMap: void <init>()>();

        $r26 = $r12[i3];

        $r27 = $r26[0];

        virtualinvoke $r25.<org.apache.commons.collections4.map.CaseInsensitiveMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r27, "value");

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        $r35 = $r12[i3];

        $r36 = $r35[1];

        $r37 = virtualinvoke $r25.<org.apache.commons.collections4.map.CaseInsensitiveMap: java.lang.Object get(java.lang.Object)>($r36);

        $r38 = (java.lang.String) $r37;

        staticinvoke <org.apache.commons.collections4.map.CaseInsensitiveMapTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>($r34, "value", $r38);

        i3 = i3 + 1;

        goto label3;

     label4:
        i2 = i2 + 1;

        goto label2;

     label5:
        staticinvoke <java.util.Locale: void setDefault(java.util.Locale)>(r1);

        goto label8;

     label6:
        $r39 := @caughtexception;

     label7:
        staticinvoke <java.util.Locale: void setDefault(java.util.Locale)>(r1);

        throw $r39;

     label8:
        return;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void testInitialCapacityZero()
    {
        org.apache.commons.collections4.map.CaseInsensitiveMapTest r0;
        org.apache.commons.collections4.map.CaseInsensitiveMap $r2;
        org.apache.commons.collections4.map.AbstractHashedMap$HashEntry[] $r3;
        int $i0;

        r0 := @this: org.apache.commons.collections4.map.CaseInsensitiveMapTest;

        $r2 = new org.apache.commons.collections4.map.CaseInsensitiveMap;

        specialinvoke $r2.<org.apache.commons.collections4.map.CaseInsensitiveMap: void <init>(int)>(0);

        $r3 = $r2.<org.apache.commons.collections4.map.CaseInsensitiveMap: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry[] data>;

        $i0 = lengthof $r3;

        staticinvoke <org.apache.commons.collections4.map.CaseInsensitiveMapTest: void assertEquals(int,int)>(1, $i0);

        return;
    }

    public volatile org.apache.commons.collections4.IterableMap makeObject()
    {
        org.apache.commons.collections4.map.CaseInsensitiveMapTest r0;
        org.apache.commons.collections4.map.CaseInsensitiveMap $r1;

        r0 := @this: org.apache.commons.collections4.map.CaseInsensitiveMapTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.map.CaseInsensitiveMapTest: org.apache.commons.collections4.map.CaseInsensitiveMap makeObject()>();

        return $r1;
    }

    public volatile java.util.Map makeObject()
    {
        org.apache.commons.collections4.map.CaseInsensitiveMapTest r0;
        org.apache.commons.collections4.map.CaseInsensitiveMap $r1;

        r0 := @this: org.apache.commons.collections4.map.CaseInsensitiveMapTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.map.CaseInsensitiveMapTest: org.apache.commons.collections4.map.CaseInsensitiveMap makeObject()>();

        return $r1;
    }

    public volatile java.lang.Object makeObject()
    {
        org.apache.commons.collections4.map.CaseInsensitiveMapTest r0;
        org.apache.commons.collections4.map.CaseInsensitiveMap $r1;

        r0 := @this: org.apache.commons.collections4.map.CaseInsensitiveMapTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.map.CaseInsensitiveMapTest: org.apache.commons.collections4.map.CaseInsensitiveMap makeObject()>();

        return $r1;
    }
}
