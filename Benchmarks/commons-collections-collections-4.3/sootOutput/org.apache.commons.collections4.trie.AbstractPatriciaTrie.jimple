abstract class org.apache.commons.collections4.trie.AbstractPatriciaTrie extends org.apache.commons.collections4.trie.AbstractBitwiseTrie
{
    private static final long serialVersionUID;
    private transient org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry root;
    private transient volatile java.util.Set keySet;
    private transient volatile java.util.Collection values;
    private transient volatile java.util.Set entrySet;
    private transient int size;
    protected transient int modCount;

    protected void <init>(org.apache.commons.collections4.trie.KeyAnalyzer)
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r0;
        org.apache.commons.collections4.trie.KeyAnalyzer r1;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry $r2;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        r1 := @parameter0: org.apache.commons.collections4.trie.KeyAnalyzer;

        specialinvoke r0.<org.apache.commons.collections4.trie.AbstractBitwiseTrie: void <init>(org.apache.commons.collections4.trie.KeyAnalyzer)>(r1);

        $r2 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry;

        specialinvoke $r2.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: void <init>(java.lang.Object,java.lang.Object,int)>(null, null, -1);

        r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry root> = $r2;

        r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: int size> = 0;

        r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: int modCount> = 0;

        return;
    }

    protected void <init>(org.apache.commons.collections4.trie.KeyAnalyzer, java.util.Map)
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r0;
        org.apache.commons.collections4.trie.KeyAnalyzer r1;
        java.util.Map r2;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry $r3;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        r1 := @parameter0: org.apache.commons.collections4.trie.KeyAnalyzer;

        r2 := @parameter1: java.util.Map;

        specialinvoke r0.<org.apache.commons.collections4.trie.AbstractBitwiseTrie: void <init>(org.apache.commons.collections4.trie.KeyAnalyzer)>(r1);

        $r3 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry;

        specialinvoke $r3.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: void <init>(java.lang.Object,java.lang.Object,int)>(null, null, -1);

        r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry root> = $r3;

        r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: int size> = 0;

        r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: int modCount> = 0;

        virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: void putAll(java.util.Map)>(r2);

        return;
    }

    public void clear()
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r0;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        $r1 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry root>;

        $r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: java.lang.Object key> = null;

        $r2 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry root>;

        $r2.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: int bitIndex> = -1;

        $r3 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry root>;

        $r3.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: java.lang.Object value> = null;

        $r4 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry root>;

        $r4.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry parent> = null;

        $r6 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry root>;

        $r5 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry root>;

        $r6.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry left> = $r5;

        $r7 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry root>;

        $r7.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry right> = null;

        $r9 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry root>;

        $r8 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry root>;

        $r9.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry predecessor> = $r8;

        r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: int size> = 0;

        specialinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: void incrementModCount()>();

        return;
    }

    public int size()
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r0;
        int $i0;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        $i0 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: int size>;

        return $i0;
    }

    void incrementSize()
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r0;
        int $i0, $i1;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        $i0 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: int size>;

        $i1 = $i0 + 1;

        r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: int size> = $i1;

        specialinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: void incrementModCount()>();

        return;
    }

    void decrementSize()
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r0;
        int $i0, $i1;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        $i0 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: int size>;

        $i1 = $i0 - 1;

        r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: int size> = $i1;

        specialinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: void incrementModCount()>();

        return;
    }

    private void incrementModCount()
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r0;
        int $i0, $i1;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        $i0 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: int modCount>;

        $i1 = $i0 + 1;

        r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: int modCount> = $i1;

        return;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r0;
        java.lang.Object r1, r2, $r5, $r6, $r8, $r11, $r14, $r17;
        int i0, i1;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry r3, $r7, $r9, $r10, $r12, $r15, $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.NullPointerException $r18;
        java.lang.IllegalArgumentException $r19;
        java.lang.StringBuilder $r20, $r21, $r22, $r23, $r24, $r25, $r26;
        java.lang.String $r27;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        if r1 != null goto label01;

        $r18 = new java.lang.NullPointerException;

        specialinvoke $r18.<java.lang.NullPointerException: void <init>(java.lang.String)>("Key cannot be null");

        throw $r18;

     label01:
        i0 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: int lengthInBits(java.lang.Object)>(r1);

        if i0 != 0 goto label04;

        $r15 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry root>;

        $z7 = virtualinvoke $r15.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: boolean isEmpty()>();

        if $z7 == 0 goto label02;

        virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: void incrementSize()>();

        goto label03;

     label02:
        specialinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: void incrementModCount()>();

     label03:
        $r16 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry root>;

        $r17 = virtualinvoke $r16.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: java.lang.Object setKeyValue(java.lang.Object,java.lang.Object)>(r1, r2);

        return $r17;

     label04:
        r3 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry getNearestEntryForKey(java.lang.Object,int)>(r1, i0);

        $r5 = r3.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: java.lang.Object key>;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: boolean compareKeys(java.lang.Object,java.lang.Object)>(r1, $r5);

        if $z0 == 0 goto label07;

        $z6 = virtualinvoke r3.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: boolean isEmpty()>();

        if $z6 == 0 goto label05;

        virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: void incrementSize()>();

        goto label06;

     label05:
        specialinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: void incrementModCount()>();

     label06:
        $r14 = virtualinvoke r3.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: java.lang.Object setKeyValue(java.lang.Object,java.lang.Object)>(r1, r2);

        return $r14;

     label07:
        $r6 = r3.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: java.lang.Object key>;

        i1 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: int bitIndex(java.lang.Object,java.lang.Object)>(r1, $r6);

        $z1 = staticinvoke <org.apache.commons.collections4.trie.KeyAnalyzer: boolean isOutOfBoundsIndex(int)>(i1);

        if $z1 != 0 goto label12;

        $z2 = staticinvoke <org.apache.commons.collections4.trie.KeyAnalyzer: boolean isValidBitIndex(int)>(i1);

        if $z2 == 0 goto label08;

        $r12 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry;

        specialinvoke $r12.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: void <init>(java.lang.Object,java.lang.Object,int)>(r1, r2, i1);

        virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry addEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry,int)>($r12, i0);

        virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: void incrementSize()>();

        return null;

     label08:
        $z3 = staticinvoke <org.apache.commons.collections4.trie.KeyAnalyzer: boolean isNullBitKey(int)>(i1);

        if $z3 == 0 goto label11;

        $r9 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry root>;

        $z5 = virtualinvoke $r9.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: boolean isEmpty()>();

        if $z5 == 0 goto label09;

        virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: void incrementSize()>();

        goto label10;

     label09:
        specialinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: void incrementModCount()>();

     label10:
        $r10 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry root>;

        $r11 = virtualinvoke $r10.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: java.lang.Object setKeyValue(java.lang.Object,java.lang.Object)>(r1, r2);

        return $r11;

     label11:
        $z4 = staticinvoke <org.apache.commons.collections4.trie.KeyAnalyzer: boolean isEqualBitKey(int)>(i1);

        if $z4 == 0 goto label12;

        $r7 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry root>;

        if r3 == $r7 goto label12;

        specialinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: void incrementModCount()>();

        $r8 = virtualinvoke r3.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: java.lang.Object setKeyValue(java.lang.Object,java.lang.Object)>(r1, r2);

        return $r8;

     label12:
        $r19 = new java.lang.IllegalArgumentException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to put: ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -> ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r27);

        throw $r19;
    }

    org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry addEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry, int)
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r0;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry r1, $r2, $r4, r7, r8;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.lang.Object $r3, $r5, $r6;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        r1 := @parameter0: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry;

        i0 := @parameter1: int;

        $r2 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry root>;

        r7 = $r2.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry left>;

        r8 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry root>;

     label01:
        $i10 = r7.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: int bitIndex>;

        $i11 = r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: int bitIndex>;

        if $i10 >= $i11 goto label02;

        $i8 = r7.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: int bitIndex>;

        $i7 = r8.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: int bitIndex>;

        if $i8 > $i7 goto label10;

     label02:
        r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry predecessor> = r1;

        $r3 = r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: java.lang.Object key>;

        $i1 = r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: int bitIndex>;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: boolean isBitSet(java.lang.Object,int,int)>($r3, $i1, i0);

        if $z0 != 0 goto label03;

        r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry left> = r1;

        r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry right> = r7;

        goto label04;

     label03:
        r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry left> = r7;

        r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry right> = r1;

     label04:
        r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry parent> = r8;

        $i3 = r7.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: int bitIndex>;

        $i2 = r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: int bitIndex>;

        if $i3 < $i2 goto label05;

        r7.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry parent> = r1;

     label05:
        $i5 = r7.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: int bitIndex>;

        $i4 = r8.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: int bitIndex>;

        if $i5 > $i4 goto label06;

        r7.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry predecessor> = r1;

     label06:
        $r4 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry root>;

        if r8 == $r4 goto label07;

        $r5 = r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: java.lang.Object key>;

        $i6 = r8.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: int bitIndex>;

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: boolean isBitSet(java.lang.Object,int,int)>($r5, $i6, i0);

        if $z1 != 0 goto label08;

     label07:
        r8.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry left> = r1;

        goto label09;

     label08:
        r8.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry right> = r1;

     label09:
        return r1;

     label10:
        r8 = r7;

        $r6 = r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: java.lang.Object key>;

        $i9 = r7.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: int bitIndex>;

        $z2 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: boolean isBitSet(java.lang.Object,int,int)>($r6, $i9, i0);

        if $z2 != 0 goto label11;

        r7 = r7.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry left>;

        goto label01;

     label11:
        r7 = r7.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry right>;

        goto label01;
    }

    public java.lang.Object get(java.lang.Object)
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r0;
        java.lang.Object r1, $r3;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry r2;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        r1 := @parameter0: java.lang.Object;

        r2 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry getEntry(java.lang.Object)>(r1);

        if r2 == null goto label1;

        $r3 = virtualinvoke r2.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: java.lang.Object getValue()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry getEntry(java.lang.Object)
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r0;
        java.lang.Object r1, r2, $r4;
        int i0;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry r3, $r5;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        r1 := @parameter0: java.lang.Object;

        r2 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: java.lang.Object castKey(java.lang.Object)>(r1);

        if r2 != null goto label1;

        return null;

     label1:
        i0 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: int lengthInBits(java.lang.Object)>(r2);

        r3 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry getNearestEntryForKey(java.lang.Object,int)>(r2, i0);

        $z0 = virtualinvoke r3.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $r4 = r3.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: java.lang.Object key>;

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: boolean compareKeys(java.lang.Object,java.lang.Object)>(r2, $r4);

        if $z1 == 0 goto label2;

        $r5 = r3;

        goto label3;

     label2:
        $r5 = null;

     label3:
        return $r5;
    }

    public java.util.Map$Entry select(java.lang.Object)
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r0;
        java.lang.Object r1, $r6;
        int i0;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference $r3;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry $r4, $r5;
        boolean $z0;
        java.util.Map$Entry $r7;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        r1 := @parameter0: java.lang.Object;

        i0 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: int lengthInBits(java.lang.Object)>(r1);

        $r3 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference;

        specialinvoke $r3.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference: void <init>(org.apache.commons.collections4.trie.AbstractPatriciaTrie$1)>(null);

        $r4 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry root>;

        $r5 = $r4.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry left>;

        $z0 = specialinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: boolean selectR(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry,int,java.lang.Object,int,org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference)>($r5, -1, r1, i0, $r3);

        if $z0 != 0 goto label1;

        $r6 = virtualinvoke $r3.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference: java.lang.Object get()>();

        $r7 = (java.util.Map$Entry) $r6;

        return $r7;

     label1:
        return null;
    }

    public java.lang.Object selectKey(java.lang.Object)
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r0;
        java.lang.Object r1, $r3;
        java.util.Map$Entry r2;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        r1 := @parameter0: java.lang.Object;

        r2 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: java.util.Map$Entry select(java.lang.Object)>(r1);

        if r2 != null goto label1;

        return null;

     label1:
        $r3 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        return $r3;
    }

    public java.lang.Object selectValue(java.lang.Object)
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r0;
        java.lang.Object r1, $r3;
        java.util.Map$Entry r2;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        r1 := @parameter0: java.lang.Object;

        r2 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: java.util.Map$Entry select(java.lang.Object)>(r1);

        if r2 != null goto label1;

        return null;

     label1:
        $r3 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        return $r3;
    }

    private boolean selectR(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry, int, java.lang.Object, int, org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference)
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r0;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry r1, $r4, $r5, $r6, $r7;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.Object r2;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        r1 := @parameter0: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        i1 := @parameter3: int;

        r3 := @parameter4: org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference;

        $i2 = r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: int bitIndex>;

        if $i2 > i0 goto label2;

        $z5 = virtualinvoke r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: boolean isEmpty()>();

        if $z5 != 0 goto label1;

        virtualinvoke r3.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference: void set(java.lang.Object)>(r1);

        return 0;

     label1:
        return 1;

     label2:
        $i3 = r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: int bitIndex>;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: boolean isBitSet(java.lang.Object,int,int)>(r2, $i3, i1);

        if $z0 != 0 goto label3;

        $r6 = r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry left>;

        $i6 = r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: int bitIndex>;

        $z3 = specialinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: boolean selectR(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry,int,java.lang.Object,int,org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference)>($r6, $i6, r2, i1, r3);

        if $z3 == 0 goto label4;

        $r7 = r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry right>;

        $i7 = r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: int bitIndex>;

        $z4 = specialinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: boolean selectR(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry,int,java.lang.Object,int,org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference)>($r7, $i7, r2, i1, r3);

        return $z4;

     label3:
        $r4 = r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry right>;

        $i4 = r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: int bitIndex>;

        $z1 = specialinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: boolean selectR(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry,int,java.lang.Object,int,org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference)>($r4, $i4, r2, i1, r3);

        if $z1 == 0 goto label4;

        $r5 = r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry left>;

        $i5 = r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: int bitIndex>;

        $z2 = specialinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: boolean selectR(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry,int,java.lang.Object,int,org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference)>($r5, $i5, r2, i1, r3);

        return $z2;

     label4:
        return 0;
    }

    public boolean containsKey(java.lang.Object)
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r0;
        java.lang.Object r1, r2, $r4;
        int i0;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry r3;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        return 0;

     label1:
        r2 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: java.lang.Object castKey(java.lang.Object)>(r1);

        i0 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: int lengthInBits(java.lang.Object)>(r2);

        r3 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry getNearestEntryForKey(java.lang.Object,int)>(r2, i0);

        $z0 = virtualinvoke r3.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $r4 = r3.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: java.lang.Object key>;

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: boolean compareKeys(java.lang.Object,java.lang.Object)>(r2, $r4);

        if $z1 == 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public java.util.Set entrySet()
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r0;
        java.util.Set $r1, $r2;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet $r3;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        $r1 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: java.util.Set entrySet>;

        if $r1 != null goto label1;

        $r3 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet;

        specialinvoke $r3.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet: void <init>(org.apache.commons.collections4.trie.AbstractPatriciaTrie,org.apache.commons.collections4.trie.AbstractPatriciaTrie$1)>(r0, null);

        r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: java.util.Set entrySet> = $r3;

     label1:
        $r2 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: java.util.Set entrySet>;

        return $r2;
    }

    public java.util.Set keySet()
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r0;
        java.util.Set $r1, $r2;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet $r3;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        $r1 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: java.util.Set keySet>;

        if $r1 != null goto label1;

        $r3 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet;

        specialinvoke $r3.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet: void <init>(org.apache.commons.collections4.trie.AbstractPatriciaTrie,org.apache.commons.collections4.trie.AbstractPatriciaTrie$1)>(r0, null);

        r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: java.util.Set keySet> = $r3;

     label1:
        $r2 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: java.util.Set keySet>;

        return $r2;
    }

    public java.util.Collection values()
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r0;
        java.util.Collection $r1, $r2;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values $r3;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        $r1 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: java.util.Collection values>;

        if $r1 != null goto label1;

        $r3 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values;

        specialinvoke $r3.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values: void <init>(org.apache.commons.collections4.trie.AbstractPatriciaTrie,org.apache.commons.collections4.trie.AbstractPatriciaTrie$1)>(r0, null);

        r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: java.util.Collection values> = $r3;

     label1:
        $r2 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: java.util.Collection values>;

        return $r2;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r0;
        java.lang.Object r1, r2, $r4, $r5;
        int i0, $i1, $i2, $i3;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry $r3, r6, r7;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        return null;

     label1:
        r2 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: java.lang.Object castKey(java.lang.Object)>(r1);

        i0 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: int lengthInBits(java.lang.Object)>(r2);

        $r3 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry root>;

        r6 = $r3.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry left>;

        r7 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry root>;

     label2:
        $i2 = r6.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: int bitIndex>;

        $i3 = r7.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: int bitIndex>;

        if $i2 > $i3 goto label4;

        $z1 = virtualinvoke r6.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: boolean isEmpty()>();

        if $z1 != 0 goto label3;

        $r4 = r6.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: java.lang.Object key>;

        $z2 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: boolean compareKeys(java.lang.Object,java.lang.Object)>(r2, $r4);

        if $z2 == 0 goto label3;

        $r5 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: java.lang.Object removeEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)>(r6);

        return $r5;

     label3:
        return null;

     label4:
        r7 = r6;

        $i1 = r6.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: int bitIndex>;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: boolean isBitSet(java.lang.Object,int,int)>(r2, $i1, i0);

        if $z0 != 0 goto label5;

        r6 = r6.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry left>;

        goto label2;

     label5:
        r6 = r6.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry right>;

        goto label2;
    }

    org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry getNearestEntryForKey(java.lang.Object, int)
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r0;
        java.lang.Object r1;
        int i0, $i1, $i2, $i3;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry $r2, r3, r4;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $r2 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry root>;

        r3 = $r2.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry left>;

        r4 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry root>;

     label1:
        $i2 = r3.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: int bitIndex>;

        $i3 = r4.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: int bitIndex>;

        if $i2 > $i3 goto label2;

        return r3;

     label2:
        r4 = r3;

        $i1 = r3.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: int bitIndex>;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: boolean isBitSet(java.lang.Object,int,int)>(r1, $i1, i0);

        if $z0 != 0 goto label3;

        r3 = r3.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry left>;

        goto label1;

     label3:
        r3 = r3.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry right>;

        goto label1;
    }

    java.lang.Object removeEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r0;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry r1, $r2;
        boolean $z0;
        java.lang.Object $r3;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        r1 := @parameter0: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry;

        $r2 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry root>;

        if r1 == $r2 goto label2;

        $z0 = virtualinvoke r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: boolean isInternalNode()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: void removeInternalEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)>(r1);

        goto label2;

     label1:
        specialinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: void removeExternalEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)>(r1);

     label2:
        virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: void decrementSize()>();

        $r3 = virtualinvoke r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: java.lang.Object setKeyValue(java.lang.Object,java.lang.Object)>(null, null);

        return $r3;
    }

    private void removeExternalEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r0;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry r1, r2, r3, $r4, $r5, $r6, $r13;
        boolean $z0;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r7, $r12;
        java.lang.StringBuilder $r8, $r9, $r10;
        java.lang.String $r11;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        r1 := @parameter0: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry;

        $r4 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry root>;

        if r1 != $r4 goto label1;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot delete root Entry!");

        throw $r12;

     label1:
        $z0 = virtualinvoke r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: boolean isExternalNode()>();

        if $z0 != 0 goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not an external Entry!");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label2:
        r2 = r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry parent>;

        $r5 = r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry left>;

        if $r5 != r1 goto label3;

        $r13 = r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry right>;

        goto label4;

     label3:
        $r13 = r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry left>;

     label4:
        r3 = $r13;

        $r6 = r2.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry left>;

        if $r6 != r1 goto label5;

        r2.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry left> = $r13;

        goto label6;

     label5:
        r2.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry right> = $r13;

     label6:
        $i1 = r3.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: int bitIndex>;

        $i0 = r2.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: int bitIndex>;

        if $i1 <= $i0 goto label7;

        r3.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry parent> = r2;

        goto label8;

     label7:
        r3.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry predecessor> = r2;

     label8:
        return;
    }

    private void removeInternalEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r0;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry r1, r2, r3, r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r33, $r34;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2;
        java.lang.IllegalArgumentException $r27, $r32;
        java.lang.StringBuilder $r28, $r29, $r30;
        java.lang.String $r31;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        r1 := @parameter0: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry;

        $r5 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry root>;

        if r1 != $r5 goto label01;

        $r32 = new java.lang.IllegalArgumentException;

        specialinvoke $r32.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot delete root Entry!");

        throw $r32;

     label01:
        $z0 = virtualinvoke r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: boolean isInternalNode()>();

        if $z0 != 0 goto label02;

        $r27 = new java.lang.IllegalArgumentException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not an internal Entry!");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r31);

        throw $r27;

     label02:
        r2 = r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry predecessor>;

        $i0 = r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: int bitIndex>;

        r2.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: int bitIndex> = $i0;

        r3 = r2.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry parent>;

        $r6 = r2.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry left>;

        if $r6 != r1 goto label03;

        $r33 = r2.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry right>;

        goto label04;

     label03:
        $r33 = r2.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry left>;

     label04:
        r4 = $r33;

        $r7 = r2.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry predecessor>;

        if $r7 != r2 goto label05;

        $r25 = r2.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry parent>;

        if $r25 == r1 goto label05;

        $r26 = r2.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry parent>;

        r2.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry predecessor> = $r26;

     label05:
        $r34 = r3.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry left>;

        if $r34 != r2 goto label06;

        r3.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry left> = r4;

        goto label07;

     label06:
        r3.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry right> = r4;

     label07:
        $i2 = r4.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: int bitIndex>;

        $i1 = r3.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: int bitIndex>;

        if $i2 <= $i1 goto label08;

        r4.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry parent> = r3;

     label08:
        $r8 = r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry left>;

        $r9 = $r8.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry parent>;

        if $r9 != r1 goto label09;

        $r24 = r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry left>;

        $r24.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry parent> = r2;

     label09:
        $r10 = r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry right>;

        $r11 = $r10.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry parent>;

        if $r11 != r1 goto label10;

        $r23 = r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry right>;

        $r23.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry parent> = r2;

     label10:
        $r12 = r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry parent>;

        $r13 = $r12.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry left>;

        if $r13 != r1 goto label11;

        $r22 = r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry parent>;

        $r22.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry left> = r2;

        goto label12;

     label11:
        $r14 = r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry parent>;

        $r14.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry right> = r2;

     label12:
        $r15 = r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry parent>;

        r2.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry parent> = $r15;

        $r16 = r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry left>;

        r2.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry left> = $r16;

        $r17 = r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry right>;

        r2.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry right> = $r17;

        $r18 = r2.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry left>;

        $z1 = staticinvoke <org.apache.commons.collections4.trie.AbstractPatriciaTrie: boolean isValidUplink(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry,org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)>($r18, r2);

        if $z1 == 0 goto label13;

        $r21 = r2.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry left>;

        $r21.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry predecessor> = r2;

     label13:
        $r19 = r2.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry right>;

        $z2 = staticinvoke <org.apache.commons.collections4.trie.AbstractPatriciaTrie: boolean isValidUplink(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry,org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)>($r19, r2);

        if $z2 == 0 goto label14;

        $r20 = r2.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry right>;

        $r20.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry predecessor> = r2;

     label14:
        return;
    }

    org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry nextEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r0;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry r1, $r2, $r3, $r4;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        r1 := @parameter0: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry;

        if r1 != null goto label1;

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry firstEntry()>();

        return $r4;

     label1:
        $r2 = r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry predecessor>;

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry nextEntryImpl(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry,org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry,org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)>($r2, r1, null);

        return $r3;
    }

    org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry nextEntryImpl(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry, org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry, org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r0;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry r1, r2, r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, r31, $r32;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        r1 := @parameter0: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry;

        r2 := @parameter1: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry;

        r3 := @parameter2: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry;

        r31 = r1;

        if r2 == null goto label01;

        $r30 = r2.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry predecessor>;

        if r1 == $r30 goto label04;

     label01:
        $r32 = r31.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry left>;

        $z3 = virtualinvoke $r32.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: boolean isEmpty()>();

        if $z3 != 0 goto label04;

        $r27 = r31.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry left>;

        if r2 != $r27 goto label02;

        goto label04;

     label02:
        $r28 = r31.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry left>;

        $z2 = staticinvoke <org.apache.commons.collections4.trie.AbstractPatriciaTrie: boolean isValidUplink(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry,org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)>($r28, r31);

        if $z2 == 0 goto label03;

        $r29 = r31.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry left>;

        return $r29;

     label03:
        r31 = r31.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry left>;

        goto label01;

     label04:
        $z4 = virtualinvoke r31.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: boolean isEmpty()>();

        if $z4 == 0 goto label05;

        return null;

     label05:
        $r4 = r31.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry right>;

        if $r4 != null goto label06;

        return null;

     label06:
        $r5 = r31.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry right>;

        if r2 == $r5 goto label08;

        $r23 = r31.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry right>;

        $z1 = staticinvoke <org.apache.commons.collections4.trie.AbstractPatriciaTrie: boolean isValidUplink(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry,org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)>($r23, r31);

        if $z1 == 0 goto label07;

        $r26 = r31.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry right>;

        return $r26;

     label07:
        $r24 = r31.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry right>;

        $r25 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry nextEntryImpl(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry,org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry,org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)>($r24, r2, r3);

        return $r25;

     label08:
        $r6 = r31.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry parent>;

        $r7 = $r6.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry right>;

        if r31 != $r7 goto label10;

        if r31 != r3 goto label09;

        return null;

     label09:
        r31 = r31.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry parent>;

        goto label08;

     label10:
        if r31 != r3 goto label11;

        return null;

     label11:
        $r8 = r31.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry parent>;

        $r9 = $r8.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry right>;

        if $r9 != null goto label12;

        return null;

     label12:
        $r10 = r31.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry parent>;

        $r11 = $r10.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry right>;

        if r2 == $r11 goto label13;

        $r18 = r31.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry parent>;

        $r20 = $r18.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry right>;

        $r19 = r31.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry parent>;

        $z0 = staticinvoke <org.apache.commons.collections4.trie.AbstractPatriciaTrie: boolean isValidUplink(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry,org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)>($r20, $r19);

        if $z0 == 0 goto label13;

        $r21 = r31.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry parent>;

        $r22 = $r21.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry right>;

        return $r22;

     label13:
        $r12 = r31.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry parent>;

        $r14 = $r12.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry right>;

        $r13 = r31.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry parent>;

        if $r14 != $r13 goto label14;

        return null;

     label14:
        $r15 = r31.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry parent>;

        $r16 = $r15.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry right>;

        $r17 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry nextEntryImpl(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry,org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry,org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)>($r16, r2, r3);

        return $r17;
    }

    org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry firstEntry()
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r0;
        boolean $z0;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry $r1, $r2;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r1 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry root>;

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry followLeft(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)>($r1);

        return $r2;
    }

    org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry followLeft(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r0;
        boolean $z0;
        int $i0, $i1;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry r1, r2;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        r1 := @parameter0: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry;

     label1:
        r2 = r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry left>;

        $z0 = virtualinvoke r2.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        r2 = r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry right>;

     label2:
        $i1 = r2.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: int bitIndex>;

        $i0 = r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: int bitIndex>;

        if $i1 > $i0 goto label3;

        return r2;

     label3:
        r1 = r2;

        goto label1;
    }

    public java.util.Comparator comparator()
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r0;
        org.apache.commons.collections4.trie.KeyAnalyzer $r1;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.KeyAnalyzer getKeyAnalyzer()>();

        return $r1;
    }

    public java.lang.Object firstKey()
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r0;
        int $i0;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry $r1;
        java.lang.Object $r2;
        java.util.NoSuchElementException $r3;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        $i0 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: int size()>();

        if $i0 != 0 goto label1;

        $r3 = new java.util.NoSuchElementException;

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>();

        throw $r3;

     label1:
        $r1 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry firstEntry()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: java.lang.Object getKey()>();

        return $r2;
    }

    public java.lang.Object lastKey()
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r0;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry r1;
        java.util.NoSuchElementException $r2;
        java.lang.Object $r3;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry lastEntry()>();

        if r1 == null goto label1;

        $r3 = virtualinvoke r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: java.lang.Object getKey()>();

        return $r3;

     label1:
        $r2 = new java.util.NoSuchElementException;

        specialinvoke $r2.<java.util.NoSuchElementException: void <init>()>();

        throw $r2;
    }

    public java.lang.Object nextKey(java.lang.Object)
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r0;
        java.lang.Object r1, $r5;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry r2, r3;
        java.lang.NullPointerException $r4;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();

        throw $r4;

     label1:
        r2 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry getEntry(java.lang.Object)>(r1);

        if r2 == null goto label4;

        r3 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry nextEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)>(r2);

        if r3 == null goto label2;

        $r5 = virtualinvoke r3.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: java.lang.Object getKey()>();

        goto label3;

     label2:
        $r5 = null;

     label3:
        return $r5;

     label4:
        return null;
    }

    public java.lang.Object previousKey(java.lang.Object)
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r0;
        java.lang.Object r1, $r5;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry r2, r3;
        java.lang.NullPointerException $r4;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();

        throw $r4;

     label1:
        r2 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry getEntry(java.lang.Object)>(r1);

        if r2 == null goto label4;

        r3 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry previousEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)>(r2);

        if r3 == null goto label2;

        $r5 = virtualinvoke r3.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: java.lang.Object getKey()>();

        goto label3;

     label2:
        $r5 = null;

     label3:
        return $r5;

     label4:
        return null;
    }

    public org.apache.commons.collections4.OrderedMapIterator mapIterator()
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r0;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator $r1;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        $r1 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator;

        specialinvoke $r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator: void <init>(org.apache.commons.collections4.trie.AbstractPatriciaTrie,org.apache.commons.collections4.trie.AbstractPatriciaTrie$1)>(r0, null);

        return $r1;
    }

    public java.util.SortedMap prefixMap(java.lang.Object)
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r0;
        java.lang.Object r1;
        int $i0;
        java.util.SortedMap $r2;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        r1 := @parameter0: java.lang.Object;

        $i0 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: int lengthInBits(java.lang.Object)>(r1);

        $r2 = specialinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: java.util.SortedMap getPrefixMapByBits(java.lang.Object,int,int)>(r1, 0, $i0);

        return $r2;
    }

    private java.util.SortedMap getPrefixMapByBits(java.lang.Object, int, int)
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r0;
        java.lang.Object r1;
        int i0, i1, i2, $i3, $i4;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r9;
        java.lang.String $r10;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = i0 + i1;

        $i3 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: int lengthInBits(java.lang.Object)>(r1);

        if i2 <= $i3 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" + ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" > ");

        $i4 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: int lengthInBits(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r3;

     label1:
        if i2 != 0 goto label2;

        return r0;

     label2:
        $r2 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap;

        specialinvoke $r2.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap: void <init>(org.apache.commons.collections4.trie.AbstractPatriciaTrie,java.lang.Object,int,int,org.apache.commons.collections4.trie.AbstractPatriciaTrie$1)>(r0, r1, i0, i1, null);

        return $r2;
    }

    public java.util.SortedMap headMap(java.lang.Object)
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r0;
        java.lang.Object r1;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap $r2;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        r1 := @parameter0: java.lang.Object;

        $r2 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap;

        specialinvoke $r2.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap: void <init>(org.apache.commons.collections4.trie.AbstractPatriciaTrie,java.lang.Object,java.lang.Object)>(r0, null, r1);

        return $r2;
    }

    public java.util.SortedMap subMap(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r0;
        java.lang.Object r1, r2;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap $r3;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap;

        specialinvoke $r3.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap: void <init>(org.apache.commons.collections4.trie.AbstractPatriciaTrie,java.lang.Object,java.lang.Object)>(r0, r1, r2);

        return $r3;
    }

    public java.util.SortedMap tailMap(java.lang.Object)
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r0;
        java.lang.Object r1;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap $r2;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        r1 := @parameter0: java.lang.Object;

        $r2 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap;

        specialinvoke $r2.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap: void <init>(org.apache.commons.collections4.trie.AbstractPatriciaTrie,java.lang.Object,java.lang.Object)>(r0, r1, null);

        return $r2;
    }

    org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry higherEntry(java.lang.Object)
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r0;
        java.lang.Object r1, $r5, $r6;
        int i0, i1, $i2, $i3, $i4, $i5;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry r2, r4, $r12, $r13, $r14, $r15, $r16, $r17, $r20, $r21, $r22, $r23, $r24;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.IllegalStateException $r7;
        java.lang.StringBuilder $r8, $r9, $r10;
        java.lang.String $r11;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        r1 := @parameter0: java.lang.Object;

        i0 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: int lengthInBits(java.lang.Object)>(r1);

        if i0 != 0 goto label3;

        $r21 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry root>;

        $z5 = virtualinvoke $r21.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: boolean isEmpty()>();

        if $z5 != 0 goto label2;

        $i5 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: int size()>();

        if $i5 <= 1 goto label1;

        $r23 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry root>;

        $r24 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry nextEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)>($r23);

        return $r24;

     label1:
        return null;

     label2:
        $r22 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry firstEntry()>();

        return $r22;

     label3:
        r2 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry getNearestEntryForKey(java.lang.Object,int)>(r1, i0);

        $r5 = r2.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: java.lang.Object key>;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: boolean compareKeys(java.lang.Object,java.lang.Object)>(r1, $r5);

        if $z0 == 0 goto label4;

        $r20 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry nextEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)>(r2);

        return $r20;

     label4:
        $r6 = r2.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: java.lang.Object key>;

        i1 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: int bitIndex(java.lang.Object,java.lang.Object)>(r1, $r6);

        $z1 = staticinvoke <org.apache.commons.collections4.trie.KeyAnalyzer: boolean isValidBitIndex(int)>(i1);

        if $z1 == 0 goto label5;

        $r17 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry;

        specialinvoke $r17.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: void <init>(java.lang.Object,java.lang.Object,int)>(r1, null, i1);

        virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry addEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry,int)>($r17, i0);

        virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: void incrementSize()>();

        r4 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry nextEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)>($r17);

        virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: java.lang.Object removeEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)>($r17);

        $i3 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: int modCount>;

        $i4 = $i3 - 2;

        r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: int modCount> = $i4;

        return r4;

     label5:
        $z2 = staticinvoke <org.apache.commons.collections4.trie.KeyAnalyzer: boolean isNullBitKey(int)>(i1);

        if $z2 == 0 goto label8;

        $r13 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry root>;

        $z4 = virtualinvoke $r13.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: boolean isEmpty()>();

        if $z4 != 0 goto label6;

        $r16 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry firstEntry()>();

        return $r16;

     label6:
        $i2 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: int size()>();

        if $i2 <= 1 goto label7;

        $r14 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry firstEntry()>();

        $r15 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry nextEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)>($r14);

        return $r15;

     label7:
        return null;

     label8:
        $z3 = staticinvoke <org.apache.commons.collections4.trie.KeyAnalyzer: boolean isEqualBitKey(int)>(i1);

        if $z3 == 0 goto label9;

        $r12 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry nextEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)>(r2);

        return $r12;

     label9:
        $r7 = new java.lang.IllegalStateException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid lookup: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        throw $r7;
    }

    org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry ceilingEntry(java.lang.Object)
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r0;
        java.lang.Object r1, $r5, $r6;
        int i0, i1, $i2, $i3;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry r2, r4, $r12, $r13, $r14, $r15, $r18, $r19, $r20;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.IllegalStateException $r7;
        java.lang.StringBuilder $r8, $r9, $r10;
        java.lang.String $r11;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        r1 := @parameter0: java.lang.Object;

        i0 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: int lengthInBits(java.lang.Object)>(r1);

        if i0 != 0 goto label2;

        $r18 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry root>;

        $z5 = virtualinvoke $r18.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: boolean isEmpty()>();

        if $z5 != 0 goto label1;

        $r20 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry root>;

        return $r20;

     label1:
        $r19 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry firstEntry()>();

        return $r19;

     label2:
        r2 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry getNearestEntryForKey(java.lang.Object,int)>(r1, i0);

        $r5 = r2.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: java.lang.Object key>;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: boolean compareKeys(java.lang.Object,java.lang.Object)>(r1, $r5);

        if $z0 == 0 goto label3;

        return r2;

     label3:
        $r6 = r2.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: java.lang.Object key>;

        i1 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: int bitIndex(java.lang.Object,java.lang.Object)>(r1, $r6);

        $z1 = staticinvoke <org.apache.commons.collections4.trie.KeyAnalyzer: boolean isValidBitIndex(int)>(i1);

        if $z1 == 0 goto label4;

        $r15 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry;

        specialinvoke $r15.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: void <init>(java.lang.Object,java.lang.Object,int)>(r1, null, i1);

        virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry addEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry,int)>($r15, i0);

        virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: void incrementSize()>();

        r4 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry nextEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)>($r15);

        virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: java.lang.Object removeEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)>($r15);

        $i2 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: int modCount>;

        $i3 = $i2 - 2;

        r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: int modCount> = $i3;

        return r4;

     label4:
        $z2 = staticinvoke <org.apache.commons.collections4.trie.KeyAnalyzer: boolean isNullBitKey(int)>(i1);

        if $z2 == 0 goto label6;

        $r12 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry root>;

        $z4 = virtualinvoke $r12.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: boolean isEmpty()>();

        if $z4 != 0 goto label5;

        $r14 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry root>;

        return $r14;

     label5:
        $r13 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry firstEntry()>();

        return $r13;

     label6:
        $z3 = staticinvoke <org.apache.commons.collections4.trie.KeyAnalyzer: boolean isEqualBitKey(int)>(i1);

        if $z3 == 0 goto label7;

        return r2;

     label7:
        $r7 = new java.lang.IllegalStateException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid lookup: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        throw $r7;
    }

    org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry lowerEntry(java.lang.Object)
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r0;
        java.lang.Object r1, $r5, $r6;
        int i0, i1, $i2, $i3;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry r2, r4, $r12, $r13, $r16;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IllegalStateException $r7;
        java.lang.StringBuilder $r8, $r9, $r10;
        java.lang.String $r11;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        r1 := @parameter0: java.lang.Object;

        i0 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: int lengthInBits(java.lang.Object)>(r1);

        if i0 != 0 goto label1;

        return null;

     label1:
        r2 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry getNearestEntryForKey(java.lang.Object,int)>(r1, i0);

        $r5 = r2.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: java.lang.Object key>;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: boolean compareKeys(java.lang.Object,java.lang.Object)>(r1, $r5);

        if $z0 == 0 goto label2;

        $r16 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry previousEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)>(r2);

        return $r16;

     label2:
        $r6 = r2.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: java.lang.Object key>;

        i1 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: int bitIndex(java.lang.Object,java.lang.Object)>(r1, $r6);

        $z1 = staticinvoke <org.apache.commons.collections4.trie.KeyAnalyzer: boolean isValidBitIndex(int)>(i1);

        if $z1 == 0 goto label3;

        $r13 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry;

        specialinvoke $r13.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: void <init>(java.lang.Object,java.lang.Object,int)>(r1, null, i1);

        virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry addEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry,int)>($r13, i0);

        virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: void incrementSize()>();

        r4 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry previousEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)>($r13);

        virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: java.lang.Object removeEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)>($r13);

        $i2 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: int modCount>;

        $i3 = $i2 - 2;

        r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: int modCount> = $i3;

        return r4;

     label3:
        $z2 = staticinvoke <org.apache.commons.collections4.trie.KeyAnalyzer: boolean isNullBitKey(int)>(i1);

        if $z2 == 0 goto label4;

        return null;

     label4:
        $z3 = staticinvoke <org.apache.commons.collections4.trie.KeyAnalyzer: boolean isEqualBitKey(int)>(i1);

        if $z3 == 0 goto label5;

        $r12 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry previousEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)>(r2);

        return $r12;

     label5:
        $r7 = new java.lang.IllegalStateException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid lookup: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        throw $r7;
    }

    org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry floorEntry(java.lang.Object)
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r0;
        java.lang.Object r1, $r5, $r6;
        int i0, i1, $i2, $i3;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry r2, r4, $r12, $r13, $r14, $r17, $r18;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.IllegalStateException $r7;
        java.lang.StringBuilder $r8, $r9, $r10;
        java.lang.String $r11;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        r1 := @parameter0: java.lang.Object;

        i0 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: int lengthInBits(java.lang.Object)>(r1);

        if i0 != 0 goto label2;

        $r17 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry root>;

        $z5 = virtualinvoke $r17.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: boolean isEmpty()>();

        if $z5 != 0 goto label1;

        $r18 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry root>;

        return $r18;

     label1:
        return null;

     label2:
        r2 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry getNearestEntryForKey(java.lang.Object,int)>(r1, i0);

        $r5 = r2.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: java.lang.Object key>;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: boolean compareKeys(java.lang.Object,java.lang.Object)>(r1, $r5);

        if $z0 == 0 goto label3;

        return r2;

     label3:
        $r6 = r2.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: java.lang.Object key>;

        i1 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: int bitIndex(java.lang.Object,java.lang.Object)>(r1, $r6);

        $z1 = staticinvoke <org.apache.commons.collections4.trie.KeyAnalyzer: boolean isValidBitIndex(int)>(i1);

        if $z1 == 0 goto label4;

        $r14 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry;

        specialinvoke $r14.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: void <init>(java.lang.Object,java.lang.Object,int)>(r1, null, i1);

        virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry addEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry,int)>($r14, i0);

        virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: void incrementSize()>();

        r4 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry previousEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)>($r14);

        virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: java.lang.Object removeEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)>($r14);

        $i2 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: int modCount>;

        $i3 = $i2 - 2;

        r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: int modCount> = $i3;

        return r4;

     label4:
        $z2 = staticinvoke <org.apache.commons.collections4.trie.KeyAnalyzer: boolean isNullBitKey(int)>(i1);

        if $z2 == 0 goto label6;

        $r12 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry root>;

        $z4 = virtualinvoke $r12.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: boolean isEmpty()>();

        if $z4 != 0 goto label5;

        $r13 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry root>;

        return $r13;

     label5:
        return null;

     label6:
        $z3 = staticinvoke <org.apache.commons.collections4.trie.KeyAnalyzer: boolean isEqualBitKey(int)>(i1);

        if $z3 == 0 goto label7;

        return r2;

     label7:
        $r7 = new java.lang.IllegalStateException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid lookup: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        throw $r7;
    }

    org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry subtree(java.lang.Object, int, int)
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r0;
        java.lang.Object r1, $r5, $r6, $r8, $r9, $r10;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry r2, $r3, $r4, r11, r12, $r13;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.commons.collections4.trie.KeyAnalyzer $r7;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r3 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry root>;

        r11 = $r3.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry left>;

        r12 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry root>;

     label01:
        $i13 = r11.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: int bitIndex>;

        $i14 = r12.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: int bitIndex>;

        if $i13 <= $i14 goto label04;

        $i9 = r11.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: int bitIndex>;

        if i1 > $i9 goto label02;

        goto label04;

     label02:
        r12 = r11;

        $i10 = r11.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: int bitIndex>;

        $i12 = i0 + $i10;

        $i11 = i0 + i1;

        $z4 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: boolean isBitSet(java.lang.Object,int,int)>(r1, $i12, $i11);

        if $z4 != 0 goto label03;

        r11 = r11.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry left>;

        goto label01;

     label03:
        r11 = r11.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry right>;

        goto label01;

     label04:
        $z0 = virtualinvoke r11.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: boolean isEmpty()>();

        if $z0 == 0 goto label05;

        $r13 = r12;

        goto label06;

     label05:
        $r13 = r11;

     label06:
        r2 = $r13;

        $z1 = virtualinvoke $r13.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: boolean isEmpty()>();

        if $z1 == 0 goto label07;

        return null;

     label07:
        i2 = i0 + i1;

        $r4 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry root>;

        if $r13 != $r4 goto label08;

        $r10 = virtualinvoke $r13.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: java.lang.Object getKey()>();

        $i8 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: int lengthInBits(java.lang.Object)>($r10);

        if $i8 >= i2 goto label08;

        return null;

     label08:
        $i4 = i2 - 1;

        $z2 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: boolean isBitSet(java.lang.Object,int,int)>(r1, $i4, i2);

        $r6 = r2.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: java.lang.Object key>;

        $i5 = i1 - 1;

        $r5 = r2.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: java.lang.Object key>;

        $i6 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: int lengthInBits(java.lang.Object)>($r5);

        $z3 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: boolean isBitSet(java.lang.Object,int,int)>($r6, $i5, $i6);

        if $z2 == $z3 goto label09;

        return null;

     label09:
        $r7 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.KeyAnalyzer getKeyAnalyzer()>();

        $r8 = r2.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: java.lang.Object key>;

        $r9 = virtualinvoke r2.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: java.lang.Object getKey()>();

        $i7 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: int lengthInBits(java.lang.Object)>($r9);

        i3 = virtualinvoke $r7.<org.apache.commons.collections4.trie.KeyAnalyzer: int bitIndex(java.lang.Object,int,int,java.lang.Object,int,int)>(r1, i0, i1, $r8, 0, $i7);

        if i3 < 0 goto label10;

        if i3 >= i1 goto label10;

        return null;

     label10:
        return r2;
    }

    org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry lastEntry()
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r0;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry $r1, $r2, $r3;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        $r1 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry root>;

        $r2 = $r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry left>;

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry followRight(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)>($r2);

        return $r3;
    }

    org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry followRight(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r0;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry $r1, $r2, $r3, r4;
        int $i0, $i1;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        r4 := @parameter0: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry;

        $r1 = r4.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry right>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r4.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry right>;

        $i1 = $r2.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: int bitIndex>;

        $i0 = r4.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: int bitIndex>;

        if $i1 <= $i0 goto label2;

        r4 = r4.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry right>;

        goto label1;

     label2:
        $r3 = r4.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry right>;

        return $r3;
    }

    org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry previousEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r0;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, r31;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r30;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        r1 := @parameter0: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry;

        $r2 = r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry predecessor>;

        if $r2 != null goto label1;

        $r30 = new java.lang.IllegalArgumentException;

        specialinvoke $r30.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("must have come from somewhere!");

        throw $r30;

     label1:
        $r3 = r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry predecessor>;

        $r4 = $r3.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry right>;

        if $r4 != r1 goto label3;

        $r22 = r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry predecessor>;

        $r24 = $r22.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry left>;

        $r23 = r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry predecessor>;

        $z2 = staticinvoke <org.apache.commons.collections4.trie.AbstractPatriciaTrie: boolean isValidUplink(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry,org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)>($r24, $r23);

        if $z2 == 0 goto label2;

        $r28 = r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry predecessor>;

        $r29 = $r28.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry left>;

        return $r29;

     label2:
        $r25 = r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry predecessor>;

        $r26 = $r25.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry left>;

        $r27 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry followRight(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)>($r26);

        return $r27;

     label3:
        r31 = r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry predecessor>;

     label4:
        $r5 = r31.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry parent>;

        if $r5 == null goto label5;

        $r20 = r31.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry parent>;

        $r21 = $r20.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry left>;

        if r31 != $r21 goto label5;

        r31 = r31.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry parent>;

        goto label4;

     label5:
        $r6 = r31.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry parent>;

        if $r6 != null goto label6;

        return null;

     label6:
        $r7 = r31.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry parent>;

        $r9 = $r7.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry left>;

        $r8 = r31.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry parent>;

        $z0 = staticinvoke <org.apache.commons.collections4.trie.AbstractPatriciaTrie: boolean isValidUplink(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry,org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)>($r9, $r8);

        if $z0 == 0 goto label9;

        $r13 = r31.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry parent>;

        $r15 = $r13.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry left>;

        $r14 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry root>;

        if $r15 != $r14 goto label8;

        $r18 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry root>;

        $z1 = virtualinvoke $r18.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: boolean isEmpty()>();

        if $z1 == 0 goto label7;

        return null;

     label7:
        $r19 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry root>;

        return $r19;

     label8:
        $r16 = r31.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry parent>;

        $r17 = $r16.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry left>;

        return $r17;

     label9:
        $r10 = r31.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry parent>;

        $r11 = $r10.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry left>;

        $r12 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry followRight(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)>($r11);

        return $r12;
    }

    org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry nextEntryInSubtree(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry, org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r0;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry r1, r2, $r3, $r4, $r5;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        r1 := @parameter0: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry;

        r2 := @parameter1: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry;

        if r1 != null goto label1;

        $r5 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry firstEntry()>();

        return $r5;

     label1:
        $r3 = r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry predecessor>;

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry nextEntryImpl(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry,org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry,org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)>($r3, r1, r2);

        return $r4;
    }

    static boolean isValidUplink(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry, org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry)
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry r0, r1;
        int $i0, $i1;
        boolean $z0, $z1;

        r0 := @parameter0: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry;

        r1 := @parameter1: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry;

        if r0 == null goto label1;

        $i1 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: int bitIndex>;

        $i0 = r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: int bitIndex>;

        if $i1 > $i0 goto label1;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r0;
        java.io.ObjectInputStream r1;
        int i0, i1;
        java.lang.Object r2, r3;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry $r4;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r4 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry;

        specialinvoke $r4.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry: void <init>(java.lang.Object,java.lang.Object,int)>(null, null, -1);

        r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry root> = $r4;

        i0 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        r3 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r0;
        java.io.ObjectOutputStream r1;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        int $i0;
        java.util.Set $r4;
        boolean $z0;
        java.lang.Object $r5, $r6, $r7;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        r1 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $i0 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: int size()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i0);

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r5;

        $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r6);

        $r7 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r7);

        goto label1;

     label2:
        return;
    }

    public volatile org.apache.commons.collections4.MapIterator mapIterator()
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r0;
        org.apache.commons.collections4.OrderedMapIterator $r1;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.OrderedMapIterator mapIterator()>();

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.collections4.trie.AbstractPatriciaTrie: long serialVersionUID> = 5155253417231339498L;

        return;
    }
}
