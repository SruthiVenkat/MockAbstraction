public abstract class org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest extends org.apache.commons.collections4.AbstractObjectTest
{
    protected org.apache.commons.collections4.MultiValuedMap map;
    protected org.apache.commons.collections4.MultiValuedMap confirmed;

    public void <init>(java.lang.String)
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.collections4.AbstractObjectTest: void <init>(java.lang.String)>(r1);

        return;
    }

    public abstract org.apache.commons.collections4.MultiValuedMap makeObject();

    public java.lang.String getCompatibilityVersion()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        return "4.1";
    }

    public boolean isAddSupported()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        return 1;
    }

    public boolean isRemoveSupported()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        return 1;
    }

    public boolean isAllowNullKey()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        return 1;
    }

    public boolean isTestSerialization()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        return 1;
    }

    public java.lang.Object[] getSampleKeys()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;
        java.lang.Object[] $r2, $r3;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        $r2 = newarray (java.lang.Object)[6];

        $r2[0] = "one";

        $r2[1] = "one";

        $r2[2] = "two";

        $r2[3] = "two";

        $r2[4] = "three";

        $r2[5] = "three";

        $r3 = (java.lang.Object[]) $r2;

        return $r3;
    }

    public java.lang.Object[] getSampleValues()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;
        java.lang.Object[] $r2, $r3;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        $r2 = newarray (java.lang.Object)[6];

        $r2[0] = "uno";

        $r2[1] = "un";

        $r2[2] = "dos";

        $r2[3] = "deux";

        $r2[4] = "tres";

        $r2[5] = "trois";

        $r3 = (java.lang.Object[]) $r2;

        return $r3;
    }

    protected org.apache.commons.collections4.MultiValuedMap makeFullMap()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;
        org.apache.commons.collections4.MultiValuedMap r1;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap makeObject()>();

        virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void addSampleMappings(org.apache.commons.collections4.MultiValuedMap)>(r1);

        return r1;
    }

    protected void addSampleMappings(org.apache.commons.collections4.MultiValuedMap)
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;
        org.apache.commons.collections4.MultiValuedMap r1;
        java.lang.Object[] r2, r3;
        int $i0, i1;
        java.lang.Object $r4, $r5;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        r1 := @parameter0: org.apache.commons.collections4.MultiValuedMap;

        r2 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: java.lang.Object[] getSampleKeys()>();

        r3 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: java.lang.Object[] getSampleValues()>();

        i1 = 0;

     label1:
        $i0 = lengthof r2;

        if i1 >= $i0 goto label2;

        $r5 = r2[i1];

        $r4 = r3[i1];

        interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean put(java.lang.Object,java.lang.Object)>($r5, $r4);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public org.apache.commons.collections4.MultiValuedMap makeConfirmedMap()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;
        org.apache.commons.collections4.multimap.ArrayListValuedHashMap $r1;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        $r1 = new org.apache.commons.collections4.multimap.ArrayListValuedHashMap;

        specialinvoke $r1.<org.apache.commons.collections4.multimap.ArrayListValuedHashMap: void <init>()>();

        return $r1;
    }

    public org.apache.commons.collections4.MultiValuedMap getConfirmed()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;
        org.apache.commons.collections4.MultiValuedMap $r1;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        $r1 = r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap confirmed>;

        return $r1;
    }

    public void setConfirmed(org.apache.commons.collections4.MultiValuedMap)
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;
        org.apache.commons.collections4.MultiValuedMap r1;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        r1 := @parameter0: org.apache.commons.collections4.MultiValuedMap;

        r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap confirmed> = r1;

        return;
    }

    public org.apache.commons.collections4.MultiValuedMap getMap()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;
        org.apache.commons.collections4.MultiValuedMap $r1;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        $r1 = r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap map>;

        return $r1;
    }

    public void resetEmpty()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;
        org.apache.commons.collections4.MultiValuedMap $r1, $r2;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap makeObject()>();

        r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap map> = $r1;

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap makeConfirmedMap()>();

        r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap confirmed> = $r2;

        return;
    }

    public void resetFull()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;
        java.lang.Object[] r1, r2;
        org.apache.commons.collections4.MultiValuedMap $r3, $r4, $r7;
        int $i0, i1;
        java.lang.Object $r5, $r6;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap makeFullMap()>();

        r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap map> = $r3;

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap makeConfirmedMap()>();

        r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap confirmed> = $r4;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: java.lang.Object[] getSampleKeys()>();

        r2 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: java.lang.Object[] getSampleValues()>();

        i1 = 0;

     label1:
        $i0 = lengthof r1;

        if i1 >= $i0 goto label2;

        $r7 = r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap confirmed>;

        $r6 = r1[i1];

        $r5 = r2[i1];

        interfaceinvoke $r7.<org.apache.commons.collections4.MultiValuedMap: boolean put(java.lang.Object,java.lang.Object)>($r6, $r5);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void testNoMappingReturnsEmptyCol()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;
        org.apache.commons.collections4.MultiValuedMap r1;
        java.util.Collection $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap makeFullMap()>();

        $r2 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection get(java.lang.Object)>("whatever");

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean isEmpty()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertTrue(boolean)>($z0);

        return;
    }

    public void testMultipleValues()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;
        org.apache.commons.collections4.MultiValuedMap r1;
        java.util.Collection r2;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap makeFullMap()>();

        r2 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection get(java.lang.Object)>("one");

        $z0 = interfaceinvoke r2.<java.util.Collection: boolean contains(java.lang.Object)>("uno");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertTrue(boolean)>($z0);

        $z1 = interfaceinvoke r2.<java.util.Collection: boolean contains(java.lang.Object)>("un");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertTrue(boolean)>($z1);

        return;
    }

    public void testGet()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;
        org.apache.commons.collections4.MultiValuedMap r1;
        java.util.Collection $r2, $r3, $r4, $r5, $r6, $r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap makeFullMap()>();

        $r2 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection get(java.lang.Object)>("one");

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean contains(java.lang.Object)>("uno");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertTrue(boolean)>($z0);

        $r3 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection get(java.lang.Object)>("one");

        $z1 = interfaceinvoke $r3.<java.util.Collection: boolean contains(java.lang.Object)>("un");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertTrue(boolean)>($z1);

        $r4 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection get(java.lang.Object)>("two");

        $z2 = interfaceinvoke $r4.<java.util.Collection: boolean contains(java.lang.Object)>("dos");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertTrue(boolean)>($z2);

        $r5 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection get(java.lang.Object)>("two");

        $z3 = interfaceinvoke $r5.<java.util.Collection: boolean contains(java.lang.Object)>("deux");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertTrue(boolean)>($z3);

        $r6 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection get(java.lang.Object)>("three");

        $z4 = interfaceinvoke $r6.<java.util.Collection: boolean contains(java.lang.Object)>("tres");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertTrue(boolean)>($z4);

        $r7 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection get(java.lang.Object)>("three");

        $z5 = interfaceinvoke $r7.<java.util.Collection: boolean contains(java.lang.Object)>("trois");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertTrue(boolean)>($z5);

        return;
    }

    public void testAddMappingThroughGet()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;
        org.apache.commons.collections4.MultiValuedMap r1;
        java.util.Collection r2, r3;
        boolean $z0, $z1, $z2, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        int $i0;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: boolean isAddSupported()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void resetEmpty()>();

        r1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap getMap()>();

        r2 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection get(java.lang.Object)>("one");

        r3 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection get(java.lang.Object)>("one");

        $z1 = interfaceinvoke r2.<java.util.Collection: boolean isEmpty()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertTrue(boolean)>($z1);

        $z2 = interfaceinvoke r3.<java.util.Collection: boolean isEmpty()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertTrue(boolean)>($z2);

        $i0 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(0, $i0);

        interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>("uno");

        interfaceinvoke r3.<java.util.Collection: boolean add(java.lang.Object)>("un");

        $z5 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean containsKey(java.lang.Object)>("one");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertTrue(boolean)>($z5);

        $z6 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean containsMapping(java.lang.Object,java.lang.Object)>("one", "uno");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertTrue(boolean)>($z6);

        $z7 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean containsMapping(java.lang.Object,java.lang.Object)>("one", "un");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertTrue(boolean)>($z7);

        $z8 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean containsValue(java.lang.Object)>("uno");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertTrue(boolean)>($z8);

        $z9 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean containsValue(java.lang.Object)>("un");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertTrue(boolean)>($z9);

        $z10 = interfaceinvoke r2.<java.util.Collection: boolean contains(java.lang.Object)>("un");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertTrue(boolean)>($z10);

        $z11 = interfaceinvoke r3.<java.util.Collection: boolean contains(java.lang.Object)>("uno");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertTrue(boolean)>($z11);

        return;
    }

    public void testRemoveMappingThroughGet()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;
        org.apache.commons.collections4.MultiValuedMap r1;
        boolean $z0, $z3, $z4, $z5, $z6, $z7;
        int $i0, $i1, $i2, $i3;
        java.util.Collection r2, r3;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: boolean isRemoveSupported()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void resetFull()>();

        r1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap getMap()>();

        r2 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection get(java.lang.Object)>("one");

        $i0 = interfaceinvoke r2.<java.util.Collection: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(2, $i0);

        $i1 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(6, $i1);

        interfaceinvoke r2.<java.util.Collection: boolean remove(java.lang.Object)>("uno");

        interfaceinvoke r2.<java.util.Collection: boolean remove(java.lang.Object)>("un");

        $z3 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean containsKey(java.lang.Object)>("one");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertFalse(boolean)>($z3);

        $z4 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean containsMapping(java.lang.Object,java.lang.Object)>("one", "uno");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertFalse(boolean)>($z4);

        $z5 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean containsMapping(java.lang.Object,java.lang.Object)>("one", "un");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertFalse(boolean)>($z5);

        $z6 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean containsValue(java.lang.Object)>("uno");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertFalse(boolean)>($z6);

        $z7 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean containsValue(java.lang.Object)>("un");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertFalse(boolean)>($z7);

        $i2 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(4, $i2);

        r3 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection remove(java.lang.Object)>("one");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertNotNull(java.lang.Object)>(r3);

        $i3 = interfaceinvoke r3.<java.util.Collection: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(0, $i3);

        return;
    }

    public void testRemoveMappingThroughGetIterator()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;
        org.apache.commons.collections4.MultiValuedMap r1;
        java.util.Iterator r2;
        java.util.Collection r3, $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        int $i0, $i1;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: boolean isRemoveSupported()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void resetFull()>();

        r1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap getMap()>();

        $r4 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection get(java.lang.Object)>("one");

        r2 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke r2.<java.util.Iterator: void remove()>();

        goto label2;

     label3:
        $z2 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean containsKey(java.lang.Object)>("one");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertFalse(boolean)>($z2);

        $z3 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean containsMapping(java.lang.Object,java.lang.Object)>("one", "uno");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertFalse(boolean)>($z3);

        $z4 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean containsMapping(java.lang.Object,java.lang.Object)>("one", "un");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertFalse(boolean)>($z4);

        $z5 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean containsValue(java.lang.Object)>("uno");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertFalse(boolean)>($z5);

        $z6 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean containsValue(java.lang.Object)>("un");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertFalse(boolean)>($z6);

        $i0 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(4, $i0);

        r3 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection remove(java.lang.Object)>("one");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertNotNull(java.lang.Object)>(r3);

        $i1 = interfaceinvoke r3.<java.util.Collection: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(0, $i1);

        return;
    }

    public void testContainsValue()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;
        org.apache.commons.collections4.MultiValuedMap r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap makeFullMap()>();

        $z0 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean containsValue(java.lang.Object)>("uno");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertTrue(boolean)>($z0);

        $z1 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean containsValue(java.lang.Object)>("un");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertTrue(boolean)>($z1);

        $z2 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean containsValue(java.lang.Object)>("dos");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertTrue(boolean)>($z2);

        $z3 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean containsValue(java.lang.Object)>("deux");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertTrue(boolean)>($z3);

        $z4 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean containsValue(java.lang.Object)>("tres");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertTrue(boolean)>($z4);

        $z5 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean containsValue(java.lang.Object)>("trois");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertTrue(boolean)>($z5);

        $z6 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean containsValue(java.lang.Object)>("quatro");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertFalse(boolean)>($z6);

        return;
    }

    public void testKeyContainsValue()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;
        org.apache.commons.collections4.MultiValuedMap r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap makeFullMap()>();

        $z0 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean containsMapping(java.lang.Object,java.lang.Object)>("one", "uno");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertTrue(boolean)>($z0);

        $z1 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean containsMapping(java.lang.Object,java.lang.Object)>("one", "un");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertTrue(boolean)>($z1);

        $z2 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean containsMapping(java.lang.Object,java.lang.Object)>("two", "dos");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertTrue(boolean)>($z2);

        $z3 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean containsMapping(java.lang.Object,java.lang.Object)>("two", "deux");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertTrue(boolean)>($z3);

        $z4 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean containsMapping(java.lang.Object,java.lang.Object)>("three", "tres");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertTrue(boolean)>($z4);

        $z5 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean containsMapping(java.lang.Object,java.lang.Object)>("three", "trois");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertTrue(boolean)>($z5);

        $z6 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean containsMapping(java.lang.Object,java.lang.Object)>("four", "quatro");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertFalse(boolean)>($z6);

        return;
    }

    public void testValues()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;
        org.apache.commons.collections4.MultiValuedMap r1;
        java.util.Collection r3;
        java.util.HashSet $r4, $r5;
        int $i0;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap makeFullMap()>();

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        virtualinvoke $r4.<java.util.HashSet: boolean add(java.lang.Object)>("uno");

        virtualinvoke $r4.<java.util.HashSet: boolean add(java.lang.Object)>("dos");

        virtualinvoke $r4.<java.util.HashSet: boolean add(java.lang.Object)>("tres");

        virtualinvoke $r4.<java.util.HashSet: boolean add(java.lang.Object)>("un");

        virtualinvoke $r4.<java.util.HashSet: boolean add(java.lang.Object)>("deux");

        virtualinvoke $r4.<java.util.HashSet: boolean add(java.lang.Object)>("trois");

        r3 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection values()>();

        $i0 = interfaceinvoke r3.<java.util.Collection: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(6, $i0);

        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>(java.util.Collection)>(r3);

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(java.lang.Object,java.lang.Object)>($r4, $r5);

        return;
    }

    public void testRemoveAllViaValuesIterator()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;
        org.apache.commons.collections4.MultiValuedMap r1;
        java.util.Iterator r2;
        boolean $z0, $z1, $z2, $z3;
        java.util.Collection $r3, $r4;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: boolean isRemoveSupported()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap makeFullMap()>();

        $r3 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection values()>();

        r2 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke r2.<java.util.Iterator: void remove()>();

        goto label2;

     label3:
        $r4 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection get(java.lang.Object)>("one");

        $z2 = interfaceinvoke $r4.<java.util.Collection: boolean isEmpty()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertTrue(boolean)>($z2);

        $z3 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean isEmpty()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertTrue(boolean)>($z3);

        return;
    }

    public void testRemoveViaValuesRemove()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;
        org.apache.commons.collections4.MultiValuedMap r1;
        java.util.Collection r2;
        boolean $z0, $z3;
        int $i0;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: boolean isRemoveSupported()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap makeFullMap()>();

        r2 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection values()>();

        interfaceinvoke r2.<java.util.Collection: boolean remove(java.lang.Object)>("uno");

        interfaceinvoke r2.<java.util.Collection: boolean remove(java.lang.Object)>("un");

        $z3 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean containsKey(java.lang.Object)>("one");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertFalse(boolean)>($z3);

        $i0 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(4, $i0);

        return;
    }

    public void testEntriesCollectionIterator()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;
        org.apache.commons.collections4.MultiValuedMap r1;
        java.util.Iterator r3;
        java.util.Map$Entry r4;
        java.util.ArrayList $r5;
        java.util.Collection $r6, $r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.Object $r8, $r9, $r10, $r11, $r12;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap makeFullMap()>();

        $r5 = new java.util.ArrayList;

        $r6 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection values()>();

        specialinvoke $r5.<java.util.ArrayList: void <init>(java.util.Collection)>($r6);

        $r7 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection entries()>();

        r3 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r8;

        $r9 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r10 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z3 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean containsMapping(java.lang.Object,java.lang.Object)>($r9, $r10);

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertTrue(boolean)>($z3);

        $r11 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z4 = interfaceinvoke $r5.<java.util.Collection: boolean contains(java.lang.Object)>($r11);

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertTrue(boolean)>($z4);

        $z5 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: boolean isRemoveSupported()>();

        if $z5 == 0 goto label2;

        $r12 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z6 = interfaceinvoke $r5.<java.util.Collection: boolean remove(java.lang.Object)>($r12);

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertTrue(boolean)>($z6);

     label2:
        goto label1;

     label3:
        $z1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: boolean isRemoveSupported()>();

        if $z1 == 0 goto label4;

        $z2 = interfaceinvoke $r5.<java.util.Collection: boolean isEmpty()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertTrue(boolean)>($z2);

     label4:
        return;
    }

    public void testRemoveAllViaEntriesIterator()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;
        org.apache.commons.collections4.MultiValuedMap r1;
        java.util.Iterator r2;
        boolean $z0, $z1, $z2;
        java.util.Collection $r3, $r4;
        int $i0;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: boolean isRemoveSupported()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap makeFullMap()>();

        $r3 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection entries()>();

        r2 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke r2.<java.util.Iterator: void remove()>();

        goto label2;

     label3:
        $r4 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection get(java.lang.Object)>("one");

        $z2 = interfaceinvoke $r4.<java.util.Collection: boolean isEmpty()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertTrue(boolean)>($z2);

        $i0 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(0, $i0);

        return;
    }

    public void testSize()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;
        org.apache.commons.collections4.MultiValuedMap $r1;
        int $i0;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap makeFullMap()>();

        $i0 = interfaceinvoke $r1.<org.apache.commons.collections4.MultiValuedMap: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(6, $i0);

        return;
    }

    public void testMapEquals()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;
        org.apache.commons.collections4.MultiValuedMap r1, r3;
        java.lang.Integer r2;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: boolean isAddSupported()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap makeObject()>();

        r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean put(java.lang.Object,java.lang.Object)>("One", r2);

        interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean removeMapping(java.lang.Object,java.lang.Object)>("One", r2);

        r3 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap makeObject()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(java.lang.Object,java.lang.Object)>(r3, r1);

        return;
    }

    public void testSizeWithPutRemove()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;
        org.apache.commons.collections4.MultiValuedMap r1;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: boolean isRemoveSupported()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: boolean isAddSupported()>();

        if $z1 != 0 goto label2;

     label1:
        return;

     label2:
        r1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap makeObject()>();

        $i0 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(0, $i0);

        interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean put(java.lang.Object,java.lang.Object)>("A", "AA");

        $i1 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(1, $i1);

        interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean put(java.lang.Object,java.lang.Object)>("B", "BA");

        $i2 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(2, $i2);

        interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean put(java.lang.Object,java.lang.Object)>("B", "BB");

        $i3 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(3, $i3);

        interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean put(java.lang.Object,java.lang.Object)>("B", "BC");

        $i4 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(4, $i4);

        interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection remove(java.lang.Object)>("A");

        $i5 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(3, $i5);

        interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean removeMapping(java.lang.Object,java.lang.Object)>("B", "BC");

        $i6 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(2, $i6);

        return;
    }

    public void testKeySetSize()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;
        org.apache.commons.collections4.MultiValuedMap r1;
        java.util.Set $r2;
        int $i0;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap makeFullMap()>();

        $r2 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: java.util.Set keySet()>();

        $i0 = interfaceinvoke $r2.<java.util.Set: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(3, $i0);

        return;
    }

    public void testSize_Key()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;
        org.apache.commons.collections4.MultiValuedMap r1;
        java.util.Collection $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r13, $r14;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        boolean $z0, $z5;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap makeFullMap()>();

        $r2 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection get(java.lang.Object)>("one");

        $i0 = interfaceinvoke $r2.<java.util.Collection: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(2, $i0);

        $r3 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection get(java.lang.Object)>("two");

        $i1 = interfaceinvoke $r3.<java.util.Collection: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(2, $i1);

        $r4 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection get(java.lang.Object)>("three");

        $i2 = interfaceinvoke $r4.<java.util.Collection: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(2, $i2);

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: boolean isAddSupported()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean put(java.lang.Object,java.lang.Object)>("A", "AA");

        $r5 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection get(java.lang.Object)>("A");

        $i3 = interfaceinvoke $r5.<java.util.Collection: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(1, $i3);

        interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean put(java.lang.Object,java.lang.Object)>("B", "BA");

        $r6 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection get(java.lang.Object)>("A");

        $i4 = interfaceinvoke $r6.<java.util.Collection: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(1, $i4);

        $r7 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection get(java.lang.Object)>("B");

        $i5 = interfaceinvoke $r7.<java.util.Collection: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(1, $i5);

        interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean put(java.lang.Object,java.lang.Object)>("B", "BB");

        $r8 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection get(java.lang.Object)>("A");

        $i6 = interfaceinvoke $r8.<java.util.Collection: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(1, $i6);

        $r9 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection get(java.lang.Object)>("B");

        $i7 = interfaceinvoke $r9.<java.util.Collection: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(2, $i7);

        interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean put(java.lang.Object,java.lang.Object)>("B", "BC");

        $r10 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection get(java.lang.Object)>("A");

        $i8 = interfaceinvoke $r10.<java.util.Collection: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(1, $i8);

        $r11 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection get(java.lang.Object)>("B");

        $i9 = interfaceinvoke $r11.<java.util.Collection: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(3, $i9);

        $z5 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: boolean isRemoveSupported()>();

        if $z5 != 0 goto label2;

        return;

     label2:
        interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection remove(java.lang.Object)>("A");

        $r13 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection get(java.lang.Object)>("B");

        $i10 = interfaceinvoke $r13.<java.util.Collection: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(3, $i10);

        interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean removeMapping(java.lang.Object,java.lang.Object)>("B", "BC");

        $r14 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection get(java.lang.Object)>("B");

        $i11 = interfaceinvoke $r14.<java.util.Collection: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(2, $i11);

        return;
    }

    public void testContainsValue_Key()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;
        org.apache.commons.collections4.MultiValuedMap r1;
        boolean $z0, $z1, $z2, $z4, $z5;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap makeFullMap()>();

        $z0 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean containsMapping(java.lang.Object,java.lang.Object)>("one", "uno");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(boolean,boolean)>(1, $z0);

        $z1 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean containsMapping(java.lang.Object,java.lang.Object)>("two", "2");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(boolean,boolean)>(0, $z1);

        $z2 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: boolean isAddSupported()>();

        if $z2 != 0 goto label1;

        return;

     label1:
        interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean put(java.lang.Object,java.lang.Object)>("A", "AA");

        $z4 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean containsMapping(java.lang.Object,java.lang.Object)>("A", "AA");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(boolean,boolean)>(1, $z4);

        $z5 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean containsMapping(java.lang.Object,java.lang.Object)>("A", "AB");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(boolean,boolean)>(0, $z5);

        return;
    }

    public void testPutAll_Map1()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;
        org.apache.commons.collections4.MultiValuedMap r1, r2;
        boolean $z0, $z6, $z7, $z8, $z9;
        java.util.Set $r3;
        int $i0, $i1, $i2, $i3;
        java.util.Collection $r4, $r5;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: boolean isAddSupported()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap makeObject()>();

        interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean put(java.lang.Object,java.lang.Object)>("key", "object1");

        interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean put(java.lang.Object,java.lang.Object)>("key", "object2");

        r2 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap makeObject()>();

        interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: boolean put(java.lang.Object,java.lang.Object)>("keyA", "objectA");

        interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: boolean put(java.lang.Object,java.lang.Object)>("key", "object0");

        interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: boolean putAll(org.apache.commons.collections4.MultiValuedMap)>(r1);

        $r3 = interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: java.util.Set keySet()>();

        $i0 = interfaceinvoke $r3.<java.util.Set: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(2, $i0);

        $i1 = interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(4, $i1);

        $r4 = interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection get(java.lang.Object)>("keyA");

        $i2 = interfaceinvoke $r4.<java.util.Collection: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(1, $i2);

        $r5 = interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection get(java.lang.Object)>("key");

        $i3 = interfaceinvoke $r5.<java.util.Collection: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(3, $i3);

        $z6 = interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: boolean containsValue(java.lang.Object)>("objectA");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(boolean,boolean)>(1, $z6);

        $z7 = interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: boolean containsValue(java.lang.Object)>("object0");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(boolean,boolean)>(1, $z7);

        $z8 = interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: boolean containsValue(java.lang.Object)>("object1");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(boolean,boolean)>(1, $z8);

        $z9 = interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: boolean containsValue(java.lang.Object)>("object2");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(boolean,boolean)>(1, $z9);

        return;
    }

    public void testPutAll_Map2()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;
        org.apache.commons.collections4.MultiValuedMap r2;
        boolean $z0, $z4, $z5, $z6, $z7;
        java.util.HashMap $r3;
        java.util.Set $r6;
        int $i0, $i1, $i2, $i3, $i4;
        java.util.Collection $r7, $r8, $r9;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: boolean isAddSupported()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("keyX", "object1");

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("keyY", "object2");

        r2 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap makeObject()>();

        interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: boolean put(java.lang.Object,java.lang.Object)>("keyA", "objectA");

        interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: boolean put(java.lang.Object,java.lang.Object)>("keyX", "object0");

        interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: boolean putAll(java.util.Map)>($r3);

        $r6 = interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: java.util.Set keySet()>();

        $i0 = interfaceinvoke $r6.<java.util.Set: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(3, $i0);

        $i1 = interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(4, $i1);

        $r7 = interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection get(java.lang.Object)>("keyA");

        $i2 = interfaceinvoke $r7.<java.util.Collection: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(1, $i2);

        $r8 = interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection get(java.lang.Object)>("keyX");

        $i3 = interfaceinvoke $r8.<java.util.Collection: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(2, $i3);

        $r9 = interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection get(java.lang.Object)>("keyY");

        $i4 = interfaceinvoke $r9.<java.util.Collection: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(1, $i4);

        $z4 = interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: boolean containsValue(java.lang.Object)>("objectA");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(boolean,boolean)>(1, $z4);

        $z5 = interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: boolean containsValue(java.lang.Object)>("object0");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(boolean,boolean)>(1, $z5);

        $z6 = interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: boolean containsValue(java.lang.Object)>("object1");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(boolean,boolean)>(1, $z6);

        $z7 = interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: boolean containsValue(java.lang.Object)>("object2");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(boolean,boolean)>(1, $z7);

        return;
    }

    public void testPutAll_KeyIterable()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;
        org.apache.commons.collections4.MultiValuedMap r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17;
        java.lang.String[] $r3, $r8;
        java.util.Collection $r4, $r5, $r7, $r9;
        int $i0, $i1, $i2, $i3;
        java.util.ArrayList $r6;
        java.lang.NullPointerException $r10;
        java.util.List r11, r12;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: boolean isAddSupported()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap makeObject()>();

        $r3 = newarray (java.lang.String)[3];

        $r3[0] = "X";

        $r3[1] = "Y";

        $r3[2] = "Z";

        r11 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        $z1 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean putAll(java.lang.Object,java.lang.Iterable)>("A", r11);

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(boolean,boolean)>(1, $z1);

        $r4 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection get(java.lang.Object)>("A");

        $i0 = interfaceinvoke $r4.<java.util.Collection: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(3, $i0);

        $z2 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean containsMapping(java.lang.Object,java.lang.Object)>("A", "X");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(boolean,boolean)>(1, $z2);

        $z3 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean containsMapping(java.lang.Object,java.lang.Object)>("A", "Y");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(boolean,boolean)>(1, $z3);

        $z4 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean containsMapping(java.lang.Object,java.lang.Object)>("A", "Z");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(boolean,boolean)>(1, $z4);

     label2:
        interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean putAll(java.lang.Object,java.lang.Iterable)>("A", null);

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void fail(java.lang.String)>("expecting NullPointerException");

     label3:
        goto label5;

     label4:
        $r10 := @caughtexception;

     label5:
        $r5 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection get(java.lang.Object)>("A");

        $i1 = interfaceinvoke $r5.<java.util.Collection: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(3, $i1);

        $z6 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean containsMapping(java.lang.Object,java.lang.Object)>("A", "X");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(boolean,boolean)>(1, $z6);

        $z7 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean containsMapping(java.lang.Object,java.lang.Object)>("A", "Y");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(boolean,boolean)>(1, $z7);

        $z8 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean containsMapping(java.lang.Object,java.lang.Object)>("A", "Z");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(boolean,boolean)>(1, $z8);

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $z9 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean putAll(java.lang.Object,java.lang.Iterable)>("A", $r6);

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(boolean,boolean)>(0, $z9);

        $r7 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection get(java.lang.Object)>("A");

        $i2 = interfaceinvoke $r7.<java.util.Collection: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(3, $i2);

        $z10 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean containsMapping(java.lang.Object,java.lang.Object)>("A", "X");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(boolean,boolean)>(1, $z10);

        $z11 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean containsMapping(java.lang.Object,java.lang.Object)>("A", "Y");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(boolean,boolean)>(1, $z11);

        $z12 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean containsMapping(java.lang.Object,java.lang.Object)>("A", "Z");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(boolean,boolean)>(1, $z12);

        $r8 = newarray (java.lang.String)[1];

        $r8[0] = "M";

        r12 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r8);

        $z13 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean putAll(java.lang.Object,java.lang.Iterable)>("A", r12);

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(boolean,boolean)>(1, $z13);

        $r9 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection get(java.lang.Object)>("A");

        $i3 = interfaceinvoke $r9.<java.util.Collection: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(4, $i3);

        $z14 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean containsMapping(java.lang.Object,java.lang.Object)>("A", "X");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(boolean,boolean)>(1, $z14);

        $z15 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean containsMapping(java.lang.Object,java.lang.Object)>("A", "Y");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(boolean,boolean)>(1, $z15);

        $z16 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean containsMapping(java.lang.Object,java.lang.Object)>("A", "Z");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(boolean,boolean)>(1, $z16);

        $z17 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean containsMapping(java.lang.Object,java.lang.Object)>("A", "M");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(boolean,boolean)>(1, $z17);

        return;

        catch java.lang.NullPointerException from label2 to label3 with label4;
    }

    public void testRemove_KeyItem()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;
        org.apache.commons.collections4.MultiValuedMap r1;
        boolean $z0, $z1, $z5, $z6, $z7, $z8, $z9;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: boolean isRemoveSupported()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: boolean isAddSupported()>();

        if $z1 != 0 goto label2;

     label1:
        return;

     label2:
        r1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap makeObject()>();

        interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean put(java.lang.Object,java.lang.Object)>("A", "AA");

        interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean put(java.lang.Object,java.lang.Object)>("A", "AB");

        interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean put(java.lang.Object,java.lang.Object)>("A", "AC");

        $z5 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean removeMapping(java.lang.Object,java.lang.Object)>("C", "CA");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(boolean,boolean)>(0, $z5);

        $z6 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean removeMapping(java.lang.Object,java.lang.Object)>("A", "AD");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(boolean,boolean)>(0, $z6);

        $z7 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean removeMapping(java.lang.Object,java.lang.Object)>("A", "AC");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(boolean,boolean)>(1, $z7);

        $z8 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean removeMapping(java.lang.Object,java.lang.Object)>("A", "AB");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(boolean,boolean)>(1, $z8);

        $z9 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean removeMapping(java.lang.Object,java.lang.Object)>("A", "AA");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(boolean,boolean)>(1, $z9);

        return;
    }

    public void testKeysMultiSet()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;
        org.apache.commons.collections4.MultiValuedMap r1;
        org.apache.commons.collections4.MultiSet r2;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap makeFullMap()>();

        r2 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: org.apache.commons.collections4.MultiSet keys()>();

        $i0 = interfaceinvoke r2.<org.apache.commons.collections4.MultiSet: int getCount(java.lang.Object)>("one");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(2, $i0);

        $i1 = interfaceinvoke r2.<org.apache.commons.collections4.MultiSet: int getCount(java.lang.Object)>("two");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(2, $i1);

        $i2 = interfaceinvoke r2.<org.apache.commons.collections4.MultiSet: int getCount(java.lang.Object)>("three");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(2, $i2);

        $i3 = interfaceinvoke r2.<org.apache.commons.collections4.MultiSet: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(6, $i3);

        return;
    }

    public void testKeysBagIterator()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;
        org.apache.commons.collections4.MultiValuedMap r1;
        java.util.Iterator r3;
        java.util.ArrayList $r5;
        org.apache.commons.collections4.MultiSet $r6;
        boolean $z0;
        org.apache.commons.collections4.bag.HashBag $r7;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r8;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap makeFullMap()>();

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: org.apache.commons.collections4.MultiSet keys()>();

        r3 = interfaceinvoke $r6.<org.apache.commons.collections4.MultiSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r5.<java.util.Collection: boolean add(java.lang.Object)>($r8);

        goto label1;

     label2:
        $r7 = new org.apache.commons.collections4.bag.HashBag;

        specialinvoke $r7.<org.apache.commons.collections4.bag.HashBag: void <init>(java.util.Collection)>($r5);

        $i0 = interfaceinvoke $r7.<org.apache.commons.collections4.Bag: int getCount(java.lang.Object)>("one");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(2, $i0);

        $i1 = interfaceinvoke $r7.<org.apache.commons.collections4.Bag: int getCount(java.lang.Object)>("two");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(2, $i1);

        $i2 = interfaceinvoke $r7.<org.apache.commons.collections4.Bag: int getCount(java.lang.Object)>("three");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(2, $i2);

        $i3 = interfaceinvoke $r7.<org.apache.commons.collections4.Bag: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(6, $i3);

        return;
    }

    public void testKeysBagContainsAll()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;
        org.apache.commons.collections4.MultiValuedMap r1;
        org.apache.commons.collections4.MultiSet r2;
        java.util.List r3;
        java.lang.String[] $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap makeFullMap()>();

        r2 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: org.apache.commons.collections4.MultiSet keys()>();

        $r4 = newarray (java.lang.String)[6];

        $r4[0] = "one";

        $r4[1] = "two";

        $r4[2] = "three";

        $r4[3] = "one";

        $r4[4] = "two";

        $r4[5] = "three";

        r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        $z0 = interfaceinvoke r2.<org.apache.commons.collections4.MultiSet: boolean containsAll(java.util.Collection)>(r3);

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertTrue(boolean)>($z0);

        return;
    }

    public void testAsMapGet()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;
        java.util.Collection r1;
        org.apache.commons.collections4.MultiValuedMap $r2, $r4;
        java.lang.Object $r3, $r5;
        int $i0;
        boolean $z0, $z1;
        java.util.Map r6, r7;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void resetEmpty()>();

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap getMap()>();

        r6 = interfaceinvoke $r2.<org.apache.commons.collections4.MultiValuedMap: java.util.Map asMap()>();

        $r3 = interfaceinvoke r6.<java.util.Map: java.lang.Object get(java.lang.Object)>("one");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertNull(java.lang.Object)>($r3);

        $i0 = interfaceinvoke r6.<java.util.Map: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(0, $i0);

        virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void resetFull()>();

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap getMap()>();

        r7 = interfaceinvoke $r4.<org.apache.commons.collections4.MultiValuedMap: java.util.Map asMap()>();

        $r5 = interfaceinvoke r7.<java.util.Map: java.lang.Object get(java.lang.Object)>("one");

        r1 = (java.util.Collection) $r5;

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertNotNull(java.lang.Object)>(r1);

        $z0 = interfaceinvoke r1.<java.util.Collection: boolean contains(java.lang.Object)>("un");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertTrue(boolean)>($z0);

        $z1 = interfaceinvoke r1.<java.util.Collection: boolean contains(java.lang.Object)>("uno");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertTrue(boolean)>($z1);

        return;
    }

    public void testAsMapRemove()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;
        java.util.Map r1;
        boolean $z0, $z1;
        org.apache.commons.collections4.MultiValuedMap $r2, $r4, $r5;
        int $i0;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: boolean isRemoveSupported()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void resetFull()>();

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap getMap()>();

        r1 = interfaceinvoke $r2.<org.apache.commons.collections4.MultiValuedMap: java.util.Map asMap()>();

        interfaceinvoke r1.<java.util.Map: java.lang.Object remove(java.lang.Object)>("one");

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap getMap()>();

        $z1 = interfaceinvoke $r4.<org.apache.commons.collections4.MultiValuedMap: boolean containsKey(java.lang.Object)>("one");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertFalse(boolean)>($z1);

        $r5 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap getMap()>();

        $i0 = interfaceinvoke $r5.<org.apache.commons.collections4.MultiValuedMap: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(int,int)>(4, $i0);

        return;
    }

    public void testMapIterator()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;
        java.lang.Object r1, r2;
        org.apache.commons.collections4.MultiValuedMap $r3, $r4, $r5;
        boolean $z0, $z1, $z2;
        org.apache.commons.collections4.MapIterator r6, r7;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void resetEmpty()>();

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap getMap()>();

        r6 = interfaceinvoke $r3.<org.apache.commons.collections4.MultiValuedMap: org.apache.commons.collections4.MapIterator mapIterator()>();

        $z0 = interfaceinvoke r6.<org.apache.commons.collections4.MapIterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertFalse(boolean)>($z0);

        virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void resetFull()>();

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap getMap()>();

        r7 = interfaceinvoke $r4.<org.apache.commons.collections4.MultiValuedMap: org.apache.commons.collections4.MapIterator mapIterator()>();

     label1:
        $z1 = interfaceinvoke r7.<org.apache.commons.collections4.MapIterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        r1 = interfaceinvoke r7.<org.apache.commons.collections4.MapIterator: java.lang.Object next()>();

        r2 = interfaceinvoke r7.<org.apache.commons.collections4.MapIterator: java.lang.Object getValue()>();

        $r5 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap getMap()>();

        $z2 = interfaceinvoke $r5.<org.apache.commons.collections4.MultiValuedMap: boolean containsMapping(java.lang.Object,java.lang.Object)>(r1, r2);

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertTrue(boolean)>($z2);

        goto label1;

     label2:
        return;
    }

    public void testMapIteratorRemove()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;
        org.apache.commons.collections4.MapIterator r1;
        boolean $z0, $z1, $z2;
        org.apache.commons.collections4.MultiValuedMap $r2, $r3;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: boolean isRemoveSupported()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void resetFull()>();

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap getMap()>();

        r1 = interfaceinvoke $r2.<org.apache.commons.collections4.MultiValuedMap: org.apache.commons.collections4.MapIterator mapIterator()>();

     label2:
        $z1 = interfaceinvoke r1.<org.apache.commons.collections4.MapIterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        interfaceinvoke r1.<org.apache.commons.collections4.MapIterator: java.lang.Object next()>();

        interfaceinvoke r1.<org.apache.commons.collections4.MapIterator: void remove()>();

        goto label2;

     label3:
        $r3 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap getMap()>();

        $z2 = interfaceinvoke $r3.<org.apache.commons.collections4.MultiValuedMap: boolean isEmpty()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertTrue(boolean)>($z2);

        return;
    }

    public void testMapIteratorUnsupportedSet()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;
        org.apache.commons.collections4.MapIterator r1;
        org.apache.commons.collections4.MultiValuedMap $r3;
        java.lang.UnsupportedOperationException $r6;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void resetFull()>();

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap getMap()>();

        r1 = interfaceinvoke $r3.<org.apache.commons.collections4.MultiValuedMap: org.apache.commons.collections4.MapIterator mapIterator()>();

        interfaceinvoke r1.<org.apache.commons.collections4.MapIterator: java.lang.Object next()>();

     label1:
        interfaceinvoke r1.<org.apache.commons.collections4.MapIterator: java.lang.Object setValue(java.lang.Object)>("some value");

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void fail()>();

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        return;

        catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
    }

    public void testEmptyMapCompatibility() throws java.lang.Exception
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;
        org.apache.commons.collections4.MultiValuedMap r1, r2;
        java.lang.String $r3;
        java.lang.Object $r4;
        int $i0;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap makeObject()>();

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: java.lang.String getCanonicalEmptyCollectionName(java.lang.Object)>(r1);

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: java.lang.Object readExternalFormFromDisk(java.lang.String)>($r3);

        r2 = (org.apache.commons.collections4.MultiValuedMap) $r4;

        $i0 = interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(java.lang.String,int,int)>("Map is empty", 0, $i0);

        return;
    }

    public void testFullMapCompatibility() throws java.lang.Exception
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;
        org.apache.commons.collections4.MultiValuedMap r1, r2;
        java.util.Iterator r3;
        java.lang.Object r4, $r6;
        java.lang.String $r5;
        int $i0, $i1, $i2;
        java.util.Set $r7;
        boolean $z0, $z1, $z2, $z3;
        java.util.Collection $r8, $r9;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap makeFullMap()>();

        $r5 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: java.lang.String getCanonicalFullCollectionName(java.lang.Object)>(r1);

        $r6 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: java.lang.Object readExternalFormFromDisk(java.lang.String)>($r5);

        r2 = (org.apache.commons.collections4.MultiValuedMap) $r6;

        $i0 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: int size()>();

        $i1 = interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(java.lang.String,int,int)>("Map is the right size", $i0, $i1);

        $r7 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: java.util.Set keySet()>();

        r3 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r8 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection get(java.lang.Object)>(r4);

        $r9 = interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection get(java.lang.Object)>(r4);

        $z2 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isEqualCollection(java.util.Collection,java.util.Collection)>($r8, $r9);

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertTrue(java.lang.String,boolean)>("Map had inequal elements", $z2);

        $z3 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: boolean isRemoveSupported()>();

        if $z3 == 0 goto label2;

        interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection remove(java.lang.Object)>(r4);

     label2:
        goto label1;

     label3:
        $z1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: boolean isRemoveSupported()>();

        if $z1 == 0 goto label4;

        $i2 = interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void assertEquals(java.lang.String,int,int)>("Map had extra values", 0, $i2);

     label4:
        return;
    }

    public org.apache.commons.collections4.BulkTest bulkTestMultiValuedMapEntries()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest$TestMultiValuedMapEntries $r1;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        $r1 = new org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest$TestMultiValuedMapEntries;

        specialinvoke $r1.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest$TestMultiValuedMapEntries: void <init>(org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest)>(r0);

        return $r1;
    }

    public org.apache.commons.collections4.BulkTest bulkTestMultiValuedMapKeySet()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest$TestMultiValuedMapKeySet $r1;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        $r1 = new org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest$TestMultiValuedMapKeySet;

        specialinvoke $r1.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest$TestMultiValuedMapKeySet: void <init>(org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest)>(r0);

        return $r1;
    }

    public org.apache.commons.collections4.BulkTest bulkTestMultiValuedMapValues()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest$TestMultiValuedMapValues $r1;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        $r1 = new org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest$TestMultiValuedMapValues;

        specialinvoke $r1.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest$TestMultiValuedMapValues: void <init>(org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest)>(r0);

        return $r1;
    }

    public org.apache.commons.collections4.BulkTest bulkTestMultiValuedMapKeys()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest$TestMultiValuedMapKeys $r1;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        $r1 = new org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest$TestMultiValuedMapKeys;

        specialinvoke $r1.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest$TestMultiValuedMapKeys: void <init>(org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest)>(r0);

        return $r1;
    }

    public org.apache.commons.collections4.BulkTest bulkTestAsMap()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest$TestMultiValuedMapAsMap $r1;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        $r1 = new org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest$TestMultiValuedMapAsMap;

        specialinvoke $r1.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest$TestMultiValuedMapAsMap: void <init>(org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest)>(r0);

        return $r1;
    }

    public volatile java.lang.Object makeObject()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest r0;
        org.apache.commons.collections4.MultiValuedMap $r1;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap makeObject()>();

        return $r1;
    }
}
