public class org.apache.commons.collections4.comparators.ComparatorChainTest extends org.apache.commons.collections4.comparators.AbstractComparatorTest
{

    public void <init>(java.lang.String)
    {
        org.apache.commons.collections4.comparators.ComparatorChainTest r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.collections4.comparators.ComparatorChainTest;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.collections4.comparators.AbstractComparatorTest: void <init>(java.lang.String)>(r1);

        return;
    }

    public java.util.Comparator makeObject()
    {
        org.apache.commons.collections4.comparators.ComparatorChainTest r0;
        org.apache.commons.collections4.comparators.ComparatorChain $r2;
        org.apache.commons.collections4.comparators.ComparatorChainTest$ColumnComparator $r3, $r4, $r5;

        r0 := @this: org.apache.commons.collections4.comparators.ComparatorChainTest;

        $r2 = new org.apache.commons.collections4.comparators.ComparatorChain;

        $r3 = new org.apache.commons.collections4.comparators.ComparatorChainTest$ColumnComparator;

        specialinvoke $r3.<org.apache.commons.collections4.comparators.ComparatorChainTest$ColumnComparator: void <init>(int)>(0);

        specialinvoke $r2.<org.apache.commons.collections4.comparators.ComparatorChain: void <init>(java.util.Comparator)>($r3);

        $r4 = new org.apache.commons.collections4.comparators.ComparatorChainTest$ColumnComparator;

        specialinvoke $r4.<org.apache.commons.collections4.comparators.ComparatorChainTest$ColumnComparator: void <init>(int)>(1);

        virtualinvoke $r2.<org.apache.commons.collections4.comparators.ComparatorChain: void addComparator(java.util.Comparator,boolean)>($r4, 1);

        $r5 = new org.apache.commons.collections4.comparators.ComparatorChainTest$ColumnComparator;

        specialinvoke $r5.<org.apache.commons.collections4.comparators.ComparatorChainTest$ColumnComparator: void <init>(int)>(2);

        virtualinvoke $r2.<org.apache.commons.collections4.comparators.ComparatorChain: void addComparator(java.util.Comparator,boolean)>($r5, 0);

        return $r2;
    }

    public java.lang.String getCompatibilityVersion()
    {
        org.apache.commons.collections4.comparators.ComparatorChainTest r0;

        r0 := @this: org.apache.commons.collections4.comparators.ComparatorChainTest;

        return "4";
    }

    public void testNoopComparatorChain()
    {
        org.apache.commons.collections4.comparators.ComparatorChainTest r0;
        java.lang.Integer r2, r3;
        int i0, $i1;
        org.apache.commons.collections4.comparators.ComparatorChain $r4;
        org.apache.commons.collections4.comparators.ComparableComparator $r5;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.comparators.ComparatorChainTest;

        $r4 = new org.apache.commons.collections4.comparators.ComparatorChain;

        specialinvoke $r4.<org.apache.commons.collections4.comparators.ComparatorChain: void <init>()>();

        r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        $r5 = new org.apache.commons.collections4.comparators.ComparableComparator;

        specialinvoke $r5.<org.apache.commons.collections4.comparators.ComparableComparator: void <init>()>();

        virtualinvoke $r4.<org.apache.commons.collections4.comparators.ComparatorChain: void addComparator(java.util.Comparator)>($r5);

        i0 = virtualinvoke r2.<java.lang.Integer: int compareTo(java.lang.Integer)>(r3);

        $i1 = virtualinvoke $r4.<org.apache.commons.collections4.comparators.ComparatorChain: int compare(java.lang.Object,java.lang.Object)>(r2, r3);

        if $i1 != i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.collections4.comparators.ComparatorChainTest: void assertTrue(java.lang.String,boolean)>("Comparison returns the right order", $z0);

        return;
    }

    public void testBadNoopComparatorChain()
    {
        org.apache.commons.collections4.comparators.ComparatorChainTest r0;
        java.lang.Integer r2, r3;
        org.apache.commons.collections4.comparators.ComparatorChain $r5;
        java.lang.UnsupportedOperationException $r6;

        r0 := @this: org.apache.commons.collections4.comparators.ComparatorChainTest;

        $r5 = new org.apache.commons.collections4.comparators.ComparatorChain;

        specialinvoke $r5.<org.apache.commons.collections4.comparators.ComparatorChain: void <init>()>();

        r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

     label1:
        virtualinvoke $r5.<org.apache.commons.collections4.comparators.ComparatorChain: int compare(java.lang.Object,java.lang.Object)>(r2, r3);

        staticinvoke <org.apache.commons.collections4.comparators.ComparatorChainTest: void fail(java.lang.String)>("An exception should be thrown when a chain contains zero comparators.");

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        return;

        catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
    }

    public void testListComparatorChain()
    {
        org.apache.commons.collections4.comparators.ComparatorChainTest r0;
        java.lang.Integer r3, r4;
        int i0, $i1;
        java.util.LinkedList $r5;
        org.apache.commons.collections4.comparators.ComparableComparator $r6;
        org.apache.commons.collections4.comparators.ComparatorChain $r7;
        boolean $z1;

        r0 := @this: org.apache.commons.collections4.comparators.ComparatorChainTest;

        $r5 = new java.util.LinkedList;

        specialinvoke $r5.<java.util.LinkedList: void <init>()>();

        $r6 = new org.apache.commons.collections4.comparators.ComparableComparator;

        specialinvoke $r6.<org.apache.commons.collections4.comparators.ComparableComparator: void <init>()>();

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r6);

        $r7 = new org.apache.commons.collections4.comparators.ComparatorChain;

        specialinvoke $r7.<org.apache.commons.collections4.comparators.ComparatorChain: void <init>(java.util.List)>($r5);

        r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        i0 = virtualinvoke r3.<java.lang.Integer: int compareTo(java.lang.Integer)>(r4);

        $i1 = virtualinvoke $r7.<org.apache.commons.collections4.comparators.ComparatorChain: int compare(java.lang.Object,java.lang.Object)>(r3, r4);

        if $i1 != i0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.apache.commons.collections4.comparators.ComparatorChainTest: void assertTrue(java.lang.String,boolean)>("Comparison returns the right order", $z1);

        return;
    }

    public void testBadListComparatorChain()
    {
        org.apache.commons.collections4.comparators.ComparatorChainTest r0;
        java.lang.Integer r3, r4;
        java.util.LinkedList $r6;
        org.apache.commons.collections4.comparators.ComparatorChain $r7;
        java.lang.UnsupportedOperationException $r8;

        r0 := @this: org.apache.commons.collections4.comparators.ComparatorChainTest;

        $r6 = new java.util.LinkedList;

        specialinvoke $r6.<java.util.LinkedList: void <init>()>();

        $r7 = new org.apache.commons.collections4.comparators.ComparatorChain;

        specialinvoke $r7.<org.apache.commons.collections4.comparators.ComparatorChain: void <init>(java.util.List)>($r6);

        r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

     label1:
        virtualinvoke $r7.<org.apache.commons.collections4.comparators.ComparatorChain: int compare(java.lang.Object,java.lang.Object)>(r3, r4);

        staticinvoke <org.apache.commons.collections4.comparators.ComparatorChainTest: void fail(java.lang.String)>("An exception should be thrown when a chain contains zero comparators.");

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

     label4:
        return;

        catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
    }

    public void testComparatorChainOnMinvaluedCompatator()
    {
        org.apache.commons.collections4.comparators.ComparatorChainTest r0;
        org.apache.commons.collections4.comparators.ComparatorChain $r2;
        org.apache.commons.collections4.comparators.ComparatorChainTest$1 $r3;
        java.lang.Integer $r4, $r5, $r6, $r7, $r8, $r9;
        int $i0, $i1, $i2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.commons.collections4.comparators.ComparatorChainTest;

        $r2 = new org.apache.commons.collections4.comparators.ComparatorChain;

        specialinvoke $r2.<org.apache.commons.collections4.comparators.ComparatorChain: void <init>()>();

        $r3 = new org.apache.commons.collections4.comparators.ComparatorChainTest$1;

        specialinvoke $r3.<org.apache.commons.collections4.comparators.ComparatorChainTest$1: void <init>(org.apache.commons.collections4.comparators.ComparatorChainTest)>(r0);

        virtualinvoke $r2.<org.apache.commons.collections4.comparators.ComparatorChain: void addComparator(java.util.Comparator,boolean)>($r3, 1);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $i0 = virtualinvoke $r2.<org.apache.commons.collections4.comparators.ComparatorChain: int compare(java.lang.Object,java.lang.Object)>($r4, $r5);

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.collections4.comparators.ComparatorChainTest: void assertTrue(boolean)>($z0);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $i1 = virtualinvoke $r2.<org.apache.commons.collections4.comparators.ComparatorChain: int compare(java.lang.Object,java.lang.Object)>($r6, $r7);

        if $i1 >= 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <org.apache.commons.collections4.comparators.ComparatorChainTest: void assertTrue(boolean)>($z1);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $i2 = virtualinvoke $r2.<org.apache.commons.collections4.comparators.ComparatorChain: int compare(java.lang.Object,java.lang.Object)>($r8, $r9);

        if $i2 != 0 goto label5;

        $z2 = 1;

        goto label6;

     label5:
        $z2 = 0;

     label6:
        staticinvoke <org.apache.commons.collections4.comparators.ComparatorChainTest: void assertTrue(boolean)>($z2);

        return;
    }

    public java.util.List getComparableObjectsOrdered()
    {
        org.apache.commons.collections4.comparators.ComparatorChainTest r0;
        java.util.LinkedList $r2;
        org.apache.commons.collections4.comparators.ComparatorChainTest$PseudoRow $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        r0 := @this: org.apache.commons.collections4.comparators.ComparatorChainTest;

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        $r3 = new org.apache.commons.collections4.comparators.ComparatorChainTest$PseudoRow;

        specialinvoke $r3.<org.apache.commons.collections4.comparators.ComparatorChainTest$PseudoRow: void <init>(int,int,int)>(1, 2, 3);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r3);

        $r4 = new org.apache.commons.collections4.comparators.ComparatorChainTest$PseudoRow;

        specialinvoke $r4.<org.apache.commons.collections4.comparators.ComparatorChainTest$PseudoRow: void <init>(int,int,int)>(2, 3, 5);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r4);

        $r5 = new org.apache.commons.collections4.comparators.ComparatorChainTest$PseudoRow;

        specialinvoke $r5.<org.apache.commons.collections4.comparators.ComparatorChainTest$PseudoRow: void <init>(int,int,int)>(2, 2, 4);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r5);

        $r6 = new org.apache.commons.collections4.comparators.ComparatorChainTest$PseudoRow;

        specialinvoke $r6.<org.apache.commons.collections4.comparators.ComparatorChainTest$PseudoRow: void <init>(int,int,int)>(2, 2, 8);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r6);

        $r7 = new org.apache.commons.collections4.comparators.ComparatorChainTest$PseudoRow;

        specialinvoke $r7.<org.apache.commons.collections4.comparators.ComparatorChainTest$PseudoRow: void <init>(int,int,int)>(3, 1, 0);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r7);

        $r8 = new org.apache.commons.collections4.comparators.ComparatorChainTest$PseudoRow;

        specialinvoke $r8.<org.apache.commons.collections4.comparators.ComparatorChainTest$PseudoRow: void <init>(int,int,int)>(4, 4, 4);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r8);

        $r9 = new org.apache.commons.collections4.comparators.ComparatorChainTest$PseudoRow;

        specialinvoke $r9.<org.apache.commons.collections4.comparators.ComparatorChainTest$PseudoRow: void <init>(int,int,int)>(4, 4, 7);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r9);

        return $r2;
    }

    public volatile java.lang.Object makeObject()
    {
        org.apache.commons.collections4.comparators.ComparatorChainTest r0;
        java.util.Comparator $r1;

        r0 := @this: org.apache.commons.collections4.comparators.ComparatorChainTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.comparators.ComparatorChainTest: java.util.Comparator makeObject()>();

        return $r1;
    }
}
