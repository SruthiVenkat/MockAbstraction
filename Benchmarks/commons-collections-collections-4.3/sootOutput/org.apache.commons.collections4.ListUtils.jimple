public class org.apache.commons.collections4.ListUtils extends java.lang.Object
{

    private void <init>()
    {
        org.apache.commons.collections4.ListUtils r0;

        r0 := @this: org.apache.commons.collections4.ListUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.List emptyIfNull(java.util.List)
    {
        java.util.List r0, $r1;

        r0 := @parameter0: java.util.List;

        if r0 != null goto label1;

        $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        goto label2;

     label1:
        $r1 = r0;

     label2:
        return $r1;
    }

    public static java.util.List defaultIfNull(java.util.List, java.util.List)
    {
        java.util.List r0, r1, $r2;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        if r0 != null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r2 = r0;

     label2:
        return $r2;
    }

    public static java.util.List intersection(java.util.List, java.util.List)
    {
        java.util.List r0, r1, r8, r9;
        java.util.Iterator r4;
        java.lang.Object r5;
        java.util.ArrayList $r6;
        int $i0, $i1;
        java.util.HashSet $r7;
        boolean $z0, $z3;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r8 = r0;

        r9 = r1;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 <= $i1 goto label1;

        r8 = r1;

        r9 = r0;

     label1:
        $r7 = new java.util.HashSet;

        specialinvoke $r7.<java.util.HashSet: void <init>(java.util.Collection)>(r8);

        r4 = interfaceinvoke r9.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label4;

        r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $z0 = virtualinvoke $r7.<java.util.HashSet: boolean contains(java.lang.Object)>(r5);

        if $z0 == 0 goto label3;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r5);

        virtualinvoke $r7.<java.util.HashSet: boolean remove(java.lang.Object)>(r5);

     label3:
        goto label2;

     label4:
        return $r6;
    }

    public static java.util.List subtract(java.util.List, java.util.List)
    {
        java.util.List r0, r1;
        java.util.Iterator r4;
        java.lang.Object r5;
        java.util.ArrayList $r6;
        org.apache.commons.collections4.bag.HashBag $r7;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $r7 = new org.apache.commons.collections4.bag.HashBag;

        specialinvoke $r7.<org.apache.commons.collections4.bag.HashBag: void <init>(java.util.Collection)>(r1);

        r4 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $z1 = virtualinvoke $r7.<org.apache.commons.collections4.bag.HashBag: boolean remove(java.lang.Object,int)>(r5, 1);

        if $z1 != 0 goto label2;

        virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>(r5);

     label2:
        goto label1;

     label3:
        return $r6;
    }

    public static java.util.List sum(java.util.List, java.util.List)
    {
        java.util.List r0, r1, $r2, $r3, $r4;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        $r2 = staticinvoke <org.apache.commons.collections4.ListUtils: java.util.List union(java.util.List,java.util.List)>(r0, r1);

        $r3 = staticinvoke <org.apache.commons.collections4.ListUtils: java.util.List intersection(java.util.List,java.util.List)>(r0, r1);

        $r4 = staticinvoke <org.apache.commons.collections4.ListUtils: java.util.List subtract(java.util.List,java.util.List)>($r2, $r3);

        return $r4;
    }

    public static java.util.List union(java.util.List, java.util.List)
    {
        java.util.List r0, r1;
        java.util.ArrayList $r3;
        int $i0, $i1, $i2;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        $r3 = new java.util.ArrayList;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        $i2 = $i0 + $i1;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>($i2);

        virtualinvoke $r3.<java.util.ArrayList: boolean addAll(java.util.Collection)>(r0);

        virtualinvoke $r3.<java.util.ArrayList: boolean addAll(java.util.Collection)>(r1);

        return $r3;
    }

    public static java.util.List select(java.util.Collection, org.apache.commons.collections4.Predicate)
    {
        java.util.Collection r0, $r3;
        org.apache.commons.collections4.Predicate r1;
        java.util.ArrayList $r2;
        int $i0;
        java.util.List $r4;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: org.apache.commons.collections4.Predicate;

        $r2 = new java.util.ArrayList;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i0);

        $r3 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection select(java.lang.Iterable,org.apache.commons.collections4.Predicate,java.util.Collection)>(r0, r1, $r2);

        $r4 = (java.util.List) $r3;

        return $r4;
    }

    public static java.util.List selectRejected(java.util.Collection, org.apache.commons.collections4.Predicate)
    {
        java.util.Collection r0, $r3;
        org.apache.commons.collections4.Predicate r1;
        java.util.ArrayList $r2;
        int $i0;
        java.util.List $r4;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: org.apache.commons.collections4.Predicate;

        $r2 = new java.util.ArrayList;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i0);

        $r3 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection selectRejected(java.lang.Iterable,org.apache.commons.collections4.Predicate,java.util.Collection)>(r0, r1, $r2);

        $r4 = (java.util.List) $r3;

        return $r4;
    }

    public static boolean isEqualList(java.util.Collection, java.util.Collection)
    {
        java.util.Collection r0, r1;
        java.util.Iterator r2, r3;
        int $i0, $i1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Object r4, r5;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.util.Collection;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r0 == null goto label2;

        if r1 == null goto label2;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        $i1 = interfaceinvoke r1.<java.util.Collection: int size()>();

        if $i0 == $i1 goto label3;

     label2:
        return 0;

     label3:
        r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

        r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z4 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label7;

        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label7;

        r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        if r4 != null goto label5;

        if r5 != null goto label6;

        goto label4;

     label5:
        $z3 = virtualinvoke r4.<java.lang.Object: boolean equals(java.lang.Object)>(r5);

        if $z3 != 0 goto label4;

     label6:
        return 0;

     label7:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label8;

        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label8;

        $z5 = 1;

        goto label9;

     label8:
        $z5 = 0;

     label9:
        return $z5;
    }

    public static int hashCodeForList(java.util.Collection)
    {
        java.util.Collection r0;
        java.util.Iterator r1;
        java.lang.Object r2;
        boolean $z0;
        int $i0, i1, $i2;

        r0 := @parameter0: java.util.Collection;

        if r0 != null goto label1;

        return 0;

     label1:
        i1 = 1;

        r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $i0 = 31 * i1;

        if r2 != null goto label3;

        $i2 = 0;

        goto label4;

     label3:
        $i2 = virtualinvoke r2.<java.lang.Object: int hashCode()>();

     label4:
        i1 = $i0 + $i2;

        goto label2;

     label5:
        return i1;
    }

    public static java.util.List retainAll(java.util.Collection, java.util.Collection)
    {
        java.util.Collection r0, r1;
        java.util.Iterator r3;
        java.lang.Object r4;
        java.util.ArrayList $r5;
        int $i0, $i1, $i2;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.util.Collection;

        $r5 = new java.util.ArrayList;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        $i1 = interfaceinvoke r1.<java.util.Collection: int size()>();

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>($i2);

        r3 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $z1 = interfaceinvoke r1.<java.util.Collection: boolean contains(java.lang.Object)>(r4);

        if $z1 == 0 goto label2;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r4);

     label2:
        goto label1;

     label3:
        return $r5;
    }

    public static java.util.List removeAll(java.util.Collection, java.util.Collection)
    {
        java.util.Collection r0, r1;
        java.util.Iterator r3;
        java.lang.Object r4;
        java.util.ArrayList $r5;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.util.Collection;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r3 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $z1 = interfaceinvoke r1.<java.util.Collection: boolean contains(java.lang.Object)>(r4);

        if $z1 != 0 goto label2;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r4);

     label2:
        goto label1;

     label3:
        return $r5;
    }

    public static java.util.List synchronizedList(java.util.List)
    {
        java.util.List r0, $r1;

        r0 := @parameter0: java.util.List;

        $r1 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>(r0);

        return $r1;
    }

    public static java.util.List unmodifiableList(java.util.List)
    {
        java.util.List r0, $r1;

        r0 := @parameter0: java.util.List;

        $r1 = staticinvoke <org.apache.commons.collections4.list.UnmodifiableList: java.util.List unmodifiableList(java.util.List)>(r0);

        return $r1;
    }

    public static java.util.List predicatedList(java.util.List, org.apache.commons.collections4.Predicate)
    {
        java.util.List r0;
        org.apache.commons.collections4.Predicate r1;
        org.apache.commons.collections4.list.PredicatedList $r2;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: org.apache.commons.collections4.Predicate;

        $r2 = staticinvoke <org.apache.commons.collections4.list.PredicatedList: org.apache.commons.collections4.list.PredicatedList predicatedList(java.util.List,org.apache.commons.collections4.Predicate)>(r0, r1);

        return $r2;
    }

    public static java.util.List transformedList(java.util.List, org.apache.commons.collections4.Transformer)
    {
        java.util.List r0;
        org.apache.commons.collections4.Transformer r1;
        org.apache.commons.collections4.list.TransformedList $r2;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: org.apache.commons.collections4.Transformer;

        $r2 = staticinvoke <org.apache.commons.collections4.list.TransformedList: org.apache.commons.collections4.list.TransformedList transformingList(java.util.List,org.apache.commons.collections4.Transformer)>(r0, r1);

        return $r2;
    }

    public static java.util.List lazyList(java.util.List, org.apache.commons.collections4.Factory)
    {
        java.util.List r0;
        org.apache.commons.collections4.Factory r1;
        org.apache.commons.collections4.list.LazyList $r2;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: org.apache.commons.collections4.Factory;

        $r2 = staticinvoke <org.apache.commons.collections4.list.LazyList: org.apache.commons.collections4.list.LazyList lazyList(java.util.List,org.apache.commons.collections4.Factory)>(r0, r1);

        return $r2;
    }

    public static java.util.List fixedSizeList(java.util.List)
    {
        java.util.List r0;
        org.apache.commons.collections4.list.FixedSizeList $r1;

        r0 := @parameter0: java.util.List;

        $r1 = staticinvoke <org.apache.commons.collections4.list.FixedSizeList: org.apache.commons.collections4.list.FixedSizeList fixedSizeList(java.util.List)>(r0);

        return $r1;
    }

    public static int indexOf(java.util.List, org.apache.commons.collections4.Predicate)
    {
        java.util.List r0;
        org.apache.commons.collections4.Predicate r1;
        java.lang.Object r2;
        int $i0, i1;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: org.apache.commons.collections4.Predicate;

        if r0 == null goto label3;

        if r1 == null goto label3;

        i1 = 0;

     label1:
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if i1 >= $i0 goto label3;

        r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1);

        $z0 = interfaceinvoke r1.<org.apache.commons.collections4.Predicate: boolean evaluate(java.lang.Object)>(r2);

        if $z0 == 0 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return -1;
    }

    public static java.util.List longestCommonSubsequence(java.util.List, java.util.List)
    {
        java.util.List r0, r1, $r3;
        org.apache.commons.collections4.functors.DefaultEquator $r2;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        $r2 = staticinvoke <org.apache.commons.collections4.functors.DefaultEquator: org.apache.commons.collections4.functors.DefaultEquator defaultEquator()>();

        $r3 = staticinvoke <org.apache.commons.collections4.ListUtils: java.util.List longestCommonSubsequence(java.util.List,java.util.List,org.apache.commons.collections4.Equator)>(r0, r1, $r2);

        return $r3;
    }

    public static java.util.List longestCommonSubsequence(java.util.List, java.util.List, org.apache.commons.collections4.Equator)
    {
        java.util.List r0, r1, $r9;
        org.apache.commons.collections4.Equator r2;
        org.apache.commons.collections4.sequence.EditScript r4;
        java.lang.NullPointerException $r6, $r10;
        org.apache.commons.collections4.sequence.SequencesComparator $r7;
        org.apache.commons.collections4.ListUtils$LcsVisitor $r8;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: org.apache.commons.collections4.Equator;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("List must not be null");

        throw $r6;

     label2:
        if r2 != null goto label3;

        $r10 = new java.lang.NullPointerException;

        specialinvoke $r10.<java.lang.NullPointerException: void <init>(java.lang.String)>("Equator must not be null");

        throw $r10;

     label3:
        $r7 = new org.apache.commons.collections4.sequence.SequencesComparator;

        specialinvoke $r7.<org.apache.commons.collections4.sequence.SequencesComparator: void <init>(java.util.List,java.util.List,org.apache.commons.collections4.Equator)>(r0, r1, r2);

        r4 = virtualinvoke $r7.<org.apache.commons.collections4.sequence.SequencesComparator: org.apache.commons.collections4.sequence.EditScript getScript()>();

        $r8 = new org.apache.commons.collections4.ListUtils$LcsVisitor;

        specialinvoke $r8.<org.apache.commons.collections4.ListUtils$LcsVisitor: void <init>()>();

        virtualinvoke r4.<org.apache.commons.collections4.sequence.EditScript: void visit(org.apache.commons.collections4.sequence.CommandVisitor)>($r8);

        $r9 = virtualinvoke $r8.<org.apache.commons.collections4.ListUtils$LcsVisitor: java.util.List getSubSequence()>();

        return $r9;
    }

    public static java.lang.String longestCommonSubsequence(java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence r0, r1;
        java.util.List r2;
        java.util.Iterator r4;
        java.lang.Character r5;
        java.lang.NullPointerException $r6;
        org.apache.commons.collections4.ListUtils$CharSequenceAsList $r7, $r8;
        java.lang.StringBuilder $r9;
        boolean $z0;
        java.lang.String $r10;
        java.lang.Object $r11;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("CharSequence must not be null");

        throw $r6;

     label2:
        $r7 = new org.apache.commons.collections4.ListUtils$CharSequenceAsList;

        specialinvoke $r7.<org.apache.commons.collections4.ListUtils$CharSequenceAsList: void <init>(java.lang.CharSequence)>(r0);

        $r8 = new org.apache.commons.collections4.ListUtils$CharSequenceAsList;

        specialinvoke $r8.<org.apache.commons.collections4.ListUtils$CharSequenceAsList: void <init>(java.lang.CharSequence)>(r1);

        r2 = staticinvoke <org.apache.commons.collections4.ListUtils: java.util.List longestCommonSubsequence(java.util.List,java.util.List)>($r7, $r8);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        r4 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r11 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.Character) $r11;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        goto label3;

     label4:
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    public static java.util.List partition(java.util.List, int)
    {
        java.util.List r0;
        int i0;
        org.apache.commons.collections4.ListUtils$Partition $r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.NullPointerException $r3;

        r0 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("List must not be null");

        throw $r3;

     label1:
        if i0 > 0 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Size must be greater than 0");

        throw $r2;

     label2:
        $r1 = new org.apache.commons.collections4.ListUtils$Partition;

        specialinvoke $r1.<org.apache.commons.collections4.ListUtils$Partition: void <init>(java.util.List,int,org.apache.commons.collections4.ListUtils$1)>(r0, i0, null);

        return $r1;
    }
}
