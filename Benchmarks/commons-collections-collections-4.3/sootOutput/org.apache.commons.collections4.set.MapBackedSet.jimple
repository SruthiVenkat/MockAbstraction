public final class org.apache.commons.collections4.set.MapBackedSet extends java.lang.Object implements java.util.Set, java.io.Serializable
{
    private static final long serialVersionUID;
    private final java.util.Map map;
    private final java.lang.Object dummyValue;

    public static org.apache.commons.collections4.set.MapBackedSet mapBackedSet(java.util.Map)
    {
        java.util.Map r0;
        org.apache.commons.collections4.set.MapBackedSet $r1;

        r0 := @parameter0: java.util.Map;

        $r1 = staticinvoke <org.apache.commons.collections4.set.MapBackedSet: org.apache.commons.collections4.set.MapBackedSet mapBackedSet(java.util.Map,java.lang.Object)>(r0, null);

        return $r1;
    }

    public static org.apache.commons.collections4.set.MapBackedSet mapBackedSet(java.util.Map, java.lang.Object)
    {
        java.util.Map r0;
        java.lang.Object r1;
        org.apache.commons.collections4.set.MapBackedSet $r2;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        $r2 = new org.apache.commons.collections4.set.MapBackedSet;

        specialinvoke $r2.<org.apache.commons.collections4.set.MapBackedSet: void <init>(java.util.Map,java.lang.Object)>(r0, r1);

        return $r2;
    }

    private void <init>(java.util.Map, java.lang.Object)
    {
        org.apache.commons.collections4.set.MapBackedSet r0;
        java.util.Map r1;
        java.lang.Object r2;
        java.lang.NullPointerException $r3;

        r0 := @this: org.apache.commons.collections4.set.MapBackedSet;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("The map must not be null");

        throw $r3;

     label1:
        r0.<org.apache.commons.collections4.set.MapBackedSet: java.util.Map map> = r1;

        r0.<org.apache.commons.collections4.set.MapBackedSet: java.lang.Object dummyValue> = r2;

        return;
    }

    public int size()
    {
        org.apache.commons.collections4.set.MapBackedSet r0;
        java.util.Map $r1;
        int $i0;

        r0 := @this: org.apache.commons.collections4.set.MapBackedSet;

        $r1 = r0.<org.apache.commons.collections4.set.MapBackedSet: java.util.Map map>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }

    public boolean isEmpty()
    {
        org.apache.commons.collections4.set.MapBackedSet r0;
        java.util.Map $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.set.MapBackedSet;

        $r1 = r0.<org.apache.commons.collections4.set.MapBackedSet: java.util.Map map>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        return $z0;
    }

    public java.util.Iterator iterator()
    {
        org.apache.commons.collections4.set.MapBackedSet r0;
        java.util.Map $r1;
        java.util.Set $r2;
        java.util.Iterator $r3;

        r0 := @this: org.apache.commons.collections4.set.MapBackedSet;

        $r1 = r0.<org.apache.commons.collections4.set.MapBackedSet: java.util.Map map>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        return $r3;
    }

    public boolean contains(java.lang.Object)
    {
        org.apache.commons.collections4.set.MapBackedSet r0;
        java.lang.Object r1;
        java.util.Map $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.set.MapBackedSet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.commons.collections4.set.MapBackedSet: java.util.Map map>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean containsAll(java.util.Collection)
    {
        org.apache.commons.collections4.set.MapBackedSet r0;
        java.util.Collection r1;
        java.util.Map $r2;
        java.util.Set $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.set.MapBackedSet;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<org.apache.commons.collections4.set.MapBackedSet: java.util.Map map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean containsAll(java.util.Collection)>(r1);

        return $z0;
    }

    public boolean add(java.lang.Object)
    {
        org.apache.commons.collections4.set.MapBackedSet r0;
        java.lang.Object r1, $r3;
        int i0, $i1;
        java.util.Map $r2, $r4, $r6;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.set.MapBackedSet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.commons.collections4.set.MapBackedSet: java.util.Map map>;

        i0 = interfaceinvoke $r2.<java.util.Map: int size()>();

        $r4 = r0.<org.apache.commons.collections4.set.MapBackedSet: java.util.Map map>;

        $r3 = r0.<org.apache.commons.collections4.set.MapBackedSet: java.lang.Object dummyValue>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3);

        $r6 = r0.<org.apache.commons.collections4.set.MapBackedSet: java.util.Map map>;

        $i1 = interfaceinvoke $r6.<java.util.Map: int size()>();

        if $i1 == i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean addAll(java.util.Collection)
    {
        org.apache.commons.collections4.set.MapBackedSet r0;
        java.util.Collection r1;
        int i0, $i1;
        java.util.Iterator r2;
        java.lang.Object r3, $r6;
        java.util.Map $r4, $r5, $r7;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.collections4.set.MapBackedSet;

        r1 := @parameter0: java.util.Collection;

        $r4 = r0.<org.apache.commons.collections4.set.MapBackedSet: java.util.Map map>;

        i0 = interfaceinvoke $r4.<java.util.Map: int size()>();

        r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r7 = r0.<org.apache.commons.collections4.set.MapBackedSet: java.util.Map map>;

        $r6 = r0.<org.apache.commons.collections4.set.MapBackedSet: java.lang.Object dummyValue>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r6);

        goto label1;

     label2:
        $r5 = r0.<org.apache.commons.collections4.set.MapBackedSet: java.util.Map map>;

        $i1 = interfaceinvoke $r5.<java.util.Map: int size()>();

        if $i1 == i0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    public boolean remove(java.lang.Object)
    {
        org.apache.commons.collections4.set.MapBackedSet r0;
        java.lang.Object r1;
        int i0, $i1;
        java.util.Map $r2, $r3, $r5;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.set.MapBackedSet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.commons.collections4.set.MapBackedSet: java.util.Map map>;

        i0 = interfaceinvoke $r2.<java.util.Map: int size()>();

        $r3 = r0.<org.apache.commons.collections4.set.MapBackedSet: java.util.Map map>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        $r5 = r0.<org.apache.commons.collections4.set.MapBackedSet: java.util.Map map>;

        $i1 = interfaceinvoke $r5.<java.util.Map: int size()>();

        if $i1 == i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean removeAll(java.util.Collection)
    {
        org.apache.commons.collections4.set.MapBackedSet r0;
        java.util.Collection r1;
        java.util.Map $r2;
        java.util.Set $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.set.MapBackedSet;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<org.apache.commons.collections4.set.MapBackedSet: java.util.Map map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean removeAll(java.util.Collection)>(r1);

        return $z0;
    }

    public boolean retainAll(java.util.Collection)
    {
        org.apache.commons.collections4.set.MapBackedSet r0;
        java.util.Collection r1;
        java.util.Map $r2;
        java.util.Set $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.set.MapBackedSet;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<org.apache.commons.collections4.set.MapBackedSet: java.util.Map map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean retainAll(java.util.Collection)>(r1);

        return $z0;
    }

    public void clear()
    {
        org.apache.commons.collections4.set.MapBackedSet r0;
        java.util.Map $r1;

        r0 := @this: org.apache.commons.collections4.set.MapBackedSet;

        $r1 = r0.<org.apache.commons.collections4.set.MapBackedSet: java.util.Map map>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        return;
    }

    public java.lang.Object[] toArray()
    {
        org.apache.commons.collections4.set.MapBackedSet r0;
        java.util.Map $r1;
        java.util.Set $r2;
        java.lang.Object[] $r3;

        r0 := @this: org.apache.commons.collections4.set.MapBackedSet;

        $r1 = r0.<org.apache.commons.collections4.set.MapBackedSet: java.util.Map map>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.lang.Object[] toArray()>();

        return $r3;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        org.apache.commons.collections4.set.MapBackedSet r0;
        java.lang.Object[] r1, $r4;
        java.util.Map $r2;
        java.util.Set $r3;

        r0 := @this: org.apache.commons.collections4.set.MapBackedSet;

        r1 := @parameter0: java.lang.Object[];

        $r2 = r0.<org.apache.commons.collections4.set.MapBackedSet: java.util.Map map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>(r1);

        return $r4;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.commons.collections4.set.MapBackedSet r0;
        java.lang.Object r1;
        java.util.Map $r2;
        java.util.Set $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.set.MapBackedSet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.commons.collections4.set.MapBackedSet: java.util.Map map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    public int hashCode()
    {
        org.apache.commons.collections4.set.MapBackedSet r0;
        java.util.Map $r1;
        java.util.Set $r2;
        int $i0;

        r0 := @this: org.apache.commons.collections4.set.MapBackedSet;

        $r1 = r0.<org.apache.commons.collections4.set.MapBackedSet: java.util.Map map>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $i0 = interfaceinvoke $r2.<java.util.Set: int hashCode()>();

        return $i0;
    }

    public static void <clinit>()
    {
        <org.apache.commons.collections4.set.MapBackedSet: long serialVersionUID> = 6723912213766056587L;

        return;
    }
}
