public class org.apache.commons.collections4.map.ReferenceMapTest extends org.apache.commons.collections4.map.AbstractIterableMapTest
{
    java.lang.ref.WeakReference keyReference;
    java.lang.ref.WeakReference valueReference;

    public void <init>(java.lang.String)
    {
        org.apache.commons.collections4.map.ReferenceMapTest r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.collections4.map.ReferenceMapTest;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.collections4.map.AbstractIterableMapTest: void <init>(java.lang.String)>(r1);

        return;
    }

    public static junit.framework.Test suite()
    {
        junit.framework.TestSuite $r0;

        $r0 = staticinvoke <org.apache.commons.collections4.BulkTest: junit.framework.TestSuite makeSuite(java.lang.Class)>(class "Lorg/apache/commons/collections4/map/ReferenceMapTest;");

        return $r0;
    }

    public org.apache.commons.collections4.map.ReferenceMap makeObject()
    {
        org.apache.commons.collections4.map.ReferenceMapTest r0;
        org.apache.commons.collections4.map.ReferenceMap $r1;
        org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength $r2, $r3;

        r0 := @this: org.apache.commons.collections4.map.ReferenceMapTest;

        $r1 = new org.apache.commons.collections4.map.ReferenceMap;

        $r3 = <org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength: org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength WEAK>;

        $r2 = <org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength: org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength WEAK>;

        specialinvoke $r1.<org.apache.commons.collections4.map.ReferenceMap: void <init>(org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength,org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength)>($r3, $r2);

        return $r1;
    }

    public boolean isAllowNullKey()
    {
        org.apache.commons.collections4.map.ReferenceMapTest r0;

        r0 := @this: org.apache.commons.collections4.map.ReferenceMapTest;

        return 0;
    }

    public boolean isAllowNullValue()
    {
        org.apache.commons.collections4.map.ReferenceMapTest r0;

        r0 := @this: org.apache.commons.collections4.map.ReferenceMapTest;

        return 0;
    }

    public java.lang.String getCompatibilityVersion()
    {
        org.apache.commons.collections4.map.ReferenceMapTest r0;

        r0 := @this: org.apache.commons.collections4.map.ReferenceMapTest;

        return "4";
    }

    public void testNullHandling()
    {
        org.apache.commons.collections4.map.ReferenceMapTest r0;
        java.util.Map $r1, $r3, $r4, $r5, $r7, $r9, $r11, $r13, $r16, $r19;
        java.lang.Object $r2, $r6, $r15, $r18;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Set $r8, $r10;
        java.util.Collection $r12;
        java.lang.NullPointerException $r21, $r22, $r23;

        r0 := @this: org.apache.commons.collections4.map.ReferenceMapTest;

        virtualinvoke r0.<org.apache.commons.collections4.map.ReferenceMapTest: void resetFull()>();

        $r1 = r0.<org.apache.commons.collections4.map.ReferenceMapTest: java.util.Map map>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(null);

        staticinvoke <org.apache.commons.collections4.map.ReferenceMapTest: void assertEquals(java.lang.Object,java.lang.Object)>(null, $r2);

        $r3 = r0.<org.apache.commons.collections4.map.ReferenceMapTest: java.util.Map map>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(null);

        staticinvoke <org.apache.commons.collections4.map.ReferenceMapTest: void assertEquals(boolean,boolean)>(0, $z0);

        $r4 = r0.<org.apache.commons.collections4.map.ReferenceMapTest: java.util.Map map>;

        $z1 = interfaceinvoke $r4.<java.util.Map: boolean containsValue(java.lang.Object)>(null);

        staticinvoke <org.apache.commons.collections4.map.ReferenceMapTest: void assertEquals(boolean,boolean)>(0, $z1);

        $r5 = r0.<org.apache.commons.collections4.map.ReferenceMapTest: java.util.Map map>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object remove(java.lang.Object)>(null);

        staticinvoke <org.apache.commons.collections4.map.ReferenceMapTest: void assertEquals(java.lang.Object,java.lang.Object)>(null, $r6);

        $r7 = r0.<org.apache.commons.collections4.map.ReferenceMapTest: java.util.Map map>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Set entrySet()>();

        $z2 = interfaceinvoke $r8.<java.util.Set: boolean contains(java.lang.Object)>(null);

        staticinvoke <org.apache.commons.collections4.map.ReferenceMapTest: void assertEquals(boolean,boolean)>(0, $z2);

        $r9 = r0.<org.apache.commons.collections4.map.ReferenceMapTest: java.util.Map map>;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.util.Set keySet()>();

        $z3 = interfaceinvoke $r10.<java.util.Set: boolean contains(java.lang.Object)>(null);

        staticinvoke <org.apache.commons.collections4.map.ReferenceMapTest: void assertEquals(boolean,boolean)>(0, $z3);

        $r11 = r0.<org.apache.commons.collections4.map.ReferenceMapTest: java.util.Map map>;

        $r12 = interfaceinvoke $r11.<java.util.Map: java.util.Collection values()>();

        $z4 = interfaceinvoke $r12.<java.util.Collection: boolean contains(java.lang.Object)>(null);

        staticinvoke <org.apache.commons.collections4.map.ReferenceMapTest: void assertEquals(boolean,boolean)>(0, $z4);

     label01:
        $r13 = r0.<org.apache.commons.collections4.map.ReferenceMapTest: java.util.Map map>;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(null, null);

        staticinvoke <org.apache.commons.collections4.map.ReferenceMapTest: void fail()>();

     label02:
        goto label04;

     label03:
        $r22 := @caughtexception;

     label04:
        $r16 = r0.<org.apache.commons.collections4.map.ReferenceMapTest: java.util.Map map>;

        $r15 = new java.lang.Object;

        specialinvoke $r15.<java.lang.Object: void <init>()>();

        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, null);

        staticinvoke <org.apache.commons.collections4.map.ReferenceMapTest: void fail()>();

     label05:
        goto label07;

     label06:
        $r21 := @caughtexception;

     label07:
        $r19 = r0.<org.apache.commons.collections4.map.ReferenceMapTest: java.util.Map map>;

        $r18 = new java.lang.Object;

        specialinvoke $r18.<java.lang.Object: void <init>()>();

        interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(null, $r18);

        staticinvoke <org.apache.commons.collections4.map.ReferenceMapTest: void fail()>();

     label08:
        goto label10;

     label09:
        $r23 := @caughtexception;

     label10:
        return;

        catch java.lang.NullPointerException from label01 to label02 with label03;
        catch java.lang.NullPointerException from label04 to label05 with label06;
        catch java.lang.NullPointerException from label07 to label08 with label09;
    }

    public java.util.Map buildRefMap()
    {
        org.apache.commons.collections4.map.ReferenceMapTest r0;
        java.lang.Object $r4, $r5, $r12, $r14, $r16;
        java.lang.ref.WeakReference $r6, $r7, $r13, $r15;
        org.apache.commons.collections4.map.ReferenceMap $r8;
        org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength $r9, $r10;

        r0 := @this: org.apache.commons.collections4.map.ReferenceMapTest;

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        $r6 = new java.lang.ref.WeakReference;

        specialinvoke $r6.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>($r4);

        r0.<org.apache.commons.collections4.map.ReferenceMapTest: java.lang.ref.WeakReference keyReference> = $r6;

        $r7 = new java.lang.ref.WeakReference;

        specialinvoke $r7.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>($r5);

        r0.<org.apache.commons.collections4.map.ReferenceMapTest: java.lang.ref.WeakReference valueReference> = $r7;

        $r8 = new org.apache.commons.collections4.map.ReferenceMap;

        $r10 = <org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength: org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength WEAK>;

        $r9 = <org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength: org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength HARD>;

        specialinvoke $r8.<org.apache.commons.collections4.map.ReferenceMap: void <init>(org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength,org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength,boolean)>($r10, $r9, 1);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r5);

        $r12 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        staticinvoke <org.apache.commons.collections4.map.ReferenceMapTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("In map", $r5, $r12);

        $r13 = r0.<org.apache.commons.collections4.map.ReferenceMapTest: java.lang.ref.WeakReference keyReference>;

        $r14 = virtualinvoke $r13.<java.lang.ref.WeakReference: java.lang.Object get()>();

        staticinvoke <org.apache.commons.collections4.map.ReferenceMapTest: void assertNotNull(java.lang.String,java.lang.Object)>("Weak reference released early (1)", $r14);

        $r15 = r0.<org.apache.commons.collections4.map.ReferenceMapTest: java.lang.ref.WeakReference valueReference>;

        $r16 = virtualinvoke $r15.<java.lang.ref.WeakReference: java.lang.Object get()>();

        staticinvoke <org.apache.commons.collections4.map.ReferenceMapTest: void assertNotNull(java.lang.String,java.lang.Object)>("Weak reference released early (2)", $r16);

        return $r8;
    }

    public void testPurgeValues() throws java.lang.Exception
    {
        org.apache.commons.collections4.map.ReferenceMapTest r0;
        java.util.Map r1;
        byte[] r2;
        int $i0, i1, i2;
        java.lang.ref.WeakReference $r3, $r5;
        java.lang.Object $r4, $r6;

        r0 := @this: org.apache.commons.collections4.map.ReferenceMapTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.map.ReferenceMapTest: java.util.Map buildRefMap()>();

        i1 = 0;

        i2 = 2;

     label1:
        staticinvoke <java.lang.System: void gc()>();

        $i0 = i1;

        i1 = i1 + 1;

        if $i0 <= 50 goto label2;

        staticinvoke <org.apache.commons.collections4.map.ReferenceMapTest: void fail(java.lang.String)>("Max iterations reached before resource released.");

     label2:
        interfaceinvoke r1.<java.util.Map: boolean isEmpty()>();

        $r3 = r0.<org.apache.commons.collections4.map.ReferenceMapTest: java.lang.ref.WeakReference keyReference>;

        $r4 = virtualinvoke $r3.<java.lang.ref.WeakReference: java.lang.Object get()>();

        if $r4 != null goto label3;

        $r5 = r0.<org.apache.commons.collections4.map.ReferenceMapTest: java.lang.ref.WeakReference valueReference>;

        $r6 = virtualinvoke $r5.<java.lang.ref.WeakReference: java.lang.Object get()>();

        if $r6 != null goto label3;

        goto label4;

     label3:
        r2 = newarray (byte)[i2];

        i2 = i2 * 2;

        goto label1;

     label4:
        return;
    }

    public void testCustomPurge()
    {
        org.apache.commons.collections4.map.ReferenceMapTest r0;
        java.util.function.Consumer r2, $r6;
        byte[] r4;
        java.util.ArrayList $r5;
        java.io.Serializable $r7;
        org.apache.commons.collections4.map.ReferenceMapTest$1 $r8;
        org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength $r9, $r10;
        int $i0, i1, i2, i3;
        boolean $z1, $z2;
        java.lang.Integer $r11, $r12;

        r0 := @this: org.apache.commons.collections4.map.ReferenceMapTest;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = staticinvoke <org.apache.commons.collections4.map.ReferenceMapTest$lambda_testCustomPurge_4d3b256b_1__121: java.util.function.Consumer bootstrap$(java.util.List)>($r5);

        $r7 = (java.io.Serializable) $r6;

        r2 = (java.util.function.Consumer) $r7;

        $r8 = new org.apache.commons.collections4.map.ReferenceMapTest$1;

        $r10 = <org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength: org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength WEAK>;

        $r9 = <org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength: org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength HARD>;

        specialinvoke $r8.<org.apache.commons.collections4.map.ReferenceMapTest$1: void <init>(org.apache.commons.collections4.map.ReferenceMapTest,org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength,org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength,boolean,java.util.function.Consumer)>(r0, $r10, $r9, 0, r2);

        i1 = 100000;

     label1:
        if i1 >= 100010 goto label2;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, $r12);

        i1 = i1 + 1;

        goto label1;

     label2:
        i2 = 0;

        i3 = 2;

     label3:
        staticinvoke <java.lang.System: void gc()>();

        $i0 = i2;

        i2 = i2 + 1;

        if $i0 > 50 goto label4;

        if i3 >= 0 goto label5;

     label4:
        staticinvoke <org.apache.commons.collections4.map.ReferenceMapTest: void fail(java.lang.String)>("Max iterations reached before resource released.");

     label5:
        interfaceinvoke $r8.<java.util.Map: boolean isEmpty()>();

        $z2 = interfaceinvoke $r5.<java.util.List: boolean isEmpty()>();

        if $z2 != 0 goto label6;

        goto label7;

     label6:
        r4 = newarray (byte)[i3];

        i3 = i3 * 2;

        goto label3;

     label7:
        $z1 = interfaceinvoke $r5.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.apache.commons.collections4.map.ReferenceMapTest: void assertFalse(java.lang.String,boolean)>("Value should be stored", $z1);

        return;
    }

    public void testDataSizeAfterSerialization() throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.commons.collections4.map.ReferenceMapTest r0;
        org.apache.commons.collections4.map.ReferenceMap $r6, r32;
        org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength $r7, $r8;
        java.io.ByteArrayOutputStream $r10;
        java.io.ObjectOutputStream $r11;
        java.lang.Throwable $r12, $r14, $r15, $r16, $r18, $r19, r21, r30;
        java.io.ByteArrayInputStream $r25;
        byte[] $r26;
        java.io.ObjectInputStream $r28;
        java.lang.Object $r31;
        int $i0, $i1, $i2;
        org.apache.commons.collections4.map.AbstractHashedMap$HashEntry[] $r33, $r34;

        r0 := @this: org.apache.commons.collections4.map.ReferenceMapTest;

        $r6 = new org.apache.commons.collections4.map.ReferenceMap;

        $r8 = <org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength: org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength WEAK>;

        $r7 = <org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength: org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength WEAK>;

        specialinvoke $r6.<org.apache.commons.collections4.map.ReferenceMap: void <init>(org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength,org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength,boolean)>($r8, $r7, 1);

        virtualinvoke $r6.<org.apache.commons.collections4.map.ReferenceMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("KEY", "VALUE");

        $r10 = new java.io.ByteArrayOutputStream;

        specialinvoke $r10.<java.io.ByteArrayOutputStream: void <init>()>();

        $r11 = new java.io.ObjectOutputStream;

        specialinvoke $r11.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>($r10);

        r21 = null;

     label01:
        virtualinvoke $r11.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r6);

     label02:
        if $r11 == null goto label12;

        goto label03;

     label03:
        virtualinvoke $r11.<java.io.ObjectOutputStream: void close()>();

        goto label12;

     label04:
        $r14 := @caughtexception;

        r21 = $r14;

        throw $r14;

     label05:
        $r12 := @caughtexception;

     label06:
        if $r11 == null goto label11;

        if r21 == null goto label10;

     label07:
        virtualinvoke $r11.<java.io.ObjectOutputStream: void close()>();

     label08:
        goto label11;

     label09:
        $r16 := @caughtexception;

        virtualinvoke r21.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r16);

        goto label11;

     label10:
        virtualinvoke $r11.<java.io.ObjectOutputStream: void close()>();

     label11:
        throw $r12;

     label12:
        $r25 = new java.io.ByteArrayInputStream;

        $r26 = virtualinvoke $r10.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r25.<java.io.ByteArrayInputStream: void <init>(byte[])>($r26);

        $r28 = new java.io.ObjectInputStream;

        specialinvoke $r28.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>($r25);

        r30 = null;

     label13:
        $r31 = virtualinvoke $r28.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        r32 = (org.apache.commons.collections4.map.ReferenceMap) $r31;

        $i0 = virtualinvoke r32.<org.apache.commons.collections4.map.ReferenceMap: int size()>();

        staticinvoke <org.apache.commons.collections4.map.ReferenceMapTest: void assertEquals(int,int)>(1, $i0);

        $r33 = $r6.<org.apache.commons.collections4.map.ReferenceMap: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry[] data>;

        $i1 = lengthof $r33;

        $r34 = r32.<org.apache.commons.collections4.map.ReferenceMap: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry[] data>;

        $i2 = lengthof $r34;

        staticinvoke <org.apache.commons.collections4.map.ReferenceMapTest: void assertEquals(int,int)>($i1, $i2);

     label14:
        if $r28 == null goto label24;

        goto label15;

     label15:
        virtualinvoke $r28.<java.io.ObjectInputStream: void close()>();

        goto label24;

     label16:
        $r19 := @caughtexception;

        r30 = $r19;

        throw $r19;

     label17:
        $r18 := @caughtexception;

     label18:
        if $r28 == null goto label23;

        if r30 == null goto label22;

     label19:
        virtualinvoke $r28.<java.io.ObjectInputStream: void close()>();

     label20:
        goto label23;

     label21:
        $r15 := @caughtexception;

        virtualinvoke r30.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r15);

        goto label23;

     label22:
        virtualinvoke $r28.<java.io.ObjectInputStream: void close()>();

     label23:
        throw $r18;

     label24:
        return;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
        catch java.lang.Throwable from label13 to label14 with label16;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label16 to label18 with label17;
    }

    private static void gc()
    {
        java.lang.OutOfMemoryError $r0;
        byte[][] r1;

     label1:
        r1 = newmultiarray (byte)[1000000000][1000000000];

        staticinvoke <org.apache.commons.collections4.map.ReferenceMapTest: void fail(java.lang.String)>("you have too much RAM");

     label2:
        goto label4;

     label3:
        $r0 := @caughtexception;

        staticinvoke <java.lang.System: void gc()>();

     label4:
        return;

        catch java.lang.OutOfMemoryError from label1 to label2 with label3;
    }

    public volatile org.apache.commons.collections4.IterableMap makeObject()
    {
        org.apache.commons.collections4.map.ReferenceMapTest r0;
        org.apache.commons.collections4.map.ReferenceMap $r1;

        r0 := @this: org.apache.commons.collections4.map.ReferenceMapTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.map.ReferenceMapTest: org.apache.commons.collections4.map.ReferenceMap makeObject()>();

        return $r1;
    }

    public volatile java.util.Map makeObject()
    {
        org.apache.commons.collections4.map.ReferenceMapTest r0;
        org.apache.commons.collections4.map.ReferenceMap $r1;

        r0 := @this: org.apache.commons.collections4.map.ReferenceMapTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.map.ReferenceMapTest: org.apache.commons.collections4.map.ReferenceMap makeObject()>();

        return $r1;
    }

    public volatile java.lang.Object makeObject()
    {
        org.apache.commons.collections4.map.ReferenceMapTest r0;
        org.apache.commons.collections4.map.ReferenceMap $r1;

        r0 := @this: org.apache.commons.collections4.map.ReferenceMapTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.map.ReferenceMapTest: org.apache.commons.collections4.map.ReferenceMap makeObject()>();

        return $r1;
    }

    private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)
    {
        java.lang.invoke.SerializedLambda r0;
        java.lang.String r1, $r2, $r3, $r4, $r5, $r6;
        int $i0, $i1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Object $r7;
        java.util.List $r8;
        java.util.function.Consumer $r9;
        byte b2;
        java.lang.IllegalArgumentException $r10;

        r0 := @parameter0: java.lang.invoke.SerializedLambda;

        r1 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplMethodName()>();

        b2 = -1;

        $i0 = virtualinvoke r1.<java.lang.String: int hashCode()>();

        lookupswitch($i0)
        {
            case -838953836: goto label1;
            default: goto label2;
        };

     label1:
        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("lambda$testCustomPurge$4d3b256b$1");

        if $z0 == 0 goto label2;

        b2 = 0;

     label2:
        lookupswitch(b2)
        {
            case 0: goto label3;
            default: goto label4;
        };

     label3:
        $i1 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: int getImplMethodKind()>();

        if $i1 != 6 goto label4;

        $r2 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceClass()>();

        $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>("java/util/function/Consumer");

        if $z1 == 0 goto label4;

        $r3 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodName()>();

        $z2 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>("accept");

        if $z2 == 0 goto label4;

        $r4 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodSignature()>();

        $z3 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>("(Ljava/lang/Object;)V");

        if $z3 == 0 goto label4;

        $r5 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplClass()>();

        $z4 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/commons/collections4/map/ReferenceMapTest");

        if $z4 == 0 goto label4;

        $r6 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplMethodSignature()>();

        $z5 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>("(Ljava/util/List;Ljava/lang/Integer;)V");

        if $z5 == 0 goto label4;

        $r7 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.Object getCapturedArg(int)>(0);

        $r8 = (java.util.List) $r7;

        $r9 = staticinvoke <org.apache.commons.collections4.map.ReferenceMapTest$lambda_testCustomPurge_4d3b256b_1__122: java.util.function.Consumer bootstrap$(java.util.List)>($r8);

        return $r9;

     label4:
        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid lambda deserialization");

        throw $r10;
    }

    public static void lambda$testCustomPurge$4d3b256b$1(java.util.List, java.lang.Integer)
    {
        java.util.List r0;
        java.lang.Integer r1;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.lang.Integer;

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }
}
