public abstract class org.apache.commons.collections4.multimap.AbstractMultiValuedMap extends java.lang.Object implements org.apache.commons.collections4.MultiValuedMap
{
    private transient java.util.Collection valuesView;
    private transient org.apache.commons.collections4.multimap.AbstractMultiValuedMap$EntryValues entryValuesView;
    private transient org.apache.commons.collections4.MultiSet keysMultiSetView;
    private transient org.apache.commons.collections4.multimap.AbstractMultiValuedMap$AsMap asMapView;
    private transient java.util.Map map;

    protected void <init>()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap r0;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected void <init>(java.util.Map)
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap r0;
        java.util.Map r1;
        java.lang.NullPointerException $r2;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMap;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Map must not be null.");

        throw $r2;

     label1:
        r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap: java.util.Map map> = r1;

        return;
    }

    protected java.util.Map getMap()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap r0;
        java.util.Map $r1;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMap;

        $r1 = r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap: java.util.Map map>;

        return $r1;
    }

    protected void setMap(java.util.Map)
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap r0;
        java.util.Map r1;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMap;

        r1 := @parameter0: java.util.Map;

        r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap: java.util.Map map> = r1;

        return;
    }

    protected abstract java.util.Collection createCollection();

    public boolean containsKey(java.lang.Object)
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap r0;
        java.lang.Object r1;
        java.util.Map $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap: java.util.Map getMap()>();

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean containsValue(java.lang.Object)
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap r0;
        java.lang.Object r1;
        java.util.Collection $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap: java.util.Collection values()>();

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean containsMapping(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap r0;
        java.lang.Object r1, r2, $r5;
        java.util.Collection r3;
        java.util.Map $r4;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap: java.util.Map getMap()>();

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (java.util.Collection) $r5;

        if r3 == null goto label1;

        $z0 = interfaceinvoke r3.<java.util.Collection: boolean contains(java.lang.Object)>(r2);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public java.util.Collection entries()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap r0;
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap$EntryValues $r1, $r2;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMap;

        $r1 = r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap: org.apache.commons.collections4.multimap.AbstractMultiValuedMap$EntryValues entryValuesView>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap: org.apache.commons.collections4.multimap.AbstractMultiValuedMap$EntryValues entryValuesView>;

        goto label2;

     label1:
        $r2 = new org.apache.commons.collections4.multimap.AbstractMultiValuedMap$EntryValues;

        specialinvoke $r2.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap$EntryValues: void <init>(org.apache.commons.collections4.multimap.AbstractMultiValuedMap,org.apache.commons.collections4.multimap.AbstractMultiValuedMap$1)>(r0, null);

        r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap: org.apache.commons.collections4.multimap.AbstractMultiValuedMap$EntryValues entryValuesView> = $r2;

     label2:
        return $r2;
    }

    public java.util.Collection get(java.lang.Object)
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap r0;
        java.lang.Object r1;
        java.util.Collection $r2;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap: java.util.Collection wrappedCollection(java.lang.Object)>(r1);

        return $r2;
    }

    java.util.Collection wrappedCollection(java.lang.Object)
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap r0;
        java.lang.Object r1;
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection $r2;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = new org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection;

        specialinvoke $r2.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection: void <init>(org.apache.commons.collections4.multimap.AbstractMultiValuedMap,java.lang.Object)>(r0, r1);

        return $r2;
    }

    public java.util.Collection remove(java.lang.Object)
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap r0;
        java.lang.Object r1, $r3;
        java.util.Map $r2;
        java.util.Collection $r4, $r5;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap: java.util.Map getMap()>();

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        $r4 = (java.util.Collection) $r3;

        $r5 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection emptyIfNull(java.util.Collection)>($r4);

        return $r5;
    }

    public boolean removeMapping(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap r0;
        java.lang.Object r1, r2, $r5;
        java.util.Collection r3;
        boolean z0, $z1;
        java.util.Map $r4, $r6;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap: java.util.Map getMap()>();

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (java.util.Collection) $r5;

        if r3 != null goto label1;

        return 0;

     label1:
        z0 = interfaceinvoke r3.<java.util.Collection: boolean remove(java.lang.Object)>(r2);

        $z1 = interfaceinvoke r3.<java.util.Collection: boolean isEmpty()>();

        if $z1 == 0 goto label2;

        $r6 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap: java.util.Map getMap()>();

        interfaceinvoke $r6.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

     label2:
        return z0;
    }

    public boolean isEmpty()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap r0;
        java.util.Map $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMap;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap: java.util.Map getMap()>();

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        return $z0;
    }

    public java.util.Set keySet()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap r0;
        java.util.Map $r1;
        java.util.Set $r2;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMap;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap: java.util.Map getMap()>();

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        return $r2;
    }

    public int size()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap r0;
        java.util.Iterator r1;
        java.util.Collection r2, $r4;
        java.util.Map $r3;
        boolean $z0;
        java.lang.Object $r5;
        int $i0, i1;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMap;

        i1 = 0;

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap: java.util.Map getMap()>();

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Collection values()>();

        r1 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.util.Collection) $r5;

        $i0 = interfaceinvoke r2.<java.util.Collection: int size()>();

        i1 = i1 + $i0;

        goto label1;

     label2:
        return i1;
    }

    public java.util.Collection values()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap r0;
        java.util.Collection r1, $r2;
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap$Values r3;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMap;

        r1 = r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap: java.util.Collection valuesView>;

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        r3 = new org.apache.commons.collections4.multimap.AbstractMultiValuedMap$Values;

        $r2 = r3;

        specialinvoke r3.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap$Values: void <init>(org.apache.commons.collections4.multimap.AbstractMultiValuedMap,org.apache.commons.collections4.multimap.AbstractMultiValuedMap$1)>(r0, null);

        r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap: java.util.Collection valuesView> = r3;

     label2:
        return $r2;
    }

    public void clear()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap r0;
        java.util.Map $r1;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMap;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap: java.util.Map getMap()>();

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        return;
    }

    public boolean put(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap r0;
        java.lang.Object r1, r2, $r4;
        java.util.Map $r3, $r5;
        boolean $z0, $z1;
        java.util.Collection r7, r8;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap: java.util.Map getMap()>();

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r7 = (java.util.Collection) $r4;

        if r7 != null goto label2;

        r8 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap: java.util.Collection createCollection()>();

        $z1 = interfaceinvoke r8.<java.util.Collection: boolean add(java.lang.Object)>(r2);

        if $z1 == 0 goto label1;

        $r5 = r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap: java.util.Map map>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r8);

        return 1;

     label1:
        return 0;

     label2:
        $z0 = interfaceinvoke r7.<java.util.Collection: boolean add(java.lang.Object)>(r2);

        return $z0;
    }

    public boolean putAll(java.util.Map)
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap r0;
        java.util.Map r1;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.util.Set $r4;
        boolean $z0, $z1, z2;
        java.lang.Object $r5, $r6, $r7;
        java.lang.NullPointerException $r8;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMap;

        r1 := @parameter0: java.util.Map;

        if r1 != null goto label1;

        $r8 = new java.lang.NullPointerException;

        specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>("Map must not be null.");

        throw $r8;

     label1:
        z2 = 0;

        $r4 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r5;

        $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap: boolean put(java.lang.Object,java.lang.Object)>($r6, $r7);

        z2 = z2 | $z1;

        goto label2;

     label3:
        return z2;
    }

    public boolean putAll(org.apache.commons.collections4.MultiValuedMap)
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap r0;
        org.apache.commons.collections4.MultiValuedMap r1;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.util.Collection $r4;
        boolean $z0, $z1, z2;
        java.lang.Object $r5, $r6, $r7;
        java.lang.NullPointerException $r8;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMap;

        r1 := @parameter0: org.apache.commons.collections4.MultiValuedMap;

        if r1 != null goto label1;

        $r8 = new java.lang.NullPointerException;

        specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>("Map must not be null.");

        throw $r8;

     label1:
        z2 = 0;

        $r4 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection entries()>();

        r2 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r5;

        $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap: boolean put(java.lang.Object,java.lang.Object)>($r6, $r7);

        z2 = z2 | $z1;

        goto label2;

     label3:
        return z2;
    }

    public org.apache.commons.collections4.MultiSet keys()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap r0;
        org.apache.commons.collections4.MultiSet $r1, $r2, $r4;
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap$KeysMultiSet $r3;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMap;

        $r1 = r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap: org.apache.commons.collections4.MultiSet keysMultiSetView>;

        if $r1 != null goto label1;

        $r3 = new org.apache.commons.collections4.multimap.AbstractMultiValuedMap$KeysMultiSet;

        specialinvoke $r3.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap$KeysMultiSet: void <init>(org.apache.commons.collections4.multimap.AbstractMultiValuedMap,org.apache.commons.collections4.multimap.AbstractMultiValuedMap$1)>(r0, null);

        $r4 = staticinvoke <org.apache.commons.collections4.multiset.UnmodifiableMultiSet: org.apache.commons.collections4.MultiSet unmodifiableMultiSet(org.apache.commons.collections4.MultiSet)>($r3);

        r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap: org.apache.commons.collections4.MultiSet keysMultiSetView> = $r4;

     label1:
        $r2 = r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap: org.apache.commons.collections4.MultiSet keysMultiSetView>;

        return $r2;
    }

    public java.util.Map asMap()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap r0;
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap$AsMap $r1, $r3;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMap;

        $r1 = r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap: org.apache.commons.collections4.multimap.AbstractMultiValuedMap$AsMap asMapView>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap: org.apache.commons.collections4.multimap.AbstractMultiValuedMap$AsMap asMapView>;

        goto label2;

     label1:
        $r3 = new org.apache.commons.collections4.multimap.AbstractMultiValuedMap$AsMap;

        $r2 = r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap: java.util.Map map>;

        specialinvoke $r3.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap$AsMap: void <init>(org.apache.commons.collections4.multimap.AbstractMultiValuedMap,java.util.Map)>(r0, $r2);

        r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap: org.apache.commons.collections4.multimap.AbstractMultiValuedMap$AsMap asMapView> = $r3;

     label2:
        return $r3;
    }

    public boolean putAll(java.lang.Object, java.lang.Iterable)
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap r0;
        java.lang.Object r1;
        java.lang.Iterable r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.Collection $r3, $r4, r6;
        java.lang.NullPointerException $r5;
        java.util.Iterator r7;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Iterable;

        if r2 != null goto label1;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("Values must not be null.");

        throw $r5;

     label1:
        $z0 = r2 instanceof java.util.Collection;

        if $z0 == 0 goto label4;

        r6 = (java.util.Collection) r2;

        $z3 = interfaceinvoke r6.<java.util.Collection: boolean isEmpty()>();

        if $z3 != 0 goto label2;

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap: java.util.Collection get(java.lang.Object)>(r1);

        $z4 = interfaceinvoke $r4.<java.util.Collection: boolean addAll(java.util.Collection)>(r6);

        if $z4 == 0 goto label2;

        $z5 = 1;

        goto label3;

     label2:
        $z5 = 0;

     label3:
        return $z5;

     label4:
        r7 = interfaceinvoke r2.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap: java.util.Collection get(java.lang.Object)>(r1);

        $z2 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean addAll(java.util.Collection,java.util.Iterator)>($r3, r7);

        if $z2 == 0 goto label5;

        $z6 = 1;

        goto label6;

     label5:
        $z6 = 0;

     label6:
        return $z6;
    }

    public org.apache.commons.collections4.MapIterator mapIterator()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap r0;
        int $i0;
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap$MultiValuedMapIterator $r1;
        org.apache.commons.collections4.MapIterator $r2;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMap;

        $i0 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap: int size()>();

        if $i0 != 0 goto label1;

        $r2 = staticinvoke <org.apache.commons.collections4.iterators.EmptyMapIterator: org.apache.commons.collections4.MapIterator emptyMapIterator()>();

        return $r2;

     label1:
        $r1 = new org.apache.commons.collections4.multimap.AbstractMultiValuedMap$MultiValuedMapIterator;

        specialinvoke $r1.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap$MultiValuedMapIterator: void <init>(org.apache.commons.collections4.multimap.AbstractMultiValuedMap)>(r0);

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap r0;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.util.Map $r2, $r4;
        org.apache.commons.collections4.MultiValuedMap $r3;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMap;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.apache.commons.collections4.MultiValuedMap;

        if $z0 == 0 goto label2;

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap: java.util.Map asMap()>();

        $r3 = (org.apache.commons.collections4.MultiValuedMap) r1;

        $r4 = interfaceinvoke $r3.<org.apache.commons.collections4.MultiValuedMap: java.util.Map asMap()>();

        $z1 = interfaceinvoke $r2.<java.util.Map: boolean equals(java.lang.Object)>($r4);

        return $z1;

     label2:
        return 0;
    }

    public int hashCode()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap r0;
        java.util.Map $r1;
        int $i0;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMap;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap: java.util.Map getMap()>();

        $i0 = interfaceinvoke $r1.<java.util.Map: int hashCode()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap r0;
        java.util.Map $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMap;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap: java.util.Map getMap()>();

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    protected void doWriteObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap r0;
        java.io.ObjectOutputStream r1;
        java.util.Iterator r2, r4;
        java.util.Map$Entry r3;
        java.lang.Object r5, $r9, $r10, $r11, $r13;
        java.util.Map $r6, $r7;
        int $i0, $i1;
        java.util.Set $r8;
        boolean $z0, $z1;
        java.util.Collection $r12, $r14;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMap;

        r1 := @parameter0: java.io.ObjectOutputStream;

        $r6 = r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap: java.util.Map map>;

        $i0 = interfaceinvoke $r6.<java.util.Map: int size()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i0);

        $r7 = r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap: java.util.Map map>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r9 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r9;

        $r10 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r10);

        $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r12 = (java.util.Collection) $r11;

        $i1 = interfaceinvoke $r12.<java.util.Collection: int size()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i1);

        $r13 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r14 = (java.util.Collection) $r13;

        r4 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(r5);

        goto label2;

     label3:
        goto label1;

     label4:
        return;
    }

    protected void doReadObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap r0;
        java.io.ObjectInputStream r1;
        int i0, i1, i2, i3;
        java.lang.Object r2, r4;
        java.util.Collection r3;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMap;

        r1 := @parameter0: java.io.ObjectInputStream;

        i0 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        r2 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        r3 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap: java.util.Collection get(java.lang.Object)>(r2);

        i1 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

        i3 = 0;

     label2:
        if i3 >= i1 goto label3;

        r4 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        interfaceinvoke r3.<java.util.Collection: boolean add(java.lang.Object)>(r4);

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return;
    }

    static java.util.Map access$300(org.apache.commons.collections4.multimap.AbstractMultiValuedMap)
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap r0;
        java.util.Map $r1;

        r0 := @parameter0: org.apache.commons.collections4.multimap.AbstractMultiValuedMap;

        $r1 = r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap: java.util.Map map>;

        return $r1;
    }
}
