public class org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest extends org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest
{

    public void <init>(java.lang.String)
    {
        org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void <init>(java.lang.String)>(r1);

        return;
    }

    public static junit.framework.Test suite()
    {
        junit.framework.TestSuite $r0;

        $r0 = staticinvoke <org.apache.commons.collections4.BulkTest: junit.framework.TestSuite makeSuite(java.lang.Class)>(class "Lorg/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest;");

        return $r0;
    }

    public boolean isAddSupported()
    {
        org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest r0;

        r0 := @this: org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest;

        return 0;
    }

    public boolean isRemoveSupported()
    {
        org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest r0;

        r0 := @this: org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest;

        return 0;
    }

    public org.apache.commons.collections4.MultiValuedMap makeObject()
    {
        org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest r0;
        org.apache.commons.collections4.multimap.ArrayListValuedHashMap $r1;
        org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMap $r2;

        r0 := @this: org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest;

        $r1 = new org.apache.commons.collections4.multimap.ArrayListValuedHashMap;

        specialinvoke $r1.<org.apache.commons.collections4.multimap.ArrayListValuedHashMap: void <init>()>();

        $r2 = staticinvoke <org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMap: org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMap unmodifiableMultiValuedMap(org.apache.commons.collections4.MultiValuedMap)>($r1);

        return $r2;
    }

    protected org.apache.commons.collections4.MultiValuedMap makeFullMap()
    {
        org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest r0;
        org.apache.commons.collections4.multimap.ArrayListValuedHashMap $r2;
        org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMap $r3;

        r0 := @this: org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest;

        $r2 = new org.apache.commons.collections4.multimap.ArrayListValuedHashMap;

        specialinvoke $r2.<org.apache.commons.collections4.multimap.ArrayListValuedHashMap: void <init>()>();

        virtualinvoke r0.<org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest: void addSampleMappings(org.apache.commons.collections4.MultiValuedMap)>($r2);

        $r3 = staticinvoke <org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMap: org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMap unmodifiableMultiValuedMap(org.apache.commons.collections4.MultiValuedMap)>($r2);

        return $r3;
    }

    public void testUnmodifiable()
    {
        org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest r0;
        org.apache.commons.collections4.MultiValuedMap $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap makeObject()>();

        $z0 = $r1 instanceof org.apache.commons.collections4.Unmodifiable;

        staticinvoke <org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest: void assertTrue(boolean)>($z0);

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap makeFullMap()>();

        $z1 = $r2 instanceof org.apache.commons.collections4.Unmodifiable;

        staticinvoke <org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest: void assertTrue(boolean)>($z1);

        return;
    }

    public void testDecorateFactory()
    {
        org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest r0;
        org.apache.commons.collections4.MultiValuedMap r1;
        org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMap $r2;

        r0 := @this: org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap makeFullMap()>();

        $r2 = staticinvoke <org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMap: org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMap unmodifiableMultiValuedMap(org.apache.commons.collections4.MultiValuedMap)>(r1);

        staticinvoke <org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest: void assertSame(java.lang.Object,java.lang.Object)>(r1, $r2);

        return;
    }

    public void testDecoratorFactoryNullMap()
    {
        org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest r0;
        java.lang.NullPointerException $r3;

        r0 := @this: org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest;

     label1:
        staticinvoke <org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMap: org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMap unmodifiableMultiValuedMap(org.apache.commons.collections4.MultiValuedMap)>(null);

        staticinvoke <org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest: void fail(java.lang.String)>("map must not be null");

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public void testAddException()
    {
        org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest r0;
        org.apache.commons.collections4.MultiValuedMap r1;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap makeObject()>();

     label1:
        interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean put(java.lang.Object,java.lang.Object)>("one", "uno");

        staticinvoke <org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest: void fail()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
    }

    public void testUnmodifiableEntries()
    {
        org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest r0;
        java.util.Collection r1;
        java.util.Map$Entry r2;
        org.apache.commons.collections4.MultiValuedMap $r3;
        java.lang.Object $r4;
        java.lang.UnsupportedOperationException $r6, $r7, $r8;
        java.util.Iterator r10;

        r0 := @this: org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest;

        virtualinvoke r0.<org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest: void resetFull()>();

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap getMap()>();

        r1 = interfaceinvoke $r3.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection entries()>();

     label01:
        interfaceinvoke r1.<java.util.Collection: void clear()>();

        staticinvoke <org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest: void fail()>();

     label02:
        goto label04;

     label03:
        $r7 := @caughtexception;

     label04:
        r10 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

        $r4 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.util.Map$Entry) $r4;

     label05:
        interfaceinvoke r10.<java.util.Iterator: void remove()>();

        staticinvoke <org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest: void fail()>();

     label06:
        goto label08;

     label07:
        $r8 := @caughtexception;

     label08:
        interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>("three");

        staticinvoke <org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest: void fail()>();

     label09:
        goto label11;

     label10:
        $r6 := @caughtexception;

     label11:
        return;

        catch java.lang.UnsupportedOperationException from label01 to label02 with label03;
        catch java.lang.UnsupportedOperationException from label05 to label06 with label07;
        catch java.lang.UnsupportedOperationException from label08 to label09 with label10;
    }

    public void testUnmodifiableMapIterator()
    {
        org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest r0;
        org.apache.commons.collections4.MapIterator r1;
        org.apache.commons.collections4.MultiValuedMap $r2;
        java.lang.UnsupportedOperationException $r4, $r5;

        r0 := @this: org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest;

        virtualinvoke r0.<org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest: void resetFull()>();

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap getMap()>();

        r1 = interfaceinvoke $r2.<org.apache.commons.collections4.MultiValuedMap: org.apache.commons.collections4.MapIterator mapIterator()>();

     label1:
        interfaceinvoke r1.<org.apache.commons.collections4.MapIterator: void remove()>();

        staticinvoke <org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest: void fail()>();

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        interfaceinvoke r1.<org.apache.commons.collections4.MapIterator: java.lang.Object setValue(java.lang.Object)>("three");

        staticinvoke <org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest: void fail()>();

     label5:
        goto label7;

     label6:
        $r5 := @caughtexception;

     label7:
        return;

        catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
        catch java.lang.UnsupportedOperationException from label4 to label5 with label6;
    }

    public void testUnmodifiableKeySet()
    {
        org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest r0;
        java.util.Set r1;
        org.apache.commons.collections4.MultiValuedMap $r3;
        java.lang.UnsupportedOperationException $r4, $r5, $r6, $r7;
        java.util.Iterator r11;

        r0 := @this: org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest;

        virtualinvoke r0.<org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest: void resetFull()>();

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap getMap()>();

        r1 = interfaceinvoke $r3.<org.apache.commons.collections4.MultiValuedMap: java.util.Set keySet()>();

     label01:
        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>("four");

        staticinvoke <org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest: void fail()>();

     label02:
        goto label04;

     label03:
        $r6 := @caughtexception;

     label04:
        interfaceinvoke r1.<java.util.Set: boolean remove(java.lang.Object)>("four");

        staticinvoke <org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest: void fail()>();

     label05:
        goto label07;

     label06:
        $r4 := @caughtexception;

     label07:
        interfaceinvoke r1.<java.util.Set: void clear()>();

        staticinvoke <org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest: void fail()>();

     label08:
        goto label10;

     label09:
        $r5 := @caughtexception;

     label10:
        r11 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

     label11:
        interfaceinvoke r11.<java.util.Iterator: void remove()>();

        staticinvoke <org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest: void fail()>();

     label12:
        goto label14;

     label13:
        $r7 := @caughtexception;

     label14:
        return;

        catch java.lang.UnsupportedOperationException from label01 to label02 with label03;
        catch java.lang.UnsupportedOperationException from label04 to label05 with label06;
        catch java.lang.UnsupportedOperationException from label07 to label08 with label09;
        catch java.lang.UnsupportedOperationException from label11 to label12 with label13;
    }

    public void testUnmodifiableValues()
    {
        org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest r0;
        java.util.Collection r1;
        org.apache.commons.collections4.MultiValuedMap $r3;
        java.lang.UnsupportedOperationException $r4, $r5, $r6, $r7;
        java.util.Iterator r11;

        r0 := @this: org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest;

        virtualinvoke r0.<org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest: void resetFull()>();

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap getMap()>();

        r1 = interfaceinvoke $r3.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection values()>();

     label01:
        interfaceinvoke r1.<java.util.Collection: boolean add(java.lang.Object)>("four");

        staticinvoke <org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest: void fail()>();

     label02:
        goto label04;

     label03:
        $r5 := @caughtexception;

     label04:
        interfaceinvoke r1.<java.util.Collection: boolean remove(java.lang.Object)>("four");

        staticinvoke <org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest: void fail()>();

     label05:
        goto label07;

     label06:
        $r6 := @caughtexception;

     label07:
        interfaceinvoke r1.<java.util.Collection: void clear()>();

        staticinvoke <org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest: void fail()>();

     label08:
        goto label10;

     label09:
        $r4 := @caughtexception;

     label10:
        r11 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label11:
        interfaceinvoke r11.<java.util.Iterator: void remove()>();

        staticinvoke <org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest: void fail()>();

     label12:
        goto label14;

     label13:
        $r7 := @caughtexception;

     label14:
        return;

        catch java.lang.UnsupportedOperationException from label01 to label02 with label03;
        catch java.lang.UnsupportedOperationException from label04 to label05 with label06;
        catch java.lang.UnsupportedOperationException from label07 to label08 with label09;
        catch java.lang.UnsupportedOperationException from label11 to label12 with label13;
    }

    public void testUnmodifiableAsMap()
    {
        org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest r0;
        java.util.Map r1;
        org.apache.commons.collections4.MultiValuedMap $r2;
        java.lang.String[] $r3;
        java.util.List $r4;
        java.lang.UnsupportedOperationException $r7, $r8, $r9, $r10;

        r0 := @this: org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest;

        virtualinvoke r0.<org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest: void resetFull()>();

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap getMap()>();

        r1 = interfaceinvoke $r2.<org.apache.commons.collections4.MultiValuedMap: java.util.Map asMap()>();

     label01:
        $r3 = newarray (java.lang.String)[1];

        $r3[0] = "four";

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("four", $r4);

        staticinvoke <org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest: void fail()>();

     label02:
        goto label04;

     label03:
        $r8 := @caughtexception;

     label04:
        interfaceinvoke r1.<java.util.Map: java.lang.Object remove(java.lang.Object)>("four");

        staticinvoke <org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest: void fail()>();

     label05:
        goto label07;

     label06:
        $r9 := @caughtexception;

     label07:
        interfaceinvoke r1.<java.util.Map: void clear()>();

        staticinvoke <org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest: void fail()>();

     label08:
        goto label10;

     label09:
        $r7 := @caughtexception;

     label10:
        interfaceinvoke r1.<java.util.Map: void clear()>();

        staticinvoke <org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest: void fail()>();

     label11:
        goto label13;

     label12:
        $r10 := @caughtexception;

     label13:
        return;

        catch java.lang.UnsupportedOperationException from label01 to label02 with label03;
        catch java.lang.UnsupportedOperationException from label04 to label05 with label06;
        catch java.lang.UnsupportedOperationException from label07 to label08 with label09;
        catch java.lang.UnsupportedOperationException from label10 to label11 with label12;
    }

    public void testUnmodifiableKeys()
    {
        org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest r0;
        org.apache.commons.collections4.MultiSet r1;
        org.apache.commons.collections4.MultiValuedMap $r3;
        java.lang.UnsupportedOperationException $r4, $r5, $r6, $r7;
        java.util.Iterator r11;

        r0 := @this: org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest;

        virtualinvoke r0.<org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest: void resetFull()>();

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap getMap()>();

        r1 = interfaceinvoke $r3.<org.apache.commons.collections4.MultiValuedMap: org.apache.commons.collections4.MultiSet keys()>();

     label01:
        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("four");

        staticinvoke <org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest: void fail()>();

     label02:
        goto label04;

     label03:
        $r5 := @caughtexception;

     label04:
        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean remove(java.lang.Object)>("four");

        staticinvoke <org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest: void fail()>();

     label05:
        goto label07;

     label06:
        $r4 := @caughtexception;

     label07:
        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: void clear()>();

        staticinvoke <org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest: void fail()>();

     label08:
        goto label10;

     label09:
        $r7 := @caughtexception;

     label10:
        r11 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: java.util.Iterator iterator()>();

     label11:
        interfaceinvoke r11.<java.util.Iterator: void remove()>();

        staticinvoke <org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest: void fail()>();

     label12:
        goto label14;

     label13:
        $r6 := @caughtexception;

     label14:
        return;

        catch java.lang.UnsupportedOperationException from label01 to label02 with label03;
        catch java.lang.UnsupportedOperationException from label04 to label05 with label06;
        catch java.lang.UnsupportedOperationException from label07 to label08 with label09;
        catch java.lang.UnsupportedOperationException from label11 to label12 with label13;
    }

    public volatile java.lang.Object makeObject()
    {
        org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest r0;
        org.apache.commons.collections4.MultiValuedMap $r1;

        r0 := @this: org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap makeObject()>();

        return $r1;
    }
}
