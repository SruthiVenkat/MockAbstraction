public abstract class org.apache.commons.collections4.map.AbstractMapTest extends org.apache.commons.collections4.AbstractObjectTest
{
    private static final boolean JDK12;
    protected java.util.Map map;
    protected java.util.Set entrySet;
    protected java.util.Set keySet;
    protected java.util.Collection values;
    protected java.util.Map confirmed;

    public void <init>(java.lang.String)
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.collections4.AbstractObjectTest: void <init>(java.lang.String)>(r1);

        return;
    }

    public boolean isPutAddSupported()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        return 1;
    }

    public boolean isPutChangeSupported()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        return 1;
    }

    public boolean isSetValueSupported()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: boolean isPutChangeSupported()>();

        return $z0;
    }

    public boolean isRemoveSupported()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        return 1;
    }

    public boolean isGetStructuralModify()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        return 0;
    }

    public boolean isSubMapViewsSerializable()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        return 1;
    }

    public boolean isAllowNullKey()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        return 1;
    }

    public boolean isAllowNullValue()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        return 1;
    }

    public boolean isAllowDuplicateValues()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        return 1;
    }

    public boolean isFailFastExpected()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        return 1;
    }

    public boolean areEqualElementsDistinguishable()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        return 0;
    }

    public java.lang.Object[] getSampleKeys()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        boolean $z0, $z1;
        java.lang.Object[] $r2, $r4;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        $r2 = newarray (java.lang.Object)[18];

        $r2[0] = "blah";

        $r2[1] = "foo";

        $r2[2] = "bar";

        $r2[3] = "baz";

        $r2[4] = "tmp";

        $r2[5] = "gosh";

        $r2[6] = "golly";

        $r2[7] = "gee";

        $r2[8] = "hello";

        $r2[9] = "goodbye";

        $r2[10] = "we\'ll";

        $r2[11] = "see";

        $r2[12] = "you";

        $r2[13] = "all";

        $r2[14] = "again";

        $r2[15] = "key";

        $r2[16] = "key2";

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: boolean isAllowNullKey()>();

        if $z0 == 0 goto label1;

        $z1 = <org.apache.commons.collections4.map.AbstractMapTest: boolean JDK12>;

        if $z1 != 0 goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r3 = "nonnullkey";

     label2:
        $r2[17] = $r3;

        $r4 = (java.lang.Object[]) $r2;

        return $r4;
    }

    public java.lang.Object[] getOtherKeys()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        java.lang.Object[] $r1, $r2;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.lang.Object[] getOtherNonNullStringElements()>();

        $r2 = (java.lang.Object[]) $r1;

        return $r2;
    }

    public java.lang.Object[] getOtherValues()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        java.lang.Object[] $r1, $r2;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.lang.Object[] getOtherNonNullStringElements()>();

        $r2 = (java.lang.Object[]) $r1;

        return $r2;
    }

    protected java.util.List getAsList(java.lang.Object[])
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        java.lang.Object[] r1;
        int i0, i1;
        java.lang.Object r4;
        java.util.ArrayList $r5;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        r1 := @parameter0: java.lang.Object[];

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r4 = r1[i1];

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r4);

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r5;
    }

    public java.lang.Object[] getOtherNonNullStringElements()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        java.lang.Object[] $r1;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        $r1 = newarray (java.lang.Object)[16];

        $r1[0] = "For";

        $r1[1] = "then";

        $r1[2] = "despite";

        $r1[3] = "space";

        $r1[4] = "I";

        $r1[5] = "would";

        $r1[6] = "be";

        $r1[7] = "brought";

        $r1[8] = "From";

        $r1[9] = "limits";

        $r1[10] = "far";

        $r1[11] = "remote";

        $r1[12] = "where";

        $r1[13] = "thou";

        $r1[14] = "dost";

        $r1[15] = "stay";

        return $r1;
    }

    public java.lang.Object[] getSampleValues()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        boolean $z0, $z1, $z2;
        java.lang.Object[] $r2, $r3;
        java.lang.String $r4, $r5;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        $r3 = newarray (java.lang.Object)[18];

        $r3[0] = "blahv";

        $r3[1] = "foov";

        $r3[2] = "barv";

        $r3[3] = "bazv";

        $r3[4] = "tmpv";

        $r3[5] = "goshv";

        $r3[6] = "gollyv";

        $r3[7] = "geev";

        $r3[8] = "hellov";

        $r3[9] = "goodbyev";

        $r3[10] = "we\'llv";

        $r3[11] = "seev";

        $r3[12] = "youv";

        $r3[13] = "allv";

        $r3[14] = "againv";

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: boolean isAllowNullValue()>();

        if $z0 == 0 goto label1;

        $z1 = <org.apache.commons.collections4.map.AbstractMapTest: boolean JDK12>;

        if $z1 != 0 goto label1;

        $r4 = null;

        goto label2;

     label1:
        $r4 = "nonnullvalue";

     label2:
        $r3[15] = $r4;

        $r3[16] = "value";

        $z2 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: boolean isAllowDuplicateValues()>();

        if $z2 == 0 goto label3;

        $r5 = "value";

        goto label4;

     label3:
        $r5 = "value2";

     label4:
        $r3[17] = $r5;

        $r2 = (java.lang.Object[]) $r3;

        return $r2;
    }

    public java.lang.Object[] getNewSampleValues()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object[] $r2, $r3;
        java.lang.String $r4, $r5;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        $r3 = newarray (java.lang.Object)[18];

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: boolean isAllowNullValue()>();

        if $z0 == 0 goto label1;

        $z1 = <org.apache.commons.collections4.map.AbstractMapTest: boolean JDK12>;

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: boolean isAllowDuplicateValues()>();

        if $z2 == 0 goto label1;

        $r4 = null;

        goto label2;

     label1:
        $r4 = "newnonnullvalue";

     label2:
        $r3[0] = $r4;

        $r3[1] = "newvalue";

        $z3 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: boolean isAllowDuplicateValues()>();

        if $z3 == 0 goto label3;

        $r5 = "newvalue";

        goto label4;

     label3:
        $r5 = "newvalue2";

     label4:
        $r3[2] = $r5;

        $r3[3] = "newblahv";

        $r3[4] = "newfoov";

        $r3[5] = "newbarv";

        $r3[6] = "newbazv";

        $r3[7] = "newtmpv";

        $r3[8] = "newgoshv";

        $r3[9] = "newgollyv";

        $r3[10] = "newgeev";

        $r3[11] = "newhellov";

        $r3[12] = "newgoodbyev";

        $r3[13] = "newwe\'llv";

        $r3[14] = "newseev";

        $r3[15] = "newyouv";

        $r3[16] = "newallv";

        $r3[17] = "newagainv";

        $r2 = (java.lang.Object[]) $r3;

        return $r2;
    }

    public void addSampleMappings(java.util.Map)
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        java.util.Map r1;
        java.lang.Object[] r2, r3;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r5, $r6, $r9, $r10, $r11, $r14;
        java.lang.NullPointerException $r8;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        r1 := @parameter0: java.util.Map;

        r2 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.lang.Object[] getSampleKeys()>();

        r3 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.lang.Object[] getSampleValues()>();

        i3 = 0;

     label01:
        $i0 = lengthof r2;

        if i3 >= $i0 goto label15;

     label02:
        $r6 = r2[i3];

        $r5 = r3[i3];

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r5);

     label03:
        goto label14;

     label04:
        $r8 := @caughtexception;

        $r9 = r2[i3];

        if $r9 == null goto label05;

        $r14 = r3[i3];

        if $r14 != null goto label06;

     label05:
        $z2 = 1;

        goto label07;

     label06:
        $z2 = 0;

     label07:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(java.lang.String,boolean)>("NullPointerException only allowed to be thrown if either the key or value is null.", $z2);

        $r10 = r2[i3];

        if $r10 == null goto label08;

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: boolean isAllowNullKey()>();

        if $z1 != 0 goto label09;

     label08:
        $z3 = 1;

        goto label10;

     label09:
        $z3 = 0;

     label10:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(java.lang.String,boolean)>("NullPointerException on null key, but isAllowNullKey is not overridden to return false.", $z3);

        $r11 = r3[i3];

        if $r11 == null goto label11;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: boolean isAllowNullValue()>();

        if $z0 != 0 goto label12;

     label11:
        $z4 = 1;

        goto label13;

     label12:
        $z4 = 0;

     label13:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(java.lang.String,boolean)>("NullPointerException on null value, but isAllowNullValue is not overridden to return false.", $z4);

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(java.lang.String,boolean)>("Unknown reason for NullPointer.", 0);

     label14:
        i3 = i3 + 1;

        goto label01;

     label15:
        $i1 = lengthof r2;

        $i2 = interfaceinvoke r1.<java.util.Map: int size()>();

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertEquals(java.lang.String,int,int)>("size must reflect number of mappings added.", $i1, $i2);

        return;

        catch java.lang.NullPointerException from label02 to label03 with label04;
    }

    public abstract java.util.Map makeObject();

    public java.util.Map makeFullMap()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        java.util.Map r1;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map makeObject()>();

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void addSampleMappings(java.util.Map)>(r1);

        return r1;
    }

    public java.util.Map makeConfirmedMap()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        java.util.HashMap $r1;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        return $r1;
    }

    public static java.util.Map$Entry cloneMapEntry(java.util.Map$Entry)
    {
        java.util.Map$Entry r0, $r9;
        java.util.HashMap $r2;
        java.lang.Object $r3, $r4, $r8;
        java.util.Set $r6;
        java.util.Iterator $r7;

        r0 := @parameter0: java.util.Map$Entry;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        $r3 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r4 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke $r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4);

        $r6 = virtualinvoke $r2.<java.util.HashMap: java.util.Set entrySet()>();

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (java.util.Map$Entry) $r8;

        return $r9;
    }

    public java.lang.String getCompatibilityVersion()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        $r1 = specialinvoke r0.<org.apache.commons.collections4.AbstractObjectTest: java.lang.String getCompatibilityVersion()>();

        return $r1;
    }

    public void testSampleMappings()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        java.lang.Object[] r1, r2, r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8;
        java.lang.Object $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.lang.Object[] getSampleKeys()>();

        r2 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.lang.Object[] getSampleValues()>();

        r3 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.lang.Object[] getNewSampleValues()>();

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertNotNull(java.lang.String,java.lang.Object)>("failure in test: Must have keys returned from getSampleKeys.", r1);

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertNotNull(java.lang.String,java.lang.Object)>("failure in test: Must have values returned from getSampleValues.", r2);

        $i1 = lengthof r1;

        $i0 = lengthof r2;

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertEquals(java.lang.String,int,int)>("failure in test: not the same number of sample keys and values.", $i1, $i0);

        $i3 = lengthof r2;

        $i2 = lengthof r3;

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertEquals(java.lang.String,int,int)>("failure in test: not the same number of values and new values.", $i3, $i2);

        i7 = 0;

     label01:
        $i4 = lengthof r1;

        $i5 = $i4 - 1;

        if i7 >= $i5 goto label22;

        i8 = i7 + 1;

     label02:
        $i6 = lengthof r1;

        if i8 >= $i6 goto label09;

        $r15 = r1[i7];

        if $r15 != null goto label03;

        $r22 = r1[i8];

        if $r22 == null goto label04;

     label03:
        $z6 = 1;

        goto label05;

     label04:
        $z6 = 0;

     label05:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(java.lang.String,boolean)>("failure in test: duplicate null keys.", $z6);

        $r16 = r1[i7];

        if $r16 == null goto label06;

        $r17 = r1[i8];

        if $r17 == null goto label06;

        $r19 = r1[i7];

        $r18 = r1[i8];

        $z4 = virtualinvoke $r19.<java.lang.Object: boolean equals(java.lang.Object)>($r18);

        if $z4 != 0 goto label07;

        $r21 = r1[i8];

        $r20 = r1[i7];

        $z5 = virtualinvoke $r21.<java.lang.Object: boolean equals(java.lang.Object)>($r20);

        if $z5 != 0 goto label07;

     label06:
        $z7 = 1;

        goto label08;

     label07:
        $z7 = 0;

     label08:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(java.lang.String,boolean)>("failure in test: duplicate non-null key.", $z7);

        i8 = i8 + 1;

        goto label02;

     label09:
        $r4 = r1[i7];

        if $r4 != null goto label10;

        $z3 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: boolean isAllowNullKey()>();

        if $z3 == 0 goto label11;

     label10:
        $z8 = 1;

        goto label12;

     label11:
        $z8 = 0;

     label12:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(java.lang.String,boolean)>("failure in test: found null key, but isNullKeySupported is false.", $z8);

        $r5 = r2[i7];

        if $r5 != null goto label13;

        $z2 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: boolean isAllowNullValue()>();

        if $z2 == 0 goto label14;

     label13:
        $z9 = 1;

        goto label15;

     label14:
        $z9 = 0;

     label15:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(java.lang.String,boolean)>("failure in test: found null value, but isNullValueSupported is false.", $z9);

        $r6 = r3[i7];

        if $r6 != null goto label16;

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: boolean isAllowNullValue()>();

        if $z1 == 0 goto label17;

     label16:
        $z10 = 1;

        goto label18;

     label17:
        $z10 = 0;

     label18:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(java.lang.String,boolean)>("failure in test: found null new value, but isNullValueSupported is false.", $z10);

        $r8 = r2[i7];

        $r7 = r3[i7];

        if $r8 == $r7 goto label20;

        $r9 = r2[i7];

        if $r9 == null goto label19;

        $r11 = r2[i7];

        $r10 = r3[i7];

        $z0 = virtualinvoke $r11.<java.lang.Object: boolean equals(java.lang.Object)>($r10);

        if $z0 != 0 goto label20;

     label19:
        $z11 = 1;

        goto label21;

     label20:
        $z11 = 0;

     label21:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(java.lang.String,boolean)>("failure in test: values should not be the same as new value", $z11);

        i7 = i7 + 1;

        goto label01;

     label22:
        return;
    }

    public void testMakeMap()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        java.util.Map r1, r2, r3, r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map makeObject()>();

        if r1 == null goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(java.lang.String,boolean)>("failure in test: makeEmptyMap must return a non-null map.", $z0);

        r2 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map makeObject()>();

        if r1 == null goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(java.lang.String,boolean)>("failure in test: makeEmptyMap must return a non-null map.", $z1);

        if r1 == r2 goto label05;

        $z2 = 1;

        goto label06;

     label05:
        $z2 = 0;

     label06:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(java.lang.String,boolean)>("failure in test: makeEmptyMap must return a new map with each invocation.", $z2);

        r3 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map makeFullMap()>();

        if r3 == null goto label07;

        $z3 = 1;

        goto label08;

     label07:
        $z3 = 0;

     label08:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(java.lang.String,boolean)>("failure in test: makeFullMap must return a non-null map.", $z3);

        r4 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map makeFullMap()>();

        if r3 == null goto label09;

        $z4 = 1;

        goto label10;

     label09:
        $z4 = 0;

     label10:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(java.lang.String,boolean)>("failure in test: makeFullMap must return a non-null map.", $z4);

        if r3 == r4 goto label11;

        $z5 = 1;

        goto label12;

     label11:
        $z5 = 0;

     label12:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(java.lang.String,boolean)>("failure in test: makeFullMap must return a new map with each invocation.", $z5);

        return;
    }

    public void testMapIsEmpty()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        java.util.Map $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetEmpty()>();

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertEquals(java.lang.String,boolean,boolean)>("Map.isEmpty() should return true with an empty map", 1, $z0);

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void verify()>();

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetFull()>();

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $z1 = interfaceinvoke $r2.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertEquals(java.lang.String,boolean,boolean)>("Map.isEmpty() should return false with a non-empty map", 0, $z1);

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void verify()>();

        return;
    }

    public void testMapSize()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        java.util.Map $r1, $r3;
        int $i0, $i1, $i2;
        java.lang.Object[] $r2;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetEmpty()>();

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertEquals(java.lang.String,int,int)>("Map.size() should be 0 with an empty map", 0, $i0);

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void verify()>();

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetFull()>();

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.lang.Object[] getSampleKeys()>();

        $i1 = lengthof $r2;

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $i2 = interfaceinvoke $r3.<java.util.Map: int size()>();

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertEquals(java.lang.String,int,int)>("Map.size() should equal the number of entries in the map", $i1, $i2);

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void verify()>();

        return;
    }

    public void testMapClear()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        boolean $z0;
        java.util.Map $r2, $r3, $r4, $r5, $r6;
        java.lang.UnsupportedOperationException $r7;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: boolean isRemoveSupported()>();

        if $z0 != 0 goto label5;

     label1:
        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetFull()>();

        $r6 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        interfaceinvoke $r6.<java.util.Map: void clear()>();

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void fail(java.lang.String)>("Expected UnsupportedOperationException on clear");

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

     label4:
        return;

     label5:
        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetEmpty()>();

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        interfaceinvoke $r2.<java.util.Map: void clear()>();

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getConfirmed()>();

        interfaceinvoke $r3.<java.util.Map: void clear()>();

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void verify()>();

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetFull()>();

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        interfaceinvoke $r4.<java.util.Map: void clear()>();

        $r5 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getConfirmed()>();

        interfaceinvoke $r5.<java.util.Map: void clear()>();

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void verify()>();

        return;

        catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
    }

    public void testMapContainsKey()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        java.lang.Object[] r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        java.util.Map $r6, $r8;
        boolean $z0, $z1, $z2;
        int i0, i1, i2, i3;
        java.lang.Object r10, r12;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.lang.Object[] getSampleKeys()>();

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetEmpty()>();

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r10 = r1[i1];

        $r8 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $z1 = interfaceinvoke $r8.<java.util.Map: boolean containsKey(java.lang.Object)>(r10);

        if $z1 != 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(java.lang.String,boolean)>("Map must not contain key when map is empty", $z2);

        i1 = i1 + 1;

        goto label1;

     label4:
        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void verify()>();

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetFull()>();

        i2 = lengthof r1;

        i3 = 0;

     label5:
        if i3 >= i2 goto label6;

        r12 = r1[i3];

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Map must contain key for a mapping in the map. Missing: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r12);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $z0 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>(r12);

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(java.lang.String,boolean)>($r5, $z0);

        i3 = i3 + 1;

        goto label5;

     label6:
        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void verify()>();

        return;
    }

    public void testMapContainsValue()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        java.lang.Object[] r1;
        java.util.Map $r2, $r4;
        boolean $z0, $z1, $z2;
        int i0, i1, i2, i3;
        java.lang.Object r6, r8;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.lang.Object[] getSampleValues()>();

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetEmpty()>();

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r6 = r1[i1];

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $z1 = interfaceinvoke $r4.<java.util.Map: boolean containsValue(java.lang.Object)>(r6);

        if $z1 != 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(java.lang.String,boolean)>("Empty map must not contain value", $z2);

        i1 = i1 + 1;

        goto label1;

     label4:
        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void verify()>();

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetFull()>();

        i2 = lengthof r1;

        i3 = 0;

     label5:
        if i3 >= i2 goto label6;

        r8 = r1[i3];

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsValue(java.lang.Object)>(r8);

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(java.lang.String,boolean)>("Map must contain value for a mapping in the map.", $z0);

        i3 = i3 + 1;

        goto label5;

     label6:
        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void verify()>();

        return;
    }

    public void testMapEquals()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        java.util.Iterator r1;
        java.util.Map $r2, $r3, $r4, $r5, $r6, $r10, $r11, $r13, $r15;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.util.Set $r7;
        java.lang.Object $r16;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetEmpty()>();

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $r3 = r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map confirmed>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean equals(java.lang.Object)>($r3);

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(java.lang.String,boolean)>("Empty maps unequal.", $z0);

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void verify()>();

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetFull()>();

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $r5 = r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map confirmed>;

        $z1 = interfaceinvoke $r4.<java.util.Map: boolean equals(java.lang.Object)>($r5);

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(java.lang.String,boolean)>("Full maps unequal.", $z1);

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void verify()>();

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetFull()>();

        $r6 = r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map confirmed>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Set keySet()>();

        r1 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

        interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke r1.<java.util.Iterator: void remove()>();

        $r10 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $r11 = r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map confirmed>;

        $z2 = interfaceinvoke $r10.<java.util.Map: boolean equals(java.lang.Object)>($r11);

        if $z2 != 0 goto label1;

        $z5 = 1;

        goto label2;

     label1:
        $z5 = 0;

     label2:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(java.lang.String,boolean)>("Different maps equal.", $z5);

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetFull()>();

        $r13 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $z3 = interfaceinvoke $r13.<java.util.Map: boolean equals(java.lang.Object)>(null);

        if $z3 != 0 goto label3;

        $z6 = 1;

        goto label4;

     label3:
        $z6 = 0;

     label4:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(java.lang.String,boolean)>("equals(null) returned true.", $z6);

        $r15 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $r16 = new java.lang.Object;

        specialinvoke $r16.<java.lang.Object: void <init>()>();

        $z4 = interfaceinvoke $r15.<java.util.Map: boolean equals(java.lang.Object)>($r16);

        if $z4 != 0 goto label5;

        $z7 = 1;

        goto label6;

     label5:
        $z7 = 0;

     label6:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(java.lang.String,boolean)>("equals(new Object()) returned true.", $z7);

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void verify()>();

        return;
    }

    public void testMapGet()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        java.lang.Object[] r1, r2;
        int i0, $i1, i2, i3;
        java.lang.Object r3, $r4, $r6, $r7, $r10;
        java.util.Map $r5, $r9;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetEmpty()>();

        r1 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.lang.Object[] getSampleKeys()>();

        r2 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.lang.Object[] getSampleValues()>();

        i0 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        r3 = r1[i2];

        $r9 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);

        if $r10 != null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(java.lang.String,boolean)>("Empty map.get() should return null.", $z0);

        i2 = i2 + 1;

        goto label1;

     label4:
        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void verify()>();

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetFull()>();

        i3 = 0;

     label5:
        $i1 = lengthof r1;

        if i3 >= $i1 goto label6;

        $r4 = r2[i3];

        $r5 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $r6 = r1[i3];

        $r7 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Full map.get() should return value from mapping.", $r4, $r7);

        i3 = i3 + 1;

        goto label5;

     label6:
        return;
    }

    public void testMapHashCode()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        java.util.Map $r2, $r3, $r5, $r6;
        int $i0, $i1, $i2, $i3;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetEmpty()>();

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $i0 = interfaceinvoke $r2.<java.util.Map: int hashCode()>();

        $r3 = r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map confirmed>;

        $i1 = interfaceinvoke $r3.<java.util.Map: int hashCode()>();

        if $i0 != $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(java.lang.String,boolean)>("Empty maps have different hashCodes.", $z0);

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetFull()>();

        $r5 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $i2 = interfaceinvoke $r5.<java.util.Map: int hashCode()>();

        $r6 = r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map confirmed>;

        $i3 = interfaceinvoke $r6.<java.util.Map: int hashCode()>();

        if $i2 != $i3 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(java.lang.String,boolean)>("Equal maps have different hashCodes.", $z1);

        return;
    }

    public void testMapToString()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        java.util.Map $r2, $r5;
        java.lang.String $r3, $r6;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetEmpty()>();

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        if $r3 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(java.lang.String,boolean)>("Empty map toString() should not return null", $z0);

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void verify()>();

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetFull()>();

        $r5 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        if $r6 == null goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(java.lang.String,boolean)>("Empty map toString() should not return null", $z1);

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void verify()>();

        return;
    }

    public void testEmptyMapCompatibility() throws java.lang.Exception
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        java.util.Map r1, r2;
        boolean $z0, $z1, $z2;
        java.lang.String $r3;
        java.lang.Object $r4;
        int $i0;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map makeObject()>();

        $z0 = r1 instanceof java.io.Serializable;

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: boolean skipSerializedCanonicalTests()>();

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: boolean isTestSerialization()>();

        if $z2 == 0 goto label1;

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.lang.String getCanonicalEmptyCollectionName(java.lang.Object)>(r1);

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.lang.Object readExternalFormFromDisk(java.lang.String)>($r3);

        r2 = (java.util.Map) $r4;

        $i0 = interfaceinvoke r2.<java.util.Map: int size()>();

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertEquals(java.lang.String,int,int)>("Map is empty", 0, $i0);

     label1:
        return;
    }

    public void testFullMapCompatibility() throws java.lang.Exception
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        java.util.Map r1, r2;
        boolean $z0, $z1, $z2;
        java.lang.String $r3;
        java.lang.Object $r4;
        java.lang.Object[] $r5;
        int $i0, $i1;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map makeFullMap()>();

        $z0 = r1 instanceof java.io.Serializable;

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: boolean skipSerializedCanonicalTests()>();

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: boolean isTestSerialization()>();

        if $z2 == 0 goto label1;

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.lang.String getCanonicalFullCollectionName(java.lang.Object)>(r1);

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.lang.Object readExternalFormFromDisk(java.lang.String)>($r3);

        r2 = (java.util.Map) $r4;

        $r5 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.lang.Object[] getSampleKeys()>();

        $i0 = lengthof $r5;

        $i1 = interfaceinvoke r2.<java.util.Map: int size()>();

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertEquals(java.lang.String,int,int)>("Map is the right size", $i0, $i1);

     label1:
        return;
    }

    public void testMapPut()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        java.lang.Object[] r1, r2, r3;
        java.lang.Object r4, r5, r6, $r8, $r9, $r12, $r13, $r16, $r18, $r21, $r24, $r26, $r27, $r30, $r31, $r33, $r34, $r36, $r38, $r40, $r43, $r45, $r46, $r48, $r49, $r52, $r54, r61, r62;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16;
        java.util.Map $r7, $r11, $r15, $r17, $r19, $r20, $r23, $r25, $r29, $r32, $r37, $r39, $r42, $r44, $r47, $r51, $r53, $r67;
        int $i0, $i1, $i2, i3, i4, i5;
        java.lang.UnsupportedOperationException $r56, $r59, $r60;
        java.lang.IllegalArgumentException $r57, $r58;
        java.util.Set $r68;
        java.util.Iterator r69;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetEmpty()>();

        r1 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.lang.Object[] getSampleKeys()>();

        r2 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.lang.Object[] getSampleValues()>();

        r3 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.lang.Object[] getNewSampleValues()>();

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: boolean isPutAddSupported()>();

        if $z0 == 0 goto label14;

        i3 = 0;

     label01:
        $i1 = lengthof r1;

        if i3 >= $i1 goto label04;

        $r44 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $r46 = r1[i3];

        $r45 = r2[i3];

        r61 = interfaceinvoke $r44.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r46, $r45);

        $r47 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getConfirmed()>();

        $r49 = r1[i3];

        $r48 = r2[i3];

        interfaceinvoke $r47.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r49, $r48);

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void verify()>();

        if r61 != null goto label02;

        $z13 = 1;

        goto label03;

     label02:
        $z13 = 0;

     label03:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(java.lang.String,boolean)>("First map.put should return null", $z13);

        $r51 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $r52 = r1[i3];

        $z11 = interfaceinvoke $r51.<java.util.Map: boolean containsKey(java.lang.Object)>($r52);

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(java.lang.String,boolean)>("Map should contain key after put", $z11);

        $r53 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $r54 = r2[i3];

        $z12 = interfaceinvoke $r53.<java.util.Map: boolean containsValue(java.lang.Object)>($r54);

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(java.lang.String,boolean)>("Map should contain value after put", $z12);

        i3 = i3 + 1;

        goto label01;

     label04:
        $z6 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: boolean isPutChangeSupported()>();

        if $z6 == 0 goto label10;

        i4 = 0;

     label05:
        $i2 = lengthof r1;

        if i4 >= $i2 goto label09;

        $r29 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $r31 = r1[i4];

        $r30 = r3[i4];

        r62 = interfaceinvoke $r29.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r31, $r30);

        $r32 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getConfirmed()>();

        $r34 = r1[i4];

        $r33 = r3[i4];

        interfaceinvoke $r32.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r34, $r33);

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void verify()>();

        $r36 = r2[i4];

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Map.put should return previous value when changed", $r36, r62);

        $r37 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $r38 = r1[i4];

        $z7 = interfaceinvoke $r37.<java.util.Map: boolean containsKey(java.lang.Object)>($r38);

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(java.lang.String,boolean)>("Map should still contain key after put when changed", $z7);

        $r39 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $r40 = r3[i4];

        $z8 = interfaceinvoke $r39.<java.util.Map: boolean containsValue(java.lang.Object)>($r40);

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(java.lang.String,boolean)>("Map should contain new value after put when changed", $z8);

        $z9 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: boolean isAllowDuplicateValues()>();

        if $z9 != 0 goto label08;

        $r42 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $r43 = r2[i4];

        $z10 = interfaceinvoke $r42.<java.util.Map: boolean containsValue(java.lang.Object)>($r43);

        if $z10 != 0 goto label06;

        $z14 = 1;

        goto label07;

     label06:
        $z14 = 0;

     label07:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(java.lang.String,boolean)>("Map should not contain old value after put when changed", $z14);

     label08:
        i4 = i4 + 1;

        goto label05;

     label09:
        goto label28;

     label10:
        $r25 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $r27 = r1[0];

        $r26 = r3[0];

        interfaceinvoke $r25.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r27, $r26);

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void fail(java.lang.String)>("Expected IllegalArgumentException or UnsupportedOperationException on put (change)");

     label11:
        goto label28;

     label12:
        $r58 := @caughtexception;

        goto label28;

     label13:
        $r60 := @caughtexception;

        goto label28;

     label14:
        $z1 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: boolean isPutChangeSupported()>();

        if $z1 == 0 goto label25;

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetEmpty()>();

     label15:
        $r11 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $r13 = r1[0];

        $r12 = r2[0];

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r12);

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void fail(java.lang.String)>("Expected UnsupportedOperationException or IllegalArgumentException on put (add) when fixed size");

     label16:
        goto label19;

     label17:
        $r57 := @caughtexception;

        goto label19;

     label18:
        $r59 := @caughtexception;

     label19:
        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetFull()>();

        i5 = 0;

        $r67 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $r68 = interfaceinvoke $r67.<java.util.Map: java.util.Set keySet()>();

        r69 = interfaceinvoke $r68.<java.util.Set: java.util.Iterator iterator()>();

     label20:
        $z15 = interfaceinvoke r69.<java.util.Iterator: boolean hasNext()>();

        if $z15 == 0 goto label24;

        $i0 = lengthof r3;

        if i5 >= $i0 goto label24;

        r4 = interfaceinvoke r69.<java.util.Iterator: java.lang.Object next()>();

        $r15 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $r16 = r3[i5];

        r5 = interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r16);

        $r17 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getConfirmed()>();

        $r18 = r3[i5];

        r6 = interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r18);

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void verify()>();

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Map.put should return previous value when changed", r6, r5);

        $r19 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $z2 = interfaceinvoke $r19.<java.util.Map: boolean containsKey(java.lang.Object)>(r4);

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(java.lang.String,boolean)>("Map should still contain key after put when changed", $z2);

        $r20 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $r21 = r3[i5];

        $z3 = interfaceinvoke $r20.<java.util.Map: boolean containsValue(java.lang.Object)>($r21);

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(java.lang.String,boolean)>("Map should contain new value after put when changed", $z3);

        $z4 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: boolean isAllowDuplicateValues()>();

        if $z4 != 0 goto label23;

        $r23 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $r24 = r2[i5];

        $z5 = interfaceinvoke $r23.<java.util.Map: boolean containsValue(java.lang.Object)>($r24);

        if $z5 != 0 goto label21;

        $z16 = 1;

        goto label22;

     label21:
        $z16 = 0;

     label22:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(java.lang.String,boolean)>("Map should not contain old value after put when changed", $z16);

     label23:
        i5 = i5 + 1;

        goto label20;

     label24:
        goto label28;

     label25:
        $r7 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $r9 = r1[0];

        $r8 = r2[0];

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r8);

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void fail(java.lang.String)>("Expected UnsupportedOperationException on put (add)");

     label26:
        goto label28;

     label27:
        $r56 := @caughtexception;

     label28:
        return;

        catch java.lang.IllegalArgumentException from label10 to label11 with label12;
        catch java.lang.UnsupportedOperationException from label10 to label11 with label13;
        catch java.lang.IllegalArgumentException from label15 to label16 with label17;
        catch java.lang.UnsupportedOperationException from label15 to label16 with label18;
        catch java.lang.UnsupportedOperationException from label25 to label26 with label27;
    }

    public void testMapPutNullKey()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        java.lang.Object[] r1;
        boolean $z0, $z1;
        java.util.Map $r2, $r5;
        java.lang.Object $r3, $r6;
        java.lang.IllegalArgumentException $r8;
        java.lang.NullPointerException $r9;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetFull()>();

        r1 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.lang.Object[] getSampleValues()>();

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: boolean isPutAddSupported()>();

        if $z0 == 0 goto label5;

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: boolean isAllowNullKey()>();

        if $z1 == 0 goto label1;

        $r5 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $r6 = r1[0];

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(null, $r6);

        goto label5;

     label1:
        $r2 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $r3 = r1[0];

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(null, $r3);

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void fail(java.lang.String)>("put(null, value) should throw NPE/IAE");

     label2:
        goto label5;

     label3:
        $r9 := @caughtexception;

        goto label5;

     label4:
        $r8 := @caughtexception;

     label5:
        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
        catch java.lang.IllegalArgumentException from label1 to label2 with label4;
    }

    public void testMapPutNullValue()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        java.lang.Object[] r1;
        boolean $z0, $z1;
        java.util.Map $r2, $r5;
        java.lang.Object $r3, $r6;
        java.lang.IllegalArgumentException $r8;
        java.lang.NullPointerException $r9;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetFull()>();

        r1 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.lang.Object[] getSampleKeys()>();

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: boolean isPutAddSupported()>();

        if $z0 == 0 goto label5;

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: boolean isAllowNullValue()>();

        if $z1 == 0 goto label1;

        $r5 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $r6 = r1[0];

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, null);

        goto label5;

     label1:
        $r2 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $r3 = r1[0];

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, null);

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void fail(java.lang.String)>("put(key, null) should throw NPE/IAE");

     label2:
        goto label5;

     label3:
        $r9 := @caughtexception;

        goto label5;

     label4:
        $r8 := @caughtexception;

     label5:
        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
        catch java.lang.IllegalArgumentException from label1 to label2 with label4;
    }

    public void testMapPutAll()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        java.lang.Object[] r1, r2;
        boolean $z0, $z1;
        java.util.Map $r3, $r4, $r6, $r7, $r8, $r10, $r11, $r12, $r13, $r14, $r15, $r19, $r23, $r24, $r31, r33, r35, r36, r37;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7;
        java.util.HashMap $r5, $r9;
        java.lang.Object $r16, $r17, $r20, $r21, $r25, $r26, $r28, $r29;
        java.lang.UnsupportedOperationException $r32;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: boolean isPutAddSupported()>();

        if $z0 != 0 goto label5;

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: boolean isPutChangeSupported()>();

        if $z1 != 0 goto label4;

        r33 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map makeFullMap()>();

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetEmpty()>();

     label1:
        $r31 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        interfaceinvoke $r31.<java.util.Map: void putAll(java.util.Map)>(r33);

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void fail(java.lang.String)>("Expected UnsupportedOperationException on putAll");

     label2:
        goto label4;

     label3:
        $r32 := @caughtexception;

     label4:
        return;

     label5:
        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetEmpty()>();

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $i0 = interfaceinvoke $r3.<java.util.Map: int size()>();

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertEquals(int,int)>(0, $i0);

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r4.<java.util.Map: void putAll(java.util.Map)>($r5);

        $r6 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $i1 = interfaceinvoke $r6.<java.util.Map: int size()>();

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertEquals(int,int)>(0, $i1);

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetFull()>();

        $r7 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        i5 = interfaceinvoke $r7.<java.util.Map: int size()>();

        $r8 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r8.<java.util.Map: void putAll(java.util.Map)>($r9);

        $r10 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $i2 = interfaceinvoke $r10.<java.util.Map: int size()>();

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertEquals(int,int)>(i5, $i2);

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetEmpty()>();

        r35 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map makeFullMap()>();

        $r11 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        interfaceinvoke $r11.<java.util.Map: void putAll(java.util.Map)>(r35);

        $r12 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getConfirmed()>();

        interfaceinvoke $r12.<java.util.Map: void putAll(java.util.Map)>(r35);

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void verify()>();

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetEmpty()>();

        r36 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map makeConfirmedMap()>();

        r1 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.lang.Object[] getSampleKeys()>();

        r2 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.lang.Object[] getSampleValues()>();

        i6 = 0;

     label6:
        $i3 = lengthof r1;

        if i6 >= $i3 goto label7;

        $r29 = r1[i6];

        $r28 = r2[i6];

        interfaceinvoke r36.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r29, $r28);

        i6 = i6 + 1;

        goto label6;

     label7:
        $r13 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        interfaceinvoke $r13.<java.util.Map: void putAll(java.util.Map)>(r36);

        $r14 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getConfirmed()>();

        interfaceinvoke $r14.<java.util.Map: void putAll(java.util.Map)>(r36);

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void verify()>();

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetEmpty()>();

        r37 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map makeConfirmedMap()>();

        $r15 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $r17 = r1[0];

        $r16 = r2[0];

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, $r16);

        $r19 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getConfirmed()>();

        $r21 = r1[0];

        $r20 = r2[0];

        interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r21, $r20);

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void verify()>();

        i7 = 1;

     label8:
        $i4 = lengthof r1;

        if i7 >= $i4 goto label9;

        $r26 = r1[i7];

        $r25 = r2[i7];

        interfaceinvoke r37.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r26, $r25);

        i7 = i7 + 1;

        goto label8;

     label9:
        $r23 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        interfaceinvoke $r23.<java.util.Map: void putAll(java.util.Map)>(r37);

        $r24 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getConfirmed()>();

        interfaceinvoke $r24.<java.util.Map: void putAll(java.util.Map)>(r37);

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void verify()>();

        return;

        catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
    }

    public void testMapRemove()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        java.lang.Object[] r1, r23, r28;
        java.lang.Object r2, r3, $r8, $r10, $r12, $r19, r25, r26, r27;
        boolean $z0, $z1;
        int $i0, $i1, i2, i3, i4, i5, i6, i7;
        java.util.Map $r4, $r5, $r6, $r7, $r9, $r13, $r15, $r16;
        java.util.Set $r17;
        java.util.Iterator $r18;
        java.lang.UnsupportedOperationException $r21;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: boolean isRemoveSupported()>();

        if $z0 != 0 goto label05;

     label01:
        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetFull()>();

        $r15 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $r16 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $r17 = interfaceinvoke $r16.<java.util.Map: java.util.Set keySet()>();

        $r18 = interfaceinvoke $r17.<java.util.Set: java.util.Iterator iterator()>();

        $r19 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r15.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r19);

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void fail(java.lang.String)>("Expected UnsupportedOperationException on remove");

     label02:
        goto label04;

     label03:
        $r21 := @caughtexception;

     label04:
        return;

     label05:
        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetEmpty()>();

        r23 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.lang.Object[] getSampleKeys()>();

        r1 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.lang.Object[] getSampleValues()>();

        i2 = lengthof r23;

        i3 = 0;

     label06:
        if i3 >= i2 goto label09;

        r25 = r23[i3];

        $r13 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        r26 = interfaceinvoke $r13.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r25);

        if r26 != null goto label07;

        $z1 = 1;

        goto label08;

     label07:
        $z1 = 0;

     label08:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(java.lang.String,boolean)>("First map.remove should return null", $z1);

        i3 = i3 + 1;

        goto label06;

     label09:
        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void verify()>();

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetFull()>();

        i4 = 0;

     label10:
        $i0 = lengthof r23;

        if i4 >= $i0 goto label11;

        $r7 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $r8 = r23[i4];

        r27 = interfaceinvoke $r7.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r8);

        $r9 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getConfirmed()>();

        $r10 = r23[i4];

        interfaceinvoke $r9.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r10);

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void verify()>();

        $r12 = r1[i4];

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("map.remove with valid key should return value", $r12, r27);

        i4 = i4 + 1;

        goto label10;

     label11:
        r28 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.lang.Object[] getOtherKeys()>();

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetFull()>();

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        i5 = interfaceinvoke $r4.<java.util.Map: int size()>();

        i6 = lengthof r28;

        i7 = 0;

     label12:
        if i7 >= i6 goto label13;

        r2 = r28[i7];

        $r5 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        r3 = interfaceinvoke $r5.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2);

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertNull(java.lang.String,java.lang.Object)>("map.remove for nonexistent key should return null", r3);

        $r6 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $i1 = interfaceinvoke $r6.<java.util.Map: int size()>();

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertEquals(java.lang.String,int,int)>("map.remove for nonexistent key should not shrink map", i5, $i1);

        i7 = i7 + 1;

        goto label12;

     label13:
        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void verify()>();

        return;

        catch java.lang.UnsupportedOperationException from label01 to label02 with label03;
    }

    public void testValuesClearChangesMap()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.util.Map $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.util.Collection r8, r9;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: boolean isRemoveSupported()>();

        if $z0 != 0 goto label01;

        return;

     label01:
        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetFull()>();

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        r8 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $i0 = interfaceinvoke $r2.<java.util.Map: int size()>();

        if $i0 <= 0 goto label02;

        $z1 = 1;

        goto label03;

     label02:
        $z1 = 0;

     label03:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(boolean)>($z1);

        $i1 = interfaceinvoke r8.<java.util.Collection: int size()>();

        if $i1 <= 0 goto label04;

        $z2 = 1;

        goto label05;

     label04:
        $z2 = 0;

     label05:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(boolean)>($z2);

        interfaceinvoke r8.<java.util.Collection: void clear()>();

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $i2 = interfaceinvoke $r3.<java.util.Map: int size()>();

        if $i2 != 0 goto label06;

        $z3 = 1;

        goto label07;

     label06:
        $z3 = 0;

     label07:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(boolean)>($z3);

        $i3 = interfaceinvoke r8.<java.util.Collection: int size()>();

        if $i3 != 0 goto label08;

        $z4 = 1;

        goto label09;

     label08:
        $z4 = 0;

     label09:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(boolean)>($z4);

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetFull()>();

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        r9 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>();

        $r5 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $i4 = interfaceinvoke $r5.<java.util.Map: int size()>();

        if $i4 <= 0 goto label10;

        $z5 = 1;

        goto label11;

     label10:
        $z5 = 0;

     label11:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(boolean)>($z5);

        $i5 = interfaceinvoke r9.<java.util.Collection: int size()>();

        if $i5 <= 0 goto label12;

        $z6 = 1;

        goto label13;

     label12:
        $z6 = 0;

     label13:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(boolean)>($z6);

        $r6 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        interfaceinvoke $r6.<java.util.Map: void clear()>();

        $r7 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $i6 = interfaceinvoke $r7.<java.util.Map: int size()>();

        if $i6 != 0 goto label14;

        $z7 = 1;

        goto label15;

     label14:
        $z7 = 0;

     label15:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(boolean)>($z7);

        $i7 = interfaceinvoke r9.<java.util.Collection: int size()>();

        if $i7 != 0 goto label16;

        $z8 = 1;

        goto label17;

     label16:
        $z8 = 0;

     label17:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(boolean)>($z8);

        return;
    }

    public void testKeySetClearChangesMap()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.util.Map $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.util.Set r8, r9;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: boolean isRemoveSupported()>();

        if $z0 != 0 goto label01;

        return;

     label01:
        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetFull()>();

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        r8 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $i0 = interfaceinvoke $r2.<java.util.Map: int size()>();

        if $i0 <= 0 goto label02;

        $z1 = 1;

        goto label03;

     label02:
        $z1 = 0;

     label03:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(boolean)>($z1);

        $i1 = interfaceinvoke r8.<java.util.Set: int size()>();

        if $i1 <= 0 goto label04;

        $z2 = 1;

        goto label05;

     label04:
        $z2 = 0;

     label05:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(boolean)>($z2);

        interfaceinvoke r8.<java.util.Set: void clear()>();

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $i2 = interfaceinvoke $r3.<java.util.Map: int size()>();

        if $i2 != 0 goto label06;

        $z3 = 1;

        goto label07;

     label06:
        $z3 = 0;

     label07:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(boolean)>($z3);

        $i3 = interfaceinvoke r8.<java.util.Set: int size()>();

        if $i3 != 0 goto label08;

        $z4 = 1;

        goto label09;

     label08:
        $z4 = 0;

     label09:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(boolean)>($z4);

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetFull()>();

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        r9 = interfaceinvoke $r4.<java.util.Map: java.util.Set keySet()>();

        $r5 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $i4 = interfaceinvoke $r5.<java.util.Map: int size()>();

        if $i4 <= 0 goto label10;

        $z5 = 1;

        goto label11;

     label10:
        $z5 = 0;

     label11:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(boolean)>($z5);

        $i5 = interfaceinvoke r9.<java.util.Set: int size()>();

        if $i5 <= 0 goto label12;

        $z6 = 1;

        goto label13;

     label12:
        $z6 = 0;

     label13:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(boolean)>($z6);

        $r6 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        interfaceinvoke $r6.<java.util.Map: void clear()>();

        $r7 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $i6 = interfaceinvoke $r7.<java.util.Map: int size()>();

        if $i6 != 0 goto label14;

        $z7 = 1;

        goto label15;

     label14:
        $z7 = 0;

     label15:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(boolean)>($z7);

        $i7 = interfaceinvoke r9.<java.util.Set: int size()>();

        if $i7 != 0 goto label16;

        $z8 = 1;

        goto label17;

     label16:
        $z8 = 0;

     label17:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(boolean)>($z8);

        return;
    }

    public void testEntrySetClearChangesMap()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.util.Map $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.util.Set r8, r9;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: boolean isRemoveSupported()>();

        if $z0 != 0 goto label01;

        return;

     label01:
        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetFull()>();

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        r8 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $i0 = interfaceinvoke $r2.<java.util.Map: int size()>();

        if $i0 <= 0 goto label02;

        $z1 = 1;

        goto label03;

     label02:
        $z1 = 0;

     label03:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(boolean)>($z1);

        $i1 = interfaceinvoke r8.<java.util.Set: int size()>();

        if $i1 <= 0 goto label04;

        $z2 = 1;

        goto label05;

     label04:
        $z2 = 0;

     label05:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(boolean)>($z2);

        interfaceinvoke r8.<java.util.Set: void clear()>();

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $i2 = interfaceinvoke $r3.<java.util.Map: int size()>();

        if $i2 != 0 goto label06;

        $z3 = 1;

        goto label07;

     label06:
        $z3 = 0;

     label07:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(boolean)>($z3);

        $i3 = interfaceinvoke r8.<java.util.Set: int size()>();

        if $i3 != 0 goto label08;

        $z4 = 1;

        goto label09;

     label08:
        $z4 = 0;

     label09:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(boolean)>($z4);

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetFull()>();

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        r9 = interfaceinvoke $r4.<java.util.Map: java.util.Set entrySet()>();

        $r5 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $i4 = interfaceinvoke $r5.<java.util.Map: int size()>();

        if $i4 <= 0 goto label10;

        $z5 = 1;

        goto label11;

     label10:
        $z5 = 0;

     label11:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(boolean)>($z5);

        $i5 = interfaceinvoke r9.<java.util.Set: int size()>();

        if $i5 <= 0 goto label12;

        $z6 = 1;

        goto label13;

     label12:
        $z6 = 0;

     label13:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(boolean)>($z6);

        $r6 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        interfaceinvoke $r6.<java.util.Map: void clear()>();

        $r7 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $i6 = interfaceinvoke $r7.<java.util.Map: int size()>();

        if $i6 != 0 goto label14;

        $z7 = 1;

        goto label15;

     label14:
        $z7 = 0;

     label15:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(boolean)>($z7);

        $i7 = interfaceinvoke r9.<java.util.Set: int size()>();

        if $i7 != 0 goto label16;

        $z8 = 1;

        goto label17;

     label16:
        $z8 = 0;

     label17:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(boolean)>($z8);

        return;
    }

    public void testEntrySetContains1()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        java.util.Set r1;
        java.util.Map$Entry r2;
        java.util.Map $r3;
        java.util.Iterator $r4;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetFull()>();

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        r1 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.util.Map$Entry) $r5;

        $z0 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>(r2);

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertEquals(boolean,boolean)>(1, $z0);

        return;
    }

    public void testEntrySetContains2()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        java.util.Set r1;
        java.util.Map$Entry r2, r3;
        java.util.Map $r4;
        java.util.Iterator $r5;
        java.lang.Object $r6;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetFull()>();

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        r1 = interfaceinvoke $r4.<java.util.Map: java.util.Set entrySet()>();

        $r5 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.util.Map$Entry) $r6;

        r3 = staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: java.util.Map$Entry cloneMapEntry(java.util.Map$Entry)>(r2);

        $z0 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>(r3);

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertEquals(boolean,boolean)>(1, $z0);

        return;
    }

    public void testEntrySetContains3()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        java.util.Set r1, $r11;
        java.util.Map$Entry r2, r4;
        java.util.Map $r5;
        java.util.Iterator $r6, $r12;
        java.lang.Object $r7, $r9, $r13;
        java.util.HashMap $r8;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetFull()>();

        $r5 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        r1 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>();

        $r6 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.util.Map$Entry) $r7;

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        $r9 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, "A VERY DIFFERENT VALUE");

        $r11 = virtualinvoke $r8.<java.util.HashMap: java.util.Set entrySet()>();

        $r12 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r13;

        $z0 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>(r4);

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertEquals(boolean,boolean)>(0, $z0);

        return;
    }

    public void testEntrySetRemove1()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        int i0, $i1, $i2;
        java.util.Set r1;
        java.util.Map$Entry r2;
        java.lang.Object r3, $r7;
        boolean $z0, $z1, $z2;
        java.util.Map $r4, $r5, $r8, $r9;
        java.util.Iterator $r6;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: boolean isRemoveSupported()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetFull()>();

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        i0 = interfaceinvoke $r4.<java.util.Map: int size()>();

        $r5 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        r1 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>();

        $r6 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.util.Map$Entry) $r7;

        r3 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z1 = interfaceinvoke r1.<java.util.Set: boolean remove(java.lang.Object)>(r2);

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertEquals(boolean,boolean)>(1, $z1);

        $r8 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $z2 = interfaceinvoke $r8.<java.util.Map: boolean containsKey(java.lang.Object)>(r3);

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertEquals(boolean,boolean)>(0, $z2);

        $i1 = i0 - 1;

        $r9 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $i2 = interfaceinvoke $r9.<java.util.Map: int size()>();

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertEquals(int,int)>($i1, $i2);

        return;
    }

    public void testEntrySetRemove2()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        int i0, $i1, $i2;
        java.util.Set r1;
        java.util.Map$Entry r2, r4;
        java.lang.Object r3, $r8;
        boolean $z0, $z1, $z2;
        java.util.Map $r5, $r6, $r9, $r10;
        java.util.Iterator $r7;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: boolean isRemoveSupported()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetFull()>();

        $r5 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        i0 = interfaceinvoke $r5.<java.util.Map: int size()>();

        $r6 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        r1 = interfaceinvoke $r6.<java.util.Map: java.util.Set entrySet()>();

        $r7 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.util.Map$Entry) $r8;

        r3 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        r4 = staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: java.util.Map$Entry cloneMapEntry(java.util.Map$Entry)>(r2);

        $z1 = interfaceinvoke r1.<java.util.Set: boolean remove(java.lang.Object)>(r4);

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertEquals(boolean,boolean)>(1, $z1);

        $r9 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $z2 = interfaceinvoke $r9.<java.util.Map: boolean containsKey(java.lang.Object)>(r3);

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertEquals(boolean,boolean)>(0, $z2);

        $i1 = i0 - 1;

        $r10 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $i2 = interfaceinvoke $r10.<java.util.Map: int size()>();

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertEquals(int,int)>($i1, $i2);

        return;
    }

    public void testEntrySetRemove3()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        int i0, $i1;
        java.util.Set r1, $r13;
        java.util.Map$Entry r2, r5;
        java.lang.Object r3, $r9, $r11, $r15;
        boolean $z0, $z1, $z2;
        java.util.Map $r6, $r7, $r16, $r17;
        java.util.Iterator $r8, $r14;
        java.util.HashMap $r10;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: boolean isRemoveSupported()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetFull()>();

        $r6 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        i0 = interfaceinvoke $r6.<java.util.Map: int size()>();

        $r7 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        r1 = interfaceinvoke $r7.<java.util.Map: java.util.Set entrySet()>();

        $r8 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.util.Map$Entry) $r9;

        r3 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r10 = new java.util.HashMap;

        specialinvoke $r10.<java.util.HashMap: void <init>()>();

        $r11 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, "A VERY DIFFERENT VALUE");

        $r13 = virtualinvoke $r10.<java.util.HashMap: java.util.Set entrySet()>();

        $r14 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>();

        $r15 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r15;

        $z1 = interfaceinvoke r1.<java.util.Set: boolean remove(java.lang.Object)>(r5);

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertEquals(boolean,boolean)>(0, $z1);

        $r16 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $z2 = interfaceinvoke $r16.<java.util.Map: boolean containsKey(java.lang.Object)>(r3);

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertEquals(boolean,boolean)>(1, $z2);

        $r17 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $i1 = interfaceinvoke $r17.<java.util.Map: int size()>();

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertEquals(int,int)>(i0, $i1);

        return;
    }

    public void testValuesRemoveChangesMap()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        java.lang.Object[] r1;
        java.util.Collection r2;
        int i0, i1, i2;
        java.lang.Object r4;
        java.util.Map $r6, $r7, $r9;
        boolean $z0, $z1, $z2, $z4, $z5;
        java.lang.UnsupportedOperationException $r11;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetFull()>();

        r1 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.lang.Object[] getSampleValues()>();

        $r6 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        r2 = interfaceinvoke $r6.<java.util.Map: java.util.Collection values()>();

        i0 = lengthof r1;

        i1 = 0;

     label01:
        if i1 >= i0 goto label13;

        r4 = r1[i1];

        $r7 = r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map map>;

        $z0 = interfaceinvoke $r7.<java.util.Map: boolean containsValue(java.lang.Object)>(r4);

        if $z0 == 0 goto label12;

        i2 = 0;

     label02:
        $z1 = interfaceinvoke r2.<java.util.Collection: boolean contains(java.lang.Object)>(r4);

        if $z1 == 0 goto label07;

        if i2 >= 10000 goto label07;

     label03:
        interfaceinvoke r2.<java.util.Collection: boolean remove(java.lang.Object)>(r4);

     label04:
        goto label06;

     label05:
        $r11 := @caughtexception;

        return;

     label06:
        i2 = i2 + 1;

        goto label02;

     label07:
        if i2 >= 10000 goto label08;

        $z4 = 1;

        goto label09;

     label08:
        $z4 = 0;

     label09:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(java.lang.String,boolean)>("values().remove(obj) is broken", $z4);

        $r9 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $z2 = interfaceinvoke $r9.<java.util.Map: boolean containsValue(java.lang.Object)>(r4);

        if $z2 != 0 goto label10;

        $z5 = 1;

        goto label11;

     label10:
        $z5 = 0;

     label11:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(java.lang.String,boolean)>("Value should have been removed from the underlying map.", $z5);

     label12:
        i1 = i1 + 1;

        goto label01;

     label13:
        return;

        catch java.lang.UnsupportedOperationException from label03 to label04 with label05;
    }

    public void testValuesRemoveAll()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        java.util.Collection r1;
        java.util.List r2;
        java.util.Map $r3, $r6, $r7;
        java.lang.Object[] $r4;
        boolean $z0, $z1, $z2, $z3;
        java.util.Set $r5;
        int $i0, $i1;
        java.lang.UnsupportedOperationException $r8, $r9;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetFull()>();

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        r1 = interfaceinvoke $r3.<java.util.Map: java.util.Collection values()>();

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.lang.Object[] getSampleValues()>();

        r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        $z0 = interfaceinvoke r1.<java.util.Collection: boolean equals(java.lang.Object)>(r2);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r5 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        $z1 = interfaceinvoke r1.<java.util.Collection: boolean removeAll(java.util.Collection)>($r5);

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertFalse(boolean)>($z1);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        return;

     label4:
        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        $r6 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $i1 = interfaceinvoke $r6.<java.util.Map: int size()>();

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertEquals(int,int)>($i0, $i1);

     label5:
        $z2 = interfaceinvoke r1.<java.util.Collection: boolean removeAll(java.util.Collection)>(r2);

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(boolean)>($z2);

     label6:
        goto label8;

     label7:
        $r9 := @caughtexception;

        return;

     label8:
        $r7 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $z3 = interfaceinvoke $r7.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(boolean)>($z3);

        return;

        catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
        catch java.lang.UnsupportedOperationException from label5 to label6 with label7;
    }

    public void testValuesRetainAll()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        java.util.Collection r1;
        java.util.List r2;
        java.util.Map $r3, $r5, $r7;
        java.lang.Object[] $r4;
        boolean $z0, $z1, $z2, $z3;
        int $i0, $i1;
        java.util.Set $r6;
        java.lang.UnsupportedOperationException $r8, $r9;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetFull()>();

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        r1 = interfaceinvoke $r3.<java.util.Map: java.util.Collection values()>();

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.lang.Object[] getSampleValues()>();

        r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        $z0 = interfaceinvoke r1.<java.util.Collection: boolean equals(java.lang.Object)>(r2);

        if $z0 != 0 goto label1;

        return;

     label1:
        $z1 = interfaceinvoke r1.<java.util.Collection: boolean retainAll(java.util.Collection)>(r2);

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertFalse(boolean)>($z1);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        return;

     label4:
        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        $r5 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $i1 = interfaceinvoke $r5.<java.util.Map: int size()>();

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertEquals(int,int)>($i0, $i1);

     label5:
        $r6 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        $z2 = interfaceinvoke r1.<java.util.Collection: boolean retainAll(java.util.Collection)>($r6);

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(boolean)>($z2);

     label6:
        goto label8;

     label7:
        $r9 := @caughtexception;

        return;

     label8:
        $r7 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $z3 = interfaceinvoke $r7.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(boolean)>($z3);

        return;

        catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
        catch java.lang.UnsupportedOperationException from label5 to label6 with label7;
    }

    public void testValuesIteratorRemoveChangesMap()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        java.util.List r1;
        java.util.Map r2, $r8, $r9, $r17;
        java.util.Collection r3;
        java.util.Iterator r4;
        java.lang.Object r5, $r10;
        java.lang.Object[] $r7;
        boolean $z0, $z1, $z2, $z3, z4;
        int $i0, $i1, $i2;
        java.lang.Integer $r11, r20;
        java.lang.StringBuilder $r13;
        java.lang.String $r16, $r23;
        java.lang.UnsupportedOperationException $r19;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetFull()>();

        $r7 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.lang.Object[] getSampleValues()>();

        r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r7);

        r2 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Map getCardinalityMap(java.lang.Iterable)>(r1);

        $r8 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        r3 = interfaceinvoke $r8.<java.util.Map: java.util.Collection values()>();

        r4 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $r10 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        r20 = (java.lang.Integer) $r10;

        if r20 != null goto label02;

        return;

     label02:
        interfaceinvoke r4.<java.util.Iterator: void remove()>();

        $i0 = virtualinvoke r20.<java.lang.Integer: int intValue()>();

        $i1 = $i0 - 1;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, $r11);

     label03:
        goto label05;

     label04:
        $r19 := @caughtexception;

        return;

     label05:
        $i2 = virtualinvoke $r11.<java.lang.Integer: int intValue()>();

        if $i2 <= 0 goto label06;

        $z3 = 1;

        goto label07;

     label06:
        $z3 = 0;

     label07:
        z4 = $z3;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>("Value should ");

        if $z3 == 0 goto label08;

        $r23 = "yet ";

        goto label09;

     label08:
        $r23 = "no longer ";

     label09:
        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("be present in the underlying map");

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $z2 = interfaceinvoke $r17.<java.util.Map: boolean containsValue(java.lang.Object)>(r5);

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertEquals(java.lang.String,boolean,boolean)>($r16, z4, $z2);

        goto label01;

     label10:
        $r9 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $z1 = interfaceinvoke $r9.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(boolean)>($z1);

        return;

        catch java.lang.UnsupportedOperationException from label02 to label03 with label04;
    }

    public void testKeySetRemoveChangesMap()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        java.lang.Object[] r1;
        java.util.Set r2;
        int i0, i1;
        java.lang.Object r4;
        java.util.Map $r6, $r8;
        boolean $z1, $z2;
        java.lang.UnsupportedOperationException $r9;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetFull()>();

        r1 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.lang.Object[] getSampleKeys()>();

        $r6 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        r2 = interfaceinvoke $r6.<java.util.Map: java.util.Set keySet()>();

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label8;

        r4 = r1[i1];

     label2:
        interfaceinvoke r2.<java.util.Set: boolean remove(java.lang.Object)>(r4);

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;

        return;

     label5:
        $r8 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $z1 = interfaceinvoke $r8.<java.util.Map: boolean containsKey(java.lang.Object)>(r4);

        if $z1 != 0 goto label6;

        $z2 = 1;

        goto label7;

     label6:
        $z2 = 0;

     label7:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(java.lang.String,boolean)>("Key should have been removed from the underlying map.", $z2);

        i1 = i1 + 1;

        goto label1;

     label8:
        return;

        catch java.lang.UnsupportedOperationException from label2 to label3 with label4;
    }

    public void testKeySetRemoveAll()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        java.util.Set r1, $r5;
        java.util.List r2;
        java.util.Map $r3, $r6;
        java.lang.Object[] $r4;
        boolean $z0, $z1, $z2, $z3;
        java.lang.UnsupportedOperationException $r7, $r8;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetFull()>();

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        r1 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.lang.Object[] getSampleKeys()>();

        r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        $z0 = interfaceinvoke r1.<java.util.Set: boolean equals(java.lang.Object)>(r2);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r5 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        $z1 = interfaceinvoke r1.<java.util.Set: boolean removeAll(java.util.Collection)>($r5);

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertFalse(boolean)>($z1);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        return;

     label4:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertEquals(java.lang.Object,java.lang.Object)>(r2, r1);

     label5:
        $z2 = interfaceinvoke r1.<java.util.Set: boolean removeAll(java.util.Collection)>(r2);

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(boolean)>($z2);

     label6:
        goto label8;

     label7:
        $r7 := @caughtexception;

        return;

     label8:
        $r6 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $z3 = interfaceinvoke $r6.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(boolean)>($z3);

        return;

        catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
        catch java.lang.UnsupportedOperationException from label5 to label6 with label7;
    }

    public void testKeySetRetainAll()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        java.util.Set r1, $r5;
        java.util.List r2;
        java.util.Map $r3, $r6;
        java.lang.Object[] $r4;
        boolean $z0, $z1, $z2, $z3;
        java.lang.UnsupportedOperationException $r7, $r8;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetFull()>();

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        r1 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.lang.Object[] getSampleKeys()>();

        r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        $z0 = interfaceinvoke r1.<java.util.Set: boolean equals(java.lang.Object)>(r2);

        if $z0 != 0 goto label1;

        return;

     label1:
        $z1 = interfaceinvoke r1.<java.util.Set: boolean retainAll(java.util.Collection)>(r2);

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertFalse(boolean)>($z1);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        return;

     label4:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertEquals(java.lang.Object,java.lang.Object)>(r2, r1);

     label5:
        $r5 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        $z2 = interfaceinvoke r1.<java.util.Set: boolean retainAll(java.util.Collection)>($r5);

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(boolean)>($z2);

     label6:
        goto label8;

     label7:
        $r8 := @caughtexception;

        return;

     label8:
        $r6 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $z3 = interfaceinvoke $r6.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(boolean)>($z3);

        return;

        catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
        catch java.lang.UnsupportedOperationException from label5 to label6 with label7;
    }

    public void testKeySetIteratorRemoveChangesMap()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        java.util.Iterator r1;
        java.lang.Object r2;
        java.util.Map $r4, $r6;
        java.util.Set $r5;
        boolean $z0, $z1;
        java.lang.UnsupportedOperationException $r7;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetFull()>();

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set keySet()>();

        r1 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

     label2:
        interfaceinvoke r1.<java.util.Iterator: void remove()>();

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        return;

     label5:
        $r6 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $z1 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>(r2);

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertFalse(boolean)>($z1);

        goto label1;

     label6:
        return;

        catch java.lang.UnsupportedOperationException from label2 to label3 with label4;
    }

    public void testEntrySetRemoveChangesMap()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        java.lang.Object[] r1, r2;
        java.util.Set r3;
        java.util.Map $r5, $r10;
        int $i0, i1;
        org.apache.commons.collections4.keyvalue.DefaultMapEntry $r6;
        java.lang.Object $r7, $r8, $r11;
        boolean $z1, $z2;
        java.lang.UnsupportedOperationException $r12;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetFull()>();

        r1 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.lang.Object[] getSampleKeys()>();

        r2 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.lang.Object[] getSampleValues()>();

        $r5 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        r3 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>();

        i1 = 0;

     label1:
        $i0 = lengthof r1;

        if i1 >= $i0 goto label8;

     label2:
        $r6 = new org.apache.commons.collections4.keyvalue.DefaultMapEntry;

        $r8 = r1[i1];

        $r7 = r2[i1];

        specialinvoke $r6.<org.apache.commons.collections4.keyvalue.DefaultMapEntry: void <init>(java.lang.Object,java.lang.Object)>($r8, $r7);

        interfaceinvoke r3.<java.util.Set: boolean remove(java.lang.Object)>($r6);

     label3:
        goto label5;

     label4:
        $r12 := @caughtexception;

        return;

     label5:
        $r10 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $r11 = r1[i1];

        $z1 = interfaceinvoke $r10.<java.util.Map: boolean containsKey(java.lang.Object)>($r11);

        if $z1 != 0 goto label6;

        $z2 = 1;

        goto label7;

     label6:
        $z2 = 0;

     label7:
        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(java.lang.String,boolean)>("Entry should have been removed from the underlying map.", $z2);

        i1 = i1 + 1;

        goto label1;

     label8:
        return;

        catch java.lang.UnsupportedOperationException from label2 to label3 with label4;
    }

    public void testEntrySetRemoveAll()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        java.lang.Object[] r1, r2;
        int $i0, $i1, $i2, i3;
        java.util.Map $r3, $r6, $r7, $r8, $r10;
        java.util.HashSet $r4;
        java.util.Set $r5, r16;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Object $r9, $r11, r14, r15;
        java.lang.UnsupportedOperationException $r12, $r13;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetFull()>();

        r1 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.lang.Object[] getSampleKeys()>();

        r2 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.lang.Object[] getSampleValues()>();

        i3 = 0;

     label01:
        $i0 = lengthof r1;

        if i3 >= $i0 goto label05;

        $r8 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $r9 = r1[i3];

        $z3 = interfaceinvoke $r8.<java.util.Map: boolean containsKey(java.lang.Object)>($r9);

        if $z3 != 0 goto label02;

        return;

     label02:
        r14 = r2[i3];

        $r10 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $r11 = r1[i3];

        r15 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>($r11);

        if r14 == r15 goto label04;

        if r14 == null goto label03;

        $z4 = virtualinvoke r14.<java.lang.Object: boolean equals(java.lang.Object)>(r15);

        if $z4 == 0 goto label03;

        goto label04;

     label03:
        return;

     label04:
        i3 = i3 + 1;

        goto label01;

     label05:
        $r3 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        r16 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>(java.util.Collection)>(r16);

     label06:
        $r5 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        $z0 = interfaceinvoke r16.<java.util.Set: boolean removeAll(java.util.Collection)>($r5);

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertFalse(boolean)>($z0);

     label07:
        goto label09;

     label08:
        $r12 := @caughtexception;

        return;

     label09:
        $i1 = lengthof r1;

        $r6 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $i2 = interfaceinvoke $r6.<java.util.Map: int size()>();

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertEquals(int,int)>($i1, $i2);

     label10:
        $z1 = interfaceinvoke r16.<java.util.Set: boolean removeAll(java.util.Collection)>($r4);

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(boolean)>($z1);

     label11:
        goto label13;

     label12:
        $r13 := @caughtexception;

        return;

     label13:
        $r7 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $z2 = interfaceinvoke $r7.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(boolean)>($z2);

        return;

        catch java.lang.UnsupportedOperationException from label06 to label07 with label08;
        catch java.lang.UnsupportedOperationException from label10 to label11 with label12;
    }

    public void testEntrySetRetainAll()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        java.lang.Object[] r1, r2;
        int $i0, $i1, $i2, i3;
        java.util.Map $r3, $r5, $r7, $r8, $r10;
        java.util.HashSet $r4;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Set $r6, r16;
        java.lang.Object $r9, $r11, r14, r15;
        java.lang.UnsupportedOperationException $r12, $r13;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetFull()>();

        r1 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.lang.Object[] getSampleKeys()>();

        r2 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.lang.Object[] getSampleValues()>();

        i3 = 0;

     label01:
        $i0 = lengthof r1;

        if i3 >= $i0 goto label05;

        $r8 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $r9 = r1[i3];

        $z3 = interfaceinvoke $r8.<java.util.Map: boolean containsKey(java.lang.Object)>($r9);

        if $z3 != 0 goto label02;

        return;

     label02:
        r14 = r2[i3];

        $r10 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $r11 = r1[i3];

        r15 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>($r11);

        if r14 == r15 goto label04;

        if r14 == null goto label03;

        $z4 = virtualinvoke r14.<java.lang.Object: boolean equals(java.lang.Object)>(r15);

        if $z4 == 0 goto label03;

        goto label04;

     label03:
        return;

     label04:
        i3 = i3 + 1;

        goto label01;

     label05:
        $r3 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        r16 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>(java.util.Collection)>(r16);

     label06:
        $z0 = interfaceinvoke r16.<java.util.Set: boolean retainAll(java.util.Collection)>($r4);

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertFalse(boolean)>($z0);

     label07:
        goto label09;

     label08:
        $r13 := @caughtexception;

        return;

     label09:
        $i1 = lengthof r1;

        $r5 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $i2 = interfaceinvoke $r5.<java.util.Map: int size()>();

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertEquals(int,int)>($i1, $i2);

     label10:
        $r6 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        $z1 = interfaceinvoke r16.<java.util.Set: boolean retainAll(java.util.Collection)>($r6);

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(boolean)>($z1);

     label11:
        goto label13;

     label12:
        $r12 := @caughtexception;

        return;

     label13:
        $r7 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $z2 = interfaceinvoke $r7.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(boolean)>($z2);

        return;

        catch java.lang.UnsupportedOperationException from label06 to label07 with label08;
        catch java.lang.UnsupportedOperationException from label10 to label11 with label12;
    }

    public void testEntrySetIteratorRemoveChangesMap()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        java.util.Iterator r1;
        java.lang.Object r2, $r6;
        java.util.Map $r4, $r8;
        java.util.Set $r5;
        boolean $z0, $z1;
        java.util.Map$Entry $r7;
        java.lang.UnsupportedOperationException $r9;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void resetFull()>();

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set entrySet()>();

        r1 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (java.util.Map$Entry) $r6;

        r2 = interfaceinvoke $r7.<java.util.Map$Entry: java.lang.Object getKey()>();

     label2:
        interfaceinvoke r1.<java.util.Iterator: void remove()>();

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;

        return;

     label5:
        $r8 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $z1 = interfaceinvoke $r8.<java.util.Map: boolean containsKey(java.lang.Object)>(r2);

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertFalse(boolean)>($z1);

        goto label1;

     label6:
        return;

        catch java.lang.UnsupportedOperationException from label2 to label3 with label4;
    }

    private java.util.Map$Entry[] makeEntryArray(java.lang.Object[], java.lang.Object[])
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        java.lang.Object[] r1, r2;
        java.util.Map$Entry[] r3;
        java.util.Map r4;
        int $i0, $i1, i2;
        java.lang.Object $r5, $r6, $r10;
        java.util.Set $r8;
        java.util.Iterator $r9;
        java.util.Map$Entry $r11;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        r1 := @parameter0: java.lang.Object[];

        r2 := @parameter1: java.lang.Object[];

        $i0 = lengthof r1;

        r3 = newarray (java.util.Map$Entry)[$i0];

        i2 = 0;

     label1:
        $i1 = lengthof r1;

        if i2 >= $i1 goto label2;

        r4 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map makeConfirmedMap()>();

        $r6 = r1[i2];

        $r5 = r2[i2];

        interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r5);

        $r8 = interfaceinvoke r4.<java.util.Map: java.util.Set entrySet()>();

        $r9 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (java.util.Map$Entry) $r10;

        r3[i2] = $r11;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r3;
    }

    public org.apache.commons.collections4.BulkTest bulkTestMapEntrySet()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        org.apache.commons.collections4.map.AbstractMapTest$TestMapEntrySet $r1;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        $r1 = new org.apache.commons.collections4.map.AbstractMapTest$TestMapEntrySet;

        specialinvoke $r1.<org.apache.commons.collections4.map.AbstractMapTest$TestMapEntrySet: void <init>(org.apache.commons.collections4.map.AbstractMapTest)>(r0);

        return $r1;
    }

    public org.apache.commons.collections4.BulkTest bulkTestMapKeySet()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        org.apache.commons.collections4.map.AbstractMapTest$TestMapKeySet $r1;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        $r1 = new org.apache.commons.collections4.map.AbstractMapTest$TestMapKeySet;

        specialinvoke $r1.<org.apache.commons.collections4.map.AbstractMapTest$TestMapKeySet: void <init>(org.apache.commons.collections4.map.AbstractMapTest)>(r0);

        return $r1;
    }

    public org.apache.commons.collections4.BulkTest bulkTestMapValues()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        org.apache.commons.collections4.map.AbstractMapTest$TestMapValues $r1;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        $r1 = new org.apache.commons.collections4.map.AbstractMapTest$TestMapValues;

        specialinvoke $r1.<org.apache.commons.collections4.map.AbstractMapTest$TestMapValues: void <init>(org.apache.commons.collections4.map.AbstractMapTest)>(r0);

        return $r1;
    }

    public void resetEmpty()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        java.util.Map $r1, $r2;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map makeObject()>();

        r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map map> = $r1;

        specialinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void views()>();

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map makeConfirmedMap()>();

        r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map confirmed> = $r2;

        return;
    }

    public void resetFull()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        java.lang.Object[] r1, r2;
        java.util.Map $r3, $r4, $r7;
        int $i0, i1;
        java.lang.Object $r5, $r6;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map makeFullMap()>();

        r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map map> = $r3;

        specialinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void views()>();

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map makeConfirmedMap()>();

        r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map confirmed> = $r4;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.lang.Object[] getSampleKeys()>();

        r2 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.lang.Object[] getSampleValues()>();

        i1 = 0;

     label1:
        $i0 = lengthof r1;

        if i1 >= $i0 goto label2;

        $r7 = r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map confirmed>;

        $r6 = r1[i1];

        $r5 = r2[i1];

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r5);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void views()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        java.util.Map $r1, $r3;
        java.util.Set $r2, $r4;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Set keySet> = $r2;

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Set entrySet> = $r4;

        return;
    }

    public void verify()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void verifyMap()>();

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void verifyEntrySet()>();

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void verifyKeySet()>();

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void verifyValues()>();

        return;
    }

    public void verifyMap()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        int i0, $i1, $i2, $i3;
        boolean z0, $z1, $z2;
        java.util.Map $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getConfirmed()>();

        i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getConfirmed()>();

        z0 = interfaceinvoke $r2.<java.util.Map: boolean isEmpty()>();

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $i1 = interfaceinvoke $r3.<java.util.Map: int size()>();

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertEquals(java.lang.String,int,int)>("Map should be same size as HashMap", i0, $i1);

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $z1 = interfaceinvoke $r4.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertEquals(java.lang.String,boolean,boolean)>("Map should be empty if HashMap is", z0, $z1);

        $r5 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getConfirmed()>();

        $i2 = interfaceinvoke $r5.<java.util.Map: int hashCode()>();

        $r6 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $i3 = interfaceinvoke $r6.<java.util.Map: int hashCode()>();

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertEquals(java.lang.String,int,int)>("hashCodes should be the same", $i2, $i3);

        $r8 = r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map map>;

        $r7 = r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map confirmed>;

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Map should still equal HashMap", $r8, $r7);

        $r9 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $r10 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getConfirmed()>();

        $z2 = interfaceinvoke $r9.<java.util.Map: boolean equals(java.lang.Object)>($r10);

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(java.lang.String,boolean)>("Map should still equal HashMap", $z2);

        return;
    }

    public void verifyEntrySet()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        int i0, $i1, $i2, $i3;
        boolean z0, $z1, $z2;
        java.util.Map $r1, $r2, $r8, $r18, $r28, $r33, $r40, $r44, $r47;
        java.lang.StringBuilder $r3, $r4, $r6, $r7, $r10, $r13, $r14, $r16, $r17, $r20, $r23, $r24, $r26, $r27, $r30, $r35, $r36, $r38, $r39, $r42;
        java.util.Set $r5, $r9, $r12, $r15, $r19, $r22, $r25, $r29, $r32, $r34, $r37, $r41, $r45, $r46, $r48, $r49;
        java.lang.String $r11, $r21, $r31, $r43;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getConfirmed()>();

        i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getConfirmed()>();

        z0 = interfaceinvoke $r2.<java.util.Map: boolean isEmpty()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("entrySet should be same size as HashMap\'s\nTest: ");

        $r5 = r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Set entrySet>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nReal: ");

        $r8 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getConfirmed()>();

        $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set entrySet()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Set entrySet>;

        $i1 = interfaceinvoke $r12.<java.util.Set: int size()>();

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertEquals(java.lang.String,int,int)>($r11, i0, $i1);

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("entrySet should be empty if HashMap is\nTest: ");

        $r15 = r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Set entrySet>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nReal: ");

        $r18 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getConfirmed()>();

        $r19 = interfaceinvoke $r18.<java.util.Map: java.util.Set entrySet()>();

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $r22 = r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Set entrySet>;

        $z1 = interfaceinvoke $r22.<java.util.Set: boolean isEmpty()>();

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertEquals(java.lang.String,boolean,boolean)>($r21, z0, $z1);

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("entrySet should contain all HashMap\'s elements\nTest: ");

        $r25 = r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Set entrySet>;

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nReal: ");

        $r28 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getConfirmed()>();

        $r29 = interfaceinvoke $r28.<java.util.Map: java.util.Set entrySet()>();

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        $r32 = r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Set entrySet>;

        $r33 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getConfirmed()>();

        $r34 = interfaceinvoke $r33.<java.util.Map: java.util.Set entrySet()>();

        $z2 = interfaceinvoke $r32.<java.util.Set: boolean containsAll(java.util.Collection)>($r34);

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(java.lang.String,boolean)>($r31, $z2);

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("entrySet hashCodes should be the same\nTest: ");

        $r37 = r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Set entrySet>;

        $r38 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r37);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nReal: ");

        $r40 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getConfirmed()>();

        $r41 = interfaceinvoke $r40.<java.util.Map: java.util.Set entrySet()>();

        $r42 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r41);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        $r44 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getConfirmed()>();

        $r45 = interfaceinvoke $r44.<java.util.Map: java.util.Set entrySet()>();

        $i2 = interfaceinvoke $r45.<java.util.Set: int hashCode()>();

        $r46 = r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Set entrySet>;

        $i3 = interfaceinvoke $r46.<java.util.Set: int hashCode()>();

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertEquals(java.lang.String,int,int)>($r43, $i2, $i3);

        $r47 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getConfirmed()>();

        $r48 = interfaceinvoke $r47.<java.util.Map: java.util.Set entrySet()>();

        $r49 = r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Set entrySet>;

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Map\'s entry set should still equal HashMap\'s", $r48, $r49);

        return;
    }

    public void verifyKeySet()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        int i0, $i1, $i2, $i3;
        boolean z0, $z1, $z2;
        java.util.Map $r1, $r2, $r8, $r18, $r28, $r33, $r40, $r44, $r47;
        java.lang.StringBuilder $r3, $r4, $r6, $r7, $r10, $r13, $r14, $r16, $r17, $r20, $r23, $r24, $r26, $r27, $r30, $r35, $r36, $r38, $r39, $r42;
        java.util.Set $r5, $r9, $r12, $r15, $r19, $r22, $r25, $r29, $r32, $r34, $r37, $r41, $r45, $r46, $r48, $r49;
        java.lang.String $r11, $r21, $r31, $r43;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getConfirmed()>();

        i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getConfirmed()>();

        z0 = interfaceinvoke $r2.<java.util.Map: boolean isEmpty()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("keySet should be same size as HashMap\'s\nTest: ");

        $r5 = r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Set keySet>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nReal: ");

        $r8 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getConfirmed()>();

        $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set keySet()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Set keySet>;

        $i1 = interfaceinvoke $r12.<java.util.Set: int size()>();

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertEquals(java.lang.String,int,int)>($r11, i0, $i1);

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("keySet should be empty if HashMap is\nTest: ");

        $r15 = r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Set keySet>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nReal: ");

        $r18 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getConfirmed()>();

        $r19 = interfaceinvoke $r18.<java.util.Map: java.util.Set keySet()>();

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $r22 = r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Set keySet>;

        $z1 = interfaceinvoke $r22.<java.util.Set: boolean isEmpty()>();

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertEquals(java.lang.String,boolean,boolean)>($r21, z0, $z1);

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("keySet should contain all HashMap\'s elements\nTest: ");

        $r25 = r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Set keySet>;

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nReal: ");

        $r28 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getConfirmed()>();

        $r29 = interfaceinvoke $r28.<java.util.Map: java.util.Set keySet()>();

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        $r32 = r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Set keySet>;

        $r33 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getConfirmed()>();

        $r34 = interfaceinvoke $r33.<java.util.Map: java.util.Set keySet()>();

        $z2 = interfaceinvoke $r32.<java.util.Set: boolean containsAll(java.util.Collection)>($r34);

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(java.lang.String,boolean)>($r31, $z2);

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("keySet hashCodes should be the same\nTest: ");

        $r37 = r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Set keySet>;

        $r38 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r37);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nReal: ");

        $r40 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getConfirmed()>();

        $r41 = interfaceinvoke $r40.<java.util.Map: java.util.Set keySet()>();

        $r42 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r41);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        $r44 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getConfirmed()>();

        $r45 = interfaceinvoke $r44.<java.util.Map: java.util.Set keySet()>();

        $i2 = interfaceinvoke $r45.<java.util.Set: int hashCode()>();

        $r46 = r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Set keySet>;

        $i3 = interfaceinvoke $r46.<java.util.Set: int hashCode()>();

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertEquals(java.lang.String,int,int)>($r43, $i2, $i3);

        $r47 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getConfirmed()>();

        $r48 = interfaceinvoke $r47.<java.util.Map: java.util.Set keySet()>();

        $r49 = r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Set keySet>;

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Map\'s key set should still equal HashMap\'s", $r48, $r49);

        return;
    }

    public void verifyValues()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        int i0, $i1;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6;
        java.util.Iterator r3;
        java.lang.Object r4;
        java.util.ArrayList $r5, $r10;
        java.util.Map $r6, $r8, $r12, $r13;
        java.util.Collection $r7, $r9, $r11, $r20, $r27;
        java.lang.StringBuilder $r14, $r15, $r16, $r17, $r18, $r21, $r22, $r23, $r24, $r25, $r28, $r29, $r30, $r31, $r32, $r34, $r35, $r36, $r37, $r38;
        java.lang.String $r19, $r26, $r33, $r39;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        $r5 = new java.util.ArrayList;

        $r6 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getConfirmed()>();

        $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Collection values()>();

        specialinvoke $r5.<java.util.ArrayList: void <init>(java.util.Collection)>($r7);

        $r8 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getMap()>();

        $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Collection values()>();

        r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Collection values> = $r9;

        $r10 = new java.util.ArrayList;

        $r11 = r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Collection values>;

        specialinvoke $r10.<java.util.ArrayList: void <init>(java.util.Collection)>($r11);

        $r12 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getConfirmed()>();

        i0 = interfaceinvoke $r12.<java.util.Map: int size()>();

        $r13 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map getConfirmed()>();

        z0 = interfaceinvoke $r13.<java.util.Map: boolean isEmpty()>();

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("values should be same size as HashMap\'s\nTest: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nReal: ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        $r20 = r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Collection values>;

        $i1 = interfaceinvoke $r20.<java.util.Collection: int size()>();

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertEquals(java.lang.String,int,int)>($r19, i0, $i1);

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("values should be empty if HashMap is\nTest: ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nReal: ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        $r27 = r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Collection values>;

        $z2 = interfaceinvoke $r27.<java.util.Collection: boolean isEmpty()>();

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertEquals(java.lang.String,boolean,boolean)>($r26, z0, $z2);

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("values should contain all HashMap\'s elements\nTest: ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nReal: ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        $z3 = interfaceinvoke $r10.<java.util.List: boolean containsAll(java.util.Collection)>($r5);

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(java.lang.String,boolean)>($r33, $z3);

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("values should contain all HashMap\'s elements\nTest: ");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nReal: ");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        $z4 = interfaceinvoke $r5.<java.util.List: boolean containsAll(java.util.Collection)>($r10);

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(java.lang.String,boolean)>($r39, $z4);

        r3 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z5 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label2;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        z1 = interfaceinvoke $r10.<java.util.List: boolean remove(java.lang.Object)>(r4);

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(java.lang.String,boolean)>("Map\'s values should still equal HashMap\'s", z1);

        goto label1;

     label2:
        $z6 = interfaceinvoke $r10.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.apache.commons.collections4.map.AbstractMapTest: void assertTrue(java.lang.String,boolean)>("Map\'s values should still equal HashMap\'s", $z6);

        return;
    }

    public void tearDown() throws java.lang.Exception
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map map> = null;

        r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Set keySet> = null;

        r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Set entrySet> = null;

        r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Collection values> = null;

        r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map confirmed> = null;

        return;
    }

    public java.util.Map getMap()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        java.util.Map $r1;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        $r1 = r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map map>;

        return $r1;
    }

    public java.util.Map getConfirmed()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        java.util.Map $r1;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        $r1 = r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map confirmed>;

        return $r1;
    }

    public volatile java.lang.Object makeObject()
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        java.util.Map $r1;

        r0 := @this: org.apache.commons.collections4.map.AbstractMapTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map makeObject()>();

        return $r1;
    }

    static java.util.Map$Entry[] access$000(org.apache.commons.collections4.map.AbstractMapTest, java.lang.Object[], java.lang.Object[])
    {
        org.apache.commons.collections4.map.AbstractMapTest r0;
        java.lang.Object[] r1, r2;
        java.util.Map$Entry[] $r3;

        r0 := @parameter0: org.apache.commons.collections4.map.AbstractMapTest;

        r1 := @parameter1: java.lang.Object[];

        r2 := @parameter2: java.lang.Object[];

        $r3 = specialinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: java.util.Map$Entry[] makeEntryArray(java.lang.Object[],java.lang.Object[])>(r1, r2);

        return $r3;
    }

    static void <clinit>()
    {
        java.lang.String r0;
        boolean $z0;

        r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.version");

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("1.2");

        <org.apache.commons.collections4.map.AbstractMapTest: boolean JDK12> = $z0;

        return;
    }
}
