public class org.apache.commons.collections4.MapUtilsTest extends org.apache.commons.collections4.junit.AbstractAvailableLocalesTest
{

    public void <init>(java.util.Locale)
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        java.util.Locale r1;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

        r1 := @parameter0: java.util.Locale;

        specialinvoke r0.<org.apache.commons.collections4.junit.AbstractAvailableLocalesTest: void <init>(java.util.Locale)>(r1);

        return;
    }

    public org.apache.commons.collections4.Predicate getPredicate()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        org.apache.commons.collections4.MapUtilsTest$1 $r1;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

        $r1 = new org.apache.commons.collections4.MapUtilsTest$1;

        specialinvoke $r1.<org.apache.commons.collections4.MapUtilsTest$1: void <init>(org.apache.commons.collections4.MapUtilsTest)>(r0);

        return $r1;
    }

    public void testPredicatedMap()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        org.apache.commons.collections4.Predicate r1;
        org.apache.commons.collections4.IterableMap r2;
        java.util.HashMap $r4;
        boolean $z0;
        java.lang.NullPointerException $r6;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.MapUtilsTest: org.apache.commons.collections4.Predicate getPredicate()>();

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r2 = staticinvoke <org.apache.commons.collections4.MapUtils: org.apache.commons.collections4.IterableMap predicatedMap(java.util.Map,org.apache.commons.collections4.Predicate,org.apache.commons.collections4.Predicate)>($r4, r1, r1);

        $z0 = r2 instanceof org.apache.commons.collections4.map.PredicatedMap;

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("returned object should be a PredicatedMap", $z0);

     label1:
        staticinvoke <org.apache.commons.collections4.MapUtils: org.apache.commons.collections4.IterableMap predicatedMap(java.util.Map,org.apache.commons.collections4.Predicate,org.apache.commons.collections4.Predicate)>(null, r1, r1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting NullPointerException for null map.");

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public void testLazyMapFactory()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        org.apache.commons.collections4.Factory r1, $r5;
        java.lang.Integer $r2;
        java.util.HashMap $r3, $r4, $r7, $r8;
        boolean $z0, $z1;
        java.util.Map $r6, $r10;
        org.apache.commons.collections4.Transformer $r9, r20;
        java.lang.NullPointerException $r11, $r12, $r13, $r14;
        org.apache.commons.collections4.IterableMap r15, r21;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        r1 = staticinvoke <org.apache.commons.collections4.FactoryUtils: org.apache.commons.collections4.Factory constantFactory(java.lang.Object)>($r2);

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r15 = staticinvoke <org.apache.commons.collections4.MapUtils: org.apache.commons.collections4.IterableMap lazyMap(java.util.Map,org.apache.commons.collections4.Factory)>($r3, r1);

        $z0 = r15 instanceof org.apache.commons.collections4.map.LazyMap;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

     label01:
        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        $r5 = (org.apache.commons.collections4.Factory) null;

        staticinvoke <org.apache.commons.collections4.MapUtils: org.apache.commons.collections4.IterableMap lazyMap(java.util.Map,org.apache.commons.collections4.Factory)>($r4, $r5);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting NullPointerException for null factory");

     label02:
        goto label04;

     label03:
        $r14 := @caughtexception;

     label04:
        $r6 = (java.util.Map) null;

        staticinvoke <org.apache.commons.collections4.MapUtils: org.apache.commons.collections4.IterableMap lazyMap(java.util.Map,org.apache.commons.collections4.Factory)>($r6, r1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting NullPointerException for null map");

     label05:
        goto label07;

     label06:
        $r12 := @caughtexception;

     label07:
        r20 = staticinvoke <org.apache.commons.collections4.TransformerUtils: org.apache.commons.collections4.Transformer asTransformer(org.apache.commons.collections4.Factory)>(r1);

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        r21 = staticinvoke <org.apache.commons.collections4.MapUtils: org.apache.commons.collections4.IterableMap lazyMap(java.util.Map,org.apache.commons.collections4.Transformer)>($r7, r20);

        $z1 = r21 instanceof org.apache.commons.collections4.map.LazyMap;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

     label08:
        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        $r9 = (org.apache.commons.collections4.Transformer) null;

        staticinvoke <org.apache.commons.collections4.MapUtils: org.apache.commons.collections4.IterableMap lazyMap(java.util.Map,org.apache.commons.collections4.Transformer)>($r8, $r9);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting NullPointerException for null transformer");

     label09:
        goto label11;

     label10:
        $r13 := @caughtexception;

     label11:
        $r10 = (java.util.Map) null;

        staticinvoke <org.apache.commons.collections4.MapUtils: org.apache.commons.collections4.IterableMap lazyMap(java.util.Map,org.apache.commons.collections4.Transformer)>($r10, r20);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting NullPointerException for null map");

     label12:
        goto label14;

     label13:
        $r11 := @caughtexception;

     label14:
        return;

        catch java.lang.NullPointerException from label01 to label02 with label03;
        catch java.lang.NullPointerException from label04 to label05 with label06;
        catch java.lang.NullPointerException from label08 to label09 with label10;
        catch java.lang.NullPointerException from label11 to label12 with label13;
    }

    public void testLazyMapTransformer()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        org.apache.commons.collections4.IterableMap r1;
        java.lang.Integer r2, r3, $r7, $r11;
        java.util.HashMap $r4;
        org.apache.commons.collections4.MapUtilsTest$2 $r5;
        int $i0, $i2, $i4;
        long $l1, $l3, $l5;
        java.lang.Object $r6, $r10;
        java.lang.String $r8;
        char[] $r9;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        $r5 = new org.apache.commons.collections4.MapUtilsTest$2;

        specialinvoke $r5.<org.apache.commons.collections4.MapUtilsTest$2: void <init>(org.apache.commons.collections4.MapUtilsTest)>(r0);

        r1 = staticinvoke <org.apache.commons.collections4.MapUtils: org.apache.commons.collections4.IterableMap lazyMap(java.util.Map,org.apache.commons.collections4.Transformer)>($r4, $r5);

        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        $r6 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("5");

        r2 = (java.lang.Integer) $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, r2);

        $i2 = interfaceinvoke r1.<java.util.Map: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l3);

        $r8 = new java.lang.String;

        $r9 = newarray (char)[1];

        $r9[0] = 53;

        specialinvoke $r8.<java.lang.String: void <init>(char[])>($r9);

        $r10 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);

        r3 = (java.lang.Integer) $r10;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r11, r3);

        $i4 = interfaceinvoke r1.<java.util.Map: int size()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l5);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>(r2, r3);

        return;
    }

    public void testInvertMap()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        java.util.Map r4;
        java.util.HashMap $r7;
        java.util.HashSet $r13, $r15, $r17, $r19;
        java.util.Set $r14, $r18;
        java.util.Collection $r16, $r20;
        boolean $z0, $z1;
        java.lang.Object $r21, $r22, $r23, $r24, $r25;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>(int,float)>(5, 1.0F);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("1", "A");

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("2", "B");

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("3", "C");

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("4", "D");

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("5", "E");

        $r13 = new java.util.HashSet;

        $r14 = interfaceinvoke $r7.<java.util.Map: java.util.Set keySet()>();

        specialinvoke $r13.<java.util.HashSet: void <init>(java.util.Collection)>($r14);

        $r15 = new java.util.HashSet;

        $r16 = interfaceinvoke $r7.<java.util.Map: java.util.Collection values()>();

        specialinvoke $r15.<java.util.HashSet: void <init>(java.util.Collection)>($r16);

        r4 = staticinvoke <org.apache.commons.collections4.MapUtils: java.util.Map invertMap(java.util.Map)>($r7);

        $r17 = new java.util.HashSet;

        $r18 = interfaceinvoke r4.<java.util.Map: java.util.Set keySet()>();

        specialinvoke $r17.<java.util.HashSet: void <init>(java.util.Collection)>($r18);

        $r19 = new java.util.HashSet;

        $r20 = interfaceinvoke r4.<java.util.Map: java.util.Collection values()>();

        specialinvoke $r19.<java.util.HashSet: void <init>(java.util.Collection)>($r20);

        $z0 = interfaceinvoke $r13.<java.util.Set: boolean equals(java.lang.Object)>($r19);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $z1 = interfaceinvoke $r15.<java.util.Set: boolean equals(java.lang.Object)>($r17);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r21 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>("A");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("1", $r21);

        $r22 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>("B");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("2", $r22);

        $r23 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>("C");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("3", $r23);

        $r24 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>("D");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("4", $r24);

        $r25 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>("E");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("5", $r25);

        return;
    }

    public void testPutAll_Map_array()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        java.lang.Object[] $r2, $r61, $r75;
        java.util.HashMap $r4, $r6, $r20, $r25, $r31, $r37, $r48, $r59, $r60, $r74;
        java.lang.String[] $r5, $r8, $r9, $r10, $r22, $r23, $r27, $r28, $r29, $r33, $r34, $r35, $r38, $r49;
        int $i0, $i2, $i4, $i6, $i8, $i10, $i12;
        long $l1, $l3, $l5, $l7, $l9, $l11, $l13;
        java.lang.String[][] $r7, $r21, $r26, $r32;
        java.lang.Boolean $r11, $r12, $r14, $r15, $r17, $r18, $r39, $r40, $r42, $r43, $r45, $r46, $r50, $r51, $r53, $r54, $r56, $r57, $r65, $r66, $r68, $r69, $r71, $r72, $r79, $r80, $r82, $r83, $r85, $r86;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        java.lang.Object $r13, $r16, $r19, $r41, $r44, $r47, $r52, $r55, $r58, $r67, $r70, $r73, $r81, $r84, $r87;
        org.apache.commons.collections4.keyvalue.DefaultMapEntry $r62, $r63, $r64;
        org.apache.commons.collections4.keyvalue.DefaultKeyValue $r76, $r77, $r78;
        java.lang.NullPointerException $r88, $r92;
        java.lang.IllegalArgumentException $r89, $r90, $r91;
        java.util.Map r95, r96, r100, r101, r102, r103, r104;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

     label01:
        staticinvoke <org.apache.commons.collections4.MapUtils: java.util.Map putAll(java.util.Map,java.lang.Object[])>(null, null);

        staticinvoke <org.junit.Assert: void fail()>();

     label02:
        goto label04;

     label03:
        $r88 := @caughtexception;

     label04:
        $r2 = newarray (java.lang.Object)[0];

        staticinvoke <org.apache.commons.collections4.MapUtils: java.util.Map putAll(java.util.Map,java.lang.Object[])>(null, $r2);

        staticinvoke <org.junit.Assert: void fail()>();

     label05:
        goto label07;

     label06:
        $r92 := @caughtexception;

     label07:
        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        $r5 = newarray (java.lang.String)[0];

        r95 = staticinvoke <org.apache.commons.collections4.MapUtils: java.util.Map putAll(java.util.Map,java.lang.Object[])>($r4, $r5);

        $i0 = interfaceinvoke r95.<java.util.Map: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        $r7 = newarray (java.lang.String[])[3];

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "RED";

        $r8[1] = "#FF0000";

        $r7[0] = $r8;

        $r9 = newarray (java.lang.String)[2];

        $r9[0] = "GREEN";

        $r9[1] = "#00FF00";

        $r7[1] = $r9;

        $r10 = newarray (java.lang.String)[2];

        $r10[0] = "BLUE";

        $r10[1] = "#0000FF";

        $r7[2] = $r10;

        r96 = staticinvoke <org.apache.commons.collections4.MapUtils: java.util.Map putAll(java.util.Map,java.lang.Object[])>($r6, $r7);

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z0 = interfaceinvoke r96.<java.util.Map: boolean containsKey(java.lang.Object)>("RED");

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r11, $r12);

        $r13 = interfaceinvoke r96.<java.util.Map: java.lang.Object get(java.lang.Object)>("RED");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("#FF0000", $r13);

        $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z1 = interfaceinvoke r96.<java.util.Map: boolean containsKey(java.lang.Object)>("GREEN");

        $r15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r14, $r15);

        $r16 = interfaceinvoke r96.<java.util.Map: java.lang.Object get(java.lang.Object)>("GREEN");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("#00FF00", $r16);

        $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z2 = interfaceinvoke r96.<java.util.Map: boolean containsKey(java.lang.Object)>("BLUE");

        $r18 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r17, $r18);

        $r19 = interfaceinvoke r96.<java.util.Map: java.lang.Object get(java.lang.Object)>("BLUE");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("#0000FF", $r19);

        $i2 = interfaceinvoke r96.<java.util.Map: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l3);

     label08:
        $r20 = new java.util.HashMap;

        specialinvoke $r20.<java.util.HashMap: void <init>()>();

        $r21 = newarray (java.lang.String[])[3];

        $r22 = newarray (java.lang.String)[2];

        $r22[0] = "RED";

        $r22[1] = "#FF0000";

        $r21[0] = $r22;

        $r21[1] = null;

        $r23 = newarray (java.lang.String)[2];

        $r23[0] = "BLUE";

        $r23[1] = "#0000FF";

        $r21[2] = $r23;

        staticinvoke <org.apache.commons.collections4.MapUtils: java.util.Map putAll(java.util.Map,java.lang.Object[])>($r20, $r21);

        staticinvoke <org.junit.Assert: void fail()>();

     label09:
        goto label11;

     label10:
        $r90 := @caughtexception;

     label11:
        $r25 = new java.util.HashMap;

        specialinvoke $r25.<java.util.HashMap: void <init>()>();

        $r26 = newarray (java.lang.String[])[3];

        $r27 = newarray (java.lang.String)[2];

        $r27[0] = "RED";

        $r27[1] = "#FF0000";

        $r26[0] = $r27;

        $r28 = newarray (java.lang.String)[1];

        $r28[0] = "GREEN";

        $r26[1] = $r28;

        $r29 = newarray (java.lang.String)[2];

        $r29[0] = "BLUE";

        $r29[1] = "#0000FF";

        $r26[2] = $r29;

        staticinvoke <org.apache.commons.collections4.MapUtils: java.util.Map putAll(java.util.Map,java.lang.Object[])>($r25, $r26);

        staticinvoke <org.junit.Assert: void fail()>();

     label12:
        goto label14;

     label13:
        $r91 := @caughtexception;

     label14:
        $r31 = new java.util.HashMap;

        specialinvoke $r31.<java.util.HashMap: void <init>()>();

        $r32 = newarray (java.lang.String[])[3];

        $r33 = newarray (java.lang.String)[2];

        $r33[0] = "RED";

        $r33[1] = "#FF0000";

        $r32[0] = $r33;

        $r34 = newarray (java.lang.String)[0];

        $r32[1] = $r34;

        $r35 = newarray (java.lang.String)[2];

        $r35[0] = "BLUE";

        $r35[1] = "#0000FF";

        $r32[2] = $r35;

        staticinvoke <org.apache.commons.collections4.MapUtils: java.util.Map putAll(java.util.Map,java.lang.Object[])>($r31, $r32);

        staticinvoke <org.junit.Assert: void fail()>();

     label15:
        goto label17;

     label16:
        $r89 := @caughtexception;

     label17:
        $r37 = new java.util.HashMap;

        specialinvoke $r37.<java.util.HashMap: void <init>()>();

        $r38 = newarray (java.lang.String)[6];

        $r38[0] = "RED";

        $r38[1] = "#FF0000";

        $r38[2] = "GREEN";

        $r38[3] = "#00FF00";

        $r38[4] = "BLUE";

        $r38[5] = "#0000FF";

        r100 = staticinvoke <org.apache.commons.collections4.MapUtils: java.util.Map putAll(java.util.Map,java.lang.Object[])>($r37, $r38);

        $r39 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z3 = interfaceinvoke r100.<java.util.Map: boolean containsKey(java.lang.Object)>("RED");

        $r40 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r39, $r40);

        $r41 = interfaceinvoke r100.<java.util.Map: java.lang.Object get(java.lang.Object)>("RED");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("#FF0000", $r41);

        $r42 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z4 = interfaceinvoke r100.<java.util.Map: boolean containsKey(java.lang.Object)>("GREEN");

        $r43 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r42, $r43);

        $r44 = interfaceinvoke r100.<java.util.Map: java.lang.Object get(java.lang.Object)>("GREEN");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("#00FF00", $r44);

        $r45 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z5 = interfaceinvoke r100.<java.util.Map: boolean containsKey(java.lang.Object)>("BLUE");

        $r46 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r45, $r46);

        $r47 = interfaceinvoke r100.<java.util.Map: java.lang.Object get(java.lang.Object)>("BLUE");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("#0000FF", $r47);

        $i4 = interfaceinvoke r100.<java.util.Map: int size()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l5);

        $r48 = new java.util.HashMap;

        specialinvoke $r48.<java.util.HashMap: void <init>()>();

        $r49 = newarray (java.lang.String)[7];

        $r49[0] = "RED";

        $r49[1] = "#FF0000";

        $r49[2] = "GREEN";

        $r49[3] = "#00FF00";

        $r49[4] = "BLUE";

        $r49[5] = "#0000FF";

        $r49[6] = "PURPLE";

        r101 = staticinvoke <org.apache.commons.collections4.MapUtils: java.util.Map putAll(java.util.Map,java.lang.Object[])>($r48, $r49);

        $r50 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z6 = interfaceinvoke r101.<java.util.Map: boolean containsKey(java.lang.Object)>("RED");

        $r51 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z6);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r50, $r51);

        $r52 = interfaceinvoke r101.<java.util.Map: java.lang.Object get(java.lang.Object)>("RED");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("#FF0000", $r52);

        $r53 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z7 = interfaceinvoke r101.<java.util.Map: boolean containsKey(java.lang.Object)>("GREEN");

        $r54 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z7);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r53, $r54);

        $r55 = interfaceinvoke r101.<java.util.Map: java.lang.Object get(java.lang.Object)>("GREEN");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("#00FF00", $r55);

        $r56 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z8 = interfaceinvoke r101.<java.util.Map: boolean containsKey(java.lang.Object)>("BLUE");

        $r57 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z8);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r56, $r57);

        $r58 = interfaceinvoke r101.<java.util.Map: java.lang.Object get(java.lang.Object)>("BLUE");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("#0000FF", $r58);

        $i6 = interfaceinvoke r101.<java.util.Map: int size()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l7);

        $r59 = new java.util.HashMap;

        specialinvoke $r59.<java.util.HashMap: void <init>()>();

        r102 = staticinvoke <org.apache.commons.collections4.MapUtils: java.util.Map putAll(java.util.Map,java.lang.Object[])>($r59, null);

        $i8 = interfaceinvoke r102.<java.util.Map: int size()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l9);

        $r60 = new java.util.HashMap;

        specialinvoke $r60.<java.util.HashMap: void <init>()>();

        $r61 = newarray (java.lang.Object)[3];

        $r62 = new org.apache.commons.collections4.keyvalue.DefaultMapEntry;

        specialinvoke $r62.<org.apache.commons.collections4.keyvalue.DefaultMapEntry: void <init>(java.lang.Object,java.lang.Object)>("RED", "#FF0000");

        $r61[0] = $r62;

        $r63 = new org.apache.commons.collections4.keyvalue.DefaultMapEntry;

        specialinvoke $r63.<org.apache.commons.collections4.keyvalue.DefaultMapEntry: void <init>(java.lang.Object,java.lang.Object)>("GREEN", "#00FF00");

        $r61[1] = $r63;

        $r64 = new org.apache.commons.collections4.keyvalue.DefaultMapEntry;

        specialinvoke $r64.<org.apache.commons.collections4.keyvalue.DefaultMapEntry: void <init>(java.lang.Object,java.lang.Object)>("BLUE", "#0000FF");

        $r61[2] = $r64;

        r103 = staticinvoke <org.apache.commons.collections4.MapUtils: java.util.Map putAll(java.util.Map,java.lang.Object[])>($r60, $r61);

        $r65 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z9 = interfaceinvoke r103.<java.util.Map: boolean containsKey(java.lang.Object)>("RED");

        $r66 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r65, $r66);

        $r67 = interfaceinvoke r103.<java.util.Map: java.lang.Object get(java.lang.Object)>("RED");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("#FF0000", $r67);

        $r68 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z10 = interfaceinvoke r103.<java.util.Map: boolean containsKey(java.lang.Object)>("GREEN");

        $r69 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r68, $r69);

        $r70 = interfaceinvoke r103.<java.util.Map: java.lang.Object get(java.lang.Object)>("GREEN");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("#00FF00", $r70);

        $r71 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z11 = interfaceinvoke r103.<java.util.Map: boolean containsKey(java.lang.Object)>("BLUE");

        $r72 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z11);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r71, $r72);

        $r73 = interfaceinvoke r103.<java.util.Map: java.lang.Object get(java.lang.Object)>("BLUE");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("#0000FF", $r73);

        $i10 = interfaceinvoke r103.<java.util.Map: int size()>();

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l11);

        $r74 = new java.util.HashMap;

        specialinvoke $r74.<java.util.HashMap: void <init>()>();

        $r75 = newarray (java.lang.Object)[3];

        $r76 = new org.apache.commons.collections4.keyvalue.DefaultKeyValue;

        specialinvoke $r76.<org.apache.commons.collections4.keyvalue.DefaultKeyValue: void <init>(java.lang.Object,java.lang.Object)>("RED", "#FF0000");

        $r75[0] = $r76;

        $r77 = new org.apache.commons.collections4.keyvalue.DefaultKeyValue;

        specialinvoke $r77.<org.apache.commons.collections4.keyvalue.DefaultKeyValue: void <init>(java.lang.Object,java.lang.Object)>("GREEN", "#00FF00");

        $r75[1] = $r77;

        $r78 = new org.apache.commons.collections4.keyvalue.DefaultKeyValue;

        specialinvoke $r78.<org.apache.commons.collections4.keyvalue.DefaultKeyValue: void <init>(java.lang.Object,java.lang.Object)>("BLUE", "#0000FF");

        $r75[2] = $r78;

        r104 = staticinvoke <org.apache.commons.collections4.MapUtils: java.util.Map putAll(java.util.Map,java.lang.Object[])>($r74, $r75);

        $r79 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z12 = interfaceinvoke r104.<java.util.Map: boolean containsKey(java.lang.Object)>("RED");

        $r80 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z12);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r79, $r80);

        $r81 = interfaceinvoke r104.<java.util.Map: java.lang.Object get(java.lang.Object)>("RED");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("#FF0000", $r81);

        $r82 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z13 = interfaceinvoke r104.<java.util.Map: boolean containsKey(java.lang.Object)>("GREEN");

        $r83 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z13);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r82, $r83);

        $r84 = interfaceinvoke r104.<java.util.Map: java.lang.Object get(java.lang.Object)>("GREEN");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("#00FF00", $r84);

        $r85 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z14 = interfaceinvoke r104.<java.util.Map: boolean containsKey(java.lang.Object)>("BLUE");

        $r86 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z14);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r85, $r86);

        $r87 = interfaceinvoke r104.<java.util.Map: java.lang.Object get(java.lang.Object)>("BLUE");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("#0000FF", $r87);

        $i12 = interfaceinvoke r104.<java.util.Map: int size()>();

        $l13 = (long) $i12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l13);

        return;

        catch java.lang.NullPointerException from label01 to label02 with label03;
        catch java.lang.NullPointerException from label04 to label05 with label06;
        catch java.lang.IllegalArgumentException from label08 to label09 with label10;
        catch java.lang.IllegalArgumentException from label11 to label12 with label13;
        catch java.lang.IllegalArgumentException from label14 to label15 with label16;
    }

    public void testConvertResourceBundle()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        java.util.Map r3;
        java.util.HashMap $r4;
        org.apache.commons.collections4.MapUtilsTest$3 $r10;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>(int,float)>(5, 1.0F);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("1", "A");

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("2", "B");

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("3", "C");

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("4", "D");

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("5", "E");

        $r10 = new org.apache.commons.collections4.MapUtilsTest$3;

        specialinvoke $r10.<org.apache.commons.collections4.MapUtilsTest$3: void <init>(org.apache.commons.collections4.MapUtilsTest,java.util.Map)>(r0, $r4);

        r3 = staticinvoke <org.apache.commons.collections4.MapUtils: java.util.Map toMap(java.util.ResourceBundle)>($r10);

        $z0 = interfaceinvoke $r4.<java.util.Map: boolean equals(java.lang.Object)>(r3);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testDebugAndVerbosePrintCasting()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        java.util.HashMap $r6, $r11;
        java.lang.Integer $r7, $r9, $r12, $r14;
        java.io.ByteArrayOutputStream $r16;
        java.io.PrintStream $r17;
        java.lang.ClassCastException $r18;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>(int,float)>(2, 1.0F);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, "B");

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, "C");

        $r11 = new java.util.HashMap;

        specialinvoke $r11.<java.util.HashMap: void <init>(int,float)>(2, 1.0F);

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r6);

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, "A");

        $r16 = new java.io.ByteArrayOutputStream;

        specialinvoke $r16.<java.io.ByteArrayOutputStream: void <init>()>();

        $r17 = new java.io.PrintStream;

        specialinvoke $r17.<java.io.PrintStream: void <init>(java.io.OutputStream)>($r16);

     label1:
        staticinvoke <org.apache.commons.collections4.MapUtils: void debugPrint(java.io.PrintStream,java.lang.Object,java.util.Map)>($r17, "Print Map", $r11);

     label2:
        goto label4;

     label3:
        $r18 := @caughtexception;

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("No Casting should be occurring!");

     label4:
        return;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public void testDebugAndVerbosePrintNullMap()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        java.lang.String r4, $r9, $r11, $r12, $r13;
        java.io.ByteArrayOutputStream $r5;
        java.io.PrintStream $r6;
        java.lang.StringBuilder $r7, $r8, $r10;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

        $r5 = new java.io.ByteArrayOutputStream;

        specialinvoke $r5.<java.io.ByteArrayOutputStream: void <init>()>();

        $r6 = new java.io.PrintStream;

        specialinvoke $r6.<java.io.PrintStream: void <init>(java.io.OutputStream)>($r5);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Print Map = ");

        $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(null);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r11);

        r4 = virtualinvoke $r5.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.ByteArrayOutputStream: void reset()>();

        staticinvoke <org.apache.commons.collections4.MapUtils: void debugPrint(java.io.PrintStream,java.lang.Object,java.util.Map)>($r6, "Print Map", null);

        $r12 = virtualinvoke $r5.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r4, $r12);

        virtualinvoke $r5.<java.io.ByteArrayOutputStream: void reset()>();

        staticinvoke <org.apache.commons.collections4.MapUtils: void verbosePrint(java.io.PrintStream,java.lang.Object,java.util.Map)>($r6, "Print Map", null);

        $r13 = virtualinvoke $r5.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r4, $r13);

        return;
    }

    public void testVerbosePrintNullLabel()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        java.lang.String r5, $r15;
        java.io.ByteArrayOutputStream $r6;
        java.io.PrintStream $r7;
        java.util.TreeMap $r8;
        java.lang.Integer $r9, $r11, $r13;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

        $r6 = new java.io.ByteArrayOutputStream;

        specialinvoke $r6.<java.io.ByteArrayOutputStream: void <init>()>();

        $r7 = new java.io.PrintStream;

        specialinvoke $r7.<java.io.PrintStream: void <init>(java.io.OutputStream)>($r6);

        $r8 = new java.util.TreeMap;

        specialinvoke $r8.<java.util.TreeMap: void <init>()>();

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, "B");

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, "C");

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, null);

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>("{");

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>("    2 = B");

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>("    3 = C");

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>("    4 = null");

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>("}");

        r5 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.ByteArrayOutputStream: void reset()>();

        staticinvoke <org.apache.commons.collections4.MapUtils: void verbosePrint(java.io.PrintStream,java.lang.Object,java.util.Map)>($r7, null, $r8);

        $r15 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r5, $r15);

        return;
    }

    public void testDebugPrintNullLabel()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        java.lang.String r5, $r18, $r20, $r24, $r26, $r30, $r32, $r33;
        java.io.ByteArrayOutputStream $r6;
        java.io.PrintStream $r7;
        java.util.TreeMap $r8;
        java.lang.Integer $r9, $r11, $r13;
        java.lang.StringBuilder $r15, $r16, $r19, $r21, $r22, $r25, $r27, $r28, $r31;
        java.lang.Class $r17, $r23, $r29;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

        $r6 = new java.io.ByteArrayOutputStream;

        specialinvoke $r6.<java.io.ByteArrayOutputStream: void <init>()>();

        $r7 = new java.io.PrintStream;

        specialinvoke $r7.<java.io.PrintStream: void <init>(java.io.OutputStream)>($r6);

        $r8 = new java.util.TreeMap;

        specialinvoke $r8.<java.util.TreeMap: void <init>()>();

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, "B");

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, "C");

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, null);

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>("{");

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    2 = B ");

        $r17 = class "Ljava/lang/String;";

        $r18 = virtualinvoke $r17.<java.lang.Class: java.lang.String getName()>();

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r20);

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    3 = C ");

        $r23 = class "Ljava/lang/String;";

        $r24 = virtualinvoke $r23.<java.lang.Class: java.lang.String getName()>();

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r26);

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>("    4 = null");

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("} ");

        $r29 = class "Ljava/util/TreeMap;";

        $r30 = virtualinvoke $r29.<java.lang.Class: java.lang.String getName()>();

        $r31 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r32);

        r5 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.ByteArrayOutputStream: void reset()>();

        staticinvoke <org.apache.commons.collections4.MapUtils: void debugPrint(java.io.PrintStream,java.lang.Object,java.util.Map)>($r7, null, $r8);

        $r33 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r5, $r33);

        return;
    }

    public void testVerbosePrintNullLabelAndMap()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        java.lang.String r3, $r6;
        java.io.ByteArrayOutputStream $r4;
        java.io.PrintStream $r5;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

        $r4 = new java.io.ByteArrayOutputStream;

        specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>()>();

        $r5 = new java.io.PrintStream;

        specialinvoke $r5.<java.io.PrintStream: void <init>(java.io.OutputStream)>($r4);

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("null");

        r3 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.ByteArrayOutputStream: void reset()>();

        staticinvoke <org.apache.commons.collections4.MapUtils: void verbosePrint(java.io.PrintStream,java.lang.Object,java.util.Map)>($r5, null, null);

        $r6 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r3, $r6);

        return;
    }

    public void testDebugPrintNullLabelAndMap()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        java.lang.String r3, $r6;
        java.io.ByteArrayOutputStream $r4;
        java.io.PrintStream $r5;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

        $r4 = new java.io.ByteArrayOutputStream;

        specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>()>();

        $r5 = new java.io.PrintStream;

        specialinvoke $r5.<java.io.PrintStream: void <init>(java.io.OutputStream)>($r4);

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("null");

        r3 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.ByteArrayOutputStream: void reset()>();

        staticinvoke <org.apache.commons.collections4.MapUtils: void debugPrint(java.io.PrintStream,java.lang.Object,java.util.Map)>($r5, null, null);

        $r6 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r3, $r6);

        return;
    }

    public void testVerbosePrintNullStream()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        java.util.HashMap $r2;
        java.lang.NullPointerException $r3;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

     label1:
        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        staticinvoke <org.apache.commons.collections4.MapUtils: void verbosePrint(java.io.PrintStream,java.lang.Object,java.util.Map)>(null, "Map", $r2);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should generate NullPointerException");

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public void testDebugPrintNullStream()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        java.util.HashMap $r2;
        java.lang.NullPointerException $r3;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

     label1:
        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        staticinvoke <org.apache.commons.collections4.MapUtils: void debugPrint(java.io.PrintStream,java.lang.Object,java.util.Map)>(null, "Map", $r2);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should generate NullPointerException");

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public void testDebugPrintNullKey()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        java.lang.String r5, $r13, $r15, $r19, $r21, $r22;
        java.io.ByteArrayOutputStream $r6;
        java.io.PrintStream $r7;
        java.util.HashMap $r8;
        java.lang.StringBuilder $r10, $r11, $r14, $r16, $r17, $r20;
        java.lang.Class $r12, $r18;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

        $r6 = new java.io.ByteArrayOutputStream;

        specialinvoke $r6.<java.io.ByteArrayOutputStream: void <init>()>();

        $r7 = new java.io.PrintStream;

        specialinvoke $r7.<java.io.PrintStream: void <init>(java.io.OutputStream)>($r6);

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(null, "A");

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>("{");

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    null = A ");

        $r12 = class "Ljava/lang/String;";

        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.String getName()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r15);

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("} ");

        $r18 = class "Ljava/util/HashMap;";

        $r19 = virtualinvoke $r18.<java.lang.Class: java.lang.String getName()>();

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r21);

        r5 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.ByteArrayOutputStream: void reset()>();

        staticinvoke <org.apache.commons.collections4.MapUtils: void debugPrint(java.io.PrintStream,java.lang.Object,java.util.Map)>($r7, null, $r8);

        $r22 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r5, $r22);

        return;
    }

    public void testVerbosePrintNullKey()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        java.lang.String r5, $r10;
        java.io.ByteArrayOutputStream $r6;
        java.io.PrintStream $r7;
        java.util.HashMap $r8;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

        $r6 = new java.io.ByteArrayOutputStream;

        specialinvoke $r6.<java.io.ByteArrayOutputStream: void <init>()>();

        $r7 = new java.io.PrintStream;

        specialinvoke $r7.<java.io.PrintStream: void <init>(java.io.OutputStream)>($r6);

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(null, "A");

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>("{");

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>("    null = A");

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>("}");

        r5 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.ByteArrayOutputStream: void reset()>();

        staticinvoke <org.apache.commons.collections4.MapUtils: void verbosePrint(java.io.PrintStream,java.lang.Object,java.util.Map)>($r7, null, $r8);

        $r10 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r5, $r10);

        return;
    }

    public void testDebugPrintNullKeyToMap1()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        java.lang.String r5, $r13, $r15, $r19, $r21, $r22;
        java.io.ByteArrayOutputStream $r6;
        java.io.PrintStream $r7;
        java.util.HashMap $r8;
        java.lang.StringBuilder $r10, $r11, $r14, $r16, $r17, $r20;
        java.lang.Class $r12, $r18;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

        $r6 = new java.io.ByteArrayOutputStream;

        specialinvoke $r6.<java.io.ByteArrayOutputStream: void <init>()>();

        $r7 = new java.io.PrintStream;

        specialinvoke $r7.<java.io.PrintStream: void <init>(java.io.OutputStream)>($r6);

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(null, $r8);

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>("{");

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    null = (this Map) ");

        $r12 = class "Ljava/util/HashMap;";

        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.String getName()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r15);

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("} ");

        $r18 = class "Ljava/util/HashMap;";

        $r19 = virtualinvoke $r18.<java.lang.Class: java.lang.String getName()>();

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r21);

        r5 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.ByteArrayOutputStream: void reset()>();

        staticinvoke <org.apache.commons.collections4.MapUtils: void debugPrint(java.io.PrintStream,java.lang.Object,java.util.Map)>($r7, null, $r8);

        $r22 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r5, $r22);

        return;
    }

    public void testVerbosePrintNullKeyToMap1()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        java.lang.String r5, $r10;
        java.io.ByteArrayOutputStream $r6;
        java.io.PrintStream $r7;
        java.util.HashMap $r8;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

        $r6 = new java.io.ByteArrayOutputStream;

        specialinvoke $r6.<java.io.ByteArrayOutputStream: void <init>()>();

        $r7 = new java.io.PrintStream;

        specialinvoke $r7.<java.io.PrintStream: void <init>(java.io.OutputStream)>($r6);

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(null, $r8);

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>("{");

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>("    null = (this Map)");

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>("}");

        r5 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.ByteArrayOutputStream: void reset()>();

        staticinvoke <org.apache.commons.collections4.MapUtils: void verbosePrint(java.io.PrintStream,java.lang.Object,java.util.Map)>($r7, null, $r8);

        $r10 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r5, $r10);

        return;
    }

    public void testDebugPrintNullKeyToMap2()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        java.lang.String r6, $r16, $r18, $r22, $r24, $r28, $r30, $r31;
        java.io.ByteArrayOutputStream $r7;
        java.io.PrintStream $r8;
        java.util.HashMap $r9, $r10;
        java.lang.StringBuilder $r13, $r14, $r17, $r19, $r20, $r23, $r25, $r26, $r29;
        java.lang.Class $r15, $r21, $r27;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

        $r7 = new java.io.ByteArrayOutputStream;

        specialinvoke $r7.<java.io.ByteArrayOutputStream: void <init>()>();

        $r8 = new java.io.PrintStream;

        specialinvoke $r8.<java.io.PrintStream: void <init>(java.io.OutputStream)>($r7);

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        $r10 = new java.util.HashMap;

        specialinvoke $r10.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(null, $r10);

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("2", "B");

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>("{");

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>("    null = ");

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>("    {");

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("        2 = B ");

        $r15 = class "Ljava/lang/String;";

        $r16 = virtualinvoke $r15.<java.lang.Class: java.lang.String getName()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r18);

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    } ");

        $r21 = class "Ljava/util/HashMap;";

        $r22 = virtualinvoke $r21.<java.lang.Class: java.lang.String getName()>();

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r24);

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("} ");

        $r27 = class "Ljava/util/HashMap;";

        $r28 = virtualinvoke $r27.<java.lang.Class: java.lang.String getName()>();

        $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r30);

        r6 = virtualinvoke $r7.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        virtualinvoke $r7.<java.io.ByteArrayOutputStream: void reset()>();

        staticinvoke <org.apache.commons.collections4.MapUtils: void debugPrint(java.io.PrintStream,java.lang.Object,java.util.Map)>($r8, null, $r9);

        $r31 = virtualinvoke $r7.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r6, $r31);

        return;
    }

    public void testVerbosePrintNullKeyToMap2()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        java.lang.String r6, $r13;
        java.io.ByteArrayOutputStream $r7;
        java.io.PrintStream $r8;
        java.util.HashMap $r9, $r10;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

        $r7 = new java.io.ByteArrayOutputStream;

        specialinvoke $r7.<java.io.ByteArrayOutputStream: void <init>()>();

        $r8 = new java.io.PrintStream;

        specialinvoke $r8.<java.io.PrintStream: void <init>(java.io.OutputStream)>($r7);

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        $r10 = new java.util.HashMap;

        specialinvoke $r10.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(null, $r10);

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("2", "B");

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>("{");

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>("    null = ");

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>("    {");

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>("        2 = B");

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>("    }");

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>("}");

        r6 = virtualinvoke $r7.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        virtualinvoke $r7.<java.io.ByteArrayOutputStream: void reset()>();

        staticinvoke <org.apache.commons.collections4.MapUtils: void verbosePrint(java.io.PrintStream,java.lang.Object,java.util.Map)>($r8, null, $r9);

        $r13 = virtualinvoke $r7.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r6, $r13);

        return;
    }

    public void testVerbosePrint()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        java.lang.String r5, $r22;
        java.io.ByteArrayOutputStream $r8;
        java.io.PrintStream $r9;
        java.util.TreeMap $r10, $r15;
        java.lang.Integer $r11, $r13, $r16, $r18, $r20;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

        $r8 = new java.io.ByteArrayOutputStream;

        specialinvoke $r8.<java.io.ByteArrayOutputStream: void <init>()>();

        $r9 = new java.io.PrintStream;

        specialinvoke $r9.<java.io.PrintStream: void <init>(java.io.OutputStream)>($r8);

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("Print Map = ");

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("{");

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("    0 = A");

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("    1 = ");

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("    {");

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("        2 = B");

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("        3 = C");

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("    }");

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("    7 = (this Map)");

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("}");

        r5 = virtualinvoke $r8.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.ByteArrayOutputStream: void reset()>();

        $r10 = new java.util.TreeMap;

        specialinvoke $r10.<java.util.TreeMap: void <init>()>();

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, "B");

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, "C");

        $r15 = new java.util.TreeMap;

        specialinvoke $r15.<java.util.TreeMap: void <init>()>();

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, $r10);

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, "A");

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(7);

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, $r15);

        staticinvoke <org.apache.commons.collections4.MapUtils: void verbosePrint(java.io.PrintStream,java.lang.Object,java.util.Map)>($r9, "Print Map", $r15);

        $r22 = virtualinvoke $r8.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r5, $r22);

        return;
    }

    public void testDebugPrint()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        java.lang.String r5, $r13, $r15, $r19, $r21, $r25, $r27, $r31, $r33, $r37, $r39, $r43, $r45, $r58;
        java.io.ByteArrayOutputStream $r8;
        java.io.PrintStream $r9;
        java.lang.StringBuilder $r10, $r11, $r14, $r16, $r17, $r20, $r22, $r23, $r26, $r28, $r29, $r32, $r34, $r35, $r38, $r40, $r41, $r44;
        java.lang.Class $r12, $r18, $r24, $r30, $r36, $r42;
        java.util.TreeMap $r46, $r51;
        java.lang.Integer $r47, $r49, $r52, $r54, $r56;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

        $r8 = new java.io.ByteArrayOutputStream;

        specialinvoke $r8.<java.io.ByteArrayOutputStream: void <init>()>();

        $r9 = new java.io.PrintStream;

        specialinvoke $r9.<java.io.PrintStream: void <init>(java.io.OutputStream)>($r8);

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("Print Map = ");

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("{");

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    0 = A ");

        $r12 = class "Ljava/lang/String;";

        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.String getName()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r15);

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("    1 = ");

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("    {");

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("        2 = B ");

        $r18 = class "Ljava/lang/String;";

        $r19 = virtualinvoke $r18.<java.lang.Class: java.lang.String getName()>();

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r21);

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("        3 = C ");

        $r24 = class "Ljava/lang/String;";

        $r25 = virtualinvoke $r24.<java.lang.Class: java.lang.String getName()>();

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r27);

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    } ");

        $r30 = class "Ljava/util/TreeMap;";

        $r31 = virtualinvoke $r30.<java.lang.Class: java.lang.String getName()>();

        $r32 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r33);

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    7 = (this Map) ");

        $r36 = class "Ljava/util/TreeMap;";

        $r37 = virtualinvoke $r36.<java.lang.Class: java.lang.String getName()>();

        $r38 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r39);

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("} ");

        $r42 = class "Ljava/util/TreeMap;";

        $r43 = virtualinvoke $r42.<java.lang.Class: java.lang.String getName()>();

        $r44 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r45);

        r5 = virtualinvoke $r8.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.ByteArrayOutputStream: void reset()>();

        $r46 = new java.util.TreeMap;

        specialinvoke $r46.<java.util.TreeMap: void <init>()>();

        $r47 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        interfaceinvoke $r46.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r47, "B");

        $r49 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke $r46.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r49, "C");

        $r51 = new java.util.TreeMap;

        specialinvoke $r51.<java.util.TreeMap: void <init>()>();

        $r52 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke $r51.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r52, $r46);

        $r54 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        interfaceinvoke $r51.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r54, "A");

        $r56 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(7);

        interfaceinvoke $r51.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r56, $r51);

        staticinvoke <org.apache.commons.collections4.MapUtils: void debugPrint(java.io.PrintStream,java.lang.Object,java.util.Map)>($r9, "Print Map", $r51);

        $r58 = virtualinvoke $r8.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r5, $r58);

        return;
    }

    public void testVerbosePrintSelfReference()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        java.lang.String r8, $r30;
        java.io.ByteArrayOutputStream $r9;
        java.io.PrintStream $r10;
        java.util.TreeMap $r11, $r12, $r13;
        java.lang.Integer $r14, $r16, $r18, $r20, $r22, $r24, $r26, $r28;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

        $r9 = new java.io.ByteArrayOutputStream;

        specialinvoke $r9.<java.io.ByteArrayOutputStream: void <init>()>();

        $r10 = new java.io.PrintStream;

        specialinvoke $r10.<java.io.PrintStream: void <init>(java.io.OutputStream)>($r9);

        $r11 = new java.util.TreeMap;

        specialinvoke $r11.<java.util.TreeMap: void <init>()>();

        $r12 = new java.util.TreeMap;

        specialinvoke $r12.<java.util.TreeMap: void <init>()>();

        $r13 = new java.util.TreeMap;

        specialinvoke $r13.<java.util.TreeMap: void <init>()>();

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, "A");

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, $r12);

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, "B");

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, $r11);

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r22, $r13);

        $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r24, "C");

        $r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r26, $r11);

        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(7);

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r28, $r12);

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("Print Map = ");

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("{");

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("    0 = A");

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("    1 = ");

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("    {");

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("        2 = B");

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("        3 = (ancestor[0] Map)");

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("        4 = ");

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("        {");

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("            5 = C");

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("            6 = (ancestor[1] Map)");

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("            7 = (ancestor[0] Map)");

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("        }");

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("    }");

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("}");

        r8 = virtualinvoke $r9.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.ByteArrayOutputStream: void reset()>();

        staticinvoke <org.apache.commons.collections4.MapUtils: void verbosePrint(java.io.PrintStream,java.lang.Object,java.util.Map)>($r10, "Print Map", $r11);

        $r30 = virtualinvoke $r9.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r8, $r30);

        return;
    }

    public void testDebugPrintSelfReference()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        java.lang.String r8, $r33, $r35, $r39, $r41, $r45, $r47, $r51, $r53, $r57, $r59, $r63, $r65, $r69, $r71, $r75, $r77, $r81, $r83, $r84;
        java.io.ByteArrayOutputStream $r9;
        java.io.PrintStream $r10;
        java.util.TreeMap $r11, $r12, $r13;
        java.lang.Integer $r14, $r16, $r18, $r20, $r22, $r24, $r26, $r28;
        java.lang.StringBuilder $r30, $r31, $r34, $r36, $r37, $r40, $r42, $r43, $r46, $r48, $r49, $r52, $r54, $r55, $r58, $r60, $r61, $r64, $r66, $r67, $r70, $r72, $r73, $r76, $r78, $r79, $r82;
        java.lang.Class $r32, $r38, $r44, $r50, $r56, $r62, $r68, $r74, $r80;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

        $r9 = new java.io.ByteArrayOutputStream;

        specialinvoke $r9.<java.io.ByteArrayOutputStream: void <init>()>();

        $r10 = new java.io.PrintStream;

        specialinvoke $r10.<java.io.PrintStream: void <init>(java.io.OutputStream)>($r9);

        $r11 = new java.util.TreeMap;

        specialinvoke $r11.<java.util.TreeMap: void <init>()>();

        $r12 = new java.util.TreeMap;

        specialinvoke $r12.<java.util.TreeMap: void <init>()>();

        $r13 = new java.util.TreeMap;

        specialinvoke $r13.<java.util.TreeMap: void <init>()>();

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, "A");

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, $r12);

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, "B");

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, $r11);

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r22, $r13);

        $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r24, "C");

        $r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r26, $r11);

        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(7);

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r28, $r12);

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("Print Map = ");

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("{");

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    0 = A ");

        $r32 = class "Ljava/lang/String;";

        $r33 = virtualinvoke $r32.<java.lang.Class: java.lang.String getName()>();

        $r34 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r35);

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("    1 = ");

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("    {");

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("        2 = B ");

        $r38 = class "Ljava/lang/String;";

        $r39 = virtualinvoke $r38.<java.lang.Class: java.lang.String getName()>();

        $r40 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r41);

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("        3 = (ancestor[0] Map) ");

        $r44 = class "Ljava/util/TreeMap;";

        $r45 = virtualinvoke $r44.<java.lang.Class: java.lang.String getName()>();

        $r46 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r47);

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("        4 = ");

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("        {");

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("            5 = C ");

        $r50 = class "Ljava/lang/String;";

        $r51 = virtualinvoke $r50.<java.lang.Class: java.lang.String getName()>();

        $r52 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r51);

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r53);

        $r54 = new java.lang.StringBuilder;

        specialinvoke $r54.<java.lang.StringBuilder: void <init>()>();

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("            6 = (ancestor[1] Map) ");

        $r56 = class "Ljava/util/TreeMap;";

        $r57 = virtualinvoke $r56.<java.lang.Class: java.lang.String getName()>();

        $r58 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r57);

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r59);

        $r60 = new java.lang.StringBuilder;

        specialinvoke $r60.<java.lang.StringBuilder: void <init>()>();

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("            7 = (ancestor[0] Map) ");

        $r62 = class "Ljava/util/TreeMap;";

        $r63 = virtualinvoke $r62.<java.lang.Class: java.lang.String getName()>();

        $r64 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r63);

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r65);

        $r66 = new java.lang.StringBuilder;

        specialinvoke $r66.<java.lang.StringBuilder: void <init>()>();

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("        } ");

        $r68 = class "Ljava/util/TreeMap;";

        $r69 = virtualinvoke $r68.<java.lang.Class: java.lang.String getName()>();

        $r70 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r69);

        $r71 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r71);

        $r72 = new java.lang.StringBuilder;

        specialinvoke $r72.<java.lang.StringBuilder: void <init>()>();

        $r73 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    } ");

        $r74 = class "Ljava/util/TreeMap;";

        $r75 = virtualinvoke $r74.<java.lang.Class: java.lang.String getName()>();

        $r76 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r75);

        $r77 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r77);

        $r78 = new java.lang.StringBuilder;

        specialinvoke $r78.<java.lang.StringBuilder: void <init>()>();

        $r79 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("} ");

        $r80 = class "Ljava/util/TreeMap;";

        $r81 = virtualinvoke $r80.<java.lang.Class: java.lang.String getName()>();

        $r82 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r81);

        $r83 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r83);

        r8 = virtualinvoke $r9.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.ByteArrayOutputStream: void reset()>();

        staticinvoke <org.apache.commons.collections4.MapUtils: void debugPrint(java.io.PrintStream,java.lang.Object,java.util.Map)>($r10, "Print Map", $r11);

        $r84 = virtualinvoke $r9.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r8, $r84);

        return;
    }

    public void testEmptyIfNull()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        java.util.Map $r2, $r4;
        boolean $z0;
        java.util.HashMap $r3;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

        $r2 = staticinvoke <org.apache.commons.collections4.MapUtils: java.util.Map emptyIfNull(java.util.Map)>(null);

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        $r4 = staticinvoke <org.apache.commons.collections4.MapUtils: java.util.Map emptyIfNull(java.util.Map)>($r3);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($r3, $r4);

        return;
    }

    public void testIsEmptyWithEmptyMap()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        java.util.HashMap $r2;
        java.lang.Boolean $r3, $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z0 = staticinvoke <org.apache.commons.collections4.MapUtils: boolean isEmpty(java.util.Map)>($r2);

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r3, $r4);

        return;
    }

    public void testIsEmptyWithNonEmptyMap()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        java.util.HashMap $r2;
        java.lang.Boolean $r4, $r5;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("item", "value");

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $z0 = staticinvoke <org.apache.commons.collections4.MapUtils: boolean isEmpty(java.util.Map)>($r2);

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r4, $r5);

        return;
    }

    public void testIsEmptyWithNull()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        java.lang.Boolean $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z0 = staticinvoke <org.apache.commons.collections4.MapUtils: boolean isEmpty(java.util.Map)>(null);

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r1, $r2);

        return;
    }

    public void testIsNotEmptyWithEmptyMap()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        java.util.HashMap $r2;
        java.lang.Boolean $r3, $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $z0 = staticinvoke <org.apache.commons.collections4.MapUtils: boolean isNotEmpty(java.util.Map)>($r2);

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r3, $r4);

        return;
    }

    public void testIsNotEmptyWithNonEmptyMap()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        java.util.HashMap $r2;
        java.lang.Boolean $r4, $r5;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("item", "value");

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z0 = staticinvoke <org.apache.commons.collections4.MapUtils: boolean isNotEmpty(java.util.Map)>($r2);

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r4, $r5);

        return;
    }

    public void testIsNotEmptyWithNull()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        java.lang.Boolean $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $z0 = staticinvoke <org.apache.commons.collections4.MapUtils: boolean isNotEmpty(java.util.Map)>(null);

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r1, $r2);

        return;
    }

    public void testPopulateMap()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        java.util.ArrayList $r2;
        java.util.HashMap $r3, $r5;
        org.apache.commons.collections4.Transformer $r4, $r6, $r7;
        int $i0, $i2, $i4, $i5, $i7, $i9, i10, i11;
        long $l1, $l3, $l6, $l8;
        java.lang.Boolean $r8, $r12, $r13, $r15, $r16, $r20, $r28, $r32, $r33, $r35, $r36, $r38;
        java.lang.Object $r9, $r14, $r17, $r21, $r24, $r27, $r29, $r34, $r37, $r39, $r40, $r43;
        java.lang.String $r10, $r18, $r22, $r25, $r30, $r41;
        java.lang.Integer $r11, $r19, $r23, $r26, $r31, $r42;
        boolean $z7, $z8, $z9, $z10, $z11, $z12;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>("1");

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>("3");

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>("5");

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>("7");

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>("2");

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>("4");

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>("6");

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        $r4 = <org.apache.commons.collections4.collection.TransformedCollectionTest: org.apache.commons.collections4.Transformer STRING_TO_INTEGER_TRANSFORMER>;

        staticinvoke <org.apache.commons.collections4.MapUtils: void populateMap(java.util.Map,java.lang.Iterable,org.apache.commons.collections4.Transformer)>($r3, $r2, $r4);

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $l1 = (long) $i0;

        $i2 = interfaceinvoke $r3.<java.util.Map: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, $l3);

        i10 = 0;

     label1:
        $i4 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i10 >= $i4 goto label2;

        $r28 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r29 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i10);

        $r30 = (java.lang.String) $r29;

        $r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r30);

        $z10 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>($r31);

        $r32 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r28, $r32);

        $r33 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r34 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i10);

        $z11 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>($r34);

        $r35 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z11);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r33, $r35);

        $r36 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r37 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i10);

        $z12 = interfaceinvoke $r3.<java.util.Map: boolean containsValue(java.lang.Object)>($r37);

        $r38 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z12);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r36, $r38);

        $r39 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i10);

        $r40 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i10);

        $r41 = (java.lang.String) $r40;

        $r42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r41);

        $r43 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r42);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r39, $r43);

        i10 = i10 + 1;

        goto label1;

     label2:
        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        $r7 = <org.apache.commons.collections4.collection.TransformedCollectionTest: org.apache.commons.collections4.Transformer STRING_TO_INTEGER_TRANSFORMER>;

        $r6 = <org.apache.commons.collections4.collection.TransformedCollectionTest: org.apache.commons.collections4.Transformer STRING_TO_INTEGER_TRANSFORMER>;

        staticinvoke <org.apache.commons.collections4.MapUtils: void populateMap(java.util.Map,java.lang.Iterable,org.apache.commons.collections4.Transformer,org.apache.commons.collections4.Transformer)>($r5, $r2, $r7, $r6);

        $i5 = interfaceinvoke $r2.<java.util.List: int size()>();

        $l6 = (long) $i5;

        $i7 = interfaceinvoke $r5.<java.util.Map: int size()>();

        $l8 = (long) $i7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l6, $l8);

        i11 = 0;

     label3:
        $i9 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i11 >= $i9 goto label4;

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r9 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i11);

        $r10 = (java.lang.String) $r9;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r10);

        $z7 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>($r11);

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z7);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r8, $r12);

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r14 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i11);

        $z8 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>($r14);

        $r15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z8);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r13, $r15);

        $r16 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r17 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i11);

        $r18 = (java.lang.String) $r17;

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r18);

        $z9 = interfaceinvoke $r5.<java.util.Map: boolean containsValue(java.lang.Object)>($r19);

        $r20 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r16, $r20);

        $r21 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i11);

        $r22 = (java.lang.String) $r21;

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r22);

        $r24 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i11);

        $r25 = (java.lang.String) $r24;

        $r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r25);

        $r27 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r26);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r23, $r27);

        i11 = i11 + 1;

        goto label3;

     label4:
        return;
    }

    public void testPopulateMultiMap()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        org.apache.commons.collections4.map.MultiValueMap r2;
        java.util.ArrayList $r3;
        org.apache.commons.collections4.MapUtilsTest$X $r4, $r5, $r6, $r7, $r8, $r14;
        java.util.TreeMap $r9;
        org.apache.commons.collections4.MapUtilsTest$4 $r10;
        org.apache.commons.collections4.Transformer $r11;
        int $i0, $i2, $i4, $i5, i6;
        long $l1, $l3;
        java.lang.Boolean $r12, $r16, $r17, $r19;
        java.lang.Object $r13, $r18;
        java.lang.Integer $r15;
        boolean $z5, $z6;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = new org.apache.commons.collections4.MapUtilsTest$X;

        specialinvoke $r4.<org.apache.commons.collections4.MapUtilsTest$X: void <init>(int,java.lang.String)>(1, "x1");

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r4);

        $r5 = new org.apache.commons.collections4.MapUtilsTest$X;

        specialinvoke $r5.<org.apache.commons.collections4.MapUtilsTest$X: void <init>(int,java.lang.String)>(2, "x2");

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r5);

        $r6 = new org.apache.commons.collections4.MapUtilsTest$X;

        specialinvoke $r6.<org.apache.commons.collections4.MapUtilsTest$X: void <init>(int,java.lang.String)>(2, "x3");

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r6);

        $r7 = new org.apache.commons.collections4.MapUtilsTest$X;

        specialinvoke $r7.<org.apache.commons.collections4.MapUtilsTest$X: void <init>(int,java.lang.String)>(5, "x4");

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r7);

        $r8 = new org.apache.commons.collections4.MapUtilsTest$X;

        specialinvoke $r8.<org.apache.commons.collections4.MapUtilsTest$X: void <init>(int,java.lang.String)>(5, "x5");

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r8);

        $r9 = new java.util.TreeMap;

        specialinvoke $r9.<java.util.TreeMap: void <init>()>();

        r2 = staticinvoke <org.apache.commons.collections4.map.MultiValueMap: org.apache.commons.collections4.map.MultiValueMap multiValueMap(java.util.Map)>($r9);

        $r10 = new org.apache.commons.collections4.MapUtilsTest$4;

        specialinvoke $r10.<org.apache.commons.collections4.MapUtilsTest$4: void <init>(org.apache.commons.collections4.MapUtilsTest)>(r0);

        $r11 = staticinvoke <org.apache.commons.collections4.TransformerUtils: org.apache.commons.collections4.Transformer nopTransformer()>();

        staticinvoke <org.apache.commons.collections4.MapUtils: void populateMap(org.apache.commons.collections4.MultiMap,java.lang.Iterable,org.apache.commons.collections4.Transformer,org.apache.commons.collections4.Transformer)>(r2, $r3, $r10, $r11);

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $l1 = (long) $i0;

        $i2 = virtualinvoke r2.<org.apache.commons.collections4.map.MultiValueMap: int totalSize()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, $l3);

        i6 = 0;

     label1:
        $i4 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i6 >= $i4 goto label2;

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r13 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i6);

        $r14 = (org.apache.commons.collections4.MapUtilsTest$X) $r13;

        $i5 = $r14.<org.apache.commons.collections4.MapUtilsTest$X: int key>;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $z5 = virtualinvoke r2.<org.apache.commons.collections4.map.MultiValueMap: boolean containsKey(java.lang.Object)>($r15);

        $r16 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r12, $r16);

        $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r18 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i6);

        $z6 = virtualinvoke r2.<org.apache.commons.collections4.map.MultiValueMap: boolean containsValue(java.lang.Object)>($r18);

        $r19 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z6);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r17, $r19);

        i6 = i6 + 1;

        goto label1;

     label2:
        return;
    }

    public void testIterableMap()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        org.apache.commons.collections4.IterableMap r1, $r9;
        java.util.HashMap $r4;
        org.apache.commons.collections4.map.HashedMap $r8;
        java.lang.NullPointerException $r10;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

     label1:
        staticinvoke <org.apache.commons.collections4.MapUtils: org.apache.commons.collections4.IterableMap iterableMap(java.util.Map)>(null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should throw NullPointerException");

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

     label4:
        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("foo", "foov");

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("bar", "barv");

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("baz", "bazv");

        r1 = staticinvoke <org.apache.commons.collections4.MapUtils: org.apache.commons.collections4.IterableMap iterableMap(java.util.Map)>($r4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r4, r1);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>($r4, r1);

        $r8 = new org.apache.commons.collections4.map.HashedMap;

        specialinvoke $r8.<org.apache.commons.collections4.map.HashedMap: void <init>(java.util.Map)>($r4);

        $r9 = staticinvoke <org.apache.commons.collections4.MapUtils: org.apache.commons.collections4.IterableMap iterableMap(java.util.Map)>($r8);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($r8, $r9);

        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public void testIterableSortedMap()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        org.apache.commons.collections4.IterableSortedMap r1;
        java.util.TreeMap $r3;
        org.apache.commons.collections4.IterableMap $r7;
        java.lang.NullPointerException $r8;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

     label1:
        staticinvoke <org.apache.commons.collections4.MapUtils: org.apache.commons.collections4.IterableSortedMap iterableSortedMap(java.util.SortedMap)>(null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should throw NullPointerException");

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

     label4:
        $r3 = new java.util.TreeMap;

        specialinvoke $r3.<java.util.TreeMap: void <init>()>();

        virtualinvoke $r3.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("foo", "foov");

        virtualinvoke $r3.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("bar", "barv");

        virtualinvoke $r3.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("baz", "bazv");

        r1 = staticinvoke <org.apache.commons.collections4.MapUtils: org.apache.commons.collections4.IterableSortedMap iterableSortedMap(java.util.SortedMap)>($r3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r3, r1);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>($r3, r1);

        $r7 = staticinvoke <org.apache.commons.collections4.MapUtils: org.apache.commons.collections4.IterableMap iterableMap(java.util.Map)>(r1);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>(r1, $r7);

        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public void testSize0()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        java.util.HashMap $r1;
        int $i0;
        long $l1;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        $i0 = staticinvoke <org.apache.commons.collections4.MapUtils: int size(java.util.Map)>($r1);

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        return;
    }

    public void testSizeNull()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        int $i0;
        long $l1;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

        $i0 = staticinvoke <org.apache.commons.collections4.MapUtils: int size(java.util.Map)>(null);

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        return;
    }

    public void testSize()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        java.util.HashMap $r2;
        int $i0;
        long $l1;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        virtualinvoke $r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("A", "1");

        virtualinvoke $r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("B", "2");

        $i0 = staticinvoke <org.apache.commons.collections4.MapUtils: int size(java.util.Map)>($r2);

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l1);

        return;
    }

    public void testToProperties()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        java.util.Properties r2;
        java.util.HashMap $r3;
        java.lang.Object $r7, $r8, $r9, $r10, $r11, $r12;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("key1", "A");

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("key2", "B");

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("key3", "C");

        r2 = staticinvoke <org.apache.commons.collections4.MapUtils: java.util.Properties toProperties(java.util.Map)>($r3);

        $r7 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>("key1");

        $r8 = virtualinvoke r2.<java.util.Properties: java.lang.Object get(java.lang.Object)>("key1");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, $r8);

        $r9 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>("key2");

        $r10 = virtualinvoke r2.<java.util.Properties: java.lang.Object get(java.lang.Object)>("key2");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r9, $r10);

        $r11 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>("key3");

        $r12 = virtualinvoke r2.<java.util.Properties: java.lang.Object get(java.lang.Object)>("key3");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r11, $r12);

        return;
    }

    public void testToPropertiesEmpty()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        java.util.Properties r1;
        int $i0;
        long $l1;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

        r1 = staticinvoke <org.apache.commons.collections4.MapUtils: java.util.Properties toProperties(java.util.Map)>(null);

        $i0 = virtualinvoke r1.<java.util.Properties: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, 0L);

        return;
    }

    public void testgetDoubleValue()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        char c0;
        java.util.HashMap $r3, $r10;
        java.lang.Double $r4, $r6, $r7, $r8, $r9;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;
        java.lang.StringBuilder $r11, $r12, $r13, $r14;
        java.lang.String $r15;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(2.0);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("key", $r4);

        $d0 = staticinvoke <org.apache.commons.collections4.MapUtils: double getDoubleValue(java.util.Map,java.lang.Object,double)>($r3, "key", 0.0);

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(2.0, $d0, 0.0);

        $d1 = staticinvoke <org.apache.commons.collections4.MapUtils: double getDoubleValue(java.util.Map,java.lang.Object)>($r3, "key");

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(2.0, $d1, 0.0);

        $d2 = staticinvoke <org.apache.commons.collections4.MapUtils: double getDoubleValue(java.util.Map,java.lang.Object,double)>($r3, "noKey", 1.0);

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(1.0, $d2, 0.0);

        $d3 = staticinvoke <org.apache.commons.collections4.MapUtils: double getDoubleValue(java.util.Map,java.lang.Object)>($r3, "noKey");

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(0.0, $d3, 0.0);

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        $r7 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.Double getDouble(java.util.Map,java.lang.Object,java.lang.Double)>($r3, "key", $r6);

        $d4 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(2.0, $d4, 0.0);

        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r9 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.Double getDouble(java.util.Map,java.lang.Object,java.lang.Double)>($r3, "noKey", $r8);

        $d5 = virtualinvoke $r9.<java.lang.Double: double doubleValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(1.0, $d5, 0.0);

        $r10 = new java.util.HashMap;

        specialinvoke $r10.<java.util.HashMap: void <init>()>();

        c0 = specialinvoke r0.<org.apache.commons.collections4.MapUtilsTest: char getDecimalSeparator()>();

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("2");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("str1", $r15);

        $d6 = staticinvoke <org.apache.commons.collections4.MapUtils: double getDoubleValue(java.util.Map,java.lang.Object,double)>($r10, "str1", 0.0);

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>($d6, 2.0, 0.0);

        return;
    }

    public void testgetFloatValue()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        char c0;
        java.util.HashMap $r3, $r10;
        java.lang.Float $r4, $r6, $r7, $r8, $r9;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        java.lang.StringBuilder $r11, $r12, $r13, $r14;
        java.lang.String $r15;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        $r4 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(2.0F);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("key", $r4);

        $f0 = staticinvoke <org.apache.commons.collections4.MapUtils: float getFloatValue(java.util.Map,java.lang.Object,float)>($r3, "key", 0.0F);

        $d0 = (double) $f0;

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(2.0, $d0, 0.0);

        $f1 = staticinvoke <org.apache.commons.collections4.MapUtils: float getFloatValue(java.util.Map,java.lang.Object)>($r3, "key");

        $d1 = (double) $f1;

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(2.0, $d1, 0.0);

        $f2 = staticinvoke <org.apache.commons.collections4.MapUtils: float getFloatValue(java.util.Map,java.lang.Object,float)>($r3, "noKey", 1.0F);

        $d2 = (double) $f2;

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(1.0, $d2, 0.0);

        $f3 = staticinvoke <org.apache.commons.collections4.MapUtils: float getFloatValue(java.util.Map,java.lang.Object)>($r3, "noKey");

        staticinvoke <org.junit.Assert: void assertEquals(float,float,float)>(0.0F, $f3, 0.0F);

        $r6 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.0F);

        $r7 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.Float getFloat(java.util.Map,java.lang.Object,java.lang.Float)>($r3, "key", $r6);

        $f4 = virtualinvoke $r7.<java.lang.Float: float floatValue()>();

        $d3 = (double) $f4;

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(2.0, $d3, 0.0);

        $r8 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(1.0F);

        $r9 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.Float getFloat(java.util.Map,java.lang.Object,java.lang.Float)>($r3, "noKey", $r8);

        $f5 = virtualinvoke $r9.<java.lang.Float: float floatValue()>();

        $d4 = (double) $f5;

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(1.0, $d4, 0.0);

        $r10 = new java.util.HashMap;

        specialinvoke $r10.<java.util.HashMap: void <init>()>();

        c0 = specialinvoke r0.<org.apache.commons.collections4.MapUtilsTest: char getDecimalSeparator()>();

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("2");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("str1", $r15);

        $f6 = staticinvoke <org.apache.commons.collections4.MapUtils: float getFloatValue(java.util.Map,java.lang.Object,float)>($r10, "str1", 0.0F);

        $d5 = (double) $f6;

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>($d5, 2.0, 0.0);

        return;
    }

    public void testgetLongValue()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        java.util.HashMap $r3, $r10;
        java.lang.Long $r4, $r6, $r7, $r8, $r9, $r12, $r13;
        long $l0, $l1, $l2, $l3, $l4, $l5, $l6, $l7;
        double $d0, $d1, $d2;
        float $f0, $f1, $f2, $f3, $f4;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(2L);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("key", $r4);

        $l0 = staticinvoke <org.apache.commons.collections4.MapUtils: long getLongValue(java.util.Map,java.lang.Object,long)>($r3, "key", 0L);

        $d0 = (double) $l0;

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(2.0, $d0, 0.0);

        $l1 = staticinvoke <org.apache.commons.collections4.MapUtils: long getLongValue(java.util.Map,java.lang.Object)>($r3, "key");

        $d1 = (double) $l1;

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(2.0, $d1, 0.0);

        $l2 = staticinvoke <org.apache.commons.collections4.MapUtils: long getLongValue(java.util.Map,java.lang.Object,long)>($r3, "noKey", 1L);

        $f0 = (float) $l2;

        staticinvoke <org.junit.Assert: void assertEquals(float,float,float)>(1.0F, $f0, 0.0F);

        $l3 = staticinvoke <org.apache.commons.collections4.MapUtils: long getLongValue(java.util.Map,java.lang.Object)>($r3, "noKey");

        $f1 = (float) $l3;

        staticinvoke <org.junit.Assert: void assertEquals(float,float,float)>(0.0F, $f1, 0.0F);

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(0L);

        $r7 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.Long getLong(java.util.Map,java.lang.Object,java.lang.Long)>($r3, "key", $r6);

        $l4 = virtualinvoke $r7.<java.lang.Long: long longValue()>();

        $d2 = (double) $l4;

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(2.0, $d2, 0.0);

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L);

        $r9 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.Long getLong(java.util.Map,java.lang.Object,java.lang.Long)>($r3, "noKey", $r8);

        $l5 = virtualinvoke $r9.<java.lang.Long: long longValue()>();

        $f2 = (float) $l5;

        staticinvoke <org.junit.Assert: void assertEquals(float,float,float)>(1.0F, $f2, 0.0F);

        $r10 = new java.util.HashMap;

        specialinvoke $r10.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("str1", "2");

        $l6 = staticinvoke <org.apache.commons.collections4.MapUtils: long getLongValue(java.util.Map,java.lang.Object,long)>($r10, "str1", 0L);

        $f3 = (float) $l6;

        staticinvoke <org.junit.Assert: void assertEquals(float,float,float)>($f3, 2.0F, 0.0F);

        $r12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L);

        $r13 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.Long getLong(java.util.Map,java.lang.Object,java.lang.Long)>($r10, "str1", $r12);

        $l7 = virtualinvoke $r13.<java.lang.Long: long longValue()>();

        $f4 = (float) $l7;

        staticinvoke <org.junit.Assert: void assertEquals(float,float,float)>($f4, 2.0F, 0.0F);

        return;
    }

    public void testgetIntValue()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        java.util.HashMap $r3, $r10;
        java.lang.Integer $r4, $r6, $r7, $r8, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("key", $r4);

        $i0 = staticinvoke <org.apache.commons.collections4.MapUtils: int getIntValue(java.util.Map,java.lang.Object,int)>($r3, "key", 0);

        $f0 = (float) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(float,float,float)>(2.0F, $f0, 0.0F);

        $i1 = staticinvoke <org.apache.commons.collections4.MapUtils: int getIntValue(java.util.Map,java.lang.Object)>($r3, "key");

        $f1 = (float) $i1;

        staticinvoke <org.junit.Assert: void assertEquals(float,float,float)>(2.0F, $f1, 0.0F);

        $i2 = staticinvoke <org.apache.commons.collections4.MapUtils: int getIntValue(java.util.Map,java.lang.Object,int)>($r3, "noKey", 0);

        $f2 = (float) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(float,float,float)>(0.0F, $f2, 0.0F);

        $i3 = staticinvoke <org.apache.commons.collections4.MapUtils: int getIntValue(java.util.Map,java.lang.Object)>($r3, "noKey");

        $f3 = (float) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(float,float,float)>(0.0F, $f3, 0.0F);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r7 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.Integer getInteger(java.util.Map,java.lang.Object,java.lang.Integer)>($r3, "key", $r6);

        $i4 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        $f4 = (float) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(float,float,float)>(2.0F, $f4, 0.0F);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r9 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.Integer getInteger(java.util.Map,java.lang.Object,java.lang.Integer)>($r3, "noKey", $r8);

        $i5 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        $f5 = (float) $i5;

        staticinvoke <org.junit.Assert: void assertEquals(float,float,float)>(0.0F, $f5, 0.0F);

        $r10 = new java.util.HashMap;

        specialinvoke $r10.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("str1", "2");

        $i6 = staticinvoke <org.apache.commons.collections4.MapUtils: int getIntValue(java.util.Map,java.lang.Object,int)>($r10, "str1", 0);

        $f6 = (float) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(float,float,float)>($f6, 2.0F, 0.0F);

        return;
    }

    public void testgetShortValue()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        java.util.HashMap $r3, $r10;
        java.lang.Short $r4, $r6, $r7, $r8, $r9;
        short $s1, $s2, $s3, $s4, $s5, $s6, $s7;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        $r4 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(10);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("key", $r4);

        $s1 = staticinvoke <org.apache.commons.collections4.MapUtils: short getShortValue(java.util.Map,java.lang.Object,short)>($r3, "key", 10);

        $f0 = (float) $s1;

        staticinvoke <org.junit.Assert: void assertEquals(float,float,float)>(10.0F, $f0, 0.0F);

        $s2 = staticinvoke <org.apache.commons.collections4.MapUtils: short getShortValue(java.util.Map,java.lang.Object)>($r3, "key");

        $f1 = (float) $s2;

        staticinvoke <org.junit.Assert: void assertEquals(float,float,float)>(10.0F, $f1, 0.0F);

        $s3 = staticinvoke <org.apache.commons.collections4.MapUtils: short getShortValue(java.util.Map,java.lang.Object,short)>($r3, "noKey", 10);

        $f2 = (float) $s3;

        staticinvoke <org.junit.Assert: void assertEquals(float,float,float)>(10.0F, $f2, 0.0F);

        $s4 = staticinvoke <org.apache.commons.collections4.MapUtils: short getShortValue(java.util.Map,java.lang.Object)>($r3, "noKey");

        $f3 = (float) $s4;

        staticinvoke <org.junit.Assert: void assertEquals(float,float,float)>(0.0F, $f3, 0.0F);

        $r6 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(10);

        $r7 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.Short getShort(java.util.Map,java.lang.Object,java.lang.Short)>($r3, "key", $r6);

        $s5 = virtualinvoke $r7.<java.lang.Short: short shortValue()>();

        $f4 = (float) $s5;

        staticinvoke <org.junit.Assert: void assertEquals(float,float,float)>(10.0F, $f4, 0.0F);

        $r8 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(10);

        $r9 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.Short getShort(java.util.Map,java.lang.Object,java.lang.Short)>($r3, "noKey", $r8);

        $s6 = virtualinvoke $r9.<java.lang.Short: short shortValue()>();

        $f5 = (float) $s6;

        staticinvoke <org.junit.Assert: void assertEquals(float,float,float)>(10.0F, $f5, 0.0F);

        $r10 = new java.util.HashMap;

        specialinvoke $r10.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("str1", "10");

        $s7 = staticinvoke <org.apache.commons.collections4.MapUtils: short getShortValue(java.util.Map,java.lang.Object,short)>($r10, "str1", 10);

        $f6 = (float) $s7;

        staticinvoke <org.junit.Assert: void assertEquals(float,float,float)>($f6, 10.0F, 0.0F);

        return;
    }

    public void testgetByteValue()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        java.util.HashMap $r3, $r10;
        java.lang.Byte $r4, $r6, $r7, $r8, $r9;
        byte $b1, $b2, $b3, $b4, $b5, $b6, $b7;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        $r4 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(100);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("key", $r4);

        $b1 = staticinvoke <org.apache.commons.collections4.MapUtils: byte getByteValue(java.util.Map,java.lang.Object,byte)>($r3, "key", 100);

        $f0 = (float) $b1;

        staticinvoke <org.junit.Assert: void assertEquals(float,float,float)>(100.0F, $f0, 0.0F);

        $b2 = staticinvoke <org.apache.commons.collections4.MapUtils: byte getByteValue(java.util.Map,java.lang.Object)>($r3, "key");

        $f1 = (float) $b2;

        staticinvoke <org.junit.Assert: void assertEquals(float,float,float)>(100.0F, $f1, 0.0F);

        $b3 = staticinvoke <org.apache.commons.collections4.MapUtils: byte getByteValue(java.util.Map,java.lang.Object,byte)>($r3, "noKey", 100);

        $f2 = (float) $b3;

        staticinvoke <org.junit.Assert: void assertEquals(float,float,float)>(100.0F, $f2, 0.0F);

        $b4 = staticinvoke <org.apache.commons.collections4.MapUtils: byte getByteValue(java.util.Map,java.lang.Object)>($r3, "noKey");

        $f3 = (float) $b4;

        staticinvoke <org.junit.Assert: void assertEquals(float,float,float)>(0.0F, $f3, 0.0F);

        $r6 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(100);

        $r7 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.Byte getByte(java.util.Map,java.lang.Object,java.lang.Byte)>($r3, "key", $r6);

        $b5 = virtualinvoke $r7.<java.lang.Byte: byte byteValue()>();

        $f4 = (float) $b5;

        staticinvoke <org.junit.Assert: void assertEquals(float,float,float)>(100.0F, $f4, 0.0F);

        $r8 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(100);

        $r9 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.Byte getByte(java.util.Map,java.lang.Object,java.lang.Byte)>($r3, "noKey", $r8);

        $b6 = virtualinvoke $r9.<java.lang.Byte: byte byteValue()>();

        $f5 = (float) $b6;

        staticinvoke <org.junit.Assert: void assertEquals(float,float,float)>(100.0F, $f5, 0.0F);

        $r10 = new java.util.HashMap;

        specialinvoke $r10.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("str1", "100");

        $b7 = staticinvoke <org.apache.commons.collections4.MapUtils: byte getByteValue(java.util.Map,java.lang.Object,byte)>($r10, "str1", 100);

        $f6 = (float) $b7;

        staticinvoke <org.junit.Assert: void assertEquals(float,float,float)>($f6, 100.0F, 0.0F);

        return;
    }

    public void testgetNumber()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        java.lang.Integer r2;
        java.util.HashMap $r3;
        int $i0, $i1, $i2, $i3;
        float $f0, $f1, $f2, $f3;
        java.lang.Number $r5, $r6;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1000);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("key", r2);

        $i0 = virtualinvoke r2.<java.lang.Number: int intValue()>();

        $f0 = (float) $i0;

        $r5 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.Number getNumber(java.util.Map,java.lang.Object,java.lang.Number)>($r3, "key", r2);

        $i1 = virtualinvoke $r5.<java.lang.Number: int intValue()>();

        $f1 = (float) $i1;

        staticinvoke <org.junit.Assert: void assertEquals(float,float,float)>($f0, $f1, 0.0F);

        $i2 = virtualinvoke r2.<java.lang.Number: int intValue()>();

        $f2 = (float) $i2;

        $r6 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.Number getNumber(java.util.Map,java.lang.Object,java.lang.Number)>($r3, "noKey", r2);

        $i3 = virtualinvoke $r6.<java.lang.Number: int intValue()>();

        $f3 = (float) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(float,float,float)>($f2, $f3, 0.0F);

        return;
    }

    public void testgetString()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        java.util.HashMap $r2;
        java.lang.String $r4, $r5, $r6, $r7, $r8;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("key", "str");

        $r4 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.String getString(java.util.Map,java.lang.Object,java.lang.String)>($r2, "key", "defualt");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("str", $r4);

        $r5 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.String getString(java.util.Map,java.lang.Object)>($r2, "key");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("str", $r5);

        $r6 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.String getString(java.util.Map,java.lang.Object)>(null, "key");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $r6);

        $r7 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.String getString(java.util.Map,java.lang.Object,java.lang.String)>($r2, "noKey", "default");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("default", $r7);

        $r8 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.String getString(java.util.Map,java.lang.Object,java.lang.String)>(null, "noKey", "default");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("default", $r8);

        return;
    }

    public void testgetObject()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        java.util.HashMap $r2;
        java.lang.Object $r4, $r5, $r6, $r8, $r9;
        java.lang.Object[] $r7;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("key", "str");

        $r4 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.Object getObject(java.util.Map,java.lang.Object,java.lang.Object)>($r2, "key", "defualt");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("str", $r4);

        $r5 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.Object getObject(java.util.Map,java.lang.Object)>($r2, "key");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("str", $r5);

        $r6 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.Object getObject(java.util.Map,java.lang.Object)>(null, "key");

        $r7 = (java.lang.Object[]) $r6;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object[],java.lang.Object[])>(null, $r7);

        $r8 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.Object getObject(java.util.Map,java.lang.Object,java.lang.Object)>($r2, "noKey", "default");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("default", $r8);

        $r9 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.Object getObject(java.util.Map,java.lang.Object,java.lang.Object)>(null, "noKey", "default");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("default", $r9);

        return;
    }

    public void testgetBooleanValue()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        java.util.HashMap $r3, $r11;
        java.lang.Boolean $r4, $r6, $r7, $r8, $r9, $r10, $r13, $r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("key", $r4);

        $z0 = staticinvoke <org.apache.commons.collections4.MapUtils: boolean getBooleanValue(java.util.Map,java.lang.Object,boolean)>($r3, "key", 1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $z1 = staticinvoke <org.apache.commons.collections4.MapUtils: boolean getBooleanValue(java.util.Map,java.lang.Object)>($r3, "key");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $z2 = staticinvoke <org.apache.commons.collections4.MapUtils: boolean getBooleanValue(java.util.Map,java.lang.Object,boolean)>($r3, "noKey", 1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $z3 = staticinvoke <org.apache.commons.collections4.MapUtils: boolean getBooleanValue(java.util.Map,java.lang.Object)>($r3, "noKey");

        if $z3 != 0 goto label1;

        $z8 = 1;

        goto label2;

     label1:
        $z8 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r7 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.Boolean getBoolean(java.util.Map,java.lang.Object,java.lang.Boolean)>($r3, "key", $r6);

        $z4 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r9 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.Boolean getBoolean(java.util.Map,java.lang.Object,java.lang.Boolean)>($r3, "noKey", $r8);

        $z5 = virtualinvoke $r9.<java.lang.Boolean: boolean booleanValue()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        $r10 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.Boolean getBoolean(java.util.Map,java.lang.Object)>(null, "noKey");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $r10);

        $r11 = new java.util.HashMap;

        specialinvoke $r11.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("str1", "true");

        $z6 = staticinvoke <org.apache.commons.collections4.MapUtils: boolean getBooleanValue(java.util.Map,java.lang.Object,boolean)>($r11, "str1", 1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r14 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.Boolean getBoolean(java.util.Map,java.lang.Object,java.lang.Boolean)>($r11, "str1", $r13);

        $z7 = virtualinvoke $r14.<java.lang.Boolean: boolean booleanValue()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

        return;
    }

    public void testgetMap()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        java.util.Map r3, $r10, $r11;
        java.util.HashMap $r4, $r5;
        java.lang.Object $r8, $r9;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("key1", "value1");

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("key1", $r5);

        r3 = staticinvoke <org.apache.commons.collections4.MapUtils: java.util.Map getMap(java.util.Map,java.lang.Object,java.util.Map)>($r4, "key1", null);

        $r8 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>("key1");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("value1", $r8);

        $r9 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>("key2");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $r9);

        $r10 = staticinvoke <org.apache.commons.collections4.MapUtils: java.util.Map getMap(java.util.Map,java.lang.Object,java.util.Map)>($r4, "key2", null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $r10);

        $r11 = staticinvoke <org.apache.commons.collections4.MapUtils: java.util.Map getMap(java.util.Map,java.lang.Object,java.util.Map)>(null, "key2", null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $r11);

        return;
    }

    public void testSafeAddToMap()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        java.util.HashMap $r2;
        java.lang.Object $r3, $r4;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        staticinvoke <org.apache.commons.collections4.MapUtils: void safeAddToMap(java.util.Map,java.lang.Object,java.lang.Object)>($r2, "key1", "value1");

        staticinvoke <org.apache.commons.collections4.MapUtils: void safeAddToMap(java.util.Map,java.lang.Object,java.lang.Object)>($r2, "key2", null);

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>("key1");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("value1", $r3);

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>("key2");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $r4);

        return;
    }

    public void testOrderedMap()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        org.apache.commons.collections4.OrderedMap r2;
        java.util.HashMap $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("key1", "value1");

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("key2", "value2");

        r2 = staticinvoke <org.apache.commons.collections4.MapUtils: org.apache.commons.collections4.OrderedMap orderedMap(java.util.Map)>($r3);

        $z0 = r2 instanceof org.apache.commons.collections4.OrderedMap;

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("returned object should be a OrderedMap", $z0);

        return;
    }

    private char getDecimalSeparator()
    {
        org.apache.commons.collections4.MapUtilsTest r0;
        java.text.NumberFormat r1;
        boolean $z0;
        java.text.DecimalFormat $r2;
        java.text.DecimalFormatSymbols $r3;
        char $c0;

        r0 := @this: org.apache.commons.collections4.MapUtilsTest;

        r1 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getInstance()>();

        $z0 = r1 instanceof java.text.DecimalFormat;

        if $z0 == 0 goto label1;

        $r2 = (java.text.DecimalFormat) r1;

        $r3 = virtualinvoke $r2.<java.text.DecimalFormat: java.text.DecimalFormatSymbols getDecimalFormatSymbols()>();

        $c0 = virtualinvoke $r3.<java.text.DecimalFormatSymbols: char getDecimalSeparator()>();

        return $c0;

     label1:
        return 46;
    }
}
