public class org.apache.commons.collections4.iterators.SkippingIterator extends org.apache.commons.collections4.iterators.AbstractIteratorDecorator
{
    private final long offset;
    private long pos;

    public void <init>(java.util.Iterator, long)
    {
        org.apache.commons.collections4.iterators.SkippingIterator r0;
        java.util.Iterator r1;
        long l0;
        byte $b1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.commons.collections4.iterators.SkippingIterator;

        r1 := @parameter0: java.util.Iterator;

        l0 := @parameter1: long;

        specialinvoke r0.<org.apache.commons.collections4.iterators.AbstractIteratorDecorator: void <init>(java.util.Iterator)>(r1);

        $b1 = l0 cmp 0L;

        if $b1 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Offset parameter must not be negative.");

        throw $r2;

     label1:
        r0.<org.apache.commons.collections4.iterators.SkippingIterator: long offset> = l0;

        r0.<org.apache.commons.collections4.iterators.SkippingIterator: long pos> = 0L;

        specialinvoke r0.<org.apache.commons.collections4.iterators.SkippingIterator: void init()>();

        return;
    }

    private void init()
    {
        org.apache.commons.collections4.iterators.SkippingIterator r0;
        long $l0, $l1;
        byte $b2;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.iterators.SkippingIterator;

     label1:
        $l1 = r0.<org.apache.commons.collections4.iterators.SkippingIterator: long pos>;

        $l0 = r0.<org.apache.commons.collections4.iterators.SkippingIterator: long offset>;

        $b2 = $l1 cmp $l0;

        if $b2 >= 0 goto label2;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.iterators.SkippingIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        virtualinvoke r0.<org.apache.commons.collections4.iterators.SkippingIterator: java.lang.Object next()>();

        goto label1;

     label2:
        return;
    }

    public java.lang.Object next()
    {
        org.apache.commons.collections4.iterators.SkippingIterator r0;
        java.lang.Object r1;
        long $l0, $l1;

        r0 := @this: org.apache.commons.collections4.iterators.SkippingIterator;

        r1 = specialinvoke r0.<org.apache.commons.collections4.iterators.AbstractIteratorDecorator: java.lang.Object next()>();

        $l0 = r0.<org.apache.commons.collections4.iterators.SkippingIterator: long pos>;

        $l1 = $l0 + 1L;

        r0.<org.apache.commons.collections4.iterators.SkippingIterator: long pos> = $l1;

        return r1;
    }

    public void remove()
    {
        org.apache.commons.collections4.iterators.SkippingIterator r0;
        long $l0, $l1;
        byte $b2;
        java.lang.IllegalStateException $r1;

        r0 := @this: org.apache.commons.collections4.iterators.SkippingIterator;

        $l1 = r0.<org.apache.commons.collections4.iterators.SkippingIterator: long pos>;

        $l0 = r0.<org.apache.commons.collections4.iterators.SkippingIterator: long offset>;

        $b2 = $l1 cmp $l0;

        if $b2 > 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("remove() can not be called before calling next()");

        throw $r1;

     label1:
        specialinvoke r0.<org.apache.commons.collections4.iterators.AbstractIteratorDecorator: void remove()>();

        return;
    }
}
