public class org.apache.commons.collections4.FactoryUtilsTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.commons.collections4.FactoryUtilsTest r0;

        r0 := @this: org.apache.commons.collections4.FactoryUtilsTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testExceptionFactory()
    {
        org.apache.commons.collections4.FactoryUtilsTest r0;
        org.apache.commons.collections4.Factory $r3, $r4, $r5, $r6, $r10;
        org.apache.commons.collections4.FunctorException $r8, $r9;

        r0 := @this: org.apache.commons.collections4.FactoryUtilsTest;

        $r3 = staticinvoke <org.apache.commons.collections4.FactoryUtils: org.apache.commons.collections4.Factory exceptionFactory()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r3);

        $r4 = staticinvoke <org.apache.commons.collections4.FactoryUtils: org.apache.commons.collections4.Factory exceptionFactory()>();

        $r5 = staticinvoke <org.apache.commons.collections4.FactoryUtils: org.apache.commons.collections4.Factory exceptionFactory()>();

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($r4, $r5);

     label1:
        $r6 = staticinvoke <org.apache.commons.collections4.FactoryUtils: org.apache.commons.collections4.Factory exceptionFactory()>();

        interfaceinvoke $r6.<org.apache.commons.collections4.Factory: java.lang.Object create()>();

     label2:
        goto label7;

     label3:
        $r9 := @caughtexception;

     label4:
        $r10 = staticinvoke <org.apache.commons.collections4.FactoryUtils: org.apache.commons.collections4.Factory exceptionFactory()>();

        interfaceinvoke $r10.<org.apache.commons.collections4.Factory: java.lang.Object create()>();

     label5:
        goto label7;

     label6:
        $r8 := @caughtexception;

        return;

     label7:
        staticinvoke <org.junit.Assert: void fail()>();

        return;

        catch org.apache.commons.collections4.FunctorException from label1 to label2 with label3;
        catch org.apache.commons.collections4.FunctorException from label4 to label5 with label6;
    }

    public void testNullFactory()
    {
        org.apache.commons.collections4.FactoryUtilsTest r0;
        org.apache.commons.collections4.Factory r1;
        java.lang.Object r2;

        r0 := @this: org.apache.commons.collections4.FactoryUtilsTest;

        r1 = staticinvoke <org.apache.commons.collections4.FactoryUtils: org.apache.commons.collections4.Factory nullFactory()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r1);

        r2 = interfaceinvoke r1.<org.apache.commons.collections4.Factory: java.lang.Object create()>();

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>(r2);

        return;
    }

    public void testConstantFactoryNull()
    {
        org.apache.commons.collections4.FactoryUtilsTest r0;
        org.apache.commons.collections4.Factory r1;
        java.lang.Object r2;

        r0 := @this: org.apache.commons.collections4.FactoryUtilsTest;

        r1 = staticinvoke <org.apache.commons.collections4.FactoryUtils: org.apache.commons.collections4.Factory constantFactory(java.lang.Object)>(null);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r1);

        r2 = interfaceinvoke r1.<org.apache.commons.collections4.Factory: java.lang.Object create()>();

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>(r2);

        return;
    }

    public void testConstantFactoryConstant()
    {
        org.apache.commons.collections4.FactoryUtilsTest r0;
        java.lang.Integer r1, r3;
        org.apache.commons.collections4.Factory r2;
        java.lang.Object $r4;

        r0 := @this: org.apache.commons.collections4.FactoryUtilsTest;

        r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9);

        r2 = staticinvoke <org.apache.commons.collections4.FactoryUtils: org.apache.commons.collections4.Factory constantFactory(java.lang.Object)>(r1);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r2);

        $r4 = interfaceinvoke r2.<org.apache.commons.collections4.Factory: java.lang.Object create()>();

        r3 = (java.lang.Integer) $r4;

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>(r1, r3);

        return;
    }

    public void testPrototypeFactoryNull()
    {
        org.apache.commons.collections4.FactoryUtilsTest r0;
        org.apache.commons.collections4.Factory $r1, $r2;

        r0 := @this: org.apache.commons.collections4.FactoryUtilsTest;

        $r1 = <org.apache.commons.collections4.functors.ConstantFactory: org.apache.commons.collections4.Factory NULL_INSTANCE>;

        $r2 = staticinvoke <org.apache.commons.collections4.FactoryUtils: org.apache.commons.collections4.Factory prototypeFactory(java.lang.Object)>(null);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($r1, $r2);

        return;
    }

    public void testPrototypeFactoryPublicCloneMethod() throws java.lang.Exception
    {
        org.apache.commons.collections4.FactoryUtilsTest r0;
        org.apache.commons.collections4.Factory r2;
        java.util.Date r3, $r4;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.FactoryUtilsTest;

        $r4 = new java.util.Date;

        specialinvoke $r4.<java.util.Date: void <init>()>();

        r2 = staticinvoke <org.apache.commons.collections4.FactoryUtils: org.apache.commons.collections4.Factory prototypeFactory(java.lang.Object)>($r4);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r2);

        $r5 = interfaceinvoke r2.<org.apache.commons.collections4.Factory: java.lang.Object create()>();

        r3 = (java.util.Date) $r5;

        if $r4 == r3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r4, r3);

        return;
    }

    public void testPrototypeFactoryPublicCopyConstructor() throws java.lang.Exception
    {
        org.apache.commons.collections4.FactoryUtilsTest r0;
        org.apache.commons.collections4.Factory r2;
        java.lang.Object r3;
        org.apache.commons.collections4.FactoryUtilsTest$Mock1 $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.FactoryUtilsTest;

        $r4 = new org.apache.commons.collections4.FactoryUtilsTest$Mock1;

        specialinvoke $r4.<org.apache.commons.collections4.FactoryUtilsTest$Mock1: void <init>(int)>(6);

        r2 = staticinvoke <org.apache.commons.collections4.FactoryUtils: org.apache.commons.collections4.Factory prototypeFactory(java.lang.Object)>($r4);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r2);

        r3 = interfaceinvoke r2.<org.apache.commons.collections4.Factory: java.lang.Object create()>();

        if $r4 == r3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r4, r3);

        return;
    }

    public void testPrototypeFactoryPublicSerialization() throws java.lang.Exception
    {
        org.apache.commons.collections4.FactoryUtilsTest r0;
        java.lang.Integer r1, r3;
        org.apache.commons.collections4.Factory r2;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.FactoryUtilsTest;

        r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9);

        r2 = staticinvoke <org.apache.commons.collections4.FactoryUtils: org.apache.commons.collections4.Factory prototypeFactory(java.lang.Object)>(r1);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r2);

        $r4 = interfaceinvoke r2.<org.apache.commons.collections4.Factory: java.lang.Object create()>();

        r3 = (java.lang.Integer) $r4;

        if r1 == r3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r1, r3);

        return;
    }

    public void testPrototypeFactoryPublicSerializationError()
    {
        org.apache.commons.collections4.FactoryUtilsTest r0;
        org.apache.commons.collections4.Factory r2;
        org.apache.commons.collections4.FactoryUtilsTest$Mock2 $r4;
        java.lang.Object $r5;
        org.apache.commons.collections4.FunctorException $r7;
        java.lang.Throwable $r8;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.FactoryUtilsTest;

        $r4 = new org.apache.commons.collections4.FactoryUtilsTest$Mock2;

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        specialinvoke $r4.<org.apache.commons.collections4.FactoryUtilsTest$Mock2: void <init>(java.lang.Object)>($r5);

        r2 = staticinvoke <org.apache.commons.collections4.FactoryUtils: org.apache.commons.collections4.Factory prototypeFactory(java.lang.Object)>($r4);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r2);

     label1:
        interfaceinvoke r2.<org.apache.commons.collections4.Factory: java.lang.Object create()>();

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        $r8 = virtualinvoke $r7.<org.apache.commons.collections4.FunctorException: java.lang.Throwable getCause()>();

        $z0 = $r8 instanceof java.io.IOException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;

     label4:
        staticinvoke <org.junit.Assert: void fail()>();

        return;

        catch org.apache.commons.collections4.FunctorException from label1 to label2 with label3;
    }

    public void testPrototypeFactoryPublicBad()
    {
        org.apache.commons.collections4.FactoryUtilsTest r0;
        java.lang.Object $r3;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.apache.commons.collections4.FactoryUtilsTest;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

     label1:
        staticinvoke <org.apache.commons.collections4.FactoryUtils: org.apache.commons.collections4.Factory prototypeFactory(java.lang.Object)>($r3);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        return;

     label4:
        staticinvoke <org.junit.Assert: void fail()>();

        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public void instantiateFactoryNull()
    {
        org.apache.commons.collections4.FactoryUtilsTest r0;

        r0 := @this: org.apache.commons.collections4.FactoryUtilsTest;

        staticinvoke <org.apache.commons.collections4.FactoryUtils: org.apache.commons.collections4.Factory instantiateFactory(java.lang.Class)>(null);

        return;
    }

    public void instantiateFactorySimple()
    {
        org.apache.commons.collections4.FactoryUtilsTest r0;
        org.apache.commons.collections4.Factory r1;
        java.lang.Object $r2, $r3;
        int $i0, $i2;
        long $l1, $l3;
        org.apache.commons.collections4.FactoryUtilsTest$Mock3 r4, r5;

        r0 := @this: org.apache.commons.collections4.FactoryUtilsTest;

        r1 = staticinvoke <org.apache.commons.collections4.FactoryUtils: org.apache.commons.collections4.Factory instantiateFactory(java.lang.Class)>(class "Lorg/apache/commons/collections4/FactoryUtilsTest$Mock3;");

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r1);

        $r2 = interfaceinvoke r1.<org.apache.commons.collections4.Factory: java.lang.Object create()>();

        r4 = (org.apache.commons.collections4.FactoryUtilsTest$Mock3) $r2;

        $i0 = virtualinvoke r4.<org.apache.commons.collections4.FactoryUtilsTest$Mock3: int getValue()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        $r3 = interfaceinvoke r1.<org.apache.commons.collections4.Factory: java.lang.Object create()>();

        r5 = (org.apache.commons.collections4.FactoryUtilsTest$Mock3) $r3;

        $i2 = virtualinvoke r5.<org.apache.commons.collections4.FactoryUtilsTest$Mock3: int getValue()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l3);

        return;
    }

    public void instantiateFactoryMismatch()
    {
        org.apache.commons.collections4.FactoryUtilsTest r0;
        java.lang.Object[] $r1;

        r0 := @this: org.apache.commons.collections4.FactoryUtilsTest;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = null;

        staticinvoke <org.apache.commons.collections4.FactoryUtils: org.apache.commons.collections4.Factory instantiateFactory(java.lang.Class,java.lang.Class[],java.lang.Object[])>(class "Ljava/util/Date;", null, $r1);

        return;
    }

    public void instantiateFactoryNoConstructor()
    {
        org.apache.commons.collections4.FactoryUtilsTest r0;
        java.lang.Class[] $r1;
        java.lang.Object[] $r2;

        r0 := @this: org.apache.commons.collections4.FactoryUtilsTest;

        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = class "Ljava/lang/Long;";

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = null;

        staticinvoke <org.apache.commons.collections4.FactoryUtils: org.apache.commons.collections4.Factory instantiateFactory(java.lang.Class,java.lang.Class[],java.lang.Object[])>(class "Ljava/util/Date;", $r1, $r2);

        return;
    }

    public void instantiateFactoryComplex()
    {
        org.apache.commons.collections4.FactoryUtilsTest r0;
        org.apache.commons.collections4.Factory r1;
        java.util.Date r2, $r13;
        java.util.TimeZone $r3;
        java.lang.Class[] $r4;
        java.lang.Class $r5, $r6, $r7;
        java.lang.Object[] $r8;
        java.lang.Integer $r9, $r10, $r11;
        java.lang.Object $r12;

        r0 := @this: org.apache.commons.collections4.FactoryUtilsTest;

        $r3 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");

        staticinvoke <java.util.TimeZone: void setDefault(java.util.TimeZone)>($r3);

        $r4 = newarray (java.lang.Class)[3];

        $r5 = <java.lang.Integer: java.lang.Class TYPE>;

        $r4[0] = $r5;

        $r6 = <java.lang.Integer: java.lang.Class TYPE>;

        $r4[1] = $r6;

        $r7 = <java.lang.Integer: java.lang.Class TYPE>;

        $r4[2] = $r7;

        $r8 = newarray (java.lang.Object)[3];

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(70);

        $r8[0] = $r9;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r8[1] = $r10;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r8[2] = $r11;

        r1 = staticinvoke <org.apache.commons.collections4.FactoryUtils: org.apache.commons.collections4.Factory instantiateFactory(java.lang.Class,java.lang.Class[],java.lang.Object[])>(class "Ljava/util/Date;", $r4, $r8);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r1);

        $r12 = interfaceinvoke r1.<org.apache.commons.collections4.Factory: java.lang.Object create()>();

        r2 = (java.util.Date) $r12;

        $r13 = new java.util.Date;

        specialinvoke $r13.<java.util.Date: void <init>(long)>(86400000L);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r13, r2);

        return;
    }

    public void testSingletonPatternInSerialization()
    {
        org.apache.commons.collections4.FactoryUtilsTest r0;
        int i0, i1;
        java.lang.Object r3;
        java.lang.Object[] $r4;
        org.apache.commons.collections4.Factory $r5;
        java.lang.StringBuilder $r6, $r7, $r9;
        java.lang.Class $r8;
        java.lang.String $r10;

        r0 := @this: org.apache.commons.collections4.FactoryUtilsTest;

        $r4 = newarray (java.lang.Object)[1];

        $r5 = <org.apache.commons.collections4.functors.ExceptionFactory: org.apache.commons.collections4.Factory INSTANCE>;

        $r4[0] = $r5;

        i0 = lengthof $r4;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r3 = $r4[i1];

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Singletone patern broken for ");

        $r8 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.collections4.TestUtils: void assertSameAfterSerialization(java.lang.String,java.lang.Object)>($r10, r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
}
