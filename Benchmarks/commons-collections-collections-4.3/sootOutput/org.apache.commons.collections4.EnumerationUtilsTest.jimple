public class org.apache.commons.collections4.EnumerationUtilsTest extends java.lang.Object
{
    public static final java.lang.String TO_LIST_FIXTURE;

    public void <init>()
    {
        org.apache.commons.collections4.EnumerationUtilsTest r0;

        r0 := @this: org.apache.commons.collections4.EnumerationUtilsTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testToListWithStringTokenizer()
    {
        org.apache.commons.collections4.EnumerationUtilsTest r0;
        java.util.List r4;
        java.util.ArrayList $r5, $r7;
        java.util.StringTokenizer $r6, $r8;
        boolean $z0;
        java.lang.String $r9;

        r0 := @this: org.apache.commons.collections4.EnumerationUtilsTest;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = new java.util.StringTokenizer;

        specialinvoke $r6.<java.util.StringTokenizer: void <init>(java.lang.String)>("this is a test");

     label1:
        $z0 = virtualinvoke $r6.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label2;

        $r9 = virtualinvoke $r6.<java.util.StringTokenizer: java.lang.String nextToken()>();

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label1;

     label2:
        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>("this");

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>("is");

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>("a");

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>("test");

        $r8 = new java.util.StringTokenizer;

        specialinvoke $r8.<java.util.StringTokenizer: void <init>(java.lang.String)>("this is a test");

        r4 = staticinvoke <org.apache.commons.collections4.EnumerationUtils: java.util.List toList(java.util.StringTokenizer)>($r8);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r5, $r7);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r5, r4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, r4);

        return;
    }

    public void testToListWithHashtable()
    {
        org.apache.commons.collections4.EnumerationUtilsTest r0;
        java.util.List r2, r4;
        java.util.Hashtable $r6;
        java.lang.Integer $r7, $r9, $r11, $r14, $r15, $r16, $r18, $r19, $r20;
        java.util.Enumeration $r13, $r21;
        int $i0, $i2, $i4, $i6;
        long $l1, $l3, $l5, $l7;
        boolean $z0, $z1, $z2, $z6, $z7, $z8, $z9, $z13;
        java.util.ArrayList $r17, $r22;

        r0 := @this: org.apache.commons.collections4.EnumerationUtilsTest;

        $r6 = new java.util.Hashtable;

        specialinvoke $r6.<java.util.Hashtable: void <init>()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke $r6.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("one", $r7);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        virtualinvoke $r6.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("two", $r9);

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        virtualinvoke $r6.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("three", $r11);

        $r13 = virtualinvoke $r6.<java.util.Hashtable: java.util.Enumeration elements()>();

        r2 = staticinvoke <org.apache.commons.collections4.EnumerationUtils: java.util.List toList(java.util.Enumeration)>($r13);

        $i0 = virtualinvoke $r6.<java.util.Hashtable: int size()>();

        $l1 = (long) $i0;

        $i2 = interfaceinvoke r2.<java.util.List: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, $l3);

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $z0 = interfaceinvoke r2.<java.util.List: boolean contains(java.lang.Object)>($r14);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $z1 = interfaceinvoke r2.<java.util.List: boolean contains(java.lang.Object)>($r15);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $z2 = interfaceinvoke r2.<java.util.List: boolean contains(java.lang.Object)>($r16);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r17 = new java.util.ArrayList;

        specialinvoke $r17.<java.util.ArrayList: void <init>()>();

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke $r17.<java.util.List: boolean add(java.lang.Object)>($r18);

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        interfaceinvoke $r17.<java.util.List: boolean add(java.lang.Object)>($r19);

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke $r17.<java.util.List: boolean add(java.lang.Object)>($r20);

        $z6 = interfaceinvoke r2.<java.util.List: boolean containsAll(java.util.Collection)>($r17);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        $r21 = virtualinvoke $r6.<java.util.Hashtable: java.util.Enumeration keys()>();

        r4 = staticinvoke <org.apache.commons.collections4.EnumerationUtils: java.util.List toList(java.util.Enumeration)>($r21);

        $i4 = virtualinvoke $r6.<java.util.Hashtable: int size()>();

        $l5 = (long) $i4;

        $i6 = interfaceinvoke r2.<java.util.List: int size()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l5, $l7);

        $z7 = interfaceinvoke r4.<java.util.List: boolean contains(java.lang.Object)>("one");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

        $z8 = interfaceinvoke r4.<java.util.List: boolean contains(java.lang.Object)>("two");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

        $z9 = interfaceinvoke r4.<java.util.List: boolean contains(java.lang.Object)>("three");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z9);

        $r22 = new java.util.ArrayList;

        specialinvoke $r22.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r22.<java.util.List: boolean add(java.lang.Object)>("one");

        interfaceinvoke $r22.<java.util.List: boolean add(java.lang.Object)>("two");

        interfaceinvoke $r22.<java.util.List: boolean add(java.lang.Object)>("three");

        $z13 = interfaceinvoke r4.<java.util.List: boolean containsAll(java.util.Collection)>($r22);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z13);

        return;
    }

    public void getFromEnumeration() throws java.lang.Exception
    {
        org.apache.commons.collections4.EnumerationUtilsTest r0;
        java.util.Vector $r3;
        java.lang.Object $r4, $r5;
        boolean $z0, $z1;
        java.lang.IndexOutOfBoundsException $r7;
        java.util.Enumeration r8, r9;

        r0 := @this: org.apache.commons.collections4.EnumerationUtilsTest;

        $r3 = new java.util.Vector;

        specialinvoke $r3.<java.util.Vector: void <init>()>();

        virtualinvoke $r3.<java.util.Vector: void addElement(java.lang.Object)>("zero");

        virtualinvoke $r3.<java.util.Vector: void addElement(java.lang.Object)>("one");

        r8 = virtualinvoke $r3.<java.util.Vector: java.util.Enumeration elements()>();

        $r4 = staticinvoke <org.apache.commons.collections4.EnumerationUtils: java.lang.Object get(java.util.Enumeration,int)>(r8, 0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("zero", $r4);

        r9 = virtualinvoke $r3.<java.util.Vector: java.util.Enumeration elements()>();

        $r5 = staticinvoke <org.apache.commons.collections4.EnumerationUtils: java.lang.Object get(java.util.Enumeration,int)>(r9, 1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("one", $r5);

     label1:
        staticinvoke <org.apache.commons.collections4.EnumerationUtils: java.lang.Object get(java.util.Enumeration,int)>(r9, 3);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting IndexOutOfBoundsException.");

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

     label4:
        $z0 = interfaceinvoke r9.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 != 0 goto label5;

        $z1 = 1;

        goto label6;

     label5:
        $z1 = 0;

     label6:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        return;

        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <org.apache.commons.collections4.EnumerationUtilsTest: java.lang.String TO_LIST_FIXTURE> = "this is a test";

        return;
    }
}
