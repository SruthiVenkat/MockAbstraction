public class org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer extends org.apache.commons.collections4.trie.KeyAnalyzer
{
    private static final long serialVersionUID;
    public static final org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer INSTANCE;
    public static final int LENGTH;
    private static final int MSB;

    public void <init>()
    {
        org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer r0;

        r0 := @this: org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer;

        specialinvoke r0.<org.apache.commons.collections4.trie.KeyAnalyzer: void <init>()>();

        return;
    }

    private static int mask(int)
    {
        int i0;
        char $c1;

        i0 := @parameter0: int;

        $c1 = 32768 >>> i0;

        return $c1;
    }

    public int bitsPerElement()
    {
        org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer r0;

        r0 := @this: org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer;

        return 16;
    }

    public int lengthInBits(java.lang.String)
    {
        org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer r0;
        java.lang.String r1;
        int $i0, $i1;

        r0 := @this: org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer;

        r1 := @parameter0: java.lang.String;

        if r1 == null goto label1;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $i1 = $i0 * 16;

        goto label2;

     label1:
        $i1 = 0;

     label2:
        return $i1;
    }

    public int bitIndex(java.lang.String, int, int, java.lang.String, int, int)
    {
        org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer r0;
        java.lang.String r1, r2;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, i22;
        char c11, c23, c24;
        boolean z0;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        z0 = 1;

        $i12 = i0 % 16;

        if $i12 != 0 goto label01;

        $i13 = i2 % 16;

        if $i13 != 0 goto label01;

        $i14 = i1 % 16;

        if $i14 != 0 goto label01;

        $i15 = i3 % 16;

        if $i15 == 0 goto label02;

     label01:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The offsets and lengths must be at Character boundaries");

        throw $r3;

     label02:
        i4 = i0 / 16;

        i5 = i2 / 16;

        $i16 = i1 / 16;

        i6 = i4 + $i16;

        $i17 = i3 / 16;

        i7 = i5 + $i17;

        i8 = staticinvoke <java.lang.Math: int max(int,int)>(i6, i7);

        i22 = 0;

     label03:
        if i22 >= i8 goto label11;

        i9 = i4 + i22;

        i10 = i5 + i22;

        if i9 < i6 goto label04;

        c23 = 0;

        goto label05;

     label04:
        c23 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i9);

     label05:
        if r2 == null goto label06;

        if i10 < i7 goto label07;

     label06:
        c24 = 0;

        goto label08;

     label07:
        c24 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i10);

     label08:
        if c23 == c24 goto label09;

        c11 = c23 ^ c24;

        $i18 = i22 * 16;

        $i19 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>(c11);

        $i20 = $i18 + $i19;

        $i21 = $i20 - 16;

        return $i21;

     label09:
        if c23 == 0 goto label10;

        z0 = 0;

     label10:
        i22 = i22 + 1;

        goto label03;

     label11:
        if z0 == 0 goto label12;

        return -1;

     label12:
        return -2;
    }

    public boolean isBitSet(java.lang.String, int, int)
    {
        org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer r0;
        java.lang.String r1;
        int i0, i1, i2, i3, $i5, $i6;
        char $c4;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r1 == null goto label1;

        if i0 < i1 goto label2;

     label1:
        return 0;

     label2:
        i2 = i0 / 16;

        i3 = i0 % 16;

        $c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);

        $i5 = staticinvoke <org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer: int mask(int)>(i3);

        $i6 = $c4 & $i5;

        if $i6 == 0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    public boolean isPrefix(java.lang.String, int, int, java.lang.String)
    {
        org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer r0;
        java.lang.String r1, r2, r3;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.IllegalArgumentException $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        $i2 = i0 % 16;

        if $i2 != 0 goto label1;

        $i3 = i1 % 16;

        if $i3 == 0 goto label2;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot determine prefix outside of Character boundaries");

        throw $r4;

     label2:
        $i5 = i0 / 16;

        $i4 = i1 / 16;

        r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>($i5, $i4);

        $z0 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>(r3);

        return $z0;
    }

    public volatile boolean isPrefix(java.lang.Object, int, int, java.lang.Object)
    {
        org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer r0;
        java.lang.Object r1, r2;
        int i0, i1;
        java.lang.String $r3, $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: java.lang.Object;

        $r4 = (java.lang.String) r1;

        $r3 = (java.lang.String) r2;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer: boolean isPrefix(java.lang.String,int,int,java.lang.String)>($r4, i0, i1, $r3);

        return $z0;
    }

    public volatile int bitIndex(java.lang.Object, int, int, java.lang.Object, int, int)
    {
        org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer r0;
        java.lang.Object r1, r2;
        int i0, i1, i2, i3, $i4;
        java.lang.String $r3, $r4;

        r0 := @this: org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: java.lang.Object;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        $r4 = (java.lang.String) r1;

        $r3 = (java.lang.String) r2;

        $i4 = virtualinvoke r0.<org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer: int bitIndex(java.lang.String,int,int,java.lang.String,int,int)>($r4, i0, i1, $r3, i2, i3);

        return $i4;
    }

    public volatile boolean isBitSet(java.lang.Object, int, int)
    {
        org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer r0;
        java.lang.Object r1;
        int i0, i1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = (java.lang.String) r1;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer: boolean isBitSet(java.lang.String,int,int)>($r2, i0, i1);

        return $z0;
    }

    public volatile int lengthInBits(java.lang.Object)
    {
        org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer r0;
        java.lang.Object r1;
        java.lang.String $r2;
        int $i0;

        r0 := @this: org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.String) r1;

        $i0 = virtualinvoke r0.<org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer: int lengthInBits(java.lang.String)>($r2);

        return $i0;
    }

    static void <clinit>()
    {
        org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer $r0;

        <org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer: int MSB> = 32768;

        <org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer: int LENGTH> = 16;

        <org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer: long serialVersionUID> = -7032449491269434877L;

        $r0 = new org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer;

        specialinvoke $r0.<org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer: void <init>()>();

        <org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer: org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer INSTANCE> = $r0;

        return;
    }
}
