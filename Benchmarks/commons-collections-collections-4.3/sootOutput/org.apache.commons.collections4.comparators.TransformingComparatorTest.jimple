public class org.apache.commons.collections4.comparators.TransformingComparatorTest extends org.apache.commons.collections4.comparators.AbstractComparatorTest
{

    public void <init>(java.lang.String)
    {
        org.apache.commons.collections4.comparators.TransformingComparatorTest r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.collections4.comparators.TransformingComparatorTest;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.collections4.comparators.AbstractComparatorTest: void <init>(java.lang.String)>(r1);

        return;
    }

    public java.util.Comparator makeObject()
    {
        org.apache.commons.collections4.comparators.TransformingComparatorTest r0;
        org.apache.commons.collections4.comparators.ComparableComparator $r2;
        org.apache.commons.collections4.Transformer $r3;
        java.util.Comparator $r4;

        r0 := @this: org.apache.commons.collections4.comparators.TransformingComparatorTest;

        $r2 = new org.apache.commons.collections4.comparators.ComparableComparator;

        specialinvoke $r2.<org.apache.commons.collections4.comparators.ComparableComparator: void <init>()>();

        $r3 = staticinvoke <org.apache.commons.collections4.TransformerUtils: org.apache.commons.collections4.Transformer stringValueTransformer()>();

        $r4 = staticinvoke <org.apache.commons.collections4.ComparatorUtils: java.util.Comparator transformedComparator(java.util.Comparator,org.apache.commons.collections4.Transformer)>($r2, $r3);

        return $r4;
    }

    public java.util.List getComparableObjectsOrdered()
    {
        org.apache.commons.collections4.comparators.TransformingComparatorTest r0;
        java.util.LinkedList $r2;
        java.lang.Integer $r3, $r4, $r5, $r6, $r7;

        r0 := @this: org.apache.commons.collections4.comparators.TransformingComparatorTest;

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r3);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r4);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r5);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r6);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r7);

        return $r2;
    }

    public void testEquals()
    {
        org.apache.commons.collections4.comparators.TransformingComparatorTest r0;
        org.apache.commons.collections4.Transformer r1;
        org.apache.commons.collections4.comparators.TransformingComparator $r4, $r5;
        boolean $z0, $z1, $z2, $z3;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.commons.collections4.comparators.TransformingComparatorTest;

        r1 = staticinvoke <org.apache.commons.collections4.TransformerUtils: org.apache.commons.collections4.Transformer nopTransformer()>();

        $r4 = new org.apache.commons.collections4.comparators.TransformingComparator;

        specialinvoke $r4.<org.apache.commons.collections4.comparators.TransformingComparator: void <init>(org.apache.commons.collections4.Transformer)>(r1);

        $r5 = new org.apache.commons.collections4.comparators.TransformingComparator;

        specialinvoke $r5.<org.apache.commons.collections4.comparators.TransformingComparator: void <init>(org.apache.commons.collections4.Transformer,java.util.Comparator)>(r1, $r4);

        $z0 = virtualinvoke $r4.<org.apache.commons.collections4.comparators.TransformingComparator: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label2;

        $i2 = virtualinvoke $r4.<org.apache.commons.collections4.comparators.TransformingComparator: int hashCode()>();

        $i3 = virtualinvoke $r5.<org.apache.commons.collections4.comparators.TransformingComparator: int hashCode()>();

        if $i2 != $i3 goto label1;

        $z1 = 1;

        goto label3;

     label1:
        $z1 = 0;

        goto label3;

     label2:
        $z1 = 1;

     label3:
        staticinvoke <org.apache.commons.collections4.comparators.TransformingComparatorTest: void assertTrue(java.lang.String,boolean)>("Contract failed: equals-hashcode", $z1);

        $z2 = virtualinvoke $r5.<org.apache.commons.collections4.comparators.TransformingComparator: boolean equals(java.lang.Object)>($r4);

        if $z2 == 0 goto label5;

        $i0 = virtualinvoke $r5.<org.apache.commons.collections4.comparators.TransformingComparator: int hashCode()>();

        $i1 = virtualinvoke $r4.<org.apache.commons.collections4.comparators.TransformingComparator: int hashCode()>();

        if $i0 != $i1 goto label4;

        $z3 = 1;

        goto label6;

     label4:
        $z3 = 0;

        goto label6;

     label5:
        $z3 = 1;

     label6:
        staticinvoke <org.apache.commons.collections4.comparators.TransformingComparatorTest: void assertTrue(java.lang.String,boolean)>("Contract failed: equals-hashcode", $z3);

        return;
    }

    public java.lang.String getCompatibilityVersion()
    {
        org.apache.commons.collections4.comparators.TransformingComparatorTest r0;

        r0 := @this: org.apache.commons.collections4.comparators.TransformingComparatorTest;

        return "4";
    }

    public volatile java.lang.Object makeObject()
    {
        org.apache.commons.collections4.comparators.TransformingComparatorTest r0;
        java.util.Comparator $r1;

        r0 := @this: org.apache.commons.collections4.comparators.TransformingComparatorTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.comparators.TransformingComparatorTest: java.util.Comparator makeObject()>();

        return $r1;
    }
}
