public class org.apache.commons.collections4.multiset.AbstractMapMultiSet$EntrySetIterator extends java.lang.Object implements java.util.Iterator
{
    protected final org.apache.commons.collections4.multiset.AbstractMapMultiSet parent;
    protected final java.util.Iterator decorated;
    protected org.apache.commons.collections4.MultiSet$Entry last;
    protected boolean canRemove;

    protected void <init>(java.util.Iterator, org.apache.commons.collections4.multiset.AbstractMapMultiSet)
    {
        org.apache.commons.collections4.multiset.AbstractMapMultiSet$EntrySetIterator r0;
        java.util.Iterator r1;
        org.apache.commons.collections4.multiset.AbstractMapMultiSet r2;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMapMultiSet$EntrySetIterator;

        r1 := @parameter0: java.util.Iterator;

        r2 := @parameter1: org.apache.commons.collections4.multiset.AbstractMapMultiSet;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet$EntrySetIterator: org.apache.commons.collections4.MultiSet$Entry last> = null;

        r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet$EntrySetIterator: boolean canRemove> = 0;

        r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet$EntrySetIterator: java.util.Iterator decorated> = r1;

        r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet$EntrySetIterator: org.apache.commons.collections4.multiset.AbstractMapMultiSet parent> = r2;

        return;
    }

    public boolean hasNext()
    {
        org.apache.commons.collections4.multiset.AbstractMapMultiSet$EntrySetIterator r0;
        java.util.Iterator $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMapMultiSet$EntrySetIterator;

        $r1 = r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet$EntrySetIterator: java.util.Iterator decorated>;

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        return $z0;
    }

    public org.apache.commons.collections4.MultiSet$Entry next()
    {
        org.apache.commons.collections4.multiset.AbstractMapMultiSet$EntrySetIterator r0;
        org.apache.commons.collections4.multiset.AbstractMapMultiSet$MultiSetEntry $r1;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        java.util.Map$Entry $r4;
        org.apache.commons.collections4.MultiSet$Entry $r5;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMapMultiSet$EntrySetIterator;

        $r1 = new org.apache.commons.collections4.multiset.AbstractMapMultiSet$MultiSetEntry;

        $r2 = r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet$EntrySetIterator: java.util.Iterator decorated>;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.util.Map$Entry) $r3;

        specialinvoke $r1.<org.apache.commons.collections4.multiset.AbstractMapMultiSet$MultiSetEntry: void <init>(java.util.Map$Entry)>($r4);

        r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet$EntrySetIterator: org.apache.commons.collections4.MultiSet$Entry last> = $r1;

        r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet$EntrySetIterator: boolean canRemove> = 1;

        $r5 = r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet$EntrySetIterator: org.apache.commons.collections4.MultiSet$Entry last>;

        return $r5;
    }

    public void remove()
    {
        org.apache.commons.collections4.multiset.AbstractMapMultiSet$EntrySetIterator r0;
        boolean $z0;
        java.util.Iterator $r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMapMultiSet$EntrySetIterator;

        $z0 = r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet$EntrySetIterator: boolean canRemove>;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Iterator remove() can only be called once after next()");

        throw $r2;

     label1:
        $r1 = r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet$EntrySetIterator: java.util.Iterator decorated>;

        interfaceinvoke $r1.<java.util.Iterator: void remove()>();

        r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet$EntrySetIterator: org.apache.commons.collections4.MultiSet$Entry last> = null;

        r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet$EntrySetIterator: boolean canRemove> = 0;

        return;
    }

    public volatile java.lang.Object next()
    {
        org.apache.commons.collections4.multiset.AbstractMapMultiSet$EntrySetIterator r0;
        org.apache.commons.collections4.MultiSet$Entry $r1;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMapMultiSet$EntrySetIterator;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet$EntrySetIterator: org.apache.commons.collections4.MultiSet$Entry next()>();

        return $r1;
    }
}
