public class org.apache.commons.collections4.iterators.SkippingIteratorTest extends org.apache.commons.collections4.iterators.AbstractIteratorTest
{
    private final java.lang.String[] testArray;
    private java.util.List testList;

    public void <init>(java.lang.String)
    {
        org.apache.commons.collections4.iterators.SkippingIteratorTest r0;
        java.lang.String r1;
        java.lang.String[] $r2;

        r0 := @this: org.apache.commons.collections4.iterators.SkippingIteratorTest;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.collections4.iterators.AbstractIteratorTest: void <init>(java.lang.String)>(r1);

        $r2 = newarray (java.lang.String)[7];

        $r2[0] = "a";

        $r2[1] = "b";

        $r2[2] = "c";

        $r2[3] = "d";

        $r2[4] = "e";

        $r2[5] = "f";

        $r2[6] = "g";

        r0.<org.apache.commons.collections4.iterators.SkippingIteratorTest: java.lang.String[] testArray> = $r2;

        return;
    }

    public void setUp() throws java.lang.Exception
    {
        org.apache.commons.collections4.iterators.SkippingIteratorTest r0;
        java.lang.String[] $r1;
        java.lang.Object[] $r2;
        java.util.List $r3;

        r0 := @this: org.apache.commons.collections4.iterators.SkippingIteratorTest;

        specialinvoke r0.<org.apache.commons.collections4.iterators.AbstractIteratorTest: void setUp()>();

        $r1 = r0.<org.apache.commons.collections4.iterators.SkippingIteratorTest: java.lang.String[] testArray>;

        $r2 = (java.lang.Object[]) $r1;

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        r0.<org.apache.commons.collections4.iterators.SkippingIteratorTest: java.util.List testList> = $r3;

        return;
    }

    public java.util.Iterator makeEmptyIterator()
    {
        org.apache.commons.collections4.iterators.SkippingIteratorTest r0;
        org.apache.commons.collections4.iterators.SkippingIterator $r1;
        java.util.List $r2;
        java.util.Iterator $r3;

        r0 := @this: org.apache.commons.collections4.iterators.SkippingIteratorTest;

        $r1 = new org.apache.commons.collections4.iterators.SkippingIterator;

        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        specialinvoke $r1.<org.apache.commons.collections4.iterators.SkippingIterator: void <init>(java.util.Iterator,long)>($r3, 0L);

        return $r1;
    }

    public java.util.Iterator makeObject()
    {
        org.apache.commons.collections4.iterators.SkippingIteratorTest r0;
        org.apache.commons.collections4.iterators.SkippingIterator $r1;
        java.util.ArrayList $r2;
        java.util.List $r3;
        java.util.Iterator $r4;

        r0 := @this: org.apache.commons.collections4.iterators.SkippingIteratorTest;

        $r1 = new org.apache.commons.collections4.iterators.SkippingIterator;

        $r2 = new java.util.ArrayList;

        $r3 = r0.<org.apache.commons.collections4.iterators.SkippingIteratorTest: java.util.List testList>;

        specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        $r4 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>();

        specialinvoke $r1.<org.apache.commons.collections4.iterators.SkippingIterator: void <init>(java.util.Iterator,long)>($r4, 1L);

        return $r1;
    }

    public void testSkipping()
    {
        org.apache.commons.collections4.iterators.SkippingIteratorTest r0;
        org.apache.commons.collections4.iterators.SkippingIterator $r3;
        java.util.List $r4;
        java.util.Iterator $r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Object $r6, $r7, $r8, $r9, $r10;
        java.util.NoSuchElementException $r12;

        r0 := @this: org.apache.commons.collections4.iterators.SkippingIteratorTest;

        $r3 = new org.apache.commons.collections4.iterators.SkippingIterator;

        $r4 = r0.<org.apache.commons.collections4.iterators.SkippingIteratorTest: java.util.List testList>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

        specialinvoke $r3.<org.apache.commons.collections4.iterators.SkippingIterator: void <init>(java.util.Iterator,long)>($r5, 2L);

        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertTrue(boolean)>($z0);

        $r6 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>("c", $r6);

        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertTrue(boolean)>($z1);

        $r7 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>("d", $r7);

        $z2 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertTrue(boolean)>($z2);

        $r8 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>("e", $r8);

        $z3 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertTrue(boolean)>($z3);

        $r9 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>("f", $r9);

        $z4 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertTrue(boolean)>($z4);

        $r10 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>("g", $r10);

        $z5 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertFalse(boolean)>($z5);

     label1:
        interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void fail(java.lang.String)>("Expected NoSuchElementException.");

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;

     label4:
        return;

        catch java.util.NoSuchElementException from label1 to label2 with label3;
    }

    public void testSameAsDecorated()
    {
        org.apache.commons.collections4.iterators.SkippingIteratorTest r0;
        org.apache.commons.collections4.iterators.SkippingIterator $r3;
        java.util.List $r4;
        java.util.Iterator $r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.Object $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        java.util.NoSuchElementException $r14;

        r0 := @this: org.apache.commons.collections4.iterators.SkippingIteratorTest;

        $r3 = new org.apache.commons.collections4.iterators.SkippingIterator;

        $r4 = r0.<org.apache.commons.collections4.iterators.SkippingIteratorTest: java.util.List testList>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

        specialinvoke $r3.<org.apache.commons.collections4.iterators.SkippingIterator: void <init>(java.util.Iterator,long)>($r5, 0L);

        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertTrue(boolean)>($z0);

        $r6 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>("a", $r6);

        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertTrue(boolean)>($z1);

        $r7 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>("b", $r7);

        $z2 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertTrue(boolean)>($z2);

        $r8 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>("c", $r8);

        $z3 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertTrue(boolean)>($z3);

        $r9 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>("d", $r9);

        $z4 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertTrue(boolean)>($z4);

        $r10 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>("e", $r10);

        $z5 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertTrue(boolean)>($z5);

        $r11 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>("f", $r11);

        $z6 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertTrue(boolean)>($z6);

        $r12 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>("g", $r12);

        $z7 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertFalse(boolean)>($z7);

     label1:
        interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void fail(java.lang.String)>("Expected NoSuchElementException.");

     label2:
        goto label4;

     label3:
        $r14 := @caughtexception;

     label4:
        return;

        catch java.util.NoSuchElementException from label1 to label2 with label3;
    }

    public void testOffsetGreaterThanSize()
    {
        org.apache.commons.collections4.iterators.SkippingIteratorTest r0;
        org.apache.commons.collections4.iterators.SkippingIterator $r3;
        java.util.List $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.util.NoSuchElementException $r7;

        r0 := @this: org.apache.commons.collections4.iterators.SkippingIteratorTest;

        $r3 = new org.apache.commons.collections4.iterators.SkippingIterator;

        $r4 = r0.<org.apache.commons.collections4.iterators.SkippingIteratorTest: java.util.List testList>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

        specialinvoke $r3.<org.apache.commons.collections4.iterators.SkippingIterator: void <init>(java.util.Iterator,long)>($r5, 10L);

        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertFalse(boolean)>($z0);

     label1:
        interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void fail(java.lang.String)>("Expected NoSuchElementException.");

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

     label4:
        return;

        catch java.util.NoSuchElementException from label1 to label2 with label3;
    }

    public void testNegativeOffset()
    {
        org.apache.commons.collections4.iterators.SkippingIteratorTest r0;
        org.apache.commons.collections4.iterators.SkippingIterator $r2;
        java.util.List $r3;
        java.util.Iterator $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.apache.commons.collections4.iterators.SkippingIteratorTest;

     label1:
        $r2 = new org.apache.commons.collections4.iterators.SkippingIterator;

        $r3 = r0.<org.apache.commons.collections4.iterators.SkippingIteratorTest: java.util.List testList>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

        specialinvoke $r2.<org.apache.commons.collections4.iterators.SkippingIterator: void <init>(java.util.Iterator,long)>($r4, -1L);

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void fail(java.lang.String)>("Expected IllegalArgumentException.");

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

     label4:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public void testRemoveWithoutCallingNext()
    {
        org.apache.commons.collections4.iterators.SkippingIteratorTest r0;
        java.util.ArrayList $r4;
        java.util.List $r5;
        org.apache.commons.collections4.iterators.SkippingIterator $r6;
        java.util.Iterator $r7;
        java.lang.IllegalStateException $r8;

        r0 := @this: org.apache.commons.collections4.iterators.SkippingIteratorTest;

        $r4 = new java.util.ArrayList;

        $r5 = r0.<org.apache.commons.collections4.iterators.SkippingIteratorTest: java.util.List testList>;

        specialinvoke $r4.<java.util.ArrayList: void <init>(java.util.Collection)>($r5);

        $r6 = new org.apache.commons.collections4.iterators.SkippingIterator;

        $r7 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

        specialinvoke $r6.<org.apache.commons.collections4.iterators.SkippingIterator: void <init>(java.util.Iterator,long)>($r7, 1L);

     label1:
        interfaceinvoke $r6.<java.util.Iterator: void remove()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void fail(java.lang.String)>("Expected IllegalStateException.");

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

     label4:
        return;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    public void testRemoveCalledTwice()
    {
        org.apache.commons.collections4.iterators.SkippingIteratorTest r0;
        java.util.ArrayList $r4;
        java.util.List $r5;
        org.apache.commons.collections4.iterators.SkippingIterator $r6;
        java.util.Iterator $r7;
        boolean $z0;
        java.lang.Object $r8;
        java.lang.IllegalStateException $r9;

        r0 := @this: org.apache.commons.collections4.iterators.SkippingIteratorTest;

        $r4 = new java.util.ArrayList;

        $r5 = r0.<org.apache.commons.collections4.iterators.SkippingIteratorTest: java.util.List testList>;

        specialinvoke $r4.<java.util.ArrayList: void <init>(java.util.Collection)>($r5);

        $r6 = new org.apache.commons.collections4.iterators.SkippingIterator;

        $r7 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

        specialinvoke $r6.<org.apache.commons.collections4.iterators.SkippingIterator: void <init>(java.util.Iterator,long)>($r7, 1L);

        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertTrue(boolean)>($z0);

        $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>("b", $r8);

        interfaceinvoke $r6.<java.util.Iterator: void remove()>();

     label1:
        interfaceinvoke $r6.<java.util.Iterator: void remove()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void fail(java.lang.String)>("Expected IllegalStateException.");

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

     label4:
        return;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    public void testRemoveFirst()
    {
        org.apache.commons.collections4.iterators.SkippingIteratorTest r0;
        java.util.ArrayList $r4;
        java.util.List $r5;
        org.apache.commons.collections4.iterators.SkippingIterator $r6;
        java.util.Iterator $r7;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Object $r8, $r9, $r10;
        java.util.NoSuchElementException $r12;

        r0 := @this: org.apache.commons.collections4.iterators.SkippingIteratorTest;

        $r4 = new java.util.ArrayList;

        $r5 = r0.<org.apache.commons.collections4.iterators.SkippingIteratorTest: java.util.List testList>;

        specialinvoke $r4.<java.util.ArrayList: void <init>(java.util.Collection)>($r5);

        $r6 = new org.apache.commons.collections4.iterators.SkippingIterator;

        $r7 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

        specialinvoke $r6.<org.apache.commons.collections4.iterators.SkippingIterator: void <init>(java.util.Iterator,long)>($r7, 4L);

        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertTrue(boolean)>($z0);

        $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>("e", $r8);

        interfaceinvoke $r6.<java.util.Iterator: void remove()>();

        $z1 = interfaceinvoke $r4.<java.util.List: boolean contains(java.lang.Object)>("e");

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertFalse(boolean)>($z1);

        $z2 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertTrue(boolean)>($z2);

        $r9 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>("f", $r9);

        $z3 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertTrue(boolean)>($z3);

        $r10 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>("g", $r10);

        $z4 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertFalse(boolean)>($z4);

     label1:
        interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void fail(java.lang.String)>("Expected NoSuchElementException.");

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;

     label4:
        return;

        catch java.util.NoSuchElementException from label1 to label2 with label3;
    }

    public void testRemoveMiddle()
    {
        org.apache.commons.collections4.iterators.SkippingIteratorTest r0;
        java.util.ArrayList $r4;
        java.util.List $r5;
        org.apache.commons.collections4.iterators.SkippingIterator $r6;
        java.util.Iterator $r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Object $r8, $r9, $r10, $r11;
        java.util.NoSuchElementException $r13;

        r0 := @this: org.apache.commons.collections4.iterators.SkippingIteratorTest;

        $r4 = new java.util.ArrayList;

        $r5 = r0.<org.apache.commons.collections4.iterators.SkippingIteratorTest: java.util.List testList>;

        specialinvoke $r4.<java.util.ArrayList: void <init>(java.util.Collection)>($r5);

        $r6 = new org.apache.commons.collections4.iterators.SkippingIterator;

        $r7 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

        specialinvoke $r6.<org.apache.commons.collections4.iterators.SkippingIterator: void <init>(java.util.Iterator,long)>($r7, 3L);

        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertTrue(boolean)>($z0);

        $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>("d", $r8);

        interfaceinvoke $r6.<java.util.Iterator: void remove()>();

        $z1 = interfaceinvoke $r4.<java.util.List: boolean contains(java.lang.Object)>("d");

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertFalse(boolean)>($z1);

        $z2 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertTrue(boolean)>($z2);

        $r9 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>("e", $r9);

        $z3 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertTrue(boolean)>($z3);

        $r10 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>("f", $r10);

        $z4 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertTrue(boolean)>($z4);

        $r11 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>("g", $r11);

        $z5 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertFalse(boolean)>($z5);

     label1:
        interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void fail(java.lang.String)>("Expected NoSuchElementException.");

     label2:
        goto label4;

     label3:
        $r13 := @caughtexception;

     label4:
        return;

        catch java.util.NoSuchElementException from label1 to label2 with label3;
    }

    public void testRemoveLast()
    {
        org.apache.commons.collections4.iterators.SkippingIteratorTest r0;
        java.util.ArrayList $r3;
        java.util.List $r4;
        org.apache.commons.collections4.iterators.SkippingIterator $r5;
        java.util.Iterator $r6;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Object $r7, $r8;
        java.util.NoSuchElementException $r11, $r12;

        r0 := @this: org.apache.commons.collections4.iterators.SkippingIteratorTest;

        $r3 = new java.util.ArrayList;

        $r4 = r0.<org.apache.commons.collections4.iterators.SkippingIteratorTest: java.util.List testList>;

        specialinvoke $r3.<java.util.ArrayList: void <init>(java.util.Collection)>($r4);

        $r5 = new org.apache.commons.collections4.iterators.SkippingIterator;

        $r6 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

        specialinvoke $r5.<org.apache.commons.collections4.iterators.SkippingIterator: void <init>(java.util.Iterator,long)>($r6, 5L);

        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertTrue(boolean)>($z0);

        $r7 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>("f", $r7);

        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertTrue(boolean)>($z1);

        $r8 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>("g", $r8);

        $z2 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertFalse(boolean)>($z2);

     label1:
        interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void fail(java.lang.String)>("Expected NoSuchElementException.");

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

     label4:
        interfaceinvoke $r5.<java.util.Iterator: void remove()>();

        $z3 = interfaceinvoke $r3.<java.util.List: boolean contains(java.lang.Object)>("g");

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertFalse(boolean)>($z3);

        $z4 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertFalse(boolean)>($z4);

     label5:
        interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void fail(java.lang.String)>("Expected NoSuchElementException.");

     label6:
        goto label8;

     label7:
        $r12 := @caughtexception;

     label8:
        return;

        catch java.util.NoSuchElementException from label1 to label2 with label3;
        catch java.util.NoSuchElementException from label5 to label6 with label7;
    }

    public void testRemoveUnsupported()
    {
        org.apache.commons.collections4.iterators.SkippingIteratorTest r0;
        org.apache.commons.collections4.iterators.SkippingIteratorTest$1 $r4;
        java.util.List $r5;
        java.util.Iterator $r6;
        org.apache.commons.collections4.iterators.SkippingIterator $r7;
        boolean $z0;
        java.lang.Object $r8;
        java.lang.UnsupportedOperationException $r9;

        r0 := @this: org.apache.commons.collections4.iterators.SkippingIteratorTest;

        $r4 = new org.apache.commons.collections4.iterators.SkippingIteratorTest$1;

        $r5 = r0.<org.apache.commons.collections4.iterators.SkippingIteratorTest: java.util.List testList>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

        specialinvoke $r4.<org.apache.commons.collections4.iterators.SkippingIteratorTest$1: void <init>(org.apache.commons.collections4.iterators.SkippingIteratorTest,java.util.Iterator)>(r0, $r6);

        $r7 = new org.apache.commons.collections4.iterators.SkippingIterator;

        specialinvoke $r7.<org.apache.commons.collections4.iterators.SkippingIterator: void <init>(java.util.Iterator,long)>($r4, 1L);

        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertTrue(boolean)>($z0);

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>("b", $r8);

     label1:
        interfaceinvoke $r7.<java.util.Iterator: void remove()>();

        staticinvoke <org.apache.commons.collections4.iterators.SkippingIteratorTest: void fail(java.lang.String)>("Expected UnsupportedOperationException.");

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

     label4:
        return;

        catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
    }

    public volatile java.lang.Object makeObject()
    {
        org.apache.commons.collections4.iterators.SkippingIteratorTest r0;
        java.util.Iterator $r1;

        r0 := @this: org.apache.commons.collections4.iterators.SkippingIteratorTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.SkippingIteratorTest: java.util.Iterator makeObject()>();

        return $r1;
    }
}
