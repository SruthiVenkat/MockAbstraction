public abstract class org.apache.commons.collections4.iterators.AbstractMapIteratorTest extends org.apache.commons.collections4.iterators.AbstractIteratorTest
{

    public void <init>(java.lang.String)
    {
        org.apache.commons.collections4.iterators.AbstractMapIteratorTest r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.collections4.iterators.AbstractMapIteratorTest;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.collections4.iterators.AbstractIteratorTest: void <init>(java.lang.String)>(r1);

        return;
    }

    public abstract org.apache.commons.collections4.MapIterator makeEmptyIterator();

    public abstract org.apache.commons.collections4.MapIterator makeObject();

    public abstract java.util.Map getMap();

    public abstract java.util.Map getConfirmedMap();

    public boolean supportsSetValue()
    {
        org.apache.commons.collections4.iterators.AbstractMapIteratorTest r0;

        r0 := @this: org.apache.commons.collections4.iterators.AbstractMapIteratorTest;

        return 1;
    }

    public boolean isGetStructuralModify()
    {
        org.apache.commons.collections4.iterators.AbstractMapIteratorTest r0;

        r0 := @this: org.apache.commons.collections4.iterators.AbstractMapIteratorTest;

        return 0;
    }

    public java.lang.Object[] addSetValues()
    {
        org.apache.commons.collections4.iterators.AbstractMapIteratorTest r0;
        java.lang.Object[] $r1, $r2;

        r0 := @this: org.apache.commons.collections4.iterators.AbstractMapIteratorTest;

        $r1 = newarray (java.lang.Object)[2];

        $r1[0] = "A";

        $r1[1] = "B";

        $r2 = (java.lang.Object[]) $r1;

        return $r2;
    }

    public void testEmptyMapIterator()
    {
        org.apache.commons.collections4.iterators.AbstractMapIteratorTest r0;
        org.apache.commons.collections4.MapIterator r1;
        boolean $z0, $z1, $z2;
        java.lang.Object[] $r5, $r8;
        java.lang.Object $r6, $r9;
        java.util.NoSuchElementException $r11;
        java.lang.IllegalStateException $r12, $r13, $r15, $r16;
        java.lang.UnsupportedOperationException $r14;

        r0 := @this: org.apache.commons.collections4.iterators.AbstractMapIteratorTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractMapIteratorTest: boolean supportsEmptyIterator()>();

        if $z0 != 0 goto label01;

        return;

     label01:
        r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractMapIteratorTest: org.apache.commons.collections4.MapIterator makeEmptyIterator()>();

        $z1 = interfaceinvoke r1.<org.apache.commons.collections4.MapIterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractMapIteratorTest: void assertEquals(boolean,boolean)>(0, $z1);

     label02:
        interfaceinvoke r1.<org.apache.commons.collections4.MapIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractMapIteratorTest: void fail()>();

     label03:
        goto label05;

     label04:
        $r11 := @caughtexception;

     label05:
        interfaceinvoke r1.<org.apache.commons.collections4.MapIterator: java.lang.Object getKey()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractMapIteratorTest: void fail()>();

     label06:
        goto label08;

     label07:
        $r12 := @caughtexception;

     label08:
        interfaceinvoke r1.<org.apache.commons.collections4.MapIterator: java.lang.Object getValue()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractMapIteratorTest: void fail()>();

     label09:
        goto label11;

     label10:
        $r15 := @caughtexception;

     label11:
        $z2 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractMapIteratorTest: boolean supportsSetValue()>();

        if $z2 != 0 goto label16;

     label12:
        $r8 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractMapIteratorTest: java.lang.Object[] addSetValues()>();

        $r9 = $r8[0];

        interfaceinvoke r1.<org.apache.commons.collections4.MapIterator: java.lang.Object setValue(java.lang.Object)>($r9);

        staticinvoke <org.apache.commons.collections4.iterators.AbstractMapIteratorTest: void fail()>();

     label13:
        goto label19;

     label14:
        $r14 := @caughtexception;

        goto label19;

     label15:
        $r13 := @caughtexception;

        goto label19;

     label16:
        $r5 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractMapIteratorTest: java.lang.Object[] addSetValues()>();

        $r6 = $r5[0];

        interfaceinvoke r1.<org.apache.commons.collections4.MapIterator: java.lang.Object setValue(java.lang.Object)>($r6);

        staticinvoke <org.apache.commons.collections4.iterators.AbstractMapIteratorTest: void fail()>();

     label17:
        goto label19;

     label18:
        $r16 := @caughtexception;

     label19:
        return;

        catch java.util.NoSuchElementException from label02 to label03 with label04;
        catch java.lang.IllegalStateException from label05 to label06 with label07;
        catch java.lang.IllegalStateException from label08 to label09 with label10;
        catch java.lang.UnsupportedOperationException from label12 to label13 with label14;
        catch java.lang.IllegalStateException from label12 to label13 with label15;
        catch java.lang.IllegalStateException from label16 to label17 with label18;
    }

    public void testFullMapIterator()
    {
        org.apache.commons.collections4.iterators.AbstractMapIteratorTest r0;
        org.apache.commons.collections4.MapIterator r1;
        java.util.Map r2;
        java.lang.Object r4, r5, $r7, $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.util.HashSet $r6;

        r0 := @this: org.apache.commons.collections4.iterators.AbstractMapIteratorTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractMapIteratorTest: boolean supportsFullIterator()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractMapIteratorTest: org.apache.commons.collections4.MapIterator makeObject()>();

        r2 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractMapIteratorTest: java.util.Map getMap()>();

        $z1 = interfaceinvoke r1.<org.apache.commons.collections4.MapIterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractMapIteratorTest: void assertEquals(boolean,boolean)>(1, $z1);

        $z2 = interfaceinvoke r1.<org.apache.commons.collections4.MapIterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractMapIteratorTest: void assertEquals(boolean,boolean)>(1, $z2);

        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>()>();

     label2:
        $z3 = interfaceinvoke r1.<org.apache.commons.collections4.MapIterator: boolean hasNext()>();

        if $z3 == 0 goto label4;

        r4 = interfaceinvoke r1.<org.apache.commons.collections4.MapIterator: java.lang.Object next()>();

        $r7 = interfaceinvoke r1.<org.apache.commons.collections4.MapIterator: java.lang.Object getKey()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractMapIteratorTest: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("it.next() should equals getKey()", r4, $r7);

        $z4 = interfaceinvoke r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r4);

        staticinvoke <org.apache.commons.collections4.iterators.AbstractMapIteratorTest: void assertTrue(java.lang.String,boolean)>("Key must be in map", $z4);

        $z5 = interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>(r4);

        staticinvoke <org.apache.commons.collections4.iterators.AbstractMapIteratorTest: void assertTrue(java.lang.String,boolean)>("Key must be unique", $z5);

        r5 = interfaceinvoke r1.<org.apache.commons.collections4.MapIterator: java.lang.Object getValue()>();

        $z6 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractMapIteratorTest: boolean isGetStructuralModify()>();

        if $z6 != 0 goto label3;

        $r8 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        staticinvoke <org.apache.commons.collections4.iterators.AbstractMapIteratorTest: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("Value must be mapped to key", $r8, r5);

     label3:
        $z7 = interfaceinvoke r2.<java.util.Map: boolean containsValue(java.lang.Object)>(r5);

        staticinvoke <org.apache.commons.collections4.iterators.AbstractMapIteratorTest: void assertTrue(java.lang.String,boolean)>("Value must be in map", $z7);

        virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractMapIteratorTest: void verify()>();

        goto label2;

     label4:
        return;
    }

    public void testMapIteratorSet()
    {
        org.apache.commons.collections4.iterators.AbstractMapIteratorTest r0;
        java.lang.Object r1, r6, r7, $r12, $r13, $r16, $r17, $r20, $r21, $r25, r27;
        org.apache.commons.collections4.MapIterator r3;
        java.util.Map r4, r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.Object[] $r8, $r9, $r10, $r23;
        int $i0;
        java.lang.UnsupportedOperationException $r24;

        r0 := @this: org.apache.commons.collections4.iterators.AbstractMapIteratorTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractMapIteratorTest: boolean supportsFullIterator()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r8 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractMapIteratorTest: java.lang.Object[] addSetValues()>();

        r1 = $r8[0];

        $r9 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractMapIteratorTest: java.lang.Object[] addSetValues()>();

        $i0 = lengthof $r9;

        if $i0 != 1 goto label2;

        $r23 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractMapIteratorTest: java.lang.Object[] addSetValues()>();

        $r25 = $r23[0];

        goto label3;

     label2:
        $r10 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractMapIteratorTest: java.lang.Object[] addSetValues()>();

        $r25 = $r10[1];

     label3:
        r3 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractMapIteratorTest: org.apache.commons.collections4.MapIterator makeObject()>();

        r4 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractMapIteratorTest: java.util.Map getMap()>();

        r5 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractMapIteratorTest: java.util.Map getConfirmedMap()>();

        $z1 = interfaceinvoke r3.<org.apache.commons.collections4.MapIterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractMapIteratorTest: void assertEquals(boolean,boolean)>(1, $z1);

        r6 = interfaceinvoke r3.<org.apache.commons.collections4.MapIterator: java.lang.Object next()>();

        r7 = interfaceinvoke r3.<org.apache.commons.collections4.MapIterator: java.lang.Object getValue()>();

        $z2 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractMapIteratorTest: boolean supportsSetValue()>();

        if $z2 != 0 goto label8;

     label4:
        interfaceinvoke r3.<org.apache.commons.collections4.MapIterator: java.lang.Object setValue(java.lang.Object)>(r1);

        staticinvoke <org.apache.commons.collections4.iterators.AbstractMapIteratorTest: void fail()>();

     label5:
        goto label7;

     label6:
        $r24 := @caughtexception;

     label7:
        return;

     label8:
        r27 = interfaceinvoke r3.<org.apache.commons.collections4.MapIterator: java.lang.Object setValue(java.lang.Object)>(r1);

        interfaceinvoke r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r1);

        $r12 = interfaceinvoke r3.<org.apache.commons.collections4.MapIterator: java.lang.Object getKey()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractMapIteratorTest: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("Key must not change after setValue", r6, $r12);

        $r13 = interfaceinvoke r3.<org.apache.commons.collections4.MapIterator: java.lang.Object getValue()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractMapIteratorTest: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("Value must be changed after setValue", r1, $r13);

        staticinvoke <org.apache.commons.collections4.iterators.AbstractMapIteratorTest: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("setValue must return old value", r7, r27);

        $z3 = interfaceinvoke r4.<java.util.Map: boolean containsKey(java.lang.Object)>(r6);

        staticinvoke <org.apache.commons.collections4.iterators.AbstractMapIteratorTest: void assertEquals(java.lang.String,boolean,boolean)>("Map must contain key", 1, $z3);

        $z4 = interfaceinvoke r5.<java.util.Map: boolean containsValue(java.lang.Object)>(r27);

        $z5 = interfaceinvoke r4.<java.util.Map: boolean containsValue(java.lang.Object)>(r27);

        staticinvoke <org.apache.commons.collections4.iterators.AbstractMapIteratorTest: void assertEquals(java.lang.String,boolean,boolean)>("Map must not contain old value", $z4, $z5);

        $z6 = interfaceinvoke r4.<java.util.Map: boolean containsValue(java.lang.Object)>(r1);

        staticinvoke <org.apache.commons.collections4.iterators.AbstractMapIteratorTest: void assertEquals(java.lang.String,boolean,boolean)>("Map must contain new value", 1, $z6);

        virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractMapIteratorTest: void verify()>();

        interfaceinvoke r3.<org.apache.commons.collections4.MapIterator: java.lang.Object setValue(java.lang.Object)>(r1);

        interfaceinvoke r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r1);

        $r16 = interfaceinvoke r3.<org.apache.commons.collections4.MapIterator: java.lang.Object getKey()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractMapIteratorTest: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("Key must not change after setValue", r6, $r16);

        $r17 = interfaceinvoke r3.<org.apache.commons.collections4.MapIterator: java.lang.Object getValue()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractMapIteratorTest: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("Value must be changed after setValue", r1, $r17);

        virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractMapIteratorTest: void verify()>();

        interfaceinvoke r3.<org.apache.commons.collections4.MapIterator: java.lang.Object setValue(java.lang.Object)>($r25);

        interfaceinvoke r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, $r25);

        $r20 = interfaceinvoke r3.<org.apache.commons.collections4.MapIterator: java.lang.Object getKey()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractMapIteratorTest: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("Key must not change after setValue", r6, $r20);

        $r21 = interfaceinvoke r3.<org.apache.commons.collections4.MapIterator: java.lang.Object getValue()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractMapIteratorTest: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("Value must be changed after setValue", $r25, $r21);

        virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractMapIteratorTest: void verify()>();

        return;

        catch java.lang.UnsupportedOperationException from label4 to label5 with label6;
    }

    public void testRemove()
    {
        org.apache.commons.collections4.iterators.AbstractMapIteratorTest r0;
        org.apache.commons.collections4.MapIterator r1;
        java.util.Map r2, r3;
        java.lang.Object r4;
        boolean $z0, $z1, $z2;
        java.lang.IllegalStateException $r6;
        java.lang.UnsupportedOperationException $r7;

        r0 := @this: org.apache.commons.collections4.iterators.AbstractMapIteratorTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractMapIteratorTest: org.apache.commons.collections4.MapIterator makeObject()>();

        r2 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractMapIteratorTest: java.util.Map getMap()>();

        r3 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractMapIteratorTest: java.util.Map getConfirmedMap()>();

        $z0 = interfaceinvoke r1.<org.apache.commons.collections4.MapIterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractMapIteratorTest: void assertEquals(boolean,boolean)>(1, $z0);

        r4 = interfaceinvoke r1.<org.apache.commons.collections4.MapIterator: java.lang.Object next()>();

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractMapIteratorTest: boolean supportsRemove()>();

        if $z1 != 0 goto label5;

     label1:
        interfaceinvoke r1.<org.apache.commons.collections4.MapIterator: void remove()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractMapIteratorTest: void fail()>();

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

     label4:
        return;

     label5:
        interfaceinvoke r1.<org.apache.commons.collections4.MapIterator: void remove()>();

        interfaceinvoke r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r4);

        $z2 = interfaceinvoke r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r4);

        staticinvoke <org.apache.commons.collections4.iterators.AbstractMapIteratorTest: void assertEquals(boolean,boolean)>(0, $z2);

        virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractMapIteratorTest: void verify()>();

     label6:
        interfaceinvoke r1.<org.apache.commons.collections4.MapIterator: void remove()>();

     label7:
        goto label9;

     label8:
        $r6 := @caughtexception;

     label9:
        virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractMapIteratorTest: void verify()>();

        return;

        catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
        catch java.lang.IllegalStateException from label6 to label7 with label8;
    }

    public void testMapIteratorSetRemoveSet()
    {
        org.apache.commons.collections4.iterators.AbstractMapIteratorTest r0;
        java.lang.Object r1, r4;
        org.apache.commons.collections4.MapIterator r2;
        java.util.Map r3;
        boolean $z0, $z1, $z2;
        java.lang.Object[] $r6;
        java.lang.IllegalStateException $r10;

        r0 := @this: org.apache.commons.collections4.iterators.AbstractMapIteratorTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractMapIteratorTest: boolean supportsSetValue()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractMapIteratorTest: boolean supportsRemove()>();

        if $z1 != 0 goto label2;

     label1:
        return;

     label2:
        $r6 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractMapIteratorTest: java.lang.Object[] addSetValues()>();

        r1 = $r6[0];

        r2 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractMapIteratorTest: org.apache.commons.collections4.MapIterator makeObject()>();

        r3 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractMapIteratorTest: java.util.Map getConfirmedMap()>();

        $z2 = interfaceinvoke r2.<org.apache.commons.collections4.MapIterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractMapIteratorTest: void assertEquals(boolean,boolean)>(1, $z2);

        r4 = interfaceinvoke r2.<org.apache.commons.collections4.MapIterator: java.lang.Object next()>();

        interfaceinvoke r2.<org.apache.commons.collections4.MapIterator: java.lang.Object setValue(java.lang.Object)>(r1);

        interfaceinvoke r2.<org.apache.commons.collections4.MapIterator: void remove()>();

        interfaceinvoke r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r4);

        virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractMapIteratorTest: void verify()>();

     label3:
        interfaceinvoke r2.<org.apache.commons.collections4.MapIterator: java.lang.Object setValue(java.lang.Object)>(r1);

        staticinvoke <org.apache.commons.collections4.iterators.AbstractMapIteratorTest: void fail()>();

     label4:
        goto label6;

     label5:
        $r10 := @caughtexception;

     label6:
        virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractMapIteratorTest: void verify()>();

        return;

        catch java.lang.IllegalStateException from label3 to label4 with label5;
    }

    public void testMapIteratorRemoveGetKey()
    {
        org.apache.commons.collections4.iterators.AbstractMapIteratorTest r0;
        org.apache.commons.collections4.MapIterator r1;
        java.util.Map r2;
        java.lang.Object r3;
        boolean $z0, $z1;
        java.lang.IllegalStateException $r7;

        r0 := @this: org.apache.commons.collections4.iterators.AbstractMapIteratorTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractMapIteratorTest: boolean supportsRemove()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractMapIteratorTest: org.apache.commons.collections4.MapIterator makeObject()>();

        r2 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractMapIteratorTest: java.util.Map getConfirmedMap()>();

        $z1 = interfaceinvoke r1.<org.apache.commons.collections4.MapIterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractMapIteratorTest: void assertEquals(boolean,boolean)>(1, $z1);

        r3 = interfaceinvoke r1.<org.apache.commons.collections4.MapIterator: java.lang.Object next()>();

        interfaceinvoke r1.<org.apache.commons.collections4.MapIterator: void remove()>();

        interfaceinvoke r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r3);

        virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractMapIteratorTest: void verify()>();

     label2:
        interfaceinvoke r1.<org.apache.commons.collections4.MapIterator: java.lang.Object getKey()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractMapIteratorTest: void fail()>();

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

     label5:
        virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractMapIteratorTest: void verify()>();

        return;

        catch java.lang.IllegalStateException from label2 to label3 with label4;
    }

    public void testMapIteratorRemoveGetValue()
    {
        org.apache.commons.collections4.iterators.AbstractMapIteratorTest r0;
        org.apache.commons.collections4.MapIterator r1;
        java.util.Map r2;
        java.lang.Object r3;
        boolean $z0, $z1;
        java.lang.IllegalStateException $r7;

        r0 := @this: org.apache.commons.collections4.iterators.AbstractMapIteratorTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractMapIteratorTest: boolean supportsRemove()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractMapIteratorTest: org.apache.commons.collections4.MapIterator makeObject()>();

        r2 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractMapIteratorTest: java.util.Map getConfirmedMap()>();

        $z1 = interfaceinvoke r1.<org.apache.commons.collections4.MapIterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractMapIteratorTest: void assertEquals(boolean,boolean)>(1, $z1);

        r3 = interfaceinvoke r1.<org.apache.commons.collections4.MapIterator: java.lang.Object next()>();

        interfaceinvoke r1.<org.apache.commons.collections4.MapIterator: void remove()>();

        interfaceinvoke r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r3);

        virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractMapIteratorTest: void verify()>();

     label2:
        interfaceinvoke r1.<org.apache.commons.collections4.MapIterator: java.lang.Object getValue()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractMapIteratorTest: void fail()>();

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

     label5:
        virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractMapIteratorTest: void verify()>();

        return;

        catch java.lang.IllegalStateException from label2 to label3 with label4;
    }

    public volatile java.util.Iterator makeObject()
    {
        org.apache.commons.collections4.iterators.AbstractMapIteratorTest r0;
        org.apache.commons.collections4.MapIterator $r1;

        r0 := @this: org.apache.commons.collections4.iterators.AbstractMapIteratorTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractMapIteratorTest: org.apache.commons.collections4.MapIterator makeObject()>();

        return $r1;
    }

    public volatile java.util.Iterator makeEmptyIterator()
    {
        org.apache.commons.collections4.iterators.AbstractMapIteratorTest r0;
        org.apache.commons.collections4.MapIterator $r1;

        r0 := @this: org.apache.commons.collections4.iterators.AbstractMapIteratorTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractMapIteratorTest: org.apache.commons.collections4.MapIterator makeEmptyIterator()>();

        return $r1;
    }

    public volatile java.lang.Object makeObject()
    {
        org.apache.commons.collections4.iterators.AbstractMapIteratorTest r0;
        org.apache.commons.collections4.MapIterator $r1;

        r0 := @this: org.apache.commons.collections4.iterators.AbstractMapIteratorTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractMapIteratorTest: org.apache.commons.collections4.MapIterator makeObject()>();

        return $r1;
    }
}
