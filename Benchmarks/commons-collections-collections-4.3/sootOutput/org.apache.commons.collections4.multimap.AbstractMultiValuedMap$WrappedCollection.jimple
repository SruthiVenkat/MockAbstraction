class org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection extends java.lang.Object implements java.util.Collection
{
    protected final java.lang.Object key;
    final org.apache.commons.collections4.multimap.AbstractMultiValuedMap this$0;

    public void <init>(org.apache.commons.collections4.multimap.AbstractMultiValuedMap, java.lang.Object)
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection r0;
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap r1;
        java.lang.Object r2;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection;

        r1 := @parameter0: org.apache.commons.collections4.multimap.AbstractMultiValuedMap;

        r2 := @parameter1: java.lang.Object;

        r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection: org.apache.commons.collections4.multimap.AbstractMultiValuedMap this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection: java.lang.Object key> = r2;

        return;
    }

    protected java.util.Collection getMapping()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection r0;
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap $r1;
        java.util.Map $r2;
        java.lang.Object $r3, $r4;
        java.util.Collection $r5;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection;

        $r1 = r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection: org.apache.commons.collections4.multimap.AbstractMultiValuedMap this$0>;

        $r2 = virtualinvoke $r1.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap: java.util.Map getMap()>();

        $r3 = r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection: java.lang.Object key>;

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        $r5 = (java.util.Collection) $r4;

        return $r5;
    }

    public boolean add(java.lang.Object)
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection r0;
        java.lang.Object r1, $r5;
        boolean $z0;
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap $r2, $r3;
        java.util.Map $r4;
        java.util.Collection r7;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection;

        r1 := @parameter0: java.lang.Object;

        r7 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection: java.util.Collection getMapping()>();

        if r7 != null goto label1;

        $r2 = r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection: org.apache.commons.collections4.multimap.AbstractMultiValuedMap this$0>;

        r7 = virtualinvoke $r2.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap: java.util.Collection createCollection()>();

        $r3 = r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection: org.apache.commons.collections4.multimap.AbstractMultiValuedMap this$0>;

        $r4 = staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMap: java.util.Map access$300(org.apache.commons.collections4.multimap.AbstractMultiValuedMap)>($r3);

        $r5 = r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection: java.lang.Object key>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r7);

     label1:
        $z0 = interfaceinvoke r7.<java.util.Collection: boolean add(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean addAll(java.util.Collection)
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection r0;
        java.util.Collection r1, r7;
        boolean $z0;
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap $r2, $r3;
        java.util.Map $r4;
        java.lang.Object $r5;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection;

        r1 := @parameter0: java.util.Collection;

        r7 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection: java.util.Collection getMapping()>();

        if r7 != null goto label1;

        $r2 = r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection: org.apache.commons.collections4.multimap.AbstractMultiValuedMap this$0>;

        r7 = virtualinvoke $r2.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap: java.util.Collection createCollection()>();

        $r3 = r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection: org.apache.commons.collections4.multimap.AbstractMultiValuedMap this$0>;

        $r4 = staticinvoke <org.apache.commons.collections4.multimap.AbstractMultiValuedMap: java.util.Map access$300(org.apache.commons.collections4.multimap.AbstractMultiValuedMap)>($r3);

        $r5 = r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection: java.lang.Object key>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r7);

     label1:
        $z0 = interfaceinvoke r7.<java.util.Collection: boolean addAll(java.util.Collection)>(r1);

        return $z0;
    }

    public void clear()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection r0;
        java.util.Collection r1;
        java.lang.Object $r2;
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap $r3;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection: java.util.Collection getMapping()>();

        if r1 == null goto label1;

        interfaceinvoke r1.<java.util.Collection: void clear()>();

        $r3 = r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection: org.apache.commons.collections4.multimap.AbstractMultiValuedMap this$0>;

        $r2 = r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection: java.lang.Object key>;

        virtualinvoke $r3.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap: java.util.Collection remove(java.lang.Object)>($r2);

     label1:
        return;
    }

    public java.util.Iterator iterator()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection r0;
        java.util.Collection r1;
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap$ValuesIterator $r2;
        java.lang.Object $r3;
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap $r4;
        org.apache.commons.collections4.ResettableIterator $r5;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection: java.util.Collection getMapping()>();

        if r1 != null goto label1;

        $r5 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableIterator EMPTY_ITERATOR>;

        return $r5;

     label1:
        $r2 = new org.apache.commons.collections4.multimap.AbstractMultiValuedMap$ValuesIterator;

        $r4 = r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection: org.apache.commons.collections4.multimap.AbstractMultiValuedMap this$0>;

        $r3 = r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection: java.lang.Object key>;

        specialinvoke $r2.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap$ValuesIterator: void <init>(org.apache.commons.collections4.multimap.AbstractMultiValuedMap,java.lang.Object)>($r4, $r3);

        return $r2;
    }

    public int size()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection r0;
        java.util.Collection r1;
        int $i0;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection: java.util.Collection getMapping()>();

        if r1 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

     label2:
        return $i0;
    }

    public boolean contains(java.lang.Object)
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection r0;
        java.lang.Object r1;
        java.util.Collection r2;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection;

        r1 := @parameter0: java.lang.Object;

        r2 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection: java.util.Collection getMapping()>();

        if r2 != null goto label1;

        $z0 = 0;

        goto label2;

     label1:
        $z0 = interfaceinvoke r2.<java.util.Collection: boolean contains(java.lang.Object)>(r1);

     label2:
        return $z0;
    }

    public boolean containsAll(java.util.Collection)
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection r0;
        java.util.Collection r1, r2;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection;

        r1 := @parameter0: java.util.Collection;

        r2 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection: java.util.Collection getMapping()>();

        if r2 != null goto label1;

        $z0 = 0;

        goto label2;

     label1:
        $z0 = interfaceinvoke r2.<java.util.Collection: boolean containsAll(java.util.Collection)>(r1);

     label2:
        return $z0;
    }

    public boolean isEmpty()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection r0;
        java.util.Collection r1;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection: java.util.Collection getMapping()>();

        if r1 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = interfaceinvoke r1.<java.util.Collection: boolean isEmpty()>();

     label2:
        return $z0;
    }

    public boolean remove(java.lang.Object)
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection r0;
        java.lang.Object r1, $r3;
        java.util.Collection r2;
        boolean z0, $z1;
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap $r4;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection;

        r1 := @parameter0: java.lang.Object;

        r2 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection: java.util.Collection getMapping()>();

        if r2 != null goto label1;

        return 0;

     label1:
        z0 = interfaceinvoke r2.<java.util.Collection: boolean remove(java.lang.Object)>(r1);

        $z1 = interfaceinvoke r2.<java.util.Collection: boolean isEmpty()>();

        if $z1 == 0 goto label2;

        $r4 = r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection: org.apache.commons.collections4.multimap.AbstractMultiValuedMap this$0>;

        $r3 = r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection: java.lang.Object key>;

        virtualinvoke $r4.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap: java.util.Collection remove(java.lang.Object)>($r3);

     label2:
        return z0;
    }

    public boolean removeAll(java.util.Collection)
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection r0;
        java.util.Collection r1, r2;
        boolean z0, $z1;
        java.lang.Object $r3;
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap $r4;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection;

        r1 := @parameter0: java.util.Collection;

        r2 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection: java.util.Collection getMapping()>();

        if r2 != null goto label1;

        return 0;

     label1:
        z0 = interfaceinvoke r2.<java.util.Collection: boolean removeAll(java.util.Collection)>(r1);

        $z1 = interfaceinvoke r2.<java.util.Collection: boolean isEmpty()>();

        if $z1 == 0 goto label2;

        $r4 = r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection: org.apache.commons.collections4.multimap.AbstractMultiValuedMap this$0>;

        $r3 = r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection: java.lang.Object key>;

        virtualinvoke $r4.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap: java.util.Collection remove(java.lang.Object)>($r3);

     label2:
        return z0;
    }

    public boolean retainAll(java.util.Collection)
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection r0;
        java.util.Collection r1, r2;
        boolean z0, $z1;
        java.lang.Object $r3;
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap $r4;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection;

        r1 := @parameter0: java.util.Collection;

        r2 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection: java.util.Collection getMapping()>();

        if r2 != null goto label1;

        return 0;

     label1:
        z0 = interfaceinvoke r2.<java.util.Collection: boolean retainAll(java.util.Collection)>(r1);

        $z1 = interfaceinvoke r2.<java.util.Collection: boolean isEmpty()>();

        if $z1 == 0 goto label2;

        $r4 = r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection: org.apache.commons.collections4.multimap.AbstractMultiValuedMap this$0>;

        $r3 = r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection: java.lang.Object key>;

        virtualinvoke $r4.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap: java.util.Collection remove(java.lang.Object)>($r3);

     label2:
        return z0;
    }

    public java.lang.Object[] toArray()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection r0;
        java.util.Collection r1, $r3;
        java.lang.Object[] $r2, $r4;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection: java.util.Collection getMapping()>();

        if r1 != null goto label1;

        $r3 = <org.apache.commons.collections4.CollectionUtils: java.util.Collection EMPTY_COLLECTION>;

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.lang.Object[] toArray()>();

        return $r4;

     label1:
        $r2 = interfaceinvoke r1.<java.util.Collection: java.lang.Object[] toArray()>();

        return $r2;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection r0;
        java.lang.Object[] r1, $r3, $r5, $r6;
        java.util.Collection r2, $r4;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection;

        r1 := @parameter0: java.lang.Object[];

        r2 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection: java.util.Collection getMapping()>();

        if r2 != null goto label1;

        $r4 = <org.apache.commons.collections4.CollectionUtils: java.util.Collection EMPTY_COLLECTION>;

        $r5 = interfaceinvoke $r4.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>(r1);

        $r6 = (java.lang.Object[]) $r5;

        return $r6;

     label1:
        $r3 = interfaceinvoke r2.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>(r1);

        return $r3;
    }

    public java.lang.String toString()
    {
        org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection r0;
        java.util.Collection r1, $r3;
        java.lang.String $r2, $r4;

        r0 := @this: org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection: java.util.Collection getMapping()>();

        if r1 != null goto label1;

        $r3 = <org.apache.commons.collections4.CollectionUtils: java.util.Collection EMPTY_COLLECTION>;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        return $r4;

     label1:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }
}
