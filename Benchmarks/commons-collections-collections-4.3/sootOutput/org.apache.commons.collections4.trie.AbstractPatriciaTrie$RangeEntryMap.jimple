class org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap extends org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap
{
    private final java.lang.Object fromKey;
    private final java.lang.Object toKey;
    private final boolean fromInclusive;
    private final boolean toInclusive;
    final org.apache.commons.collections4.trie.AbstractPatriciaTrie this$0;

    protected void <init>(org.apache.commons.collections4.trie.AbstractPatriciaTrie, java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap r0;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r1;
        java.lang.Object r2, r3;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap;

        r1 := @parameter0: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        specialinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap: void <init>(org.apache.commons.collections4.trie.AbstractPatriciaTrie,java.lang.Object,boolean,java.lang.Object,boolean)>(r1, r2, 1, r3, 0);

        return;
    }

    protected void <init>(org.apache.commons.collections4.trie.AbstractPatriciaTrie, java.lang.Object, boolean, java.lang.Object, boolean)
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap r0;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r1;
        java.lang.Object r2, r3;
        boolean z0, z1;
        org.apache.commons.collections4.trie.KeyAnalyzer $r4;
        int $i0;
        java.lang.IllegalArgumentException $r5, $r6;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap;

        r1 := @parameter0: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        r2 := @parameter1: java.lang.Object;

        z0 := @parameter2: boolean;

        r3 := @parameter3: java.lang.Object;

        z1 := @parameter4: boolean;

        r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap: org.apache.commons.collections4.trie.AbstractPatriciaTrie this$0> = r1;

        specialinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap: void <init>(org.apache.commons.collections4.trie.AbstractPatriciaTrie,org.apache.commons.collections4.trie.AbstractPatriciaTrie$1)>(r1, null);

        if r2 != null goto label1;

        if r3 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("must have a from or to!");

        throw $r6;

     label1:
        if r2 == null goto label2;

        if r3 == null goto label2;

        $r4 = virtualinvoke r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.KeyAnalyzer getKeyAnalyzer()>();

        $i0 = virtualinvoke $r4.<org.apache.commons.collections4.trie.KeyAnalyzer: int compare(java.lang.Object,java.lang.Object)>(r2, r3);

        if $i0 <= 0 goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("fromKey > toKey");

        throw $r5;

     label2:
        r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap: java.lang.Object fromKey> = r2;

        r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap: boolean fromInclusive> = z0;

        r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap: java.lang.Object toKey> = r3;

        r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap: boolean toInclusive> = z1;

        return;
    }

    public java.lang.Object firstKey()
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap r0;
        java.lang.Object r1, $r2, $r3, $r6, $r7, $r11;
        boolean $z0, $z1;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie $r4, $r8, $r9;
        java.util.NoSuchElementException $r5;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry r10;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap;

        $r2 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap: java.lang.Object fromKey>;

        if $r2 != null goto label1;

        $r9 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap: org.apache.commons.collections4.trie.AbstractPatriciaTrie this$0>;

        r10 = virtualinvoke $r9.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry firstEntry()>();

        goto label3;

     label1:
        $z0 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap: boolean fromInclusive>;

        if $z0 == 0 goto label2;

        $r8 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap: org.apache.commons.collections4.trie.AbstractPatriciaTrie this$0>;

        $r7 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap: java.lang.Object fromKey>;

        r10 = virtualinvoke $r8.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry ceilingEntry(java.lang.Object)>($r7);

        goto label3;

     label2:
        $r4 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap: org.apache.commons.collections4.trie.AbstractPatriciaTrie this$0>;

        $r3 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap: java.lang.Object fromKey>;

        r10 = virtualinvoke $r4.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry higherEntry(java.lang.Object)>($r3);

     label3:
        if r10 == null goto label4;

        $r11 = interfaceinvoke r10.<java.util.Map$Entry: java.lang.Object getKey()>();

        goto label5;

     label4:
        $r11 = null;

     label5:
        r1 = $r11;

        if r10 == null goto label6;

        $r6 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap: java.lang.Object toKey>;

        if $r6 == null goto label7;

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap: boolean inToRange(java.lang.Object,boolean)>($r11, 0);

        if $z1 != 0 goto label7;

     label6:
        $r5 = new java.util.NoSuchElementException;

        specialinvoke $r5.<java.util.NoSuchElementException: void <init>()>();

        throw $r5;

     label7:
        return r1;
    }

    public java.lang.Object lastKey()
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap r0;
        java.lang.Object r1, $r2, $r3, $r6, $r7, $r11;
        boolean $z0, $z1;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie $r4, $r8, $r9;
        java.util.NoSuchElementException $r5;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry r10;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap;

        $r2 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap: java.lang.Object toKey>;

        if $r2 != null goto label1;

        $r9 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap: org.apache.commons.collections4.trie.AbstractPatriciaTrie this$0>;

        r10 = virtualinvoke $r9.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry lastEntry()>();

        goto label3;

     label1:
        $z0 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap: boolean toInclusive>;

        if $z0 == 0 goto label2;

        $r8 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap: org.apache.commons.collections4.trie.AbstractPatriciaTrie this$0>;

        $r7 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap: java.lang.Object toKey>;

        r10 = virtualinvoke $r8.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry floorEntry(java.lang.Object)>($r7);

        goto label3;

     label2:
        $r4 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap: org.apache.commons.collections4.trie.AbstractPatriciaTrie this$0>;

        $r3 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap: java.lang.Object toKey>;

        r10 = virtualinvoke $r4.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry lowerEntry(java.lang.Object)>($r3);

     label3:
        if r10 == null goto label4;

        $r11 = interfaceinvoke r10.<java.util.Map$Entry: java.lang.Object getKey()>();

        goto label5;

     label4:
        $r11 = null;

     label5:
        r1 = $r11;

        if r10 == null goto label6;

        $r6 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap: java.lang.Object fromKey>;

        if $r6 == null goto label7;

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap: boolean inFromRange(java.lang.Object,boolean)>($r11, 0);

        if $z1 != 0 goto label7;

     label6:
        $r5 = new java.util.NoSuchElementException;

        specialinvoke $r5.<java.util.NoSuchElementException: void <init>()>();

        throw $r5;

     label7:
        return r1;
    }

    protected java.util.Set createEntrySet()
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap r0;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet $r1;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie $r2;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap;

        $r1 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet;

        $r2 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap: org.apache.commons.collections4.trie.AbstractPatriciaTrie this$0>;

        specialinvoke $r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet: void <init>(org.apache.commons.collections4.trie.AbstractPatriciaTrie,org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap)>($r2, r0);

        return $r1;
    }

    public java.lang.Object getFromKey()
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap r0;
        java.lang.Object $r1;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap;

        $r1 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap: java.lang.Object fromKey>;

        return $r1;
    }

    public java.lang.Object getToKey()
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap r0;
        java.lang.Object $r1;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap;

        $r1 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap: java.lang.Object toKey>;

        return $r1;
    }

    public boolean isFromInclusive()
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap r0;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap;

        $z0 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap: boolean fromInclusive>;

        return $z0;
    }

    public boolean isToInclusive()
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap r0;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap;

        $z0 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap: boolean toInclusive>;

        return $z0;
    }

    protected java.util.SortedMap createRangeMap(java.lang.Object, boolean, java.lang.Object, boolean)
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap r0, $r3;
        java.lang.Object r1, r2;
        boolean z0, z1;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie $r4;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.lang.Object;

        z1 := @parameter3: boolean;

        $r3 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap;

        $r4 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap: org.apache.commons.collections4.trie.AbstractPatriciaTrie this$0>;

        specialinvoke $r3.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap: void <init>(org.apache.commons.collections4.trie.AbstractPatriciaTrie,java.lang.Object,boolean,java.lang.Object,boolean)>($r4, r1, z0, r2, z1);

        return $r3;
    }
}
