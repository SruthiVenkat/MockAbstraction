public class org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test extends org.apache.commons.collections4.bidimap.AbstractSortedBidiMapTest
{

    public static junit.framework.Test suite()
    {
        junit.framework.TestSuite $r0;

        $r0 = staticinvoke <org.apache.commons.collections4.BulkTest: junit.framework.TestSuite makeSuite(java.lang.Class)>(class "Lorg/apache/commons/collections4/bidimap/DualTreeBidiMap2Test;");

        return $r0;
    }

    public void <init>(java.lang.String)
    {
        org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.collections4.bidimap.AbstractSortedBidiMapTest: void <init>(java.lang.String)>(r1);

        return;
    }

    public org.apache.commons.collections4.bidimap.DualTreeBidiMap makeObject()
    {
        org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test r0;
        org.apache.commons.collections4.bidimap.DualTreeBidiMap $r1;
        org.apache.commons.collections4.comparators.ReverseComparator $r2, $r4;
        org.apache.commons.collections4.comparators.ComparableComparator $r3, $r5;

        r0 := @this: org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test;

        $r1 = new org.apache.commons.collections4.bidimap.DualTreeBidiMap;

        $r2 = new org.apache.commons.collections4.comparators.ReverseComparator;

        $r3 = staticinvoke <org.apache.commons.collections4.comparators.ComparableComparator: org.apache.commons.collections4.comparators.ComparableComparator comparableComparator()>();

        specialinvoke $r2.<org.apache.commons.collections4.comparators.ReverseComparator: void <init>(java.util.Comparator)>($r3);

        $r4 = new org.apache.commons.collections4.comparators.ReverseComparator;

        $r5 = staticinvoke <org.apache.commons.collections4.comparators.ComparableComparator: org.apache.commons.collections4.comparators.ComparableComparator comparableComparator()>();

        specialinvoke $r4.<org.apache.commons.collections4.comparators.ReverseComparator: void <init>(java.util.Comparator)>($r5);

        specialinvoke $r1.<org.apache.commons.collections4.bidimap.DualTreeBidiMap: void <init>(java.util.Comparator,java.util.Comparator)>($r2, $r4);

        return $r1;
    }

    public java.util.TreeMap makeConfirmedMap()
    {
        org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test r0;
        java.util.TreeMap $r1;
        org.apache.commons.collections4.comparators.ReverseComparator $r2;
        org.apache.commons.collections4.comparators.ComparableComparator $r3;

        r0 := @this: org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test;

        $r1 = new java.util.TreeMap;

        $r2 = new org.apache.commons.collections4.comparators.ReverseComparator;

        $r3 = staticinvoke <org.apache.commons.collections4.comparators.ComparableComparator: org.apache.commons.collections4.comparators.ComparableComparator comparableComparator()>();

        specialinvoke $r2.<org.apache.commons.collections4.comparators.ReverseComparator: void <init>(java.util.Comparator)>($r3);

        specialinvoke $r1.<java.util.TreeMap: void <init>(java.util.Comparator)>($r2);

        return $r1;
    }

    public void testComparator()
    {
        org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test r0;
        org.apache.commons.collections4.SortedBidiMap r1;
        java.util.Map $r2;
        java.util.Comparator $r3, $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test;

        virtualinvoke r0.<org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test: void resetEmpty()>();

        $r2 = r0.<org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test: java.util.Map map>;

        r1 = (org.apache.commons.collections4.SortedBidiMap) $r2;

        $r3 = interfaceinvoke r1.<org.apache.commons.collections4.SortedBidiMap: java.util.Comparator comparator()>();

        staticinvoke <org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test: void assertNotNull(java.lang.Object)>($r3);

        $r4 = interfaceinvoke r1.<org.apache.commons.collections4.SortedBidiMap: java.util.Comparator comparator()>();

        $z0 = $r4 instanceof org.apache.commons.collections4.comparators.ReverseComparator;

        staticinvoke <org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test: void assertTrue(boolean)>($z0);

        return;
    }

    public void testComparator2()
    {
        org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test r0;
        org.apache.commons.collections4.bidimap.DualTreeBidiMap $r2;
        java.util.Comparator $r3;
        java.lang.Integer $r4, $r6;
        java.lang.Object $r8, $r10;
        java.lang.String $r9, $r11;

        r0 := @this: org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test;

        $r2 = new org.apache.commons.collections4.bidimap.DualTreeBidiMap;

        $r3 = <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER>;

        specialinvoke $r2.<org.apache.commons.collections4.bidimap.DualTreeBidiMap: void <init>(java.util.Comparator,java.util.Comparator)>($r3, null);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke $r2.<org.apache.commons.collections4.bidimap.DualTreeBidiMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("two", $r4);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke $r2.<org.apache.commons.collections4.bidimap.DualTreeBidiMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("one", $r6);

        $r8 = virtualinvoke $r2.<org.apache.commons.collections4.bidimap.DualTreeBidiMap: java.lang.Object firstKey()>();

        $r9 = (java.lang.String) $r8;

        staticinvoke <org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test: void assertEquals(java.lang.String,java.lang.String)>("one", $r9);

        $r10 = virtualinvoke $r2.<org.apache.commons.collections4.bidimap.DualTreeBidiMap: java.lang.Object lastKey()>();

        $r11 = (java.lang.String) $r10;

        staticinvoke <org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test: void assertEquals(java.lang.String,java.lang.String)>("two", $r11);

        return;
    }

    public void testSerializeDeserializeCheckComparator() throws java.lang.Exception
    {
        org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test r0;
        org.apache.commons.collections4.bidimap.DualTreeBidiMap r1;
        java.lang.Object r5;
        org.apache.commons.collections4.SortedBidiMap r6;
        boolean $z0, $z1, $z2;
        java.io.ByteArrayOutputStream $r7;
        java.io.ObjectOutputStream $r8;
        java.io.ObjectInputStream $r9;
        java.io.ByteArrayInputStream $r10;
        byte[] $r11;
        java.util.Comparator $r12, $r13, $r14;

        r0 := @this: org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test: org.apache.commons.collections4.bidimap.DualTreeBidiMap makeObject()>();

        $z0 = r1 instanceof java.io.Serializable;

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test: boolean isTestSerialization()>();

        if $z1 == 0 goto label1;

        $r7 = new java.io.ByteArrayOutputStream;

        specialinvoke $r7.<java.io.ByteArrayOutputStream: void <init>()>();

        $r8 = new java.io.ObjectOutputStream;

        specialinvoke $r8.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>($r7);

        virtualinvoke $r8.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(r1);

        virtualinvoke $r8.<java.io.ObjectOutputStream: void close()>();

        $r9 = new java.io.ObjectInputStream;

        $r10 = new java.io.ByteArrayInputStream;

        $r11 = virtualinvoke $r7.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r10.<java.io.ByteArrayInputStream: void <init>(byte[])>($r11);

        specialinvoke $r9.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>($r10);

        r5 = virtualinvoke $r9.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        virtualinvoke $r9.<java.io.ObjectInputStream: void close()>();

        r6 = (org.apache.commons.collections4.SortedBidiMap) r5;

        $r12 = interfaceinvoke r1.<org.apache.commons.collections4.SortedBidiMap: java.util.Comparator comparator()>();

        staticinvoke <org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test: void assertNotNull(java.lang.Object)>($r12);

        $r13 = interfaceinvoke r6.<org.apache.commons.collections4.SortedBidiMap: java.util.Comparator comparator()>();

        staticinvoke <org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test: void assertNotNull(java.lang.Object)>($r13);

        $r14 = interfaceinvoke r6.<org.apache.commons.collections4.SortedBidiMap: java.util.Comparator comparator()>();

        $z2 = $r14 instanceof org.apache.commons.collections4.comparators.ReverseComparator;

        staticinvoke <org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test: void assertTrue(boolean)>($z2);

     label1:
        return;
    }

    public void testCollections364() throws java.lang.Exception
    {
        org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test r0;
        org.apache.commons.collections4.bidimap.DualTreeBidiMap r5, $r6;
        org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test$IntegerComparator $r7;
        java.util.Comparator $r8, $r15, $r16, $r17, $r19, $r21, $r23;
        java.io.ByteArrayOutputStream $r9;
        java.io.ObjectOutputStream $r10;
        java.io.ObjectInputStream $r11;
        java.io.ByteArrayInputStream $r12;
        byte[] $r13;
        java.lang.Object $r14;
        java.lang.Class $r18, $r20, $r22, $r24;

        r0 := @this: org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test;

        $r6 = new org.apache.commons.collections4.bidimap.DualTreeBidiMap;

        $r8 = <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER>;

        $r7 = new org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test$IntegerComparator;

        specialinvoke $r7.<org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test$IntegerComparator: void <init>(org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test$1)>(null);

        specialinvoke $r6.<org.apache.commons.collections4.bidimap.DualTreeBidiMap: void <init>(java.util.Comparator,java.util.Comparator)>($r8, $r7);

        $r9 = new java.io.ByteArrayOutputStream;

        specialinvoke $r9.<java.io.ByteArrayOutputStream: void <init>()>();

        $r10 = new java.io.ObjectOutputStream;

        specialinvoke $r10.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>($r9);

        virtualinvoke $r10.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r6);

        virtualinvoke $r10.<java.io.ObjectOutputStream: void close()>();

        $r11 = new java.io.ObjectInputStream;

        $r12 = new java.io.ByteArrayInputStream;

        $r13 = virtualinvoke $r9.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r12.<java.io.ByteArrayInputStream: void <init>(byte[])>($r13);

        specialinvoke $r11.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>($r12);

        $r14 = virtualinvoke $r11.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        r5 = (org.apache.commons.collections4.bidimap.DualTreeBidiMap) $r14;

        virtualinvoke $r11.<java.io.ObjectInputStream: void close()>();

        $r15 = virtualinvoke $r6.<org.apache.commons.collections4.bidimap.DualTreeBidiMap: java.util.Comparator comparator()>();

        staticinvoke <org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test: void assertNotNull(java.lang.Object)>($r15);

        $r16 = virtualinvoke r5.<org.apache.commons.collections4.bidimap.DualTreeBidiMap: java.util.Comparator comparator()>();

        staticinvoke <org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test: void assertNotNull(java.lang.Object)>($r16);

        $r17 = virtualinvoke $r6.<org.apache.commons.collections4.bidimap.DualTreeBidiMap: java.util.Comparator comparator()>();

        $r18 = virtualinvoke $r17.<java.lang.Object: java.lang.Class getClass()>();

        $r19 = virtualinvoke r5.<org.apache.commons.collections4.bidimap.DualTreeBidiMap: java.util.Comparator comparator()>();

        $r20 = virtualinvoke $r19.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test: void assertEquals(java.lang.Object,java.lang.Object)>($r18, $r20);

        $r21 = virtualinvoke $r6.<org.apache.commons.collections4.bidimap.DualTreeBidiMap: java.util.Comparator valueComparator()>();

        $r22 = virtualinvoke $r21.<java.lang.Object: java.lang.Class getClass()>();

        $r23 = virtualinvoke r5.<org.apache.commons.collections4.bidimap.DualTreeBidiMap: java.util.Comparator valueComparator()>();

        $r24 = virtualinvoke $r23.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test: void assertEquals(java.lang.Object,java.lang.Object)>($r22, $r24);

        return;
    }

    public void testSortOrder() throws java.lang.Exception
    {
        org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test r0;
        org.apache.commons.collections4.SortedBidiMap r1;
        java.util.Iterator r2, r3;
        java.lang.Comparable r4, r5;
        java.lang.Object[] $r6;
        org.apache.commons.collections4.comparators.ReverseComparator $r7;
        org.apache.commons.collections4.comparators.ComparableComparator $r8;
        java.util.Set $r9;
        boolean $z0;
        java.lang.Object $r10, $r11;
        java.util.List r12, r13;

        r0 := @this: org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test: org.apache.commons.collections4.SortedBidiMap makeFullMap()>();

        $r6 = virtualinvoke r0.<org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test: java.lang.Object[] getSampleKeys()>();

        r12 = virtualinvoke r0.<org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test: java.util.List getAsList(java.lang.Object[])>($r6);

        $r7 = new org.apache.commons.collections4.comparators.ReverseComparator;

        $r8 = staticinvoke <org.apache.commons.collections4.comparators.ComparableComparator: org.apache.commons.collections4.comparators.ComparableComparator comparableComparator()>();

        specialinvoke $r7.<org.apache.commons.collections4.comparators.ReverseComparator: void <init>(java.util.Comparator)>($r8);

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r12, $r7);

        r13 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r12);

        $r9 = interfaceinvoke r1.<org.apache.commons.collections4.SortedBidiMap: java.util.Set keySet()>();

        r2 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

        r3 = interfaceinvoke r13.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.Comparable) $r10;

        $r11 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.Comparable) $r11;

        staticinvoke <org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test: void assertNotNull(java.lang.String,java.lang.Object)>("key in sorted list may not be null", r4);

        staticinvoke <org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test: void assertNotNull(java.lang.String,java.lang.Object)>("key in map may not be null", r5);

        staticinvoke <org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("key from sorted list and map must be equal", r4, r5);

        goto label1;

     label2:
        return;
    }

    public java.lang.String getCompatibilityVersion()
    {
        org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test r0;

        r0 := @this: org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test;

        return "4.Test2";
    }

    public java.lang.String[] ignoredTests()
    {
        org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test r0;
        boolean $z0;
        java.lang.String[] $r4, $r5;

        r0 := @this: org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test;

        $z0 = <org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test: boolean IBMJDK16>;

        if $z0 == 0 goto label1;

        $r5 = newarray (java.lang.String)[11];

        $r5[0] = "DualTreeBidiMap2Test.bulkTestInverseMap.bulkTestInverseMap";

        $r5[1] = "DualTreeBidiMap2Test.bulkTestSubMap.bulkTestMapEntrySet.testCollectionIteratorRemove";

        $r5[2] = "DualTreeBidiMap2Test.bulkTestSubMap.bulkTestMapValues.testCollectionIteratorRemove";

        $r5[3] = "DualTreeBidiMap2Test.bulkTestTailMap.testMapRemove";

        $r5[4] = "DualTreeBidiMap2Test.bulkTestTailMap.bulkTestMapEntrySet.testCollectionIteratorRemove";

        $r5[5] = "DualTreeBidiMap2Test.bulkTestTailMap.bulkTestMapEntrySet.testCollectionRemoveAll";

        $r5[6] = "DualTreeBidiMap2Test.bulkTestTailMap.bulkTestMapKeySet.testCollectionIteratorRemove";

        $r5[7] = "DualTreeBidiMap2Test.bulkTestTailMap.bulkTestMapKeySet.testCollectionRemoveAll";

        $r5[8] = "DualTreeBidiMap2Test.bulkTestTailMap.bulkTestMapValues.testCollectionClear";

        $r5[9] = "DualTreeBidiMap2Test.bulkTestTailMap.bulkTestMapValues.testCollectionRemoveAll";

        $r5[10] = "DualTreeBidiMap2Test.bulkTestTailMap.bulkTestMapValues.testCollectionRetainAll";

        return $r5;

     label1:
        $r4 = newarray (java.lang.String)[1];

        $r4[0] = "DualTreeBidiMap2Test.bulkTestInverseMap.bulkTestInverseMap";

        return $r4;
    }

    public volatile java.util.SortedMap makeConfirmedMap()
    {
        org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test r0;
        java.util.TreeMap $r1;

        r0 := @this: org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test: java.util.TreeMap makeConfirmedMap()>();

        return $r1;
    }

    public volatile org.apache.commons.collections4.SortedBidiMap makeObject()
    {
        org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test r0;
        org.apache.commons.collections4.bidimap.DualTreeBidiMap $r1;

        r0 := @this: org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test: org.apache.commons.collections4.bidimap.DualTreeBidiMap makeObject()>();

        return $r1;
    }

    public volatile org.apache.commons.collections4.BidiMap makeObject()
    {
        org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test r0;
        org.apache.commons.collections4.bidimap.DualTreeBidiMap $r1;

        r0 := @this: org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test: org.apache.commons.collections4.bidimap.DualTreeBidiMap makeObject()>();

        return $r1;
    }

    public volatile org.apache.commons.collections4.IterableMap makeObject()
    {
        org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test r0;
        org.apache.commons.collections4.bidimap.DualTreeBidiMap $r1;

        r0 := @this: org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test: org.apache.commons.collections4.bidimap.DualTreeBidiMap makeObject()>();

        return $r1;
    }

    public volatile java.util.Map makeConfirmedMap()
    {
        org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test r0;
        java.util.TreeMap $r1;

        r0 := @this: org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test: java.util.TreeMap makeConfirmedMap()>();

        return $r1;
    }

    public volatile java.util.Map makeObject()
    {
        org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test r0;
        org.apache.commons.collections4.bidimap.DualTreeBidiMap $r1;

        r0 := @this: org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test: org.apache.commons.collections4.bidimap.DualTreeBidiMap makeObject()>();

        return $r1;
    }

    public volatile java.lang.Object makeObject()
    {
        org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test r0;
        org.apache.commons.collections4.bidimap.DualTreeBidiMap $r1;

        r0 := @this: org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test: org.apache.commons.collections4.bidimap.DualTreeBidiMap makeObject()>();

        return $r1;
    }
}
