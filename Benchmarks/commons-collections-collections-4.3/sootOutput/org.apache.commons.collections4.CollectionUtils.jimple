public class org.apache.commons.collections4.CollectionUtils extends java.lang.Object
{
    public static final java.util.Collection EMPTY_COLLECTION;

    private void <init>()
    {
        org.apache.commons.collections4.CollectionUtils r0;

        r0 := @this: org.apache.commons.collections4.CollectionUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.Collection emptyCollection()
    {
        java.util.Collection $r0;

        $r0 = <org.apache.commons.collections4.CollectionUtils: java.util.Collection EMPTY_COLLECTION>;

        return $r0;
    }

    public static java.util.Collection emptyIfNull(java.util.Collection)
    {
        java.util.Collection r0, $r1;

        r0 := @parameter0: java.util.Collection;

        if r0 != null goto label1;

        $r1 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection emptyCollection()>();

        goto label2;

     label1:
        $r1 = r0;

     label2:
        return $r1;
    }

    public static java.util.Collection union(java.lang.Iterable, java.lang.Iterable)
    {
        java.lang.Iterable r0, r1;
        java.util.Iterator r3;
        java.lang.Object r4;
        org.apache.commons.collections4.CollectionUtils$SetOperationCardinalityHelper $r5;
        boolean $z0;
        java.util.Collection $r6;
        int $i0;

        r0 := @parameter0: java.lang.Iterable;

        r1 := @parameter1: java.lang.Iterable;

        $r5 = new org.apache.commons.collections4.CollectionUtils$SetOperationCardinalityHelper;

        specialinvoke $r5.<org.apache.commons.collections4.CollectionUtils$SetOperationCardinalityHelper: void <init>(java.lang.Iterable,java.lang.Iterable)>(r0, r1);

        r3 = virtualinvoke $r5.<org.apache.commons.collections4.CollectionUtils$SetOperationCardinalityHelper: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $i0 = virtualinvoke $r5.<org.apache.commons.collections4.CollectionUtils$SetOperationCardinalityHelper: int max(java.lang.Object)>(r4);

        virtualinvoke $r5.<org.apache.commons.collections4.CollectionUtils$SetOperationCardinalityHelper: void setCardinality(java.lang.Object,int)>(r4, $i0);

        goto label1;

     label2:
        $r6 = virtualinvoke $r5.<org.apache.commons.collections4.CollectionUtils$SetOperationCardinalityHelper: java.util.Collection list()>();

        return $r6;
    }

    public static java.util.Collection intersection(java.lang.Iterable, java.lang.Iterable)
    {
        java.lang.Iterable r0, r1;
        java.util.Iterator r3;
        java.lang.Object r4;
        org.apache.commons.collections4.CollectionUtils$SetOperationCardinalityHelper $r5;
        boolean $z0;
        java.util.Collection $r6;
        int $i0;

        r0 := @parameter0: java.lang.Iterable;

        r1 := @parameter1: java.lang.Iterable;

        $r5 = new org.apache.commons.collections4.CollectionUtils$SetOperationCardinalityHelper;

        specialinvoke $r5.<org.apache.commons.collections4.CollectionUtils$SetOperationCardinalityHelper: void <init>(java.lang.Iterable,java.lang.Iterable)>(r0, r1);

        r3 = virtualinvoke $r5.<org.apache.commons.collections4.CollectionUtils$SetOperationCardinalityHelper: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $i0 = virtualinvoke $r5.<org.apache.commons.collections4.CollectionUtils$SetOperationCardinalityHelper: int min(java.lang.Object)>(r4);

        virtualinvoke $r5.<org.apache.commons.collections4.CollectionUtils$SetOperationCardinalityHelper: void setCardinality(java.lang.Object,int)>(r4, $i0);

        goto label1;

     label2:
        $r6 = virtualinvoke $r5.<org.apache.commons.collections4.CollectionUtils$SetOperationCardinalityHelper: java.util.Collection list()>();

        return $r6;
    }

    public static java.util.Collection disjunction(java.lang.Iterable, java.lang.Iterable)
    {
        java.lang.Iterable r0, r1;
        java.util.Iterator r3;
        java.lang.Object r4;
        org.apache.commons.collections4.CollectionUtils$SetOperationCardinalityHelper $r5;
        boolean $z0;
        java.util.Collection $r6;
        int $i0, $i1, $i2;

        r0 := @parameter0: java.lang.Iterable;

        r1 := @parameter1: java.lang.Iterable;

        $r5 = new org.apache.commons.collections4.CollectionUtils$SetOperationCardinalityHelper;

        specialinvoke $r5.<org.apache.commons.collections4.CollectionUtils$SetOperationCardinalityHelper: void <init>(java.lang.Iterable,java.lang.Iterable)>(r0, r1);

        r3 = virtualinvoke $r5.<org.apache.commons.collections4.CollectionUtils$SetOperationCardinalityHelper: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $i0 = virtualinvoke $r5.<org.apache.commons.collections4.CollectionUtils$SetOperationCardinalityHelper: int max(java.lang.Object)>(r4);

        $i1 = virtualinvoke $r5.<org.apache.commons.collections4.CollectionUtils$SetOperationCardinalityHelper: int min(java.lang.Object)>(r4);

        $i2 = $i0 - $i1;

        virtualinvoke $r5.<org.apache.commons.collections4.CollectionUtils$SetOperationCardinalityHelper: void setCardinality(java.lang.Object,int)>(r4, $i2);

        goto label1;

     label2:
        $r6 = virtualinvoke $r5.<org.apache.commons.collections4.CollectionUtils$SetOperationCardinalityHelper: java.util.Collection list()>();

        return $r6;
    }

    public static java.util.Collection subtract(java.lang.Iterable, java.lang.Iterable)
    {
        java.lang.Iterable r0, r1;
        org.apache.commons.collections4.Predicate r2;
        java.util.Collection $r3;

        r0 := @parameter0: java.lang.Iterable;

        r1 := @parameter1: java.lang.Iterable;

        r2 = staticinvoke <org.apache.commons.collections4.functors.TruePredicate: org.apache.commons.collections4.Predicate truePredicate()>();

        $r3 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection subtract(java.lang.Iterable,java.lang.Iterable,org.apache.commons.collections4.Predicate)>(r0, r1, r2);

        return $r3;
    }

    public static java.util.Collection subtract(java.lang.Iterable, java.lang.Iterable, org.apache.commons.collections4.Predicate)
    {
        java.lang.Iterable r0, r1;
        org.apache.commons.collections4.Predicate r2;
        java.util.ArrayList $r5;
        org.apache.commons.collections4.bag.HashBag $r6;
        boolean $z0, $z1, $z2, $z4;
        java.util.Iterator r7, r9;
        java.lang.Object r8, r10;

        r0 := @parameter0: java.lang.Iterable;

        r1 := @parameter1: java.lang.Iterable;

        r2 := @parameter2: org.apache.commons.collections4.Predicate;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = new org.apache.commons.collections4.bag.HashBag;

        specialinvoke $r6.<org.apache.commons.collections4.bag.HashBag: void <init>()>();

        r7 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        r8 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        $z4 = interfaceinvoke r2.<org.apache.commons.collections4.Predicate: boolean evaluate(java.lang.Object)>(r8);

        if $z4 == 0 goto label2;

        virtualinvoke $r6.<org.apache.commons.collections4.bag.HashBag: boolean add(java.lang.Object)>(r8);

     label2:
        goto label1;

     label3:
        r9 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        r10 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        $z2 = virtualinvoke $r6.<org.apache.commons.collections4.bag.HashBag: boolean remove(java.lang.Object,int)>(r10, 1);

        if $z2 != 0 goto label5;

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r10);

     label5:
        goto label4;

     label6:
        return $r5;
    }

    public static boolean containsAll(java.util.Collection, java.util.Collection)
    {
        java.util.Collection r0, r1;
        java.util.Iterator r2, r4;
        java.lang.Object r5, r6;
        boolean $z0, $z1, $z2, $z4, $z5, z6;
        java.util.HashSet $r7;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.util.Collection;

        $z0 = interfaceinvoke r1.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label01;

        return 1;

     label01:
        r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

        $r7 = new java.util.HashSet;

        specialinvoke $r7.<java.util.HashSet: void <init>()>();

        r4 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label02:
        $z5 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label10;

        r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $z1 = interfaceinvoke $r7.<java.util.Set: boolean contains(java.lang.Object)>(r5);

        if $z1 == 0 goto label03;

        goto label02;

     label03:
        z6 = 0;

     label04:
        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label08;

        r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>(r6);

        if r5 != null goto label05;

        if r6 != null goto label07;

        goto label06;

     label05:
        $z4 = virtualinvoke r5.<java.lang.Object: boolean equals(java.lang.Object)>(r6);

        if $z4 == 0 goto label07;

     label06:
        z6 = 1;

        goto label08;

     label07:
        goto label04;

     label08:
        if z6 != 0 goto label09;

        return 0;

     label09:
        goto label02;

     label10:
        return 1;
    }

    public static transient boolean containsAny(java.util.Collection, java.lang.Object[])
    {
        java.util.Collection r0;
        java.lang.Object[] r1;
        java.lang.Object r2, r4;
        int $i0, $i1, i2, i3;
        boolean $z0, $z1, $z2;
        java.util.Iterator r3;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.lang.Object[];

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        $i1 = lengthof r1;

        if $i0 >= $i1 goto label4;

        r3 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $z2 = staticinvoke <org.apache.commons.collections4.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>(r1, r4);

        if $z2 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        goto label7;

     label4:
        i2 = lengthof r1;

        i3 = 0;

     label5:
        if i3 >= i2 goto label7;

        r2 = r1[i3];

        $z0 = interfaceinvoke r0.<java.util.Collection: boolean contains(java.lang.Object)>(r2);

        if $z0 == 0 goto label6;

        return 1;

     label6:
        i3 = i3 + 1;

        goto label5;

     label7:
        return 0;
    }

    public static boolean containsAny(java.util.Collection, java.util.Collection)
    {
        java.util.Collection r0, r1;
        int $i0, $i1;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator r2, r4;
        java.lang.Object r3, r5;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.util.Collection;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        $i1 = interfaceinvoke r1.<java.util.Collection: int size()>();

        if $i0 >= $i1 goto label4;

        r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $z3 = interfaceinvoke r1.<java.util.Collection: boolean contains(java.lang.Object)>(r3);

        if $z3 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        goto label7;

     label4:
        r4 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $z1 = interfaceinvoke r0.<java.util.Collection: boolean contains(java.lang.Object)>(r5);

        if $z1 == 0 goto label6;

        return 1;

     label6:
        goto label5;

     label7:
        return 0;
    }

    public static java.util.Map getCardinalityMap(java.lang.Iterable)
    {
        java.lang.Iterable r0;
        java.util.Iterator r2;
        java.lang.Object r3, $r6;
        java.lang.Integer r4, $r7, $r9;
        java.util.HashMap $r5;
        boolean $z0;
        int $i0, $i1;

        r0 := @parameter0: java.lang.Iterable;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r2 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);

        r4 = (java.lang.Integer) $r6;

        if r4 != null goto label2;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r9);

        goto label3;

     label2:
        $i0 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        $i1 = $i0 + 1;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r7);

     label3:
        goto label1;

     label4:
        return $r5;
    }

    public static boolean isSubCollection(java.util.Collection, java.util.Collection)
    {
        java.util.Collection r0, r1;
        java.util.Iterator r3;
        java.lang.Object r4;
        org.apache.commons.collections4.CollectionUtils$CardinalityHelper $r5;
        boolean $z0;
        int $i0, $i1;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.util.Collection;

        $r5 = new org.apache.commons.collections4.CollectionUtils$CardinalityHelper;

        specialinvoke $r5.<org.apache.commons.collections4.CollectionUtils$CardinalityHelper: void <init>(java.lang.Iterable,java.lang.Iterable)>(r0, r1);

        r3 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $i0 = virtualinvoke $r5.<org.apache.commons.collections4.CollectionUtils$CardinalityHelper: int freqA(java.lang.Object)>(r4);

        $i1 = virtualinvoke $r5.<org.apache.commons.collections4.CollectionUtils$CardinalityHelper: int freqB(java.lang.Object)>(r4);

        if $i0 <= $i1 goto label2;

        return 0;

     label2:
        goto label1;

     label3:
        return 1;
    }

    public static boolean isProperSubCollection(java.util.Collection, java.util.Collection)
    {
        java.util.Collection r0, r1;
        int $i0, $i1;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.util.Collection;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        $i1 = interfaceinvoke r1.<java.util.Collection: int size()>();

        if $i0 >= $i1 goto label1;

        $z0 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isSubCollection(java.util.Collection,java.util.Collection)>(r0, r1);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static boolean isEqualCollection(java.util.Collection, java.util.Collection)
    {
        java.util.Collection r0, r1;
        java.util.Iterator r3;
        java.lang.Object r4;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.apache.commons.collections4.CollectionUtils$CardinalityHelper $r5;
        java.util.Map $r6, $r7, $r8;
        java.util.Set $r9;
        boolean $z0;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.util.Collection;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        $i1 = interfaceinvoke r1.<java.util.Collection: int size()>();

        if $i0 == $i1 goto label1;

        return 0;

     label1:
        $r5 = new org.apache.commons.collections4.CollectionUtils$CardinalityHelper;

        specialinvoke $r5.<org.apache.commons.collections4.CollectionUtils$CardinalityHelper: void <init>(java.lang.Iterable,java.lang.Iterable)>(r0, r1);

        $r6 = $r5.<org.apache.commons.collections4.CollectionUtils$CardinalityHelper: java.util.Map cardinalityA>;

        $i2 = interfaceinvoke $r6.<java.util.Map: int size()>();

        $r7 = $r5.<org.apache.commons.collections4.CollectionUtils$CardinalityHelper: java.util.Map cardinalityB>;

        $i3 = interfaceinvoke $r7.<java.util.Map: int size()>();

        if $i2 == $i3 goto label2;

        return 0;

     label2:
        $r8 = $r5.<org.apache.commons.collections4.CollectionUtils$CardinalityHelper: java.util.Map cardinalityA>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set keySet()>();

        r3 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $i4 = virtualinvoke $r5.<org.apache.commons.collections4.CollectionUtils$CardinalityHelper: int freqA(java.lang.Object)>(r4);

        $i5 = virtualinvoke $r5.<org.apache.commons.collections4.CollectionUtils$CardinalityHelper: int freqB(java.lang.Object)>(r4);

        if $i4 == $i5 goto label4;

        return 0;

     label4:
        goto label3;

     label5:
        return 1;
    }

    public static boolean isEqualCollection(java.util.Collection, java.util.Collection, org.apache.commons.collections4.Equator)
    {
        java.util.Collection r0, r1, $r5, $r6;
        org.apache.commons.collections4.Equator r2;
        int $i0, $i1;
        org.apache.commons.collections4.CollectionUtils$1 $r4;
        boolean $z0;
        java.lang.NullPointerException $r7;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.util.Collection;

        r2 := @parameter2: org.apache.commons.collections4.Equator;

        if r2 != null goto label1;

        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("Equator must not be null.");

        throw $r7;

     label1:
        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        $i1 = interfaceinvoke r1.<java.util.Collection: int size()>();

        if $i0 == $i1 goto label2;

        return 0;

     label2:
        $r4 = new org.apache.commons.collections4.CollectionUtils$1;

        specialinvoke $r4.<org.apache.commons.collections4.CollectionUtils$1: void <init>(org.apache.commons.collections4.Equator)>(r2);

        $r5 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection collect(java.lang.Iterable,org.apache.commons.collections4.Transformer)>(r0, $r4);

        $r6 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection collect(java.lang.Iterable,org.apache.commons.collections4.Transformer)>(r1, $r4);

        $z0 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isEqualCollection(java.util.Collection,java.util.Collection)>($r5, $r6);

        return $z0;
    }

    public static int cardinality(java.lang.Object, java.lang.Iterable)
    {
        java.lang.Object r0;
        java.lang.Iterable r1;
        int $i0;
        java.lang.NullPointerException $r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Iterable;

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("coll must not be null.");

        throw $r2;

     label1:
        $i0 = staticinvoke <org.apache.commons.collections4.IterableUtils: int frequency(java.lang.Iterable,java.lang.Object)>(r1, r0);

        return $i0;
    }

    public static java.lang.Object find(java.lang.Iterable, org.apache.commons.collections4.Predicate)
    {
        java.lang.Iterable r0;
        org.apache.commons.collections4.Predicate r1;
        java.lang.Object $r2;

        r0 := @parameter0: java.lang.Iterable;

        r1 := @parameter1: org.apache.commons.collections4.Predicate;

        if r1 == null goto label1;

        $r2 = staticinvoke <org.apache.commons.collections4.IterableUtils: java.lang.Object find(java.lang.Iterable,org.apache.commons.collections4.Predicate)>(r0, r1);

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public static org.apache.commons.collections4.Closure forAllDo(java.lang.Iterable, org.apache.commons.collections4.Closure)
    {
        java.lang.Iterable r0;
        org.apache.commons.collections4.Closure r1;

        r0 := @parameter0: java.lang.Iterable;

        r1 := @parameter1: org.apache.commons.collections4.Closure;

        if r1 == null goto label1;

        staticinvoke <org.apache.commons.collections4.IterableUtils: void forEach(java.lang.Iterable,org.apache.commons.collections4.Closure)>(r0, r1);

     label1:
        return r1;
    }

    public static org.apache.commons.collections4.Closure forAllDo(java.util.Iterator, org.apache.commons.collections4.Closure)
    {
        java.util.Iterator r0;
        org.apache.commons.collections4.Closure r1;

        r0 := @parameter0: java.util.Iterator;

        r1 := @parameter1: org.apache.commons.collections4.Closure;

        if r1 == null goto label1;

        staticinvoke <org.apache.commons.collections4.IteratorUtils: void forEach(java.util.Iterator,org.apache.commons.collections4.Closure)>(r0, r1);

     label1:
        return r1;
    }

    public static java.lang.Object forAllButLastDo(java.lang.Iterable, org.apache.commons.collections4.Closure)
    {
        java.lang.Iterable r0;
        org.apache.commons.collections4.Closure r1;
        java.lang.Object $r2;

        r0 := @parameter0: java.lang.Iterable;

        r1 := @parameter1: org.apache.commons.collections4.Closure;

        if r1 == null goto label1;

        $r2 = staticinvoke <org.apache.commons.collections4.IterableUtils: java.lang.Object forEachButLast(java.lang.Iterable,org.apache.commons.collections4.Closure)>(r0, r1);

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public static java.lang.Object forAllButLastDo(java.util.Iterator, org.apache.commons.collections4.Closure)
    {
        java.util.Iterator r0;
        org.apache.commons.collections4.Closure r1;
        java.lang.Object $r2;

        r0 := @parameter0: java.util.Iterator;

        r1 := @parameter1: org.apache.commons.collections4.Closure;

        if r1 == null goto label1;

        $r2 = staticinvoke <org.apache.commons.collections4.IteratorUtils: java.lang.Object forEachButLast(java.util.Iterator,org.apache.commons.collections4.Closure)>(r0, r1);

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public static boolean filter(java.lang.Iterable, org.apache.commons.collections4.Predicate)
    {
        java.lang.Iterable r0;
        org.apache.commons.collections4.Predicate r1;
        java.util.Iterator r2;
        java.lang.Object $r3;
        boolean $z0, z1, $z2;

        r0 := @parameter0: java.lang.Iterable;

        r1 := @parameter1: org.apache.commons.collections4.Predicate;

        z1 = 0;

        if r0 == null goto label2;

        if r1 == null goto label2;

        r2 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $z0 = interfaceinvoke r1.<org.apache.commons.collections4.Predicate: boolean evaluate(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        interfaceinvoke r2.<java.util.Iterator: void remove()>();

        z1 = 1;

        goto label1;

     label2:
        return z1;
    }

    public static boolean filterInverse(java.lang.Iterable, org.apache.commons.collections4.Predicate)
    {
        java.lang.Iterable r0;
        org.apache.commons.collections4.Predicate r1, $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.Iterable;

        r1 := @parameter1: org.apache.commons.collections4.Predicate;

        if r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r3 = staticinvoke <org.apache.commons.collections4.PredicateUtils: org.apache.commons.collections4.Predicate notPredicate(org.apache.commons.collections4.Predicate)>(r1);

     label2:
        $z0 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean filter(java.lang.Iterable,org.apache.commons.collections4.Predicate)>(r0, $r3);

        return $z0;
    }

    public static void transform(java.util.Collection, org.apache.commons.collections4.Transformer)
    {
        java.util.Collection r0, r6;
        org.apache.commons.collections4.Transformer r1;
        java.util.ListIterator r2;
        boolean $z0, $z2;
        java.lang.Object $r3, $r4;
        java.util.List r5;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: org.apache.commons.collections4.Transformer;

        if r0 == null goto label4;

        if r1 == null goto label4;

        $z0 = r0 instanceof java.util.List;

        if $z0 == 0 goto label3;

        r5 = (java.util.List) r0;

        r2 = interfaceinvoke r5.<java.util.List: java.util.ListIterator listIterator()>();

     label1:
        $z2 = interfaceinvoke r2.<java.util.ListIterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.ListIterator: java.lang.Object next()>();

        $r4 = interfaceinvoke r1.<org.apache.commons.collections4.Transformer: java.lang.Object transform(java.lang.Object)>($r3);

        interfaceinvoke r2.<java.util.ListIterator: void set(java.lang.Object)>($r4);

        goto label1;

     label2:
        goto label4;

     label3:
        r6 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection collect(java.lang.Iterable,org.apache.commons.collections4.Transformer)>(r0, r1);

        interfaceinvoke r0.<java.util.Collection: void clear()>();

        interfaceinvoke r0.<java.util.Collection: boolean addAll(java.util.Collection)>(r6);

     label4:
        return;
    }

    public static int countMatches(java.lang.Iterable, org.apache.commons.collections4.Predicate)
    {
        java.lang.Iterable r0;
        org.apache.commons.collections4.Predicate r1;
        long $l0;
        int $i1;

        r0 := @parameter0: java.lang.Iterable;

        r1 := @parameter1: org.apache.commons.collections4.Predicate;

        if r1 != null goto label1;

        $i1 = 0;

        goto label2;

     label1:
        $l0 = staticinvoke <org.apache.commons.collections4.IterableUtils: long countMatches(java.lang.Iterable,org.apache.commons.collections4.Predicate)>(r0, r1);

        $i1 = (int) $l0;

     label2:
        return $i1;
    }

    public static boolean exists(java.lang.Iterable, org.apache.commons.collections4.Predicate)
    {
        java.lang.Iterable r0;
        org.apache.commons.collections4.Predicate r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Iterable;

        r1 := @parameter1: org.apache.commons.collections4.Predicate;

        if r1 == null goto label1;

        $z0 = staticinvoke <org.apache.commons.collections4.IterableUtils: boolean matchesAny(java.lang.Iterable,org.apache.commons.collections4.Predicate)>(r0, r1);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static boolean matchesAll(java.lang.Iterable, org.apache.commons.collections4.Predicate)
    {
        java.lang.Iterable r0;
        org.apache.commons.collections4.Predicate r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Iterable;

        r1 := @parameter1: org.apache.commons.collections4.Predicate;

        if r1 == null goto label1;

        $z0 = staticinvoke <org.apache.commons.collections4.IterableUtils: boolean matchesAll(java.lang.Iterable,org.apache.commons.collections4.Predicate)>(r0, r1);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static java.util.Collection select(java.lang.Iterable, org.apache.commons.collections4.Predicate)
    {
        java.lang.Iterable r0;
        org.apache.commons.collections4.Predicate r1;
        boolean $z0;
        java.util.Collection $r3, $r4;
        int $i0;
        java.util.ArrayList $r5;

        r0 := @parameter0: java.lang.Iterable;

        r1 := @parameter1: org.apache.commons.collections4.Predicate;

        $z0 = r0 instanceof java.util.Collection;

        if $z0 == 0 goto label1;

        $r5 = new java.util.ArrayList;

        $r4 = (java.util.Collection) r0;

        $i0 = interfaceinvoke $r4.<java.util.Collection: int size()>();

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>($i0);

        goto label2;

     label1:
        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

     label2:
        $r3 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection select(java.lang.Iterable,org.apache.commons.collections4.Predicate,java.util.Collection)>(r0, r1, $r5);

        return $r3;
    }

    public static java.util.Collection select(java.lang.Iterable, org.apache.commons.collections4.Predicate, java.util.Collection)
    {
        java.lang.Iterable r0;
        org.apache.commons.collections4.Predicate r1;
        java.util.Collection r2;
        java.util.Iterator r3;
        java.lang.Object r4;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Iterable;

        r1 := @parameter1: org.apache.commons.collections4.Predicate;

        r2 := @parameter2: java.util.Collection;

        if r0 == null goto label3;

        if r1 == null goto label3;

        r3 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $z1 = interfaceinvoke r1.<org.apache.commons.collections4.Predicate: boolean evaluate(java.lang.Object)>(r4);

        if $z1 == 0 goto label2;

        interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>(r4);

     label2:
        goto label1;

     label3:
        return r2;
    }

    public static java.util.Collection select(java.lang.Iterable, org.apache.commons.collections4.Predicate, java.util.Collection, java.util.Collection)
    {
        java.lang.Iterable r0;
        org.apache.commons.collections4.Predicate r1;
        java.util.Collection r2, r3;
        java.util.Iterator r4;
        java.lang.Object r5;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Iterable;

        r1 := @parameter1: org.apache.commons.collections4.Predicate;

        r2 := @parameter2: java.util.Collection;

        r3 := @parameter3: java.util.Collection;

        if r0 == null goto label4;

        if r1 == null goto label4;

        r4 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $z1 = interfaceinvoke r1.<org.apache.commons.collections4.Predicate: boolean evaluate(java.lang.Object)>(r5);

        if $z1 == 0 goto label2;

        interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>(r5);

        goto label3;

     label2:
        interfaceinvoke r3.<java.util.Collection: boolean add(java.lang.Object)>(r5);

     label3:
        goto label1;

     label4:
        return r2;
    }

    public static java.util.Collection selectRejected(java.lang.Iterable, org.apache.commons.collections4.Predicate)
    {
        java.lang.Iterable r0;
        org.apache.commons.collections4.Predicate r1;
        boolean $z0;
        java.util.Collection $r3, $r4;
        int $i0;
        java.util.ArrayList $r5;

        r0 := @parameter0: java.lang.Iterable;

        r1 := @parameter1: org.apache.commons.collections4.Predicate;

        $z0 = r0 instanceof java.util.Collection;

        if $z0 == 0 goto label1;

        $r5 = new java.util.ArrayList;

        $r4 = (java.util.Collection) r0;

        $i0 = interfaceinvoke $r4.<java.util.Collection: int size()>();

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>($i0);

        goto label2;

     label1:
        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

     label2:
        $r3 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection selectRejected(java.lang.Iterable,org.apache.commons.collections4.Predicate,java.util.Collection)>(r0, r1, $r5);

        return $r3;
    }

    public static java.util.Collection selectRejected(java.lang.Iterable, org.apache.commons.collections4.Predicate, java.util.Collection)
    {
        java.lang.Iterable r0;
        org.apache.commons.collections4.Predicate r1;
        java.util.Collection r2;
        java.util.Iterator r3;
        java.lang.Object r4;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Iterable;

        r1 := @parameter1: org.apache.commons.collections4.Predicate;

        r2 := @parameter2: java.util.Collection;

        if r0 == null goto label3;

        if r1 == null goto label3;

        r3 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $z1 = interfaceinvoke r1.<org.apache.commons.collections4.Predicate: boolean evaluate(java.lang.Object)>(r4);

        if $z1 != 0 goto label2;

        interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>(r4);

     label2:
        goto label1;

     label3:
        return r2;
    }

    public static java.util.Collection collect(java.lang.Iterable, org.apache.commons.collections4.Transformer)
    {
        java.lang.Iterable r0;
        org.apache.commons.collections4.Transformer r1;
        boolean $z0;
        java.util.Collection $r3, $r4;
        int $i0;
        java.util.ArrayList $r5;

        r0 := @parameter0: java.lang.Iterable;

        r1 := @parameter1: org.apache.commons.collections4.Transformer;

        $z0 = r0 instanceof java.util.Collection;

        if $z0 == 0 goto label1;

        $r5 = new java.util.ArrayList;

        $r4 = (java.util.Collection) r0;

        $i0 = interfaceinvoke $r4.<java.util.Collection: int size()>();

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>($i0);

        goto label2;

     label1:
        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

     label2:
        $r3 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection collect(java.lang.Iterable,org.apache.commons.collections4.Transformer,java.util.Collection)>(r0, r1, $r5);

        return $r3;
    }

    public static java.util.Collection collect(java.util.Iterator, org.apache.commons.collections4.Transformer)
    {
        java.util.Iterator r0;
        org.apache.commons.collections4.Transformer r1;
        java.util.ArrayList $r2;
        java.util.Collection $r3;

        r0 := @parameter0: java.util.Iterator;

        r1 := @parameter1: org.apache.commons.collections4.Transformer;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection collect(java.util.Iterator,org.apache.commons.collections4.Transformer,java.util.Collection)>(r0, r1, $r2);

        return $r3;
    }

    public static java.util.Collection collect(java.lang.Iterable, org.apache.commons.collections4.Transformer, java.util.Collection)
    {
        java.lang.Iterable r0;
        org.apache.commons.collections4.Transformer r1;
        java.util.Collection r2, $r4;
        java.util.Iterator $r3;

        r0 := @parameter0: java.lang.Iterable;

        r1 := @parameter1: org.apache.commons.collections4.Transformer;

        r2 := @parameter2: java.util.Collection;

        if r0 == null goto label1;

        $r3 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r4 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection collect(java.util.Iterator,org.apache.commons.collections4.Transformer,java.util.Collection)>($r3, r1, r2);

        return $r4;

     label1:
        return r2;
    }

    public static java.util.Collection collect(java.util.Iterator, org.apache.commons.collections4.Transformer, java.util.Collection)
    {
        java.util.Iterator r0;
        org.apache.commons.collections4.Transformer r1;
        java.util.Collection r2;
        java.lang.Object r3, r4;
        boolean $z0;

        r0 := @parameter0: java.util.Iterator;

        r1 := @parameter1: org.apache.commons.collections4.Transformer;

        r2 := @parameter2: java.util.Collection;

        if r0 == null goto label2;

        if r1 == null goto label2;

     label1:
        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        r3 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        r4 = interfaceinvoke r1.<org.apache.commons.collections4.Transformer: java.lang.Object transform(java.lang.Object)>(r3);

        interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>(r4);

        goto label1;

     label2:
        return r2;
    }

    public static boolean addIgnoreNull(java.util.Collection, java.lang.Object)
    {
        java.util.Collection r0;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.lang.NullPointerException $r2;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.lang.Object;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("The collection must not be null");

        throw $r2;

     label1:
        if r1 == null goto label2;

        $z0 = interfaceinvoke r0.<java.util.Collection: boolean add(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public static boolean addAll(java.util.Collection, java.lang.Iterable)
    {
        java.util.Collection r0, $r3;
        java.lang.Iterable r1;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r2;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.lang.Iterable;

        $z0 = r1 instanceof java.util.Collection;

        if $z0 == 0 goto label1;

        $r3 = (java.util.Collection) r1;

        $z2 = interfaceinvoke r0.<java.util.Collection: boolean addAll(java.util.Collection)>($r3);

        return $z2;

     label1:
        $r2 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z1 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean addAll(java.util.Collection,java.util.Iterator)>(r0, $r2);

        return $z1;
    }

    public static boolean addAll(java.util.Collection, java.util.Iterator)
    {
        java.util.Collection r0;
        java.util.Iterator r1;
        boolean $z0, $z1, z2;
        java.lang.Object $r2;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.util.Iterator;

        z2 = 0;

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $z1 = interfaceinvoke r0.<java.util.Collection: boolean add(java.lang.Object)>($r2);

        z2 = z2 | $z1;

        goto label1;

     label2:
        return z2;
    }

    public static boolean addAll(java.util.Collection, java.util.Enumeration)
    {
        java.util.Collection r0;
        java.util.Enumeration r1;
        boolean $z0, $z1, z2;
        java.lang.Object $r2;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.util.Enumeration;

        z2 = 0;

     label1:
        $z0 = interfaceinvoke r1.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke r1.<java.util.Enumeration: java.lang.Object nextElement()>();

        $z1 = interfaceinvoke r0.<java.util.Collection: boolean add(java.lang.Object)>($r2);

        z2 = z2 | $z1;

        goto label1;

     label2:
        return z2;
    }

    public static transient boolean addAll(java.util.Collection, java.lang.Object[])
    {
        java.util.Collection r0;
        java.lang.Object[] r1;
        int i0, i1;
        java.lang.Object r3;
        boolean $z0, z1;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.lang.Object[];

        z1 = 0;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r3 = r1[i1];

        $z0 = interfaceinvoke r0.<java.util.Collection: boolean add(java.lang.Object)>(r3);

        z1 = z1 | $z0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return z1;
    }

    public static java.lang.Object get(java.util.Iterator, int)
    {
        java.util.Iterator r0;
        int i0;
        java.lang.Object $r1;

        r0 := @parameter0: java.util.Iterator;

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.apache.commons.collections4.IteratorUtils: java.lang.Object get(java.util.Iterator,int)>(r0, i0);

        return $r1;
    }

    static void checkIndexBounds(int)
    {
        int i0;
        java.lang.IndexOutOfBoundsException $r0;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r0 = new java.lang.IndexOutOfBoundsException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Index cannot be negative: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r4);

        throw $r0;

     label1:
        return;
    }

    public static java.lang.Object get(java.lang.Iterable, int)
    {
        java.lang.Iterable r0;
        int i0;
        java.lang.Object $r1;

        r0 := @parameter0: java.lang.Iterable;

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.apache.commons.collections4.IterableUtils: java.lang.Object get(java.lang.Iterable,int)>(r0, i0);

        return $r1;
    }

    public static java.lang.Object get(java.lang.Object, int)
    {
        java.lang.Object r0, $r2, $r4, $r5, $r6, $r9, $r11;
        int i0;
        java.util.Iterator r1, r26;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.IllegalArgumentException $r3, $r17, $r18;
        java.lang.Object[] $r7, $r8;
        java.util.Set $r10;
        java.lang.IndexOutOfBoundsException $r12;
        java.lang.StringBuilder $r13, $r14, $r15, $r19, $r20, $r23;
        java.lang.String $r16, $r22, $r24;
        java.lang.Class $r21;
        java.util.Map r25;
        java.lang.Iterable r27;
        java.util.Enumeration r28;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        if i0 >= 0 goto label1;

        $r12 = new java.lang.IndexOutOfBoundsException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Index cannot be negative: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r16);

        throw $r12;

     label1:
        $z0 = r0 instanceof java.util.Map;

        if $z0 == 0 goto label2;

        r25 = (java.util.Map) r0;

        $r10 = interfaceinvoke r25.<java.util.Map: java.util.Set entrySet()>();

        r1 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

        $r11 = staticinvoke <org.apache.commons.collections4.IteratorUtils: java.lang.Object get(java.util.Iterator,int)>(r1, i0);

        return $r11;

     label2:
        $z1 = r0 instanceof java.lang.Object[];

        if $z1 == 0 goto label3;

        $r7 = (java.lang.Object[]) r0;

        $r8 = (java.lang.Object[]) $r7;

        $r9 = $r8[i0];

        return $r9;

     label3:
        $z2 = r0 instanceof java.util.Iterator;

        if $z2 == 0 goto label4;

        r26 = (java.util.Iterator) r0;

        $r6 = staticinvoke <org.apache.commons.collections4.IteratorUtils: java.lang.Object get(java.util.Iterator,int)>(r26, i0);

        return $r6;

     label4:
        $z3 = r0 instanceof java.lang.Iterable;

        if $z3 == 0 goto label5;

        r27 = (java.lang.Iterable) r0;

        $r5 = staticinvoke <org.apache.commons.collections4.IterableUtils: java.lang.Object get(java.lang.Iterable,int)>(r27, i0);

        return $r5;

     label5:
        $z4 = r0 instanceof java.util.Enumeration;

        if $z4 == 0 goto label6;

        r28 = (java.util.Enumeration) r0;

        $r4 = staticinvoke <org.apache.commons.collections4.EnumerationUtils: java.lang.Object get(java.util.Enumeration,int)>(r28, i0);

        return $r4;

     label6:
        if r0 != null goto label7;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unsupported object type: null");

        throw $r3;

     label7:
        $r2 = staticinvoke <java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>(r0, i0);

     label8:
        return $r2;

     label9:
        $r17 := @caughtexception;

        $r18 = new java.lang.IllegalArgumentException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported object type: ");

        $r21 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r22 = virtualinvoke $r21.<java.lang.Class: java.lang.String getName()>();

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r24);

        throw $r18;

        catch java.lang.IllegalArgumentException from label7 to label8 with label9;
    }

    public static java.util.Map$Entry get(java.util.Map, int)
    {
        java.util.Map r0;
        int i0;
        java.util.Set $r1;
        java.lang.Object $r2;
        java.util.Map$Entry $r3;

        r0 := @parameter0: java.util.Map;

        i0 := @parameter1: int;

        staticinvoke <org.apache.commons.collections4.CollectionUtils: void checkIndexBounds(int)>(i0);

        $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        $r2 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.lang.Object get(java.lang.Iterable,int)>($r1, i0);

        $r3 = (java.util.Map$Entry) $r2;

        return $r3;
    }

    public static int size(java.lang.Object)
    {
        java.lang.Object r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.Iterator $r2;
        java.lang.Object[] $r3, $r4;
        java.lang.Iterable $r5;
        java.util.Collection $r6;
        java.util.Map $r7;
        java.lang.IllegalArgumentException $r8, $r9;
        java.lang.StringBuilder $r10, $r11, $r14;
        java.lang.Class $r12;
        java.lang.String $r13, $r15;
        int i0;
        java.util.Enumeration r16;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label01;

        return 0;

     label01:
        i0 = 0;

        $z0 = r0 instanceof java.util.Map;

        if $z0 == 0 goto label02;

        $r7 = (java.util.Map) r0;

        i0 = interfaceinvoke $r7.<java.util.Map: int size()>();

        goto label12;

     label02:
        $z1 = r0 instanceof java.util.Collection;

        if $z1 == 0 goto label03;

        $r6 = (java.util.Collection) r0;

        i0 = interfaceinvoke $r6.<java.util.Collection: int size()>();

        goto label12;

     label03:
        $z2 = r0 instanceof java.lang.Iterable;

        if $z2 == 0 goto label04;

        $r5 = (java.lang.Iterable) r0;

        i0 = staticinvoke <org.apache.commons.collections4.IterableUtils: int size(java.lang.Iterable)>($r5);

        goto label12;

     label04:
        $z3 = r0 instanceof java.lang.Object[];

        if $z3 == 0 goto label05;

        $r3 = (java.lang.Object[]) r0;

        $r4 = (java.lang.Object[]) $r3;

        i0 = lengthof $r4;

        goto label12;

     label05:
        $z4 = r0 instanceof java.util.Iterator;

        if $z4 == 0 goto label06;

        $r2 = (java.util.Iterator) r0;

        i0 = staticinvoke <org.apache.commons.collections4.IteratorUtils: int size(java.util.Iterator)>($r2);

        goto label12;

     label06:
        $z5 = r0 instanceof java.util.Enumeration;

        if $z5 == 0 goto label09;

        r16 = (java.util.Enumeration) r0;

     label07:
        $z6 = interfaceinvoke r16.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z6 == 0 goto label08;

        i0 = i0 + 1;

        interfaceinvoke r16.<java.util.Enumeration: java.lang.Object nextElement()>();

        goto label07;

     label08:
        goto label12;

     label09:
        i0 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r0);

     label10:
        goto label12;

     label11:
        $r8 := @caughtexception;

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported object type: ");

        $r12 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.String getName()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r9;

     label12:
        return i0;

        catch java.lang.IllegalArgumentException from label09 to label10 with label11;
    }

    public static boolean sizeIsEmpty(java.lang.Object)
    {
        java.lang.Object r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        int $i0, $i1;
        java.util.Enumeration $r2;
        java.util.Iterator $r3;
        java.lang.Object[] $r4, $r5;
        java.util.Map $r6;
        java.lang.Iterable $r7;
        java.util.Collection $r8;
        java.lang.IllegalArgumentException $r9, $r10;
        java.lang.StringBuilder $r11, $r12, $r15;
        java.lang.Class $r13;
        java.lang.String $r14, $r16;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label01;

        return 1;

     label01:
        $z0 = r0 instanceof java.util.Collection;

        if $z0 == 0 goto label02;

        $r8 = (java.util.Collection) r0;

        $z10 = interfaceinvoke $r8.<java.util.Collection: boolean isEmpty()>();

        return $z10;

     label02:
        $z1 = r0 instanceof java.lang.Iterable;

        if $z1 == 0 goto label03;

        $r7 = (java.lang.Iterable) r0;

        $z9 = staticinvoke <org.apache.commons.collections4.IterableUtils: boolean isEmpty(java.lang.Iterable)>($r7);

        return $z9;

     label03:
        $z2 = r0 instanceof java.util.Map;

        if $z2 == 0 goto label04;

        $r6 = (java.util.Map) r0;

        $z8 = interfaceinvoke $r6.<java.util.Map: boolean isEmpty()>();

        return $z8;

     label04:
        $z3 = r0 instanceof java.lang.Object[];

        if $z3 == 0 goto label07;

        $r4 = (java.lang.Object[]) r0;

        $r5 = (java.lang.Object[]) $r4;

        $i1 = lengthof $r5;

        if $i1 != 0 goto label05;

        $z11 = 1;

        goto label06;

     label05:
        $z11 = 0;

     label06:
        return $z11;

     label07:
        $z4 = r0 instanceof java.util.Iterator;

        if $z4 == 0 goto label10;

        $r3 = (java.util.Iterator) r0;

        $z7 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z7 != 0 goto label08;

        $z12 = 1;

        goto label09;

     label08:
        $z12 = 0;

     label09:
        return $z12;

     label10:
        $z5 = r0 instanceof java.util.Enumeration;

        if $z5 == 0 goto label13;

        $r2 = (java.util.Enumeration) r0;

        $z6 = interfaceinvoke $r2.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z6 != 0 goto label11;

        $z13 = 1;

        goto label12;

     label11:
        $z13 = 0;

     label12:
        return $z13;

     label13:
        $i0 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r0);

        if $i0 != 0 goto label14;

        $z14 = 1;

        goto label15;

     label14:
        $z14 = 0;

     label15:
        return $z14;

     label16:
        $r9 := @caughtexception;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported object type: ");

        $r13 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r14 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r10;

        catch java.lang.IllegalArgumentException from label13 to label15 with label16;
    }

    public static boolean isEmpty(java.util.Collection)
    {
        java.util.Collection r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Collection;

        if r0 == null goto label1;

        $z0 = interfaceinvoke r0.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public static boolean isNotEmpty(java.util.Collection)
    {
        java.util.Collection r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Collection;

        $z0 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isEmpty(java.util.Collection)>(r0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static void reverseArray(java.lang.Object[])
    {
        java.lang.Object[] r0;
        java.lang.Object r1, $r2;
        int $i0, i1, i2;

        r0 := @parameter0: java.lang.Object[];

        i1 = 0;

        $i0 = lengthof r0;

        i2 = $i0 - 1;

     label1:
        if i2 <= i1 goto label2;

        r1 = r0[i2];

        $r2 = r0[i1];

        r0[i2] = $r2;

        r0[i1] = r1;

        i2 = i2 + -1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static boolean isFull(java.util.Collection)
    {
        java.util.Collection r0;
        boolean $z0, $z1, $z2;
        org.apache.commons.collections4.BoundedCollection $r1, r4;
        java.lang.NullPointerException $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @parameter0: java.util.Collection;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("The collection must not be null");

        throw $r2;

     label1:
        $z0 = r0 instanceof org.apache.commons.collections4.BoundedCollection;

        if $z0 == 0 goto label2;

        $r1 = (org.apache.commons.collections4.BoundedCollection) r0;

        $z2 = interfaceinvoke $r1.<org.apache.commons.collections4.BoundedCollection: boolean isFull()>();

        return $z2;

     label2:
        r4 = staticinvoke <org.apache.commons.collections4.collection.UnmodifiableBoundedCollection: org.apache.commons.collections4.BoundedCollection unmodifiableBoundedCollection(java.util.Collection)>(r0);

        $z1 = interfaceinvoke r4.<org.apache.commons.collections4.BoundedCollection: boolean isFull()>();

     label3:
        return $z1;

     label4:
        $r3 := @caughtexception;

        return 0;

        catch java.lang.IllegalArgumentException from label2 to label3 with label4;
    }

    public static int maxSize(java.util.Collection)
    {
        java.util.Collection r0;
        boolean $z0;
        int $i0, $i1;
        org.apache.commons.collections4.BoundedCollection $r1, r4;
        java.lang.NullPointerException $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @parameter0: java.util.Collection;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("The collection must not be null");

        throw $r2;

     label1:
        $z0 = r0 instanceof org.apache.commons.collections4.BoundedCollection;

        if $z0 == 0 goto label2;

        $r1 = (org.apache.commons.collections4.BoundedCollection) r0;

        $i1 = interfaceinvoke $r1.<org.apache.commons.collections4.BoundedCollection: int maxSize()>();

        return $i1;

     label2:
        r4 = staticinvoke <org.apache.commons.collections4.collection.UnmodifiableBoundedCollection: org.apache.commons.collections4.BoundedCollection unmodifiableBoundedCollection(java.util.Collection)>(r0);

        $i0 = interfaceinvoke r4.<org.apache.commons.collections4.BoundedCollection: int maxSize()>();

     label3:
        return $i0;

     label4:
        $r3 := @caughtexception;

        return -1;

        catch java.lang.IllegalArgumentException from label2 to label3 with label4;
    }

    public static java.util.List collate(java.lang.Iterable, java.lang.Iterable)
    {
        java.lang.Iterable r0, r1;
        java.util.Comparator $r2;
        java.util.List $r3;

        r0 := @parameter0: java.lang.Iterable;

        r1 := @parameter1: java.lang.Iterable;

        $r2 = staticinvoke <org.apache.commons.collections4.ComparatorUtils: java.util.Comparator naturalComparator()>();

        $r3 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.List collate(java.lang.Iterable,java.lang.Iterable,java.util.Comparator,boolean)>(r0, r1, $r2, 1);

        return $r3;
    }

    public static java.util.List collate(java.lang.Iterable, java.lang.Iterable, boolean)
    {
        java.lang.Iterable r0, r1;
        boolean z0;
        java.util.Comparator $r2;
        java.util.List $r3;

        r0 := @parameter0: java.lang.Iterable;

        r1 := @parameter1: java.lang.Iterable;

        z0 := @parameter2: boolean;

        $r2 = staticinvoke <org.apache.commons.collections4.ComparatorUtils: java.util.Comparator naturalComparator()>();

        $r3 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.List collate(java.lang.Iterable,java.lang.Iterable,java.util.Comparator,boolean)>(r0, r1, $r2, z0);

        return $r3;
    }

    public static java.util.List collate(java.lang.Iterable, java.lang.Iterable, java.util.Comparator)
    {
        java.lang.Iterable r0, r1;
        java.util.Comparator r2;
        java.util.List $r3;

        r0 := @parameter0: java.lang.Iterable;

        r1 := @parameter1: java.lang.Iterable;

        r2 := @parameter2: java.util.Comparator;

        $r3 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.List collate(java.lang.Iterable,java.lang.Iterable,java.util.Comparator,boolean)>(r0, r1, r2, 1);

        return $r3;
    }

    public static java.util.List collate(java.lang.Iterable, java.lang.Iterable, java.util.Comparator, boolean)
    {
        java.lang.Iterable r0, r1;
        java.util.Comparator r2;
        boolean z0, $z1, $z2, $z4, $z5;
        java.lang.Object r5, r15;
        java.lang.NullPointerException $r6, $r11;
        java.util.ArrayList $r7;
        java.util.List $r8;
        java.util.Collection $r9, $r10;
        int $i1, $i2, $i3, $i4;
        org.apache.commons.collections4.iterators.CollatingIterator $r12;
        java.util.Iterator $r13, $r14;

        r0 := @parameter0: java.lang.Iterable;

        r1 := @parameter1: java.lang.Iterable;

        r2 := @parameter2: java.util.Comparator;

        z0 := @parameter3: boolean;

        if r0 == null goto label01;

        if r1 != null goto label02;

     label01:
        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("The collections must not be null");

        throw $r6;

     label02:
        if r2 != null goto label03;

        $r11 = new java.lang.NullPointerException;

        specialinvoke $r11.<java.lang.NullPointerException: void <init>(java.lang.String)>("The comparator must not be null");

        throw $r11;

     label03:
        $z1 = r0 instanceof java.util.Collection;

        if $z1 == 0 goto label04;

        $z5 = r1 instanceof java.util.Collection;

        if $z5 == 0 goto label04;

        $r9 = (java.util.Collection) r0;

        $i1 = interfaceinvoke $r9.<java.util.Collection: int size()>();

        $r10 = (java.util.Collection) r1;

        $i2 = interfaceinvoke $r10.<java.util.Collection: int size()>();

        $i3 = $i1 + $i2;

        $i4 = staticinvoke <java.lang.Math: int max(int,int)>(1, $i3);

        goto label05;

     label04:
        $i4 = 10;

     label05:
        $r12 = new org.apache.commons.collections4.iterators.CollatingIterator;

        $r13 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r14 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

        specialinvoke $r12.<org.apache.commons.collections4.iterators.CollatingIterator: void <init>(java.util.Comparator,java.util.Iterator,java.util.Iterator)>(r2, $r13, $r14);

        if z0 == 0 goto label06;

        $r8 = staticinvoke <org.apache.commons.collections4.IteratorUtils: java.util.List toList(java.util.Iterator,int)>($r12, $i4);

        return $r8;

     label06:
        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>(int)>($i4);

        r15 = null;

     label07:
        $z2 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label10;

        r5 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        if r15 == null goto label08;

        $z4 = virtualinvoke r15.<java.lang.Object: boolean equals(java.lang.Object)>(r5);

        if $z4 != 0 goto label09;

     label08:
        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>(r5);

     label09:
        r15 = r5;

        goto label07;

     label10:
        virtualinvoke $r7.<java.util.ArrayList: void trimToSize()>();

        return $r7;
    }

    public static java.util.Collection permutations(java.util.Collection)
    {
        java.util.Collection r0;
        org.apache.commons.collections4.iterators.PermutationIterator $r3;
        java.util.ArrayList $r4;
        boolean $z0;
        java.util.List $r5;

        r0 := @parameter0: java.util.Collection;

        $r3 = new org.apache.commons.collections4.iterators.PermutationIterator;

        specialinvoke $r3.<org.apache.commons.collections4.iterators.PermutationIterator: void <init>(java.util.Collection)>(r0);

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

     label1:
        $z0 = virtualinvoke $r3.<org.apache.commons.collections4.iterators.PermutationIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = virtualinvoke $r3.<org.apache.commons.collections4.iterators.PermutationIterator: java.util.List next()>();

        interfaceinvoke $r4.<java.util.Collection: boolean add(java.lang.Object)>($r5);

        goto label1;

     label2:
        return $r4;
    }

    public static java.util.Collection retainAll(java.util.Collection, java.util.Collection)
    {
        java.util.Collection r0, r1;
        java.util.List $r2;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.util.Collection;

        $r2 = staticinvoke <org.apache.commons.collections4.ListUtils: java.util.List retainAll(java.util.Collection,java.util.Collection)>(r0, r1);

        return $r2;
    }

    public static java.util.Collection retainAll(java.lang.Iterable, java.lang.Iterable, org.apache.commons.collections4.Equator)
    {
        java.lang.Iterable r0, r1;
        org.apache.commons.collections4.Equator r2;
        java.util.Set r4;
        java.util.Iterator r6;
        java.lang.Object r7;
        org.apache.commons.collections4.CollectionUtils$2 $r8;
        java.util.HashSet $r9;
        java.util.Collection $r10;
        java.util.ArrayList $r11;
        boolean $z0, $z1;
        org.apache.commons.collections4.CollectionUtils$EquatorWrapper $r12;

        r0 := @parameter0: java.lang.Iterable;

        r1 := @parameter1: java.lang.Iterable;

        r2 := @parameter2: org.apache.commons.collections4.Equator;

        $r8 = new org.apache.commons.collections4.CollectionUtils$2;

        specialinvoke $r8.<org.apache.commons.collections4.CollectionUtils$2: void <init>(org.apache.commons.collections4.Equator)>(r2);

        $r9 = new java.util.HashSet;

        specialinvoke $r9.<java.util.HashSet: void <init>()>();

        $r10 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection collect(java.lang.Iterable,org.apache.commons.collections4.Transformer,java.util.Collection)>(r1, $r8, $r9);

        r4 = (java.util.Set) $r10;

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        r6 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        $r12 = new org.apache.commons.collections4.CollectionUtils$EquatorWrapper;

        specialinvoke $r12.<org.apache.commons.collections4.CollectionUtils$EquatorWrapper: void <init>(org.apache.commons.collections4.Equator,java.lang.Object)>(r2, r7);

        $z1 = interfaceinvoke r4.<java.util.Set: boolean contains(java.lang.Object)>($r12);

        if $z1 == 0 goto label2;

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>(r7);

     label2:
        goto label1;

     label3:
        return $r11;
    }

    public static java.util.Collection removeAll(java.util.Collection, java.util.Collection)
    {
        java.util.Collection r0, r1;
        java.util.List $r2;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.util.Collection;

        $r2 = staticinvoke <org.apache.commons.collections4.ListUtils: java.util.List removeAll(java.util.Collection,java.util.Collection)>(r0, r1);

        return $r2;
    }

    public static java.util.Collection removeAll(java.lang.Iterable, java.lang.Iterable, org.apache.commons.collections4.Equator)
    {
        java.lang.Iterable r0, r1;
        org.apache.commons.collections4.Equator r2;
        java.util.Set r4;
        java.util.Iterator r6;
        java.lang.Object r7;
        org.apache.commons.collections4.CollectionUtils$3 $r8;
        java.util.HashSet $r9;
        java.util.Collection $r10;
        java.util.ArrayList $r11;
        boolean $z0, $z1;
        org.apache.commons.collections4.CollectionUtils$EquatorWrapper $r12;

        r0 := @parameter0: java.lang.Iterable;

        r1 := @parameter1: java.lang.Iterable;

        r2 := @parameter2: org.apache.commons.collections4.Equator;

        $r8 = new org.apache.commons.collections4.CollectionUtils$3;

        specialinvoke $r8.<org.apache.commons.collections4.CollectionUtils$3: void <init>(org.apache.commons.collections4.Equator)>(r2);

        $r9 = new java.util.HashSet;

        specialinvoke $r9.<java.util.HashSet: void <init>()>();

        $r10 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection collect(java.lang.Iterable,org.apache.commons.collections4.Transformer,java.util.Collection)>(r1, $r8, $r9);

        r4 = (java.util.Set) $r10;

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        r6 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        $r12 = new org.apache.commons.collections4.CollectionUtils$EquatorWrapper;

        specialinvoke $r12.<org.apache.commons.collections4.CollectionUtils$EquatorWrapper: void <init>(org.apache.commons.collections4.Equator,java.lang.Object)>(r2, r7);

        $z1 = interfaceinvoke r4.<java.util.Set: boolean contains(java.lang.Object)>($r12);

        if $z1 != 0 goto label2;

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>(r7);

     label2:
        goto label1;

     label3:
        return $r11;
    }

    public static java.util.Collection synchronizedCollection(java.util.Collection)
    {
        java.util.Collection r0;
        org.apache.commons.collections4.collection.SynchronizedCollection $r1;

        r0 := @parameter0: java.util.Collection;

        $r1 = staticinvoke <org.apache.commons.collections4.collection.SynchronizedCollection: org.apache.commons.collections4.collection.SynchronizedCollection synchronizedCollection(java.util.Collection)>(r0);

        return $r1;
    }

    public static java.util.Collection unmodifiableCollection(java.util.Collection)
    {
        java.util.Collection r0, $r1;

        r0 := @parameter0: java.util.Collection;

        $r1 = staticinvoke <org.apache.commons.collections4.collection.UnmodifiableCollection: java.util.Collection unmodifiableCollection(java.util.Collection)>(r0);

        return $r1;
    }

    public static java.util.Collection predicatedCollection(java.util.Collection, org.apache.commons.collections4.Predicate)
    {
        java.util.Collection r0;
        org.apache.commons.collections4.Predicate r1;
        org.apache.commons.collections4.collection.PredicatedCollection $r2;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: org.apache.commons.collections4.Predicate;

        $r2 = staticinvoke <org.apache.commons.collections4.collection.PredicatedCollection: org.apache.commons.collections4.collection.PredicatedCollection predicatedCollection(java.util.Collection,org.apache.commons.collections4.Predicate)>(r0, r1);

        return $r2;
    }

    public static java.util.Collection transformingCollection(java.util.Collection, org.apache.commons.collections4.Transformer)
    {
        java.util.Collection r0;
        org.apache.commons.collections4.Transformer r1;
        org.apache.commons.collections4.collection.TransformedCollection $r2;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: org.apache.commons.collections4.Transformer;

        $r2 = staticinvoke <org.apache.commons.collections4.collection.TransformedCollection: org.apache.commons.collections4.collection.TransformedCollection transformingCollection(java.util.Collection,org.apache.commons.collections4.Transformer)>(r0, r1);

        return $r2;
    }

    public static java.lang.Object extractSingleton(java.util.Collection)
    {
        java.util.Collection r0;
        int $i0;
        java.util.Iterator $r1;
        java.lang.Object $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.NullPointerException $r4;

        r0 := @parameter0: java.util.Collection;

        if r0 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("Collection must not be null.");

        throw $r4;

     label1:
        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        if $i0 == 1 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can extract singleton only when collection size == 1");

        throw $r3;

     label2:
        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        return $r2;
    }

    static void <clinit>()
    {
        java.util.List $r0;

        $r0 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        <org.apache.commons.collections4.CollectionUtils: java.util.Collection EMPTY_COLLECTION> = $r0;

        return;
    }
}
