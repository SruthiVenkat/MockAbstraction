public class org.apache.commons.collections4.map.PassiveExpiringMapTest extends org.apache.commons.collections4.map.AbstractMapTest
{

    public static junit.framework.Test suite()
    {
        junit.framework.TestSuite $r0;

        $r0 = staticinvoke <org.apache.commons.collections4.BulkTest: junit.framework.TestSuite makeSuite(java.lang.Class)>(class "Lorg/apache/commons/collections4/map/PassiveExpiringMapTest;");

        return $r0;
    }

    public void <init>(java.lang.String)
    {
        org.apache.commons.collections4.map.PassiveExpiringMapTest r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.collections4.map.PassiveExpiringMapTest;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.collections4.map.AbstractMapTest: void <init>(java.lang.String)>(r1);

        return;
    }

    public java.lang.String getCompatibilityVersion()
    {
        org.apache.commons.collections4.map.PassiveExpiringMapTest r0;

        r0 := @this: org.apache.commons.collections4.map.PassiveExpiringMapTest;

        return "4";
    }

    private java.util.Map makeDecoratedTestMap()
    {
        org.apache.commons.collections4.map.PassiveExpiringMapTest r0;
        java.util.HashMap $r2;
        java.lang.Integer $r3, $r5, $r7, $r9, $r11, $r13;
        org.apache.commons.collections4.map.PassiveExpiringMap $r15;
        org.apache.commons.collections4.map.PassiveExpiringMapTest$TestExpirationPolicy $r16;

        r0 := @this: org.apache.commons.collections4.map.PassiveExpiringMapTest;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, "one");

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, "two");

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, "three");

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, "four");

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, "five");

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, "six");

        $r15 = new org.apache.commons.collections4.map.PassiveExpiringMap;

        $r16 = new org.apache.commons.collections4.map.PassiveExpiringMapTest$TestExpirationPolicy;

        specialinvoke $r16.<org.apache.commons.collections4.map.PassiveExpiringMapTest$TestExpirationPolicy: void <init>(org.apache.commons.collections4.map.PassiveExpiringMapTest$1)>(null);

        specialinvoke $r15.<org.apache.commons.collections4.map.PassiveExpiringMap: void <init>(org.apache.commons.collections4.map.PassiveExpiringMap$ExpirationPolicy,java.util.Map)>($r16, $r2);

        return $r15;
    }

    public java.util.Map makeObject()
    {
        org.apache.commons.collections4.map.PassiveExpiringMapTest r0;
        org.apache.commons.collections4.map.PassiveExpiringMap $r1;

        r0 := @this: org.apache.commons.collections4.map.PassiveExpiringMapTest;

        $r1 = new org.apache.commons.collections4.map.PassiveExpiringMap;

        specialinvoke $r1.<org.apache.commons.collections4.map.PassiveExpiringMap: void <init>()>();

        return $r1;
    }

    private java.util.Map makeTestMap()
    {
        org.apache.commons.collections4.map.PassiveExpiringMapTest r0;
        org.apache.commons.collections4.map.PassiveExpiringMap $r2;
        org.apache.commons.collections4.map.PassiveExpiringMapTest$TestExpirationPolicy $r3;
        java.lang.Integer $r4, $r6, $r8, $r10, $r12, $r14;

        r0 := @this: org.apache.commons.collections4.map.PassiveExpiringMapTest;

        $r2 = new org.apache.commons.collections4.map.PassiveExpiringMap;

        $r3 = new org.apache.commons.collections4.map.PassiveExpiringMapTest$TestExpirationPolicy;

        specialinvoke $r3.<org.apache.commons.collections4.map.PassiveExpiringMapTest$TestExpirationPolicy: void <init>(org.apache.commons.collections4.map.PassiveExpiringMapTest$1)>(null);

        specialinvoke $r2.<org.apache.commons.collections4.map.PassiveExpiringMap: void <init>(org.apache.commons.collections4.map.PassiveExpiringMap$ExpirationPolicy)>($r3);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, "one");

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, "two");

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, "three");

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, "four");

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, "five");

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, "six");

        return $r2;
    }

    public void testConstructors()
    {
        org.apache.commons.collections4.map.PassiveExpiringMapTest r0;
        org.apache.commons.collections4.map.PassiveExpiringMap $r1, $r2, $r3;
        java.lang.NullPointerException $r4, $r5, $r6;

        r0 := @this: org.apache.commons.collections4.map.PassiveExpiringMapTest;

     label01:
        $r1 = new org.apache.commons.collections4.map.PassiveExpiringMap;

        specialinvoke $r1.<org.apache.commons.collections4.map.PassiveExpiringMap: void <init>(java.util.Map)>(null);

        staticinvoke <org.apache.commons.collections4.map.PassiveExpiringMapTest: void fail(java.lang.String)>("constructor - exception should have been thrown.");

     label02:
        goto label04;

     label03:
        $r5 := @caughtexception;

     label04:
        $r2 = new org.apache.commons.collections4.map.PassiveExpiringMap;

        specialinvoke $r2.<org.apache.commons.collections4.map.PassiveExpiringMap: void <init>(org.apache.commons.collections4.map.PassiveExpiringMap$ExpirationPolicy)>(null);

        staticinvoke <org.apache.commons.collections4.map.PassiveExpiringMapTest: void fail(java.lang.String)>("constructor - exception should have been thrown.");

     label05:
        goto label07;

     label06:
        $r4 := @caughtexception;

     label07:
        $r3 = new org.apache.commons.collections4.map.PassiveExpiringMap;

        specialinvoke $r3.<org.apache.commons.collections4.map.PassiveExpiringMap: void <init>(long,java.util.concurrent.TimeUnit)>(10L, null);

        staticinvoke <org.apache.commons.collections4.map.PassiveExpiringMapTest: void fail(java.lang.String)>("constructor - exception should have been thrown.");

     label08:
        goto label10;

     label09:
        $r6 := @caughtexception;

     label10:
        return;

        catch java.lang.NullPointerException from label01 to label02 with label03;
        catch java.lang.NullPointerException from label04 to label05 with label06;
        catch java.lang.NullPointerException from label07 to label08 with label09;
    }

    public void testContainsKey()
    {
        org.apache.commons.collections4.map.PassiveExpiringMapTest r0;
        java.util.Map r1;
        java.lang.Integer $r2, $r3, $r4, $r5, $r6, $r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @this: org.apache.commons.collections4.map.PassiveExpiringMapTest;

        r1 = specialinvoke r0.<org.apache.commons.collections4.map.PassiveExpiringMapTest: java.util.Map makeTestMap()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $z0 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r2);

        staticinvoke <org.apache.commons.collections4.map.PassiveExpiringMapTest: void assertFalse(boolean)>($z0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $z1 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r3);

        staticinvoke <org.apache.commons.collections4.map.PassiveExpiringMapTest: void assertFalse(boolean)>($z1);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $z2 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r4);

        staticinvoke <org.apache.commons.collections4.map.PassiveExpiringMapTest: void assertFalse(boolean)>($z2);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $z3 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r5);

        staticinvoke <org.apache.commons.collections4.map.PassiveExpiringMapTest: void assertTrue(boolean)>($z3);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $z4 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r6);

        staticinvoke <org.apache.commons.collections4.map.PassiveExpiringMapTest: void assertTrue(boolean)>($z4);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        $z5 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r7);

        staticinvoke <org.apache.commons.collections4.map.PassiveExpiringMapTest: void assertTrue(boolean)>($z5);

        return;
    }

    public void testContainsValue()
    {
        org.apache.commons.collections4.map.PassiveExpiringMapTest r0;
        java.util.Map r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @this: org.apache.commons.collections4.map.PassiveExpiringMapTest;

        r1 = specialinvoke r0.<org.apache.commons.collections4.map.PassiveExpiringMapTest: java.util.Map makeTestMap()>();

        $z0 = interfaceinvoke r1.<java.util.Map: boolean containsValue(java.lang.Object)>("one");

        staticinvoke <org.apache.commons.collections4.map.PassiveExpiringMapTest: void assertFalse(boolean)>($z0);

        $z1 = interfaceinvoke r1.<java.util.Map: boolean containsValue(java.lang.Object)>("three");

        staticinvoke <org.apache.commons.collections4.map.PassiveExpiringMapTest: void assertFalse(boolean)>($z1);

        $z2 = interfaceinvoke r1.<java.util.Map: boolean containsValue(java.lang.Object)>("five");

        staticinvoke <org.apache.commons.collections4.map.PassiveExpiringMapTest: void assertFalse(boolean)>($z2);

        $z3 = interfaceinvoke r1.<java.util.Map: boolean containsValue(java.lang.Object)>("two");

        staticinvoke <org.apache.commons.collections4.map.PassiveExpiringMapTest: void assertTrue(boolean)>($z3);

        $z4 = interfaceinvoke r1.<java.util.Map: boolean containsValue(java.lang.Object)>("four");

        staticinvoke <org.apache.commons.collections4.map.PassiveExpiringMapTest: void assertTrue(boolean)>($z4);

        $z5 = interfaceinvoke r1.<java.util.Map: boolean containsValue(java.lang.Object)>("six");

        staticinvoke <org.apache.commons.collections4.map.PassiveExpiringMapTest: void assertTrue(boolean)>($z5);

        return;
    }

    public void testDecoratedMap()
    {
        org.apache.commons.collections4.map.PassiveExpiringMapTest r0;
        java.util.Map r1;
        int $i0, $i1, $i2, $i3;
        java.lang.Integer $r2, $r5, $r8, $r10, $r13, $r15, $r17, $r19, $r22, $r25, $r27, $r29;
        java.lang.Object $r3, $r6, $r11, $r14, $r16, $r20, $r23, $r28, $r30;
        java.lang.String $r4, $r7, $r12, $r21, $r24, $r31;

        r0 := @this: org.apache.commons.collections4.map.PassiveExpiringMapTest;

        r1 = specialinvoke r0.<org.apache.commons.collections4.map.PassiveExpiringMapTest: java.util.Map makeDecoratedTestMap()>();

        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        staticinvoke <org.apache.commons.collections4.map.PassiveExpiringMapTest: void assertEquals(int,int)>(6, $i0);

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r3 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r4 = (java.lang.String) $r3;

        staticinvoke <org.apache.commons.collections4.map.PassiveExpiringMapTest: void assertEquals(java.lang.String,java.lang.String)>("one", $r4);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r6 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        $r7 = (java.lang.String) $r6;

        staticinvoke <org.apache.commons.collections4.map.PassiveExpiringMapTest: void assertEquals(java.lang.String,java.lang.String)>("two", $r7);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        interfaceinvoke r1.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r8);

        $i1 = interfaceinvoke r1.<java.util.Map: int size()>();

        staticinvoke <org.apache.commons.collections4.map.PassiveExpiringMapTest: void assertEquals(int,int)>(5, $i1);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r11 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r10);

        $r12 = (java.lang.String) $r11;

        staticinvoke <org.apache.commons.collections4.map.PassiveExpiringMapTest: void assertEquals(java.lang.String,java.lang.String)>("one", $r12);

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r14 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r13);

        staticinvoke <org.apache.commons.collections4.map.PassiveExpiringMapTest: void assertNull(java.lang.Object)>($r14);

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r16 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r15);

        staticinvoke <org.apache.commons.collections4.map.PassiveExpiringMapTest: void assertNull(java.lang.Object)>($r16);

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, "two");

        $i2 = interfaceinvoke r1.<java.util.Map: int size()>();

        staticinvoke <org.apache.commons.collections4.map.PassiveExpiringMapTest: void assertEquals(int,int)>(6, $i2);

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r20 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r19);

        $r21 = (java.lang.String) $r20;

        staticinvoke <org.apache.commons.collections4.map.PassiveExpiringMapTest: void assertEquals(java.lang.String,java.lang.String)>("one", $r21);

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r23 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r22);

        $r24 = (java.lang.String) $r23;

        staticinvoke <org.apache.commons.collections4.map.PassiveExpiringMapTest: void assertEquals(java.lang.String,java.lang.String)>("two", $r24);

        $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r25, "one-one");

        $i3 = interfaceinvoke r1.<java.util.Map: int size()>();

        staticinvoke <org.apache.commons.collections4.map.PassiveExpiringMapTest: void assertEquals(int,int)>(5, $i3);

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r28 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r27);

        staticinvoke <org.apache.commons.collections4.map.PassiveExpiringMapTest: void assertNull(java.lang.Object)>($r28);

        $r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r30 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r29);

        $r31 = (java.lang.String) $r30;

        staticinvoke <org.apache.commons.collections4.map.PassiveExpiringMapTest: void assertEquals(java.lang.String,java.lang.String)>("two", $r31);

        return;
    }

    public void testEntrySet()
    {
        org.apache.commons.collections4.map.PassiveExpiringMapTest r0;
        java.util.Map r1;
        java.util.Set $r2;
        int $i0;

        r0 := @this: org.apache.commons.collections4.map.PassiveExpiringMapTest;

        r1 = specialinvoke r0.<org.apache.commons.collections4.map.PassiveExpiringMapTest: java.util.Map makeTestMap()>();

        $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        $i0 = interfaceinvoke $r2.<java.util.Set: int size()>();

        staticinvoke <org.apache.commons.collections4.map.PassiveExpiringMapTest: void assertEquals(int,int)>(3, $i0);

        return;
    }

    public void testExpiration()
    {
        org.apache.commons.collections4.map.PassiveExpiringMapTest r0;
        org.apache.commons.collections4.map.PassiveExpiringMap $r1, $r2, $r3, $r5;
        org.apache.commons.collections4.map.PassiveExpiringMap$ConstantTimeToLiveExpirationPolicy $r4, $r6;
        java.util.concurrent.TimeUnit $r7;

        r0 := @this: org.apache.commons.collections4.map.PassiveExpiringMapTest;

        $r1 = new org.apache.commons.collections4.map.PassiveExpiringMap;

        specialinvoke $r1.<org.apache.commons.collections4.map.PassiveExpiringMap: void <init>(long)>(500L);

        specialinvoke r0.<org.apache.commons.collections4.map.PassiveExpiringMapTest: void validateExpiration(java.util.Map,long)>($r1, 500L);

        $r2 = new org.apache.commons.collections4.map.PassiveExpiringMap;

        specialinvoke $r2.<org.apache.commons.collections4.map.PassiveExpiringMap: void <init>(long)>(1000L);

        specialinvoke r0.<org.apache.commons.collections4.map.PassiveExpiringMapTest: void validateExpiration(java.util.Map,long)>($r2, 1000L);

        $r3 = new org.apache.commons.collections4.map.PassiveExpiringMap;

        $r4 = new org.apache.commons.collections4.map.PassiveExpiringMap$ConstantTimeToLiveExpirationPolicy;

        specialinvoke $r4.<org.apache.commons.collections4.map.PassiveExpiringMap$ConstantTimeToLiveExpirationPolicy: void <init>(long)>(500L);

        specialinvoke $r3.<org.apache.commons.collections4.map.PassiveExpiringMap: void <init>(org.apache.commons.collections4.map.PassiveExpiringMap$ExpirationPolicy)>($r4);

        specialinvoke r0.<org.apache.commons.collections4.map.PassiveExpiringMapTest: void validateExpiration(java.util.Map,long)>($r3, 500L);

        $r5 = new org.apache.commons.collections4.map.PassiveExpiringMap;

        $r6 = new org.apache.commons.collections4.map.PassiveExpiringMap$ConstantTimeToLiveExpirationPolicy;

        $r7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        specialinvoke $r6.<org.apache.commons.collections4.map.PassiveExpiringMap$ConstantTimeToLiveExpirationPolicy: void <init>(long,java.util.concurrent.TimeUnit)>(1L, $r7);

        specialinvoke $r5.<org.apache.commons.collections4.map.PassiveExpiringMap: void <init>(org.apache.commons.collections4.map.PassiveExpiringMap$ExpirationPolicy)>($r6);

        specialinvoke r0.<org.apache.commons.collections4.map.PassiveExpiringMapTest: void validateExpiration(java.util.Map,long)>($r5, 1000L);

        return;
    }

    public void testGet()
    {
        org.apache.commons.collections4.map.PassiveExpiringMapTest r0;
        java.util.Map r1;
        java.lang.Integer $r2, $r4, $r7, $r9, $r12, $r14;
        java.lang.Object $r3, $r5, $r8, $r10, $r13, $r15;
        java.lang.String $r6, $r11, $r16;

        r0 := @this: org.apache.commons.collections4.map.PassiveExpiringMapTest;

        r1 = specialinvoke r0.<org.apache.commons.collections4.map.PassiveExpiringMapTest: java.util.Map makeTestMap()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r3 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        staticinvoke <org.apache.commons.collections4.map.PassiveExpiringMapTest: void assertNull(java.lang.Object)>($r3);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r5 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        $r6 = (java.lang.String) $r5;

        staticinvoke <org.apache.commons.collections4.map.PassiveExpiringMapTest: void assertEquals(java.lang.String,java.lang.String)>("two", $r6);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r8 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        staticinvoke <org.apache.commons.collections4.map.PassiveExpiringMapTest: void assertNull(java.lang.Object)>($r8);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r10 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9);

        $r11 = (java.lang.String) $r10;

        staticinvoke <org.apache.commons.collections4.map.PassiveExpiringMapTest: void assertEquals(java.lang.String,java.lang.String)>("four", $r11);

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r13 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r12);

        staticinvoke <org.apache.commons.collections4.map.PassiveExpiringMapTest: void assertNull(java.lang.Object)>($r13);

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        $r15 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r14);

        $r16 = (java.lang.String) $r15;

        staticinvoke <org.apache.commons.collections4.map.PassiveExpiringMapTest: void assertEquals(java.lang.String,java.lang.String)>("six", $r16);

        return;
    }

    public void testIsEmpty()
    {
        org.apache.commons.collections4.map.PassiveExpiringMapTest r0;
        boolean $z0, $z1;
        java.lang.Integer $r1, $r3, $r5;
        java.util.Map r7, r8;

        r0 := @this: org.apache.commons.collections4.map.PassiveExpiringMapTest;

        r7 = specialinvoke r0.<org.apache.commons.collections4.map.PassiveExpiringMapTest: java.util.Map makeTestMap()>();

        $z0 = interfaceinvoke r7.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.apache.commons.collections4.map.PassiveExpiringMapTest: void assertFalse(boolean)>($z0);

        r8 = specialinvoke r0.<org.apache.commons.collections4.map.PassiveExpiringMapTest: java.util.Map makeTestMap()>();

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        interfaceinvoke r8.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r1);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        interfaceinvoke r8.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r3);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        interfaceinvoke r8.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r5);

        $z1 = interfaceinvoke r8.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.apache.commons.collections4.map.PassiveExpiringMapTest: void assertTrue(boolean)>($z1);

        return;
    }

    public void testKeySet()
    {
        org.apache.commons.collections4.map.PassiveExpiringMapTest r0;
        java.util.Map r1;
        java.util.Set $r2;
        int $i0;

        r0 := @this: org.apache.commons.collections4.map.PassiveExpiringMapTest;

        r1 = specialinvoke r0.<org.apache.commons.collections4.map.PassiveExpiringMapTest: java.util.Map makeTestMap()>();

        $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set keySet()>();

        $i0 = interfaceinvoke $r2.<java.util.Set: int size()>();

        staticinvoke <org.apache.commons.collections4.map.PassiveExpiringMapTest: void assertEquals(int,int)>(3, $i0);

        return;
    }

    public void testPut()
    {
        org.apache.commons.collections4.map.PassiveExpiringMapTest r0;
        java.util.Map r1;
        java.lang.Integer $r2, $r4, $r7, $r9, $r12, $r14;
        java.lang.Object $r3, $r5, $r8, $r10, $r13, $r15;
        java.lang.String $r6, $r11, $r16;

        r0 := @this: org.apache.commons.collections4.map.PassiveExpiringMapTest;

        r1 = specialinvoke r0.<org.apache.commons.collections4.map.PassiveExpiringMapTest: java.util.Map makeTestMap()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r3 = interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, "ONE");

        staticinvoke <org.apache.commons.collections4.map.PassiveExpiringMapTest: void assertNull(java.lang.Object)>($r3);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r5 = interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, "TWO");

        $r6 = (java.lang.String) $r5;

        staticinvoke <org.apache.commons.collections4.map.PassiveExpiringMapTest: void assertEquals(java.lang.String,java.lang.String)>("two", $r6);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r8 = interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, "THREE");

        staticinvoke <org.apache.commons.collections4.map.PassiveExpiringMapTest: void assertNull(java.lang.Object)>($r8);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r10 = interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, "FOUR");

        $r11 = (java.lang.String) $r10;

        staticinvoke <org.apache.commons.collections4.map.PassiveExpiringMapTest: void assertEquals(java.lang.String,java.lang.String)>("four", $r11);

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r13 = interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, "FIVE");

        staticinvoke <org.apache.commons.collections4.map.PassiveExpiringMapTest: void assertNull(java.lang.Object)>($r13);

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        $r15 = interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, "SIX");

        $r16 = (java.lang.String) $r15;

        staticinvoke <org.apache.commons.collections4.map.PassiveExpiringMapTest: void assertEquals(java.lang.String,java.lang.String)>("six", $r16);

        return;
    }

    public void testSize()
    {
        org.apache.commons.collections4.map.PassiveExpiringMapTest r0;
        java.util.Map r1;
        int $i0;

        r0 := @this: org.apache.commons.collections4.map.PassiveExpiringMapTest;

        r1 = specialinvoke r0.<org.apache.commons.collections4.map.PassiveExpiringMapTest: java.util.Map makeTestMap()>();

        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        staticinvoke <org.apache.commons.collections4.map.PassiveExpiringMapTest: void assertEquals(int,int)>(3, $i0);

        return;
    }

    public void testValues()
    {
        org.apache.commons.collections4.map.PassiveExpiringMapTest r0;
        java.util.Map r1;
        java.util.Collection $r2;
        int $i0;

        r0 := @this: org.apache.commons.collections4.map.PassiveExpiringMapTest;

        r1 = specialinvoke r0.<org.apache.commons.collections4.map.PassiveExpiringMapTest: java.util.Map makeTestMap()>();

        $r2 = interfaceinvoke r1.<java.util.Map: java.util.Collection values()>();

        $i0 = interfaceinvoke $r2.<java.util.Collection: int size()>();

        staticinvoke <org.apache.commons.collections4.map.PassiveExpiringMapTest: void assertEquals(int,int)>(3, $i0);

        return;
    }

    public void testZeroTimeToLive()
    {
        org.apache.commons.collections4.map.PassiveExpiringMapTest r0;
        org.apache.commons.collections4.map.PassiveExpiringMap $r2;
        java.lang.Object $r4;

        r0 := @this: org.apache.commons.collections4.map.PassiveExpiringMapTest;

        $r2 = new org.apache.commons.collections4.map.PassiveExpiringMap;

        specialinvoke $r2.<org.apache.commons.collections4.map.PassiveExpiringMap: void <init>(long)>(0L);

        virtualinvoke $r2.<org.apache.commons.collections4.map.PassiveExpiringMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("a", "b");

        $r4 = virtualinvoke $r2.<org.apache.commons.collections4.map.PassiveExpiringMap: java.lang.Object get(java.lang.Object)>("a");

        staticinvoke <org.apache.commons.collections4.map.PassiveExpiringMapTest: void assertNull(java.lang.Object)>($r4);

        return;
    }

    private void validateExpiration(java.util.Map, long)
    {
        org.apache.commons.collections4.map.PassiveExpiringMapTest r0;
        java.util.Map r1;
        long l0, $l1;
        java.lang.Object $r4, $r5;
        java.lang.InterruptedException $r6;

        r0 := @this: org.apache.commons.collections4.map.PassiveExpiringMapTest;

        r1 := @parameter0: java.util.Map;

        l0 := @parameter1: long;

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("a", "b");

        $r4 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("a");

        staticinvoke <org.apache.commons.collections4.map.PassiveExpiringMapTest: void assertNotNull(java.lang.Object)>($r4);

     label1:
        $l1 = 2L * l0;

        staticinvoke <java.lang.Thread: void sleep(long)>($l1);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        staticinvoke <org.apache.commons.collections4.map.PassiveExpiringMapTest: void fail()>();

     label4:
        $r5 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("a");

        staticinvoke <org.apache.commons.collections4.map.PassiveExpiringMapTest: void assertNull(java.lang.Object)>($r5);

        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    public volatile java.lang.Object makeObject()
    {
        org.apache.commons.collections4.map.PassiveExpiringMapTest r0;
        java.util.Map $r1;

        r0 := @this: org.apache.commons.collections4.map.PassiveExpiringMapTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.map.PassiveExpiringMapTest: java.util.Map makeObject()>();

        return $r1;
    }
}
