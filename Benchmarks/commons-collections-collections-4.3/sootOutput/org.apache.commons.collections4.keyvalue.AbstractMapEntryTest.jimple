public abstract class org.apache.commons.collections4.keyvalue.AbstractMapEntryTest extends java.lang.Object
{
    protected final java.lang.String key;
    protected final java.lang.String value;

    public void <init>()
    {
        org.apache.commons.collections4.keyvalue.AbstractMapEntryTest r0;

        r0 := @this: org.apache.commons.collections4.keyvalue.AbstractMapEntryTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.collections4.keyvalue.AbstractMapEntryTest: java.lang.String value> = "duke";

        r0.<org.apache.commons.collections4.keyvalue.AbstractMapEntryTest: java.lang.String key> = "name";

        r0.<org.apache.commons.collections4.keyvalue.AbstractMapEntryTest: java.lang.String key> = "name";

        r0.<org.apache.commons.collections4.keyvalue.AbstractMapEntryTest: java.lang.String value> = "duke";

        return;
    }

    public java.util.Map$Entry makeMapEntry()
    {
        org.apache.commons.collections4.keyvalue.AbstractMapEntryTest r0;
        java.util.Map$Entry $r1;

        r0 := @this: org.apache.commons.collections4.keyvalue.AbstractMapEntryTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.keyvalue.AbstractMapEntryTest: java.util.Map$Entry makeMapEntry(java.lang.Object,java.lang.Object)>(null, null);

        return $r1;
    }

    public abstract java.util.Map$Entry makeMapEntry(java.lang.Object, java.lang.Object);

    public java.util.Map$Entry makeKnownMapEntry()
    {
        org.apache.commons.collections4.keyvalue.AbstractMapEntryTest r0;
        java.util.Map$Entry $r1;

        r0 := @this: org.apache.commons.collections4.keyvalue.AbstractMapEntryTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.keyvalue.AbstractMapEntryTest: java.util.Map$Entry makeKnownMapEntry(java.lang.Object,java.lang.Object)>(null, null);

        return $r1;
    }

    public java.util.Map$Entry makeKnownMapEntry(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections4.keyvalue.AbstractMapEntryTest r0;
        java.lang.Object r1, r2, $r9;
        java.util.Map$Entry r4;
        java.util.HashMap $r5;
        java.util.Set $r7;
        java.util.Iterator $r8;

        r0 := @this: org.apache.commons.collections4.keyvalue.AbstractMapEntryTest;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>(int)>(1);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        $r7 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>();

        $r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r9;

        return r4;
    }

    public void testAccessorsAndMutators()
    {
        org.apache.commons.collections4.keyvalue.AbstractMapEntryTest r0;
        java.lang.Object $r1, $r3, $r4, $r6;
        java.util.Map$Entry r7, r8;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.commons.collections4.keyvalue.AbstractMapEntryTest;

        r7 = virtualinvoke r0.<org.apache.commons.collections4.keyvalue.AbstractMapEntryTest: java.util.Map$Entry makeMapEntry(java.lang.Object,java.lang.Object)>("name", "duke");

        $r1 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        if $r1 != "name" goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>("duke");

        $r3 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        if $r3 != "duke" goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        r8 = virtualinvoke r0.<org.apache.commons.collections4.keyvalue.AbstractMapEntryTest: java.util.Map$Entry makeMapEntry(java.lang.Object,java.lang.Object)>(null, null);

        $r4 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getKey()>();

        if $r4 != null goto label5;

        $z2 = 1;

        goto label6;

     label5:
        $z2 = 0;

     label6:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>(null);

        $r6 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getValue()>();

        if $r6 != null goto label7;

        $z3 = 1;

        goto label8;

     label7:
        $z3 = 0;

     label8:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        return;
    }

    public void testSelfReferenceHandling()
    {
        org.apache.commons.collections4.keyvalue.AbstractMapEntryTest r0;
        java.util.Map$Entry r1;
        java.lang.IllegalArgumentException $r4;
        java.lang.Object $r5, $r6;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.keyvalue.AbstractMapEntryTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.keyvalue.AbstractMapEntryTest: java.util.Map$Entry makeMapEntry()>();

     label1:
        interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>(r1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should throw an IllegalArgumentException");

     label2:
        goto label6;

     label3:
        $r4 := @caughtexception;

        $r5 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        if $r5 != null goto label4;

        $r6 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getValue()>();

        if $r6 != null goto label4;

        $z0 = 1;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

     label6:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public abstract void testConstructors();

    public void testEqualsAndHashCode()
    {
        org.apache.commons.collections4.keyvalue.AbstractMapEntryTest r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        int $i0, $i1, $i2, $i3;
        java.util.Map$Entry r1, r2, r3, r4;

        r0 := @this: org.apache.commons.collections4.keyvalue.AbstractMapEntryTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.keyvalue.AbstractMapEntryTest: java.util.Map$Entry makeMapEntry(java.lang.Object,java.lang.Object)>("name", "duke");

        r2 = virtualinvoke r0.<org.apache.commons.collections4.keyvalue.AbstractMapEntryTest: java.util.Map$Entry makeKnownMapEntry(java.lang.Object,java.lang.Object)>("name", "duke");

        $z0 = interfaceinvoke r1.<java.util.Map$Entry: boolean equals(java.lang.Object)>(r1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $z1 = interfaceinvoke r2.<java.util.Map$Entry: boolean equals(java.lang.Object)>(r1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $z2 = interfaceinvoke r1.<java.util.Map$Entry: boolean equals(java.lang.Object)>(r2);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $i0 = interfaceinvoke r1.<java.util.Map$Entry: int hashCode()>();

        $i1 = interfaceinvoke r2.<java.util.Map$Entry: int hashCode()>();

        if $i0 != $i1 goto label1;

        $z6 = 1;

        goto label2;

     label1:
        $z6 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        r3 = virtualinvoke r0.<org.apache.commons.collections4.keyvalue.AbstractMapEntryTest: java.util.Map$Entry makeMapEntry()>();

        r4 = virtualinvoke r0.<org.apache.commons.collections4.keyvalue.AbstractMapEntryTest: java.util.Map$Entry makeKnownMapEntry()>();

        $z3 = interfaceinvoke r3.<java.util.Map$Entry: boolean equals(java.lang.Object)>(r3);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        $z4 = interfaceinvoke r4.<java.util.Map$Entry: boolean equals(java.lang.Object)>(r3);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $z5 = interfaceinvoke r3.<java.util.Map$Entry: boolean equals(java.lang.Object)>(r4);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        $i2 = interfaceinvoke r3.<java.util.Map$Entry: int hashCode()>();

        $i3 = interfaceinvoke r4.<java.util.Map$Entry: int hashCode()>();

        if $i2 != $i3 goto label3;

        $z7 = 1;

        goto label4;

     label3:
        $z7 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

        return;
    }

    public void testToString()
    {
        org.apache.commons.collections4.keyvalue.AbstractMapEntryTest r0;
        java.lang.String $r1, $r8, $r9, $r16;
        java.lang.StringBuilder $r2, $r4, $r5, $r7, $r10, $r12, $r13, $r15;
        java.lang.Object $r3, $r6, $r11, $r14;
        boolean $z0, $z1;
        java.util.Map$Entry r17, r18;

        r0 := @this: org.apache.commons.collections4.keyvalue.AbstractMapEntryTest;

        r17 = virtualinvoke r0.<org.apache.commons.collections4.keyvalue.AbstractMapEntryTest: java.util.Map$Entry makeMapEntry(java.lang.Object,java.lang.Object)>("name", "duke");

        $r1 = virtualinvoke r17.<java.lang.Object: java.lang.String toString()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = interfaceinvoke r17.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r6 = interfaceinvoke r17.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        r18 = virtualinvoke r0.<org.apache.commons.collections4.keyvalue.AbstractMapEntryTest: java.util.Map$Entry makeMapEntry()>();

        $r9 = virtualinvoke r18.<java.lang.Object: java.lang.String toString()>();

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = interfaceinvoke r18.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r14 = interfaceinvoke r18.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        return;
    }
}
