public class org.apache.commons.collections4.trie.PatriciaTrieTest extends org.apache.commons.collections4.map.AbstractSortedMapTest
{

    public void <init>(java.lang.String)
    {
        org.apache.commons.collections4.trie.PatriciaTrieTest r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.collections4.trie.PatriciaTrieTest;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.collections4.map.AbstractSortedMapTest: void <init>(java.lang.String)>(r1);

        return;
    }

    public static junit.framework.Test suite()
    {
        junit.framework.TestSuite $r0;

        $r0 = staticinvoke <org.apache.commons.collections4.BulkTest: junit.framework.TestSuite makeSuite(java.lang.Class)>(class "Lorg/apache/commons/collections4/trie/PatriciaTrieTest;");

        return $r0;
    }

    public java.util.SortedMap makeObject()
    {
        org.apache.commons.collections4.trie.PatriciaTrieTest r0;
        org.apache.commons.collections4.trie.PatriciaTrie $r1;

        r0 := @this: org.apache.commons.collections4.trie.PatriciaTrieTest;

        $r1 = new org.apache.commons.collections4.trie.PatriciaTrie;

        specialinvoke $r1.<org.apache.commons.collections4.trie.PatriciaTrie: void <init>()>();

        return $r1;
    }

    public boolean isAllowNullKey()
    {
        org.apache.commons.collections4.trie.PatriciaTrieTest r0;

        r0 := @this: org.apache.commons.collections4.trie.PatriciaTrieTest;

        return 0;
    }

    public void testPrefixMap()
    {
        org.apache.commons.collections4.trie.PatriciaTrieTest r0;
        org.apache.commons.collections4.trie.PatriciaTrie $r3;
        java.lang.String[] $r4;
        int $i0, $i2, $i4, $i6, $i8, $i10, $i12, $i14, $i16, $i18, $i20, $i22, $i24, $i26, $i28, $i30, $i32, $i34, $i36, i38, i39;
        long $l1, $l3, $l5, $l7, $l9, $l11, $l13, $l15, $l17, $l19, $l21, $l23, $l25, $l27, $l29, $l31, $l33, $l35, $l37;
        java.lang.Object $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r30, $r31, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r42, $r43, $r44, $r45, $r46, $r47, $r49, $r50, $r52, $r53, $r54, $r55, $r56, $r57, $r58, $r59, $r60, $r61, $r62, $r63, $r65, $r66, $r67, $r68, $r69, $r70, $r71, $r74, $r75, $r76, $r77, $r79, $r80, $r81, $r83, $r84, $r86, $r87, $r91, $r92, $r93, $r94, $r96, $r97, $r99, $r100, $r101, $r103, $r104, $r105, $r106, $r107, $r109, r179, r181, r185, r187, r192, r194;
        java.util.Collection $r12, $r73, $r118, $r127, $r136;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22;
        java.util.Set $r21, $r32, $r41, $r51, $r64, $r78, $r82, $r85, $r88, $r102, $r108;
        java.lang.StringBuilder $r110, $r111, $r112, $r114, $r115, $r116, $r119, $r120, $r121, $r123, $r124, $r125, $r128, $r129, $r130, $r132, $r133, $r134;
        java.lang.String $r113, $r117, $r122, $r126, $r131, $r135, r146;
        java.util.NoSuchElementException $r138, $r139, $r141, $r142, $r143, $r144;
        java.util.ConcurrentModificationException $r140;
        java.util.SortedMap r147, r149, r152, r163, r165, r167, r169, r173, r174, r176, r178, r184, r190, r191;
        java.util.Iterator r148, r150, r151, r153, r156, r160, r164, r166, r168, r170, r171, r175, r177, r183, r189, r196;
        java.util.Map$Entry r154, r155, r157, r158, r159, r161, r162;

        r0 := @this: org.apache.commons.collections4.trie.PatriciaTrieTest;

        $r3 = new org.apache.commons.collections4.trie.PatriciaTrie;

        specialinvoke $r3.<org.apache.commons.collections4.trie.PatriciaTrie: void <init>()>();

        $r4 = newarray (java.lang.String)[19];

        $r4[0] = "";

        $r4[1] = "Albert";

        $r4[2] = "Xavier";

        $r4[3] = "XyZ";

        $r4[4] = "Anna";

        $r4[5] = "Alien";

        $r4[6] = "Alberto";

        $r4[7] = "Alberts";

        $r4[8] = "Allie";

        $r4[9] = "Alliese";

        $r4[10] = "Alabama";

        $r4[11] = "Banane";

        $r4[12] = "Blabla";

        $r4[13] = "Amber";

        $r4[14] = "Ammun";

        $r4[15] = "Akka";

        $r4[16] = "Akko";

        $r4[17] = "Albertoo";

        $r4[18] = "Amma";

        i38 = lengthof $r4;

        i39 = 0;

     label01:
        if i39 >= i38 goto label02;

        r146 = $r4[i39];

        virtualinvoke $r3.<org.apache.commons.collections4.trie.PatriciaTrie: java.lang.Object put(java.lang.Object,java.lang.Object)>(r146, r146);

        i39 = i39 + 1;

        goto label01;

     label02:
        r147 = virtualinvoke $r3.<org.apache.commons.collections4.trie.PatriciaTrie: java.util.SortedMap prefixMap(java.lang.Object)>("Al");

        $i0 = interfaceinvoke r147.<java.util.SortedMap: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(8L, $l1);

        $r5 = interfaceinvoke r147.<java.util.SortedMap: java.lang.Object firstKey()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Alabama", $r5);

        $r6 = interfaceinvoke r147.<java.util.SortedMap: java.lang.Object lastKey()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Alliese", $r6);

        $r7 = interfaceinvoke r147.<java.util.SortedMap: java.lang.Object get(java.lang.Object)>("Albertoo");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Albertoo", $r7);

        $r8 = virtualinvoke $r3.<org.apache.commons.collections4.trie.PatriciaTrie: java.lang.Object get(java.lang.Object)>("Xavier");

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r8);

        $r9 = interfaceinvoke r147.<java.util.SortedMap: java.lang.Object get(java.lang.Object)>("Xavier");

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r9);

        $r10 = virtualinvoke $r3.<org.apache.commons.collections4.trie.PatriciaTrie: java.lang.Object get(java.lang.Object)>("Alice");

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r10);

        $r11 = interfaceinvoke r147.<java.util.SortedMap: java.lang.Object get(java.lang.Object)>("Alice");

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r11);

        $r12 = interfaceinvoke r147.<java.util.SortedMap: java.util.Collection values()>();

        r148 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();

        $r13 = interfaceinvoke r148.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Alabama", $r13);

        $r14 = interfaceinvoke r148.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Albert", $r14);

        $r15 = interfaceinvoke r148.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Alberto", $r15);

        $r16 = interfaceinvoke r148.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Albertoo", $r16);

        $r17 = interfaceinvoke r148.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Alberts", $r17);

        $r18 = interfaceinvoke r148.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Alien", $r18);

        $r19 = interfaceinvoke r148.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Allie", $r19);

        $r20 = interfaceinvoke r148.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Alliese", $r20);

        $z0 = interfaceinvoke r148.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        r149 = virtualinvoke $r3.<org.apache.commons.collections4.trie.PatriciaTrie: java.util.SortedMap prefixMap(java.lang.Object)>("Albert");

        $r21 = interfaceinvoke r149.<java.util.SortedMap: java.util.Set keySet()>();

        r150 = interfaceinvoke $r21.<java.util.Set: java.util.Iterator iterator()>();

        $r22 = interfaceinvoke r150.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Albert", $r22);

        $r23 = interfaceinvoke r150.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Alberto", $r23);

        $r24 = interfaceinvoke r150.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Albertoo", $r24);

        $r25 = interfaceinvoke r150.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Alberts", $r25);

        $z1 = interfaceinvoke r150.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z1);

        $i2 = interfaceinvoke r149.<java.util.SortedMap: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l3);

        $r26 = interfaceinvoke r149.<java.util.SortedMap: java.lang.Object firstKey()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Albert", $r26);

        $r27 = interfaceinvoke r149.<java.util.SortedMap: java.lang.Object lastKey()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Alberts", $r27);

        $r28 = virtualinvoke $r3.<org.apache.commons.collections4.trie.PatriciaTrie: java.lang.Object get(java.lang.Object)>("Albertz");

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r28);

        interfaceinvoke r149.<java.util.SortedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("Albertz", "Albertz");

        $r30 = virtualinvoke $r3.<org.apache.commons.collections4.trie.PatriciaTrie: java.lang.Object get(java.lang.Object)>("Albertz");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Albertz", $r30);

        $i4 = interfaceinvoke r149.<java.util.SortedMap: int size()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(5L, $l5);

        $r31 = interfaceinvoke r149.<java.util.SortedMap: java.lang.Object lastKey()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Albertz", $r31);

        $r32 = interfaceinvoke r149.<java.util.SortedMap: java.util.Set keySet()>();

        r151 = interfaceinvoke $r32.<java.util.Set: java.util.Iterator iterator()>();

        $r33 = interfaceinvoke r151.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Albert", $r33);

        $r34 = interfaceinvoke r151.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Alberto", $r34);

        $r35 = interfaceinvoke r151.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Albertoo", $r35);

        $r36 = interfaceinvoke r151.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Alberts", $r36);

        $r37 = interfaceinvoke r151.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Albertz", $r37);

        $z2 = interfaceinvoke r151.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z2);

        $r38 = interfaceinvoke r149.<java.util.SortedMap: java.lang.Object remove(java.lang.Object)>("Albertz");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Albertz", $r38);

        r152 = virtualinvoke $r3.<org.apache.commons.collections4.trie.PatriciaTrie: java.util.SortedMap prefixMap(java.lang.Object)>("Alberto");

        $i6 = interfaceinvoke r152.<java.util.SortedMap: int size()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l7);

        $r39 = interfaceinvoke r152.<java.util.SortedMap: java.lang.Object firstKey()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Alberto", $r39);

        $r40 = interfaceinvoke r152.<java.util.SortedMap: java.lang.Object lastKey()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Albertoo", $r40);

        $r41 = interfaceinvoke r152.<java.util.SortedMap: java.util.Set entrySet()>();

        r153 = interfaceinvoke $r41.<java.util.Set: java.util.Iterator iterator()>();

        $r42 = interfaceinvoke r153.<java.util.Iterator: java.lang.Object next()>();

        r154 = (java.util.Map$Entry) $r42;

        $r43 = interfaceinvoke r154.<java.util.Map$Entry: java.lang.Object getKey()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Alberto", $r43);

        $r44 = interfaceinvoke r154.<java.util.Map$Entry: java.lang.Object getValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Alberto", $r44);

        $r45 = interfaceinvoke r153.<java.util.Iterator: java.lang.Object next()>();

        r155 = (java.util.Map$Entry) $r45;

        $r46 = interfaceinvoke r155.<java.util.Map$Entry: java.lang.Object getKey()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Albertoo", $r46);

        $r47 = interfaceinvoke r155.<java.util.Map$Entry: java.lang.Object getValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Albertoo", $r47);

        $z3 = interfaceinvoke r153.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z3);

        virtualinvoke $r3.<org.apache.commons.collections4.trie.PatriciaTrie: java.lang.Object put(java.lang.Object,java.lang.Object)>("Albertoad", "Albertoad");

        $i8 = interfaceinvoke r152.<java.util.SortedMap: int size()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l9);

        $r49 = interfaceinvoke r152.<java.util.SortedMap: java.lang.Object firstKey()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Alberto", $r49);

        $r50 = interfaceinvoke r152.<java.util.SortedMap: java.lang.Object lastKey()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Albertoo", $r50);

        $r51 = interfaceinvoke r152.<java.util.SortedMap: java.util.Set entrySet()>();

        r156 = interfaceinvoke $r51.<java.util.Set: java.util.Iterator iterator()>();

        $r52 = interfaceinvoke r156.<java.util.Iterator: java.lang.Object next()>();

        r157 = (java.util.Map$Entry) $r52;

        $r53 = interfaceinvoke r157.<java.util.Map$Entry: java.lang.Object getKey()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Alberto", $r53);

        $r54 = interfaceinvoke r157.<java.util.Map$Entry: java.lang.Object getValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Alberto", $r54);

        $r55 = interfaceinvoke r156.<java.util.Iterator: java.lang.Object next()>();

        r158 = (java.util.Map$Entry) $r55;

        $r56 = interfaceinvoke r158.<java.util.Map$Entry: java.lang.Object getKey()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Albertoad", $r56);

        $r57 = interfaceinvoke r158.<java.util.Map$Entry: java.lang.Object getValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Albertoad", $r57);

        $r58 = interfaceinvoke r156.<java.util.Iterator: java.lang.Object next()>();

        r159 = (java.util.Map$Entry) $r58;

        $r59 = interfaceinvoke r159.<java.util.Map$Entry: java.lang.Object getKey()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Albertoo", $r59);

        $r60 = interfaceinvoke r159.<java.util.Map$Entry: java.lang.Object getValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Albertoo", $r60);

        $z4 = interfaceinvoke r156.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z4);

        $r61 = virtualinvoke $r3.<org.apache.commons.collections4.trie.PatriciaTrie: java.lang.Object remove(java.lang.Object)>("Albertoo");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Albertoo", $r61);

        $r62 = interfaceinvoke r152.<java.util.SortedMap: java.lang.Object firstKey()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Alberto", $r62);

        $r63 = interfaceinvoke r152.<java.util.SortedMap: java.lang.Object lastKey()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Albertoad", $r63);

        $i10 = interfaceinvoke r152.<java.util.SortedMap: int size()>();

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l11);

        $r64 = interfaceinvoke r152.<java.util.SortedMap: java.util.Set entrySet()>();

        r160 = interfaceinvoke $r64.<java.util.Set: java.util.Iterator iterator()>();

        $r65 = interfaceinvoke r160.<java.util.Iterator: java.lang.Object next()>();

        r161 = (java.util.Map$Entry) $r65;

        $r66 = interfaceinvoke r161.<java.util.Map$Entry: java.lang.Object getKey()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Alberto", $r66);

        $r67 = interfaceinvoke r161.<java.util.Map$Entry: java.lang.Object getValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Alberto", $r67);

        $r68 = interfaceinvoke r160.<java.util.Iterator: java.lang.Object next()>();

        r162 = (java.util.Map$Entry) $r68;

        $r69 = interfaceinvoke r162.<java.util.Map$Entry: java.lang.Object getKey()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Albertoad", $r69);

        $r70 = interfaceinvoke r162.<java.util.Map$Entry: java.lang.Object getValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Albertoad", $r70);

        $z5 = interfaceinvoke r160.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z5);

        $r71 = virtualinvoke $r3.<org.apache.commons.collections4.trie.PatriciaTrie: java.lang.Object remove(java.lang.Object)>("Albertoad");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Albertoad", $r71);

        virtualinvoke $r3.<org.apache.commons.collections4.trie.PatriciaTrie: java.lang.Object put(java.lang.Object,java.lang.Object)>("Albertoo", "Albertoo");

        r163 = virtualinvoke $r3.<org.apache.commons.collections4.trie.PatriciaTrie: java.util.SortedMap prefixMap(java.lang.Object)>("X");

        $i12 = interfaceinvoke r163.<java.util.SortedMap: int size()>();

        $l13 = (long) $i12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l13);

        $z6 = interfaceinvoke r163.<java.util.SortedMap: boolean containsKey(java.lang.Object)>("Albert");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z6);

        $z7 = interfaceinvoke r163.<java.util.SortedMap: boolean containsKey(java.lang.Object)>("Xavier");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

        $z8 = interfaceinvoke r163.<java.util.SortedMap: boolean containsKey(java.lang.Object)>("Xalan");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z8);

        $r73 = interfaceinvoke r163.<java.util.SortedMap: java.util.Collection values()>();

        r164 = interfaceinvoke $r73.<java.util.Collection: java.util.Iterator iterator()>();

        $r74 = interfaceinvoke r164.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Xavier", $r74);

        $r75 = interfaceinvoke r164.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("XyZ", $r75);

        $z9 = interfaceinvoke r164.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z9);

        r165 = virtualinvoke $r3.<org.apache.commons.collections4.trie.PatriciaTrie: java.util.SortedMap prefixMap(java.lang.Object)>("An");

        $i14 = interfaceinvoke r165.<java.util.SortedMap: int size()>();

        $l15 = (long) $i14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l15);

        $r76 = interfaceinvoke r165.<java.util.SortedMap: java.lang.Object firstKey()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Anna", $r76);

        $r77 = interfaceinvoke r165.<java.util.SortedMap: java.lang.Object lastKey()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Anna", $r77);

        $r78 = interfaceinvoke r165.<java.util.SortedMap: java.util.Set keySet()>();

        r166 = interfaceinvoke $r78.<java.util.Set: java.util.Iterator iterator()>();

        $r79 = interfaceinvoke r166.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Anna", $r79);

        $z10 = interfaceinvoke r166.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z10);

        r167 = virtualinvoke $r3.<org.apache.commons.collections4.trie.PatriciaTrie: java.util.SortedMap prefixMap(java.lang.Object)>("Ban");

        $i16 = interfaceinvoke r167.<java.util.SortedMap: int size()>();

        $l17 = (long) $i16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l17);

        $r80 = interfaceinvoke r167.<java.util.SortedMap: java.lang.Object firstKey()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Banane", $r80);

        $r81 = interfaceinvoke r167.<java.util.SortedMap: java.lang.Object lastKey()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Banane", $r81);

        $r82 = interfaceinvoke r167.<java.util.SortedMap: java.util.Set keySet()>();

        r168 = interfaceinvoke $r82.<java.util.Set: java.util.Iterator iterator()>();

        $r83 = interfaceinvoke r168.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Banane", $r83);

        $z11 = interfaceinvoke r168.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z11);

        r169 = virtualinvoke $r3.<org.apache.commons.collections4.trie.PatriciaTrie: java.util.SortedMap prefixMap(java.lang.Object)>("Am");

        $z12 = interfaceinvoke r169.<java.util.SortedMap: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z12);

        $i18 = interfaceinvoke r169.<java.util.SortedMap: int size()>();

        $l19 = (long) $i18;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l19);

        $r84 = virtualinvoke $r3.<org.apache.commons.collections4.trie.PatriciaTrie: java.lang.Object remove(java.lang.Object)>("Amber");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Amber", $r84);

        $r85 = interfaceinvoke r169.<java.util.SortedMap: java.util.Set keySet()>();

        r170 = interfaceinvoke $r85.<java.util.Set: java.util.Iterator iterator()>();

        $r86 = interfaceinvoke r170.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Amma", $r86);

        $r87 = interfaceinvoke r170.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Ammun", $r87);

        $z13 = interfaceinvoke r170.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z13);

        $r88 = interfaceinvoke r169.<java.util.SortedMap: java.util.Set keySet()>();

        r171 = interfaceinvoke $r88.<java.util.Set: java.util.Iterator iterator()>();

        interfaceinvoke r169.<java.util.SortedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("Amber", "Amber");

        $i20 = interfaceinvoke r169.<java.util.SortedMap: int size()>();

        $l21 = (long) $i20;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l21);

     label03:
        interfaceinvoke r171.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("CME expected");

     label04:
        goto label06;

     label05:
        $r140 := @caughtexception;

     label06:
        $r91 = interfaceinvoke r169.<java.util.SortedMap: java.lang.Object firstKey()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Amber", $r91);

        $r92 = interfaceinvoke r169.<java.util.SortedMap: java.lang.Object lastKey()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Ammun", $r92);

        r173 = virtualinvoke $r3.<org.apache.commons.collections4.trie.PatriciaTrie: java.util.SortedMap prefixMap(java.lang.Object)>("Ak\u0000");

        $z14 = interfaceinvoke r173.<java.util.SortedMap: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z14);

        r174 = virtualinvoke $r3.<org.apache.commons.collections4.trie.PatriciaTrie: java.util.SortedMap prefixMap(java.lang.Object)>("Ak");

        $i22 = interfaceinvoke r174.<java.util.SortedMap: int size()>();

        $l23 = (long) $i22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l23);

        $r93 = interfaceinvoke r174.<java.util.SortedMap: java.lang.Object firstKey()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Akka", $r93);

        $r94 = interfaceinvoke r174.<java.util.SortedMap: java.lang.Object lastKey()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Akko", $r94);

        interfaceinvoke r174.<java.util.SortedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("Ak", "Ak");

        $r96 = interfaceinvoke r174.<java.util.SortedMap: java.lang.Object firstKey()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Ak", $r96);

        $r97 = interfaceinvoke r174.<java.util.SortedMap: java.lang.Object lastKey()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Akko", $r97);

        $i24 = interfaceinvoke r174.<java.util.SortedMap: int size()>();

        $l25 = (long) $i24;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l25);

        virtualinvoke $r3.<org.apache.commons.collections4.trie.PatriciaTrie: java.lang.Object put(java.lang.Object,java.lang.Object)>("Al", "Al");

        $i26 = interfaceinvoke r174.<java.util.SortedMap: int size()>();

        $l27 = (long) $i26;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l27);

        $r99 = interfaceinvoke r174.<java.util.SortedMap: java.lang.Object remove(java.lang.Object)>("Ak");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Ak", $r99);

        $r100 = interfaceinvoke r174.<java.util.SortedMap: java.lang.Object firstKey()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Akka", $r100);

        $r101 = interfaceinvoke r174.<java.util.SortedMap: java.lang.Object lastKey()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Akko", $r101);

        $i28 = interfaceinvoke r174.<java.util.SortedMap: int size()>();

        $l29 = (long) $i28;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l29);

        $r102 = interfaceinvoke r174.<java.util.SortedMap: java.util.Set keySet()>();

        r175 = interfaceinvoke $r102.<java.util.Set: java.util.Iterator iterator()>();

        $r103 = interfaceinvoke r175.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Akka", $r103);

        $r104 = interfaceinvoke r175.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Akko", $r104);

        $z15 = interfaceinvoke r175.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z15);

        $r105 = virtualinvoke $r3.<org.apache.commons.collections4.trie.PatriciaTrie: java.lang.Object remove(java.lang.Object)>("Al");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Al", $r105);

        r176 = virtualinvoke $r3.<org.apache.commons.collections4.trie.PatriciaTrie: java.util.SortedMap prefixMap(java.lang.Object)>("Akka");

        $i30 = interfaceinvoke r176.<java.util.SortedMap: int size()>();

        $l31 = (long) $i30;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l31);

        $r106 = interfaceinvoke r176.<java.util.SortedMap: java.lang.Object firstKey()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Akka", $r106);

        $r107 = interfaceinvoke r176.<java.util.SortedMap: java.lang.Object lastKey()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Akka", $r107);

        $r108 = interfaceinvoke r176.<java.util.SortedMap: java.util.Set keySet()>();

        r177 = interfaceinvoke $r108.<java.util.Set: java.util.Iterator iterator()>();

        $r109 = interfaceinvoke r177.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Akka", $r109);

        $z16 = interfaceinvoke r177.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z16);

        r178 = virtualinvoke $r3.<org.apache.commons.collections4.trie.PatriciaTrie: java.util.SortedMap prefixMap(java.lang.Object)>("Ab");

        $z17 = interfaceinvoke r178.<java.util.SortedMap: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z17);

        $i32 = interfaceinvoke r178.<java.util.SortedMap: int size()>();

        $l33 = (long) $i32;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l33);

     label07:
        r179 = interfaceinvoke r178.<java.util.SortedMap: java.lang.Object firstKey()>();

        $r110 = new java.lang.StringBuilder;

        specialinvoke $r110.<java.lang.StringBuilder: void <init>()>();

        $r111 = virtualinvoke $r110.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("got a first key: ");

        $r112 = virtualinvoke $r111.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r179);

        $r113 = virtualinvoke $r112.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r113);

     label08:
        goto label10;

     label09:
        $r144 := @caughtexception;

     label10:
        r181 = interfaceinvoke r178.<java.util.SortedMap: java.lang.Object lastKey()>();

        $r114 = new java.lang.StringBuilder;

        specialinvoke $r114.<java.lang.StringBuilder: void <init>()>();

        $r115 = virtualinvoke $r114.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("got a last key: ");

        $r116 = virtualinvoke $r115.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r181);

        $r117 = virtualinvoke $r116.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r117);

     label11:
        goto label13;

     label12:
        $r143 := @caughtexception;

     label13:
        $r118 = interfaceinvoke r178.<java.util.SortedMap: java.util.Collection values()>();

        r183 = interfaceinvoke $r118.<java.util.Collection: java.util.Iterator iterator()>();

        $z18 = interfaceinvoke r183.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z18);

        r184 = virtualinvoke $r3.<org.apache.commons.collections4.trie.PatriciaTrie: java.util.SortedMap prefixMap(java.lang.Object)>("Albertooo");

        $z19 = interfaceinvoke r184.<java.util.SortedMap: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z19);

        $i34 = interfaceinvoke r184.<java.util.SortedMap: int size()>();

        $l35 = (long) $i34;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l35);

     label14:
        r185 = interfaceinvoke r184.<java.util.SortedMap: java.lang.Object firstKey()>();

        $r119 = new java.lang.StringBuilder;

        specialinvoke $r119.<java.lang.StringBuilder: void <init>()>();

        $r120 = virtualinvoke $r119.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("got a first key: ");

        $r121 = virtualinvoke $r120.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r185);

        $r122 = virtualinvoke $r121.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r122);

     label15:
        goto label17;

     label16:
        $r141 := @caughtexception;

     label17:
        r187 = interfaceinvoke r184.<java.util.SortedMap: java.lang.Object lastKey()>();

        $r123 = new java.lang.StringBuilder;

        specialinvoke $r123.<java.lang.StringBuilder: void <init>()>();

        $r124 = virtualinvoke $r123.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("got a last key: ");

        $r125 = virtualinvoke $r124.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r187);

        $r126 = virtualinvoke $r125.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r126);

     label18:
        goto label20;

     label19:
        $r142 := @caughtexception;

     label20:
        $r127 = interfaceinvoke r184.<java.util.SortedMap: java.util.Collection values()>();

        r189 = interfaceinvoke $r127.<java.util.Collection: java.util.Iterator iterator()>();

        $z20 = interfaceinvoke r189.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z20);

        r190 = virtualinvoke $r3.<org.apache.commons.collections4.trie.PatriciaTrie: java.util.SortedMap prefixMap(java.lang.Object)>("");

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($r3, r190);

        r191 = virtualinvoke $r3.<org.apache.commons.collections4.trie.PatriciaTrie: java.util.SortedMap prefixMap(java.lang.Object)>("\u0000");

        $z21 = interfaceinvoke r191.<java.util.SortedMap: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z21);

        $i36 = interfaceinvoke r191.<java.util.SortedMap: int size()>();

        $l37 = (long) $i36;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l37);

     label21:
        r192 = interfaceinvoke r191.<java.util.SortedMap: java.lang.Object firstKey()>();

        $r128 = new java.lang.StringBuilder;

        specialinvoke $r128.<java.lang.StringBuilder: void <init>()>();

        $r129 = virtualinvoke $r128.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("got a first key: ");

        $r130 = virtualinvoke $r129.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r192);

        $r131 = virtualinvoke $r130.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r131);

     label22:
        goto label24;

     label23:
        $r139 := @caughtexception;

     label24:
        r194 = interfaceinvoke r191.<java.util.SortedMap: java.lang.Object lastKey()>();

        $r132 = new java.lang.StringBuilder;

        specialinvoke $r132.<java.lang.StringBuilder: void <init>()>();

        $r133 = virtualinvoke $r132.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("got a last key: ");

        $r134 = virtualinvoke $r133.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r194);

        $r135 = virtualinvoke $r134.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r135);

     label25:
        goto label27;

     label26:
        $r138 := @caughtexception;

     label27:
        $r136 = interfaceinvoke r191.<java.util.SortedMap: java.util.Collection values()>();

        r196 = interfaceinvoke $r136.<java.util.Collection: java.util.Iterator iterator()>();

        $z22 = interfaceinvoke r196.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z22);

        return;

        catch java.util.ConcurrentModificationException from label03 to label04 with label05;
        catch java.util.NoSuchElementException from label07 to label08 with label09;
        catch java.util.NoSuchElementException from label10 to label11 with label12;
        catch java.util.NoSuchElementException from label14 to label15 with label16;
        catch java.util.NoSuchElementException from label17 to label18 with label19;
        catch java.util.NoSuchElementException from label21 to label22 with label23;
        catch java.util.NoSuchElementException from label24 to label25 with label26;
    }

    public void testPrefixMapRemoval()
    {
        org.apache.commons.collections4.trie.PatriciaTrieTest r0;
        java.lang.String r3, $r21, $r24;
        org.apache.commons.collections4.trie.PatriciaTrie $r4;
        java.lang.String[] $r5;
        int $i0, $i2, $i4, $i6, i8, i9;
        long $l1, $l3, $l5, $l7;
        java.util.Set $r6, $r15;
        java.lang.Object $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r16, $r17, $r20;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r18, $r19, $r22, $r23;
        java.util.SortedMap r27, r29;
        java.util.Iterator r28, r30;

        r0 := @this: org.apache.commons.collections4.trie.PatriciaTrieTest;

        $r4 = new org.apache.commons.collections4.trie.PatriciaTrie;

        specialinvoke $r4.<org.apache.commons.collections4.trie.PatriciaTrie: void <init>()>();

        $r5 = newarray (java.lang.String)[18];

        $r5[0] = "Albert";

        $r5[1] = "Xavier";

        $r5[2] = "XyZ";

        $r5[3] = "Anna";

        $r5[4] = "Alien";

        $r5[5] = "Alberto";

        $r5[6] = "Alberts";

        $r5[7] = "Allie";

        $r5[8] = "Alliese";

        $r5[9] = "Alabama";

        $r5[10] = "Banane";

        $r5[11] = "Blabla";

        $r5[12] = "Amber";

        $r5[13] = "Ammun";

        $r5[14] = "Akka";

        $r5[15] = "Akko";

        $r5[16] = "Albertoo";

        $r5[17] = "Amma";

        i8 = lengthof $r5;

        i9 = 0;

     label1:
        if i9 >= i8 goto label2;

        r3 = $r5[i9];

        virtualinvoke $r4.<org.apache.commons.collections4.trie.PatriciaTrie: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r3);

        i9 = i9 + 1;

        goto label1;

     label2:
        r27 = virtualinvoke $r4.<org.apache.commons.collections4.trie.PatriciaTrie: java.util.SortedMap prefixMap(java.lang.Object)>("Al");

        $i0 = interfaceinvoke r27.<java.util.SortedMap: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(8L, $l1);

        $r6 = interfaceinvoke r27.<java.util.SortedMap: java.util.Set keySet()>();

        r28 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

        $r7 = interfaceinvoke r28.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Alabama", $r7);

        $r8 = interfaceinvoke r28.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Albert", $r8);

        $r9 = interfaceinvoke r28.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Alberto", $r9);

        $r10 = interfaceinvoke r28.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Albertoo", $r10);

        $r11 = interfaceinvoke r28.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Alberts", $r11);

        $r12 = interfaceinvoke r28.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Alien", $r12);

        interfaceinvoke r28.<java.util.Iterator: void remove()>();

        $i2 = interfaceinvoke r27.<java.util.SortedMap: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(7L, $l3);

        $r13 = interfaceinvoke r28.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Allie", $r13);

        $r14 = interfaceinvoke r28.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Alliese", $r14);

        $z0 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        r29 = virtualinvoke $r4.<org.apache.commons.collections4.trie.PatriciaTrie: java.util.SortedMap prefixMap(java.lang.Object)>("Ak");

        $i4 = interfaceinvoke r29.<java.util.SortedMap: int size()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l5);

        $r15 = interfaceinvoke r29.<java.util.SortedMap: java.util.Set keySet()>();

        r30 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();

        $r16 = interfaceinvoke r30.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Akka", $r16);

        interfaceinvoke r30.<java.util.Iterator: void remove()>();

        $i6 = interfaceinvoke r29.<java.util.SortedMap: int size()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l7);

        $r17 = interfaceinvoke r30.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Akko", $r17);

        $z1 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("shouldn\'t have next (but was: ");

        $r20 = interfaceinvoke r30.<java.util.Iterator: java.lang.Object next()>();

        $r21 = (java.lang.String) $r20;

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r24);

     label3:
        $z2 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z2);

        return;
    }

    public void testPrefixMapSizes()
    {
        org.apache.commons.collections4.trie.PatriciaTrieTest r0;
        org.apache.commons.collections4.trie.PatriciaTrie $r2;
        java.util.SortedMap $r5, $r6, $r9, $r10, $r11, $r13, $r15, $r19, $r21;
        boolean $z0, $z1;
        java.lang.Object $r7;
        java.lang.String $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.util.Set $r12, $r14, $r20;
        java.util.Collection $r16, $r22;

        r0 := @this: org.apache.commons.collections4.trie.PatriciaTrieTest;

        $r2 = new org.apache.commons.collections4.trie.PatriciaTrie;

        specialinvoke $r2.<org.apache.commons.collections4.trie.PatriciaTrie: void <init>()>();

        virtualinvoke $r2.<org.apache.commons.collections4.trie.PatriciaTrie: java.lang.Object put(java.lang.Object,java.lang.Object)>("\u00e7\u0082\u00b9\u00e8\u00af\u0084", "\u00e6\u00b5\u008b\u00e8\u00af\u0095");

        virtualinvoke $r2.<org.apache.commons.collections4.trie.PatriciaTrie: java.lang.Object put(java.lang.Object,java.lang.Object)>("\u00e4\u00b9\u00a6\u00e8\u00af\u0084", "\u00e6\u00b5\u008b\u00e8\u00af\u0095");

        $r5 = virtualinvoke $r2.<org.apache.commons.collections4.trie.PatriciaTrie: java.util.SortedMap prefixMap(java.lang.Object)>("\u00e7\u0082\u00b9");

        $z0 = interfaceinvoke $r5.<java.util.SortedMap: boolean containsKey(java.lang.Object)>("\u00e7\u0082\u00b9\u00e8\u00af\u0084");

        staticinvoke <org.apache.commons.collections4.trie.PatriciaTrieTest: void assertTrue(boolean)>($z0);

        $r6 = virtualinvoke $r2.<org.apache.commons.collections4.trie.PatriciaTrie: java.util.SortedMap prefixMap(java.lang.Object)>("\u00e7\u0082\u00b9");

        $r7 = interfaceinvoke $r6.<java.util.SortedMap: java.lang.Object get(java.lang.Object)>("\u00e7\u0082\u00b9\u00e8\u00af\u0084");

        $r8 = (java.lang.String) $r7;

        staticinvoke <org.apache.commons.collections4.trie.PatriciaTrieTest: void assertEquals(java.lang.String,java.lang.String)>("\u00e6\u00b5\u008b\u00e8\u00af\u0095", $r8);

        $r9 = virtualinvoke $r2.<org.apache.commons.collections4.trie.PatriciaTrie: java.util.SortedMap prefixMap(java.lang.Object)>("\u00e7\u0082\u00b9");

        $z1 = interfaceinvoke $r9.<java.util.SortedMap: boolean isEmpty()>();

        staticinvoke <org.apache.commons.collections4.trie.PatriciaTrieTest: void assertFalse(boolean)>($z1);

        $r10 = virtualinvoke $r2.<org.apache.commons.collections4.trie.PatriciaTrie: java.util.SortedMap prefixMap(java.lang.Object)>("\u00e7\u0082\u00b9");

        $i0 = interfaceinvoke $r10.<java.util.SortedMap: int size()>();

        staticinvoke <org.apache.commons.collections4.trie.PatriciaTrieTest: void assertEquals(int,int)>(1, $i0);

        $r11 = virtualinvoke $r2.<org.apache.commons.collections4.trie.PatriciaTrie: java.util.SortedMap prefixMap(java.lang.Object)>("\u00e7\u0082\u00b9");

        $r12 = interfaceinvoke $r11.<java.util.SortedMap: java.util.Set keySet()>();

        $i1 = interfaceinvoke $r12.<java.util.Set: int size()>();

        staticinvoke <org.apache.commons.collections4.trie.PatriciaTrieTest: void assertEquals(int,int)>(1, $i1);

        $r13 = virtualinvoke $r2.<org.apache.commons.collections4.trie.PatriciaTrie: java.util.SortedMap prefixMap(java.lang.Object)>("\u00e7\u0082\u00b9");

        $r14 = interfaceinvoke $r13.<java.util.SortedMap: java.util.Set entrySet()>();

        $i2 = interfaceinvoke $r14.<java.util.Set: int size()>();

        staticinvoke <org.apache.commons.collections4.trie.PatriciaTrieTest: void assertEquals(int,int)>(1, $i2);

        $r15 = virtualinvoke $r2.<org.apache.commons.collections4.trie.PatriciaTrie: java.util.SortedMap prefixMap(java.lang.Object)>("\u00e7\u0082\u00b9\u00e8\u00af\u0084");

        $r16 = interfaceinvoke $r15.<java.util.SortedMap: java.util.Collection values()>();

        $i3 = interfaceinvoke $r16.<java.util.Collection: int size()>();

        staticinvoke <org.apache.commons.collections4.trie.PatriciaTrieTest: void assertEquals(int,int)>(1, $i3);

        virtualinvoke $r2.<org.apache.commons.collections4.trie.PatriciaTrie: void clear()>();

        virtualinvoke $r2.<org.apache.commons.collections4.trie.PatriciaTrie: java.lang.Object put(java.lang.Object,java.lang.Object)>("\u00e7\u0082\u00b9\u00e8\u00af\u0084", "\u00e8\u0081\u0094\u00e7\u009b\u009f");

        virtualinvoke $r2.<org.apache.commons.collections4.trie.PatriciaTrie: java.lang.Object put(java.lang.Object,java.lang.Object)>("\u00e7\u0082\u00b9\u00e7\u0089\u0088", "\u00e5\u00ae\u009a\u00e5\u0090\u0091");

        $r19 = virtualinvoke $r2.<org.apache.commons.collections4.trie.PatriciaTrie: java.util.SortedMap prefixMap(java.lang.Object)>("\u00e7\u0082\u00b9");

        $r20 = interfaceinvoke $r19.<java.util.SortedMap: java.util.Set keySet()>();

        $i4 = interfaceinvoke $r20.<java.util.Set: int size()>();

        staticinvoke <org.apache.commons.collections4.trie.PatriciaTrieTest: void assertEquals(int,int)>(2, $i4);

        $r21 = virtualinvoke $r2.<org.apache.commons.collections4.trie.PatriciaTrie: java.util.SortedMap prefixMap(java.lang.Object)>("\u00e7\u0082\u00b9");

        $r22 = interfaceinvoke $r21.<java.util.SortedMap: java.util.Collection values()>();

        $i5 = interfaceinvoke $r22.<java.util.Collection: int size()>();

        staticinvoke <org.apache.commons.collections4.trie.PatriciaTrieTest: void assertEquals(int,int)>(2, $i5);

        return;
    }

    public void testPrefixMapSizes2()
    {
        org.apache.commons.collections4.trie.PatriciaTrieTest r0;
        char c0;
        java.lang.String r3, $r9;
        char[] $r4;
        org.apache.commons.collections4.trie.PatriciaTrie $r5;
        java.lang.StringBuilder $r6, $r7, $r8;
        int $i2, $i3, $i4;
        boolean $z0, $z1;
        java.util.SortedMap $r12, $r13;

        r0 := @this: org.apache.commons.collections4.trie.PatriciaTrieTest;

        $r4 = staticinvoke <java.lang.Character: char[] toChars(int)>(32768);

        c0 = $r4[0];

        $r5 = new org.apache.commons.collections4.trie.PatriciaTrie;

        specialinvoke $r5.<org.apache.commons.collections4.trie.PatriciaTrie: void <init>()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("b");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        r3 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = "b";

        $i2 = virtualinvoke $r9.<java.lang.String: int length()>();

        staticinvoke <org.apache.commons.collections4.trie.PatriciaTrieTest: void assertEquals(int,int)>(1, $i2);

        $i3 = virtualinvoke r3.<java.lang.String: int length()>();

        staticinvoke <org.apache.commons.collections4.trie.PatriciaTrieTest: void assertEquals(int,int)>(2, $i3);

        $z0 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>("b");

        staticinvoke <org.apache.commons.collections4.trie.PatriciaTrieTest: void assertTrue(boolean)>($z0);

        virtualinvoke $r5.<org.apache.commons.collections4.trie.PatriciaTrie: java.lang.Object put(java.lang.Object,java.lang.Object)>("b", "prefixString");

        virtualinvoke $r5.<org.apache.commons.collections4.trie.PatriciaTrie: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, "longerString");

        $r12 = virtualinvoke $r5.<org.apache.commons.collections4.trie.PatriciaTrie: java.util.SortedMap prefixMap(java.lang.Object)>("b");

        $i4 = interfaceinvoke $r12.<java.util.SortedMap: int size()>();

        staticinvoke <org.apache.commons.collections4.trie.PatriciaTrieTest: void assertEquals(int,int)>(2, $i4);

        $r13 = virtualinvoke $r5.<org.apache.commons.collections4.trie.PatriciaTrie: java.util.SortedMap prefixMap(java.lang.Object)>("b");

        $z1 = interfaceinvoke $r13.<java.util.SortedMap: boolean containsKey(java.lang.Object)>(r3);

        staticinvoke <org.apache.commons.collections4.trie.PatriciaTrieTest: void assertTrue(boolean)>($z1);

        return;
    }

    public void testPrefixMapClear()
    {
        org.apache.commons.collections4.trie.PatriciaTrieTest r0;
        java.util.SortedMap r2;
        org.apache.commons.collections4.trie.PatriciaTrie $r3;
        java.lang.Integer $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r23, $r24, $r25, $r36, $r37, $r38, $r39;
        java.util.HashSet $r18, $r31;
        java.lang.String[] $r19, $r32;
        java.util.List $r20, $r26, $r33, $r40;
        java.util.Set $r21, $r29, $r34;
        java.lang.Integer[] $r22, $r35;
        java.util.ArrayList $r27, $r41;
        java.util.Collection $r28, $r30, $r42;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.commons.collections4.trie.PatriciaTrieTest;

        $r3 = new org.apache.commons.collections4.trie.PatriciaTrie;

        specialinvoke $r3.<org.apache.commons.collections4.trie.PatriciaTrie: void <init>()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke $r3.<org.apache.commons.collections4.Trie: java.lang.Object put(java.lang.Object,java.lang.Object)>("Anna", $r4);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        interfaceinvoke $r3.<org.apache.commons.collections4.Trie: java.lang.Object put(java.lang.Object,java.lang.Object)>("Anael", $r6);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke $r3.<org.apache.commons.collections4.Trie: java.lang.Object put(java.lang.Object,java.lang.Object)>("Analu", $r8);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        interfaceinvoke $r3.<org.apache.commons.collections4.Trie: java.lang.Object put(java.lang.Object,java.lang.Object)>("Andreas", $r10);

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        interfaceinvoke $r3.<org.apache.commons.collections4.Trie: java.lang.Object put(java.lang.Object,java.lang.Object)>("Andrea", $r12);

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        interfaceinvoke $r3.<org.apache.commons.collections4.Trie: java.lang.Object put(java.lang.Object,java.lang.Object)>("Andres", $r14);

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(7);

        interfaceinvoke $r3.<org.apache.commons.collections4.Trie: java.lang.Object put(java.lang.Object,java.lang.Object)>("Anatole", $r16);

        r2 = interfaceinvoke $r3.<org.apache.commons.collections4.Trie: java.util.SortedMap prefixMap(java.lang.Object)>("And");

        $r18 = new java.util.HashSet;

        $r19 = newarray (java.lang.String)[3];

        $r19[0] = "Andrea";

        $r19[1] = "Andreas";

        $r19[2] = "Andres";

        $r20 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r19);

        specialinvoke $r18.<java.util.HashSet: void <init>(java.util.Collection)>($r20);

        $r21 = interfaceinvoke r2.<java.util.SortedMap: java.util.Set keySet()>();

        staticinvoke <org.apache.commons.collections4.trie.PatriciaTrieTest: void assertEquals(java.lang.Object,java.lang.Object)>($r18, $r21);

        $r22 = newarray (java.lang.Integer)[3];

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r22[0] = $r23;

        $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r22[1] = $r24;

        $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        $r22[2] = $r25;

        $r26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r22);

        $r27 = new java.util.ArrayList;

        $r28 = interfaceinvoke r2.<java.util.SortedMap: java.util.Collection values()>();

        specialinvoke $r27.<java.util.ArrayList: void <init>(java.util.Collection)>($r28);

        staticinvoke <org.apache.commons.collections4.trie.PatriciaTrieTest: void assertEquals(java.lang.Object,java.lang.Object)>($r26, $r27);

        interfaceinvoke r2.<java.util.SortedMap: void clear()>();

        $z0 = interfaceinvoke r2.<java.util.SortedMap: boolean isEmpty()>();

        staticinvoke <org.apache.commons.collections4.trie.PatriciaTrieTest: void assertTrue(boolean)>($z0);

        $r29 = interfaceinvoke r2.<java.util.SortedMap: java.util.Set keySet()>();

        $z1 = interfaceinvoke $r29.<java.util.Set: boolean isEmpty()>();

        staticinvoke <org.apache.commons.collections4.trie.PatriciaTrieTest: void assertTrue(boolean)>($z1);

        $r30 = interfaceinvoke r2.<java.util.SortedMap: java.util.Collection values()>();

        $z2 = interfaceinvoke $r30.<java.util.Collection: boolean isEmpty()>();

        staticinvoke <org.apache.commons.collections4.trie.PatriciaTrieTest: void assertTrue(boolean)>($z2);

        $r31 = new java.util.HashSet;

        $r32 = newarray (java.lang.String)[4];

        $r32[0] = "Anael";

        $r32[1] = "Analu";

        $r32[2] = "Anatole";

        $r32[3] = "Anna";

        $r33 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r32);

        specialinvoke $r31.<java.util.HashSet: void <init>(java.util.Collection)>($r33);

        $r34 = interfaceinvoke $r3.<org.apache.commons.collections4.Trie: java.util.Set keySet()>();

        staticinvoke <org.apache.commons.collections4.trie.PatriciaTrieTest: void assertEquals(java.lang.Object,java.lang.Object)>($r31, $r34);

        $r35 = newarray (java.lang.Integer)[4];

        $r36 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r35[0] = $r36;

        $r37 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r35[1] = $r37;

        $r38 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(7);

        $r35[2] = $r38;

        $r39 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r35[3] = $r39;

        $r40 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r35);

        $r41 = new java.util.ArrayList;

        $r42 = interfaceinvoke $r3.<org.apache.commons.collections4.Trie: java.util.Collection values()>();

        specialinvoke $r41.<java.util.ArrayList: void <init>(java.util.Collection)>($r42);

        staticinvoke <org.apache.commons.collections4.trie.PatriciaTrieTest: void assertEquals(java.lang.Object,java.lang.Object)>($r40, $r41);

        return;
    }

    public void testPrefixMapClearNothing()
    {
        org.apache.commons.collections4.trie.PatriciaTrieTest r0;
        java.util.SortedMap r2;
        org.apache.commons.collections4.trie.PatriciaTrie $r3;
        java.util.HashSet $r4, $r11;
        java.util.Set $r5, $r9, $r12;
        java.util.ArrayList $r6, $r7, $r13, $r14;
        java.util.Collection $r8, $r10, $r15;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.commons.collections4.trie.PatriciaTrieTest;

        $r3 = new org.apache.commons.collections4.trie.PatriciaTrie;

        specialinvoke $r3.<org.apache.commons.collections4.trie.PatriciaTrie: void <init>()>();

        r2 = interfaceinvoke $r3.<org.apache.commons.collections4.Trie: java.util.SortedMap prefixMap(java.lang.Object)>("And");

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        $r5 = interfaceinvoke r2.<java.util.SortedMap: java.util.Set keySet()>();

        staticinvoke <org.apache.commons.collections4.trie.PatriciaTrieTest: void assertEquals(java.lang.Object,java.lang.Object)>($r4, $r5);

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>(int)>(0);

        $r7 = new java.util.ArrayList;

        $r8 = interfaceinvoke r2.<java.util.SortedMap: java.util.Collection values()>();

        specialinvoke $r7.<java.util.ArrayList: void <init>(java.util.Collection)>($r8);

        staticinvoke <org.apache.commons.collections4.trie.PatriciaTrieTest: void assertEquals(java.lang.Object,java.lang.Object)>($r6, $r7);

        interfaceinvoke r2.<java.util.SortedMap: void clear()>();

        $z0 = interfaceinvoke r2.<java.util.SortedMap: boolean isEmpty()>();

        staticinvoke <org.apache.commons.collections4.trie.PatriciaTrieTest: void assertTrue(boolean)>($z0);

        $r9 = interfaceinvoke r2.<java.util.SortedMap: java.util.Set keySet()>();

        $z1 = interfaceinvoke $r9.<java.util.Set: boolean isEmpty()>();

        staticinvoke <org.apache.commons.collections4.trie.PatriciaTrieTest: void assertTrue(boolean)>($z1);

        $r10 = interfaceinvoke r2.<java.util.SortedMap: java.util.Collection values()>();

        $z2 = interfaceinvoke $r10.<java.util.Collection: boolean isEmpty()>();

        staticinvoke <org.apache.commons.collections4.trie.PatriciaTrieTest: void assertTrue(boolean)>($z2);

        $r11 = new java.util.HashSet;

        specialinvoke $r11.<java.util.HashSet: void <init>()>();

        $r12 = interfaceinvoke $r3.<org.apache.commons.collections4.Trie: java.util.Set keySet()>();

        staticinvoke <org.apache.commons.collections4.trie.PatriciaTrieTest: void assertEquals(java.lang.Object,java.lang.Object)>($r11, $r12);

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>(int)>(0);

        $r14 = new java.util.ArrayList;

        $r15 = interfaceinvoke $r3.<org.apache.commons.collections4.Trie: java.util.Collection values()>();

        specialinvoke $r14.<java.util.ArrayList: void <init>(java.util.Collection)>($r15);

        staticinvoke <org.apache.commons.collections4.trie.PatriciaTrieTest: void assertEquals(java.lang.Object,java.lang.Object)>($r13, $r14);

        return;
    }

    public void testPrefixMapClearUsingRemove()
    {
        org.apache.commons.collections4.trie.PatriciaTrieTest r0;
        java.util.SortedMap r2;
        java.util.Iterator r4;
        java.lang.String r5;
        org.apache.commons.collections4.trie.PatriciaTrie $r6;
        java.lang.Integer $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r26, $r27, $r28, $r41, $r42, $r43, $r44;
        java.util.HashSet $r21, $r32, $r36;
        java.lang.String[] $r22, $r37;
        java.util.List $r23, $r29, $r38, $r45;
        java.util.Set $r24, $r33, $r34, $r39;
        java.lang.Integer[] $r25, $r40;
        java.util.ArrayList $r30, $r46;
        java.util.Collection $r31, $r35, $r47;
        boolean $z0, $z1, $z2;
        java.lang.Object $r48;

        r0 := @this: org.apache.commons.collections4.trie.PatriciaTrieTest;

        $r6 = new org.apache.commons.collections4.trie.PatriciaTrie;

        specialinvoke $r6.<org.apache.commons.collections4.trie.PatriciaTrie: void <init>()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke $r6.<org.apache.commons.collections4.Trie: java.lang.Object put(java.lang.Object,java.lang.Object)>("Anna", $r7);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        interfaceinvoke $r6.<org.apache.commons.collections4.Trie: java.lang.Object put(java.lang.Object,java.lang.Object)>("Anael", $r9);

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke $r6.<org.apache.commons.collections4.Trie: java.lang.Object put(java.lang.Object,java.lang.Object)>("Analu", $r11);

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        interfaceinvoke $r6.<org.apache.commons.collections4.Trie: java.lang.Object put(java.lang.Object,java.lang.Object)>("Andreas", $r13);

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        interfaceinvoke $r6.<org.apache.commons.collections4.Trie: java.lang.Object put(java.lang.Object,java.lang.Object)>("Andrea", $r15);

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        interfaceinvoke $r6.<org.apache.commons.collections4.Trie: java.lang.Object put(java.lang.Object,java.lang.Object)>("Andres", $r17);

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(7);

        interfaceinvoke $r6.<org.apache.commons.collections4.Trie: java.lang.Object put(java.lang.Object,java.lang.Object)>("Anatole", $r19);

        r2 = interfaceinvoke $r6.<org.apache.commons.collections4.Trie: java.util.SortedMap prefixMap(java.lang.Object)>("And");

        $r21 = new java.util.HashSet;

        $r22 = newarray (java.lang.String)[3];

        $r22[0] = "Andrea";

        $r22[1] = "Andreas";

        $r22[2] = "Andres";

        $r23 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r22);

        specialinvoke $r21.<java.util.HashSet: void <init>(java.util.Collection)>($r23);

        $r24 = interfaceinvoke r2.<java.util.SortedMap: java.util.Set keySet()>();

        staticinvoke <org.apache.commons.collections4.trie.PatriciaTrieTest: void assertEquals(java.lang.Object,java.lang.Object)>($r21, $r24);

        $r25 = newarray (java.lang.Integer)[3];

        $r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r25[0] = $r26;

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r25[1] = $r27;

        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        $r25[2] = $r28;

        $r29 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r25);

        $r30 = new java.util.ArrayList;

        $r31 = interfaceinvoke r2.<java.util.SortedMap: java.util.Collection values()>();

        specialinvoke $r30.<java.util.ArrayList: void <init>(java.util.Collection)>($r31);

        staticinvoke <org.apache.commons.collections4.trie.PatriciaTrieTest: void assertEquals(java.lang.Object,java.lang.Object)>($r29, $r30);

        $r32 = new java.util.HashSet;

        $r33 = interfaceinvoke r2.<java.util.SortedMap: java.util.Set keySet()>();

        specialinvoke $r32.<java.util.HashSet: void <init>(java.util.Collection)>($r33);

        r4 = interfaceinvoke $r32.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r48 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r48;

        interfaceinvoke r2.<java.util.SortedMap: java.lang.Object remove(java.lang.Object)>(r5);

        goto label1;

     label2:
        $r34 = interfaceinvoke r2.<java.util.SortedMap: java.util.Set keySet()>();

        $z1 = interfaceinvoke $r34.<java.util.Set: boolean isEmpty()>();

        staticinvoke <org.apache.commons.collections4.trie.PatriciaTrieTest: void assertTrue(boolean)>($z1);

        $r35 = interfaceinvoke r2.<java.util.SortedMap: java.util.Collection values()>();

        $z2 = interfaceinvoke $r35.<java.util.Collection: boolean isEmpty()>();

        staticinvoke <org.apache.commons.collections4.trie.PatriciaTrieTest: void assertTrue(boolean)>($z2);

        $r36 = new java.util.HashSet;

        $r37 = newarray (java.lang.String)[4];

        $r37[0] = "Anael";

        $r37[1] = "Analu";

        $r37[2] = "Anatole";

        $r37[3] = "Anna";

        $r38 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r37);

        specialinvoke $r36.<java.util.HashSet: void <init>(java.util.Collection)>($r38);

        $r39 = interfaceinvoke $r6.<org.apache.commons.collections4.Trie: java.util.Set keySet()>();

        staticinvoke <org.apache.commons.collections4.trie.PatriciaTrieTest: void assertEquals(java.lang.Object,java.lang.Object)>($r36, $r39);

        $r40 = newarray (java.lang.Integer)[4];

        $r41 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r40[0] = $r41;

        $r42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r40[1] = $r42;

        $r43 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(7);

        $r40[2] = $r43;

        $r44 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r40[3] = $r44;

        $r45 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r40);

        $r46 = new java.util.ArrayList;

        $r47 = interfaceinvoke $r6.<org.apache.commons.collections4.Trie: java.util.Collection values()>();

        specialinvoke $r46.<java.util.ArrayList: void <init>(java.util.Collection)>($r47);

        staticinvoke <org.apache.commons.collections4.trie.PatriciaTrieTest: void assertEquals(java.lang.Object,java.lang.Object)>($r45, $r46);

        return;
    }

    public java.lang.String getCompatibilityVersion()
    {
        org.apache.commons.collections4.trie.PatriciaTrieTest r0;

        r0 := @this: org.apache.commons.collections4.trie.PatriciaTrieTest;

        return "4";
    }

    public volatile java.util.Map makeObject()
    {
        org.apache.commons.collections4.trie.PatriciaTrieTest r0;
        java.util.SortedMap $r1;

        r0 := @this: org.apache.commons.collections4.trie.PatriciaTrieTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.trie.PatriciaTrieTest: java.util.SortedMap makeObject()>();

        return $r1;
    }

    public volatile java.lang.Object makeObject()
    {
        org.apache.commons.collections4.trie.PatriciaTrieTest r0;
        java.util.SortedMap $r1;

        r0 := @this: org.apache.commons.collections4.trie.PatriciaTrieTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.trie.PatriciaTrieTest: java.util.SortedMap makeObject()>();

        return $r1;
    }
}
