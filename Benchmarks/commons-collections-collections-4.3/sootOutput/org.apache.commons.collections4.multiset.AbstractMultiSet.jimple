public abstract class org.apache.commons.collections4.multiset.AbstractMultiSet extends java.util.AbstractCollection implements org.apache.commons.collections4.MultiSet
{
    private transient java.util.Set uniqueSet;
    private transient java.util.Set entrySet;

    protected void <init>()
    {
        org.apache.commons.collections4.multiset.AbstractMultiSet r0;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSet;

        specialinvoke r0.<java.util.AbstractCollection: void <init>()>();

        return;
    }

    public int size()
    {
        org.apache.commons.collections4.multiset.AbstractMultiSet r0;
        java.util.Iterator r1;
        org.apache.commons.collections4.MultiSet$Entry r2;
        java.util.Set $r3;
        boolean $z0;
        java.lang.Object $r4;
        int $i0, i1;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSet;

        i1 = 0;

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSet: java.util.Set entrySet()>();

        r1 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.apache.commons.collections4.MultiSet$Entry) $r4;

        $i0 = interfaceinvoke r2.<org.apache.commons.collections4.MultiSet$Entry: int getCount()>();

        i1 = i1 + $i0;

        goto label1;

     label2:
        return i1;
    }

    public int getCount(java.lang.Object)
    {
        org.apache.commons.collections4.multiset.AbstractMultiSet r0;
        java.lang.Object r1, r4, $r6;
        java.util.Iterator r2;
        org.apache.commons.collections4.MultiSet$Entry r3;
        java.util.Set $r5;
        boolean $z0, $z1;
        int $i0;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSet;

        r1 := @parameter0: java.lang.Object;

        $r5 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSet: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.commons.collections4.MultiSet$Entry) $r6;

        r4 = interfaceinvoke r3.<org.apache.commons.collections4.MultiSet$Entry: java.lang.Object getElement()>();

        if r4 == r1 goto label2;

        if r4 == null goto label3;

        $z1 = virtualinvoke r4.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label3;

     label2:
        $i0 = interfaceinvoke r3.<org.apache.commons.collections4.MultiSet$Entry: int getCount()>();

        return $i0;

     label3:
        goto label1;

     label4:
        return 0;
    }

    public int setCount(java.lang.Object, int)
    {
        org.apache.commons.collections4.multiset.AbstractMultiSet r0;
        java.lang.Object r1;
        int i0, i1, $i2, $i4;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSet;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Count must not be negative.");

        throw $r2;

     label1:
        i1 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSet: int getCount(java.lang.Object)>(r1);

        if i1 >= i0 goto label2;

        $i4 = i0 - i1;

        virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSet: int add(java.lang.Object,int)>(r1, $i4);

        goto label3;

     label2:
        $i2 = i1 - i0;

        virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSet: int remove(java.lang.Object,int)>(r1, $i2);

     label3:
        return i1;
    }

    public boolean contains(java.lang.Object)
    {
        org.apache.commons.collections4.multiset.AbstractMultiSet r0;
        java.lang.Object r1;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSet;

        r1 := @parameter0: java.lang.Object;

        $i0 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSet: int getCount(java.lang.Object)>(r1);

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.util.Iterator iterator()
    {
        org.apache.commons.collections4.multiset.AbstractMultiSet r0;
        org.apache.commons.collections4.multiset.AbstractMultiSet$MultiSetIterator $r1;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSet;

        $r1 = new org.apache.commons.collections4.multiset.AbstractMultiSet$MultiSetIterator;

        specialinvoke $r1.<org.apache.commons.collections4.multiset.AbstractMultiSet$MultiSetIterator: void <init>(org.apache.commons.collections4.multiset.AbstractMultiSet)>(r0);

        return $r1;
    }

    public boolean add(java.lang.Object)
    {
        org.apache.commons.collections4.multiset.AbstractMultiSet r0;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSet;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSet: int add(java.lang.Object,int)>(r1, 1);

        return 1;
    }

    public int add(java.lang.Object, int)
    {
        org.apache.commons.collections4.multiset.AbstractMultiSet r0;
        java.lang.Object r1;
        int i0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSet;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void clear()
    {
        org.apache.commons.collections4.multiset.AbstractMultiSet r0;
        java.util.Iterator r1;
        java.util.Set $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSet;

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSet: java.util.Set entrySet()>();

        r1 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke r1.<java.util.Iterator: void remove()>();

        goto label1;

     label2:
        return;
    }

    public boolean remove(java.lang.Object)
    {
        org.apache.commons.collections4.multiset.AbstractMultiSet r0;
        java.lang.Object r1;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSet;

        r1 := @parameter0: java.lang.Object;

        $i0 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSet: int remove(java.lang.Object,int)>(r1, 1);

        if $i0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int remove(java.lang.Object, int)
    {
        org.apache.commons.collections4.multiset.AbstractMultiSet r0;
        java.lang.Object r1;
        int i0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSet;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public boolean removeAll(java.util.Collection)
    {
        org.apache.commons.collections4.multiset.AbstractMultiSet r0;
        java.util.Collection r1;
        java.util.Iterator r2;
        java.lang.Object r3;
        boolean $z1, z2, $z3, $z4;
        int $i0, $i1;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSet;

        r1 := @parameter0: java.util.Collection;

        z2 = 0;

        r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $i0 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSet: int getCount(java.lang.Object)>(r3);

        $i1 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSet: int remove(java.lang.Object,int)>(r3, $i0);

        if $i1 == 0 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        if z2 != 0 goto label4;

        if $z3 == 0 goto label5;

     label4:
        $z4 = 1;

        goto label6;

     label5:
        $z4 = 0;

     label6:
        z2 = $z4;

        goto label1;

     label7:
        return z2;
    }

    public java.util.Set uniqueSet()
    {
        org.apache.commons.collections4.multiset.AbstractMultiSet r0;
        java.util.Set $r1, $r2, $r3;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSet;

        $r1 = r0.<org.apache.commons.collections4.multiset.AbstractMultiSet: java.util.Set uniqueSet>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSet: java.util.Set createUniqueSet()>();

        r0.<org.apache.commons.collections4.multiset.AbstractMultiSet: java.util.Set uniqueSet> = $r3;

     label1:
        $r2 = r0.<org.apache.commons.collections4.multiset.AbstractMultiSet: java.util.Set uniqueSet>;

        return $r2;
    }

    protected java.util.Set createUniqueSet()
    {
        org.apache.commons.collections4.multiset.AbstractMultiSet r0;
        org.apache.commons.collections4.multiset.AbstractMultiSet$UniqueSet $r1;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSet;

        $r1 = new org.apache.commons.collections4.multiset.AbstractMultiSet$UniqueSet;

        specialinvoke $r1.<org.apache.commons.collections4.multiset.AbstractMultiSet$UniqueSet: void <init>(org.apache.commons.collections4.multiset.AbstractMultiSet)>(r0);

        return $r1;
    }

    protected java.util.Iterator createUniqueSetIterator()
    {
        org.apache.commons.collections4.multiset.AbstractMultiSet r0;
        org.apache.commons.collections4.multiset.AbstractMultiSet$1 $r2;
        java.util.Set $r3;
        java.util.Iterator $r4, $r5;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSet;

        $r2 = new org.apache.commons.collections4.multiset.AbstractMultiSet$1;

        specialinvoke $r2.<org.apache.commons.collections4.multiset.AbstractMultiSet$1: void <init>(org.apache.commons.collections4.multiset.AbstractMultiSet)>(r0);

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSet: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

        $r5 = staticinvoke <org.apache.commons.collections4.IteratorUtils: java.util.Iterator transformedIterator(java.util.Iterator,org.apache.commons.collections4.Transformer)>($r4, $r2);

        return $r5;
    }

    public java.util.Set entrySet()
    {
        org.apache.commons.collections4.multiset.AbstractMultiSet r0;
        java.util.Set $r1, $r2, $r3;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSet;

        $r1 = r0.<org.apache.commons.collections4.multiset.AbstractMultiSet: java.util.Set entrySet>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSet: java.util.Set createEntrySet()>();

        r0.<org.apache.commons.collections4.multiset.AbstractMultiSet: java.util.Set entrySet> = $r3;

     label1:
        $r2 = r0.<org.apache.commons.collections4.multiset.AbstractMultiSet: java.util.Set entrySet>;

        return $r2;
    }

    protected java.util.Set createEntrySet()
    {
        org.apache.commons.collections4.multiset.AbstractMultiSet r0;
        org.apache.commons.collections4.multiset.AbstractMultiSet$EntrySet $r1;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSet;

        $r1 = new org.apache.commons.collections4.multiset.AbstractMultiSet$EntrySet;

        specialinvoke $r1.<org.apache.commons.collections4.multiset.AbstractMultiSet$EntrySet: void <init>(org.apache.commons.collections4.multiset.AbstractMultiSet)>(r0);

        return $r1;
    }

    protected abstract int uniqueElements();

    protected abstract java.util.Iterator createEntrySetIterator();

    protected void doWriteObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        org.apache.commons.collections4.multiset.AbstractMultiSet r0;
        java.io.ObjectOutputStream r1;
        java.util.Iterator r2;
        org.apache.commons.collections4.MultiSet$Entry r3;
        java.util.Set $r4, $r5;
        int $i0, $i1;
        boolean $z0;
        java.lang.Object $r6, $r7;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSet;

        r1 := @parameter0: java.io.ObjectOutputStream;

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSet: java.util.Set entrySet()>();

        $i0 = interfaceinvoke $r4.<java.util.Set: int size()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i0);

        $r5 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSet: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.commons.collections4.MultiSet$Entry) $r6;

        $r7 = interfaceinvoke r3.<org.apache.commons.collections4.MultiSet$Entry: java.lang.Object getElement()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r7);

        $i1 = interfaceinvoke r3.<org.apache.commons.collections4.MultiSet$Entry: int getCount()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i1);

        goto label1;

     label2:
        return;
    }

    protected void doReadObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.commons.collections4.multiset.AbstractMultiSet r0;
        java.io.ObjectInputStream r1;
        int i0, i1, i3;
        java.lang.Object r2;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSet;

        r1 := @parameter0: java.io.ObjectInputStream;

        i0 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

        i3 = 0;

     label1:
        if i3 >= i0 goto label2;

        r2 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        i1 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

        virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSet: int setCount(java.lang.Object,int)>(r2, i1);

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.commons.collections4.multiset.AbstractMultiSet r0;
        java.lang.Object r1, $r6, $r7, $r8;
        org.apache.commons.collections4.MultiSet r2;
        java.util.Iterator r3;
        org.apache.commons.collections4.MultiSet$Entry r4;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3;
        java.util.Set $r5;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSet;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.apache.commons.collections4.MultiSet;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.apache.commons.collections4.MultiSet) r1;

        $i0 = interfaceinvoke r2.<org.apache.commons.collections4.MultiSet: int size()>();

        $i1 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSet: int size()>();

        if $i0 == $i1 goto label3;

        return 0;

     label3:
        $r5 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSet: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.commons.collections4.MultiSet$Entry) $r6;

        $r7 = interfaceinvoke r4.<org.apache.commons.collections4.MultiSet$Entry: java.lang.Object getElement()>();

        $i2 = interfaceinvoke r2.<org.apache.commons.collections4.MultiSet: int getCount(java.lang.Object)>($r7);

        $r8 = interfaceinvoke r4.<org.apache.commons.collections4.MultiSet$Entry: java.lang.Object getElement()>();

        $i3 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSet: int getCount(java.lang.Object)>($r8);

        if $i2 == $i3 goto label5;

        return 0;

     label5:
        goto label4;

     label6:
        return 1;
    }

    public int hashCode()
    {
        org.apache.commons.collections4.multiset.AbstractMultiSet r0;
        java.util.Set $r1;
        int $i0;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSet;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSet: java.util.Set entrySet()>();

        $i0 = interfaceinvoke $r1.<java.util.Set: int hashCode()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        org.apache.commons.collections4.multiset.AbstractMultiSet r0;
        java.util.Set $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSet;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSet: java.util.Set entrySet()>();

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }
}
