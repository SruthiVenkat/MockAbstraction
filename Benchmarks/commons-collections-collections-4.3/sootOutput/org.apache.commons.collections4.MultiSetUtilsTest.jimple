public class org.apache.commons.collections4.MultiSetUtilsTest extends java.lang.Object
{
    private java.lang.String[] fullArray;
    private org.apache.commons.collections4.MultiSet multiSet;

    public void <init>()
    {
        org.apache.commons.collections4.MultiSetUtilsTest r0;

        r0 := @this: org.apache.commons.collections4.MultiSetUtilsTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void setUp()
    {
        org.apache.commons.collections4.MultiSetUtilsTest r0;
        java.lang.String[] $r1, $r3;
        org.apache.commons.collections4.multiset.HashMultiSet $r2;
        java.util.List $r4;

        r0 := @this: org.apache.commons.collections4.MultiSetUtilsTest;

        $r1 = newarray (java.lang.String)[7];

        $r1[0] = "a";

        $r1[1] = "a";

        $r1[2] = "b";

        $r1[3] = "c";

        $r1[4] = "d";

        $r1[5] = "d";

        $r1[6] = "d";

        r0.<org.apache.commons.collections4.MultiSetUtilsTest: java.lang.String[] fullArray> = $r1;

        $r2 = new org.apache.commons.collections4.multiset.HashMultiSet;

        $r3 = r0.<org.apache.commons.collections4.MultiSetUtilsTest: java.lang.String[] fullArray>;

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        specialinvoke $r2.<org.apache.commons.collections4.multiset.HashMultiSet: void <init>(java.util.Collection)>($r4);

        r0.<org.apache.commons.collections4.MultiSetUtilsTest: org.apache.commons.collections4.MultiSet multiSet> = $r2;

        return;
    }

    public void testEmptyMultiSet()
    {
        org.apache.commons.collections4.MultiSetUtilsTest r0;
        org.apache.commons.collections4.MultiSet r1;
        int $i0;
        long $l1;
        java.lang.Integer $r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: org.apache.commons.collections4.MultiSetUtilsTest;

        r1 = staticinvoke <org.apache.commons.collections4.MultiSetUtils: org.apache.commons.collections4.MultiSet emptyMultiSet()>();

        $i0 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

     label1:
        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(55);

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>($r3);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Empty multi set must be read-only");

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
    }

    public void testUnmodifiableMultiSet()
    {
        org.apache.commons.collections4.MultiSetUtilsTest r0;
        org.apache.commons.collections4.MultiSet r1, $r2, $r3;
        java.lang.NullPointerException $r5;
        java.lang.UnsupportedOperationException $r6;

        r0 := @this: org.apache.commons.collections4.MultiSetUtilsTest;

        $r2 = r0.<org.apache.commons.collections4.MultiSetUtilsTest: org.apache.commons.collections4.MultiSet multiSet>;

        r1 = staticinvoke <org.apache.commons.collections4.MultiSetUtils: org.apache.commons.collections4.MultiSet unmodifiableMultiSet(org.apache.commons.collections4.MultiSet)>($r2);

        $r3 = r0.<org.apache.commons.collections4.MultiSetUtilsTest: org.apache.commons.collections4.MultiSet multiSet>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r3, r1);

     label1:
        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("a");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Empty multi set must be read-only");

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        staticinvoke <org.apache.commons.collections4.MultiSetUtils: org.apache.commons.collections4.MultiSet unmodifiableMultiSet(org.apache.commons.collections4.MultiSet)>(null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting NPE");

     label5:
        goto label7;

     label6:
        $r5 := @caughtexception;

     label7:
        return;

        catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
        catch java.lang.NullPointerException from label4 to label5 with label6;
    }

    public void testSynchronizedMultiSet()
    {
        org.apache.commons.collections4.MultiSetUtilsTest r0;
        org.apache.commons.collections4.MultiSet r1, $r2, $r3;

        r0 := @this: org.apache.commons.collections4.MultiSetUtilsTest;

        $r2 = r0.<org.apache.commons.collections4.MultiSetUtilsTest: org.apache.commons.collections4.MultiSet multiSet>;

        r1 = staticinvoke <org.apache.commons.collections4.MultiSetUtils: org.apache.commons.collections4.MultiSet synchronizedMultiSet(org.apache.commons.collections4.MultiSet)>($r2);

        $r3 = r0.<org.apache.commons.collections4.MultiSetUtilsTest: org.apache.commons.collections4.MultiSet multiSet>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r3, r1);

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("a");

        return;
    }

    public void testPredicatedMultiSet()
    {
        org.apache.commons.collections4.MultiSetUtilsTest r0;
        org.apache.commons.collections4.MultiSet r2, $r4, $r5, $r6, $r8, $r11;
        org.apache.commons.collections4.MultiSetUtilsTest$1 $r3;
        int $i0, $i2, $i4, $i6;
        long $l1, $l3, $l5, $l7;
        org.apache.commons.collections4.MultiSetUtilsTest$2 $r10;
        java.lang.IllegalArgumentException $r13;
        java.lang.NullPointerException $r14, $r15;

        r0 := @this: org.apache.commons.collections4.MultiSetUtilsTest;

        $r3 = new org.apache.commons.collections4.MultiSetUtilsTest$1;

        specialinvoke $r3.<org.apache.commons.collections4.MultiSetUtilsTest$1: void <init>(org.apache.commons.collections4.MultiSetUtilsTest)>(r0);

        $r4 = r0.<org.apache.commons.collections4.MultiSetUtilsTest: org.apache.commons.collections4.MultiSet multiSet>;

        r2 = staticinvoke <org.apache.commons.collections4.MultiSetUtils: org.apache.commons.collections4.MultiSet predicatedMultiSet(org.apache.commons.collections4.MultiSet,org.apache.commons.collections4.Predicate)>($r4, $r3);

        $r5 = r0.<org.apache.commons.collections4.MultiSetUtilsTest: org.apache.commons.collections4.MultiSet multiSet>;

        $i0 = interfaceinvoke $r5.<org.apache.commons.collections4.MultiSet: int size()>();

        $l1 = (long) $i0;

        $i2 = interfaceinvoke r2.<org.apache.commons.collections4.MultiSet: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, $l3);

        $r6 = r0.<org.apache.commons.collections4.MultiSetUtilsTest: org.apache.commons.collections4.MultiSet multiSet>;

        $i4 = interfaceinvoke $r6.<org.apache.commons.collections4.MultiSet: int getCount(java.lang.Object)>("a");

        $l5 = (long) $i4;

        $i6 = interfaceinvoke r2.<org.apache.commons.collections4.MultiSet: int getCount(java.lang.Object)>("a");

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l5, $l7);

     label01:
        staticinvoke <org.apache.commons.collections4.MultiSetUtils: org.apache.commons.collections4.MultiSet predicatedMultiSet(org.apache.commons.collections4.MultiSet,org.apache.commons.collections4.Predicate)>(null, $r3);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting NPE");

     label02:
        goto label04;

     label03:
        $r15 := @caughtexception;

     label04:
        $r8 = r0.<org.apache.commons.collections4.MultiSetUtilsTest: org.apache.commons.collections4.MultiSet multiSet>;

        staticinvoke <org.apache.commons.collections4.MultiSetUtils: org.apache.commons.collections4.MultiSet predicatedMultiSet(org.apache.commons.collections4.MultiSet,org.apache.commons.collections4.Predicate)>($r8, null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting NPE");

     label05:
        goto label07;

     label06:
        $r14 := @caughtexception;

     label07:
        $r11 = r0.<org.apache.commons.collections4.MultiSetUtilsTest: org.apache.commons.collections4.MultiSet multiSet>;

        $r10 = new org.apache.commons.collections4.MultiSetUtilsTest$2;

        specialinvoke $r10.<org.apache.commons.collections4.MultiSetUtilsTest$2: void <init>(org.apache.commons.collections4.MultiSetUtilsTest)>(r0);

        staticinvoke <org.apache.commons.collections4.MultiSetUtils: org.apache.commons.collections4.MultiSet predicatedMultiSet(org.apache.commons.collections4.MultiSet,org.apache.commons.collections4.Predicate)>($r11, $r10);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Predicate is violated for all elements not being \'a\'");

     label08:
        goto label10;

     label09:
        $r13 := @caughtexception;

     label10:
        return;

        catch java.lang.NullPointerException from label01 to label02 with label03;
        catch java.lang.NullPointerException from label04 to label05 with label06;
        catch java.lang.IllegalArgumentException from label07 to label08 with label09;
    }
}
