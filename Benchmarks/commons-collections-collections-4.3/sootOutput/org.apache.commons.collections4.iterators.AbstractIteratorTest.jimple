public abstract class org.apache.commons.collections4.iterators.AbstractIteratorTest extends org.apache.commons.collections4.AbstractObjectTest
{

    public void <init>(java.lang.String)
    {
        org.apache.commons.collections4.iterators.AbstractIteratorTest r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.collections4.iterators.AbstractIteratorTest;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.collections4.AbstractObjectTest: void <init>(java.lang.String)>(r1);

        return;
    }

    public abstract java.util.Iterator makeEmptyIterator();

    public abstract java.util.Iterator makeObject();

    public boolean supportsEmptyIterator()
    {
        org.apache.commons.collections4.iterators.AbstractIteratorTest r0;

        r0 := @this: org.apache.commons.collections4.iterators.AbstractIteratorTest;

        return 1;
    }

    public boolean supportsFullIterator()
    {
        org.apache.commons.collections4.iterators.AbstractIteratorTest r0;

        r0 := @this: org.apache.commons.collections4.iterators.AbstractIteratorTest;

        return 1;
    }

    public boolean supportsRemove()
    {
        org.apache.commons.collections4.iterators.AbstractIteratorTest r0;

        r0 := @this: org.apache.commons.collections4.iterators.AbstractIteratorTest;

        return 1;
    }

    public void verify()
    {
        org.apache.commons.collections4.iterators.AbstractIteratorTest r0;

        r0 := @this: org.apache.commons.collections4.iterators.AbstractIteratorTest;

        return;
    }

    public void testEmptyIterator()
    {
        org.apache.commons.collections4.iterators.AbstractIteratorTest r0;
        java.util.Iterator r1;
        boolean $z0, $z1;
        java.lang.String $r4;
        java.util.NoSuchElementException $r5;

        r0 := @this: org.apache.commons.collections4.iterators.AbstractIteratorTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractIteratorTest: boolean supportsEmptyIterator()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractIteratorTest: java.util.Iterator makeEmptyIterator()>();

        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractIteratorTest: void assertEquals(java.lang.String,boolean,boolean)>("hasNext() should return false for empty iterators", 0, $z1);

     label2:
        interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractIteratorTest: void fail(java.lang.String)>("NoSuchElementException must be thrown when Iterator is exhausted");

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

     label5:
        virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractIteratorTest: void verify()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractIteratorTest: void assertNotNull(java.lang.Object)>($r4);

        return;

        catch java.util.NoSuchElementException from label2 to label3 with label4;
    }

    public void testFullIterator()
    {
        org.apache.commons.collections4.iterators.AbstractIteratorTest r0;
        java.util.Iterator r1;
        boolean $z0, $z1, $z2;
        java.lang.String $r4;
        java.util.NoSuchElementException $r6, $r7;

        r0 := @this: org.apache.commons.collections4.iterators.AbstractIteratorTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractIteratorTest: boolean supportsFullIterator()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractIteratorTest: java.util.Iterator makeObject()>();

        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractIteratorTest: void assertEquals(java.lang.String,boolean,boolean)>("hasNext() should return true for at least one element", 1, $z1);

     label2:
        interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        staticinvoke <org.apache.commons.collections4.iterators.AbstractIteratorTest: void fail(java.lang.String)>("Full iterators must have at least one element");

     label5:
        $z2 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractIteratorTest: void verify()>();

        goto label5;

     label6:
        interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractIteratorTest: void fail(java.lang.String)>("NoSuchElementException must be thrown when Iterator is exhausted");

     label7:
        goto label9;

     label8:
        $r7 := @caughtexception;

     label9:
        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractIteratorTest: void assertNotNull(java.lang.Object)>($r4);

        return;

        catch java.util.NoSuchElementException from label2 to label3 with label4;
        catch java.util.NoSuchElementException from label6 to label7 with label8;
    }

    public void testRemove()
    {
        org.apache.commons.collections4.iterators.AbstractIteratorTest r0;
        java.util.Iterator r1;
        boolean $z0;
        java.lang.IllegalStateException $r3, $r4;
        java.lang.UnsupportedOperationException $r5;

        r0 := @this: org.apache.commons.collections4.iterators.AbstractIteratorTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractIteratorTest: java.util.Iterator makeObject()>();

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractIteratorTest: boolean supportsRemove()>();

        if $z0 != 0 goto label05;

     label01:
        interfaceinvoke r1.<java.util.Iterator: void remove()>();

     label02:
        goto label04;

     label03:
        $r5 := @caughtexception;

     label04:
        return;

     label05:
        interfaceinvoke r1.<java.util.Iterator: void remove()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractIteratorTest: void fail()>();

     label06:
        goto label08;

     label07:
        $r4 := @caughtexception;

     label08:
        virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractIteratorTest: void verify()>();

        interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke r1.<java.util.Iterator: void remove()>();

     label09:
        interfaceinvoke r1.<java.util.Iterator: void remove()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractIteratorTest: void fail()>();

     label10:
        goto label12;

     label11:
        $r3 := @caughtexception;

     label12:
        return;

        catch java.lang.UnsupportedOperationException from label01 to label02 with label03;
        catch java.lang.IllegalStateException from label05 to label06 with label07;
        catch java.lang.IllegalStateException from label09 to label10 with label11;
    }

    public volatile java.lang.Object makeObject()
    {
        org.apache.commons.collections4.iterators.AbstractIteratorTest r0;
        java.util.Iterator $r1;

        r0 := @this: org.apache.commons.collections4.iterators.AbstractIteratorTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractIteratorTest: java.util.Iterator makeObject()>();

        return $r1;
    }
}
