public class org.apache.commons.collections4.list.TreeListTest extends org.apache.commons.collections4.list.AbstractListTest
{

    public void <init>(java.lang.String)
    {
        org.apache.commons.collections4.list.TreeListTest r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.collections4.list.TreeListTest;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void <init>(java.lang.String)>(r1);

        return;
    }

    public static junit.framework.Test suite()
    {
        junit.framework.TestSuite $r0;

        $r0 = staticinvoke <org.apache.commons.collections4.BulkTest: junit.framework.TestSuite makeSuite(java.lang.Class)>(class "Lorg/apache/commons/collections4/list/TreeListTest;");

        return $r0;
    }

    public static void benchmark(java.util.List)
    {
        java.util.List r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r6, $r8, $r9, $r11, $r13, $r14, $r16, $r18, $r19, $r21, $r23, $r24, $r26, $r28, $r29, $r31, $r33, $r34;
        java.io.PrintStream $r2, $r7, $r12, $r17, $r22, $r27, $r32;
        long $l0, $l1, $l2, $l3, $l4, $l5, $l6, $l7, $l8, $l9, $l10, $l11, $l12, $l13, l16, l18, l20, l22, l25, l28, l31;
        java.lang.String $r5, $r10, $r15, $r20, $r25, $r30, $r35;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        java.lang.Integer $r37, $r39, $r42;
        int $i15, i17, i19, i21, i23, i24, i26, i27, i29, i30, i32, i33;
        boolean $z0;
        java.util.Iterator r43;

        r0 := @parameter0: java.util.List;

        l16 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        i17 = 0;

     label01:
        if i17 >= 100000 goto label02;

        $r42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i17);

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>($r42);

        i17 = i17 + 1;

        goto label01;

     label02:
        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l1 = $l0 - l16;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void print(java.lang.String)>($r5);

        l18 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        i19 = 0;

     label03:
        if i19 >= 200 goto label04;

        interfaceinvoke r0.<java.util.List: java.lang.Object[] toArray()>();

        i19 = i19 + 1;

        goto label03;

     label04:
        $r7 = <java.lang.System: java.io.PrintStream out>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l3 = $l2 - l18;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.io.PrintStream: void print(java.lang.String)>($r10);

        l20 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        i21 = 0;

     label05:
        if i21 >= 100 goto label08;

        r43 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z0 = interfaceinvoke r43.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label07;

        interfaceinvoke r43.<java.util.Iterator: java.lang.Object next()>();

        goto label06;

     label07:
        i21 = i21 + 1;

        goto label05;

     label08:
        $r12 = <java.lang.System: java.io.PrintStream out>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $l4 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l5 = $l4 - l20;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l5);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r12.<java.io.PrintStream: void print(java.lang.String)>($r15);

        l22 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        i23 = 0;

     label09:
        if i23 >= 10000 goto label10;

        $d6 = staticinvoke <java.lang.Math: double random()>();

        $d7 = $d6 * 100000.0;

        i24 = (int) $d7;

        $i15 = neg i24;

        $r39 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i15);

        interfaceinvoke r0.<java.util.List: void add(int,java.lang.Object)>(i24, $r39);

        i23 = i23 + 1;

        goto label09;

     label10:
        $r17 = <java.lang.System: java.io.PrintStream out>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $l6 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l7 = $l6 - l22;

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l7);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r17.<java.io.PrintStream: void print(java.lang.String)>($r20);

        l25 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        i26 = 0;

     label11:
        if i26 >= 50000 goto label12;

        $d4 = staticinvoke <java.lang.Math: double random()>();

        $d5 = $d4 * 110000.0;

        i27 = (int) $d5;

        interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i27);

        i26 = i26 + 1;

        goto label11;

     label12:
        $r22 = <java.lang.System: java.io.PrintStream out>;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $l8 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l9 = $l8 - l25;

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l9);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r22.<java.io.PrintStream: void print(java.lang.String)>($r25);

        l28 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        i29 = 0;

     label13:
        if i29 >= 200 goto label14;

        $d2 = staticinvoke <java.lang.Math: double random()>();

        $d3 = $d2 * 100000.0;

        i30 = (int) $d3;

        $r37 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i30);

        interfaceinvoke r0.<java.util.List: int indexOf(java.lang.Object)>($r37);

        i29 = i29 + 1;

        goto label13;

     label14:
        $r27 = <java.lang.System: java.io.PrintStream out>;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $l10 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l11 = $l10 - l28;

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l11);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r27.<java.io.PrintStream: void print(java.lang.String)>($r30);

        l31 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        i32 = 0;

     label15:
        if i32 >= 10000 goto label16;

        $d0 = staticinvoke <java.lang.Math: double random()>();

        $d1 = $d0 * 100000.0;

        i33 = (int) $d1;

        interfaceinvoke r0.<java.util.List: java.lang.Object remove(int)>(i33);

        i32 = i32 + 1;

        goto label15;

     label16:
        $r32 = <java.lang.System: java.io.PrintStream out>;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $l12 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l13 = $l12 - l31;

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l13);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r32.<java.io.PrintStream: void print(java.lang.String)>($r35);

        return;
    }

    public org.apache.commons.collections4.list.TreeList makeObject()
    {
        org.apache.commons.collections4.list.TreeListTest r0;
        org.apache.commons.collections4.list.TreeList $r1;

        r0 := @this: org.apache.commons.collections4.list.TreeListTest;

        $r1 = new org.apache.commons.collections4.list.TreeList;

        specialinvoke $r1.<org.apache.commons.collections4.list.TreeList: void <init>()>();

        return $r1;
    }

    public void testAddMultiple()
    {
        org.apache.commons.collections4.list.TreeListTest r0;
        org.apache.commons.collections4.list.TreeList r1;
        java.lang.Object $r2, $r3, $r4, $r5, $r6, $r7;

        r0 := @this: org.apache.commons.collections4.list.TreeListTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.list.TreeListTest: org.apache.commons.collections4.list.TreeList makeObject()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("hugo");

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("erna");

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("daniel");

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("andres");

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("harald");

        interfaceinvoke r1.<java.util.List: void add(int,java.lang.Object)>(0, null);

        $r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(java.lang.Object,java.lang.Object)>(null, $r2);

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(1);

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(java.lang.Object,java.lang.Object)>("hugo", $r3);

        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(2);

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(java.lang.Object,java.lang.Object)>("erna", $r4);

        $r5 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(3);

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(java.lang.Object,java.lang.Object)>("daniel", $r5);

        $r6 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(4);

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(java.lang.Object,java.lang.Object)>("andres", $r6);

        $r7 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(5);

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(java.lang.Object,java.lang.Object)>("harald", $r7);

        return;
    }

    public void testRemove()
    {
        org.apache.commons.collections4.list.TreeListTest r0;
        org.apache.commons.collections4.list.TreeList r1;
        java.lang.Object $r2, $r3, $r4, $r5, $r6, $r7, $r9, $r10, $r11, $r12, $r13, $r15, $r16, $r17, $r18, $r20, $r21, $r22;
        int i1, i2, i3, i4, i5, i8, i9, i10, i11, i14, i15, i16, i19, i20;

        r0 := @this: org.apache.commons.collections4.list.TreeListTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.list.TreeListTest: org.apache.commons.collections4.list.TreeList makeObject()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("hugo");

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("erna");

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("daniel");

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("andres");

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("harald");

        interfaceinvoke r1.<java.util.List: void add(int,java.lang.Object)>(0, null);

        i1 = 0 + 1;

        $r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(java.lang.Object,java.lang.Object)>(null, $r2);

        i2 = i1 + 1;

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1);

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(java.lang.Object,java.lang.Object)>("hugo", $r3);

        i3 = i2 + 1;

        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i2);

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(java.lang.Object,java.lang.Object)>("erna", $r4);

        i4 = i3 + 1;

        $r5 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i3);

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(java.lang.Object,java.lang.Object)>("daniel", $r5);

        i5 = i4 + 1;

        $r6 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i4);

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(java.lang.Object,java.lang.Object)>("andres", $r6);

        $r7 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i5);

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(java.lang.Object,java.lang.Object)>("harald", $r7);

        interfaceinvoke r1.<java.util.List: java.lang.Object remove(int)>(0);

        i8 = 0 + 1;

        $r9 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(java.lang.Object,java.lang.Object)>("hugo", $r9);

        i9 = i8 + 1;

        $r10 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i8);

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(java.lang.Object,java.lang.Object)>("erna", $r10);

        i10 = i9 + 1;

        $r11 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i9);

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(java.lang.Object,java.lang.Object)>("daniel", $r11);

        i11 = i10 + 1;

        $r12 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i10);

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(java.lang.Object,java.lang.Object)>("andres", $r12);

        $r13 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i11);

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(java.lang.Object,java.lang.Object)>("harald", $r13);

        interfaceinvoke r1.<java.util.List: java.lang.Object remove(int)>(1);

        i14 = 0 + 1;

        $r15 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(java.lang.Object,java.lang.Object)>("hugo", $r15);

        i15 = i14 + 1;

        $r16 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i14);

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(java.lang.Object,java.lang.Object)>("daniel", $r16);

        i16 = i15 + 1;

        $r17 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i15);

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(java.lang.Object,java.lang.Object)>("andres", $r17);

        $r18 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i16);

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(java.lang.Object,java.lang.Object)>("harald", $r18);

        interfaceinvoke r1.<java.util.List: java.lang.Object remove(int)>(2);

        i19 = 0 + 1;

        $r20 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(java.lang.Object,java.lang.Object)>("hugo", $r20);

        i20 = i19 + 1;

        $r21 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i19);

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(java.lang.Object,java.lang.Object)>("daniel", $r21);

        $r22 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i20);

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(java.lang.Object,java.lang.Object)>("harald", $r22);

        return;
    }

    public void testInsertBefore()
    {
        org.apache.commons.collections4.list.TreeListTest r0;
        org.apache.commons.collections4.list.TreeList r1;
        java.lang.Object $r2, $r3;

        r0 := @this: org.apache.commons.collections4.list.TreeListTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.list.TreeListTest: org.apache.commons.collections4.list.TreeList makeObject()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("erna");

        interfaceinvoke r1.<java.util.List: void add(int,java.lang.Object)>(0, "hugo");

        $r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(java.lang.Object,java.lang.Object)>("hugo", $r2);

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(1);

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(java.lang.Object,java.lang.Object)>("erna", $r3);

        return;
    }

    public void testIndexOf()
    {
        org.apache.commons.collections4.list.TreeListTest r0;
        org.apache.commons.collections4.list.TreeList r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;

        r0 := @this: org.apache.commons.collections4.list.TreeListTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.list.TreeListTest: org.apache.commons.collections4.list.TreeList makeObject()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("0");

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("1");

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("2");

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("3");

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("4");

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("5");

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("6");

        $i0 = interfaceinvoke r1.<java.util.List: int indexOf(java.lang.Object)>("0");

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(int,int)>(0, $i0);

        $i1 = interfaceinvoke r1.<java.util.List: int indexOf(java.lang.Object)>("1");

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(int,int)>(1, $i1);

        $i2 = interfaceinvoke r1.<java.util.List: int indexOf(java.lang.Object)>("2");

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(int,int)>(2, $i2);

        $i3 = interfaceinvoke r1.<java.util.List: int indexOf(java.lang.Object)>("3");

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(int,int)>(3, $i3);

        $i4 = interfaceinvoke r1.<java.util.List: int indexOf(java.lang.Object)>("4");

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(int,int)>(4, $i4);

        $i5 = interfaceinvoke r1.<java.util.List: int indexOf(java.lang.Object)>("5");

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(int,int)>(5, $i5);

        $i6 = interfaceinvoke r1.<java.util.List: int indexOf(java.lang.Object)>("6");

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(int,int)>(6, $i6);

        interfaceinvoke r1.<java.util.List: java.lang.Object set(int,java.lang.Object)>(1, "0");

        $i7 = interfaceinvoke r1.<java.util.List: int indexOf(java.lang.Object)>("0");

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(int,int)>(0, $i7);

        interfaceinvoke r1.<java.util.List: java.lang.Object set(int,java.lang.Object)>(3, "3");

        $i8 = interfaceinvoke r1.<java.util.List: int indexOf(java.lang.Object)>("3");

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(int,int)>(3, $i8);

        interfaceinvoke r1.<java.util.List: java.lang.Object set(int,java.lang.Object)>(2, "3");

        $i9 = interfaceinvoke r1.<java.util.List: int indexOf(java.lang.Object)>("3");

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(int,int)>(2, $i9);

        interfaceinvoke r1.<java.util.List: java.lang.Object set(int,java.lang.Object)>(1, "3");

        $i10 = interfaceinvoke r1.<java.util.List: int indexOf(java.lang.Object)>("3");

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(int,int)>(1, $i10);

        interfaceinvoke r1.<java.util.List: java.lang.Object set(int,java.lang.Object)>(0, "3");

        $i11 = interfaceinvoke r1.<java.util.List: int indexOf(java.lang.Object)>("3");

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(int,int)>(0, $i11);

        return;
    }

    public void testBug35258()
    {
        org.apache.commons.collections4.list.TreeListTest r0;
        java.lang.Integer r1, $r5, $r6, $r7, $r8, $r9, $r10, $r12, $r14, $r16, $r18, $r20, $r22, $r24, $r26, $r28, $r30, $r32;
        java.util.ListIterator r3;
        org.apache.commons.collections4.list.TreeList $r4;
        java.lang.Object $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r25, $r27, $r29, $r31, $r33;
        boolean $z6;

        r0 := @this: org.apache.commons.collections4.list.TreeListTest;

        r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r4 = new org.apache.commons.collections4.list.TreeList;

        specialinvoke $r4.<org.apache.commons.collections4.list.TreeList: void <init>()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r5);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r6);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r7);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r8);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r9);

        interfaceinvoke $r4.<java.util.List: boolean remove(java.lang.Object)>(r1);

        r3 = interfaceinvoke $r4.<java.util.List: java.util.ListIterator listIterator()>();

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r11 = interfaceinvoke r3.<java.util.ListIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r11);

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r13 = interfaceinvoke r3.<java.util.ListIterator: java.lang.Object previous()>();

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(java.lang.Object,java.lang.Object)>($r12, $r13);

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r15 = interfaceinvoke r3.<java.util.ListIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(java.lang.Object,java.lang.Object)>($r14, $r15);

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r17 = interfaceinvoke r3.<java.util.ListIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(java.lang.Object,java.lang.Object)>($r16, $r17);

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r19 = interfaceinvoke r3.<java.util.ListIterator: java.lang.Object previous()>();

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(java.lang.Object,java.lang.Object)>($r18, $r19);

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r21 = interfaceinvoke r3.<java.util.ListIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(java.lang.Object,java.lang.Object)>($r20, $r21);

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r23 = interfaceinvoke r3.<java.util.ListIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(java.lang.Object,java.lang.Object)>($r22, $r23);

        $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r25 = interfaceinvoke r3.<java.util.ListIterator: java.lang.Object previous()>();

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(java.lang.Object,java.lang.Object)>($r24, $r25);

        $r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r27 = interfaceinvoke r3.<java.util.ListIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(java.lang.Object,java.lang.Object)>($r26, $r27);

        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r29 = interfaceinvoke r3.<java.util.ListIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(java.lang.Object,java.lang.Object)>($r28, $r29);

        $r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r31 = interfaceinvoke r3.<java.util.ListIterator: java.lang.Object previous()>();

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(java.lang.Object,java.lang.Object)>($r30, $r31);

        $r32 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r33 = interfaceinvoke r3.<java.util.ListIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(java.lang.Object,java.lang.Object)>($r32, $r33);

        $z6 = interfaceinvoke r3.<java.util.ListIterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(boolean,boolean)>(0, $z6);

        return;
    }

    public void testBugCollections447()
    {
        org.apache.commons.collections4.list.TreeListTest r0;
        java.util.ListIterator r2;
        org.apache.commons.collections4.list.TreeList $r3;
        java.lang.Object $r4, $r6, $r8, $r10;
        java.lang.String $r5, $r7, $r9, $r11;

        r0 := @this: org.apache.commons.collections4.list.TreeListTest;

        $r3 = new org.apache.commons.collections4.list.TreeList;

        specialinvoke $r3.<org.apache.commons.collections4.list.TreeList: void <init>()>();

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>("A");

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>("B");

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>("C");

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>("D");

        r2 = interfaceinvoke $r3.<java.util.List: java.util.ListIterator listIterator()>();

        $r4 = interfaceinvoke r2.<java.util.ListIterator: java.lang.Object next()>();

        $r5 = (java.lang.String) $r4;

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(java.lang.String,java.lang.String)>("A", $r5);

        $r6 = interfaceinvoke r2.<java.util.ListIterator: java.lang.Object next()>();

        $r7 = (java.lang.String) $r6;

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(java.lang.String,java.lang.String)>("B", $r7);

        $r8 = interfaceinvoke r2.<java.util.ListIterator: java.lang.Object previous()>();

        $r9 = (java.lang.String) $r8;

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(java.lang.String,java.lang.String)>("B", $r9);

        interfaceinvoke r2.<java.util.ListIterator: void remove()>();

        $r10 = interfaceinvoke r2.<java.util.ListIterator: java.lang.Object previous()>();

        $r11 = (java.lang.String) $r10;

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(java.lang.String,java.lang.String)>("A", $r11);

        return;
    }

    public void testIterationOrder()
    {
        org.apache.commons.collections4.list.TreeListTest r0;
        java.util.ListIterator r2;
        java.util.ArrayList $r3;
        org.apache.commons.collections4.list.TreeList $r4;
        boolean $z0, $z1;
        java.lang.Object $r5, $r6;
        int $i0, $i1, $i2, i3, i4, i5;
        java.lang.Integer $r7, r9, r10;

        r0 := @this: org.apache.commons.collections4.list.TreeListTest;

        i3 = 1;

     label1:
        if i3 >= 1000 goto label7;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>(i3);

        i4 = 0;

     label2:
        if i4 >= i3 goto label3;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r7);

        i4 = i4 + 1;

        goto label2;

     label3:
        $r4 = new org.apache.commons.collections4.list.TreeList;

        specialinvoke $r4.<org.apache.commons.collections4.list.TreeList: void <init>(java.util.Collection)>($r3);

        r2 = virtualinvoke $r4.<org.apache.commons.collections4.list.TreeList: java.util.ListIterator listIterator()>();

        i5 = 0;

     label4:
        $z0 = interfaceinvoke r2.<java.util.ListIterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r6 = interfaceinvoke r2.<java.util.ListIterator: java.lang.Object next()>();

        r9 = (java.lang.Integer) $r6;

        $i1 = i5;

        i5 = i5 + 1;

        $i2 = virtualinvoke r9.<java.lang.Integer: int intValue()>();

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(int,int)>($i1, $i2);

        goto label4;

     label5:
        $z1 = interfaceinvoke r2.<java.util.ListIterator: boolean hasPrevious()>();

        if $z1 == 0 goto label6;

        $r5 = interfaceinvoke r2.<java.util.ListIterator: java.lang.Object previous()>();

        r10 = (java.lang.Integer) $r5;

        i5 = i5 + -1;

        $i0 = virtualinvoke r10.<java.lang.Integer: int intValue()>();

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(int,int)>(i5, $i0);

        goto label5;

     label6:
        i3 = i3 + 1;

        goto label1;

     label7:
        return;
    }

    public void testIterationOrderAfterAddAll()
    {
        org.apache.commons.collections4.list.TreeListTest r0;
        java.util.ArrayList $r2;
        org.apache.commons.collections4.list.TreeList $r3;
        boolean $z1, $z2;
        java.lang.Object $r4, $r5;
        int $i1, $i2, $i3, i4, i5, i6, i7;
        java.lang.Integer $r6, $r7, r10, r11;
        java.util.ListIterator r9;

        r0 := @this: org.apache.commons.collections4.list.TreeListTest;

        i4 = 0;

     label1:
        if i4 >= 100 goto label9;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>(1000);

        i5 = i4;

     label2:
        if i5 >= 1000 goto label3;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i5);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r7);

        i5 = i5 + 1;

        goto label2;

     label3:
        $r3 = new org.apache.commons.collections4.list.TreeList;

        specialinvoke $r3.<org.apache.commons.collections4.list.TreeList: void <init>()>();

        i6 = 0;

     label4:
        if i6 >= i4 goto label5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i6);

        virtualinvoke $r3.<org.apache.commons.collections4.list.TreeList: boolean add(java.lang.Object)>($r6);

        i6 = i6 + 1;

        goto label4;

     label5:
        virtualinvoke $r3.<org.apache.commons.collections4.list.TreeList: boolean addAll(java.util.Collection)>($r2);

        r9 = virtualinvoke $r3.<org.apache.commons.collections4.list.TreeList: java.util.ListIterator listIterator()>();

        i7 = 0;

     label6:
        $z1 = interfaceinvoke r9.<java.util.ListIterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r5 = interfaceinvoke r9.<java.util.ListIterator: java.lang.Object next()>();

        r10 = (java.lang.Integer) $r5;

        $i2 = i7;

        i7 = i7 + 1;

        $i3 = virtualinvoke r10.<java.lang.Integer: int intValue()>();

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(int,int)>($i2, $i3);

        goto label6;

     label7:
        $z2 = interfaceinvoke r9.<java.util.ListIterator: boolean hasPrevious()>();

        if $z2 == 0 goto label8;

        $r4 = interfaceinvoke r9.<java.util.ListIterator: java.lang.Object previous()>();

        r11 = (java.lang.Integer) $r4;

        i7 = i7 + -1;

        $i1 = virtualinvoke r11.<java.lang.Integer: int intValue()>();

        staticinvoke <org.apache.commons.collections4.list.TreeListTest: void assertEquals(int,int)>(i7, $i1);

        goto label7;

     label8:
        i4 = i4 + 1;

        goto label1;

     label9:
        return;
    }

    public volatile java.util.List makeObject()
    {
        org.apache.commons.collections4.list.TreeListTest r0;
        org.apache.commons.collections4.list.TreeList $r1;

        r0 := @this: org.apache.commons.collections4.list.TreeListTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.list.TreeListTest: org.apache.commons.collections4.list.TreeList makeObject()>();

        return $r1;
    }

    public volatile java.util.Collection makeObject()
    {
        org.apache.commons.collections4.list.TreeListTest r0;
        org.apache.commons.collections4.list.TreeList $r1;

        r0 := @this: org.apache.commons.collections4.list.TreeListTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.list.TreeListTest: org.apache.commons.collections4.list.TreeList makeObject()>();

        return $r1;
    }

    public volatile java.lang.Object makeObject()
    {
        org.apache.commons.collections4.list.TreeListTest r0;
        org.apache.commons.collections4.list.TreeList $r1;

        r0 := @this: org.apache.commons.collections4.list.TreeListTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.list.TreeListTest: org.apache.commons.collections4.list.TreeList makeObject()>();

        return $r1;
    }
}
