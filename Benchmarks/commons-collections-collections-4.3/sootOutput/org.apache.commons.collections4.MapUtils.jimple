public class org.apache.commons.collections4.MapUtils extends java.lang.Object
{
    public static final java.util.SortedMap EMPTY_SORTED_MAP;
    private static final java.lang.String INDENT_STRING;

    private void <init>()
    {
        org.apache.commons.collections4.MapUtils r0;

        r0 := @this: org.apache.commons.collections4.MapUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.Object getObject(java.util.Map, java.lang.Object)
    {
        java.util.Map r0;
        java.lang.Object r1, $r2;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        if r0 == null goto label1;

        $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        return $r2;

     label1:
        return null;
    }

    public static java.lang.String getString(java.util.Map, java.lang.Object)
    {
        java.util.Map r0;
        java.lang.Object r1, r2;
        java.lang.String $r3;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        if r0 == null goto label1;

        r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        if r2 == null goto label1;

        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

        return $r3;

     label1:
        return null;
    }

    public static java.lang.Boolean getBoolean(java.util.Map, java.lang.Object)
    {
        java.util.Map r0;
        java.lang.Object r1, r2;
        java.lang.Number r3;
        boolean $z0, $z1, $z2;
        int $i0;
        java.lang.String $r4;
        java.lang.Boolean $r5, $r6, $r7;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        if r0 == null goto label5;

        r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        if r2 == null goto label5;

        $z0 = r2 instanceof java.lang.Boolean;

        if $z0 == 0 goto label1;

        $r6 = (java.lang.Boolean) r2;

        return $r6;

     label1:
        $z1 = r2 instanceof java.lang.String;

        if $z1 == 0 goto label2;

        $r4 = (java.lang.String) r2;

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r4);

        return $r5;

     label2:
        $z2 = r2 instanceof java.lang.Number;

        if $z2 == 0 goto label5;

        r3 = (java.lang.Number) r2;

        $i0 = virtualinvoke r3.<java.lang.Number: int intValue()>();

        if $i0 == 0 goto label3;

        $r7 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        goto label4;

     label3:
        $r7 = <java.lang.Boolean: java.lang.Boolean FALSE>;

     label4:
        return $r7;

     label5:
        return null;
    }

    public static java.lang.Number getNumber(java.util.Map, java.lang.Object)
    {
        java.util.Map r0;
        java.lang.Object r1, r2;
        boolean $z0, $z1;
        java.text.NumberFormat $r3;
        java.lang.Number $r4, $r5;
        java.text.ParseException $r6;
        java.lang.String r7;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        if r0 == null goto label5;

        r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        if r2 == null goto label5;

        $z0 = r2 instanceof java.lang.Number;

        if $z0 == 0 goto label1;

        $r5 = (java.lang.Number) r2;

        return $r5;

     label1:
        $z1 = r2 instanceof java.lang.String;

        if $z1 == 0 goto label5;

     label2:
        r7 = (java.lang.String) r2;

        $r3 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getInstance()>();

        $r4 = virtualinvoke $r3.<java.text.NumberFormat: java.lang.Number parse(java.lang.String)>(r7);

     label3:
        return $r4;

     label4:
        $r6 := @caughtexception;

     label5:
        return null;

        catch java.text.ParseException from label2 to label3 with label4;
    }

    public static java.lang.Byte getByte(java.util.Map, java.lang.Object)
    {
        java.util.Map r0;
        java.lang.Object r1;
        java.lang.Number r2;
        boolean $z0;
        byte $b0;
        java.lang.Byte $r3, $r4;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        r2 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.Number getNumber(java.util.Map,java.lang.Object)>(r0, r1);

        if r2 != null goto label1;

        return null;

     label1:
        $z0 = r2 instanceof java.lang.Byte;

        if $z0 == 0 goto label2;

        $r4 = (java.lang.Byte) r2;

        return $r4;

     label2:
        $b0 = virtualinvoke r2.<java.lang.Number: byte byteValue()>();

        $r3 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b0);

        return $r3;
    }

    public static java.lang.Short getShort(java.util.Map, java.lang.Object)
    {
        java.util.Map r0;
        java.lang.Object r1;
        java.lang.Number r2;
        boolean $z0;
        short $s0;
        java.lang.Short $r3, $r4;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        r2 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.Number getNumber(java.util.Map,java.lang.Object)>(r0, r1);

        if r2 != null goto label1;

        return null;

     label1:
        $z0 = r2 instanceof java.lang.Short;

        if $z0 == 0 goto label2;

        $r4 = (java.lang.Short) r2;

        return $r4;

     label2:
        $s0 = virtualinvoke r2.<java.lang.Number: short shortValue()>();

        $r3 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>($s0);

        return $r3;
    }

    public static java.lang.Integer getInteger(java.util.Map, java.lang.Object)
    {
        java.util.Map r0;
        java.lang.Object r1;
        java.lang.Number r2;
        boolean $z0;
        int $i0;
        java.lang.Integer $r3, $r4;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        r2 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.Number getNumber(java.util.Map,java.lang.Object)>(r0, r1);

        if r2 != null goto label1;

        return null;

     label1:
        $z0 = r2 instanceof java.lang.Integer;

        if $z0 == 0 goto label2;

        $r4 = (java.lang.Integer) r2;

        return $r4;

     label2:
        $i0 = virtualinvoke r2.<java.lang.Number: int intValue()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r3;
    }

    public static java.lang.Long getLong(java.util.Map, java.lang.Object)
    {
        java.util.Map r0;
        java.lang.Object r1;
        java.lang.Number r2;
        boolean $z0;
        long $l0;
        java.lang.Long $r3, $r4;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        r2 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.Number getNumber(java.util.Map,java.lang.Object)>(r0, r1);

        if r2 != null goto label1;

        return null;

     label1:
        $z0 = r2 instanceof java.lang.Long;

        if $z0 == 0 goto label2;

        $r4 = (java.lang.Long) r2;

        return $r4;

     label2:
        $l0 = virtualinvoke r2.<java.lang.Number: long longValue()>();

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        return $r3;
    }

    public static java.lang.Float getFloat(java.util.Map, java.lang.Object)
    {
        java.util.Map r0;
        java.lang.Object r1;
        java.lang.Number r2;
        boolean $z0;
        float $f0;
        java.lang.Float $r3, $r4;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        r2 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.Number getNumber(java.util.Map,java.lang.Object)>(r0, r1);

        if r2 != null goto label1;

        return null;

     label1:
        $z0 = r2 instanceof java.lang.Float;

        if $z0 == 0 goto label2;

        $r4 = (java.lang.Float) r2;

        return $r4;

     label2:
        $f0 = virtualinvoke r2.<java.lang.Number: float floatValue()>();

        $r3 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        return $r3;
    }

    public static java.lang.Double getDouble(java.util.Map, java.lang.Object)
    {
        java.util.Map r0;
        java.lang.Object r1;
        java.lang.Number r2;
        boolean $z0;
        double $d0;
        java.lang.Double $r3, $r4;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        r2 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.Number getNumber(java.util.Map,java.lang.Object)>(r0, r1);

        if r2 != null goto label1;

        return null;

     label1:
        $z0 = r2 instanceof java.lang.Double;

        if $z0 == 0 goto label2;

        $r4 = (java.lang.Double) r2;

        return $r4;

     label2:
        $d0 = virtualinvoke r2.<java.lang.Number: double doubleValue()>();

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r3;
    }

    public static java.util.Map getMap(java.util.Map, java.lang.Object)
    {
        java.util.Map r0, $r3;
        java.lang.Object r1, r2;
        boolean $z0;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        if r0 == null goto label1;

        r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        if r2 == null goto label1;

        $z0 = r2 instanceof java.util.Map;

        if $z0 == 0 goto label1;

        $r3 = (java.util.Map) r2;

        return $r3;

     label1:
        return null;
    }

    public static java.lang.Object getObject(java.util.Map, java.lang.Object, java.lang.Object)
    {
        java.util.Map r0;
        java.lang.Object r1, r2, r3;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        if r0 == null goto label1;

        r3 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        if r3 == null goto label1;

        return r3;

     label1:
        return r2;
    }

    public static java.lang.String getString(java.util.Map, java.lang.Object, java.lang.String)
    {
        java.util.Map r0;
        java.lang.Object r1;
        java.lang.String r2, r3;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.String;

        r3 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.String getString(java.util.Map,java.lang.Object)>(r0, r1);

        if r3 != null goto label1;

        r3 = r2;

     label1:
        return r3;
    }

    public static java.lang.Boolean getBoolean(java.util.Map, java.lang.Object, java.lang.Boolean)
    {
        java.util.Map r0;
        java.lang.Object r1;
        java.lang.Boolean r2, r3;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Boolean;

        r3 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.Boolean getBoolean(java.util.Map,java.lang.Object)>(r0, r1);

        if r3 != null goto label1;

        r3 = r2;

     label1:
        return r3;
    }

    public static java.lang.Number getNumber(java.util.Map, java.lang.Object, java.lang.Number)
    {
        java.util.Map r0;
        java.lang.Object r1;
        java.lang.Number r2, r3;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Number;

        r3 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.Number getNumber(java.util.Map,java.lang.Object)>(r0, r1);

        if r3 != null goto label1;

        r3 = r2;

     label1:
        return r3;
    }

    public static java.lang.Byte getByte(java.util.Map, java.lang.Object, java.lang.Byte)
    {
        java.util.Map r0;
        java.lang.Object r1;
        java.lang.Byte r2, r3;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Byte;

        r3 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.Byte getByte(java.util.Map,java.lang.Object)>(r0, r1);

        if r3 != null goto label1;

        r3 = r2;

     label1:
        return r3;
    }

    public static java.lang.Short getShort(java.util.Map, java.lang.Object, java.lang.Short)
    {
        java.util.Map r0;
        java.lang.Object r1;
        java.lang.Short r2, r3;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Short;

        r3 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.Short getShort(java.util.Map,java.lang.Object)>(r0, r1);

        if r3 != null goto label1;

        r3 = r2;

     label1:
        return r3;
    }

    public static java.lang.Integer getInteger(java.util.Map, java.lang.Object, java.lang.Integer)
    {
        java.util.Map r0;
        java.lang.Object r1;
        java.lang.Integer r2, r3;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Integer;

        r3 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.Integer getInteger(java.util.Map,java.lang.Object)>(r0, r1);

        if r3 != null goto label1;

        r3 = r2;

     label1:
        return r3;
    }

    public static java.lang.Long getLong(java.util.Map, java.lang.Object, java.lang.Long)
    {
        java.util.Map r0;
        java.lang.Object r1;
        java.lang.Long r2, r3;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Long;

        r3 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.Long getLong(java.util.Map,java.lang.Object)>(r0, r1);

        if r3 != null goto label1;

        r3 = r2;

     label1:
        return r3;
    }

    public static java.lang.Float getFloat(java.util.Map, java.lang.Object, java.lang.Float)
    {
        java.util.Map r0;
        java.lang.Object r1;
        java.lang.Float r2, r3;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Float;

        r3 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.Float getFloat(java.util.Map,java.lang.Object)>(r0, r1);

        if r3 != null goto label1;

        r3 = r2;

     label1:
        return r3;
    }

    public static java.lang.Double getDouble(java.util.Map, java.lang.Object, java.lang.Double)
    {
        java.util.Map r0;
        java.lang.Object r1;
        java.lang.Double r2, r3;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Double;

        r3 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.Double getDouble(java.util.Map,java.lang.Object)>(r0, r1);

        if r3 != null goto label1;

        r3 = r2;

     label1:
        return r3;
    }

    public static java.util.Map getMap(java.util.Map, java.lang.Object, java.util.Map)
    {
        java.util.Map r0, r2, r3;
        java.lang.Object r1;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.util.Map;

        r3 = staticinvoke <org.apache.commons.collections4.MapUtils: java.util.Map getMap(java.util.Map,java.lang.Object)>(r0, r1);

        if r3 != null goto label1;

        r3 = r2;

     label1:
        return r3;
    }

    public static boolean getBooleanValue(java.util.Map, java.lang.Object)
    {
        java.util.Map r0;
        java.lang.Object r1;
        java.lang.Boolean $r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        $r2 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $r3 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.Boolean getBoolean(java.util.Map,java.lang.Object)>(r0, r1);

        $z0 = virtualinvoke $r2.<java.lang.Boolean: boolean equals(java.lang.Object)>($r3);

        return $z0;
    }

    public static byte getByteValue(java.util.Map, java.lang.Object)
    {
        java.util.Map r0;
        java.lang.Object r1;
        java.lang.Byte r2;
        byte $b0;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        r2 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.Byte getByte(java.util.Map,java.lang.Object)>(r0, r1);

        if r2 != null goto label1;

        return 0;

     label1:
        $b0 = virtualinvoke r2.<java.lang.Byte: byte byteValue()>();

        return $b0;
    }

    public static short getShortValue(java.util.Map, java.lang.Object)
    {
        java.util.Map r0;
        java.lang.Object r1;
        java.lang.Short r2;
        short $s0;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        r2 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.Short getShort(java.util.Map,java.lang.Object)>(r0, r1);

        if r2 != null goto label1;

        return 0;

     label1:
        $s0 = virtualinvoke r2.<java.lang.Short: short shortValue()>();

        return $s0;
    }

    public static int getIntValue(java.util.Map, java.lang.Object)
    {
        java.util.Map r0;
        java.lang.Object r1;
        java.lang.Integer r2;
        int $i0;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        r2 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.Integer getInteger(java.util.Map,java.lang.Object)>(r0, r1);

        if r2 != null goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    public static long getLongValue(java.util.Map, java.lang.Object)
    {
        java.util.Map r0;
        java.lang.Object r1;
        java.lang.Long r2;
        long $l0;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        r2 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.Long getLong(java.util.Map,java.lang.Object)>(r0, r1);

        if r2 != null goto label1;

        return 0L;

     label1:
        $l0 = virtualinvoke r2.<java.lang.Long: long longValue()>();

        return $l0;
    }

    public static float getFloatValue(java.util.Map, java.lang.Object)
    {
        java.util.Map r0;
        java.lang.Object r1;
        java.lang.Float r2;
        float $f0;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        r2 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.Float getFloat(java.util.Map,java.lang.Object)>(r0, r1);

        if r2 != null goto label1;

        return 0.0F;

     label1:
        $f0 = virtualinvoke r2.<java.lang.Float: float floatValue()>();

        return $f0;
    }

    public static double getDoubleValue(java.util.Map, java.lang.Object)
    {
        java.util.Map r0;
        java.lang.Object r1;
        java.lang.Double r2;
        double $d0;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        r2 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.Double getDouble(java.util.Map,java.lang.Object)>(r0, r1);

        if r2 != null goto label1;

        return 0.0;

     label1:
        $d0 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        return $d0;
    }

    public static boolean getBooleanValue(java.util.Map, java.lang.Object, boolean)
    {
        java.util.Map r0;
        java.lang.Object r1;
        boolean z0, $z1;
        java.lang.Boolean r2;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        z0 := @parameter2: boolean;

        r2 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.Boolean getBoolean(java.util.Map,java.lang.Object)>(r0, r1);

        if r2 != null goto label1;

        return z0;

     label1:
        $z1 = virtualinvoke r2.<java.lang.Boolean: boolean booleanValue()>();

        return $z1;
    }

    public static byte getByteValue(java.util.Map, java.lang.Object, byte)
    {
        java.util.Map r0;
        java.lang.Object r1;
        byte b0, $b1;
        java.lang.Byte r2;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        b0 := @parameter2: byte;

        r2 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.Byte getByte(java.util.Map,java.lang.Object)>(r0, r1);

        if r2 != null goto label1;

        return b0;

     label1:
        $b1 = virtualinvoke r2.<java.lang.Byte: byte byteValue()>();

        return $b1;
    }

    public static short getShortValue(java.util.Map, java.lang.Object, short)
    {
        java.util.Map r0;
        java.lang.Object r1;
        short s0, $s1;
        java.lang.Short r2;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        s0 := @parameter2: short;

        r2 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.Short getShort(java.util.Map,java.lang.Object)>(r0, r1);

        if r2 != null goto label1;

        return s0;

     label1:
        $s1 = virtualinvoke r2.<java.lang.Short: short shortValue()>();

        return $s1;
    }

    public static int getIntValue(java.util.Map, java.lang.Object, int)
    {
        java.util.Map r0;
        java.lang.Object r1;
        int i0, $i1;
        java.lang.Integer r2;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        i0 := @parameter2: int;

        r2 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.Integer getInteger(java.util.Map,java.lang.Object)>(r0, r1);

        if r2 != null goto label1;

        return i0;

     label1:
        $i1 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        return $i1;
    }

    public static long getLongValue(java.util.Map, java.lang.Object, long)
    {
        java.util.Map r0;
        java.lang.Object r1;
        long l0, $l1;
        java.lang.Long r2;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        l0 := @parameter2: long;

        r2 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.Long getLong(java.util.Map,java.lang.Object)>(r0, r1);

        if r2 != null goto label1;

        return l0;

     label1:
        $l1 = virtualinvoke r2.<java.lang.Long: long longValue()>();

        return $l1;
    }

    public static float getFloatValue(java.util.Map, java.lang.Object, float)
    {
        java.util.Map r0;
        java.lang.Object r1;
        float f0, $f1;
        java.lang.Float r2;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        f0 := @parameter2: float;

        r2 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.Float getFloat(java.util.Map,java.lang.Object)>(r0, r1);

        if r2 != null goto label1;

        return f0;

     label1:
        $f1 = virtualinvoke r2.<java.lang.Float: float floatValue()>();

        return $f1;
    }

    public static double getDoubleValue(java.util.Map, java.lang.Object, double)
    {
        java.util.Map r0;
        java.lang.Object r1;
        double d0, $d1;
        java.lang.Double r2;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        d0 := @parameter2: double;

        r2 = staticinvoke <org.apache.commons.collections4.MapUtils: java.lang.Double getDouble(java.util.Map,java.lang.Object)>(r0, r1);

        if r2 != null goto label1;

        return d0;

     label1:
        $d1 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        return $d1;
    }

    public static java.util.Properties toProperties(java.util.Map)
    {
        java.util.Map r0;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.lang.Object r5, r6, $r9;
        java.util.Properties $r7;
        java.util.Set $r8;
        boolean $z0;

        r0 := @parameter0: java.util.Map;

        $r7 = new java.util.Properties;

        specialinvoke $r7.<java.util.Properties: void <init>()>();

        if r0 == null goto label2;

        $r8 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r9;

        r5 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke $r7.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r6);

        goto label1;

     label2:
        return $r7;
    }

    public static java.util.Map toMap(java.util.ResourceBundle)
    {
        java.util.ResourceBundle r0;
        java.util.Enumeration r1;
        java.lang.String r3;
        java.lang.Object r4, $r6;
        java.util.HashMap $r5;
        boolean $z0;

        r0 := @parameter0: java.util.ResourceBundle;

        r1 = virtualinvoke r0.<java.util.ResourceBundle: java.util.Enumeration getKeys()>();

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r1.<java.util.Enumeration: java.lang.Object nextElement()>();

        r3 = (java.lang.String) $r6;

        r4 = virtualinvoke r0.<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>(r3);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r4);

        goto label1;

     label2:
        return $r5;
    }

    public static void verbosePrint(java.io.PrintStream, java.lang.Object, java.util.Map)
    {
        java.io.PrintStream r0;
        java.lang.Object r1;
        java.util.Map r2;
        java.util.ArrayDeque $r3;

        r0 := @parameter0: java.io.PrintStream;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.util.Map;

        $r3 = new java.util.ArrayDeque;

        specialinvoke $r3.<java.util.ArrayDeque: void <init>()>();

        staticinvoke <org.apache.commons.collections4.MapUtils: void verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,java.util.Deque,boolean)>(r0, r1, r2, $r3, 0);

        return;
    }

    public static void debugPrint(java.io.PrintStream, java.lang.Object, java.util.Map)
    {
        java.io.PrintStream r0;
        java.lang.Object r1;
        java.util.Map r2;
        java.util.ArrayDeque $r3;

        r0 := @parameter0: java.io.PrintStream;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.util.Map;

        $r3 = new java.util.ArrayDeque;

        specialinvoke $r3.<java.util.ArrayDeque: void <init>()>();

        staticinvoke <org.apache.commons.collections4.MapUtils: void verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,java.util.Deque,boolean)>(r0, r1, r2, $r3, 1);

        return;
    }

    private static void verbosePrintInternal(java.io.PrintStream, java.lang.Object, java.util.Map, java.util.Deque, boolean)
    {
        java.io.PrintStream r0;
        java.lang.Object r1, r6, r7, $r16, $r27;
        java.util.Map r2, $r25;
        java.util.Deque r3;
        boolean z0, $z1, $z2, $z3;
        java.util.Iterator r4;
        java.util.Map$Entry r5;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.util.Set $r8;
        java.lang.StringBuilder $r10, $r11, $r14, $r18, $r19, $r20, $r21;
        java.lang.Class $r12, $r23;
        java.lang.String $r13, $r22, $r24, $r28;
        org.apache.commons.collections4.Predicate $r17;

        r0 := @parameter0: java.io.PrintStream;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.util.Map;

        r3 := @parameter3: java.util.Deque;

        z0 := @parameter4: boolean;

        $i1 = interfaceinvoke r3.<java.util.Deque: int size()>();

        staticinvoke <org.apache.commons.collections4.MapUtils: void printIndent(java.io.PrintStream,int)>(r0, $i1);

        if r2 != null goto label02;

        if r1 == null goto label01;

        virtualinvoke r0.<java.io.PrintStream: void print(java.lang.Object)>(r1);

        virtualinvoke r0.<java.io.PrintStream: void print(java.lang.String)>(" = ");

     label01:
        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>("null");

        return;

     label02:
        if r1 == null goto label03;

        virtualinvoke r0.<java.io.PrintStream: void print(java.lang.Object)>(r1);

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>(" = ");

     label03:
        $i2 = interfaceinvoke r3.<java.util.Deque: int size()>();

        staticinvoke <org.apache.commons.collections4.MapUtils: void printIndent(java.io.PrintStream,int)>(r0, $i2);

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>("{");

        interfaceinvoke r3.<java.util.Deque: void addLast(java.lang.Object)>(r2);

        $r8 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>();

        r4 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label04:
        $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label13;

        $r16 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r16;

        r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        r7 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z1 = r7 instanceof java.util.Map;

        if $z1 == 0 goto label07;

        $z2 = interfaceinvoke r3.<java.util.Deque: boolean contains(java.lang.Object)>(r7);

        if $z2 != 0 goto label07;

        if r6 != null goto label05;

        $r27 = "null";

        goto label06;

     label05:
        $r27 = r6;

     label06:
        $r25 = (java.util.Map) r7;

        staticinvoke <org.apache.commons.collections4.MapUtils: void verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,java.util.Deque,boolean)>(r0, $r27, $r25, r3, z0);

        goto label12;

     label07:
        $i4 = interfaceinvoke r3.<java.util.Deque: int size()>();

        staticinvoke <org.apache.commons.collections4.MapUtils: void printIndent(java.io.PrintStream,int)>(r0, $i4);

        virtualinvoke r0.<java.io.PrintStream: void print(java.lang.Object)>(r6);

        virtualinvoke r0.<java.io.PrintStream: void print(java.lang.String)>(" = ");

        $r17 = staticinvoke <org.apache.commons.collections4.PredicateUtils: org.apache.commons.collections4.Predicate equalPredicate(java.lang.Object)>(r7);

        i0 = staticinvoke <org.apache.commons.collections4.IterableUtils: int indexOf(java.lang.Iterable,org.apache.commons.collections4.Predicate)>(r3, $r17);

        if i0 != -1 goto label08;

        virtualinvoke r0.<java.io.PrintStream: void print(java.lang.Object)>(r7);

        goto label10;

     label08:
        $i5 = interfaceinvoke r3.<java.util.Deque: int size()>();

        $i6 = $i5 - 1;

        if $i6 != i0 goto label09;

        virtualinvoke r0.<java.io.PrintStream: void print(java.lang.String)>("(this Map)");

        goto label10;

     label09:
        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(ancestor[");

        $i7 = interfaceinvoke r3.<java.util.Deque: int size()>();

        $i8 = $i7 - 1;

        $i9 = $i8 - i0;

        $i10 = $i9 - 1;

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] Map)");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintStream: void print(java.lang.String)>($r22);

     label10:
        if z0 == 0 goto label11;

        if r7 == null goto label11;

        virtualinvoke r0.<java.io.PrintStream: void print(char)>(32);

        $r23 = virtualinvoke r7.<java.lang.Object: java.lang.Class getClass()>();

        $r24 = virtualinvoke $r23.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>($r24);

        goto label12;

     label11:
        virtualinvoke r0.<java.io.PrintStream: void println()>();

     label12:
        goto label04;

     label13:
        interfaceinvoke r3.<java.util.Deque: java.lang.Object removeLast()>();

        $i3 = interfaceinvoke r3.<java.util.Deque: int size()>();

        staticinvoke <org.apache.commons.collections4.MapUtils: void printIndent(java.io.PrintStream,int)>(r0, $i3);

        if z0 == 0 goto label14;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("} ");

        $r12 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.String getName()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r28 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label15;

     label14:
        $r28 = "}";

     label15:
        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>($r28);

        return;
    }

    private static void printIndent(java.io.PrintStream, int)
    {
        java.io.PrintStream r0;
        int i0, i1;

        r0 := @parameter0: java.io.PrintStream;

        i0 := @parameter1: int;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        virtualinvoke r0.<java.io.PrintStream: void print(java.lang.String)>("    ");

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static java.util.Map invertMap(java.util.Map)
    {
        java.util.Map r0;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.util.HashMap $r4;
        int $i0;
        java.util.Set $r5;
        boolean $z0;
        java.lang.Object $r6, $r7, $r8;

        r0 := @parameter0: java.util.Map;

        $r4 = new java.util.HashMap;

        $i0 = interfaceinvoke r0.<java.util.Map: int size()>();

        specialinvoke $r4.<java.util.HashMap: void <init>(int)>($i0);

        $r5 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r6;

        $r7 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r8);

        goto label1;

     label2:
        return $r4;
    }

    public static void safeAddToMap(java.util.Map, java.lang.Object, java.lang.Object) throws java.lang.NullPointerException
    {
        java.util.Map r0;
        java.lang.Object r1, r2, $r6;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        if r2 != null goto label1;

        $r6 = "";

        goto label2;

     label1:
        $r6 = r2;

     label2:
        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r6);

        return;
    }

    public static java.util.Map putAll(java.util.Map, java.lang.Object[])
    {
        java.util.Map r0;
        java.lang.Object[] r1, $r7, r29;
        java.lang.Object r2, $r3, $r4, $r6, $r13, $r14, $r16, $r17, $r19, $r20, r24, r27;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7, i8, i9, i10, i11;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r8;
        java.lang.StringBuilder $r9, $r10, $r11;
        java.lang.String $r12;
        java.lang.NullPointerException $r22;
        java.util.Map$Entry r25;
        org.apache.commons.collections4.KeyValue r28;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object[];

        if r0 != null goto label01;

        $r22 = new java.lang.NullPointerException;

        specialinvoke $r22.<java.lang.NullPointerException: void <init>(java.lang.String)>("The map must not be null");

        throw $r22;

     label01:
        if r1 == null goto label02;

        $i0 = lengthof r1;

        if $i0 != 0 goto label03;

     label02:
        return r0;

     label03:
        r2 = r1[0];

        $z0 = r2 instanceof java.util.Map$Entry;

        if $z0 == 0 goto label06;

        i5 = lengthof r1;

        i6 = 0;

     label04:
        if i6 >= i5 goto label05;

        r24 = r1[i6];

        r25 = (java.util.Map$Entry) r24;

        $r19 = interfaceinvoke r25.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r20 = interfaceinvoke r25.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, $r20);

        i6 = i6 + 1;

        goto label04;

     label05:
        goto label16;

     label06:
        $z1 = r2 instanceof org.apache.commons.collections4.KeyValue;

        if $z1 == 0 goto label09;

        i7 = lengthof r1;

        i8 = 0;

     label07:
        if i8 >= i7 goto label08;

        r27 = r1[i8];

        r28 = (org.apache.commons.collections4.KeyValue) r27;

        $r16 = interfaceinvoke r28.<org.apache.commons.collections4.KeyValue: java.lang.Object getKey()>();

        $r17 = interfaceinvoke r28.<org.apache.commons.collections4.KeyValue: java.lang.Object getValue()>();

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, $r17);

        i8 = i8 + 1;

        goto label07;

     label08:
        goto label16;

     label09:
        $z2 = r2 instanceof java.lang.Object[];

        if $z2 == 0 goto label14;

        i9 = 0;

     label10:
        $i3 = lengthof r1;

        if i9 >= $i3 goto label13;

        $r6 = r1[i9];

        $r7 = (java.lang.Object[]) $r6;

        r29 = (java.lang.Object[]) $r7;

        if r29 == null goto label11;

        $i4 = lengthof r29;

        if $i4 >= 2 goto label12;

     label11:
        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid array element: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r8;

     label12:
        $r14 = r29[0];

        $r13 = r29[1];

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r13);

        i9 = i9 + 1;

        goto label10;

     label13:
        goto label16;

     label14:
        i10 = 0;

     label15:
        $i1 = lengthof r1;

        $i2 = $i1 - 1;

        if i10 >= $i2 goto label16;

        i11 = i10 + 1;

        $r4 = r1[i10];

        i10 = i11 + 1;

        $r3 = r1[i11];

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r3);

        goto label15;

     label16:
        return r0;
    }

    public static java.util.Map emptyIfNull(java.util.Map)
    {
        java.util.Map r0, $r1;

        r0 := @parameter0: java.util.Map;

        if r0 != null goto label1;

        $r1 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        goto label2;

     label1:
        $r1 = r0;

     label2:
        return $r1;
    }

    public static boolean isEmpty(java.util.Map)
    {
        java.util.Map r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Map;

        if r0 == null goto label1;

        $z0 = interfaceinvoke r0.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public static boolean isNotEmpty(java.util.Map)
    {
        java.util.Map r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Map;

        $z0 = staticinvoke <org.apache.commons.collections4.MapUtils: boolean isEmpty(java.util.Map)>(r0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static java.util.Map synchronizedMap(java.util.Map)
    {
        java.util.Map r0, $r1;

        r0 := @parameter0: java.util.Map;

        $r1 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>(r0);

        return $r1;
    }

    public static java.util.Map unmodifiableMap(java.util.Map)
    {
        java.util.Map r0, $r1;

        r0 := @parameter0: java.util.Map;

        $r1 = staticinvoke <org.apache.commons.collections4.map.UnmodifiableMap: java.util.Map unmodifiableMap(java.util.Map)>(r0);

        return $r1;
    }

    public static org.apache.commons.collections4.IterableMap predicatedMap(java.util.Map, org.apache.commons.collections4.Predicate, org.apache.commons.collections4.Predicate)
    {
        java.util.Map r0;
        org.apache.commons.collections4.Predicate r1, r2;
        org.apache.commons.collections4.map.PredicatedMap $r3;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: org.apache.commons.collections4.Predicate;

        r2 := @parameter2: org.apache.commons.collections4.Predicate;

        $r3 = staticinvoke <org.apache.commons.collections4.map.PredicatedMap: org.apache.commons.collections4.map.PredicatedMap predicatedMap(java.util.Map,org.apache.commons.collections4.Predicate,org.apache.commons.collections4.Predicate)>(r0, r1, r2);

        return $r3;
    }

    public static org.apache.commons.collections4.IterableMap transformedMap(java.util.Map, org.apache.commons.collections4.Transformer, org.apache.commons.collections4.Transformer)
    {
        java.util.Map r0;
        org.apache.commons.collections4.Transformer r1, r2;
        org.apache.commons.collections4.map.TransformedMap $r3;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: org.apache.commons.collections4.Transformer;

        r2 := @parameter2: org.apache.commons.collections4.Transformer;

        $r3 = staticinvoke <org.apache.commons.collections4.map.TransformedMap: org.apache.commons.collections4.map.TransformedMap transformingMap(java.util.Map,org.apache.commons.collections4.Transformer,org.apache.commons.collections4.Transformer)>(r0, r1, r2);

        return $r3;
    }

    public static org.apache.commons.collections4.IterableMap fixedSizeMap(java.util.Map)
    {
        java.util.Map r0;
        org.apache.commons.collections4.map.FixedSizeMap $r1;

        r0 := @parameter0: java.util.Map;

        $r1 = staticinvoke <org.apache.commons.collections4.map.FixedSizeMap: org.apache.commons.collections4.map.FixedSizeMap fixedSizeMap(java.util.Map)>(r0);

        return $r1;
    }

    public static org.apache.commons.collections4.IterableMap lazyMap(java.util.Map, org.apache.commons.collections4.Factory)
    {
        java.util.Map r0;
        org.apache.commons.collections4.Factory r1;
        org.apache.commons.collections4.map.LazyMap $r2;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: org.apache.commons.collections4.Factory;

        $r2 = staticinvoke <org.apache.commons.collections4.map.LazyMap: org.apache.commons.collections4.map.LazyMap lazyMap(java.util.Map,org.apache.commons.collections4.Factory)>(r0, r1);

        return $r2;
    }

    public static org.apache.commons.collections4.IterableMap lazyMap(java.util.Map, org.apache.commons.collections4.Transformer)
    {
        java.util.Map r0;
        org.apache.commons.collections4.Transformer r1;
        org.apache.commons.collections4.map.LazyMap $r2;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: org.apache.commons.collections4.Transformer;

        $r2 = staticinvoke <org.apache.commons.collections4.map.LazyMap: org.apache.commons.collections4.map.LazyMap lazyMap(java.util.Map,org.apache.commons.collections4.Transformer)>(r0, r1);

        return $r2;
    }

    public static org.apache.commons.collections4.OrderedMap orderedMap(java.util.Map)
    {
        java.util.Map r0;
        org.apache.commons.collections4.map.ListOrderedMap $r1;

        r0 := @parameter0: java.util.Map;

        $r1 = staticinvoke <org.apache.commons.collections4.map.ListOrderedMap: org.apache.commons.collections4.map.ListOrderedMap listOrderedMap(java.util.Map)>(r0);

        return $r1;
    }

    public static org.apache.commons.collections4.map.MultiValueMap multiValueMap(java.util.Map)
    {
        java.util.Map r0;
        org.apache.commons.collections4.map.MultiValueMap $r1;

        r0 := @parameter0: java.util.Map;

        $r1 = staticinvoke <org.apache.commons.collections4.map.MultiValueMap: org.apache.commons.collections4.map.MultiValueMap multiValueMap(java.util.Map)>(r0);

        return $r1;
    }

    public static org.apache.commons.collections4.map.MultiValueMap multiValueMap(java.util.Map, java.lang.Class)
    {
        java.util.Map r0;
        java.lang.Class r1;
        org.apache.commons.collections4.map.MultiValueMap $r2;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Class;

        $r2 = staticinvoke <org.apache.commons.collections4.map.MultiValueMap: org.apache.commons.collections4.map.MultiValueMap multiValueMap(java.util.Map,java.lang.Class)>(r0, r1);

        return $r2;
    }

    public static org.apache.commons.collections4.map.MultiValueMap multiValueMap(java.util.Map, org.apache.commons.collections4.Factory)
    {
        java.util.Map r0;
        org.apache.commons.collections4.Factory r1;
        org.apache.commons.collections4.map.MultiValueMap $r2;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: org.apache.commons.collections4.Factory;

        $r2 = staticinvoke <org.apache.commons.collections4.map.MultiValueMap: org.apache.commons.collections4.map.MultiValueMap multiValueMap(java.util.Map,org.apache.commons.collections4.Factory)>(r0, r1);

        return $r2;
    }

    public static java.util.SortedMap synchronizedSortedMap(java.util.SortedMap)
    {
        java.util.SortedMap r0, $r1;

        r0 := @parameter0: java.util.SortedMap;

        $r1 = staticinvoke <java.util.Collections: java.util.SortedMap synchronizedSortedMap(java.util.SortedMap)>(r0);

        return $r1;
    }

    public static java.util.SortedMap unmodifiableSortedMap(java.util.SortedMap)
    {
        java.util.SortedMap r0, $r1;

        r0 := @parameter0: java.util.SortedMap;

        $r1 = staticinvoke <org.apache.commons.collections4.map.UnmodifiableSortedMap: java.util.SortedMap unmodifiableSortedMap(java.util.SortedMap)>(r0);

        return $r1;
    }

    public static java.util.SortedMap predicatedSortedMap(java.util.SortedMap, org.apache.commons.collections4.Predicate, org.apache.commons.collections4.Predicate)
    {
        java.util.SortedMap r0;
        org.apache.commons.collections4.Predicate r1, r2;
        org.apache.commons.collections4.map.PredicatedSortedMap $r3;

        r0 := @parameter0: java.util.SortedMap;

        r1 := @parameter1: org.apache.commons.collections4.Predicate;

        r2 := @parameter2: org.apache.commons.collections4.Predicate;

        $r3 = staticinvoke <org.apache.commons.collections4.map.PredicatedSortedMap: org.apache.commons.collections4.map.PredicatedSortedMap predicatedSortedMap(java.util.SortedMap,org.apache.commons.collections4.Predicate,org.apache.commons.collections4.Predicate)>(r0, r1, r2);

        return $r3;
    }

    public static java.util.SortedMap transformedSortedMap(java.util.SortedMap, org.apache.commons.collections4.Transformer, org.apache.commons.collections4.Transformer)
    {
        java.util.SortedMap r0;
        org.apache.commons.collections4.Transformer r1, r2;
        org.apache.commons.collections4.map.TransformedSortedMap $r3;

        r0 := @parameter0: java.util.SortedMap;

        r1 := @parameter1: org.apache.commons.collections4.Transformer;

        r2 := @parameter2: org.apache.commons.collections4.Transformer;

        $r3 = staticinvoke <org.apache.commons.collections4.map.TransformedSortedMap: org.apache.commons.collections4.map.TransformedSortedMap transformingSortedMap(java.util.SortedMap,org.apache.commons.collections4.Transformer,org.apache.commons.collections4.Transformer)>(r0, r1, r2);

        return $r3;
    }

    public static java.util.SortedMap fixedSizeSortedMap(java.util.SortedMap)
    {
        java.util.SortedMap r0;
        org.apache.commons.collections4.map.FixedSizeSortedMap $r1;

        r0 := @parameter0: java.util.SortedMap;

        $r1 = staticinvoke <org.apache.commons.collections4.map.FixedSizeSortedMap: org.apache.commons.collections4.map.FixedSizeSortedMap fixedSizeSortedMap(java.util.SortedMap)>(r0);

        return $r1;
    }

    public static java.util.SortedMap lazySortedMap(java.util.SortedMap, org.apache.commons.collections4.Factory)
    {
        java.util.SortedMap r0;
        org.apache.commons.collections4.Factory r1;
        org.apache.commons.collections4.map.LazySortedMap $r2;

        r0 := @parameter0: java.util.SortedMap;

        r1 := @parameter1: org.apache.commons.collections4.Factory;

        $r2 = staticinvoke <org.apache.commons.collections4.map.LazySortedMap: org.apache.commons.collections4.map.LazySortedMap lazySortedMap(java.util.SortedMap,org.apache.commons.collections4.Factory)>(r0, r1);

        return $r2;
    }

    public static java.util.SortedMap lazySortedMap(java.util.SortedMap, org.apache.commons.collections4.Transformer)
    {
        java.util.SortedMap r0;
        org.apache.commons.collections4.Transformer r1;
        org.apache.commons.collections4.map.LazySortedMap $r2;

        r0 := @parameter0: java.util.SortedMap;

        r1 := @parameter1: org.apache.commons.collections4.Transformer;

        $r2 = staticinvoke <org.apache.commons.collections4.map.LazySortedMap: org.apache.commons.collections4.map.LazySortedMap lazySortedMap(java.util.SortedMap,org.apache.commons.collections4.Transformer)>(r0, r1);

        return $r2;
    }

    public static void populateMap(java.util.Map, java.lang.Iterable, org.apache.commons.collections4.Transformer)
    {
        java.util.Map r0;
        java.lang.Iterable r1;
        org.apache.commons.collections4.Transformer r2, $r3;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Iterable;

        r2 := @parameter2: org.apache.commons.collections4.Transformer;

        $r3 = staticinvoke <org.apache.commons.collections4.TransformerUtils: org.apache.commons.collections4.Transformer nopTransformer()>();

        staticinvoke <org.apache.commons.collections4.MapUtils: void populateMap(java.util.Map,java.lang.Iterable,org.apache.commons.collections4.Transformer,org.apache.commons.collections4.Transformer)>(r0, r1, r2, $r3);

        return;
    }

    public static void populateMap(java.util.Map, java.lang.Iterable, org.apache.commons.collections4.Transformer, org.apache.commons.collections4.Transformer)
    {
        java.util.Map r0;
        java.lang.Iterable r1;
        org.apache.commons.collections4.Transformer r2, r3;
        java.util.Iterator r4;
        java.lang.Object r5, $r6, $r7;
        boolean $z0;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Iterable;

        r2 := @parameter2: org.apache.commons.collections4.Transformer;

        r3 := @parameter3: org.apache.commons.collections4.Transformer;

        r4 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = interfaceinvoke r2.<org.apache.commons.collections4.Transformer: java.lang.Object transform(java.lang.Object)>(r5);

        $r7 = interfaceinvoke r3.<org.apache.commons.collections4.Transformer: java.lang.Object transform(java.lang.Object)>(r5);

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7);

        goto label1;

     label2:
        return;
    }

    public static void populateMap(org.apache.commons.collections4.MultiMap, java.lang.Iterable, org.apache.commons.collections4.Transformer)
    {
        org.apache.commons.collections4.MultiMap r0;
        java.lang.Iterable r1;
        org.apache.commons.collections4.Transformer r2, $r3;

        r0 := @parameter0: org.apache.commons.collections4.MultiMap;

        r1 := @parameter1: java.lang.Iterable;

        r2 := @parameter2: org.apache.commons.collections4.Transformer;

        $r3 = staticinvoke <org.apache.commons.collections4.TransformerUtils: org.apache.commons.collections4.Transformer nopTransformer()>();

        staticinvoke <org.apache.commons.collections4.MapUtils: void populateMap(org.apache.commons.collections4.MultiMap,java.lang.Iterable,org.apache.commons.collections4.Transformer,org.apache.commons.collections4.Transformer)>(r0, r1, r2, $r3);

        return;
    }

    public static void populateMap(org.apache.commons.collections4.MultiMap, java.lang.Iterable, org.apache.commons.collections4.Transformer, org.apache.commons.collections4.Transformer)
    {
        org.apache.commons.collections4.MultiMap r0;
        java.lang.Iterable r1;
        org.apache.commons.collections4.Transformer r2, r3;
        java.util.Iterator r4;
        java.lang.Object r5, $r6, $r7;
        boolean $z0;

        r0 := @parameter0: org.apache.commons.collections4.MultiMap;

        r1 := @parameter1: java.lang.Iterable;

        r2 := @parameter2: org.apache.commons.collections4.Transformer;

        r3 := @parameter3: org.apache.commons.collections4.Transformer;

        r4 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = interfaceinvoke r2.<org.apache.commons.collections4.Transformer: java.lang.Object transform(java.lang.Object)>(r5);

        $r7 = interfaceinvoke r3.<org.apache.commons.collections4.Transformer: java.lang.Object transform(java.lang.Object)>(r5);

        interfaceinvoke r0.<org.apache.commons.collections4.MultiMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7);

        goto label1;

     label2:
        return;
    }

    public static org.apache.commons.collections4.IterableMap iterableMap(java.util.Map)
    {
        java.util.Map r0;
        boolean $z0;
        org.apache.commons.collections4.IterableMap $r2;
        java.lang.NullPointerException r3;
        org.apache.commons.collections4.MapUtils$1 r4;

        r0 := @parameter0: java.util.Map;

        if r0 != null goto label1;

        r3 = new java.lang.NullPointerException;

        specialinvoke r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("Map must not be null");

        throw r3;

     label1:
        $z0 = r0 instanceof org.apache.commons.collections4.IterableMap;

        if $z0 == 0 goto label2;

        $r2 = (org.apache.commons.collections4.IterableMap) r0;

        goto label3;

     label2:
        r4 = new org.apache.commons.collections4.MapUtils$1;

        $r2 = r4;

        specialinvoke r4.<org.apache.commons.collections4.MapUtils$1: void <init>(java.util.Map)>(r0);

     label3:
        return $r2;
    }

    public static org.apache.commons.collections4.IterableSortedMap iterableSortedMap(java.util.SortedMap)
    {
        java.util.SortedMap r0;
        boolean $z0;
        org.apache.commons.collections4.IterableSortedMap $r2;
        java.lang.NullPointerException r3;
        org.apache.commons.collections4.MapUtils$2 r4;

        r0 := @parameter0: java.util.SortedMap;

        if r0 != null goto label1;

        r3 = new java.lang.NullPointerException;

        specialinvoke r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("Map must not be null");

        throw r3;

     label1:
        $z0 = r0 instanceof org.apache.commons.collections4.IterableSortedMap;

        if $z0 == 0 goto label2;

        $r2 = (org.apache.commons.collections4.IterableSortedMap) r0;

        goto label3;

     label2:
        r4 = new org.apache.commons.collections4.MapUtils$2;

        $r2 = r4;

        specialinvoke r4.<org.apache.commons.collections4.MapUtils$2: void <init>(java.util.SortedMap)>(r0);

     label3:
        return $r2;
    }

    public static int size(java.util.Map)
    {
        java.util.Map r0;
        int $i0;

        r0 := @parameter0: java.util.Map;

        if r0 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $i0 = interfaceinvoke r0.<java.util.Map: int size()>();

     label2:
        return $i0;
    }

    static void <clinit>()
    {
        java.util.TreeMap $r0;
        java.util.SortedMap $r1;

        <org.apache.commons.collections4.MapUtils: java.lang.String INDENT_STRING> = "    ";

        $r0 = new java.util.TreeMap;

        specialinvoke $r0.<java.util.TreeMap: void <init>()>();

        $r1 = staticinvoke <org.apache.commons.collections4.map.UnmodifiableSortedMap: java.util.SortedMap unmodifiableSortedMap(java.util.SortedMap)>($r0);

        <org.apache.commons.collections4.MapUtils: java.util.SortedMap EMPTY_SORTED_MAP> = $r1;

        return;
    }
}
