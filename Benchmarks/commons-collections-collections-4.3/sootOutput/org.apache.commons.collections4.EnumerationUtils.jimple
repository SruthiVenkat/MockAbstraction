public class org.apache.commons.collections4.EnumerationUtils extends java.lang.Object
{

    private void <init>()
    {
        org.apache.commons.collections4.EnumerationUtils r0;

        r0 := @this: org.apache.commons.collections4.EnumerationUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.Object get(java.util.Enumeration, int)
    {
        java.util.Enumeration r0;
        int i0, i1;
        boolean $z0;
        java.lang.IndexOutOfBoundsException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        java.lang.Object $r7;

        r0 := @parameter0: java.util.Enumeration;

        i0 := @parameter1: int;

        i1 = i0;

        staticinvoke <org.apache.commons.collections4.CollectionUtils: void checkIndexBounds(int)>(i0);

     label1:
        $z0 = interfaceinvoke r0.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label3;

        i1 = i1 + -1;

        if i1 != -1 goto label2;

        $r7 = interfaceinvoke r0.<java.util.Enumeration: java.lang.Object nextElement()>();

        return $r7;

     label2:
        interfaceinvoke r0.<java.util.Enumeration: java.lang.Object nextElement()>();

        goto label1;

     label3:
        $r1 = new java.lang.IndexOutOfBoundsException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Entry does not exist: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r5);

        throw $r1;
    }

    public static java.util.List toList(java.util.Enumeration)
    {
        java.util.Enumeration r0;
        org.apache.commons.collections4.iterators.EnumerationIterator $r1;
        java.util.List $r2;

        r0 := @parameter0: java.util.Enumeration;

        $r1 = new org.apache.commons.collections4.iterators.EnumerationIterator;

        specialinvoke $r1.<org.apache.commons.collections4.iterators.EnumerationIterator: void <init>(java.util.Enumeration)>(r0);

        $r2 = staticinvoke <org.apache.commons.collections4.IteratorUtils: java.util.List toList(java.util.Iterator)>($r1);

        return $r2;
    }

    public static java.util.List toList(java.util.StringTokenizer)
    {
        java.util.StringTokenizer r0;
        java.util.ArrayList $r2;
        int $i0;
        boolean $z0;
        java.lang.String $r3;

        r0 := @parameter0: java.util.StringTokenizer;

        $r2 = new java.util.ArrayList;

        $i0 = virtualinvoke r0.<java.util.StringTokenizer: int countTokens()>();

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i0);

     label1:
        $z0 = virtualinvoke r0.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label2;

        $r3 = virtualinvoke r0.<java.util.StringTokenizer: java.lang.String nextToken()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r3);

        goto label1;

     label2:
        return $r2;
    }
}
