public class org.apache.commons.collections4.iterators.ReverseListIterator extends java.lang.Object implements org.apache.commons.collections4.ResettableListIterator
{
    private final java.util.List list;
    private java.util.ListIterator iterator;
    private boolean validForUpdate;

    public void <init>(java.util.List)
    {
        org.apache.commons.collections4.iterators.ReverseListIterator r0;
        java.util.List r1;
        int $i0;
        java.util.ListIterator $r2;
        java.lang.NullPointerException $r3;

        r0 := @this: org.apache.commons.collections4.iterators.ReverseListIterator;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.collections4.iterators.ReverseListIterator: boolean validForUpdate> = 1;

        if r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("List must not be null.");

        throw $r3;

     label1:
        r0.<org.apache.commons.collections4.iterators.ReverseListIterator: java.util.List list> = r1;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $r2 = interfaceinvoke r1.<java.util.List: java.util.ListIterator listIterator(int)>($i0);

        r0.<org.apache.commons.collections4.iterators.ReverseListIterator: java.util.ListIterator iterator> = $r2;

        return;
    }

    public boolean hasNext()
    {
        org.apache.commons.collections4.iterators.ReverseListIterator r0;
        java.util.ListIterator $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.iterators.ReverseListIterator;

        $r1 = r0.<org.apache.commons.collections4.iterators.ReverseListIterator: java.util.ListIterator iterator>;

        $z0 = interfaceinvoke $r1.<java.util.ListIterator: boolean hasPrevious()>();

        return $z0;
    }

    public java.lang.Object next()
    {
        org.apache.commons.collections4.iterators.ReverseListIterator r0;
        java.lang.Object r1;
        java.util.ListIterator $r2;

        r0 := @this: org.apache.commons.collections4.iterators.ReverseListIterator;

        $r2 = r0.<org.apache.commons.collections4.iterators.ReverseListIterator: java.util.ListIterator iterator>;

        r1 = interfaceinvoke $r2.<java.util.ListIterator: java.lang.Object previous()>();

        r0.<org.apache.commons.collections4.iterators.ReverseListIterator: boolean validForUpdate> = 1;

        return r1;
    }

    public int nextIndex()
    {
        org.apache.commons.collections4.iterators.ReverseListIterator r0;
        java.util.ListIterator $r1;
        int $i0;

        r0 := @this: org.apache.commons.collections4.iterators.ReverseListIterator;

        $r1 = r0.<org.apache.commons.collections4.iterators.ReverseListIterator: java.util.ListIterator iterator>;

        $i0 = interfaceinvoke $r1.<java.util.ListIterator: int previousIndex()>();

        return $i0;
    }

    public boolean hasPrevious()
    {
        org.apache.commons.collections4.iterators.ReverseListIterator r0;
        java.util.ListIterator $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.iterators.ReverseListIterator;

        $r1 = r0.<org.apache.commons.collections4.iterators.ReverseListIterator: java.util.ListIterator iterator>;

        $z0 = interfaceinvoke $r1.<java.util.ListIterator: boolean hasNext()>();

        return $z0;
    }

    public java.lang.Object previous()
    {
        org.apache.commons.collections4.iterators.ReverseListIterator r0;
        java.lang.Object r1;
        java.util.ListIterator $r2;

        r0 := @this: org.apache.commons.collections4.iterators.ReverseListIterator;

        $r2 = r0.<org.apache.commons.collections4.iterators.ReverseListIterator: java.util.ListIterator iterator>;

        r1 = interfaceinvoke $r2.<java.util.ListIterator: java.lang.Object next()>();

        r0.<org.apache.commons.collections4.iterators.ReverseListIterator: boolean validForUpdate> = 1;

        return r1;
    }

    public int previousIndex()
    {
        org.apache.commons.collections4.iterators.ReverseListIterator r0;
        java.util.ListIterator $r1;
        int $i0;

        r0 := @this: org.apache.commons.collections4.iterators.ReverseListIterator;

        $r1 = r0.<org.apache.commons.collections4.iterators.ReverseListIterator: java.util.ListIterator iterator>;

        $i0 = interfaceinvoke $r1.<java.util.ListIterator: int nextIndex()>();

        return $i0;
    }

    public void remove()
    {
        org.apache.commons.collections4.iterators.ReverseListIterator r0;
        boolean $z0;
        java.util.ListIterator $r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: org.apache.commons.collections4.iterators.ReverseListIterator;

        $z0 = r0.<org.apache.commons.collections4.iterators.ReverseListIterator: boolean validForUpdate>;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot remove from list until next() or previous() called");

        throw $r2;

     label1:
        $r1 = r0.<org.apache.commons.collections4.iterators.ReverseListIterator: java.util.ListIterator iterator>;

        interfaceinvoke $r1.<java.util.ListIterator: void remove()>();

        return;
    }

    public void set(java.lang.Object)
    {
        org.apache.commons.collections4.iterators.ReverseListIterator r0;
        java.lang.Object r1;
        boolean $z0;
        java.util.ListIterator $r2;
        java.lang.IllegalStateException $r3;

        r0 := @this: org.apache.commons.collections4.iterators.ReverseListIterator;

        r1 := @parameter0: java.lang.Object;

        $z0 = r0.<org.apache.commons.collections4.iterators.ReverseListIterator: boolean validForUpdate>;

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot set to list until next() or previous() called");

        throw $r3;

     label1:
        $r2 = r0.<org.apache.commons.collections4.iterators.ReverseListIterator: java.util.ListIterator iterator>;

        interfaceinvoke $r2.<java.util.ListIterator: void set(java.lang.Object)>(r1);

        return;
    }

    public void add(java.lang.Object)
    {
        org.apache.commons.collections4.iterators.ReverseListIterator r0;
        java.lang.Object r1;
        boolean $z0;
        java.util.ListIterator $r2, $r3;
        java.lang.IllegalStateException $r5;

        r0 := @this: org.apache.commons.collections4.iterators.ReverseListIterator;

        r1 := @parameter0: java.lang.Object;

        $z0 = r0.<org.apache.commons.collections4.iterators.ReverseListIterator: boolean validForUpdate>;

        if $z0 != 0 goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot add to list until next() or previous() called");

        throw $r5;

     label1:
        r0.<org.apache.commons.collections4.iterators.ReverseListIterator: boolean validForUpdate> = 0;

        $r2 = r0.<org.apache.commons.collections4.iterators.ReverseListIterator: java.util.ListIterator iterator>;

        interfaceinvoke $r2.<java.util.ListIterator: void add(java.lang.Object)>(r1);

        $r3 = r0.<org.apache.commons.collections4.iterators.ReverseListIterator: java.util.ListIterator iterator>;

        interfaceinvoke $r3.<java.util.ListIterator: java.lang.Object previous()>();

        return;
    }

    public void reset()
    {
        org.apache.commons.collections4.iterators.ReverseListIterator r0;
        java.util.List $r1, $r2;
        int $i0;
        java.util.ListIterator $r3;

        r0 := @this: org.apache.commons.collections4.iterators.ReverseListIterator;

        $r2 = r0.<org.apache.commons.collections4.iterators.ReverseListIterator: java.util.List list>;

        $r1 = r0.<org.apache.commons.collections4.iterators.ReverseListIterator: java.util.List list>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.ListIterator listIterator(int)>($i0);

        r0.<org.apache.commons.collections4.iterators.ReverseListIterator: java.util.ListIterator iterator> = $r3;

        return;
    }
}
