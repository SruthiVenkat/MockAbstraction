public abstract class org.apache.commons.collections4.collection.AbstractCollectionTest extends org.apache.commons.collections4.AbstractObjectTest
{
    private java.util.Collection collection;
    private java.util.Collection confirmed;

    public void <init>(java.lang.String)
    {
        org.apache.commons.collections4.collection.AbstractCollectionTest r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.collections4.collection.AbstractCollectionTest;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.collections4.AbstractObjectTest: void <init>(java.lang.String)>(r1);

        return;
    }

    public boolean areEqualElementsDistinguishable()
    {
        org.apache.commons.collections4.collection.AbstractCollectionTest r0;

        r0 := @this: org.apache.commons.collections4.collection.AbstractCollectionTest;

        return 0;
    }

    public boolean isAddSupported()
    {
        org.apache.commons.collections4.collection.AbstractCollectionTest r0;

        r0 := @this: org.apache.commons.collections4.collection.AbstractCollectionTest;

        return 1;
    }

    public boolean isRemoveSupported()
    {
        org.apache.commons.collections4.collection.AbstractCollectionTest r0;

        r0 := @this: org.apache.commons.collections4.collection.AbstractCollectionTest;

        return 1;
    }

    public boolean isNullSupported()
    {
        org.apache.commons.collections4.collection.AbstractCollectionTest r0;

        r0 := @this: org.apache.commons.collections4.collection.AbstractCollectionTest;

        return 1;
    }

    public boolean isFailFastSupported()
    {
        org.apache.commons.collections4.collection.AbstractCollectionTest r0;

        r0 := @this: org.apache.commons.collections4.collection.AbstractCollectionTest;

        return 0;
    }

    public boolean isEqualsCheckable()
    {
        org.apache.commons.collections4.collection.AbstractCollectionTest r0;

        r0 := @this: org.apache.commons.collections4.collection.AbstractCollectionTest;

        return 0;
    }

    public void verify()
    {
        org.apache.commons.collections4.collection.AbstractCollectionTest r0;
        int i0, $i1, $i2, i3, i4, i5;
        java.lang.Object[] r1;
        boolean[] r2;
        java.util.Collection $r3, $r4, $r5, $r6, $r7, $r8, $r11, $r14, $r21, $r24;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, z7;
        java.lang.StringBuilder $r9, $r10, $r12, $r13, $r15, $r17, $r18, $r19, $r20, $r22, $r23, $r25;
        java.lang.String $r16, $r26;
        java.lang.Object $r27, $r28, $r29, r32;
        java.util.Iterator r30, r31;

        r0 := @this: org.apache.commons.collections4.collection.AbstractCollectionTest;

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getConfirmed()>();

        i0 = interfaceinvoke $r3.<java.util.Collection: int size()>();

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $i1 = interfaceinvoke $r4.<java.util.Collection: int size()>();

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertEquals(java.lang.String,int,int)>("Collection size should match confirmed collection\'s", i0, $i1);

        $r5 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getConfirmed()>();

        $z0 = interfaceinvoke $r5.<java.util.Collection: boolean isEmpty()>();

        $r6 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $z1 = interfaceinvoke $r6.<java.util.Collection: boolean isEmpty()>();

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertEquals(java.lang.String,boolean,boolean)>("Collection isEmpty() result should match confirmed collection\'s", $z0, $z1);

        r1 = newarray (java.lang.Object)[i0];

        $r7 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getConfirmed()>();

        r30 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

        i3 = 0;

     label01:
        $z2 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label02;

        $i2 = i3;

        i3 = i3 + 1;

        $r29 = interfaceinvoke r30.<java.util.Iterator: java.lang.Object next()>();

        r1[$i2] = $r29;

        goto label01;

     label02:
        r2 = newarray (boolean)[i0];

        $r8 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        r31 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();

     label03:
        $z3 = interfaceinvoke r31.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label10;

        r32 = interfaceinvoke r31.<java.util.Iterator: java.lang.Object next()>();

        z7 = 0;

        i4 = 0;

     label04:
        if i4 >= i0 goto label08;

        $z5 = r2[i4];

        if $z5 == 0 goto label05;

        goto label07;

     label05:
        $r27 = r1[i4];

        if r32 == $r27 goto label06;

        if r32 == null goto label07;

        $r28 = r1[i4];

        $z6 = virtualinvoke r32.<java.lang.Object: boolean equals(java.lang.Object)>($r28);

        if $z6 == 0 goto label07;

     label06:
        r2[i4] = 1;

        z7 = 1;

        goto label08;

     label07:
        i4 = i4 + 1;

        goto label04;

     label08:
        if z7 != 0 goto label09;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Collection should not contain a value that the confirmed collection does not have: ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r32);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nTest: ");

        $r21 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nReal: ");

        $r24 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getConfirmed()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void fail(java.lang.String)>($r26);

     label09:
        goto label03;

     label10:
        i5 = 0;

     label11:
        if i5 >= i0 goto label13;

        $z4 = r2[i5];

        if $z4 != 0 goto label12;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Collection should contain all values that are in the confirmed collection\nTest: ");

        $r11 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nReal: ");

        $r14 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getConfirmed()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void fail(java.lang.String)>($r16);

     label12:
        i5 = i5 + 1;

        goto label11;

     label13:
        return;
    }

    public void resetEmpty()
    {
        org.apache.commons.collections4.collection.AbstractCollectionTest r0;
        java.util.Collection $r1, $r2;

        r0 := @this: org.apache.commons.collections4.collection.AbstractCollectionTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection makeObject()>();

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void setCollection(java.util.Collection)>($r1);

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection makeConfirmedCollection()>();

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void setConfirmed(java.util.Collection)>($r2);

        return;
    }

    public void resetFull()
    {
        org.apache.commons.collections4.collection.AbstractCollectionTest r0;
        java.util.Collection $r1, $r2;

        r0 := @this: org.apache.commons.collections4.collection.AbstractCollectionTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection makeFullCollection()>();

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void setCollection(java.util.Collection)>($r1);

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection makeConfirmedFullCollection()>();

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void setConfirmed(java.util.Collection)>($r2);

        return;
    }

    public abstract java.util.Collection makeConfirmedCollection();

    public abstract java.util.Collection makeConfirmedFullCollection();

    public abstract java.util.Collection makeObject();

    public java.util.Collection makeFullCollection()
    {
        org.apache.commons.collections4.collection.AbstractCollectionTest r0;
        java.util.Collection r1;
        java.lang.Object[] $r2;
        java.util.List $r3;

        r0 := @this: org.apache.commons.collections4.collection.AbstractCollectionTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection makeObject()>();

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.lang.Object[] getFullElements()>();

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        interfaceinvoke r1.<java.util.Collection: boolean addAll(java.util.Collection)>($r3);

        return r1;
    }

    public java.util.Map$Entry cloneMapEntry(java.util.Map$Entry)
    {
        org.apache.commons.collections4.collection.AbstractCollectionTest r0;
        java.util.Map$Entry r1, $r10;
        java.util.HashMap $r3;
        java.lang.Object $r4, $r5, $r9;
        java.util.Set $r7;
        java.util.Iterator $r8;

        r0 := @this: org.apache.commons.collections4.collection.AbstractCollectionTest;

        r1 := @parameter0: java.util.Map$Entry;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        $r4 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r5 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r5);

        $r7 = virtualinvoke $r3.<java.util.HashMap: java.util.Set entrySet()>();

        $r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (java.util.Map$Entry) $r9;

        return $r10;
    }

    public java.lang.Object[] getFullElements()
    {
        org.apache.commons.collections4.collection.AbstractCollectionTest r0;
        boolean $z0;
        java.lang.Object[] $r2, $r4, $r6, $r8, $r9;
        java.lang.Object $r3;
        java.util.ArrayList $r5;
        java.util.List $r7;

        r0 := @this: org.apache.commons.collections4.collection.AbstractCollectionTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: boolean isNullSupported()>();

        if $z0 == 0 goto label1;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.lang.Object[] getFullNonNullElements()>();

        $r7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r6);

        virtualinvoke $r5.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r7);

        virtualinvoke $r5.<java.util.ArrayList: void add(int,java.lang.Object)>(4, null);

        $r8 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object[] toArray()>();

        $r9 = (java.lang.Object[]) $r8;

        return $r9;

     label1:
        $r2 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.lang.Object[] getFullNonNullElements()>();

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (java.lang.Object[]) $r3;

        return $r4;
    }

    public java.lang.Object[] getOtherElements()
    {
        org.apache.commons.collections4.collection.AbstractCollectionTest r0;
        java.lang.Object[] $r1;

        r0 := @this: org.apache.commons.collections4.collection.AbstractCollectionTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.lang.Object[] getOtherNonNullElements()>();

        return $r1;
    }

    public java.lang.Object[] getFullNonNullElements()
    {
        org.apache.commons.collections4.collection.AbstractCollectionTest r0;
        java.lang.Object[] $r1, $r13;
        java.lang.String $r2, $r3, $r8;
        java.lang.Integer $r4, $r5, $r9;
        java.lang.Double $r6;
        java.lang.Float $r7;
        java.lang.Short $r10;
        java.lang.Long $r11;
        java.lang.Byte $r12;

        r0 := @this: org.apache.commons.collections4.collection.AbstractCollectionTest;

        $r1 = newarray (java.lang.Object)[18];

        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(java.lang.String)>("");

        $r1[0] = $r2;

        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(java.lang.String)>("One");

        $r1[1] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r1[2] = $r4;

        $r1[3] = "Three";

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r1[4] = $r5;

        $r1[5] = "One";

        $r6 = new java.lang.Double;

        specialinvoke $r6.<java.lang.Double: void <init>(double)>(5.0);

        $r1[6] = $r6;

        $r7 = new java.lang.Float;

        specialinvoke $r7.<java.lang.Float: void <init>(float)>(6.0F);

        $r1[7] = $r7;

        $r1[8] = "Seven";

        $r1[9] = "Eight";

        $r8 = new java.lang.String;

        specialinvoke $r8.<java.lang.String: void <init>(java.lang.String)>("Nine");

        $r1[10] = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        $r1[11] = $r9;

        $r10 = new java.lang.Short;

        specialinvoke $r10.<java.lang.Short: void <init>(short)>(11);

        $r1[12] = $r10;

        $r11 = new java.lang.Long;

        specialinvoke $r11.<java.lang.Long: void <init>(long)>(12L);

        $r1[13] = $r11;

        $r1[14] = "Thirteen";

        $r1[15] = "14";

        $r1[16] = "15";

        $r12 = new java.lang.Byte;

        specialinvoke $r12.<java.lang.Byte: void <init>(byte)>(16);

        $r1[17] = $r12;

        $r13 = (java.lang.Object[]) $r1;

        return $r13;
    }

    public java.lang.Object[] getOtherNonNullElements()
    {
        org.apache.commons.collections4.collection.AbstractCollectionTest r0;
        java.lang.Object[] $r1, $r9;
        java.lang.Integer $r2;
        java.lang.Float $r3;
        java.lang.Double $r4;
        java.lang.Short $r5;
        java.lang.Byte $r6;
        java.lang.Long $r7;
        java.lang.Character $r8;

        r0 := @this: org.apache.commons.collections4.collection.AbstractCollectionTest;

        $r1 = newarray (java.lang.Object)[9];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r1[0] = $r2;

        $r3 = new java.lang.Float;

        specialinvoke $r3.<java.lang.Float: void <init>(float)>(0.0F);

        $r1[1] = $r3;

        $r4 = new java.lang.Double;

        specialinvoke $r4.<java.lang.Double: void <init>(double)>(0.0);

        $r1[2] = $r4;

        $r1[3] = "Zero";

        $r5 = new java.lang.Short;

        specialinvoke $r5.<java.lang.Short: void <init>(short)>(0);

        $r1[4] = $r5;

        $r6 = new java.lang.Byte;

        specialinvoke $r6.<java.lang.Byte: void <init>(byte)>(0);

        $r1[5] = $r6;

        $r7 = new java.lang.Long;

        specialinvoke $r7.<java.lang.Long: void <init>(long)>(0L);

        $r1[6] = $r7;

        $r8 = new java.lang.Character;

        specialinvoke $r8.<java.lang.Character: void <init>(char)>(0);

        $r1[7] = $r8;

        $r1[8] = "0";

        $r9 = (java.lang.Object[]) $r1;

        return $r9;
    }

    public java.lang.Object[] getFullNonNullStringElements()
    {
        org.apache.commons.collections4.collection.AbstractCollectionTest r0;
        java.lang.Object[] $r1;

        r0 := @this: org.apache.commons.collections4.collection.AbstractCollectionTest;

        $r1 = newarray (java.lang.Object)[16];

        $r1[0] = "If";

        $r1[1] = "the";

        $r1[2] = "dull";

        $r1[3] = "substance";

        $r1[4] = "of";

        $r1[5] = "my";

        $r1[6] = "flesh";

        $r1[7] = "were";

        $r1[8] = "thought";

        $r1[9] = "Injurious";

        $r1[10] = "distance";

        $r1[11] = "could";

        $r1[12] = "not";

        $r1[13] = "stop";

        $r1[14] = "my";

        $r1[15] = "way";

        return $r1;
    }

    public java.lang.Object[] getOtherNonNullStringElements()
    {
        org.apache.commons.collections4.collection.AbstractCollectionTest r0;
        java.lang.Object[] $r1;

        r0 := @this: org.apache.commons.collections4.collection.AbstractCollectionTest;

        $r1 = newarray (java.lang.Object)[16];

        $r1[0] = "For";

        $r1[1] = "then";

        $r1[2] = "despite";

        $r1[3] = "space";

        $r1[4] = "I";

        $r1[5] = "would";

        $r1[6] = "be";

        $r1[7] = "brought";

        $r1[8] = "From";

        $r1[9] = "limits";

        $r1[10] = "far";

        $r1[11] = "remote";

        $r1[12] = "where";

        $r1[13] = "thou";

        $r1[14] = "dost";

        $r1[15] = "stay";

        return $r1;
    }

    public void testCollectionAdd()
    {
        org.apache.commons.collections4.collection.AbstractCollectionTest r0;
        java.lang.Object[] r1;
        boolean z0, $z1, $z3, z5;
        java.util.Collection $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        int $i0, $i1, i2, i3, i4, i5, i6;
        java.lang.Object r10, r12;

        r0 := @this: org.apache.commons.collections4.collection.AbstractCollectionTest;

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: boolean isAddSupported()>();

        if $z1 != 0 goto label1;

        return;

     label1:
        r1 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.lang.Object[] getFullElements()>();

        i2 = lengthof r1;

        i3 = 0;

     label2:
        if i3 >= i2 goto label3;

        r10 = r1[i3];

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void resetEmpty()>();

        $r6 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        z5 = interfaceinvoke $r6.<java.util.Collection: boolean add(java.lang.Object)>(r10);

        $r7 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getConfirmed()>();

        interfaceinvoke $r7.<java.util.Collection: boolean add(java.lang.Object)>(r10);

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertTrue(java.lang.String,boolean)>("Empty collection changed after add", z5);

        $r8 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $i1 = interfaceinvoke $r8.<java.util.Collection: int size()>();

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertEquals(java.lang.String,int,int)>("Collection size is 1 after first add", 1, $i1);

        i3 = i3 + 1;

        goto label2;

     label3:
        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void resetEmpty()>();

        i4 = 0;

        i5 = lengthof r1;

        i6 = 0;

     label4:
        if i6 >= i5 goto label6;

        r12 = r1[i6];

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        z0 = interfaceinvoke $r2.<java.util.Collection: boolean add(java.lang.Object)>(r12);

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getConfirmed()>();

        interfaceinvoke $r3.<java.util.Collection: boolean add(java.lang.Object)>(r12);

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

        if z0 == 0 goto label5;

        i4 = i4 + 1;

     label5:
        $r4 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $i0 = interfaceinvoke $r4.<java.util.Collection: int size()>();

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertEquals(java.lang.String,int,int)>("Collection size should grow after add", i4, $i0);

        $r5 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $z3 = interfaceinvoke $r5.<java.util.Collection: boolean contains(java.lang.Object)>(r12);

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertTrue(java.lang.String,boolean)>("Collection should contain added element", $z3);

        i6 = i6 + 1;

        goto label4;

     label6:
        return;
    }

    public void testCollectionAddAll()
    {
        org.apache.commons.collections4.collection.AbstractCollectionTest r0;
        java.lang.Object r1, r26;
        boolean $z0, $z4, $z5, z6, z7, z8, $z9;
        java.util.Collection $r2, $r4, $r6, $r7, $r9, $r11, $r12, $r13, $r16, $r19, $r21, $r22, $r23;
        java.util.List $r3, $r5, $r8, $r10, $r15, $r18;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7, i8, i9, i10;
        java.lang.Object[] $r14, $r17, r24, r27;

        r0 := @this: org.apache.commons.collections4.collection.AbstractCollectionTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: boolean isAddSupported()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void resetEmpty()>();

        r24 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.lang.Object[] getFullElements()>();

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r24);

        z6 = interfaceinvoke $r2.<java.util.Collection: boolean addAll(java.util.Collection)>($r3);

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getConfirmed()>();

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r24);

        interfaceinvoke $r4.<java.util.Collection: boolean addAll(java.util.Collection)>($r5);

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertTrue(java.lang.String,boolean)>("Empty collection should change after addAll", z6);

        i5 = lengthof r24;

        i6 = 0;

     label2:
        if i6 >= i5 goto label3;

        r26 = r24[i6];

        $r23 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $z5 = interfaceinvoke $r23.<java.util.Collection: boolean contains(java.lang.Object)>(r26);

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertTrue(java.lang.String,boolean)>("Collection should contain added element", $z5);

        i6 = i6 + 1;

        goto label2;

     label3:
        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void resetFull()>();

        $r6 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        i7 = interfaceinvoke $r6.<java.util.Collection: int size()>();

        r27 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.lang.Object[] getOtherElements()>();

        $r7 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $r8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r27);

        z7 = interfaceinvoke $r7.<java.util.Collection: boolean addAll(java.util.Collection)>($r8);

        $r9 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getConfirmed()>();

        $r10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r27);

        interfaceinvoke $r9.<java.util.Collection: boolean addAll(java.util.Collection)>($r10);

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertTrue(java.lang.String,boolean)>("Full collection should change after addAll", z7);

        i8 = lengthof r27;

        i9 = 0;

     label4:
        if i9 >= i8 goto label5;

        r1 = r27[i9];

        $r22 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $z4 = interfaceinvoke $r22.<java.util.Collection: boolean contains(java.lang.Object)>(r1);

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertTrue(java.lang.String,boolean)>("Full collection should contain added element", $z4);

        i9 = i9 + 1;

        goto label4;

     label5:
        $i0 = lengthof r27;

        $i1 = i7 + $i0;

        $r11 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $i2 = interfaceinvoke $r11.<java.util.Collection: int size()>();

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertEquals(java.lang.String,int,int)>("Size should increase after addAll", $i1, $i2);

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void resetFull()>();

        $r12 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        i10 = interfaceinvoke $r12.<java.util.Collection: int size()>();

        $r13 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $r14 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.lang.Object[] getFullElements()>();

        $r15 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r14);

        z8 = interfaceinvoke $r13.<java.util.Collection: boolean addAll(java.util.Collection)>($r15);

        $r16 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getConfirmed()>();

        $r17 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.lang.Object[] getFullElements()>();

        $r18 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r17);

        interfaceinvoke $r16.<java.util.Collection: boolean addAll(java.util.Collection)>($r18);

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

        if z8 == 0 goto label8;

        $r21 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $i4 = interfaceinvoke $r21.<java.util.Collection: int size()>();

        if i10 >= $i4 goto label6;

        $z9 = 1;

        goto label7;

     label6:
        $z9 = 0;

     label7:
        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertTrue(java.lang.String,boolean)>("Size should increase if addAll returns true", $z9);

        goto label9;

     label8:
        $r19 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $i3 = interfaceinvoke $r19.<java.util.Collection: int size()>();

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertEquals(java.lang.String,int,int)>("Size should not change if addAll returns false", i10, $i3);

     label9:
        return;
    }

    public void testUnsupportedAdd()
    {
        org.apache.commons.collections4.collection.AbstractCollectionTest r0;
        boolean $z0;
        java.util.Collection $r1, $r4, $r7, $r10;
        java.lang.Object[] $r2, $r5, $r8, $r11;
        java.lang.Object $r3, $r9;
        java.util.List $r6, $r12;
        java.lang.UnsupportedOperationException $r13, $r14, $r15, $r16;

        r0 := @this: org.apache.commons.collections4.collection.AbstractCollectionTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: boolean isAddSupported()>();

        if $z0 == 0 goto label01;

        return;

     label01:
        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void resetEmpty()>();

     label02:
        $r1 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.lang.Object[] getFullNonNullElements()>();

        $r3 = $r2[0];

        interfaceinvoke $r1.<java.util.Collection: boolean add(java.lang.Object)>($r3);

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void fail(java.lang.String)>("Empty collection should not support add.");

     label03:
        goto label05;

     label04:
        $r16 := @caughtexception;

     label05:
        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

     label06:
        $r4 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $r5 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.lang.Object[] getFullElements()>();

        $r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5);

        interfaceinvoke $r4.<java.util.Collection: boolean addAll(java.util.Collection)>($r6);

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void fail(java.lang.String)>("Empty collection should not support addAll.");

     label07:
        goto label09;

     label08:
        $r15 := @caughtexception;

     label09:
        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void resetFull()>();

     label10:
        $r7 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $r8 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.lang.Object[] getFullNonNullElements()>();

        $r9 = $r8[0];

        interfaceinvoke $r7.<java.util.Collection: boolean add(java.lang.Object)>($r9);

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void fail(java.lang.String)>("Full collection should not support add.");

     label11:
        goto label13;

     label12:
        $r14 := @caughtexception;

     label13:
        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

     label14:
        $r10 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $r11 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.lang.Object[] getOtherElements()>();

        $r12 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r11);

        interfaceinvoke $r10.<java.util.Collection: boolean addAll(java.util.Collection)>($r12);

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void fail(java.lang.String)>("Full collection should not support addAll.");

     label15:
        goto label17;

     label16:
        $r13 := @caughtexception;

     label17:
        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

        return;

        catch java.lang.UnsupportedOperationException from label02 to label03 with label04;
        catch java.lang.UnsupportedOperationException from label06 to label07 with label08;
        catch java.lang.UnsupportedOperationException from label10 to label11 with label12;
        catch java.lang.UnsupportedOperationException from label14 to label15 with label16;
    }

    public void testCollectionClear()
    {
        org.apache.commons.collections4.collection.AbstractCollectionTest r0;
        boolean $z0;
        java.util.Collection $r1, $r2, $r3;

        r0 := @this: org.apache.commons.collections4.collection.AbstractCollectionTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: boolean isRemoveSupported()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void resetEmpty()>();

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        interfaceinvoke $r1.<java.util.Collection: void clear()>();

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void resetFull()>();

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        interfaceinvoke $r2.<java.util.Collection: void clear()>();

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getConfirmed()>();

        interfaceinvoke $r3.<java.util.Collection: void clear()>();

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

        return;
    }

    public void testCollectionContains()
    {
        org.apache.commons.collections4.collection.AbstractCollectionTest r0;
        int i0, $i1, $i2, $i3, i4, i5, i6, i7;
        java.lang.Object r1, $r10, $r17, $r24;
        java.util.Collection $r3, $r9, $r16, $r23;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r11, $r12, $r13, $r14, $r18, $r19, $r20, $r21;
        java.lang.String $r8, $r15, $r22;
        java.lang.Object[] r25, r26, r27, r28;

        r0 := @this: org.apache.commons.collections4.collection.AbstractCollectionTest;

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void resetEmpty()>();

        r25 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.lang.Object[] getFullElements()>();

        i4 = 0;

     label01:
        $i1 = lengthof r25;

        if i4 >= $i1 goto label04;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Empty collection shouldn\'t contain element[");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        $r23 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $r24 = r25[i4];

        $z3 = interfaceinvoke $r23.<java.util.Collection: boolean contains(java.lang.Object)>($r24);

        if $z3 != 0 goto label02;

        $z4 = 1;

        goto label03;

     label02:
        $z4 = 0;

     label03:
        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertTrue(java.lang.String,boolean)>($r22, $z4);

        i4 = i4 + 1;

        goto label01;

     label04:
        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

        r26 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.lang.Object[] getOtherElements()>();

        i5 = 0;

     label05:
        $i2 = lengthof r26;

        if i5 >= $i2 goto label08;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Empty collection shouldn\'t contain element[");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $r17 = r26[i5];

        $z2 = interfaceinvoke $r16.<java.util.Collection: boolean contains(java.lang.Object)>($r17);

        if $z2 != 0 goto label06;

        $z5 = 1;

        goto label07;

     label06:
        $z5 = 0;

     label07:
        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertTrue(java.lang.String,boolean)>($r15, $z5);

        i5 = i5 + 1;

        goto label05;

     label08:
        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void resetFull()>();

        r27 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.lang.Object[] getFullElements()>();

        i6 = 0;

     label09:
        $i3 = lengthof r27;

        if i6 >= $i3 goto label10;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Full collection should contain element[");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $r10 = r27[i6];

        $z1 = interfaceinvoke $r9.<java.util.Collection: boolean contains(java.lang.Object)>($r10);

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertTrue(java.lang.String,boolean)>($r8, $z1);

        i6 = i6 + 1;

        goto label09;

     label10:
        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void resetFull()>();

        r28 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.lang.Object[] getOtherElements()>();

        i0 = lengthof r28;

        i7 = 0;

     label11:
        if i7 >= i0 goto label14;

        r1 = r28[i7];

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $z0 = interfaceinvoke $r3.<java.util.Collection: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label12;

        $z6 = 1;

        goto label13;

     label12:
        $z6 = 0;

     label13:
        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertTrue(java.lang.String,boolean)>("Full collection shouldn\'t contain element", $z6);

        i7 = i7 + 1;

        goto label11;

     label14:
        return;
    }

    public void testCollectionContainsAll()
    {
        org.apache.commons.collections4.collection.AbstractCollectionTest r0;
        byte b0, $b6;
        java.util.HashSet $r1;
        java.util.Collection $r2, $r6, $r8, $r11, $r20, $r21, $r22, $r29;
        boolean $z0, $z2, $z3, $z5, $z8, $z9, $z10, $z11, $z12;
        java.lang.Object[] $r3, $r9, $r12, $r13, $r14, $r15, $r17, $r25, $r27;
        java.util.List $r4, $r10, $r18, r19, $r26, $r28;
        int $i2, $i3, $i4, $i5, $i7;
        java.util.ArrayList $r23;

        r0 := @this: org.apache.commons.collections4.collection.AbstractCollectionTest;

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void resetEmpty()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean containsAll(java.util.Collection)>($r1);

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertTrue(java.lang.String,boolean)>("Every Collection should contain all elements of an empty Collection.", $z0);

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.lang.Object[] getOtherElements()>();

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        interfaceinvoke $r1.<java.util.Collection: boolean addAll(java.util.Collection)>($r4);

        $r6 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $z2 = interfaceinvoke $r6.<java.util.Collection: boolean containsAll(java.util.Collection)>($r1);

        if $z2 != 0 goto label1;

        $z8 = 1;

        goto label2;

     label1:
        $z8 = 0;

     label2:
        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertTrue(java.lang.String,boolean)>("Empty Collection shouldn\'t contain all elements of a non-empty Collection.", $z8);

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void resetFull()>();

        $r8 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $z3 = interfaceinvoke $r8.<java.util.Collection: boolean containsAll(java.util.Collection)>($r1);

        if $z3 != 0 goto label3;

        $z9 = 1;

        goto label4;

     label3:
        $z9 = 0;

     label4:
        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertTrue(java.lang.String,boolean)>("Full collection shouldn\'t contain other elements", $z9);

        interfaceinvoke $r1.<java.util.Collection: void clear()>();

        $r9 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.lang.Object[] getFullElements()>();

        $r10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r9);

        interfaceinvoke $r1.<java.util.Collection: boolean addAll(java.util.Collection)>($r10);

        $r11 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $z5 = interfaceinvoke $r11.<java.util.Collection: boolean containsAll(java.util.Collection)>($r1);

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertTrue(java.lang.String,boolean)>("Full collection should containAll full elements", $z5);

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

        $r12 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.lang.Object[] getFullElements()>();

        $i2 = lengthof $r12;

        if $i2 >= 4 goto label5;

        $b6 = 0;

        goto label6;

     label5:
        $b6 = 2;

     label6:
        b0 = $b6;

        $r13 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.lang.Object[] getFullElements()>();

        $i3 = lengthof $r13;

        if $i3 != 1 goto label7;

        $i7 = 1;

        goto label9;

     label7:
        $r14 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.lang.Object[] getFullElements()>();

        $i4 = lengthof $r14;

        if $i4 > 5 goto label8;

        $r15 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.lang.Object[] getFullElements()>();

        $i5 = lengthof $r15;

        $i7 = $i5 - 1;

        goto label9;

     label8:
        $i7 = 5;

     label9:
        $r17 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.lang.Object[] getFullElements()>();

        $r18 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r17);

        r19 = interfaceinvoke $r18.<java.util.List: java.util.List subList(int,int)>(b0, $i7);

        $r20 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $z10 = interfaceinvoke $r20.<java.util.Collection: boolean containsAll(java.util.Collection)>(r19);

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertTrue(java.lang.String,boolean)>("Full collection should containAll partial full elements", $z10);

        $r21 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $r22 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $z11 = interfaceinvoke $r21.<java.util.Collection: boolean containsAll(java.util.Collection)>($r22);

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertTrue(java.lang.String,boolean)>("Full collection should containAll itself", $z11);

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

        $r23 = new java.util.ArrayList;

        specialinvoke $r23.<java.util.ArrayList: void <init>()>();

        $r25 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.lang.Object[] getFullElements()>();

        $r26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r25);

        interfaceinvoke $r23.<java.util.Collection: boolean addAll(java.util.Collection)>($r26);

        $r27 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.lang.Object[] getFullElements()>();

        $r28 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r27);

        interfaceinvoke $r23.<java.util.Collection: boolean addAll(java.util.Collection)>($r28);

        $r29 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $z12 = interfaceinvoke $r29.<java.util.Collection: boolean containsAll(java.util.Collection)>($r23);

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertTrue(java.lang.String,boolean)>("Full collection should containAll duplicate full elements", $z12);

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

        return;
    }

    public void testCollectionIsEmpty()
    {
        org.apache.commons.collections4.collection.AbstractCollectionTest r0;
        java.util.Collection $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.collections4.collection.AbstractCollectionTest;

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void resetEmpty()>();

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $z0 = interfaceinvoke $r1.<java.util.Collection: boolean isEmpty()>();

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertEquals(java.lang.String,boolean,boolean)>("New Collection should be empty.", 1, $z0);

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void resetFull()>();

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $z1 = interfaceinvoke $r2.<java.util.Collection: boolean isEmpty()>();

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertEquals(java.lang.String,boolean,boolean)>("Full collection shouldn\'t be empty", 0, $z1);

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

        return;
    }

    public void testCollectionIterator()
    {
        org.apache.commons.collections4.collection.AbstractCollectionTest r0;
        java.lang.Object r1;
        java.util.Collection $r2, $r4, $r7, $r9, $r16, $r19;
        boolean $z0, $z1, $z2, $z4, $z5;
        java.util.ArrayList $r6;
        java.util.NoSuchElementException $r11, $r12;
        java.util.Iterator r13, r15, r18;
        int i0, $i1, i2, $i3;

        r0 := @this: org.apache.commons.collections4.collection.AbstractCollectionTest;

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void resetEmpty()>();

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        r13 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertEquals(java.lang.String,boolean,boolean)>("Iterator for empty Collection shouldn\'t have next.", 0, $z0);

     label01:
        interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void fail(java.lang.String)>("Iterator at end of Collection should throw NoSuchElementException when next is called.");

     label02:
        goto label04;

     label03:
        $r12 := @caughtexception;

     label04:
        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void resetFull()>();

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        r15 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

        i0 = 0;

     label05:
        $r16 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $i1 = interfaceinvoke $r16.<java.util.Collection: int size()>();

        if i0 >= $i1 goto label06;

        $z4 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertTrue(java.lang.String,boolean)>("Iterator for full collection should haveNext", $z4);

        interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();

        i0 = i0 + 1;

        goto label05;

     label06:
        $z1 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label07;

        $z5 = 1;

        goto label08;

     label07:
        $z5 = 0;

     label08:
        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertTrue(java.lang.String,boolean)>("Iterator should be finished", $z5);

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $r7 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        r18 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

        i2 = 0;

     label09:
        $r19 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $i3 = interfaceinvoke $r19.<java.util.Collection: int size()>();

        if i2 >= $i3 goto label10;

        r1 = interfaceinvoke r18.<java.util.Iterator: java.lang.Object next()>();

        $r9 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $z2 = interfaceinvoke $r9.<java.util.Collection: boolean contains(java.lang.Object)>(r1);

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertTrue(java.lang.String,boolean)>("Collection should contain element returned by its iterator", $z2);

        virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        i2 = i2 + 1;

        goto label09;

     label10:
        interfaceinvoke r18.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void fail(java.lang.String)>("iterator.next() should raise NoSuchElementException after it finishes");

     label11:
        goto label13;

     label12:
        $r11 := @caughtexception;

     label13:
        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

        return;

        catch java.util.NoSuchElementException from label01 to label02 with label03;
        catch java.util.NoSuchElementException from label10 to label11 with label12;
    }

    public void testCollectionIteratorRemove()
    {
        org.apache.commons.collections4.collection.AbstractCollectionTest r0;
        boolean $z0, $z2, $z3, $z4, $z6;
        java.util.Collection $r1, $r3, $r4, $r5, $r6, $r7, $r9, $r10;
        java.util.Iterator $r2, r16, r18, r20;
        int $i0, i1;
        java.util.Map$Entry $r11;
        java.lang.IllegalStateException $r12, $r13, $r14;
        java.lang.Object r19;

        r0 := @this: org.apache.commons.collections4.collection.AbstractCollectionTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: boolean isRemoveSupported()>();

        if $z0 != 0 goto label01;

        return;

     label01:
        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void resetEmpty()>();

     label02:
        $r1 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

        interfaceinvoke $r2.<java.util.Iterator: void remove()>();

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void fail(java.lang.String)>("New iterator.remove should raise IllegalState");

     label03:
        goto label05;

     label04:
        $r14 := @caughtexception;

     label05:
        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

     label06:
        $r3 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        r16 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

        interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>();

        interfaceinvoke r16.<java.util.Iterator: void remove()>();

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void fail(java.lang.String)>("New iterator.remove should raise IllegalState even after hasNext");

     label07:
        goto label09;

     label08:
        $r13 := @caughtexception;

     label09:
        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void resetFull()>();

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        i1 = interfaceinvoke $r4.<java.util.Collection: int size()>();

        $r5 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        r18 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label10:
        $z6 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label13;

        r19 = interfaceinvoke r18.<java.util.Iterator: java.lang.Object next()>();

        $z3 = r19 instanceof java.util.Map$Entry;

        if $z3 == 0 goto label11;

        $r11 = (java.util.Map$Entry) r19;

        r19 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Map$Entry cloneMapEntry(java.util.Map$Entry)>($r11);

     label11:
        interfaceinvoke r18.<java.util.Iterator: void remove()>();

        $z4 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: boolean areEqualElementsDistinguishable()>();

        if $z4 != 0 goto label12;

        $r10 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getConfirmed()>();

        interfaceinvoke $r10.<java.util.Collection: boolean remove(java.lang.Object)>(r19);

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

     label12:
        i1 = i1 + -1;

        $r9 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $i0 = interfaceinvoke $r9.<java.util.Collection: int size()>();

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertEquals(java.lang.String,int,int)>("Collection should shrink by one after iterator.remove", i1, $i0);

        goto label10;

     label13:
        $r6 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $z2 = interfaceinvoke $r6.<java.util.Collection: boolean isEmpty()>();

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertTrue(java.lang.String,boolean)>("Collection should be empty after iterator purge", $z2);

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void resetFull()>();

        $r7 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        r20 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

        interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke r20.<java.util.Iterator: void remove()>();

     label14:
        interfaceinvoke r20.<java.util.Iterator: void remove()>();

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void fail(java.lang.String)>("Second iter.remove should raise IllegalState");

     label15:
        goto label17;

     label16:
        $r12 := @caughtexception;

     label17:
        return;

        catch java.lang.IllegalStateException from label02 to label03 with label04;
        catch java.lang.IllegalStateException from label06 to label07 with label08;
        catch java.lang.IllegalStateException from label14 to label15 with label16;
    }

    public void testCollectionRemove()
    {
        org.apache.commons.collections4.collection.AbstractCollectionTest r0;
        java.lang.Object[] r1, r17;
        java.lang.Object r2, r16, r19;
        boolean $z0, $z1, $z2, $z4, $z5, $z6, $z7;
        java.util.Collection $r3, $r8, $r9, $r10, $r12, $r14;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;
        int $i0, $i1, i2, i3, i4, i5, i6, i7, i8;

        r0 := @this: org.apache.commons.collections4.collection.AbstractCollectionTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: boolean isRemoveSupported()>();

        if $z0 != 0 goto label01;

        return;

     label01:
        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void resetEmpty()>();

        r1 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.lang.Object[] getFullElements()>();

        i2 = lengthof r1;

        i3 = 0;

     label02:
        if i3 >= i2 goto label05;

        r16 = r1[i3];

        $r14 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $z5 = interfaceinvoke $r14.<java.util.Collection: boolean remove(java.lang.Object)>(r16);

        if $z5 != 0 goto label03;

        $z6 = 1;

        goto label04;

     label03:
        $z6 = 0;

     label04:
        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertTrue(java.lang.String,boolean)>("Shouldn\'t remove nonexistent element", $z6);

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

        i3 = i3 + 1;

        goto label02;

     label05:
        r17 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.lang.Object[] getOtherElements()>();

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void resetFull()>();

        i4 = lengthof r17;

        i5 = 0;

     label06:
        if i5 >= i4 goto label09;

        r19 = r17[i5];

        $r12 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $z4 = interfaceinvoke $r12.<java.util.Collection: boolean remove(java.lang.Object)>(r19);

        if $z4 != 0 goto label07;

        $z7 = 1;

        goto label08;

     label07:
        $z7 = 0;

     label08:
        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertTrue(java.lang.String,boolean)>("Shouldn\'t remove nonexistent other element", $z7);

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

        i5 = i5 + 1;

        goto label06;

     label09:
        $r3 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        i6 = interfaceinvoke $r3.<java.util.Collection: int size()>();

        i7 = lengthof r1;

        i8 = 0;

     label10:
        if i8 >= i7 goto label12;

        r2 = r1[i8];

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void resetFull()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Collection should remove extant element: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $z1 = interfaceinvoke $r8.<java.util.Collection: boolean remove(java.lang.Object)>(r2);

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertTrue(java.lang.String,boolean)>($r7, $z1);

        $z2 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: boolean areEqualElementsDistinguishable()>();

        if $z2 != 0 goto label11;

        $r10 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getConfirmed()>();

        interfaceinvoke $r10.<java.util.Collection: boolean remove(java.lang.Object)>(r2);

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

     label11:
        $i0 = i6 - 1;

        $r9 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $i1 = interfaceinvoke $r9.<java.util.Collection: int size()>();

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertEquals(java.lang.String,int,int)>("Collection should shrink after remove", $i0, $i1);

        i8 = i8 + 1;

        goto label10;

     label12:
        return;
    }

    public void testCollectionRemoveAll()
    {
        org.apache.commons.collections4.collection.AbstractCollectionTest r0;
        int i0, $i3, $i4, $i5, $i6, $i8, $i9;
        byte b1, $b7;
        java.util.List r1, $r17, $r33;
        java.util.Iterator r2;
        java.lang.Object r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16;
        java.util.Collection $r5, $r8, $r10, $r12, $r15, $r18, $r20, $r21, $r23, $r24, $r30, $r34, $r35, $r36;
        java.util.Set $r6, $r13;
        java.util.ArrayList $r9;
        java.lang.Object[] $r16, $r25, $r26, $r27, $r31, $r32;
        java.util.HashSet $r19, $r22;

        r0 := @this: org.apache.commons.collections4.collection.AbstractCollectionTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: boolean isRemoveSupported()>();

        if $z0 != 0 goto label01;

        return;

     label01:
        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void resetEmpty()>();

        $r5 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $r6 = <java.util.Collections: java.util.Set EMPTY_SET>;

        $z1 = interfaceinvoke $r5.<java.util.Collection: boolean removeAll(java.util.Collection)>($r6);

        if $z1 != 0 goto label02;

        $z9 = 1;

        goto label03;

     label02:
        $z9 = 0;

     label03:
        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertTrue(java.lang.String,boolean)>("Empty collection removeAll should return false for empty input", $z9);

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

        $r8 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $r9 = new java.util.ArrayList;

        $r10 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        specialinvoke $r9.<java.util.ArrayList: void <init>(java.util.Collection)>($r10);

        $z2 = interfaceinvoke $r8.<java.util.Collection: boolean removeAll(java.util.Collection)>($r9);

        if $z2 != 0 goto label04;

        $z10 = 1;

        goto label05;

     label04:
        $z10 = 0;

     label05:
        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertTrue(java.lang.String,boolean)>("Empty collection removeAll should return false for nonempty input", $z10);

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void resetFull()>();

        $r12 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $r13 = <java.util.Collections: java.util.Set EMPTY_SET>;

        $z3 = interfaceinvoke $r12.<java.util.Collection: boolean removeAll(java.util.Collection)>($r13);

        if $z3 != 0 goto label06;

        $z11 = 1;

        goto label07;

     label06:
        $z11 = 0;

     label07:
        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertTrue(java.lang.String,boolean)>("Full collection removeAll should return false for empty input", $z11);

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

        $r15 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $r16 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.lang.Object[] getOtherElements()>();

        $r17 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r16);

        $z4 = interfaceinvoke $r15.<java.util.Collection: boolean removeAll(java.util.Collection)>($r17);

        if $z4 != 0 goto label08;

        $z12 = 1;

        goto label09;

     label08:
        $z12 = 0;

     label09:
        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertTrue(java.lang.String,boolean)>("Full collection removeAll should return false for other elements", $z12);

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

        $r18 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $r19 = new java.util.HashSet;

        $r20 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        specialinvoke $r19.<java.util.HashSet: void <init>(java.util.Collection)>($r20);

        $z5 = interfaceinvoke $r18.<java.util.Collection: boolean removeAll(java.util.Collection)>($r19);

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertTrue(java.lang.String,boolean)>("Full collection removeAll should return true for full elements", $z5);

        $r21 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getConfirmed()>();

        $r22 = new java.util.HashSet;

        $r23 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getConfirmed()>();

        specialinvoke $r22.<java.util.HashSet: void <init>(java.util.Collection)>($r23);

        interfaceinvoke $r21.<java.util.Collection: boolean removeAll(java.util.Collection)>($r22);

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void resetFull()>();

        $r24 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        i0 = interfaceinvoke $r24.<java.util.Collection: int size()>();

        $r25 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.lang.Object[] getFullElements()>();

        $i3 = lengthof $r25;

        if $i3 >= 4 goto label10;

        $b7 = 0;

        goto label11;

     label10:
        $b7 = 2;

     label11:
        b1 = $b7;

        $r26 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.lang.Object[] getFullElements()>();

        $i4 = lengthof $r26;

        if $i4 != 1 goto label12;

        $i8 = 1;

        goto label14;

     label12:
        $r27 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.lang.Object[] getFullElements()>();

        $i5 = lengthof $r27;

        if $i5 > 5 goto label13;

        $r31 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.lang.Object[] getFullElements()>();

        $i6 = lengthof $r31;

        $i8 = $i6 - 1;

        goto label14;

     label13:
        $i8 = 5;

     label14:
        $r32 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.lang.Object[] getFullElements()>();

        $r33 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r32);

        r1 = interfaceinvoke $r33.<java.util.List: java.util.List subList(int,int)>(b1, $i8);

        $r34 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $z13 = interfaceinvoke $r34.<java.util.Collection: boolean removeAll(java.util.Collection)>(r1);

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertTrue(java.lang.String,boolean)>("Full collection removeAll should work", $z13);

        $r35 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getConfirmed()>();

        interfaceinvoke $r35.<java.util.Collection: boolean removeAll(java.util.Collection)>(r1);

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

        $r36 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $i9 = interfaceinvoke $r36.<java.util.Collection: int size()>();

        if $i9 >= i0 goto label15;

        $z14 = 1;

        goto label16;

     label15:
        $z14 = 0;

     label16:
        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertTrue(java.lang.String,boolean)>("Collection should shrink after removeAll", $z14);

        r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label17:
        $z15 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z15 == 0 goto label20;

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r30 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $z8 = interfaceinvoke $r30.<java.util.Collection: boolean contains(java.lang.Object)>(r3);

        if $z8 != 0 goto label18;

        $z16 = 1;

        goto label19;

     label18:
        $z16 = 0;

     label19:
        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertTrue(java.lang.String,boolean)>("Collection shouldn\'t contain removed element", $z16);

        goto label17;

     label20:
        return;
    }

    public void testCollectionRetainAll()
    {
        org.apache.commons.collections4.collection.AbstractCollectionTest r0;
        java.util.List r1, r2, $r32, $r34, $r36;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i11, i12;
        java.util.Iterator r3;
        java.lang.Object r4;
        boolean $z0, $z1, $z2, $z3, $z5, $z7, $z8, $z9, $z11, $z12, $z13, $z14, $z15, $z16;
        java.lang.Object[] $r5, $r6, $r22, $r29, $r30, $r37;
        java.util.Collection $r8, $r11, $r12, $r14, $r16, $r17, $r18, $r20, $r21, $r24, $r26, $r27, $r28, $r31, $r33, $r35;
        java.util.Set $r9, $r13, $r15;
        java.util.HashSet $r23;
        byte $b9, b10;

        r0 := @this: org.apache.commons.collections4.collection.AbstractCollectionTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: boolean isRemoveSupported()>();

        if $z0 != 0 goto label01;

        return;

     label01:
        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void resetEmpty()>();

        $r5 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.lang.Object[] getFullElements()>();

        r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5);

        $r6 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.lang.Object[] getOtherElements()>();

        r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r6);

        $r8 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $r9 = <java.util.Collections: java.util.Set EMPTY_SET>;

        $z1 = interfaceinvoke $r8.<java.util.Collection: boolean retainAll(java.util.Collection)>($r9);

        if $z1 != 0 goto label02;

        $z12 = 1;

        goto label03;

     label02:
        $z12 = 0;

     label03:
        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertTrue(java.lang.String,boolean)>("Empty retainAll() should return false", $z12);

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

        $r11 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $z2 = interfaceinvoke $r11.<java.util.Collection: boolean retainAll(java.util.Collection)>(r1);

        if $z2 != 0 goto label04;

        $z13 = 1;

        goto label05;

     label04:
        $z13 = 0;

     label05:
        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertTrue(java.lang.String,boolean)>("Empty retainAll() should return false", $z13);

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void resetFull()>();

        $r12 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $r13 = <java.util.Collections: java.util.Set EMPTY_SET>;

        $z3 = interfaceinvoke $r12.<java.util.Collection: boolean retainAll(java.util.Collection)>($r13);

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertTrue(java.lang.String,boolean)>("Collection should change from retainAll empty", $z3);

        $r14 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getConfirmed()>();

        $r15 = <java.util.Collections: java.util.Set EMPTY_SET>;

        interfaceinvoke $r14.<java.util.Collection: boolean retainAll(java.util.Collection)>($r15);

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void resetFull()>();

        $r16 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $z5 = interfaceinvoke $r16.<java.util.Collection: boolean retainAll(java.util.Collection)>(r2);

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertTrue(java.lang.String,boolean)>("Collection changed from retainAll other", $z5);

        $r17 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getConfirmed()>();

        interfaceinvoke $r17.<java.util.Collection: boolean retainAll(java.util.Collection)>(r2);

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void resetFull()>();

        $r18 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        i7 = interfaceinvoke $r18.<java.util.Collection: int size()>();

        $r20 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $z7 = interfaceinvoke $r20.<java.util.Collection: boolean retainAll(java.util.Collection)>(r1);

        if $z7 != 0 goto label06;

        $z14 = 1;

        goto label07;

     label06:
        $z14 = 0;

     label07:
        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertTrue(java.lang.String,boolean)>("Collection shouldn\'t change from retainAll elements", $z14);

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

        $r21 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $i1 = interfaceinvoke $r21.<java.util.Collection: int size()>();

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertEquals(java.lang.String,int,int)>("Collection size shouldn\'t change", i7, $i1);

        $r22 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.lang.Object[] getFullElements()>();

        $i2 = lengthof $r22;

        if $i2 <= 1 goto label13;

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void resetFull()>();

        $r28 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        interfaceinvoke $r28.<java.util.Collection: int size()>();

        $r29 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.lang.Object[] getFullElements()>();

        $i4 = lengthof $r29;

        if $i4 >= 4 goto label08;

        $b9 = 0;

        goto label09;

     label08:
        $b9 = 2;

     label09:
        b10 = $b9;

        $r30 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.lang.Object[] getFullElements()>();

        $i5 = lengthof $r30;

        if $i5 > 5 goto label10;

        $r37 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.lang.Object[] getFullElements()>();

        $i6 = lengthof $r37;

        $i11 = $i6 - 1;

        goto label11;

     label10:
        $i11 = 5;

     label11:
        i0 = $i11;

        $r31 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $r32 = interfaceinvoke r1.<java.util.List: java.util.List subList(int,int)>(b10, $i11);

        $z9 = interfaceinvoke $r31.<java.util.Collection: boolean retainAll(java.util.Collection)>($r32);

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertTrue(java.lang.String,boolean)>("Collection should changed by partial retainAll", $z9);

        $r33 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getConfirmed()>();

        $r34 = interfaceinvoke r1.<java.util.List: java.util.List subList(int,int)>(b10, $i11);

        interfaceinvoke $r33.<java.util.Collection: boolean retainAll(java.util.Collection)>($r34);

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

        $r35 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        r3 = interfaceinvoke $r35.<java.util.Collection: java.util.Iterator iterator()>();

     label12:
        $z15 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z15 == 0 goto label13;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r36 = interfaceinvoke r1.<java.util.List: java.util.List subList(int,int)>(b10, i0);

        $z11 = interfaceinvoke $r36.<java.util.List: boolean contains(java.lang.Object)>(r4);

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertTrue(java.lang.String,boolean)>("Collection only contains retained element", $z11);

        goto label12;

     label13:
        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void resetFull()>();

        $r23 = new java.util.HashSet;

        specialinvoke $r23.<java.util.HashSet: void <init>(java.util.Collection)>(r1);

        $r24 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        i12 = interfaceinvoke $r24.<java.util.Collection: int size()>();

        $r26 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $z8 = interfaceinvoke $r26.<java.util.Collection: boolean retainAll(java.util.Collection)>($r23);

        if $z8 != 0 goto label14;

        $z16 = 1;

        goto label15;

     label14:
        $z16 = 0;

     label15:
        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertTrue(java.lang.String,boolean)>("Collection shouldn\'t change from retainAll without duplicate elements", $z16);

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

        $r27 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $i3 = interfaceinvoke $r27.<java.util.Collection: int size()>();

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertEquals(java.lang.String,int,int)>("Collection size didn\'t change from nonduplicate retainAll", i12, $i3);

        return;
    }

    public void testCollectionSize()
    {
        org.apache.commons.collections4.collection.AbstractCollectionTest r0;
        java.util.Collection $r1, $r3;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.collection.AbstractCollectionTest;

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void resetEmpty()>();

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $i0 = interfaceinvoke $r1.<java.util.Collection: int size()>();

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertEquals(java.lang.String,int,int)>("Size of new Collection is 0.", 0, $i0);

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void resetFull()>();

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $i1 = interfaceinvoke $r3.<java.util.Collection: int size()>();

        if $i1 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertTrue(java.lang.String,boolean)>("Size of full collection should be greater than zero", $z0);

        return;
    }

    public void testCollectionToArray()
    {
        org.apache.commons.collections4.collection.AbstractCollectionTest r0;
        java.lang.Object[] r1, r2, $r5;
        boolean[] r3;
        boolean z0, $z1, $z2, $z3, z4;
        java.util.Collection $r4, $r6, $r7, $r8, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, i11;
        java.lang.Object $r10, $r16, $r17, $r18, $r19, $r20;
        java.lang.StringBuilder $r11, $r12, $r13, $r14;
        java.lang.String $r15;

        r0 := @this: org.apache.commons.collections4.collection.AbstractCollectionTest;

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void resetEmpty()>();

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $r5 = interfaceinvoke $r4.<java.util.Collection: java.lang.Object[] toArray()>();

        $i0 = lengthof $r5;

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertEquals(java.lang.String,int,int)>("Empty Collection should return empty array for toArray", 0, $i0);

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void resetFull()>();

        $r6 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        r1 = interfaceinvoke $r6.<java.util.Collection: java.lang.Object[] toArray()>();

        $i1 = lengthof r1;

        $r7 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $i2 = interfaceinvoke $r7.<java.util.Collection: int size()>();

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertEquals(java.lang.String,int,int)>("Full collection toArray should be same size as collection", $i1, $i2);

        $r8 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getConfirmed()>();

        r2 = interfaceinvoke $r8.<java.util.Collection: java.lang.Object[] toArray()>();

        $i4 = lengthof r2;

        $i3 = lengthof r1;

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertEquals(java.lang.String,int,int)>("length of array from confirmed collection should match the length of the collection\'s array", $i4, $i3);

        $i5 = lengthof r1;

        r3 = newarray (boolean)[$i5];

        i8 = 0;

     label01:
        $i6 = lengthof r1;

        if i8 >= $i6 goto label08;

        $r9 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $r10 = r1[i8];

        $z1 = interfaceinvoke $r9.<java.util.Collection: boolean contains(java.lang.Object)>($r10);

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertTrue(java.lang.String,boolean)>("Collection should contain element in toArray", $z1);

        z4 = 0;

        i9 = 0;

     label02:
        $i7 = lengthof r1;

        if i9 >= $i7 goto label06;

        $z2 = r3[i9];

        if $z2 == 0 goto label03;

        goto label05;

     label03:
        $r17 = r1[i8];

        $r16 = r2[i9];

        if $r17 == $r16 goto label04;

        $r18 = r1[i8];

        if $r18 == null goto label05;

        $r20 = r1[i8];

        $r19 = r2[i9];

        $z3 = virtualinvoke $r20.<java.lang.Object: boolean equals(java.lang.Object)>($r19);

        if $z3 == 0 goto label05;

     label04:
        r3[i9] = 1;

        z4 = 1;

        goto label06;

     label05:
        i9 = i9 + 1;

        goto label02;

     label06:
        if z4 != 0 goto label07;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("element ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in returned array should be found in the confirmed collection\'s array");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void fail(java.lang.String)>($r15);

     label07:
        i8 = i8 + 1;

        goto label01;

     label08:
        i10 = lengthof r3;

        i11 = 0;

     label09:
        if i11 >= i10 goto label10;

        z0 = r3[i11];

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertEquals(java.lang.String,boolean,boolean)>("Collection should return all its elements in toArray", 1, z0);

        i11 = i11 + 1;

        goto label09;

     label10:
        return;
    }

    public void testCollectionToArray2()
    {
        org.apache.commons.collections4.collection.AbstractCollectionTest r0;
        int i0, $i1, i2;
        java.lang.Object r1, $r3, $r5, $r17, $r19;
        java.lang.Object[] $r2, $r9, $r11, $r20, $r26, r32, r37, r38, r43, r44;
        java.util.Collection $r4, $r6, $r8, $r10, $r12, $r21, $r25;
        java.lang.Void[] $r7;
        java.util.List $r13, $r14, $r24, $r27;
        java.util.HashSet $r15;
        java.util.Iterator $r16;
        java.lang.Class $r18, $r22, $r23, $r41, r42;
        boolean $z0;
        java.lang.NullPointerException $r29;
        java.lang.ArrayStoreException $r30;

        r0 := @this: org.apache.commons.collections4.collection.AbstractCollectionTest;

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void resetEmpty()>();

        $r2 = newarray (java.lang.Object)[3];

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        $r2[0] = $r3;

        $r2[1] = null;

        $r2[2] = null;

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        r32 = interfaceinvoke $r4.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r2);

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Given array shouldn\'t shrink", r32, $r2);

        $r5 = $r2[0];

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertNull(java.lang.String,java.lang.Object)>("Last element should be set to null", $r5);

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void resetFull()>();

     label01:
        $r6 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $r7 = newarray (java.lang.Void)[0];

        interfaceinvoke $r6.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void fail(java.lang.String)>("toArray(new Void[0]) should raise ArrayStore");

     label02:
        goto label04;

     label03:
        $r30 := @caughtexception;

     label04:
        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

     label05:
        $r8 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $r9 = (java.lang.Object[]) null;

        interfaceinvoke $r8.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void fail(java.lang.String)>("toArray(null) should raise NPE");

     label06:
        goto label08;

     label07:
        $r29 := @caughtexception;

     label08:
        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

        $r10 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $r11 = newarray (java.lang.Object)[0];

        r37 = interfaceinvoke $r10.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r11);

        $r12 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        r38 = interfaceinvoke $r12.<java.util.Collection: java.lang.Object[] toArray()>();

        $r13 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r37);

        $r14 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r38);

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("toArrays should be equal", $r13, $r14);

        $r15 = new java.util.HashSet;

        specialinvoke $r15.<java.util.HashSet: void <init>()>();

        i0 = lengthof r37;

        i2 = 0;

     label09:
        if i2 >= i0 goto label12;

        r1 = r37[i2];

        if r1 != null goto label10;

        $r41 = null;

        goto label11;

     label10:
        $r41 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

     label11:
        virtualinvoke $r15.<java.util.HashSet: boolean add(java.lang.Object)>($r41);

        i2 = i2 + 1;

        goto label09;

     label12:
        $i1 = virtualinvoke $r15.<java.util.HashSet: int size()>();

        if $i1 <= 1 goto label13;

        return;

     label13:
        $r16 = virtualinvoke $r15.<java.util.HashSet: java.util.Iterator iterator()>();

        $r17 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        r42 = (java.lang.Class) $r17;

        $r18 = class "Ljava/util/Map$Entry;";

        $z0 = virtualinvoke $r18.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r42);

        if $z0 == 0 goto label14;

        r42 = class "Ljava/util/Map$Entry;";

     label14:
        $r19 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r42, 0);

        $r20 = (java.lang.Object[]) $r19;

        r43 = (java.lang.Object[]) $r20;

        $r21 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        r44 = interfaceinvoke $r21.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>(r43);

        $r22 = virtualinvoke r43.<java.lang.Object: java.lang.Class getClass()>();

        $r23 = virtualinvoke r44.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("toArray(Object[]) should return correct array type", $r22, $r23);

        $r24 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r44);

        $r25 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $r26 = interfaceinvoke $r25.<java.util.Collection: java.lang.Object[] toArray()>();

        $r27 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r26);

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("type-specific toArrays should be equal", $r24, $r27);

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

        return;

        catch java.lang.ArrayStoreException from label01 to label02 with label03;
        catch java.lang.NullPointerException from label05 to label06 with label07;
    }

    public void testCollectionToString()
    {
        org.apache.commons.collections4.collection.AbstractCollectionTest r0;
        java.util.Collection $r2, $r5;
        java.lang.String $r3, $r6;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.collections4.collection.AbstractCollectionTest;

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void resetEmpty()>();

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        if $r3 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertTrue(java.lang.String,boolean)>("toString shouldn\'t return null", $z0);

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void resetFull()>();

        $r5 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        if $r6 == null goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertTrue(java.lang.String,boolean)>("toString shouldn\'t return null", $z1);

        return;
    }

    public void testUnsupportedRemove()
    {
        org.apache.commons.collections4.collection.AbstractCollectionTest r0;
        boolean $z0;
        java.util.Collection $r1, $r2, $r3, $r4, $r5;
        java.lang.UnsupportedOperationException $r7, $r8, $r9, $r10, $r11;
        java.util.Iterator r16;

        r0 := @this: org.apache.commons.collections4.collection.AbstractCollectionTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: boolean isRemoveSupported()>();

        if $z0 == 0 goto label01;

        return;

     label01:
        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void resetEmpty()>();

     label02:
        $r1 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        interfaceinvoke $r1.<java.util.Collection: void clear()>();

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void fail(java.lang.String)>("clear should raise UnsupportedOperationException");

     label03:
        goto label05;

     label04:
        $r9 := @caughtexception;

     label05:
        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

     label06:
        $r2 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        interfaceinvoke $r2.<java.util.Collection: boolean remove(java.lang.Object)>(null);

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void fail(java.lang.String)>("remove should raise UnsupportedOperationException");

     label07:
        goto label09;

     label08:
        $r11 := @caughtexception;

     label09:
        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

     label10:
        $r3 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        interfaceinvoke $r3.<java.util.Collection: boolean removeAll(java.util.Collection)>(null);

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void fail(java.lang.String)>("removeAll should raise UnsupportedOperationException");

     label11:
        goto label13;

     label12:
        $r8 := @caughtexception;

     label13:
        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

     label14:
        $r4 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        interfaceinvoke $r4.<java.util.Collection: boolean retainAll(java.util.Collection)>(null);

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void fail(java.lang.String)>("retainAll should raise UnsupportedOperationException");

     label15:
        goto label17;

     label16:
        $r10 := @caughtexception;

     label17:
        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void resetFull()>();

     label18:
        $r5 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        r16 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

        interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke r16.<java.util.Iterator: void remove()>();

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void fail(java.lang.String)>("iterator.remove should raise UnsupportedOperationException");

     label19:
        goto label21;

     label20:
        $r7 := @caughtexception;

     label21:
        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

        return;

        catch java.lang.UnsupportedOperationException from label02 to label03 with label04;
        catch java.lang.UnsupportedOperationException from label06 to label07 with label08;
        catch java.lang.UnsupportedOperationException from label10 to label11 with label12;
        catch java.lang.UnsupportedOperationException from label14 to label15 with label16;
        catch java.lang.UnsupportedOperationException from label18 to label19 with label20;
    }

    public void testCollectionIteratorFailFast()
    {
        org.apache.commons.collections4.collection.AbstractCollectionTest r0;
        boolean $z0, $z1, $z9;
        java.util.Collection $r1, $r2, $r5, $r8, $r10, $r13, $r15, $r17, $r18, $r20, $r21, $r24, $r43, $r45;
        java.lang.Object[] $r6, $r11, $r16, $r22, $r25, $r46;
        java.util.List $r7, $r12, $r23, $r26, r50, r53;
        java.util.ConcurrentModificationException $r28, $r30, $r31, $r32, $r33, $r34;
        java.util.NoSuchElementException $r29;
        java.util.Iterator r35, r38, r40, r44, r49, r52;
        java.lang.Object r36, $r47;

        r0 := @this: org.apache.commons.collections4.collection.AbstractCollectionTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: boolean isFailFastSupported()>();

        if $z0 != 0 goto label01;

        return;

     label01:
        $z1 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: boolean isAddSupported()>();

        if $z1 == 0 goto label10;

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void resetFull()>();

     label02:
        $r15 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        r35 = interfaceinvoke $r15.<java.util.Collection: java.util.Iterator iterator()>();

        $r16 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.lang.Object[] getOtherElements()>();

        r36 = $r16[0];

        $r17 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        interfaceinvoke $r17.<java.util.Collection: boolean add(java.lang.Object)>(r36);

        $r18 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getConfirmed()>();

        interfaceinvoke $r18.<java.util.Collection: boolean add(java.lang.Object)>(r36);

        interfaceinvoke r35.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void fail(java.lang.String)>("next after add should raise ConcurrentModification");

     label03:
        goto label05;

     label04:
        $r30 := @caughtexception;

     label05:
        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void resetFull()>();

     label06:
        $r20 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        r38 = interfaceinvoke $r20.<java.util.Collection: java.util.Iterator iterator()>();

        $r21 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $r22 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.lang.Object[] getOtherElements()>();

        $r23 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r22);

        interfaceinvoke $r21.<java.util.Collection: boolean addAll(java.util.Collection)>($r23);

        $r24 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getConfirmed()>();

        $r25 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.lang.Object[] getOtherElements()>();

        $r26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r25);

        interfaceinvoke $r24.<java.util.Collection: boolean addAll(java.util.Collection)>($r26);

        interfaceinvoke r38.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void fail(java.lang.String)>("next after addAll should raise ConcurrentModification");

     label07:
        goto label09;

     label08:
        $r34 := @caughtexception;

     label09:
        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

     label10:
        $z9 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: boolean isRemoveSupported()>();

        if $z9 != 0 goto label11;

        return;

     label11:
        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void resetFull()>();

     label12:
        $r1 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        r40 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        interfaceinvoke $r2.<java.util.Collection: void clear()>();

        interfaceinvoke r40.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void fail(java.lang.String)>("next after clear should raise ConcurrentModification");

     label13:
        goto label16;

     label14:
        $r33 := @caughtexception;

        goto label16;

     label15:
        $r29 := @caughtexception;

     label16:
        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void resetFull()>();

     label17:
        $r43 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        r44 = interfaceinvoke $r43.<java.util.Collection: java.util.Iterator iterator()>();

        $r45 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $r46 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.lang.Object[] getFullElements()>();

        $r47 = $r46[0];

        interfaceinvoke $r45.<java.util.Collection: boolean remove(java.lang.Object)>($r47);

        interfaceinvoke r44.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void fail(java.lang.String)>("next after remove should raise ConcurrentModification");

     label18:
        goto label20;

     label19:
        $r28 := @caughtexception;

     label20:
        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void resetFull()>();

     label21:
        $r5 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        r49 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

        $r6 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.lang.Object[] getFullElements()>();

        $r7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r6);

        r50 = interfaceinvoke $r7.<java.util.List: java.util.List subList(int,int)>(2, 5);

        $r8 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        interfaceinvoke $r8.<java.util.Collection: boolean removeAll(java.util.Collection)>(r50);

        interfaceinvoke r49.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void fail(java.lang.String)>("next after removeAll should raise ConcurrentModification");

     label22:
        goto label24;

     label23:
        $r32 := @caughtexception;

     label24:
        virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void resetFull()>();

     label25:
        $r10 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        r52 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();

        $r11 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.lang.Object[] getFullElements()>();

        $r12 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r11);

        r53 = interfaceinvoke $r12.<java.util.List: java.util.List subList(int,int)>(2, 5);

        $r13 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        interfaceinvoke $r13.<java.util.Collection: boolean retainAll(java.util.Collection)>(r53);

        interfaceinvoke r52.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void fail(java.lang.String)>("next after retainAll should raise ConcurrentModification");

     label26:
        goto label28;

     label27:
        $r31 := @caughtexception;

     label28:
        return;

        catch java.util.ConcurrentModificationException from label02 to label03 with label04;
        catch java.util.ConcurrentModificationException from label06 to label07 with label08;
        catch java.util.ConcurrentModificationException from label12 to label13 with label14;
        catch java.util.NoSuchElementException from label12 to label13 with label15;
        catch java.util.ConcurrentModificationException from label17 to label18 with label19;
        catch java.util.ConcurrentModificationException from label21 to label22 with label23;
        catch java.util.ConcurrentModificationException from label25 to label26 with label27;
    }

    public void testSerializeDeserializeThenCompare() throws java.lang.Exception
    {
        org.apache.commons.collections4.collection.AbstractCollectionTest r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.io.ByteArrayOutputStream $r1, $r6;
        java.io.ObjectOutputStream $r2, $r7;
        java.io.ObjectInputStream $r3, $r8;
        java.io.ByteArrayInputStream $r4, $r9;
        byte[] $r5, $r10;
        java.util.Collection r11, r16;
        java.lang.Object r15, r20;

        r0 := @this: org.apache.commons.collections4.collection.AbstractCollectionTest;

        r11 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection makeObject()>();

        $z0 = r11 instanceof java.io.Serializable;

        if $z0 == 0 goto label1;

        $z3 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: boolean isTestSerialization()>();

        if $z3 == 0 goto label1;

        $r6 = new java.io.ByteArrayOutputStream;

        specialinvoke $r6.<java.io.ByteArrayOutputStream: void <init>()>();

        $r7 = new java.io.ObjectOutputStream;

        specialinvoke $r7.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>($r6);

        virtualinvoke $r7.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(r11);

        virtualinvoke $r7.<java.io.ObjectOutputStream: void close()>();

        $r8 = new java.io.ObjectInputStream;

        $r9 = new java.io.ByteArrayInputStream;

        $r10 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r9.<java.io.ByteArrayInputStream: void <init>(byte[])>($r10);

        specialinvoke $r8.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>($r9);

        r15 = virtualinvoke $r8.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        virtualinvoke $r8.<java.io.ObjectInputStream: void close()>();

        $z4 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: boolean isEqualsCheckable()>();

        if $z4 == 0 goto label1;

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("obj != deserialize(serialize(obj)) - EMPTY Collection", r11, r15);

     label1:
        r16 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection makeFullCollection()>();

        $z5 = r16 instanceof java.io.Serializable;

        if $z5 == 0 goto label2;

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: boolean isTestSerialization()>();

        if $z1 == 0 goto label2;

        $r1 = new java.io.ByteArrayOutputStream;

        specialinvoke $r1.<java.io.ByteArrayOutputStream: void <init>()>();

        $r2 = new java.io.ObjectOutputStream;

        specialinvoke $r2.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>($r1);

        virtualinvoke $r2.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(r16);

        virtualinvoke $r2.<java.io.ObjectOutputStream: void close()>();

        $r3 = new java.io.ObjectInputStream;

        $r4 = new java.io.ByteArrayInputStream;

        $r5 = virtualinvoke $r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r4.<java.io.ByteArrayInputStream: void <init>(byte[])>($r5);

        specialinvoke $r3.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>($r4);

        r20 = virtualinvoke $r3.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        virtualinvoke $r3.<java.io.ObjectInputStream: void close()>();

        $z2 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: boolean isEqualsCheckable()>();

        if $z2 == 0 goto label2;

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("obj != deserialize(serialize(obj)) - FULL Collection", r16, r20);

     label2:
        return;
    }

    public java.util.Collection getCollection()
    {
        org.apache.commons.collections4.collection.AbstractCollectionTest r0;
        java.util.Collection $r1;

        r0 := @this: org.apache.commons.collections4.collection.AbstractCollectionTest;

        $r1 = r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection collection>;

        return $r1;
    }

    public void setCollection(java.util.Collection)
    {
        org.apache.commons.collections4.collection.AbstractCollectionTest r0;
        java.util.Collection r1;

        r0 := @this: org.apache.commons.collections4.collection.AbstractCollectionTest;

        r1 := @parameter0: java.util.Collection;

        r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection collection> = r1;

        return;
    }

    public java.util.Collection getConfirmed()
    {
        org.apache.commons.collections4.collection.AbstractCollectionTest r0;
        java.util.Collection $r1;

        r0 := @this: org.apache.commons.collections4.collection.AbstractCollectionTest;

        $r1 = r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection confirmed>;

        return $r1;
    }

    public void setConfirmed(java.util.Collection)
    {
        org.apache.commons.collections4.collection.AbstractCollectionTest r0;
        java.util.Collection r1;

        r0 := @this: org.apache.commons.collections4.collection.AbstractCollectionTest;

        r1 := @parameter0: java.util.Collection;

        r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection confirmed> = r1;

        return;
    }

    protected static void assertNotCollectionContains(java.util.Collection, java.lang.Object)
    {
        java.util.Collection r0;
        java.lang.Object r1;
        boolean $z0;
        java.lang.NullPointerException $r2;
        java.lang.ClassCastException $r3;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.lang.Object;

     label1:
        $z0 = interfaceinvoke r0.<java.util.Collection: boolean contains(java.lang.Object)>(r1);

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertFalse(boolean)>($z0);

     label2:
        goto label5;

     label3:
        $r3 := @caughtexception;

        goto label5;

     label4:
        $r2 := @caughtexception;

     label5:
        return;

        catch java.lang.ClassCastException from label1 to label2 with label3;
        catch java.lang.NullPointerException from label1 to label2 with label4;
    }

    protected static void assertNotCollectionContainsAll(java.util.Collection, java.util.Collection)
    {
        java.util.Collection r0, r1;
        boolean $z0;
        java.lang.ClassCastException $r2;
        java.lang.NullPointerException $r3;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.util.Collection;

     label1:
        $z0 = interfaceinvoke r0.<java.util.Collection: boolean containsAll(java.util.Collection)>(r1);

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertFalse(boolean)>($z0);

     label2:
        goto label5;

     label3:
        $r2 := @caughtexception;

        goto label5;

     label4:
        $r3 := @caughtexception;

     label5:
        return;

        catch java.lang.ClassCastException from label1 to label2 with label3;
        catch java.lang.NullPointerException from label1 to label2 with label4;
    }

    protected static void assertNotRemoveFromCollection(java.util.Collection, java.lang.Object)
    {
        java.util.Collection r0;
        java.lang.Object r1;
        boolean $z0;
        java.lang.NullPointerException $r2;
        java.lang.ClassCastException $r3;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.lang.Object;

     label1:
        $z0 = interfaceinvoke r0.<java.util.Collection: boolean remove(java.lang.Object)>(r1);

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertFalse(boolean)>($z0);

     label2:
        goto label5;

     label3:
        $r3 := @caughtexception;

        goto label5;

     label4:
        $r2 := @caughtexception;

     label5:
        return;

        catch java.lang.ClassCastException from label1 to label2 with label3;
        catch java.lang.NullPointerException from label1 to label2 with label4;
    }

    protected static void assertNotRemoveAllFromCollection(java.util.Collection, java.util.Collection)
    {
        java.util.Collection r0, r1;
        boolean $z0;
        java.lang.NullPointerException $r2;
        java.lang.ClassCastException $r3;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.util.Collection;

     label1:
        $z0 = interfaceinvoke r0.<java.util.Collection: boolean removeAll(java.util.Collection)>(r1);

        staticinvoke <org.apache.commons.collections4.collection.AbstractCollectionTest: void assertFalse(boolean)>($z0);

     label2:
        goto label5;

     label3:
        $r3 := @caughtexception;

        goto label5;

     label4:
        $r2 := @caughtexception;

     label5:
        return;

        catch java.lang.ClassCastException from label1 to label2 with label3;
        catch java.lang.NullPointerException from label1 to label2 with label4;
    }

    public volatile java.lang.Object makeObject()
    {
        org.apache.commons.collections4.collection.AbstractCollectionTest r0;
        java.util.Collection $r1;

        r0 := @this: org.apache.commons.collections4.collection.AbstractCollectionTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection makeObject()>();

        return $r1;
    }
}
