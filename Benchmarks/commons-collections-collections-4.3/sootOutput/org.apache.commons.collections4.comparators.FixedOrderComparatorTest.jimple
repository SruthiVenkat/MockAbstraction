public class org.apache.commons.collections4.comparators.FixedOrderComparatorTest extends org.apache.commons.collections4.comparators.AbstractComparatorTest
{
    private static final java.lang.String[] topCities;

    public void <init>(java.lang.String)
    {
        org.apache.commons.collections4.comparators.FixedOrderComparatorTest r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.collections4.comparators.FixedOrderComparatorTest;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.collections4.comparators.AbstractComparatorTest: void <init>(java.lang.String)>(r1);

        return;
    }

    public java.util.Comparator makeObject()
    {
        org.apache.commons.collections4.comparators.FixedOrderComparatorTest r0;
        org.apache.commons.collections4.comparators.FixedOrderComparator $r2;
        java.lang.String[] $r3;

        r0 := @this: org.apache.commons.collections4.comparators.FixedOrderComparatorTest;

        $r2 = new org.apache.commons.collections4.comparators.FixedOrderComparator;

        $r3 = <org.apache.commons.collections4.comparators.FixedOrderComparatorTest: java.lang.String[] topCities>;

        specialinvoke $r2.<org.apache.commons.collections4.comparators.FixedOrderComparator: void <init>(java.lang.Object[])>($r3);

        return $r2;
    }

    public java.util.List getComparableObjectsOrdered()
    {
        org.apache.commons.collections4.comparators.FixedOrderComparatorTest r0;
        java.lang.String[] $r1;
        java.util.List $r2;

        r0 := @this: org.apache.commons.collections4.comparators.FixedOrderComparatorTest;

        $r1 = <org.apache.commons.collections4.comparators.FixedOrderComparatorTest: java.lang.String[] topCities>;

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        return $r2;
    }

    public java.lang.String getCompatibilityVersion()
    {
        org.apache.commons.collections4.comparators.FixedOrderComparatorTest r0;

        r0 := @this: org.apache.commons.collections4.comparators.FixedOrderComparatorTest;

        return "4";
    }

    public void testConstructorPlusAdd()
    {
        org.apache.commons.collections4.comparators.FixedOrderComparatorTest r0;
        int i0, i1;
        java.lang.String r2;
        org.apache.commons.collections4.comparators.FixedOrderComparator $r3;
        java.lang.String[] $r4, r6, r7;
        java.lang.Object $r5;

        r0 := @this: org.apache.commons.collections4.comparators.FixedOrderComparatorTest;

        $r3 = new org.apache.commons.collections4.comparators.FixedOrderComparator;

        specialinvoke $r3.<org.apache.commons.collections4.comparators.FixedOrderComparator: void <init>()>();

        r6 = <org.apache.commons.collections4.comparators.FixedOrderComparatorTest: java.lang.String[] topCities>;

        i0 = lengthof r6;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = r6[i1];

        virtualinvoke $r3.<org.apache.commons.collections4.comparators.FixedOrderComparator: boolean add(java.lang.Object)>(r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r4 = <org.apache.commons.collections4.comparators.FixedOrderComparatorTest: java.lang.String[] topCities>;

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Object clone()>();

        r7 = (java.lang.String[]) $r5;

        specialinvoke r0.<org.apache.commons.collections4.comparators.FixedOrderComparatorTest: void assertComparatorYieldsOrder(java.lang.String[],java.util.Comparator)>(r7, $r3);

        return;
    }

    public void testArrayConstructor()
    {
        org.apache.commons.collections4.comparators.FixedOrderComparatorTest r0;
        java.lang.String[] r1, r2, $r4, $r6;
        java.lang.Object $r5, $r7;
        org.apache.commons.collections4.comparators.FixedOrderComparator $r8;

        r0 := @this: org.apache.commons.collections4.comparators.FixedOrderComparatorTest;

        $r4 = <org.apache.commons.collections4.comparators.FixedOrderComparatorTest: java.lang.String[] topCities>;

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Object clone()>();

        r1 = (java.lang.String[]) $r5;

        $r6 = <org.apache.commons.collections4.comparators.FixedOrderComparatorTest: java.lang.String[] topCities>;

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.Object clone()>();

        r2 = (java.lang.String[]) $r7;

        $r8 = new org.apache.commons.collections4.comparators.FixedOrderComparator;

        specialinvoke $r8.<org.apache.commons.collections4.comparators.FixedOrderComparator: void <init>(java.lang.Object[])>(r2);

        specialinvoke r0.<org.apache.commons.collections4.comparators.FixedOrderComparatorTest: void assertComparatorYieldsOrder(java.lang.String[],java.util.Comparator)>(r1, $r8);

        r2[0] = "Brighton";

        specialinvoke r0.<org.apache.commons.collections4.comparators.FixedOrderComparatorTest: void assertComparatorYieldsOrder(java.lang.String[],java.util.Comparator)>(r1, $r8);

        return;
    }

    public void testListConstructor()
    {
        org.apache.commons.collections4.comparators.FixedOrderComparatorTest r0;
        java.lang.String[] r1, $r4, $r7;
        java.lang.Object $r5;
        java.util.LinkedList $r6;
        java.util.List $r8;
        org.apache.commons.collections4.comparators.FixedOrderComparator $r9;

        r0 := @this: org.apache.commons.collections4.comparators.FixedOrderComparatorTest;

        $r4 = <org.apache.commons.collections4.comparators.FixedOrderComparatorTest: java.lang.String[] topCities>;

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Object clone()>();

        r1 = (java.lang.String[]) $r5;

        $r6 = new java.util.LinkedList;

        $r7 = <org.apache.commons.collections4.comparators.FixedOrderComparatorTest: java.lang.String[] topCities>;

        $r8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r7);

        specialinvoke $r6.<java.util.LinkedList: void <init>(java.util.Collection)>($r8);

        $r9 = new org.apache.commons.collections4.comparators.FixedOrderComparator;

        specialinvoke $r9.<org.apache.commons.collections4.comparators.FixedOrderComparator: void <init>(java.util.List)>($r6);

        specialinvoke r0.<org.apache.commons.collections4.comparators.FixedOrderComparatorTest: void assertComparatorYieldsOrder(java.lang.String[],java.util.Comparator)>(r1, $r9);

        interfaceinvoke $r6.<java.util.List: java.lang.Object set(int,java.lang.Object)>(0, "Brighton");

        specialinvoke r0.<org.apache.commons.collections4.comparators.FixedOrderComparatorTest: void assertComparatorYieldsOrder(java.lang.String[],java.util.Comparator)>(r1, $r9);

        return;
    }

    public void testAddAsEqual()
    {
        org.apache.commons.collections4.comparators.FixedOrderComparatorTest r0;
        org.apache.commons.collections4.comparators.FixedOrderComparator $r2;
        java.lang.String[] $r3;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.commons.collections4.comparators.FixedOrderComparatorTest;

        $r2 = new org.apache.commons.collections4.comparators.FixedOrderComparator;

        $r3 = <org.apache.commons.collections4.comparators.FixedOrderComparatorTest: java.lang.String[] topCities>;

        specialinvoke $r2.<org.apache.commons.collections4.comparators.FixedOrderComparator: void <init>(java.lang.Object[])>($r3);

        virtualinvoke $r2.<org.apache.commons.collections4.comparators.FixedOrderComparator: boolean addAsEqual(java.lang.Object,java.lang.Object)>("New York", "Minneapolis");

        $i0 = virtualinvoke $r2.<org.apache.commons.collections4.comparators.FixedOrderComparator: int compare(java.lang.Object,java.lang.Object)>("New York", "Minneapolis");

        staticinvoke <org.apache.commons.collections4.comparators.FixedOrderComparatorTest: void assertEquals(int,int)>(0, $i0);

        $i1 = virtualinvoke $r2.<org.apache.commons.collections4.comparators.FixedOrderComparator: int compare(java.lang.Object,java.lang.Object)>("Tokyo", "Minneapolis");

        staticinvoke <org.apache.commons.collections4.comparators.FixedOrderComparatorTest: void assertEquals(int,int)>(-1, $i1);

        $i2 = virtualinvoke $r2.<org.apache.commons.collections4.comparators.FixedOrderComparator: int compare(java.lang.Object,java.lang.Object)>("Shanghai", "Minneapolis");

        staticinvoke <org.apache.commons.collections4.comparators.FixedOrderComparatorTest: void assertEquals(int,int)>(1, $i2);

        return;
    }

    public void testLock()
    {
        org.apache.commons.collections4.comparators.FixedOrderComparatorTest r0;
        org.apache.commons.collections4.comparators.FixedOrderComparator $r2;
        java.lang.String[] $r3;
        boolean $z0, $z1;
        java.lang.UnsupportedOperationException $r4, $r5;

        r0 := @this: org.apache.commons.collections4.comparators.FixedOrderComparatorTest;

        $r2 = new org.apache.commons.collections4.comparators.FixedOrderComparator;

        $r3 = <org.apache.commons.collections4.comparators.FixedOrderComparatorTest: java.lang.String[] topCities>;

        specialinvoke $r2.<org.apache.commons.collections4.comparators.FixedOrderComparator: void <init>(java.lang.Object[])>($r3);

        $z0 = virtualinvoke $r2.<org.apache.commons.collections4.comparators.FixedOrderComparator: boolean isLocked()>();

        staticinvoke <org.apache.commons.collections4.comparators.FixedOrderComparatorTest: void assertEquals(boolean,boolean)>(0, $z0);

        virtualinvoke $r2.<org.apache.commons.collections4.comparators.FixedOrderComparator: int compare(java.lang.Object,java.lang.Object)>("New York", "Tokyo");

        $z1 = virtualinvoke $r2.<org.apache.commons.collections4.comparators.FixedOrderComparator: boolean isLocked()>();

        staticinvoke <org.apache.commons.collections4.comparators.FixedOrderComparatorTest: void assertEquals(boolean,boolean)>(1, $z1);

     label1:
        virtualinvoke $r2.<org.apache.commons.collections4.comparators.FixedOrderComparator: boolean add(java.lang.Object)>("Minneapolis");

        staticinvoke <org.apache.commons.collections4.comparators.FixedOrderComparatorTest: void fail(java.lang.String)>("Should have thrown an UnsupportedOperationException");

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        virtualinvoke $r2.<org.apache.commons.collections4.comparators.FixedOrderComparator: boolean addAsEqual(java.lang.Object,java.lang.Object)>("New York", "Minneapolis");

        staticinvoke <org.apache.commons.collections4.comparators.FixedOrderComparatorTest: void fail(java.lang.String)>("Should have thrown an UnsupportedOperationException");

     label5:
        goto label7;

     label6:
        $r5 := @caughtexception;

     label7:
        return;

        catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
        catch java.lang.UnsupportedOperationException from label4 to label5 with label6;
    }

    public void testUnknownObjectBehavior()
    {
        org.apache.commons.collections4.comparators.FixedOrderComparatorTest r0;
        org.apache.commons.collections4.comparators.FixedOrderComparator $r1, $r5, $r16;
        java.lang.String[] $r2, $r6, $r11, $r13, $r15, $r17, $r20, $r22, $r24;
        org.apache.commons.collections4.comparators.FixedOrderComparator$UnknownObjectBehavior $r3, $r4, $r7, $r8, $r9, $r18;
        java.util.LinkedList $r10, $r19;
        java.util.List $r12, $r21;
        java.lang.Object[] $r14, $r23;
        int $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.IllegalArgumentException $r25, $r26;

        r0 := @this: org.apache.commons.collections4.comparators.FixedOrderComparatorTest;

        $r1 = new org.apache.commons.collections4.comparators.FixedOrderComparator;

        $r2 = <org.apache.commons.collections4.comparators.FixedOrderComparatorTest: java.lang.String[] topCities>;

        specialinvoke $r1.<org.apache.commons.collections4.comparators.FixedOrderComparator: void <init>(java.lang.Object[])>($r2);

     label1:
        virtualinvoke $r1.<org.apache.commons.collections4.comparators.FixedOrderComparator: int compare(java.lang.Object,java.lang.Object)>("New York", "Minneapolis");

        staticinvoke <org.apache.commons.collections4.comparators.FixedOrderComparatorTest: void fail(java.lang.String)>("Should have thrown a IllegalArgumentException");

     label2:
        goto label4;

     label3:
        $r26 := @caughtexception;

     label4:
        virtualinvoke $r1.<org.apache.commons.collections4.comparators.FixedOrderComparator: int compare(java.lang.Object,java.lang.Object)>("Minneapolis", "New York");

        staticinvoke <org.apache.commons.collections4.comparators.FixedOrderComparatorTest: void fail(java.lang.String)>("Should have thrown a IllegalArgumentException");

     label5:
        goto label7;

     label6:
        $r25 := @caughtexception;

     label7:
        $r3 = <org.apache.commons.collections4.comparators.FixedOrderComparator$UnknownObjectBehavior: org.apache.commons.collections4.comparators.FixedOrderComparator$UnknownObjectBehavior EXCEPTION>;

        $r4 = virtualinvoke $r1.<org.apache.commons.collections4.comparators.FixedOrderComparator: org.apache.commons.collections4.comparators.FixedOrderComparator$UnknownObjectBehavior getUnknownObjectBehavior()>();

        staticinvoke <org.apache.commons.collections4.comparators.FixedOrderComparatorTest: void assertEquals(java.lang.Object,java.lang.Object)>($r3, $r4);

        $r5 = new org.apache.commons.collections4.comparators.FixedOrderComparator;

        $r6 = <org.apache.commons.collections4.comparators.FixedOrderComparatorTest: java.lang.String[] topCities>;

        specialinvoke $r5.<org.apache.commons.collections4.comparators.FixedOrderComparator: void <init>(java.lang.Object[])>($r6);

        $r7 = <org.apache.commons.collections4.comparators.FixedOrderComparator$UnknownObjectBehavior: org.apache.commons.collections4.comparators.FixedOrderComparator$UnknownObjectBehavior BEFORE>;

        virtualinvoke $r5.<org.apache.commons.collections4.comparators.FixedOrderComparator: void setUnknownObjectBehavior(org.apache.commons.collections4.comparators.FixedOrderComparator$UnknownObjectBehavior)>($r7);

        $r8 = <org.apache.commons.collections4.comparators.FixedOrderComparator$UnknownObjectBehavior: org.apache.commons.collections4.comparators.FixedOrderComparator$UnknownObjectBehavior BEFORE>;

        $r9 = virtualinvoke $r5.<org.apache.commons.collections4.comparators.FixedOrderComparator: org.apache.commons.collections4.comparators.FixedOrderComparator$UnknownObjectBehavior getUnknownObjectBehavior()>();

        staticinvoke <org.apache.commons.collections4.comparators.FixedOrderComparatorTest: void assertEquals(java.lang.Object,java.lang.Object)>($r8, $r9);

        $r10 = new java.util.LinkedList;

        $r11 = <org.apache.commons.collections4.comparators.FixedOrderComparatorTest: java.lang.String[] topCities>;

        $r12 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r11);

        specialinvoke $r10.<java.util.LinkedList: void <init>(java.util.Collection)>($r12);

        virtualinvoke $r10.<java.util.LinkedList: void addFirst(java.lang.Object)>("Minneapolis");

        $r13 = newarray (java.lang.String)[0];

        $r14 = virtualinvoke $r10.<java.util.LinkedList: java.lang.Object[] toArray(java.lang.Object[])>($r13);

        $r15 = (java.lang.String[]) $r14;

        specialinvoke r0.<org.apache.commons.collections4.comparators.FixedOrderComparatorTest: void assertComparatorYieldsOrder(java.lang.String[],java.util.Comparator)>($r15, $r5);

        $i2 = virtualinvoke $r5.<org.apache.commons.collections4.comparators.FixedOrderComparator: int compare(java.lang.Object,java.lang.Object)>("Minneapolis", "New York");

        staticinvoke <org.apache.commons.collections4.comparators.FixedOrderComparatorTest: void assertEquals(int,int)>(-1, $i2);

        $i3 = virtualinvoke $r5.<org.apache.commons.collections4.comparators.FixedOrderComparator: int compare(java.lang.Object,java.lang.Object)>("New York", "Minneapolis");

        staticinvoke <org.apache.commons.collections4.comparators.FixedOrderComparatorTest: void assertEquals(int,int)>(1, $i3);

        $i4 = virtualinvoke $r5.<org.apache.commons.collections4.comparators.FixedOrderComparator: int compare(java.lang.Object,java.lang.Object)>("Minneapolis", "St Paul");

        staticinvoke <org.apache.commons.collections4.comparators.FixedOrderComparatorTest: void assertEquals(int,int)>(0, $i4);

        $r16 = new org.apache.commons.collections4.comparators.FixedOrderComparator;

        $r17 = <org.apache.commons.collections4.comparators.FixedOrderComparatorTest: java.lang.String[] topCities>;

        specialinvoke $r16.<org.apache.commons.collections4.comparators.FixedOrderComparator: void <init>(java.lang.Object[])>($r17);

        $r18 = <org.apache.commons.collections4.comparators.FixedOrderComparator$UnknownObjectBehavior: org.apache.commons.collections4.comparators.FixedOrderComparator$UnknownObjectBehavior AFTER>;

        virtualinvoke $r16.<org.apache.commons.collections4.comparators.FixedOrderComparator: void setUnknownObjectBehavior(org.apache.commons.collections4.comparators.FixedOrderComparator$UnknownObjectBehavior)>($r18);

        $r19 = new java.util.LinkedList;

        $r20 = <org.apache.commons.collections4.comparators.FixedOrderComparatorTest: java.lang.String[] topCities>;

        $r21 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r20);

        specialinvoke $r19.<java.util.LinkedList: void <init>(java.util.Collection)>($r21);

        virtualinvoke $r19.<java.util.LinkedList: boolean add(java.lang.Object)>("Minneapolis");

        $r22 = newarray (java.lang.String)[0];

        $r23 = virtualinvoke $r19.<java.util.LinkedList: java.lang.Object[] toArray(java.lang.Object[])>($r22);

        $r24 = (java.lang.String[]) $r23;

        specialinvoke r0.<org.apache.commons.collections4.comparators.FixedOrderComparatorTest: void assertComparatorYieldsOrder(java.lang.String[],java.util.Comparator)>($r24, $r16);

        $i5 = virtualinvoke $r16.<org.apache.commons.collections4.comparators.FixedOrderComparator: int compare(java.lang.Object,java.lang.Object)>("Minneapolis", "New York");

        staticinvoke <org.apache.commons.collections4.comparators.FixedOrderComparatorTest: void assertEquals(int,int)>(1, $i5);

        $i6 = virtualinvoke $r16.<org.apache.commons.collections4.comparators.FixedOrderComparator: int compare(java.lang.Object,java.lang.Object)>("New York", "Minneapolis");

        staticinvoke <org.apache.commons.collections4.comparators.FixedOrderComparatorTest: void assertEquals(int,int)>(-1, $i6);

        $i7 = virtualinvoke $r16.<org.apache.commons.collections4.comparators.FixedOrderComparator: int compare(java.lang.Object,java.lang.Object)>("Minneapolis", "St Paul");

        staticinvoke <org.apache.commons.collections4.comparators.FixedOrderComparatorTest: void assertEquals(int,int)>(0, $i7);

        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
        catch java.lang.IllegalArgumentException from label4 to label5 with label6;
    }

    private void assertComparatorYieldsOrder(java.lang.String[], java.util.Comparator)
    {
        org.apache.commons.collections4.comparators.FixedOrderComparatorTest r0;
        java.lang.String[] r1, r3;
        java.util.Comparator r2;
        java.lang.String r5, $r8, $r9, $r10, $r11, $r12;
        int i0, $i1, $i2, $i3, $i4, i5, i6, i7, $i8;
        java.lang.Object $r6;
        java.util.Random $r7;
        boolean $z0, z1;

        r0 := @this: org.apache.commons.collections4.comparators.FixedOrderComparatorTest;

        r1 := @parameter0: java.lang.String[];

        r2 := @parameter1: java.util.Comparator;

        $r6 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        r3 = (java.lang.String[]) $r6;

        z1 = 0;

        $r7 = new java.util.Random;

        specialinvoke $r7.<java.util.Random: void <init>()>();

     label1:
        $i1 = lengthof r3;

        if $i1 <= 1 goto label7;

        if z1 != 0 goto label7;

        $i2 = lengthof r3;

        i5 = $i2 - 1;

     label2:
        if i5 <= 0 goto label3;

        r5 = r3[i5];

        $i4 = i5 + 1;

        i0 = virtualinvoke $r7.<java.util.Random: int nextInt(int)>($i4);

        $r12 = r3[i0];

        r3[i5] = $r12;

        r3[i0] = r5;

        i5 = i5 + -1;

        goto label2;

     label3:
        i6 = 0;

     label4:
        $i3 = lengthof r3;

        if i6 >= $i3 goto label6;

        if z1 != 0 goto label6;

        $r11 = r1[i6];

        $r10 = r3[i6];

        $z0 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z0 != 0 goto label5;

        z1 = 1;

     label5:
        i6 = i6 + 1;

        goto label4;

     label6:
        goto label1;

     label7:
        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(r3, r2);

        i7 = 0;

     label8:
        $i8 = lengthof r1;

        if i7 >= $i8 goto label9;

        $r9 = r1[i7];

        $r8 = r3[i7];

        staticinvoke <org.apache.commons.collections4.comparators.FixedOrderComparatorTest: void assertEquals(java.lang.String,java.lang.String)>($r9, $r8);

        i7 = i7 + 1;

        goto label8;

     label9:
        return;
    }

    public volatile java.lang.Object makeObject()
    {
        org.apache.commons.collections4.comparators.FixedOrderComparatorTest r0;
        java.util.Comparator $r1;

        r0 := @this: org.apache.commons.collections4.comparators.FixedOrderComparatorTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.comparators.FixedOrderComparatorTest: java.util.Comparator makeObject()>();

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;

        $r0 = newarray (java.lang.String)[10];

        $r0[0] = "Tokyo";

        $r0[1] = "Mexico City";

        $r0[2] = "Mumbai";

        $r0[3] = "Sao Paulo";

        $r0[4] = "New York";

        $r0[5] = "Shanghai";

        $r0[6] = "Lagos";

        $r0[7] = "Los Angeles";

        $r0[8] = "Calcutta";

        $r0[9] = "Buenos Aires";

        <org.apache.commons.collections4.comparators.FixedOrderComparatorTest: java.lang.String[] topCities> = $r0;

        return;
    }
}
