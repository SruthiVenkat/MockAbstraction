public class org.apache.commons.collections4.map.LRUMapTest extends org.apache.commons.collections4.map.AbstractOrderedMapTest
{

    public void <init>(java.lang.String)
    {
        org.apache.commons.collections4.map.LRUMapTest r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.collections4.map.LRUMapTest;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.collections4.map.AbstractOrderedMapTest: void <init>(java.lang.String)>(r1);

        return;
    }

    public static junit.framework.Test suite()
    {
        junit.framework.TestSuite $r0;

        $r0 = staticinvoke <org.apache.commons.collections4.BulkTest: junit.framework.TestSuite makeSuite(java.lang.Class)>(class "Lorg/apache/commons/collections4/map/LRUMapTest;");

        return $r0;
    }

    public org.apache.commons.collections4.map.LRUMap makeObject()
    {
        org.apache.commons.collections4.map.LRUMapTest r0;
        org.apache.commons.collections4.map.LRUMap $r1;

        r0 := @this: org.apache.commons.collections4.map.LRUMapTest;

        $r1 = new org.apache.commons.collections4.map.LRUMap;

        specialinvoke $r1.<org.apache.commons.collections4.map.LRUMap: void <init>()>();

        return $r1;
    }

    public org.apache.commons.collections4.map.LRUMap makeFullMap()
    {
        org.apache.commons.collections4.map.LRUMapTest r0;
        org.apache.commons.collections4.OrderedMap $r1;
        org.apache.commons.collections4.map.LRUMap $r2;

        r0 := @this: org.apache.commons.collections4.map.LRUMapTest;

        $r1 = specialinvoke r0.<org.apache.commons.collections4.map.AbstractOrderedMapTest: org.apache.commons.collections4.OrderedMap makeFullMap()>();

        $r2 = (org.apache.commons.collections4.map.LRUMap) $r1;

        return $r2;
    }

    public boolean isGetStructuralModify()
    {
        org.apache.commons.collections4.map.LRUMapTest r0;

        r0 := @this: org.apache.commons.collections4.map.LRUMapTest;

        return 1;
    }

    public org.apache.commons.collections4.map.LRUMap getMap()
    {
        org.apache.commons.collections4.map.LRUMapTest r0;
        org.apache.commons.collections4.OrderedMap $r1;
        org.apache.commons.collections4.map.LRUMap $r2;

        r0 := @this: org.apache.commons.collections4.map.LRUMapTest;

        $r1 = specialinvoke r0.<org.apache.commons.collections4.map.AbstractOrderedMapTest: org.apache.commons.collections4.OrderedMap getMap()>();

        $r2 = (org.apache.commons.collections4.map.LRUMap) $r1;

        return $r2;
    }

    public void testCtors()
    {
        org.apache.commons.collections4.map.LRUMapTest r0;
        org.apache.commons.collections4.map.LRUMap $r1, $r2, $r3, $r4, $r5, $r6;
        java.lang.IllegalArgumentException $r7, $r8, $r9, $r10, $r11, $r12;

        r0 := @this: org.apache.commons.collections4.map.LRUMapTest;

     label01:
        $r1 = new org.apache.commons.collections4.map.LRUMap;

        specialinvoke $r1.<org.apache.commons.collections4.map.LRUMap: void <init>(int)>(0);

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void fail(java.lang.String)>("maxSize must be positive");

     label02:
        goto label04;

     label03:
        $r9 := @caughtexception;

     label04:
        $r2 = new org.apache.commons.collections4.map.LRUMap;

        specialinvoke $r2.<org.apache.commons.collections4.map.LRUMap: void <init>(int,int,float,boolean)>(-1, 12, 0.75F, 0);

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void fail(java.lang.String)>("maxSize must be positive");

     label05:
        goto label07;

     label06:
        $r8 := @caughtexception;

     label07:
        $r3 = new org.apache.commons.collections4.map.LRUMap;

        specialinvoke $r3.<org.apache.commons.collections4.map.LRUMap: void <init>(int,int)>(10, -1);

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void fail(java.lang.String)>("initialSize must not be negative");

     label08:
        goto label10;

     label09:
        $r12 := @caughtexception;

     label10:
        $r4 = new org.apache.commons.collections4.map.LRUMap;

        specialinvoke $r4.<org.apache.commons.collections4.map.LRUMap: void <init>(int,int)>(10, 12);

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void fail(java.lang.String)>("initialSize must not be larger than maxSize");

     label11:
        goto label13;

     label12:
        $r11 := @caughtexception;

     label13:
        $r5 = new org.apache.commons.collections4.map.LRUMap;

        specialinvoke $r5.<org.apache.commons.collections4.map.LRUMap: void <init>(int,int,float,boolean)>(10, -1, 0.75F, 0);

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void fail(java.lang.String)>("initialSize must not be negative");

     label14:
        goto label16;

     label15:
        $r7 := @caughtexception;

     label16:
        $r6 = new org.apache.commons.collections4.map.LRUMap;

        specialinvoke $r6.<org.apache.commons.collections4.map.LRUMap: void <init>(int,int,float,boolean)>(10, 12, 0.75F, 0);

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void fail(java.lang.String)>("initialSize must not be larger than maxSize");

     label17:
        goto label19;

     label18:
        $r10 := @caughtexception;

     label19:
        return;

        catch java.lang.IllegalArgumentException from label01 to label02 with label03;
        catch java.lang.IllegalArgumentException from label04 to label05 with label06;
        catch java.lang.IllegalArgumentException from label07 to label08 with label09;
        catch java.lang.IllegalArgumentException from label10 to label11 with label12;
        catch java.lang.IllegalArgumentException from label13 to label14 with label15;
        catch java.lang.IllegalArgumentException from label16 to label17 with label18;
    }

    public void testLRU()
    {
        org.apache.commons.collections4.map.LRUMapTest r0;
        java.lang.Object[] r1, r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.apache.commons.collections4.map.LRUMap $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.lang.Object $r5, $r6, $r8, $r9, $r12, $r13, $r14, $r15, $r17, $r18, $r19, $r20, $r21, $r22, $r25, $r26, $r27, $r28, $r30, $r31, $r32, $r33, $r34, $r35, $r38, $r39, $r40, $r41, $r43, $r44, $r45, $r46, $r47, $r48, $r51, $r52, $r53, $r54, $r56, $r57, $r58, $r59;
        java.util.Set $r11, $r24, $r37, $r50;
        java.util.Collection $r16, $r29, $r42, $r55;
        java.util.Iterator r60, r61, r62, r63, r64, r65, r66, r67;

        r0 := @this: org.apache.commons.collections4.map.LRUMapTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.map.LRUMapTest: boolean isPutAddSupported()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.map.LRUMapTest: boolean isPutChangeSupported()>();

        if $z1 != 0 goto label2;

     label1:
        return;

     label2:
        r1 = virtualinvoke r0.<org.apache.commons.collections4.map.LRUMapTest: java.lang.Object[] getSampleKeys()>();

        r2 = virtualinvoke r0.<org.apache.commons.collections4.map.LRUMapTest: java.lang.Object[] getSampleValues()>();

        $r4 = new org.apache.commons.collections4.map.LRUMap;

        specialinvoke $r4.<org.apache.commons.collections4.map.LRUMap: void <init>(int)>(2);

        $i0 = virtualinvoke $r4.<org.apache.commons.collections4.map.LRUMap: int size()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(int,int)>(0, $i0);

        $z2 = virtualinvoke $r4.<org.apache.commons.collections4.map.LRUMap: boolean isFull()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(boolean,boolean)>(0, $z2);

        $i1 = virtualinvoke $r4.<org.apache.commons.collections4.map.LRUMap: int maxSize()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(int,int)>(2, $i1);

        $r6 = r1[0];

        $r5 = r2[0];

        virtualinvoke $r4.<org.apache.commons.collections4.map.LRUMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r5);

        $i2 = virtualinvoke $r4.<org.apache.commons.collections4.map.LRUMap: int size()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(int,int)>(1, $i2);

        $z3 = virtualinvoke $r4.<org.apache.commons.collections4.map.LRUMap: boolean isFull()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(boolean,boolean)>(0, $z3);

        $i3 = virtualinvoke $r4.<org.apache.commons.collections4.map.LRUMap: int maxSize()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(int,int)>(2, $i3);

        $r9 = r1[1];

        $r8 = r2[1];

        virtualinvoke $r4.<org.apache.commons.collections4.map.LRUMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r8);

        $i4 = virtualinvoke $r4.<org.apache.commons.collections4.map.LRUMap: int size()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(int,int)>(2, $i4);

        $z4 = virtualinvoke $r4.<org.apache.commons.collections4.map.LRUMap: boolean isFull()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(boolean,boolean)>(1, $z4);

        $i5 = virtualinvoke $r4.<org.apache.commons.collections4.map.LRUMap: int maxSize()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(int,int)>(2, $i5);

        $r11 = virtualinvoke $r4.<org.apache.commons.collections4.map.LRUMap: java.util.Set keySet()>();

        r60 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

        $r12 = r1[0];

        $r13 = interfaceinvoke r60.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r12, $r13);

        $r14 = r1[1];

        $r15 = interfaceinvoke r60.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r14, $r15);

        $r16 = virtualinvoke $r4.<org.apache.commons.collections4.map.LRUMap: java.util.Collection values()>();

        r61 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();

        $r17 = r2[0];

        $r18 = interfaceinvoke r61.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r17, $r18);

        $r19 = r2[1];

        $r20 = interfaceinvoke r61.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r19, $r20);

        $r22 = r1[2];

        $r21 = r2[2];

        virtualinvoke $r4.<org.apache.commons.collections4.map.LRUMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r22, $r21);

        $i6 = virtualinvoke $r4.<org.apache.commons.collections4.map.LRUMap: int size()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(int,int)>(2, $i6);

        $z5 = virtualinvoke $r4.<org.apache.commons.collections4.map.LRUMap: boolean isFull()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(boolean,boolean)>(1, $z5);

        $i7 = virtualinvoke $r4.<org.apache.commons.collections4.map.LRUMap: int maxSize()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(int,int)>(2, $i7);

        $r24 = virtualinvoke $r4.<org.apache.commons.collections4.map.LRUMap: java.util.Set keySet()>();

        r62 = interfaceinvoke $r24.<java.util.Set: java.util.Iterator iterator()>();

        $r25 = r1[1];

        $r26 = interfaceinvoke r62.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r25, $r26);

        $r27 = r1[2];

        $r28 = interfaceinvoke r62.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r27, $r28);

        $r29 = virtualinvoke $r4.<org.apache.commons.collections4.map.LRUMap: java.util.Collection values()>();

        r63 = interfaceinvoke $r29.<java.util.Collection: java.util.Iterator iterator()>();

        $r30 = r2[1];

        $r31 = interfaceinvoke r63.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r30, $r31);

        $r32 = r2[2];

        $r33 = interfaceinvoke r63.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r32, $r33);

        $r35 = r1[2];

        $r34 = r2[0];

        virtualinvoke $r4.<org.apache.commons.collections4.map.LRUMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r35, $r34);

        $i8 = virtualinvoke $r4.<org.apache.commons.collections4.map.LRUMap: int size()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(int,int)>(2, $i8);

        $z6 = virtualinvoke $r4.<org.apache.commons.collections4.map.LRUMap: boolean isFull()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(boolean,boolean)>(1, $z6);

        $i9 = virtualinvoke $r4.<org.apache.commons.collections4.map.LRUMap: int maxSize()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(int,int)>(2, $i9);

        $r37 = virtualinvoke $r4.<org.apache.commons.collections4.map.LRUMap: java.util.Set keySet()>();

        r64 = interfaceinvoke $r37.<java.util.Set: java.util.Iterator iterator()>();

        $r38 = r1[1];

        $r39 = interfaceinvoke r64.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r38, $r39);

        $r40 = r1[2];

        $r41 = interfaceinvoke r64.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r40, $r41);

        $r42 = virtualinvoke $r4.<org.apache.commons.collections4.map.LRUMap: java.util.Collection values()>();

        r65 = interfaceinvoke $r42.<java.util.Collection: java.util.Iterator iterator()>();

        $r43 = r2[1];

        $r44 = interfaceinvoke r65.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r43, $r44);

        $r45 = r2[0];

        $r46 = interfaceinvoke r65.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r45, $r46);

        $r48 = r1[1];

        $r47 = r2[3];

        virtualinvoke $r4.<org.apache.commons.collections4.map.LRUMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r48, $r47);

        $i10 = virtualinvoke $r4.<org.apache.commons.collections4.map.LRUMap: int size()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(int,int)>(2, $i10);

        $z7 = virtualinvoke $r4.<org.apache.commons.collections4.map.LRUMap: boolean isFull()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(boolean,boolean)>(1, $z7);

        $i11 = virtualinvoke $r4.<org.apache.commons.collections4.map.LRUMap: int maxSize()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(int,int)>(2, $i11);

        $r50 = virtualinvoke $r4.<org.apache.commons.collections4.map.LRUMap: java.util.Set keySet()>();

        r66 = interfaceinvoke $r50.<java.util.Set: java.util.Iterator iterator()>();

        $r51 = r1[2];

        $r52 = interfaceinvoke r66.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r51, $r52);

        $r53 = r1[1];

        $r54 = interfaceinvoke r66.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r53, $r54);

        $r55 = virtualinvoke $r4.<org.apache.commons.collections4.map.LRUMap: java.util.Collection values()>();

        r67 = interfaceinvoke $r55.<java.util.Collection: java.util.Iterator iterator()>();

        $r56 = r2[0];

        $r57 = interfaceinvoke r67.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r56, $r57);

        $r58 = r2[3];

        $r59 = interfaceinvoke r67.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r58, $r59);

        return;
    }

    public void testReset()
    {
        org.apache.commons.collections4.map.LRUMapTest r0;
        org.apache.commons.collections4.ResettableIterator r2, $r4;
        org.apache.commons.collections4.OrderedMapIterator $r3, $r7;
        java.util.ArrayList $r5;
        java.util.Set $r6;
        java.lang.Object $r8, $r9, $r10, $r11, $r12, $r13;
        org.apache.commons.collections4.map.LRUMap r14, r15;

        r0 := @this: org.apache.commons.collections4.map.LRUMapTest;

        virtualinvoke r0.<org.apache.commons.collections4.map.LRUMapTest: void resetEmpty()>();

        r14 = virtualinvoke r0.<org.apache.commons.collections4.map.LRUMapTest: org.apache.commons.collections4.map.LRUMap getMap()>();

        $r3 = interfaceinvoke r14.<org.apache.commons.collections4.OrderedMap: org.apache.commons.collections4.OrderedMapIterator mapIterator()>();

        $r4 = (org.apache.commons.collections4.ResettableIterator) $r3;

        interfaceinvoke $r4.<org.apache.commons.collections4.ResettableIterator: void reset()>();

        virtualinvoke r0.<org.apache.commons.collections4.map.LRUMapTest: void resetFull()>();

        r15 = virtualinvoke r0.<org.apache.commons.collections4.map.LRUMapTest: org.apache.commons.collections4.map.LRUMap getMap()>();

        $r5 = new java.util.ArrayList;

        $r6 = interfaceinvoke r15.<org.apache.commons.collections4.OrderedMap: java.util.Set keySet()>();

        specialinvoke $r5.<java.util.ArrayList: void <init>(java.util.Collection)>($r6);

        $r7 = interfaceinvoke r15.<org.apache.commons.collections4.OrderedMap: org.apache.commons.collections4.OrderedMapIterator mapIterator()>();

        r2 = (org.apache.commons.collections4.ResettableIterator) $r7;

        $r8 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(0);

        $r9 = interfaceinvoke r2.<org.apache.commons.collections4.ResettableIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r8, $r9);

        $r10 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(1);

        $r11 = interfaceinvoke r2.<org.apache.commons.collections4.ResettableIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r10, $r11);

        interfaceinvoke r2.<org.apache.commons.collections4.ResettableIterator: void reset()>();

        $r12 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(0);

        $r13 = interfaceinvoke r2.<org.apache.commons.collections4.ResettableIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r12, $r13);

        return;
    }

    public void testAccessOrder()
    {
        org.apache.commons.collections4.map.LRUMapTest r0;
        java.lang.Object[] r1, r2;
        boolean $z0, $z1;
        java.lang.Object $r3, $r4, $r6, $r7, $r11, $r12, $r13, $r14, $r17, $r18, $r19, $r20, $r21, $r22, $r26, $r27, $r28, $r29, $r32, $r33, $r34, $r35, $r36, $r37, $r41, $r42, $r43, $r44, $r47, $r48, $r49, $r50, $r51, $r52, $r56, $r57, $r58, $r59, $r62, $r63, $r64, $r65, $r66, $r70, $r71, $r72, $r73, $r76, $r77, $r78, $r79, $r80, $r84, $r85, $r86, $r87, $r90, $r91, $r92, $r93, $r94, $r98, $r99, $r100, $r101, $r104, $r105, $r106, $r107;
        java.util.Map $r5, $r8, $r9, $r15, $r23, $r24, $r30, $r38, $r39, $r45, $r53, $r54, $r60, $r67, $r68, $r74, $r81, $r82, $r88, $r95, $r96, $r102;
        java.util.Set $r10, $r25, $r40, $r55, $r69, $r83, $r97;
        java.util.Collection $r16, $r31, $r46, $r61, $r75, $r89, $r103;
        java.util.Iterator r108, r109, r110, r111, r112, r113, r114, r115, r116, r117, r118, r119, r120, r121;

        r0 := @this: org.apache.commons.collections4.map.LRUMapTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.map.LRUMapTest: boolean isPutAddSupported()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.map.LRUMapTest: boolean isPutChangeSupported()>();

        if $z1 != 0 goto label2;

     label1:
        return;

     label2:
        r1 = virtualinvoke r0.<org.apache.commons.collections4.map.LRUMapTest: java.lang.Object[] getSampleKeys()>();

        r2 = virtualinvoke r0.<org.apache.commons.collections4.map.LRUMapTest: java.lang.Object[] getSampleValues()>();

        virtualinvoke r0.<org.apache.commons.collections4.map.LRUMapTest: void resetEmpty()>();

        $r5 = r0.<org.apache.commons.collections4.map.LRUMapTest: java.util.Map map>;

        $r4 = r1[0];

        $r3 = r2[0];

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r3);

        $r8 = r0.<org.apache.commons.collections4.map.LRUMapTest: java.util.Map map>;

        $r7 = r1[1];

        $r6 = r2[1];

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r6);

        $r9 = r0.<org.apache.commons.collections4.map.LRUMapTest: java.util.Map map>;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.util.Set keySet()>();

        r108 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

        $r11 = r1[0];

        $r12 = interfaceinvoke r108.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r11, $r12);

        $r13 = r1[1];

        $r14 = interfaceinvoke r108.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r13, $r14);

        $r15 = r0.<org.apache.commons.collections4.map.LRUMapTest: java.util.Map map>;

        $r16 = interfaceinvoke $r15.<java.util.Map: java.util.Collection values()>();

        r109 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();

        $r17 = r2[0];

        $r18 = interfaceinvoke r109.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r17, $r18);

        $r19 = r2[1];

        $r20 = interfaceinvoke r109.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r19, $r20);

        $r23 = r0.<org.apache.commons.collections4.map.LRUMapTest: java.util.Map map>;

        $r22 = r1[1];

        $r21 = r2[1];

        interfaceinvoke $r23.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r22, $r21);

        $r24 = r0.<org.apache.commons.collections4.map.LRUMapTest: java.util.Map map>;

        $r25 = interfaceinvoke $r24.<java.util.Map: java.util.Set keySet()>();

        r110 = interfaceinvoke $r25.<java.util.Set: java.util.Iterator iterator()>();

        $r26 = r1[0];

        $r27 = interfaceinvoke r110.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r26, $r27);

        $r28 = r1[1];

        $r29 = interfaceinvoke r110.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r28, $r29);

        $r30 = r0.<org.apache.commons.collections4.map.LRUMapTest: java.util.Map map>;

        $r31 = interfaceinvoke $r30.<java.util.Map: java.util.Collection values()>();

        r111 = interfaceinvoke $r31.<java.util.Collection: java.util.Iterator iterator()>();

        $r32 = r2[0];

        $r33 = interfaceinvoke r111.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r32, $r33);

        $r34 = r2[1];

        $r35 = interfaceinvoke r111.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r34, $r35);

        $r38 = r0.<org.apache.commons.collections4.map.LRUMapTest: java.util.Map map>;

        $r37 = r1[1];

        $r36 = r2[2];

        interfaceinvoke $r38.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r37, $r36);

        $r39 = r0.<org.apache.commons.collections4.map.LRUMapTest: java.util.Map map>;

        $r40 = interfaceinvoke $r39.<java.util.Map: java.util.Set keySet()>();

        r112 = interfaceinvoke $r40.<java.util.Set: java.util.Iterator iterator()>();

        $r41 = r1[0];

        $r42 = interfaceinvoke r112.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r41, $r42);

        $r43 = r1[1];

        $r44 = interfaceinvoke r112.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r43, $r44);

        $r45 = r0.<org.apache.commons.collections4.map.LRUMapTest: java.util.Map map>;

        $r46 = interfaceinvoke $r45.<java.util.Map: java.util.Collection values()>();

        r113 = interfaceinvoke $r46.<java.util.Collection: java.util.Iterator iterator()>();

        $r47 = r2[0];

        $r48 = interfaceinvoke r113.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r47, $r48);

        $r49 = r2[2];

        $r50 = interfaceinvoke r113.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r49, $r50);

        $r53 = r0.<org.apache.commons.collections4.map.LRUMapTest: java.util.Map map>;

        $r52 = r1[0];

        $r51 = r2[3];

        interfaceinvoke $r53.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r52, $r51);

        $r54 = r0.<org.apache.commons.collections4.map.LRUMapTest: java.util.Map map>;

        $r55 = interfaceinvoke $r54.<java.util.Map: java.util.Set keySet()>();

        r114 = interfaceinvoke $r55.<java.util.Set: java.util.Iterator iterator()>();

        $r56 = r1[1];

        $r57 = interfaceinvoke r114.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r56, $r57);

        $r58 = r1[0];

        $r59 = interfaceinvoke r114.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r58, $r59);

        $r60 = r0.<org.apache.commons.collections4.map.LRUMapTest: java.util.Map map>;

        $r61 = interfaceinvoke $r60.<java.util.Map: java.util.Collection values()>();

        r115 = interfaceinvoke $r61.<java.util.Collection: java.util.Iterator iterator()>();

        $r62 = r2[2];

        $r63 = interfaceinvoke r115.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r62, $r63);

        $r64 = r2[3];

        $r65 = interfaceinvoke r115.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r64, $r65);

        $r67 = r0.<org.apache.commons.collections4.map.LRUMapTest: java.util.Map map>;

        $r66 = r1[1];

        interfaceinvoke $r67.<java.util.Map: java.lang.Object get(java.lang.Object)>($r66);

        $r68 = r0.<org.apache.commons.collections4.map.LRUMapTest: java.util.Map map>;

        $r69 = interfaceinvoke $r68.<java.util.Map: java.util.Set keySet()>();

        r116 = interfaceinvoke $r69.<java.util.Set: java.util.Iterator iterator()>();

        $r70 = r1[0];

        $r71 = interfaceinvoke r116.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r70, $r71);

        $r72 = r1[1];

        $r73 = interfaceinvoke r116.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r72, $r73);

        $r74 = r0.<org.apache.commons.collections4.map.LRUMapTest: java.util.Map map>;

        $r75 = interfaceinvoke $r74.<java.util.Map: java.util.Collection values()>();

        r117 = interfaceinvoke $r75.<java.util.Collection: java.util.Iterator iterator()>();

        $r76 = r2[3];

        $r77 = interfaceinvoke r117.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r76, $r77);

        $r78 = r2[2];

        $r79 = interfaceinvoke r117.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r78, $r79);

        $r81 = r0.<org.apache.commons.collections4.map.LRUMapTest: java.util.Map map>;

        $r80 = r1[0];

        interfaceinvoke $r81.<java.util.Map: java.lang.Object get(java.lang.Object)>($r80);

        $r82 = r0.<org.apache.commons.collections4.map.LRUMapTest: java.util.Map map>;

        $r83 = interfaceinvoke $r82.<java.util.Map: java.util.Set keySet()>();

        r118 = interfaceinvoke $r83.<java.util.Set: java.util.Iterator iterator()>();

        $r84 = r1[1];

        $r85 = interfaceinvoke r118.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r84, $r85);

        $r86 = r1[0];

        $r87 = interfaceinvoke r118.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r86, $r87);

        $r88 = r0.<org.apache.commons.collections4.map.LRUMapTest: java.util.Map map>;

        $r89 = interfaceinvoke $r88.<java.util.Map: java.util.Collection values()>();

        r119 = interfaceinvoke $r89.<java.util.Collection: java.util.Iterator iterator()>();

        $r90 = r2[2];

        $r91 = interfaceinvoke r119.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r90, $r91);

        $r92 = r2[3];

        $r93 = interfaceinvoke r119.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r92, $r93);

        $r95 = r0.<org.apache.commons.collections4.map.LRUMapTest: java.util.Map map>;

        $r94 = r1[0];

        interfaceinvoke $r95.<java.util.Map: java.lang.Object get(java.lang.Object)>($r94);

        $r96 = r0.<org.apache.commons.collections4.map.LRUMapTest: java.util.Map map>;

        $r97 = interfaceinvoke $r96.<java.util.Map: java.util.Set keySet()>();

        r120 = interfaceinvoke $r97.<java.util.Set: java.util.Iterator iterator()>();

        $r98 = r1[1];

        $r99 = interfaceinvoke r120.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r98, $r99);

        $r100 = r1[0];

        $r101 = interfaceinvoke r120.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r100, $r101);

        $r102 = r0.<org.apache.commons.collections4.map.LRUMapTest: java.util.Map map>;

        $r103 = interfaceinvoke $r102.<java.util.Map: java.util.Collection values()>();

        r121 = interfaceinvoke $r103.<java.util.Collection: java.util.Iterator iterator()>();

        $r104 = r2[2];

        $r105 = interfaceinvoke r121.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r104, $r105);

        $r106 = r2[3];

        $r107 = interfaceinvoke r121.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r106, $r107);

        return;
    }

    public void testAccessOrder2()
    {
        org.apache.commons.collections4.map.LRUMapTest r0;
        java.lang.Object[] r1, r2;
        org.apache.commons.collections4.map.LRUMap r3;
        boolean $z0, $z1;
        java.util.Map $r4;
        java.lang.Object $r5, $r6, $r7, $r8, $r10, $r11, $r12, $r13, $r15, $r16, $r17, $r18, $r19, $r20, $r22, $r23, $r24, $r25, $r27, $r28, $r29, $r30, $r31, $r33, $r34, $r35, $r36, $r38, $r39, $r40, $r41, $r42, $r44, $r45, $r46, $r47, $r49, $r50, $r51, $r52;
        java.util.Set $r9, $r21, $r32, $r43;
        java.util.Collection $r14, $r26, $r37, $r48;
        java.util.Iterator r53, r54, r55, r56, r57, r58, r59, r60;

        r0 := @this: org.apache.commons.collections4.map.LRUMapTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.map.LRUMapTest: boolean isPutAddSupported()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.map.LRUMapTest: boolean isPutChangeSupported()>();

        if $z1 != 0 goto label2;

     label1:
        return;

     label2:
        r1 = virtualinvoke r0.<org.apache.commons.collections4.map.LRUMapTest: java.lang.Object[] getSampleKeys()>();

        r2 = virtualinvoke r0.<org.apache.commons.collections4.map.LRUMapTest: java.lang.Object[] getSampleValues()>();

        virtualinvoke r0.<org.apache.commons.collections4.map.LRUMapTest: void resetEmpty()>();

        $r4 = r0.<org.apache.commons.collections4.map.LRUMapTest: java.util.Map map>;

        r3 = (org.apache.commons.collections4.map.LRUMap) $r4;

        $r6 = r1[0];

        $r5 = r2[0];

        virtualinvoke r3.<org.apache.commons.collections4.map.LRUMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r5);

        $r8 = r1[1];

        $r7 = r2[1];

        virtualinvoke r3.<org.apache.commons.collections4.map.LRUMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r7);

        $r9 = virtualinvoke r3.<org.apache.commons.collections4.map.LRUMap: java.util.Set keySet()>();

        r53 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

        $r10 = r1[0];

        $r11 = interfaceinvoke r53.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r10, $r11);

        $r12 = r1[1];

        $r13 = interfaceinvoke r53.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r12, $r13);

        $r14 = virtualinvoke r3.<org.apache.commons.collections4.map.LRUMap: java.util.Collection values()>();

        r54 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();

        $r15 = r2[0];

        $r16 = interfaceinvoke r54.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r15, $r16);

        $r17 = r2[1];

        $r18 = interfaceinvoke r54.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r17, $r18);

        $r20 = r1[1];

        $r19 = r2[1];

        virtualinvoke r3.<org.apache.commons.collections4.map.LRUMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, $r19);

        $r21 = virtualinvoke r3.<org.apache.commons.collections4.map.LRUMap: java.util.Set keySet()>();

        r55 = interfaceinvoke $r21.<java.util.Set: java.util.Iterator iterator()>();

        $r22 = r1[0];

        $r23 = interfaceinvoke r55.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r22, $r23);

        $r24 = r1[1];

        $r25 = interfaceinvoke r55.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r24, $r25);

        $r26 = virtualinvoke r3.<org.apache.commons.collections4.map.LRUMap: java.util.Collection values()>();

        r56 = interfaceinvoke $r26.<java.util.Collection: java.util.Iterator iterator()>();

        $r27 = r2[0];

        $r28 = interfaceinvoke r56.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r27, $r28);

        $r29 = r2[1];

        $r30 = interfaceinvoke r56.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r29, $r30);

        $r31 = r1[1];

        virtualinvoke r3.<org.apache.commons.collections4.map.LRUMap: java.lang.Object get(java.lang.Object,boolean)>($r31, 0);

        $r32 = virtualinvoke r3.<org.apache.commons.collections4.map.LRUMap: java.util.Set keySet()>();

        r57 = interfaceinvoke $r32.<java.util.Set: java.util.Iterator iterator()>();

        $r33 = r1[0];

        $r34 = interfaceinvoke r57.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r33, $r34);

        $r35 = r1[1];

        $r36 = interfaceinvoke r57.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r35, $r36);

        $r37 = virtualinvoke r3.<org.apache.commons.collections4.map.LRUMap: java.util.Collection values()>();

        r58 = interfaceinvoke $r37.<java.util.Collection: java.util.Iterator iterator()>();

        $r38 = r2[0];

        $r39 = interfaceinvoke r58.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r38, $r39);

        $r40 = r2[1];

        $r41 = interfaceinvoke r58.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r40, $r41);

        $r42 = r1[0];

        virtualinvoke r3.<org.apache.commons.collections4.map.LRUMap: java.lang.Object get(java.lang.Object,boolean)>($r42, 1);

        $r43 = virtualinvoke r3.<org.apache.commons.collections4.map.LRUMap: java.util.Set keySet()>();

        r59 = interfaceinvoke $r43.<java.util.Set: java.util.Iterator iterator()>();

        $r44 = r1[1];

        $r45 = interfaceinvoke r59.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r44, $r45);

        $r46 = r1[0];

        $r47 = interfaceinvoke r59.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r46, $r47);

        $r48 = virtualinvoke r3.<org.apache.commons.collections4.map.LRUMap: java.util.Collection values()>();

        r60 = interfaceinvoke $r48.<java.util.Collection: java.util.Iterator iterator()>();

        $r49 = r2[1];

        $r50 = interfaceinvoke r60.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r49, $r50);

        $r51 = r2[0];

        $r52 = interfaceinvoke r60.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r51, $r52);

        return;
    }

    public void testClone()
    {
        org.apache.commons.collections4.map.LRUMapTest r0;
        org.apache.commons.collections4.map.LRUMap r2, $r3;
        int $i0, $i1;
        java.lang.Object $r5, $r6;

        r0 := @this: org.apache.commons.collections4.map.LRUMapTest;

        $r3 = new org.apache.commons.collections4.map.LRUMap;

        specialinvoke $r3.<org.apache.commons.collections4.map.LRUMap: void <init>(int)>(10);

        virtualinvoke $r3.<org.apache.commons.collections4.map.LRUMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("1", "1");

        r2 = virtualinvoke $r3.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.LRUMap clone()>();

        $i0 = virtualinvoke $r3.<org.apache.commons.collections4.map.LRUMap: int size()>();

        $i1 = interfaceinvoke r2.<java.util.Map: int size()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(int,int)>($i0, $i1);

        $r5 = virtualinvoke $r3.<org.apache.commons.collections4.map.LRUMap: java.lang.Object get(java.lang.Object)>("1");

        $r6 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>("1");

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r5, $r6);

        return;
    }

    public void testRemoveLRU()
    {
        org.apache.commons.collections4.map.LRUMapTest r0;
        org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclass $r2;
        org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry $r3, $r5, $r7, $r9, $r13, $r15;
        java.lang.Object $r10, $r11, $r14, $r16;
        java.lang.String $r12, $r17;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.commons.collections4.map.LRUMapTest;

        $r2 = new org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclass;

        specialinvoke $r2.<org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclass: void <init>(int)>(2);

        $r3 = $r2.<org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclass: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry entry>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertNull(java.lang.Object)>($r3);

        virtualinvoke $r2.<org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclass: java.lang.Object put(java.lang.Object,java.lang.Object)>("A", "a");

        $r5 = $r2.<org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclass: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry entry>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertNull(java.lang.Object)>($r5);

        virtualinvoke $r2.<org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclass: java.lang.Object put(java.lang.Object,java.lang.Object)>("B", "b");

        $r7 = $r2.<org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclass: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry entry>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertNull(java.lang.Object)>($r7);

        virtualinvoke $r2.<org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclass: java.lang.Object put(java.lang.Object,java.lang.Object)>("C", "c");

        $r9 = $r2.<org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclass: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry entry>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertNotNull(java.lang.Object)>($r9);

        $r10 = $r2.<org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclass: java.lang.Object key>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(java.lang.Object,java.lang.Object)>("A", $r10);

        $r11 = $r2.<org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclass: java.lang.Object value>;

        $r12 = (java.lang.String) $r11;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(java.lang.String,java.lang.String)>("a", $r12);

        $r13 = $r2.<org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclass: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry entry>;

        $r14 = virtualinvoke $r13.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: java.lang.Object getKey()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(java.lang.Object,java.lang.Object)>("C", $r14);

        $r15 = $r2.<org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclass: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry entry>;

        $r16 = virtualinvoke $r15.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: java.lang.Object getValue()>();

        $r17 = (java.lang.String) $r16;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(java.lang.String,java.lang.String)>("c", $r17);

        $z0 = virtualinvoke $r2.<org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclass: boolean containsKey(java.lang.Object)>("A");

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(boolean,boolean)>(0, $z0);

        $z1 = virtualinvoke $r2.<org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclass: boolean containsKey(java.lang.Object)>("B");

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(boolean,boolean)>(1, $z1);

        $z2 = virtualinvoke $r2.<org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclass: boolean containsKey(java.lang.Object)>("C");

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(boolean,boolean)>(1, $z2);

        return;
    }

    public void testRemoveLRUBlocksRemove()
    {
        org.apache.commons.collections4.map.LRUMapTest r0;
        org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclassBlocksRemove $r2;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.commons.collections4.map.LRUMapTest;

        $r2 = new org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclassBlocksRemove;

        specialinvoke $r2.<org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclassBlocksRemove: void <init>(int,boolean)>(2, 0);

        $i0 = virtualinvoke $r2.<org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclassBlocksRemove: int size()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(int,int)>(0, $i0);

        virtualinvoke $r2.<org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclassBlocksRemove: java.lang.Object put(java.lang.Object,java.lang.Object)>("A", "a");

        $i1 = virtualinvoke $r2.<org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclassBlocksRemove: int size()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(int,int)>(1, $i1);

        virtualinvoke $r2.<org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclassBlocksRemove: java.lang.Object put(java.lang.Object,java.lang.Object)>("B", "b");

        $i2 = virtualinvoke $r2.<org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclassBlocksRemove: int size()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(int,int)>(2, $i2);

        virtualinvoke $r2.<org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclassBlocksRemove: java.lang.Object put(java.lang.Object,java.lang.Object)>("C", "c");

        $i3 = virtualinvoke $r2.<org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclassBlocksRemove: int size()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(int,int)>(3, $i3);

        $i4 = virtualinvoke $r2.<org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclassBlocksRemove: int maxSize()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(int,int)>(2, $i4);

        $z0 = virtualinvoke $r2.<org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclassBlocksRemove: boolean containsKey(java.lang.Object)>("A");

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(boolean,boolean)>(1, $z0);

        $z1 = virtualinvoke $r2.<org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclassBlocksRemove: boolean containsKey(java.lang.Object)>("B");

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(boolean,boolean)>(1, $z1);

        $z2 = virtualinvoke $r2.<org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclassBlocksRemove: boolean containsKey(java.lang.Object)>("C");

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(boolean,boolean)>(1, $z2);

        return;
    }

    public void testRemoveLRUBlocksRemoveScan()
    {
        org.apache.commons.collections4.map.LRUMapTest r0;
        org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclassBlocksRemove $r2;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.commons.collections4.map.LRUMapTest;

        $r2 = new org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclassBlocksRemove;

        specialinvoke $r2.<org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclassBlocksRemove: void <init>(int,boolean)>(2, 1);

        $i0 = virtualinvoke $r2.<org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclassBlocksRemove: int size()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(int,int)>(0, $i0);

        virtualinvoke $r2.<org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclassBlocksRemove: java.lang.Object put(java.lang.Object,java.lang.Object)>("A", "a");

        $i1 = virtualinvoke $r2.<org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclassBlocksRemove: int size()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(int,int)>(1, $i1);

        virtualinvoke $r2.<org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclassBlocksRemove: java.lang.Object put(java.lang.Object,java.lang.Object)>("B", "b");

        $i2 = virtualinvoke $r2.<org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclassBlocksRemove: int size()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(int,int)>(2, $i2);

        virtualinvoke $r2.<org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclassBlocksRemove: java.lang.Object put(java.lang.Object,java.lang.Object)>("C", "c");

        $i3 = virtualinvoke $r2.<org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclassBlocksRemove: int size()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(int,int)>(3, $i3);

        $i4 = virtualinvoke $r2.<org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclassBlocksRemove: int maxSize()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(int,int)>(2, $i4);

        $z0 = virtualinvoke $r2.<org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclassBlocksRemove: boolean containsKey(java.lang.Object)>("A");

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(boolean,boolean)>(1, $z0);

        $z1 = virtualinvoke $r2.<org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclassBlocksRemove: boolean containsKey(java.lang.Object)>("B");

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(boolean,boolean)>(1, $z1);

        $z2 = virtualinvoke $r2.<org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclassBlocksRemove: boolean containsKey(java.lang.Object)>("C");

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(boolean,boolean)>(1, $z2);

        return;
    }

    public void testRemoveLRUFirstBlocksRemove()
    {
        org.apache.commons.collections4.map.LRUMapTest r0;
        org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclassFirstBlocksRemove $r2;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.commons.collections4.map.LRUMapTest;

        $r2 = new org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclassFirstBlocksRemove;

        specialinvoke $r2.<org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclassFirstBlocksRemove: void <init>(int)>(2);

        $i0 = virtualinvoke $r2.<org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclassFirstBlocksRemove: int size()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(int,int)>(0, $i0);

        virtualinvoke $r2.<org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclassFirstBlocksRemove: java.lang.Object put(java.lang.Object,java.lang.Object)>("A", "a");

        $i1 = virtualinvoke $r2.<org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclassFirstBlocksRemove: int size()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(int,int)>(1, $i1);

        virtualinvoke $r2.<org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclassFirstBlocksRemove: java.lang.Object put(java.lang.Object,java.lang.Object)>("B", "b");

        $i2 = virtualinvoke $r2.<org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclassFirstBlocksRemove: int size()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(int,int)>(2, $i2);

        virtualinvoke $r2.<org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclassFirstBlocksRemove: java.lang.Object put(java.lang.Object,java.lang.Object)>("C", "c");

        $i3 = virtualinvoke $r2.<org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclassFirstBlocksRemove: int size()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(int,int)>(2, $i3);

        $i4 = virtualinvoke $r2.<org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclassFirstBlocksRemove: int maxSize()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(int,int)>(2, $i4);

        $z0 = virtualinvoke $r2.<org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclassFirstBlocksRemove: boolean containsKey(java.lang.Object)>("A");

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(boolean,boolean)>(1, $z0);

        $z1 = virtualinvoke $r2.<org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclassFirstBlocksRemove: boolean containsKey(java.lang.Object)>("B");

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(boolean,boolean)>(0, $z1);

        $z2 = virtualinvoke $r2.<org.apache.commons.collections4.map.LRUMapTest$MockLRUMapSubclassFirstBlocksRemove: boolean containsKey(java.lang.Object)>("C");

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(boolean,boolean)>(1, $z2);

        return;
    }

    public void testInternalState_Buckets()
    {
        org.apache.commons.collections4.map.LRUMapTest r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        boolean $z0, $z1;
        org.apache.commons.collections4.map.LRUMapTest$SingleHashCode $r8, $r9, $r10, $r11, $r12, $r13;
        org.apache.commons.collections4.map.LRUMap $r14;
        org.apache.commons.collections4.map.AbstractHashedMap$HashEntry[] $r18, $r33, $r36, $r40, $r46, $r61, $r64, $r68, $r74, $r89, $r92, $r96, $r102, $r117, $r120, $r124, $r131, $r146, $r149, $r153, $r159, $r174, $r177, $r181;
        org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry $r19, $r21, $r22, $r24, $r25, $r26, $r28, $r29, $r30, $r31, $r47, $r49, $r50, $r52, $r53, $r54, $r56, $r57, $r58, $r59, $r75, $r77, $r78, $r80, $r81, $r82, $r84, $r85, $r86, $r87, $r103, $r105, $r106, $r108, $r109, $r110, $r112, $r113, $r114, $r115, $r132, $r134, $r135, $r137, $r138, $r139, $r141, $r142, $r143, $r144, $r160, $r162, $r163, $r165, $r166, $r167, $r169, $r170, $r171, $r172;
        org.apache.commons.collections4.map.AbstractHashedMap$HashEntry $r20, $r34, $r37, $r38, $r41, $r42, $r43, $r48, $r62, $r65, $r66, $r69, $r70, $r71, $r76, $r90, $r93, $r94, $r97, $r98, $r99, $r104, $r118, $r121, $r122, $r125, $r126, $r127, $r133, $r147, $r150, $r151, $r154, $r155, $r156, $r161, $r175, $r178, $r179, $r182, $r183, $r184;
        java.lang.Object $r23, $r27, $r32, $r35, $r39, $r44, $r51, $r55, $r60, $r63, $r67, $r72, $r79, $r83, $r88, $r91, $r95, $r100, $r107, $r111, $r116, $r119, $r123, $r128, $r136, $r140, $r145, $r148, $r152, $r157, $r164, $r168, $r173, $r176, $r180, $r185;

        r0 := @this: org.apache.commons.collections4.map.LRUMapTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.map.LRUMapTest: boolean isPutAddSupported()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.map.LRUMapTest: boolean isPutChangeSupported()>();

        if $z1 != 0 goto label2;

     label1:
        return;

     label2:
        $r8 = new org.apache.commons.collections4.map.LRUMapTest$SingleHashCode;

        specialinvoke $r8.<org.apache.commons.collections4.map.LRUMapTest$SingleHashCode: void <init>(java.lang.String)>("1");

        $r9 = new org.apache.commons.collections4.map.LRUMapTest$SingleHashCode;

        specialinvoke $r9.<org.apache.commons.collections4.map.LRUMapTest$SingleHashCode: void <init>(java.lang.String)>("2");

        $r10 = new org.apache.commons.collections4.map.LRUMapTest$SingleHashCode;

        specialinvoke $r10.<org.apache.commons.collections4.map.LRUMapTest$SingleHashCode: void <init>(java.lang.String)>("3");

        $r11 = new org.apache.commons.collections4.map.LRUMapTest$SingleHashCode;

        specialinvoke $r11.<org.apache.commons.collections4.map.LRUMapTest$SingleHashCode: void <init>(java.lang.String)>("4");

        $r12 = new org.apache.commons.collections4.map.LRUMapTest$SingleHashCode;

        specialinvoke $r12.<org.apache.commons.collections4.map.LRUMapTest$SingleHashCode: void <init>(java.lang.String)>("5");

        $r13 = new org.apache.commons.collections4.map.LRUMapTest$SingleHashCode;

        specialinvoke $r13.<org.apache.commons.collections4.map.LRUMapTest$SingleHashCode: void <init>(java.lang.String)>("6");

        $r14 = new org.apache.commons.collections4.map.LRUMap;

        specialinvoke $r14.<org.apache.commons.collections4.map.LRUMap: void <init>(int,float)>(3, 1.0F);

        $i1 = virtualinvoke $r14.<org.apache.commons.collections4.map.LRUMap: int hash(java.lang.Object)>($r8);

        i0 = virtualinvoke $r14.<org.apache.commons.collections4.map.LRUMap: int hashIndex(int,int)>($i1, 4);

        virtualinvoke $r14.<org.apache.commons.collections4.map.LRUMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, "A");

        virtualinvoke $r14.<org.apache.commons.collections4.map.LRUMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, "B");

        virtualinvoke $r14.<org.apache.commons.collections4.map.LRUMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, "C");

        $r18 = $r14.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry[] data>;

        $i2 = lengthof $r18;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(int,int)>(4, $i2);

        $i3 = $r14.<org.apache.commons.collections4.map.LRUMap: int size>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(int,int)>(3, $i3);

        $r19 = $r14.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry header>;

        $r20 = $r19.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry next>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(java.lang.Object,java.lang.Object)>(null, $r20);

        $r21 = $r14.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry header>;

        $r22 = $r21.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry after>;

        $r23 = $r22.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: java.lang.Object key>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(java.lang.Object,java.lang.Object)>($r8, $r23);

        $r24 = $r14.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry header>;

        $r25 = $r24.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry after>;

        $r26 = $r25.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry after>;

        $r27 = $r26.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: java.lang.Object key>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(java.lang.Object,java.lang.Object)>($r9, $r27);

        $r28 = $r14.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry header>;

        $r29 = $r28.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry after>;

        $r30 = $r29.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry after>;

        $r31 = $r30.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry after>;

        $r32 = $r31.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: java.lang.Object key>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r32);

        $r33 = $r14.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry[] data>;

        $r34 = $r33[i0];

        $r35 = $r34.<org.apache.commons.collections4.map.AbstractHashedMap$HashEntry: java.lang.Object key>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r35);

        $r36 = $r14.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry[] data>;

        $r37 = $r36[i0];

        $r38 = $r37.<org.apache.commons.collections4.map.AbstractHashedMap$HashEntry: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry next>;

        $r39 = $r38.<org.apache.commons.collections4.map.AbstractHashedMap$HashEntry: java.lang.Object key>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(java.lang.Object,java.lang.Object)>($r9, $r39);

        $r40 = $r14.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry[] data>;

        $r41 = $r40[i0];

        $r42 = $r41.<org.apache.commons.collections4.map.AbstractHashedMap$HashEntry: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry next>;

        $r43 = $r42.<org.apache.commons.collections4.map.AbstractHashedMap$HashEntry: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry next>;

        $r44 = $r43.<org.apache.commons.collections4.map.AbstractHashedMap$HashEntry: java.lang.Object key>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(java.lang.Object,java.lang.Object)>($r8, $r44);

        virtualinvoke $r14.<org.apache.commons.collections4.map.LRUMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, "D");

        $r46 = $r14.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry[] data>;

        $i4 = lengthof $r46;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(int,int)>(4, $i4);

        $i5 = $r14.<org.apache.commons.collections4.map.LRUMap: int size>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(int,int)>(3, $i5);

        $r47 = $r14.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry header>;

        $r48 = $r47.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry next>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(java.lang.Object,java.lang.Object)>(null, $r48);

        $r49 = $r14.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry header>;

        $r50 = $r49.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry after>;

        $r51 = $r50.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: java.lang.Object key>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(java.lang.Object,java.lang.Object)>($r9, $r51);

        $r52 = $r14.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry header>;

        $r53 = $r52.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry after>;

        $r54 = $r53.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry after>;

        $r55 = $r54.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: java.lang.Object key>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r55);

        $r56 = $r14.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry header>;

        $r57 = $r56.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry after>;

        $r58 = $r57.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry after>;

        $r59 = $r58.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry after>;

        $r60 = $r59.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: java.lang.Object key>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(java.lang.Object,java.lang.Object)>($r11, $r60);

        $r61 = $r14.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry[] data>;

        $r62 = $r61[i0];

        $r63 = $r62.<org.apache.commons.collections4.map.AbstractHashedMap$HashEntry: java.lang.Object key>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(java.lang.Object,java.lang.Object)>($r11, $r63);

        $r64 = $r14.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry[] data>;

        $r65 = $r64[i0];

        $r66 = $r65.<org.apache.commons.collections4.map.AbstractHashedMap$HashEntry: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry next>;

        $r67 = $r66.<org.apache.commons.collections4.map.AbstractHashedMap$HashEntry: java.lang.Object key>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r67);

        $r68 = $r14.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry[] data>;

        $r69 = $r68[i0];

        $r70 = $r69.<org.apache.commons.collections4.map.AbstractHashedMap$HashEntry: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry next>;

        $r71 = $r70.<org.apache.commons.collections4.map.AbstractHashedMap$HashEntry: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry next>;

        $r72 = $r71.<org.apache.commons.collections4.map.AbstractHashedMap$HashEntry: java.lang.Object key>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(java.lang.Object,java.lang.Object)>($r9, $r72);

        virtualinvoke $r14.<org.apache.commons.collections4.map.LRUMap: java.lang.Object get(java.lang.Object)>($r10);

        $r74 = $r14.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry[] data>;

        $i6 = lengthof $r74;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(int,int)>(4, $i6);

        $i7 = $r14.<org.apache.commons.collections4.map.LRUMap: int size>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(int,int)>(3, $i7);

        $r75 = $r14.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry header>;

        $r76 = $r75.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry next>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(java.lang.Object,java.lang.Object)>(null, $r76);

        $r77 = $r14.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry header>;

        $r78 = $r77.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry after>;

        $r79 = $r78.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: java.lang.Object key>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(java.lang.Object,java.lang.Object)>($r9, $r79);

        $r80 = $r14.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry header>;

        $r81 = $r80.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry after>;

        $r82 = $r81.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry after>;

        $r83 = $r82.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: java.lang.Object key>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(java.lang.Object,java.lang.Object)>($r11, $r83);

        $r84 = $r14.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry header>;

        $r85 = $r84.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry after>;

        $r86 = $r85.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry after>;

        $r87 = $r86.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry after>;

        $r88 = $r87.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: java.lang.Object key>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r88);

        $r89 = $r14.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry[] data>;

        $r90 = $r89[i0];

        $r91 = $r90.<org.apache.commons.collections4.map.AbstractHashedMap$HashEntry: java.lang.Object key>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(java.lang.Object,java.lang.Object)>($r11, $r91);

        $r92 = $r14.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry[] data>;

        $r93 = $r92[i0];

        $r94 = $r93.<org.apache.commons.collections4.map.AbstractHashedMap$HashEntry: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry next>;

        $r95 = $r94.<org.apache.commons.collections4.map.AbstractHashedMap$HashEntry: java.lang.Object key>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r95);

        $r96 = $r14.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry[] data>;

        $r97 = $r96[i0];

        $r98 = $r97.<org.apache.commons.collections4.map.AbstractHashedMap$HashEntry: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry next>;

        $r99 = $r98.<org.apache.commons.collections4.map.AbstractHashedMap$HashEntry: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry next>;

        $r100 = $r99.<org.apache.commons.collections4.map.AbstractHashedMap$HashEntry: java.lang.Object key>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(java.lang.Object,java.lang.Object)>($r9, $r100);

        virtualinvoke $r14.<org.apache.commons.collections4.map.LRUMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, "E");

        $r102 = $r14.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry[] data>;

        $i8 = lengthof $r102;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(int,int)>(4, $i8);

        $i9 = $r14.<org.apache.commons.collections4.map.LRUMap: int size>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(int,int)>(3, $i9);

        $r103 = $r14.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry header>;

        $r104 = $r103.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry next>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(java.lang.Object,java.lang.Object)>(null, $r104);

        $r105 = $r14.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry header>;

        $r106 = $r105.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry after>;

        $r107 = $r106.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: java.lang.Object key>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(java.lang.Object,java.lang.Object)>($r11, $r107);

        $r108 = $r14.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry header>;

        $r109 = $r108.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry after>;

        $r110 = $r109.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry after>;

        $r111 = $r110.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: java.lang.Object key>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r111);

        $r112 = $r14.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry header>;

        $r113 = $r112.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry after>;

        $r114 = $r113.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry after>;

        $r115 = $r114.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry after>;

        $r116 = $r115.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: java.lang.Object key>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(java.lang.Object,java.lang.Object)>($r12, $r116);

        $r117 = $r14.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry[] data>;

        $r118 = $r117[i0];

        $r119 = $r118.<org.apache.commons.collections4.map.AbstractHashedMap$HashEntry: java.lang.Object key>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(java.lang.Object,java.lang.Object)>($r12, $r119);

        $r120 = $r14.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry[] data>;

        $r121 = $r120[i0];

        $r122 = $r121.<org.apache.commons.collections4.map.AbstractHashedMap$HashEntry: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry next>;

        $r123 = $r122.<org.apache.commons.collections4.map.AbstractHashedMap$HashEntry: java.lang.Object key>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(java.lang.Object,java.lang.Object)>($r11, $r123);

        $r124 = $r14.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry[] data>;

        $r125 = $r124[i0];

        $r126 = $r125.<org.apache.commons.collections4.map.AbstractHashedMap$HashEntry: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry next>;

        $r127 = $r126.<org.apache.commons.collections4.map.AbstractHashedMap$HashEntry: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry next>;

        $r128 = $r127.<org.apache.commons.collections4.map.AbstractHashedMap$HashEntry: java.lang.Object key>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r128);

        virtualinvoke $r14.<org.apache.commons.collections4.map.LRUMap: java.lang.Object get(java.lang.Object)>($r10);

        virtualinvoke $r14.<org.apache.commons.collections4.map.LRUMap: java.lang.Object get(java.lang.Object)>($r12);

        $r131 = $r14.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry[] data>;

        $i10 = lengthof $r131;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(int,int)>(4, $i10);

        $i11 = $r14.<org.apache.commons.collections4.map.LRUMap: int size>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(int,int)>(3, $i11);

        $r132 = $r14.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry header>;

        $r133 = $r132.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry next>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(java.lang.Object,java.lang.Object)>(null, $r133);

        $r134 = $r14.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry header>;

        $r135 = $r134.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry after>;

        $r136 = $r135.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: java.lang.Object key>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(java.lang.Object,java.lang.Object)>($r11, $r136);

        $r137 = $r14.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry header>;

        $r138 = $r137.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry after>;

        $r139 = $r138.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry after>;

        $r140 = $r139.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: java.lang.Object key>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r140);

        $r141 = $r14.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry header>;

        $r142 = $r141.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry after>;

        $r143 = $r142.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry after>;

        $r144 = $r143.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry after>;

        $r145 = $r144.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: java.lang.Object key>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(java.lang.Object,java.lang.Object)>($r12, $r145);

        $r146 = $r14.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry[] data>;

        $r147 = $r146[i0];

        $r148 = $r147.<org.apache.commons.collections4.map.AbstractHashedMap$HashEntry: java.lang.Object key>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(java.lang.Object,java.lang.Object)>($r12, $r148);

        $r149 = $r14.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry[] data>;

        $r150 = $r149[i0];

        $r151 = $r150.<org.apache.commons.collections4.map.AbstractHashedMap$HashEntry: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry next>;

        $r152 = $r151.<org.apache.commons.collections4.map.AbstractHashedMap$HashEntry: java.lang.Object key>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(java.lang.Object,java.lang.Object)>($r11, $r152);

        $r153 = $r14.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry[] data>;

        $r154 = $r153[i0];

        $r155 = $r154.<org.apache.commons.collections4.map.AbstractHashedMap$HashEntry: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry next>;

        $r156 = $r155.<org.apache.commons.collections4.map.AbstractHashedMap$HashEntry: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry next>;

        $r157 = $r156.<org.apache.commons.collections4.map.AbstractHashedMap$HashEntry: java.lang.Object key>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r157);

        virtualinvoke $r14.<org.apache.commons.collections4.map.LRUMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, "F");

        $r159 = $r14.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry[] data>;

        $i12 = lengthof $r159;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(int,int)>(4, $i12);

        $i13 = $r14.<org.apache.commons.collections4.map.LRUMap: int size>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(int,int)>(3, $i13);

        $r160 = $r14.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry header>;

        $r161 = $r160.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry next>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(java.lang.Object,java.lang.Object)>(null, $r161);

        $r162 = $r14.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry header>;

        $r163 = $r162.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry after>;

        $r164 = $r163.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: java.lang.Object key>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r164);

        $r165 = $r14.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry header>;

        $r166 = $r165.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry after>;

        $r167 = $r166.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry after>;

        $r168 = $r167.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: java.lang.Object key>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(java.lang.Object,java.lang.Object)>($r12, $r168);

        $r169 = $r14.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry header>;

        $r170 = $r169.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry after>;

        $r171 = $r170.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry after>;

        $r172 = $r171.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry after>;

        $r173 = $r172.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: java.lang.Object key>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(java.lang.Object,java.lang.Object)>($r13, $r173);

        $r174 = $r14.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry[] data>;

        $r175 = $r174[i0];

        $r176 = $r175.<org.apache.commons.collections4.map.AbstractHashedMap$HashEntry: java.lang.Object key>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(java.lang.Object,java.lang.Object)>($r13, $r176);

        $r177 = $r14.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry[] data>;

        $r178 = $r177[i0];

        $r179 = $r178.<org.apache.commons.collections4.map.AbstractHashedMap$HashEntry: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry next>;

        $r180 = $r179.<org.apache.commons.collections4.map.AbstractHashedMap$HashEntry: java.lang.Object key>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(java.lang.Object,java.lang.Object)>($r12, $r180);

        $r181 = $r14.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry[] data>;

        $r182 = $r181[i0];

        $r183 = $r182.<org.apache.commons.collections4.map.AbstractHashedMap$HashEntry: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry next>;

        $r184 = $r183.<org.apache.commons.collections4.map.AbstractHashedMap$HashEntry: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry next>;

        $r185 = $r184.<org.apache.commons.collections4.map.AbstractHashedMap$HashEntry: java.lang.Object key>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r185);

        return;
    }

    public void testInternalState_getEntry_int()
    {
        org.apache.commons.collections4.map.LRUMapTest r0;
        boolean $z0, $z1;
        org.apache.commons.collections4.map.LRUMapTest$SingleHashCode $r5, $r6, $r7;
        org.apache.commons.collections4.map.LRUMap $r8;
        org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry $r12, $r14, $r16;
        java.lang.Object $r13, $r15, $r17;
        java.lang.IndexOutOfBoundsException $r20, $r21;

        r0 := @this: org.apache.commons.collections4.map.LRUMapTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.map.LRUMapTest: boolean isPutAddSupported()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.map.LRUMapTest: boolean isPutChangeSupported()>();

        if $z1 != 0 goto label2;

     label1:
        return;

     label2:
        $r5 = new org.apache.commons.collections4.map.LRUMapTest$SingleHashCode;

        specialinvoke $r5.<org.apache.commons.collections4.map.LRUMapTest$SingleHashCode: void <init>(java.lang.String)>("1");

        $r6 = new org.apache.commons.collections4.map.LRUMapTest$SingleHashCode;

        specialinvoke $r6.<org.apache.commons.collections4.map.LRUMapTest$SingleHashCode: void <init>(java.lang.String)>("2");

        $r7 = new org.apache.commons.collections4.map.LRUMapTest$SingleHashCode;

        specialinvoke $r7.<org.apache.commons.collections4.map.LRUMapTest$SingleHashCode: void <init>(java.lang.String)>("3");

        $r8 = new org.apache.commons.collections4.map.LRUMap;

        specialinvoke $r8.<org.apache.commons.collections4.map.LRUMap: void <init>(int,float)>(3, 1.0F);

        virtualinvoke $r8.<org.apache.commons.collections4.map.LRUMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, "A");

        virtualinvoke $r8.<org.apache.commons.collections4.map.LRUMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, "B");

        virtualinvoke $r8.<org.apache.commons.collections4.map.LRUMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, "C");

        $r12 = virtualinvoke $r8.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry getEntry(int)>(0);

        $r13 = $r12.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: java.lang.Object key>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(java.lang.Object,java.lang.Object)>($r5, $r13);

        $r14 = virtualinvoke $r8.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry getEntry(int)>(1);

        $r15 = $r14.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: java.lang.Object key>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(java.lang.Object,java.lang.Object)>($r6, $r15);

        $r16 = virtualinvoke $r8.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry getEntry(int)>(2);

        $r17 = $r16.<org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry: java.lang.Object key>;

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(java.lang.Object,java.lang.Object)>($r7, $r17);

     label3:
        virtualinvoke $r8.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry getEntry(int)>(-1);

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void fail()>();

     label4:
        goto label6;

     label5:
        $r21 := @caughtexception;

     label6:
        virtualinvoke $r8.<org.apache.commons.collections4.map.LRUMap: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry getEntry(int)>(3);

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void fail()>();

     label7:
        goto label9;

     label8:
        $r20 := @caughtexception;

     label9:
        return;

        catch java.lang.IndexOutOfBoundsException from label3 to label4 with label5;
        catch java.lang.IndexOutOfBoundsException from label6 to label7 with label8;
    }

    public void testSynchronizedRemoveFromMapIterator() throws java.lang.InterruptedException
    {
        org.apache.commons.collections4.map.LRUMapTest r0;
        int[] r4;
        java.lang.Thread[] r5;
        org.apache.commons.collections4.map.LRUMap $r9;
        java.util.HashMap $r10;
        org.apache.commons.collections4.map.LRUMapTest$1 $r11;
        java.lang.String $r12, $r16, $r21, $r29;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7, i8, i9, i10, i11, i12, i13;
        java.lang.StringBuilder $r13, $r14, $r15, $r17, $r18, $r19, $r20, $r26, $r27, $r28;
        org.apache.commons.collections4.map.LRUMapTest$2 $r25;
        java.lang.Throwable $r30, $r31, $r32;
        java.lang.Thread r34, r37, r40, r42;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.map.LRUMapTest;

        $r9 = new org.apache.commons.collections4.map.LRUMap;

        specialinvoke $r9.<org.apache.commons.collections4.map.LRUMap: void <init>(int)>(10000);

        $r10 = new java.util.HashMap;

        specialinvoke $r10.<java.util.HashMap: void <init>()>();

        $r11 = new org.apache.commons.collections4.map.LRUMapTest$1;

        $r12 = virtualinvoke r0.<org.apache.commons.collections4.map.LRUMapTest: java.lang.String getName()>();

        specialinvoke $r11.<org.apache.commons.collections4.map.LRUMapTest$1: void <init>(org.apache.commons.collections4.map.LRUMapTest,java.lang.String,java.util.Map)>(r0, $r12, $r10);

        r4 = newarray (int)[1];

        r4[0] = 0;

        r5 = newarray (java.lang.Thread)[50];

        i5 = 0;

     label01:
        $i0 = lengthof r5;

        if i5 >= $i0 goto label02;

        $r25 = new org.apache.commons.collections4.map.LRUMapTest$2;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("JUnit Thread ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<org.apache.commons.collections4.map.LRUMapTest$2: void <init>(org.apache.commons.collections4.map.LRUMapTest,java.lang.ThreadGroup,java.lang.String,org.apache.commons.collections4.map.LRUMap,int[])>(r0, $r11, $r29, $r9, r4);

        r5[i5] = $r25;

        i5 = i5 + 1;

        goto label01;

     label02:
        i6 = lengthof r5;

        i7 = 0;

     label03:
        if i7 >= i6 goto label09;

        r34 = r5[i7];

        entermonitor r34;

     label04:
        virtualinvoke r34.<java.lang.Thread: void start()>();

        virtualinvoke r34.<java.lang.Object: void wait()>();

        exitmonitor r34;

     label05:
        goto label08;

     label06:
        $r30 := @caughtexception;

        exitmonitor r34;

     label07:
        throw $r30;

     label08:
        i7 = i7 + 1;

        goto label03;

     label09:
        i8 = lengthof r5;

        i9 = 0;

     label10:
        if i9 >= i8 goto label16;

        r37 = r5[i9];

        entermonitor r37;

     label11:
        virtualinvoke r37.<java.lang.Object: void notifyAll()>();

        exitmonitor r37;

     label12:
        goto label15;

     label13:
        $r32 := @caughtexception;

        exitmonitor r37;

     label14:
        throw $r32;

     label15:
        i9 = i9 + 1;

        goto label10;

     label16:
        staticinvoke <java.lang.Thread: void sleep(long)>(1000L);

        i10 = lengthof r5;

        i11 = 0;

     label17:
        if i11 >= i10 goto label18;

        r40 = r5[i11];

        virtualinvoke r40.<java.lang.Thread: void interrupt()>();

        i11 = i11 + 1;

        goto label17;

     label18:
        i12 = lengthof r5;

        i13 = 0;

     label19:
        if i13 >= i12 goto label25;

        r42 = r5[i13];

        entermonitor r42;

     label20:
        virtualinvoke r42.<java.lang.Thread: void join()>();

        exitmonitor r42;

     label21:
        goto label24;

     label22:
        $r31 := @caughtexception;

        exitmonitor r42;

     label23:
        throw $r31;

     label24:
        i13 = i13 + 1;

        goto label19;

     label25:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exceptions have been thrown: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = interfaceinvoke $r10.<java.util.Map: int size()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(java.lang.String,int,int)>($r16, 0, $i1);

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Each thread should have put at least 1 element into the map, but only ");

        $i2 = r4[0];

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" did succeed");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $i4 = r4[0];

        $i3 = lengthof r5;

        if $i4 < $i3 goto label26;

        $z0 = 1;

        goto label27;

     label26:
        $z0 = 0;

     label27:
        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertTrue(java.lang.String,boolean)>($r21, $z0);

        return;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
        catch java.lang.Throwable from label20 to label21 with label22;
        catch java.lang.Throwable from label22 to label23 with label22;
    }

    public void testSynchronizedRemoveFromEntrySet() throws java.lang.InterruptedException
    {
        org.apache.commons.collections4.map.LRUMapTest r0;
        int[] r4;
        java.lang.Thread[] r5;
        org.apache.commons.collections4.map.LRUMap $r9;
        java.util.HashMap $r10;
        org.apache.commons.collections4.map.LRUMapTest$3 $r11;
        java.lang.String $r12, $r16, $r21, $r29;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7, i8, i9, i10, i11, i12, i13;
        java.lang.StringBuilder $r13, $r14, $r15, $r17, $r18, $r19, $r20, $r26, $r27, $r28;
        org.apache.commons.collections4.map.LRUMapTest$4 $r25;
        java.lang.Throwable $r30, $r31, $r32;
        java.lang.Thread r34, r37, r40, r42;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.map.LRUMapTest;

        $r9 = new org.apache.commons.collections4.map.LRUMap;

        specialinvoke $r9.<org.apache.commons.collections4.map.LRUMap: void <init>(int)>(10000);

        $r10 = new java.util.HashMap;

        specialinvoke $r10.<java.util.HashMap: void <init>()>();

        $r11 = new org.apache.commons.collections4.map.LRUMapTest$3;

        $r12 = virtualinvoke r0.<org.apache.commons.collections4.map.LRUMapTest: java.lang.String getName()>();

        specialinvoke $r11.<org.apache.commons.collections4.map.LRUMapTest$3: void <init>(org.apache.commons.collections4.map.LRUMapTest,java.lang.String,java.util.Map)>(r0, $r12, $r10);

        r4 = newarray (int)[1];

        r4[0] = 0;

        r5 = newarray (java.lang.Thread)[50];

        i5 = 0;

     label01:
        $i0 = lengthof r5;

        if i5 >= $i0 goto label02;

        $r25 = new org.apache.commons.collections4.map.LRUMapTest$4;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("JUnit Thread ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<org.apache.commons.collections4.map.LRUMapTest$4: void <init>(org.apache.commons.collections4.map.LRUMapTest,java.lang.ThreadGroup,java.lang.String,java.util.Map,int[])>(r0, $r11, $r29, $r9, r4);

        r5[i5] = $r25;

        i5 = i5 + 1;

        goto label01;

     label02:
        i6 = lengthof r5;

        i7 = 0;

     label03:
        if i7 >= i6 goto label09;

        r34 = r5[i7];

        entermonitor r34;

     label04:
        virtualinvoke r34.<java.lang.Thread: void start()>();

        virtualinvoke r34.<java.lang.Object: void wait()>();

        exitmonitor r34;

     label05:
        goto label08;

     label06:
        $r31 := @caughtexception;

        exitmonitor r34;

     label07:
        throw $r31;

     label08:
        i7 = i7 + 1;

        goto label03;

     label09:
        i8 = lengthof r5;

        i9 = 0;

     label10:
        if i9 >= i8 goto label16;

        r37 = r5[i9];

        entermonitor r37;

     label11:
        virtualinvoke r37.<java.lang.Object: void notifyAll()>();

        exitmonitor r37;

     label12:
        goto label15;

     label13:
        $r30 := @caughtexception;

        exitmonitor r37;

     label14:
        throw $r30;

     label15:
        i9 = i9 + 1;

        goto label10;

     label16:
        staticinvoke <java.lang.Thread: void sleep(long)>(1000L);

        i10 = lengthof r5;

        i11 = 0;

     label17:
        if i11 >= i10 goto label18;

        r40 = r5[i11];

        virtualinvoke r40.<java.lang.Thread: void interrupt()>();

        i11 = i11 + 1;

        goto label17;

     label18:
        i12 = lengthof r5;

        i13 = 0;

     label19:
        if i13 >= i12 goto label25;

        r42 = r5[i13];

        entermonitor r42;

     label20:
        virtualinvoke r42.<java.lang.Thread: void join()>();

        exitmonitor r42;

     label21:
        goto label24;

     label22:
        $r32 := @caughtexception;

        exitmonitor r42;

     label23:
        throw $r32;

     label24:
        i13 = i13 + 1;

        goto label19;

     label25:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exceptions have been thrown: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = interfaceinvoke $r10.<java.util.Map: int size()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(java.lang.String,int,int)>($r16, 0, $i1);

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Each thread should have put at least 1 element into the map, but only ");

        $i2 = r4[0];

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" did succeed");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $i4 = r4[0];

        $i3 = lengthof r5;

        if $i4 < $i3 goto label26;

        $z0 = 1;

        goto label27;

     label26:
        $z0 = 0;

     label27:
        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertTrue(java.lang.String,boolean)>($r21, $z0);

        return;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
        catch java.lang.Throwable from label20 to label21 with label22;
        catch java.lang.Throwable from label22 to label23 with label22;
    }

    public void testSynchronizedRemoveFromKeySet() throws java.lang.InterruptedException
    {
        org.apache.commons.collections4.map.LRUMapTest r0;
        int[] r4;
        java.lang.Thread[] r5;
        org.apache.commons.collections4.map.LRUMap $r9;
        java.util.HashMap $r10;
        org.apache.commons.collections4.map.LRUMapTest$5 $r11;
        java.lang.String $r12, $r16, $r21, $r29;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7, i8, i9, i10, i11, i12, i13;
        java.lang.StringBuilder $r13, $r14, $r15, $r17, $r18, $r19, $r20, $r26, $r27, $r28;
        org.apache.commons.collections4.map.LRUMapTest$6 $r25;
        java.lang.Throwable $r30, $r31, $r32;
        java.lang.Thread r34, r37, r40, r42;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.map.LRUMapTest;

        $r9 = new org.apache.commons.collections4.map.LRUMap;

        specialinvoke $r9.<org.apache.commons.collections4.map.LRUMap: void <init>(int)>(10000);

        $r10 = new java.util.HashMap;

        specialinvoke $r10.<java.util.HashMap: void <init>()>();

        $r11 = new org.apache.commons.collections4.map.LRUMapTest$5;

        $r12 = virtualinvoke r0.<org.apache.commons.collections4.map.LRUMapTest: java.lang.String getName()>();

        specialinvoke $r11.<org.apache.commons.collections4.map.LRUMapTest$5: void <init>(org.apache.commons.collections4.map.LRUMapTest,java.lang.String,java.util.Map)>(r0, $r12, $r10);

        r4 = newarray (int)[1];

        r4[0] = 0;

        r5 = newarray (java.lang.Thread)[50];

        i5 = 0;

     label01:
        $i0 = lengthof r5;

        if i5 >= $i0 goto label02;

        $r25 = new org.apache.commons.collections4.map.LRUMapTest$6;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("JUnit Thread ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<org.apache.commons.collections4.map.LRUMapTest$6: void <init>(org.apache.commons.collections4.map.LRUMapTest,java.lang.ThreadGroup,java.lang.String,java.util.Map,int[])>(r0, $r11, $r29, $r9, r4);

        r5[i5] = $r25;

        i5 = i5 + 1;

        goto label01;

     label02:
        i6 = lengthof r5;

        i7 = 0;

     label03:
        if i7 >= i6 goto label09;

        r34 = r5[i7];

        entermonitor r34;

     label04:
        virtualinvoke r34.<java.lang.Thread: void start()>();

        virtualinvoke r34.<java.lang.Object: void wait()>();

        exitmonitor r34;

     label05:
        goto label08;

     label06:
        $r31 := @caughtexception;

        exitmonitor r34;

     label07:
        throw $r31;

     label08:
        i7 = i7 + 1;

        goto label03;

     label09:
        i8 = lengthof r5;

        i9 = 0;

     label10:
        if i9 >= i8 goto label16;

        r37 = r5[i9];

        entermonitor r37;

     label11:
        virtualinvoke r37.<java.lang.Object: void notifyAll()>();

        exitmonitor r37;

     label12:
        goto label15;

     label13:
        $r32 := @caughtexception;

        exitmonitor r37;

     label14:
        throw $r32;

     label15:
        i9 = i9 + 1;

        goto label10;

     label16:
        staticinvoke <java.lang.Thread: void sleep(long)>(1000L);

        i10 = lengthof r5;

        i11 = 0;

     label17:
        if i11 >= i10 goto label18;

        r40 = r5[i11];

        virtualinvoke r40.<java.lang.Thread: void interrupt()>();

        i11 = i11 + 1;

        goto label17;

     label18:
        i12 = lengthof r5;

        i13 = 0;

     label19:
        if i13 >= i12 goto label25;

        r42 = r5[i13];

        entermonitor r42;

     label20:
        virtualinvoke r42.<java.lang.Thread: void join()>();

        exitmonitor r42;

     label21:
        goto label24;

     label22:
        $r30 := @caughtexception;

        exitmonitor r42;

     label23:
        throw $r30;

     label24:
        i13 = i13 + 1;

        goto label19;

     label25:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exceptions have been thrown: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = interfaceinvoke $r10.<java.util.Map: int size()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(java.lang.String,int,int)>($r16, 0, $i1);

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Each thread should have put at least 1 element into the map, but only ");

        $i2 = r4[0];

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" did succeed");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $i4 = r4[0];

        $i3 = lengthof r5;

        if $i4 < $i3 goto label26;

        $z0 = 1;

        goto label27;

     label26:
        $z0 = 0;

     label27:
        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertTrue(java.lang.String,boolean)>($r21, $z0);

        return;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
        catch java.lang.Throwable from label20 to label21 with label22;
        catch java.lang.Throwable from label22 to label23 with label22;
    }

    public void testSynchronizedRemoveFromValues() throws java.lang.InterruptedException
    {
        org.apache.commons.collections4.map.LRUMapTest r0;
        int[] r4;
        java.lang.Thread[] r5;
        org.apache.commons.collections4.map.LRUMap $r9;
        java.util.HashMap $r10;
        org.apache.commons.collections4.map.LRUMapTest$7 $r11;
        java.lang.String $r12, $r16, $r21, $r29;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7, i8, i9, i10, i11, i12, i13;
        java.lang.StringBuilder $r13, $r14, $r15, $r17, $r18, $r19, $r20, $r26, $r27, $r28;
        org.apache.commons.collections4.map.LRUMapTest$8 $r25;
        java.lang.Throwable $r30, $r31, $r32;
        java.lang.Thread r34, r37, r40, r42;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.map.LRUMapTest;

        $r9 = new org.apache.commons.collections4.map.LRUMap;

        specialinvoke $r9.<org.apache.commons.collections4.map.LRUMap: void <init>(int)>(10000);

        $r10 = new java.util.HashMap;

        specialinvoke $r10.<java.util.HashMap: void <init>()>();

        $r11 = new org.apache.commons.collections4.map.LRUMapTest$7;

        $r12 = virtualinvoke r0.<org.apache.commons.collections4.map.LRUMapTest: java.lang.String getName()>();

        specialinvoke $r11.<org.apache.commons.collections4.map.LRUMapTest$7: void <init>(org.apache.commons.collections4.map.LRUMapTest,java.lang.String,java.util.Map)>(r0, $r12, $r10);

        r4 = newarray (int)[1];

        r4[0] = 0;

        r5 = newarray (java.lang.Thread)[50];

        i5 = 0;

     label01:
        $i0 = lengthof r5;

        if i5 >= $i0 goto label02;

        $r25 = new org.apache.commons.collections4.map.LRUMapTest$8;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("JUnit Thread ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<org.apache.commons.collections4.map.LRUMapTest$8: void <init>(org.apache.commons.collections4.map.LRUMapTest,java.lang.ThreadGroup,java.lang.String,java.util.Map,int[])>(r0, $r11, $r29, $r9, r4);

        r5[i5] = $r25;

        i5 = i5 + 1;

        goto label01;

     label02:
        i6 = lengthof r5;

        i7 = 0;

     label03:
        if i7 >= i6 goto label09;

        r34 = r5[i7];

        entermonitor r34;

     label04:
        virtualinvoke r34.<java.lang.Thread: void start()>();

        virtualinvoke r34.<java.lang.Object: void wait()>();

        exitmonitor r34;

     label05:
        goto label08;

     label06:
        $r30 := @caughtexception;

        exitmonitor r34;

     label07:
        throw $r30;

     label08:
        i7 = i7 + 1;

        goto label03;

     label09:
        i8 = lengthof r5;

        i9 = 0;

     label10:
        if i9 >= i8 goto label16;

        r37 = r5[i9];

        entermonitor r37;

     label11:
        virtualinvoke r37.<java.lang.Object: void notifyAll()>();

        exitmonitor r37;

     label12:
        goto label15;

     label13:
        $r32 := @caughtexception;

        exitmonitor r37;

     label14:
        throw $r32;

     label15:
        i9 = i9 + 1;

        goto label10;

     label16:
        staticinvoke <java.lang.Thread: void sleep(long)>(1000L);

        i10 = lengthof r5;

        i11 = 0;

     label17:
        if i11 >= i10 goto label18;

        r40 = r5[i11];

        virtualinvoke r40.<java.lang.Thread: void interrupt()>();

        i11 = i11 + 1;

        goto label17;

     label18:
        i12 = lengthof r5;

        i13 = 0;

     label19:
        if i13 >= i12 goto label25;

        r42 = r5[i13];

        entermonitor r42;

     label20:
        virtualinvoke r42.<java.lang.Thread: void join()>();

        exitmonitor r42;

     label21:
        goto label24;

     label22:
        $r31 := @caughtexception;

        exitmonitor r42;

     label23:
        throw $r31;

     label24:
        i13 = i13 + 1;

        goto label19;

     label25:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exceptions have been thrown: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = interfaceinvoke $r10.<java.util.Map: int size()>();

        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertEquals(java.lang.String,int,int)>($r16, 0, $i1);

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Each thread should have put at least 1 element into the map, but only ");

        $i2 = r4[0];

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" did succeed");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $i4 = r4[0];

        $i3 = lengthof r5;

        if $i4 < $i3 goto label26;

        $z0 = 1;

        goto label27;

     label26:
        $z0 = 0;

     label27:
        staticinvoke <org.apache.commons.collections4.map.LRUMapTest: void assertTrue(java.lang.String,boolean)>($r21, $z0);

        return;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
        catch java.lang.Throwable from label20 to label21 with label22;
        catch java.lang.Throwable from label22 to label23 with label22;
    }

    public java.lang.String getCompatibilityVersion()
    {
        org.apache.commons.collections4.map.LRUMapTest r0;

        r0 := @this: org.apache.commons.collections4.map.LRUMapTest;

        return "4";
    }

    public volatile org.apache.commons.collections4.OrderedMap getMap()
    {
        org.apache.commons.collections4.map.LRUMapTest r0;
        org.apache.commons.collections4.map.LRUMap $r1;

        r0 := @this: org.apache.commons.collections4.map.LRUMapTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.map.LRUMapTest: org.apache.commons.collections4.map.LRUMap getMap()>();

        return $r1;
    }

    public volatile org.apache.commons.collections4.OrderedMap makeFullMap()
    {
        org.apache.commons.collections4.map.LRUMapTest r0;
        org.apache.commons.collections4.map.LRUMap $r1;

        r0 := @this: org.apache.commons.collections4.map.LRUMapTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.map.LRUMapTest: org.apache.commons.collections4.map.LRUMap makeFullMap()>();

        return $r1;
    }

    public volatile org.apache.commons.collections4.OrderedMap makeObject()
    {
        org.apache.commons.collections4.map.LRUMapTest r0;
        org.apache.commons.collections4.map.LRUMap $r1;

        r0 := @this: org.apache.commons.collections4.map.LRUMapTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.map.LRUMapTest: org.apache.commons.collections4.map.LRUMap makeObject()>();

        return $r1;
    }

    public volatile org.apache.commons.collections4.IterableMap getMap()
    {
        org.apache.commons.collections4.map.LRUMapTest r0;
        org.apache.commons.collections4.map.LRUMap $r1;

        r0 := @this: org.apache.commons.collections4.map.LRUMapTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.map.LRUMapTest: org.apache.commons.collections4.map.LRUMap getMap()>();

        return $r1;
    }

    public volatile org.apache.commons.collections4.IterableMap makeFullMap()
    {
        org.apache.commons.collections4.map.LRUMapTest r0;
        org.apache.commons.collections4.map.LRUMap $r1;

        r0 := @this: org.apache.commons.collections4.map.LRUMapTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.map.LRUMapTest: org.apache.commons.collections4.map.LRUMap makeFullMap()>();

        return $r1;
    }

    public volatile org.apache.commons.collections4.IterableMap makeObject()
    {
        org.apache.commons.collections4.map.LRUMapTest r0;
        org.apache.commons.collections4.map.LRUMap $r1;

        r0 := @this: org.apache.commons.collections4.map.LRUMapTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.map.LRUMapTest: org.apache.commons.collections4.map.LRUMap makeObject()>();

        return $r1;
    }

    public volatile java.util.Map getMap()
    {
        org.apache.commons.collections4.map.LRUMapTest r0;
        org.apache.commons.collections4.map.LRUMap $r1;

        r0 := @this: org.apache.commons.collections4.map.LRUMapTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.map.LRUMapTest: org.apache.commons.collections4.map.LRUMap getMap()>();

        return $r1;
    }

    public volatile java.util.Map makeFullMap()
    {
        org.apache.commons.collections4.map.LRUMapTest r0;
        org.apache.commons.collections4.map.LRUMap $r1;

        r0 := @this: org.apache.commons.collections4.map.LRUMapTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.map.LRUMapTest: org.apache.commons.collections4.map.LRUMap makeFullMap()>();

        return $r1;
    }

    public volatile java.util.Map makeObject()
    {
        org.apache.commons.collections4.map.LRUMapTest r0;
        org.apache.commons.collections4.map.LRUMap $r1;

        r0 := @this: org.apache.commons.collections4.map.LRUMapTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.map.LRUMapTest: org.apache.commons.collections4.map.LRUMap makeObject()>();

        return $r1;
    }

    public volatile java.lang.Object makeObject()
    {
        org.apache.commons.collections4.map.LRUMapTest r0;
        org.apache.commons.collections4.map.LRUMap $r1;

        r0 := @this: org.apache.commons.collections4.map.LRUMapTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.map.LRUMapTest: org.apache.commons.collections4.map.LRUMap makeObject()>();

        return $r1;
    }
}
