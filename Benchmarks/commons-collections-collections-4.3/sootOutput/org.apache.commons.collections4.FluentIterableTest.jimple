public class org.apache.commons.collections4.FluentIterableTest extends java.lang.Object
{
    private java.lang.Iterable iterableA;
    private java.lang.Iterable iterableB;
    private java.lang.Iterable iterableEven;
    private java.lang.Iterable iterableOdd;
    private java.lang.Iterable emptyIterable;
    private static org.apache.commons.collections4.Predicate EVEN;

    public void <init>()
    {
        org.apache.commons.collections4.FluentIterableTest r0;

        r0 := @this: org.apache.commons.collections4.FluentIterableTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableA> = null;

        r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableB> = null;

        r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableEven> = null;

        r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableOdd> = null;

        r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable emptyIterable> = null;

        return;
    }

    public void setUp()
    {
        org.apache.commons.collections4.FluentIterableTest r0;
        java.util.ArrayList $r3;
        java.lang.Integer $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r26, $r27, $r28, $r29, $r30, $r31, $r34, $r35, $r36, $r37, $r38, $r39;
        java.util.LinkedList $r14;
        java.lang.Long $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24;
        java.lang.Integer[] $r25, $r33;
        java.util.List $r32, $r40, $r41;

        r0 := @this: org.apache.commons.collections4.FluentIterableTest;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke $r3.<java.util.Collection: boolean add(java.lang.Object)>($r4);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        interfaceinvoke $r3.<java.util.Collection: boolean add(java.lang.Object)>($r5);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        interfaceinvoke $r3.<java.util.Collection: boolean add(java.lang.Object)>($r6);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke $r3.<java.util.Collection: boolean add(java.lang.Object)>($r7);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke $r3.<java.util.Collection: boolean add(java.lang.Object)>($r8);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke $r3.<java.util.Collection: boolean add(java.lang.Object)>($r9);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        interfaceinvoke $r3.<java.util.Collection: boolean add(java.lang.Object)>($r10);

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        interfaceinvoke $r3.<java.util.Collection: boolean add(java.lang.Object)>($r11);

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        interfaceinvoke $r3.<java.util.Collection: boolean add(java.lang.Object)>($r12);

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        interfaceinvoke $r3.<java.util.Collection: boolean add(java.lang.Object)>($r13);

        r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableA> = $r3;

        $r14 = new java.util.LinkedList;

        specialinvoke $r14.<java.util.LinkedList: void <init>()>();

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(5L);

        interfaceinvoke $r14.<java.util.Collection: boolean add(java.lang.Object)>($r15);

        $r16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(4L);

        interfaceinvoke $r14.<java.util.Collection: boolean add(java.lang.Object)>($r16);

        $r17 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(4L);

        interfaceinvoke $r14.<java.util.Collection: boolean add(java.lang.Object)>($r17);

        $r18 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(3L);

        interfaceinvoke $r14.<java.util.Collection: boolean add(java.lang.Object)>($r18);

        $r19 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(3L);

        interfaceinvoke $r14.<java.util.Collection: boolean add(java.lang.Object)>($r19);

        $r20 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(3L);

        interfaceinvoke $r14.<java.util.Collection: boolean add(java.lang.Object)>($r20);

        $r21 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(2L);

        interfaceinvoke $r14.<java.util.Collection: boolean add(java.lang.Object)>($r21);

        $r22 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(2L);

        interfaceinvoke $r14.<java.util.Collection: boolean add(java.lang.Object)>($r22);

        $r23 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(2L);

        interfaceinvoke $r14.<java.util.Collection: boolean add(java.lang.Object)>($r23);

        $r24 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(2L);

        interfaceinvoke $r14.<java.util.Collection: boolean add(java.lang.Object)>($r24);

        r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableB> = $r14;

        $r25 = newarray (java.lang.Integer)[6];

        $r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r25[0] = $r26;

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r25[1] = $r27;

        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        $r25[2] = $r28;

        $r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8);

        $r25[3] = $r29;

        $r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        $r25[4] = $r30;

        $r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(12);

        $r25[5] = $r31;

        $r32 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r25);

        r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableEven> = $r32;

        $r33 = newarray (java.lang.Integer)[6];

        $r34 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r33[0] = $r34;

        $r35 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r33[1] = $r35;

        $r36 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r33[2] = $r36;

        $r37 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(7);

        $r33[3] = $r37;

        $r38 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9);

        $r33[4] = $r38;

        $r39 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(11);

        $r33[5] = $r39;

        $r40 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r33);

        r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableOdd> = $r40;

        $r41 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable emptyIterable> = $r41;

        return;
    }

    public void factoryMethodOf()
    {
        org.apache.commons.collections4.FluentIterableTest r0;
        java.lang.Integer[] $r1, $r7, $r15, $r19;
        java.lang.Integer $r2, $r3, $r4, $r5, $r6, $r8, $r9, $r10, $r11, $r12, $r14, $r16;
        java.util.List $r13, $r17, $r18, r24, r26;
        int $i0;
        long $l1;
        boolean $z0, $z1;
        org.apache.commons.collections4.FluentIterable $r20, $r21, r23, r25;
        java.lang.NullPointerException $r22;

        r0 := @this: org.apache.commons.collections4.FluentIterableTest;

        $r1 = newarray (java.lang.Integer)[5];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r1[1] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r1[2] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r1[3] = $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r1[4] = $r6;

        r23 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Object[])>($r1);

        r24 = virtualinvoke r23.<org.apache.commons.collections4.FluentIterable: java.util.List toList()>();

        $r7 = newarray (java.lang.Integer)[5];

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r7[0] = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r7[1] = $r9;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r7[2] = $r10;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r7[3] = $r11;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r7[4] = $r12;

        $r13 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r7);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r13, r24);

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        r25 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Object)>($r14);

        $i0 = virtualinvoke r25.<org.apache.commons.collections4.FluentIterable: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l1);

        $z0 = virtualinvoke r25.<org.apache.commons.collections4.FluentIterable: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        $r15 = newarray (java.lang.Integer)[1];

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r15[0] = $r16;

        $r17 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r15);

        $r18 = virtualinvoke r25.<org.apache.commons.collections4.FluentIterable: java.util.List toList()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r17, $r18);

        $r19 = newarray (java.lang.Integer)[0];

        $r20 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Object[])>($r19);

        r26 = virtualinvoke $r20.<org.apache.commons.collections4.FluentIterable: java.util.List toList()>();

        $z1 = interfaceinvoke r26.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

     label1:
        $r21 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>(null);

        virtualinvoke $r21.<org.apache.commons.collections4.FluentIterable: java.util.List toList()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting NullPointerException");

     label2:
        goto label4;

     label3:
        $r22 := @caughtexception;

     label4:
        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public void appendElements()
    {
        org.apache.commons.collections4.FluentIterableTest r0;
        org.apache.commons.collections4.FluentIterable r1, r2, $r4, $r16;
        java.lang.Iterable $r3, $r9, $r15;
        java.lang.Integer[] $r5, $r17;
        java.lang.Integer $r6, $r7, $r8, $r10, $r11, $r12, $r13, $r14;
        int $i0, $i1, $i3;
        long $l2, $l4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @this: org.apache.commons.collections4.FluentIterableTest;

        $r3 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableA>;

        $r4 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r3);

        $r5 = newarray (java.lang.Integer)[3];

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        $r5[0] = $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(20);

        $r5[1] = $r7;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(30);

        $r5[2] = $r8;

        r1 = virtualinvoke $r4.<org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable append(java.lang.Object[])>($r5);

        $r9 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableA>;

        $i0 = staticinvoke <org.apache.commons.collections4.IterableUtils: int size(java.lang.Iterable)>($r9);

        $i1 = $i0 + 3;

        $l2 = (long) $i1;

        $i3 = staticinvoke <org.apache.commons.collections4.IterableUtils: int size(java.lang.Iterable)>(r1);

        $l4 = (long) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l2, $l4);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $z0 = staticinvoke <org.apache.commons.collections4.IterableUtils: boolean contains(java.lang.Iterable,java.lang.Object)>(r1, $r10);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        $z1 = staticinvoke <org.apache.commons.collections4.IterableUtils: boolean contains(java.lang.Iterable,java.lang.Object)>(r1, $r11);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(20);

        $z2 = staticinvoke <org.apache.commons.collections4.IterableUtils: boolean contains(java.lang.Iterable,java.lang.Object)>(r1, $r12);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(30);

        $z3 = staticinvoke <org.apache.commons.collections4.IterableUtils: boolean contains(java.lang.Iterable,java.lang.Object)>(r1, $r13);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(40);

        $z4 = staticinvoke <org.apache.commons.collections4.IterableUtils: boolean contains(java.lang.Iterable,java.lang.Object)>(r1, $r14);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z4);

        $r15 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable emptyIterable>;

        $r16 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r15);

        $r17 = newarray (java.lang.Integer)[0];

        r2 = virtualinvoke $r16.<org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable append(java.lang.Object[])>($r17);

        $z5 = staticinvoke <org.apache.commons.collections4.IterableUtils: boolean isEmpty(java.lang.Iterable)>(r2);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        return;
    }

    public void appendIterable()
    {
        org.apache.commons.collections4.FluentIterableTest r0;
        java.util.List r1;
        org.apache.commons.collections4.FluentIterable r2, $r8;
        java.lang.Integer[] $r3;
        java.lang.Integer $r4, $r5, $r6, $r10, $r11, $r12, $r13, $r14;
        java.lang.Iterable $r7, $r9;
        int $i0, $i1, $i2, $i4;
        long $l3, $l5;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: org.apache.commons.collections4.FluentIterableTest;

        $r3 = newarray (java.lang.Integer)[3];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(20);

        $r3[1] = $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(30);

        $r3[2] = $r6;

        r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        $r7 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableA>;

        $r8 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r7);

        r2 = virtualinvoke $r8.<org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable append(java.lang.Iterable)>(r1);

        $r9 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableA>;

        $i0 = staticinvoke <org.apache.commons.collections4.IterableUtils: int size(java.lang.Iterable)>($r9);

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        $i2 = $i0 + $i1;

        $l3 = (long) $i2;

        $i4 = staticinvoke <org.apache.commons.collections4.IterableUtils: int size(java.lang.Iterable)>(r2);

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l3, $l5);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $z0 = staticinvoke <org.apache.commons.collections4.IterableUtils: boolean contains(java.lang.Iterable,java.lang.Object)>(r2, $r10);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        $z1 = staticinvoke <org.apache.commons.collections4.IterableUtils: boolean contains(java.lang.Iterable,java.lang.Object)>(r2, $r11);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(20);

        $z2 = staticinvoke <org.apache.commons.collections4.IterableUtils: boolean contains(java.lang.Iterable,java.lang.Object)>(r2, $r12);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(30);

        $z3 = staticinvoke <org.apache.commons.collections4.IterableUtils: boolean contains(java.lang.Iterable,java.lang.Object)>(r2, $r13);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(40);

        $z4 = staticinvoke <org.apache.commons.collections4.IterableUtils: boolean contains(java.lang.Iterable,java.lang.Object)>(r2, $r14);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z4);

        return;
    }

    public void collate()
    {
        org.apache.commons.collections4.FluentIterableTest r0;
        java.util.List r1;
        java.lang.Iterable $r4, $r6, $r9, $r10, $r11;
        org.apache.commons.collections4.FluentIterable $r5, $r7, $r12, $r13;
        java.util.ArrayList $r8;
        java.lang.NullPointerException $r15;

        r0 := @this: org.apache.commons.collections4.FluentIterableTest;

        $r4 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableOdd>;

        $r5 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r4);

        $r6 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableEven>;

        $r7 = virtualinvoke $r5.<org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable collate(java.lang.Iterable)>($r6);

        r1 = virtualinvoke $r7.<org.apache.commons.collections4.FluentIterable: java.util.List toList()>();

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        $r9 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableOdd>;

        staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean addAll(java.util.Collection,java.lang.Iterable)>($r8, $r9);

        $r10 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableEven>;

        staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean addAll(java.util.Collection,java.lang.Iterable)>($r8, $r10);

        staticinvoke <java.util.Collections: void sort(java.util.List)>($r8);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r8, r1);

     label1:
        $r11 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableOdd>;

        $r12 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r11);

        $r13 = virtualinvoke $r12.<org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable collate(java.lang.Iterable)>(null);

        virtualinvoke $r13.<org.apache.commons.collections4.FluentIterable: java.util.List toList()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting NullPointerException");

     label2:
        goto label4;

     label3:
        $r15 := @caughtexception;

     label4:
        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public void collateWithComparator()
    {
        org.apache.commons.collections4.FluentIterableTest r0;
        java.lang.Iterable $r2, $r4, $r8, $r9, $r10, $r12;
        org.apache.commons.collections4.FluentIterable $r3, $r6, $r11, $r13;
        java.util.Comparator $r5;
        java.util.ArrayList $r7;
        java.util.List r14, r15;

        r0 := @this: org.apache.commons.collections4.FluentIterableTest;

        $r2 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableOdd>;

        $r3 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r2);

        $r4 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableEven>;

        $r5 = staticinvoke <org.apache.commons.collections4.ComparatorUtils: java.util.Comparator naturalComparator()>();

        $r6 = virtualinvoke $r3.<org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable collate(java.lang.Iterable,java.util.Comparator)>($r4, $r5);

        r14 = virtualinvoke $r6.<org.apache.commons.collections4.FluentIterable: java.util.List toList()>();

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        $r8 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableOdd>;

        staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean addAll(java.util.Collection,java.lang.Iterable)>($r7, $r8);

        $r9 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableEven>;

        staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean addAll(java.util.Collection,java.lang.Iterable)>($r7, $r9);

        staticinvoke <java.util.Collections: void sort(java.util.List)>($r7);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, r14);

        $r10 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableOdd>;

        $r11 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r10);

        $r12 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableEven>;

        $r13 = virtualinvoke $r11.<org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable collate(java.lang.Iterable,java.util.Comparator)>($r12, null);

        r15 = virtualinvoke $r13.<org.apache.commons.collections4.FluentIterable: java.util.List toList()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, r15);

        return;
    }

    public void filter()
    {
        org.apache.commons.collections4.FluentIterableTest r0;
        org.apache.commons.collections4.FluentIterableTest$2 $r3;
        java.lang.Iterable $r4, $r12, $r15;
        org.apache.commons.collections4.FluentIterable $r5, $r6, $r13, $r14, $r16, $r17;
        int $i0, $i2;
        long $l1, $l3;
        java.lang.Integer[] $r7;
        java.lang.Integer $r8, $r9, $r10;
        java.util.List $r11, r20, r21;
        java.lang.NullPointerException $r19;

        r0 := @this: org.apache.commons.collections4.FluentIterableTest;

        $r3 = new org.apache.commons.collections4.FluentIterableTest$2;

        specialinvoke $r3.<org.apache.commons.collections4.FluentIterableTest$2: void <init>(org.apache.commons.collections4.FluentIterableTest)>(r0);

        $r4 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableA>;

        $r5 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r4);

        $r6 = virtualinvoke $r5.<org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable filter(org.apache.commons.collections4.Predicate)>($r3);

        r20 = virtualinvoke $r6.<org.apache.commons.collections4.FluentIterable: java.util.List toList()>();

        $i0 = interfaceinvoke r20.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l1);

        $r7 = newarray (java.lang.Integer)[3];

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r7[0] = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r7[1] = $r9;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r7[2] = $r10;

        $r11 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r7);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r11, r20);

        $r12 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable emptyIterable>;

        $r13 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r12);

        $r14 = virtualinvoke $r13.<org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable filter(org.apache.commons.collections4.Predicate)>($r3);

        r21 = virtualinvoke $r14.<org.apache.commons.collections4.FluentIterable: java.util.List toList()>();

        $i2 = interfaceinvoke r21.<java.util.List: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l3);

     label1:
        $r15 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableA>;

        $r16 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r15);

        $r17 = virtualinvoke $r16.<org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable filter(org.apache.commons.collections4.Predicate)>(null);

        virtualinvoke $r17.<org.apache.commons.collections4.FluentIterable: java.util.List toList()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting NullPointerException");

     label2:
        goto label4;

     label3:
        $r19 := @caughtexception;

     label4:
        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public void forEach()
    {
        org.apache.commons.collections4.FluentIterableTest r0;
        java.lang.Integer r3;
        java.util.concurrent.atomic.AtomicInteger $r4;
        org.apache.commons.collections4.FluentIterableTest$3 $r5;
        java.lang.Iterable $r6, $r8, $r9;
        org.apache.commons.collections4.FluentIterable $r7, $r10;
        boolean $z0;
        long $l0, $l2;
        int $i1, $i3, i4;
        org.apache.commons.collections4.Closure $r11;
        java.lang.Object $r12;
        java.lang.NullPointerException $r13;
        java.util.Iterator r14;

        r0 := @this: org.apache.commons.collections4.FluentIterableTest;

        $r4 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        $r5 = new org.apache.commons.collections4.FluentIterableTest$3;

        specialinvoke $r5.<org.apache.commons.collections4.FluentIterableTest$3: void <init>(org.apache.commons.collections4.FluentIterableTest,java.util.concurrent.atomic.AtomicInteger)>(r0, $r4);

        $r6 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableA>;

        $r7 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r6);

        virtualinvoke $r7.<org.apache.commons.collections4.FluentIterable: void forEach(org.apache.commons.collections4.Closure)>($r5);

        i4 = 0;

        $r8 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableA>;

        r14 = interfaceinvoke $r8.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r12 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Integer) $r12;

        $i3 = virtualinvoke r3.<java.lang.Integer: int intValue()>();

        i4 = i4 + $i3;

        goto label1;

     label2:
        $l0 = (long) i4;

        $i1 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $l2 = (long) $i1;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l0, $l2);

     label3:
        $r9 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableA>;

        $r10 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r9);

        $r11 = (org.apache.commons.collections4.Closure) null;

        virtualinvoke $r10.<org.apache.commons.collections4.FluentIterable: void forEach(org.apache.commons.collections4.Closure)>($r11);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting NullPointerException");

     label4:
        goto label6;

     label5:
        $r13 := @caughtexception;

     label6:
        return;

        catch java.lang.NullPointerException from label3 to label4 with label5;
    }

    public void limit()
    {
        org.apache.commons.collections4.FluentIterableTest r0;
        java.util.List r1, $r10, r26, r27, r28, r29;
        java.lang.Iterable $r3, $r11, $r14, $r15, $r18, $r21;
        org.apache.commons.collections4.FluentIterable $r4, $r5, $r12, $r13, $r16, $r17, $r19, $r20, $r22, $r23;
        int $i0, $i2, $i4, $i6, $i8;
        long $l1, $l3, $l5, $l7, $l9;
        java.lang.Integer[] $r6;
        java.lang.Integer $r7, $r8, $r9;
        java.lang.IllegalArgumentException $r25;

        r0 := @this: org.apache.commons.collections4.FluentIterableTest;

        $r3 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableA>;

        $r4 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r3);

        $r5 = virtualinvoke $r4.<org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable limit(long)>(3L);

        r26 = virtualinvoke $r5.<org.apache.commons.collections4.FluentIterable: java.util.List toList()>();

        $i0 = interfaceinvoke r26.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l1);

        $r6 = newarray (java.lang.Integer)[3];

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r6[0] = $r7;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r6[1] = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r6[2] = $r9;

        $r10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r6);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r10, r26);

        $r11 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableA>;

        $r12 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r11);

        $r13 = virtualinvoke $r12.<org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable limit(long)>(100L);

        r27 = virtualinvoke $r13.<org.apache.commons.collections4.FluentIterable: java.util.List toList()>();

        $r14 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableA>;

        r1 = staticinvoke <org.apache.commons.collections4.IterableUtils: java.util.List toList(java.lang.Iterable)>($r14);

        $i2 = interfaceinvoke r1.<java.util.List: int size()>();

        $l3 = (long) $i2;

        $i4 = interfaceinvoke r27.<java.util.List: int size()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l3, $l5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r1, r27);

        $r15 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableA>;

        $r16 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r15);

        $r17 = virtualinvoke $r16.<org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable limit(long)>(0L);

        r28 = virtualinvoke $r17.<org.apache.commons.collections4.FluentIterable: java.util.List toList()>();

        $i6 = interfaceinvoke r28.<java.util.List: int size()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l7);

        $r18 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable emptyIterable>;

        $r19 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r18);

        $r20 = virtualinvoke $r19.<org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable limit(long)>(3L);

        r29 = virtualinvoke $r20.<org.apache.commons.collections4.FluentIterable: java.util.List toList()>();

        $i8 = interfaceinvoke r29.<java.util.List: int size()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l9);

     label1:
        $r21 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableA>;

        $r22 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r21);

        $r23 = virtualinvoke $r22.<org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable limit(long)>(-2L);

        virtualinvoke $r23.<org.apache.commons.collections4.FluentIterable: java.util.List toList()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting IllegalArgumentException");

     label2:
        goto label4;

     label3:
        $r25 := @caughtexception;

     label4:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public void reverse()
    {
        org.apache.commons.collections4.FluentIterableTest r0;
        java.util.List r1, r9, r10;
        java.lang.Iterable $r2, $r5, $r6;
        org.apache.commons.collections4.FluentIterable $r3, $r4, $r7, $r8;
        int $i0;
        long $l1;

        r0 := @this: org.apache.commons.collections4.FluentIterableTest;

        $r2 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableA>;

        $r3 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r2);

        $r4 = virtualinvoke $r3.<org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable reverse()>();

        r9 = virtualinvoke $r4.<org.apache.commons.collections4.FluentIterable: java.util.List toList()>();

        $r5 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableA>;

        r1 = staticinvoke <org.apache.commons.collections4.IterableUtils: java.util.List toList(java.lang.Iterable)>($r5);

        staticinvoke <java.util.Collections: void reverse(java.util.List)>(r1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r1, r9);

        $r6 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable emptyIterable>;

        $r7 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r6);

        $r8 = virtualinvoke $r7.<org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable reverse()>();

        r10 = virtualinvoke $r8.<org.apache.commons.collections4.FluentIterable: java.util.List toList()>();

        $i0 = interfaceinvoke r10.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        return;
    }

    public void skip()
    {
        org.apache.commons.collections4.FluentIterableTest r0;
        java.util.List r1, $r13, r29, r30, r31, r32;
        java.lang.Iterable $r3, $r14, $r17, $r20, $r21, $r24;
        org.apache.commons.collections4.FluentIterable $r4, $r5, $r15, $r16, $r18, $r19, $r22, $r23, $r25, $r26;
        int $i0, $i2, $i4, $i6, $i8;
        long $l1, $l3, $l5, $l7, $l9;
        java.lang.Integer[] $r6;
        java.lang.Integer $r7, $r8, $r9, $r10, $r11, $r12;
        java.lang.IllegalArgumentException $r28;

        r0 := @this: org.apache.commons.collections4.FluentIterableTest;

        $r3 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableA>;

        $r4 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r3);

        $r5 = virtualinvoke $r4.<org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable skip(long)>(4L);

        r29 = virtualinvoke $r5.<org.apache.commons.collections4.FluentIterable: java.util.List toList()>();

        $i0 = interfaceinvoke r29.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(6L, $l1);

        $r6 = newarray (java.lang.Integer)[6];

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r6[0] = $r7;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r6[1] = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r6[2] = $r9;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r6[3] = $r10;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r6[4] = $r11;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r6[5] = $r12;

        $r13 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r6);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r13, r29);

        $r14 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableA>;

        $r15 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r14);

        $r16 = virtualinvoke $r15.<org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable skip(long)>(100L);

        r30 = virtualinvoke $r16.<org.apache.commons.collections4.FluentIterable: java.util.List toList()>();

        $i2 = interfaceinvoke r30.<java.util.List: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l3);

        $r17 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableA>;

        $r18 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r17);

        $r19 = virtualinvoke $r18.<org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable skip(long)>(0L);

        r31 = virtualinvoke $r19.<org.apache.commons.collections4.FluentIterable: java.util.List toList()>();

        $r20 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableA>;

        r1 = staticinvoke <org.apache.commons.collections4.IterableUtils: java.util.List toList(java.lang.Iterable)>($r20);

        $i4 = interfaceinvoke r1.<java.util.List: int size()>();

        $l5 = (long) $i4;

        $i6 = interfaceinvoke r31.<java.util.List: int size()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l5, $l7);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r1, r31);

        $r21 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable emptyIterable>;

        $r22 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r21);

        $r23 = virtualinvoke $r22.<org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable skip(long)>(3L);

        r32 = virtualinvoke $r23.<org.apache.commons.collections4.FluentIterable: java.util.List toList()>();

        $i8 = interfaceinvoke r32.<java.util.List: int size()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l9);

     label1:
        $r24 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableA>;

        $r25 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r24);

        $r26 = virtualinvoke $r25.<org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable skip(long)>(-4L);

        virtualinvoke $r26.<org.apache.commons.collections4.FluentIterable: java.util.List toList()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting IllegalArgumentException");

     label2:
        goto label4;

     label3:
        $r28 := @caughtexception;

     label4:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public void transform()
    {
        org.apache.commons.collections4.FluentIterableTest r0;
        org.apache.commons.collections4.FluentIterableTest$4 $r3;
        java.lang.Iterable $r4, $r19, $r22;
        org.apache.commons.collections4.FluentIterable $r5, $r6, $r20, $r21, $r23, $r24;
        int $i0, $i2;
        long $l1, $l3;
        java.lang.Integer[] $r7;
        java.lang.Integer $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17;
        java.util.List $r18, r27, r28;
        java.lang.NullPointerException $r26;

        r0 := @this: org.apache.commons.collections4.FluentIterableTest;

        $r3 = new org.apache.commons.collections4.FluentIterableTest$4;

        specialinvoke $r3.<org.apache.commons.collections4.FluentIterableTest$4: void <init>(org.apache.commons.collections4.FluentIterableTest)>(r0);

        $r4 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableA>;

        $r5 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r4);

        $r6 = virtualinvoke $r5.<org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable transform(org.apache.commons.collections4.Transformer)>($r3);

        r27 = virtualinvoke $r6.<org.apache.commons.collections4.FluentIterable: java.util.List toList()>();

        $i0 = interfaceinvoke r27.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(10L, $l1);

        $r7 = newarray (java.lang.Integer)[10];

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r7[0] = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r7[1] = $r9;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r7[2] = $r10;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9);

        $r7[3] = $r11;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9);

        $r7[4] = $r12;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9);

        $r7[5] = $r13;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(16);

        $r7[6] = $r14;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(16);

        $r7[7] = $r15;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(16);

        $r7[8] = $r16;

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(16);

        $r7[9] = $r17;

        $r18 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r7);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r18, r27);

        $r19 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable emptyIterable>;

        $r20 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r19);

        $r21 = virtualinvoke $r20.<org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable transform(org.apache.commons.collections4.Transformer)>($r3);

        r28 = virtualinvoke $r21.<org.apache.commons.collections4.FluentIterable: java.util.List toList()>();

        $i2 = interfaceinvoke r28.<java.util.List: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l3);

     label1:
        $r22 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableA>;

        $r23 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r22);

        $r24 = virtualinvoke $r23.<org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable transform(org.apache.commons.collections4.Transformer)>(null);

        virtualinvoke $r24.<org.apache.commons.collections4.FluentIterable: java.util.List toList()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting NullPointerException");

     label2:
        goto label4;

     label3:
        $r26 := @caughtexception;

     label4:
        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public void unique()
    {
        org.apache.commons.collections4.FluentIterableTest r0;
        java.lang.Iterable $r1, $r10;
        org.apache.commons.collections4.FluentIterable $r2, $r3, $r11, $r12;
        int $i0, $i2;
        long $l1, $l3;
        java.lang.Integer[] $r4;
        java.lang.Integer $r5, $r6, $r7, $r8;
        java.util.List $r9, r13, r14;

        r0 := @this: org.apache.commons.collections4.FluentIterableTest;

        $r1 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableA>;

        $r2 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r1);

        $r3 = virtualinvoke $r2.<org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable unique()>();

        r13 = virtualinvoke $r3.<org.apache.commons.collections4.FluentIterable: java.util.List toList()>();

        $i0 = interfaceinvoke r13.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l1);

        $r4 = newarray (java.lang.Integer)[4];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r4[0] = $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r4[1] = $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r4[2] = $r7;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r4[3] = $r8;

        $r9 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r9, r13);

        $r10 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable emptyIterable>;

        $r11 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r10);

        $r12 = virtualinvoke $r11.<org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable unique()>();

        r14 = virtualinvoke $r12.<org.apache.commons.collections4.FluentIterable: java.util.List toList()>();

        $i2 = interfaceinvoke r14.<java.util.List: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l3);

        return;
    }

    public void unmodifiable()
    {
        org.apache.commons.collections4.FluentIterableTest r0;
        org.apache.commons.collections4.FluentIterable r1, $r4, r9;
        java.util.Iterator r2;
        java.lang.Iterable $r3;
        java.lang.Object $r5;
        java.lang.Integer $r6;
        int $i0;
        long $l1;
        java.lang.UnsupportedOperationException $r7;

        r0 := @this: org.apache.commons.collections4.FluentIterableTest;

        $r3 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableA>;

        $r4 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r3);

        r1 = virtualinvoke $r4.<org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable unmodifiable()>();

        r2 = virtualinvoke r1.<org.apache.commons.collections4.FluentIterable: java.util.Iterator iterator()>();

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.lang.Integer) $r5;

        $i0 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l1);

     label1:
        interfaceinvoke r2.<java.util.Iterator: void remove()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting UnsupportedOperationException");

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

     label4:
        r9 = virtualinvoke r1.<org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable unmodifiable()>();

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>(r1, r9);

        return;

        catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
    }

    public void zip()
    {
        org.apache.commons.collections4.FluentIterableTest r0;
        java.lang.Iterable $r2, $r4, $r7, $r8, $r9, $r11;
        org.apache.commons.collections4.FluentIterable $r3, $r5, $r10, $r12, $r19, $r31;
        java.util.ArrayList $r6;
        java.lang.Integer[] $r14, $r21, $r26, $r32;
        java.lang.Integer $r15, $r16, $r17, $r22, $r23, $r24, $r27, $r28, $r29, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41;
        java.util.List $r18, $r25, $r30, r43, r45, r46;
        java.lang.Iterable[] $r20;
        java.lang.NullPointerException $r42;

        r0 := @this: org.apache.commons.collections4.FluentIterableTest;

        $r2 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableOdd>;

        $r3 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r2);

        $r4 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableEven>;

        $r5 = virtualinvoke $r3.<org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable zip(java.lang.Iterable)>($r4);

        r43 = virtualinvoke $r5.<org.apache.commons.collections4.FluentIterable: java.util.List toList()>();

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $r7 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableOdd>;

        staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean addAll(java.util.Collection,java.lang.Iterable)>($r6, $r7);

        $r8 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableEven>;

        staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean addAll(java.util.Collection,java.lang.Iterable)>($r6, $r8);

        staticinvoke <java.util.Collections: void sort(java.util.List)>($r6);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r6, r43);

     label1:
        $r9 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableOdd>;

        $r10 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r9);

        $r11 = (java.lang.Iterable) null;

        $r12 = virtualinvoke $r10.<org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable zip(java.lang.Iterable)>($r11);

        virtualinvoke $r12.<org.apache.commons.collections4.FluentIterable: java.util.List toList()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting NullPointerException");

     label2:
        goto label4;

     label3:
        $r42 := @caughtexception;

     label4:
        $r14 = newarray (java.lang.Integer)[3];

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r14[0] = $r15;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r14[1] = $r16;

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(7);

        $r14[2] = $r17;

        $r18 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r14);

        $r19 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r18);

        $r20 = newarray (java.lang.Iterable)[2];

        $r21 = newarray (java.lang.Integer)[3];

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r21[0] = $r22;

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r21[1] = $r23;

        $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8);

        $r21[2] = $r24;

        $r25 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r21);

        $r20[0] = $r25;

        $r26 = newarray (java.lang.Integer)[3];

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r26[0] = $r27;

        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        $r26[1] = $r28;

        $r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9);

        $r26[2] = $r29;

        $r30 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r26);

        $r20[1] = $r30;

        $r31 = virtualinvoke $r19.<org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable zip(java.lang.Iterable[])>($r20);

        r45 = virtualinvoke $r31.<org.apache.commons.collections4.FluentIterable: java.util.List toList()>();

        $r32 = newarray (java.lang.Integer)[9];

        $r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r32[0] = $r33;

        $r34 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r32[1] = $r34;

        $r35 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r32[2] = $r35;

        $r36 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r32[3] = $r36;

        $r37 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r32[4] = $r37;

        $r38 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        $r32[5] = $r38;

        $r39 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(7);

        $r32[6] = $r39;

        $r40 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8);

        $r32[7] = $r40;

        $r41 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9);

        $r32[8] = $r41;

        r46 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r32);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r46, r45);

        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public void asEnumeration()
    {
        org.apache.commons.collections4.FluentIterableTest r0;
        java.util.List r1;
        java.lang.Iterable $r2, $r4;
        org.apache.commons.collections4.FluentIterable $r3, $r5;
        boolean $z0;
        java.util.Enumeration r6, r7;

        r0 := @this: org.apache.commons.collections4.FluentIterableTest;

        $r2 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableB>;

        $r3 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r2);

        r6 = virtualinvoke $r3.<org.apache.commons.collections4.FluentIterable: java.util.Enumeration asEnumeration()>();

        r1 = staticinvoke <org.apache.commons.collections4.EnumerationUtils: java.util.List toList(java.util.Enumeration)>(r6);

        $r4 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableB>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r4, r1);

        $r5 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable empty()>();

        r7 = virtualinvoke $r5.<org.apache.commons.collections4.FluentIterable: java.util.Enumeration asEnumeration()>();

        $z0 = interfaceinvoke r7.<java.util.Enumeration: boolean hasMoreElements()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        return;
    }

    public void allMatch()
    {
        org.apache.commons.collections4.FluentIterableTest r0;
        java.lang.Iterable $r2, $r5, $r8, $r11;
        org.apache.commons.collections4.FluentIterable $r3, $r6, $r9, $r12;
        org.apache.commons.collections4.Predicate $r4, $r7, $r10;
        boolean $z0, $z1, $z2;
        java.lang.NullPointerException $r13;

        r0 := @this: org.apache.commons.collections4.FluentIterableTest;

        $r2 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableEven>;

        $r3 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r2);

        $r4 = <org.apache.commons.collections4.FluentIterableTest: org.apache.commons.collections4.Predicate EVEN>;

        $z0 = virtualinvoke $r3.<org.apache.commons.collections4.FluentIterable: boolean allMatch(org.apache.commons.collections4.Predicate)>($r4);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r5 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableOdd>;

        $r6 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r5);

        $r7 = <org.apache.commons.collections4.FluentIterableTest: org.apache.commons.collections4.Predicate EVEN>;

        $z1 = virtualinvoke $r6.<org.apache.commons.collections4.FluentIterable: boolean allMatch(org.apache.commons.collections4.Predicate)>($r7);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z1);

        $r8 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableA>;

        $r9 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r8);

        $r10 = <org.apache.commons.collections4.FluentIterableTest: org.apache.commons.collections4.Predicate EVEN>;

        $z2 = virtualinvoke $r9.<org.apache.commons.collections4.FluentIterable: boolean allMatch(org.apache.commons.collections4.Predicate)>($r10);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z2);

     label1:
        $r11 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableEven>;

        $r12 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r11);

        virtualinvoke $r12.<org.apache.commons.collections4.FluentIterable: boolean allMatch(org.apache.commons.collections4.Predicate)>(null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting NullPointerException");

     label2:
        goto label4;

     label3:
        $r13 := @caughtexception;

     label4:
        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public void anyMatch()
    {
        org.apache.commons.collections4.FluentIterableTest r0;
        java.lang.Iterable $r2, $r5, $r8, $r11;
        org.apache.commons.collections4.FluentIterable $r3, $r6, $r9, $r12;
        org.apache.commons.collections4.Predicate $r4, $r7, $r10;
        boolean $z0, $z1, $z2;
        java.lang.NullPointerException $r13;

        r0 := @this: org.apache.commons.collections4.FluentIterableTest;

        $r2 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableEven>;

        $r3 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r2);

        $r4 = <org.apache.commons.collections4.FluentIterableTest: org.apache.commons.collections4.Predicate EVEN>;

        $z0 = virtualinvoke $r3.<org.apache.commons.collections4.FluentIterable: boolean anyMatch(org.apache.commons.collections4.Predicate)>($r4);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r5 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableOdd>;

        $r6 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r5);

        $r7 = <org.apache.commons.collections4.FluentIterableTest: org.apache.commons.collections4.Predicate EVEN>;

        $z1 = virtualinvoke $r6.<org.apache.commons.collections4.FluentIterable: boolean anyMatch(org.apache.commons.collections4.Predicate)>($r7);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z1);

        $r8 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableA>;

        $r9 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r8);

        $r10 = <org.apache.commons.collections4.FluentIterableTest: org.apache.commons.collections4.Predicate EVEN>;

        $z2 = virtualinvoke $r9.<org.apache.commons.collections4.FluentIterable: boolean anyMatch(org.apache.commons.collections4.Predicate)>($r10);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

     label1:
        $r11 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableEven>;

        $r12 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r11);

        virtualinvoke $r12.<org.apache.commons.collections4.FluentIterable: boolean anyMatch(org.apache.commons.collections4.Predicate)>(null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting NullPointerException");

     label2:
        goto label4;

     label3:
        $r13 := @caughtexception;

     label4:
        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public void isEmpty()
    {
        org.apache.commons.collections4.FluentIterableTest r0;
        java.lang.Iterable $r1, $r3;
        org.apache.commons.collections4.FluentIterable $r2, $r4;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.collections4.FluentIterableTest;

        $r1 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable emptyIterable>;

        $r2 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r1);

        $z0 = virtualinvoke $r2.<org.apache.commons.collections4.FluentIterable: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r3 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableOdd>;

        $r4 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r3);

        $z1 = virtualinvoke $r4.<org.apache.commons.collections4.FluentIterable: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z1);

        return;
    }

    public void size()
    {
        org.apache.commons.collections4.FluentIterableTest r0;
        java.lang.Iterable $r2, $r4, $r6, $r8;
        org.apache.commons.collections4.FluentIterable $r3, $r5, $r9;
        int $i1, $i3, $i5;
        long $l2, $l4, $l6;
        java.util.List $r7;
        java.lang.NullPointerException $r10;

        r0 := @this: org.apache.commons.collections4.FluentIterableTest;

     label1:
        $r2 = (java.lang.Iterable) null;

        $r3 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r2);

        virtualinvoke $r3.<org.apache.commons.collections4.FluentIterable: int size()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting NullPointerException");

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

     label4:
        $r4 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable emptyIterable>;

        $r5 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r4);

        $i1 = virtualinvoke $r5.<org.apache.commons.collections4.FluentIterable: int size()>();

        $l2 = (long) $i1;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l2);

        $r6 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableOdd>;

        $r7 = staticinvoke <org.apache.commons.collections4.IterableUtils: java.util.List toList(java.lang.Iterable)>($r6);

        $i3 = interfaceinvoke $r7.<java.util.List: int size()>();

        $l4 = (long) $i3;

        $r8 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableOdd>;

        $r9 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r8);

        $i5 = virtualinvoke $r9.<org.apache.commons.collections4.FluentIterable: int size()>();

        $l6 = (long) $i5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l4, $l6);

        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public void eval()
    {
        org.apache.commons.collections4.FluentIterableTest r0;
        org.apache.commons.collections4.FluentIterable r2, r3, $r17;
        java.util.ArrayList $r4;
        java.lang.Integer[] $r5, $r19, $r31, $r39;
        java.lang.Integer $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r32, $r33, $r34, $r35, $r36, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49;
        java.util.List $r16, $r30, $r37, $r38, $r50, $r51;
        org.apache.commons.collections4.Predicate $r18;
        int $i0, $i2;
        long $l1, $l3;

        r0 := @this: org.apache.commons.collections4.FluentIterableTest;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = newarray (java.lang.Integer)[10];

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r5[0] = $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r5[1] = $r7;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r5[2] = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r5[3] = $r9;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r5[4] = $r10;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        $r5[5] = $r11;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(7);

        $r5[6] = $r12;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8);

        $r5[7] = $r13;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9);

        $r5[8] = $r14;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        $r5[9] = $r15;

        $r16 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5);

        interfaceinvoke $r4.<java.util.List: boolean addAll(java.util.Collection)>($r16);

        $r17 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r4);

        $r18 = <org.apache.commons.collections4.FluentIterableTest: org.apache.commons.collections4.Predicate EVEN>;

        r2 = virtualinvoke $r17.<org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable filter(org.apache.commons.collections4.Predicate)>($r18);

        r3 = virtualinvoke r2.<org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable eval()>();

        $r19 = newarray (java.lang.Integer)[10];

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(11);

        $r19[0] = $r20;

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(12);

        $r19[1] = $r21;

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(13);

        $r19[2] = $r22;

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(14);

        $r19[3] = $r23;

        $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(15);

        $r19[4] = $r24;

        $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(16);

        $r19[5] = $r25;

        $r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(17);

        $r19[6] = $r26;

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(18);

        $r19[7] = $r27;

        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(19);

        $r19[8] = $r28;

        $r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(20);

        $r19[9] = $r29;

        $r30 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r19);

        interfaceinvoke $r4.<java.util.List: boolean addAll(java.util.Collection)>($r30);

        $i0 = virtualinvoke r3.<org.apache.commons.collections4.FluentIterable: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(5L, $l1);

        $i2 = virtualinvoke r2.<org.apache.commons.collections4.FluentIterable: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(10L, $l3);

        $r31 = newarray (java.lang.Integer)[5];

        $r32 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r31[0] = $r32;

        $r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r31[1] = $r33;

        $r34 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        $r31[2] = $r34;

        $r35 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8);

        $r31[3] = $r35;

        $r36 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        $r31[4] = $r36;

        $r37 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r31);

        $r38 = virtualinvoke r3.<org.apache.commons.collections4.FluentIterable: java.util.List toList()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r37, $r38);

        $r39 = newarray (java.lang.Integer)[10];

        $r40 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r39[0] = $r40;

        $r41 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r39[1] = $r41;

        $r42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        $r39[2] = $r42;

        $r43 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8);

        $r39[3] = $r43;

        $r44 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        $r39[4] = $r44;

        $r45 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(12);

        $r39[5] = $r45;

        $r46 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(14);

        $r39[6] = $r46;

        $r47 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(16);

        $r39[7] = $r47;

        $r48 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(18);

        $r39[8] = $r48;

        $r49 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(20);

        $r39[9] = $r49;

        $r50 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r39);

        $r51 = virtualinvoke r2.<org.apache.commons.collections4.FluentIterable: java.util.List toList()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r50, $r51);

        return;
    }

    public void contains()
    {
        org.apache.commons.collections4.FluentIterableTest r0;
        java.lang.Iterable $r1, $r4, $r7, $r9;
        org.apache.commons.collections4.FluentIterable $r2, $r5, $r8, $r10, $r13;
        java.lang.Integer $r3, $r6, $r12;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Integer[] $r11;

        r0 := @this: org.apache.commons.collections4.FluentIterableTest;

        $r1 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableEven>;

        $r2 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r1);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $z0 = virtualinvoke $r2.<org.apache.commons.collections4.FluentIterable: boolean contains(java.lang.Object)>($r3);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r4 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableEven>;

        $r5 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r4);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $z1 = virtualinvoke $r5.<org.apache.commons.collections4.FluentIterable: boolean contains(java.lang.Object)>($r6);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z1);

        $r7 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableEven>;

        $r8 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r7);

        $z2 = virtualinvoke $r8.<org.apache.commons.collections4.FluentIterable: boolean contains(java.lang.Object)>(null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z2);

        $r9 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableEven>;

        $r10 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r9);

        $r11 = newarray (java.lang.Integer)[1];

        $r12 = (java.lang.Integer) null;

        $r11[0] = $r12;

        $r13 = virtualinvoke $r10.<org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable append(java.lang.Object[])>($r11);

        $z3 = virtualinvoke $r13.<org.apache.commons.collections4.FluentIterable: boolean contains(java.lang.Object)>(null);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        return;
    }

    public void copyInto()
    {
        org.apache.commons.collections4.FluentIterableTest r0;
        java.util.ArrayList $r2, $r6, $r12;
        java.lang.Iterable $r3, $r5, $r10, $r18, $r20;
        org.apache.commons.collections4.FluentIterable $r4, $r11, $r21;
        int $i0, $i2, $i4, $i6;
        long $l1, $l3, $l5, $l7;
        java.lang.Integer $r7, $r8, $r9, $r14, $r15, $r16;
        java.lang.Integer[] $r13;
        java.util.List $r17, $r19, r24;
        java.lang.NullPointerException $r22;

        r0 := @this: org.apache.commons.collections4.FluentIterableTest;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableA>;

        $r4 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r3);

        virtualinvoke $r4.<org.apache.commons.collections4.FluentIterable: void copyInto(java.util.Collection)>($r2);

        $r5 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableA>;

        r24 = staticinvoke <org.apache.commons.collections4.IterableUtils: java.util.List toList(java.lang.Iterable)>($r5);

        $i0 = interfaceinvoke r24.<java.util.List: int size()>();

        $l1 = (long) $i0;

        $i2 = interfaceinvoke $r2.<java.util.List: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, $l3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r24, $r2);

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r7);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r8);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r9);

        $r10 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableA>;

        $r11 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r10);

        virtualinvoke $r11.<org.apache.commons.collections4.FluentIterable: void copyInto(java.util.Collection)>($r6);

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        $r13 = newarray (java.lang.Integer)[3];

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        $r13[0] = $r14;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9);

        $r13[1] = $r15;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8);

        $r13[2] = $r16;

        $r17 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r13);

        interfaceinvoke $r12.<java.util.List: boolean addAll(java.util.Collection)>($r17);

        $r18 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableA>;

        $r19 = staticinvoke <org.apache.commons.collections4.IterableUtils: java.util.List toList(java.lang.Iterable)>($r18);

        interfaceinvoke $r12.<java.util.List: boolean addAll(java.util.Collection)>($r19);

        $i4 = interfaceinvoke $r12.<java.util.List: int size()>();

        $l5 = (long) $i4;

        $i6 = interfaceinvoke $r6.<java.util.List: int size()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l5, $l7);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r12, $r6);

     label1:
        $r20 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableA>;

        $r21 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r20);

        virtualinvoke $r21.<org.apache.commons.collections4.FluentIterable: void copyInto(java.util.Collection)>(null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting NullPointerException");

     label2:
        goto label4;

     label3:
        $r22 := @caughtexception;

     label4:
        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public void iterator()
    {
        org.apache.commons.collections4.FluentIterableTest r0;
        java.lang.Iterable $r1;
        org.apache.commons.collections4.FluentIterable $r2, $r3;
        boolean $z0, $z1;
        java.util.Iterator r4, r5;

        r0 := @this: org.apache.commons.collections4.FluentIterableTest;

        $r1 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableA>;

        $r2 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r1);

        r4 = virtualinvoke $r2.<org.apache.commons.collections4.FluentIterable: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r3 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable empty()>();

        r5 = virtualinvoke $r3.<org.apache.commons.collections4.FluentIterable: java.util.Iterator iterator()>();

        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z1);

        return;
    }

    public void get()
    {
        org.apache.commons.collections4.FluentIterableTest r0;
        java.lang.Iterable $r1, $r5, $r8, $r10;
        org.apache.commons.collections4.FluentIterable $r2, $r6, $r9;
        java.lang.Object $r3;
        java.lang.Integer $r4;
        int $i0, $i2;
        long $l1;
        java.lang.IndexOutOfBoundsException $r12, $r13;

        r0 := @this: org.apache.commons.collections4.FluentIterableTest;

        $r1 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableEven>;

        $r2 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r1);

        $r3 = virtualinvoke $r2.<org.apache.commons.collections4.FluentIterable: java.lang.Object get(int)>(0);

        $r4 = (java.lang.Integer) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l1);

     label1:
        $r5 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableEven>;

        $r6 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r5);

        virtualinvoke $r6.<org.apache.commons.collections4.FluentIterable: java.lang.Object get(int)>(-1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting IndexOutOfBoundsException");

     label2:
        goto label4;

     label3:
        $r13 := @caughtexception;

     label4:
        $r8 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableEven>;

        $r9 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r8);

        $r10 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableEven>;

        $i2 = staticinvoke <org.apache.commons.collections4.IterableUtils: int size(java.lang.Iterable)>($r10);

        virtualinvoke $r9.<org.apache.commons.collections4.FluentIterable: java.lang.Object get(int)>($i2);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting IndexOutOfBoundsException");

     label5:
        goto label7;

     label6:
        $r12 := @caughtexception;

     label7:
        return;

        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
        catch java.lang.IndexOutOfBoundsException from label4 to label5 with label6;
    }

    public void toArray()
    {
        org.apache.commons.collections4.FluentIterableTest r0;
        java.lang.Long[] r2, $r4;
        java.lang.Long $r5, $r6, $r7, $r8, $r9;
        org.apache.commons.collections4.FluentIterable $r10, $r12;
        java.lang.Object[] $r11;
        java.lang.ArrayStoreException $r14;

        r0 := @this: org.apache.commons.collections4.FluentIterableTest;

        $r4 = newarray (java.lang.Long)[5];

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L);

        $r4[0] = $r5;

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(2L);

        $r4[1] = $r6;

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(3L);

        $r4[2] = $r7;

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(4L);

        $r4[3] = $r8;

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(5L);

        $r4[4] = $r9;

        $r10 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Object[])>($r4);

        $r11 = virtualinvoke $r10.<org.apache.commons.collections4.FluentIterable: java.lang.Object[] toArray(java.lang.Class)>(class "Ljava/lang/Long;");

        r2 = (java.lang.Long[]) $r11;

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r2);

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($r4, r2);

     label1:
        $r12 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Object[])>($r4);

        virtualinvoke $r12.<org.apache.commons.collections4.FluentIterable: java.lang.Object[] toArray(java.lang.Class)>(class "Ljava/lang/String;");

     label2:
        goto label4;

     label3:
        $r14 := @caughtexception;

     label4:
        return;

        catch java.lang.ArrayStoreException from label1 to label2 with label3;
    }

    public void testToString()
    {
        org.apache.commons.collections4.FluentIterableTest r0;
        java.lang.Iterable $r1, $r3;
        org.apache.commons.collections4.FluentIterable $r2, $r5;
        java.lang.String $r4, r6, r7;

        r0 := @this: org.apache.commons.collections4.FluentIterableTest;

        $r1 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableA>;

        $r2 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)>($r1);

        r6 = virtualinvoke $r2.<org.apache.commons.collections4.FluentIterable: java.lang.String toString()>();

        $r3 = r0.<org.apache.commons.collections4.FluentIterableTest: java.lang.Iterable iterableA>;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r4, r6);

        $r5 = staticinvoke <org.apache.commons.collections4.FluentIterable: org.apache.commons.collections4.FluentIterable empty()>();

        r7 = virtualinvoke $r5.<org.apache.commons.collections4.FluentIterable: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("[]", r7);

        return;
    }

    static void <clinit>()
    {
        org.apache.commons.collections4.FluentIterableTest$1 $r0;

        $r0 = new org.apache.commons.collections4.FluentIterableTest$1;

        specialinvoke $r0.<org.apache.commons.collections4.FluentIterableTest$1: void <init>()>();

        <org.apache.commons.collections4.FluentIterableTest: org.apache.commons.collections4.Predicate EVEN> = $r0;

        return;
    }
}
