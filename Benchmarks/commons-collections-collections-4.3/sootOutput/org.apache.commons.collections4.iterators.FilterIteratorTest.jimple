public class org.apache.commons.collections4.iterators.FilterIteratorTest extends org.apache.commons.collections4.iterators.AbstractIteratorTest
{
    private java.lang.String[] array;
    private java.util.List list;
    private org.apache.commons.collections4.iterators.FilterIterator iterator;

    public void <init>(java.lang.String)
    {
        org.apache.commons.collections4.iterators.FilterIteratorTest r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.collections4.iterators.FilterIteratorTest;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.collections4.iterators.AbstractIteratorTest: void <init>(java.lang.String)>(r1);

        return;
    }

    public void setUp()
    {
        org.apache.commons.collections4.iterators.FilterIteratorTest r0;
        java.lang.String[] $r1;

        r0 := @this: org.apache.commons.collections4.iterators.FilterIteratorTest;

        $r1 = newarray (java.lang.String)[3];

        $r1[0] = "a";

        $r1[1] = "b";

        $r1[2] = "c";

        r0.<org.apache.commons.collections4.iterators.FilterIteratorTest: java.lang.String[] array> = $r1;

        specialinvoke r0.<org.apache.commons.collections4.iterators.FilterIteratorTest: void initIterator()>();

        return;
    }

    public void tearDown() throws java.lang.Exception
    {
        org.apache.commons.collections4.iterators.FilterIteratorTest r0;

        r0 := @this: org.apache.commons.collections4.iterators.FilterIteratorTest;

        r0.<org.apache.commons.collections4.iterators.FilterIteratorTest: org.apache.commons.collections4.iterators.FilterIterator iterator> = null;

        return;
    }

    public org.apache.commons.collections4.iterators.FilterIterator makeEmptyIterator()
    {
        org.apache.commons.collections4.iterators.FilterIteratorTest r0;
        org.apache.commons.collections4.iterators.ArrayIterator $r1;
        java.lang.String[] $r2;
        org.apache.commons.collections4.iterators.FilterIterator $r3;

        r0 := @this: org.apache.commons.collections4.iterators.FilterIteratorTest;

        $r1 = new org.apache.commons.collections4.iterators.ArrayIterator;

        $r2 = r0.<org.apache.commons.collections4.iterators.FilterIteratorTest: java.lang.String[] array>;

        specialinvoke $r1.<org.apache.commons.collections4.iterators.ArrayIterator: void <init>(java.lang.Object)>($r2);

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.iterators.FilterIteratorTest: org.apache.commons.collections4.iterators.FilterIterator makeBlockAllFilter(java.util.Iterator)>($r1);

        return $r3;
    }

    public org.apache.commons.collections4.iterators.FilterIterator makeObject()
    {
        org.apache.commons.collections4.iterators.FilterIteratorTest r0;
        java.util.ArrayList $r1;
        java.lang.String[] $r2;
        java.lang.Object[] $r3;
        java.util.List $r4, $r5;
        java.util.Iterator $r6;
        org.apache.commons.collections4.iterators.FilterIterator $r7;

        r0 := @this: org.apache.commons.collections4.iterators.FilterIteratorTest;

        $r1 = new java.util.ArrayList;

        $r2 = r0.<org.apache.commons.collections4.iterators.FilterIteratorTest: java.lang.String[] array>;

        $r3 = (java.lang.Object[]) $r2;

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r4);

        r0.<org.apache.commons.collections4.iterators.FilterIteratorTest: java.util.List list> = $r1;

        $r5 = r0.<org.apache.commons.collections4.iterators.FilterIteratorTest: java.util.List list>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

        $r7 = virtualinvoke r0.<org.apache.commons.collections4.iterators.FilterIteratorTest: org.apache.commons.collections4.iterators.FilterIterator makePassThroughFilter(java.util.Iterator)>($r6);

        return $r7;
    }

    public void testRepeatedHasNext()
    {
        org.apache.commons.collections4.iterators.FilterIteratorTest r0;
        java.lang.String[] $r1;
        int $i0, i1;
        org.apache.commons.collections4.iterators.FilterIterator $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.iterators.FilterIteratorTest;

        i1 = 0;

     label1:
        $r1 = r0.<org.apache.commons.collections4.iterators.FilterIteratorTest: java.lang.String[] array>;

        $i0 = lengthof $r1;

        if i1 > $i0 goto label2;

        $r2 = r0.<org.apache.commons.collections4.iterators.FilterIteratorTest: org.apache.commons.collections4.iterators.FilterIterator iterator>;

        $z0 = virtualinvoke $r2.<org.apache.commons.collections4.iterators.FilterIterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.FilterIteratorTest: void assertTrue(boolean)>($z0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void testRepeatedNext()
    {
        org.apache.commons.collections4.iterators.FilterIteratorTest r0;
        java.lang.String[] r1;
        int i0, i1;
        java.lang.String r2;
        org.apache.commons.collections4.iterators.FilterIterator $r3;

        r0 := @this: org.apache.commons.collections4.iterators.FilterIteratorTest;

        r1 = r0.<org.apache.commons.collections4.iterators.FilterIteratorTest: java.lang.String[] array>;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = r1[i1];

        $r3 = r0.<org.apache.commons.collections4.iterators.FilterIteratorTest: org.apache.commons.collections4.iterators.FilterIterator iterator>;

        virtualinvoke $r3.<org.apache.commons.collections4.iterators.FilterIterator: java.lang.Object next()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        specialinvoke r0.<org.apache.commons.collections4.iterators.FilterIteratorTest: void verifyNoMoreElements()>();

        return;
    }

    public void testReturnValues()
    {
        org.apache.commons.collections4.iterators.FilterIteratorTest r0;
        java.lang.String[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;

        r0 := @this: org.apache.commons.collections4.iterators.FilterIteratorTest;

        $r1 = newarray (java.lang.String)[0];

        specialinvoke r0.<org.apache.commons.collections4.iterators.FilterIteratorTest: void verifyElementsInPredicate(java.lang.String[])>($r1);

        $r2 = newarray (java.lang.String)[1];

        $r2[0] = "a";

        specialinvoke r0.<org.apache.commons.collections4.iterators.FilterIteratorTest: void verifyElementsInPredicate(java.lang.String[])>($r2);

        $r3 = newarray (java.lang.String)[1];

        $r3[0] = "b";

        specialinvoke r0.<org.apache.commons.collections4.iterators.FilterIteratorTest: void verifyElementsInPredicate(java.lang.String[])>($r3);

        $r4 = newarray (java.lang.String)[1];

        $r4[0] = "c";

        specialinvoke r0.<org.apache.commons.collections4.iterators.FilterIteratorTest: void verifyElementsInPredicate(java.lang.String[])>($r4);

        $r5 = newarray (java.lang.String)[2];

        $r5[0] = "a";

        $r5[1] = "b";

        specialinvoke r0.<org.apache.commons.collections4.iterators.FilterIteratorTest: void verifyElementsInPredicate(java.lang.String[])>($r5);

        $r6 = newarray (java.lang.String)[2];

        $r6[0] = "a";

        $r6[1] = "c";

        specialinvoke r0.<org.apache.commons.collections4.iterators.FilterIteratorTest: void verifyElementsInPredicate(java.lang.String[])>($r6);

        $r7 = newarray (java.lang.String)[2];

        $r7[0] = "b";

        $r7[1] = "c";

        specialinvoke r0.<org.apache.commons.collections4.iterators.FilterIteratorTest: void verifyElementsInPredicate(java.lang.String[])>($r7);

        $r8 = newarray (java.lang.String)[3];

        $r8[0] = "a";

        $r8[1] = "b";

        $r8[2] = "c";

        specialinvoke r0.<org.apache.commons.collections4.iterators.FilterIteratorTest: void verifyElementsInPredicate(java.lang.String[])>($r8);

        return;
    }

    public void testSetIterator()
    {
        org.apache.commons.collections4.iterators.FilterIteratorTest r0;
        java.util.Iterator r1, r2;
        java.lang.Object $r4;
        java.util.Set $r5;
        java.util.List $r6;
        org.apache.commons.collections4.iterators.FilterIterator $r7;
        org.apache.commons.collections4.Predicate $r8;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.collections4.iterators.FilterIteratorTest;

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        $r5 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>($r4);

        r1 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

        $r6 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r2 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

        $r7 = new org.apache.commons.collections4.iterators.FilterIterator;

        specialinvoke $r7.<org.apache.commons.collections4.iterators.FilterIterator: void <init>(java.util.Iterator)>(r1);

        $r8 = staticinvoke <org.apache.commons.collections4.functors.TruePredicate: org.apache.commons.collections4.Predicate truePredicate()>();

        virtualinvoke $r7.<org.apache.commons.collections4.iterators.FilterIterator: void setPredicate(org.apache.commons.collections4.Predicate)>($r8);

        $z0 = virtualinvoke $r7.<org.apache.commons.collections4.iterators.FilterIterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.FilterIteratorTest: void assertEquals(boolean,boolean)>(1, $z0);

        virtualinvoke $r7.<org.apache.commons.collections4.iterators.FilterIterator: void setIterator(java.util.Iterator)>(r2);

        $z1 = virtualinvoke $r7.<org.apache.commons.collections4.iterators.FilterIterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.FilterIteratorTest: void assertEquals(boolean,boolean)>(0, $z1);

        return;
    }

    public void testSetPredicate()
    {
        org.apache.commons.collections4.iterators.FilterIteratorTest r0;
        java.util.Iterator r1;
        java.util.Set $r3;
        org.apache.commons.collections4.iterators.FilterIterator $r4;
        org.apache.commons.collections4.Predicate $r5, $r6;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.collections4.iterators.FilterIteratorTest;

        $r3 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(null);

        r1 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

        $r4 = new org.apache.commons.collections4.iterators.FilterIterator;

        specialinvoke $r4.<org.apache.commons.collections4.iterators.FilterIterator: void <init>(java.util.Iterator)>(r1);

        $r5 = staticinvoke <org.apache.commons.collections4.functors.TruePredicate: org.apache.commons.collections4.Predicate truePredicate()>();

        virtualinvoke $r4.<org.apache.commons.collections4.iterators.FilterIterator: void setPredicate(org.apache.commons.collections4.Predicate)>($r5);

        $z0 = virtualinvoke $r4.<org.apache.commons.collections4.iterators.FilterIterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.FilterIteratorTest: void assertEquals(boolean,boolean)>(1, $z0);

        $r6 = staticinvoke <org.apache.commons.collections4.functors.NotNullPredicate: org.apache.commons.collections4.Predicate notNullPredicate()>();

        virtualinvoke $r4.<org.apache.commons.collections4.iterators.FilterIterator: void setPredicate(org.apache.commons.collections4.Predicate)>($r6);

        $z1 = virtualinvoke $r4.<org.apache.commons.collections4.iterators.FilterIterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.FilterIteratorTest: void assertEquals(boolean,boolean)>(0, $z1);

        return;
    }

    private void verifyNoMoreElements()
    {
        org.apache.commons.collections4.iterators.FilterIteratorTest r0;
        org.apache.commons.collections4.iterators.FilterIterator $r2, $r3;
        boolean $z0, $z1;
        java.util.NoSuchElementException $r5;

        r0 := @this: org.apache.commons.collections4.iterators.FilterIteratorTest;

        $r2 = r0.<org.apache.commons.collections4.iterators.FilterIteratorTest: org.apache.commons.collections4.iterators.FilterIterator iterator>;

        $z0 = virtualinvoke $r2.<org.apache.commons.collections4.iterators.FilterIterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.apache.commons.collections4.iterators.FilterIteratorTest: void assertTrue(boolean)>($z1);

     label3:
        $r3 = r0.<org.apache.commons.collections4.iterators.FilterIteratorTest: org.apache.commons.collections4.iterators.FilterIterator iterator>;

        virtualinvoke $r3.<org.apache.commons.collections4.iterators.FilterIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.FilterIteratorTest: void fail(java.lang.String)>("NoSuchElementException expected");

     label4:
        goto label6;

     label5:
        $r5 := @caughtexception;

     label6:
        return;

        catch java.util.NoSuchElementException from label3 to label4 with label5;
    }

    private void verifyElementsInPredicate(java.lang.String[])
    {
        org.apache.commons.collections4.iterators.FilterIteratorTest r0;
        java.lang.String[] r1;
        java.lang.String r3, $r14;
        org.apache.commons.collections4.iterators.FilterIteratorTest$1 $r4;
        org.apache.commons.collections4.iterators.FilterIterator $r5, $r6, $r7, $r8, $r9, $r12, $r15, $r16;
        int $i0, $i1, $i2, i3;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.List $r10;
        java.lang.Object $r13, r17;

        r0 := @this: org.apache.commons.collections4.iterators.FilterIteratorTest;

        r1 := @parameter0: java.lang.String[];

        $r4 = new org.apache.commons.collections4.iterators.FilterIteratorTest$1;

        specialinvoke $r4.<org.apache.commons.collections4.iterators.FilterIteratorTest$1: void <init>(org.apache.commons.collections4.iterators.FilterIteratorTest,java.lang.String[])>(r0, r1);

        specialinvoke r0.<org.apache.commons.collections4.iterators.FilterIteratorTest: void initIterator()>();

        $r5 = r0.<org.apache.commons.collections4.iterators.FilterIteratorTest: org.apache.commons.collections4.iterators.FilterIterator iterator>;

        virtualinvoke $r5.<org.apache.commons.collections4.iterators.FilterIterator: void setPredicate(org.apache.commons.collections4.Predicate)>($r4);

        i3 = 0;

     label1:
        $i0 = lengthof r1;

        if i3 >= $i0 goto label5;

        $r12 = r0.<org.apache.commons.collections4.iterators.FilterIteratorTest: org.apache.commons.collections4.iterators.FilterIterator iterator>;

        $r13 = virtualinvoke $r12.<org.apache.commons.collections4.iterators.FilterIterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r13;

        $r14 = r1[i3];

        staticinvoke <org.apache.commons.collections4.iterators.FilterIteratorTest: void assertEquals(java.lang.String,java.lang.String)>($r14, r3);

        $i1 = lengthof r1;

        $i2 = $i1 - 1;

        if i3 != $i2 goto label3;

        $r16 = r0.<org.apache.commons.collections4.iterators.FilterIteratorTest: org.apache.commons.collections4.iterators.FilterIterator iterator>;

        $z2 = virtualinvoke $r16.<org.apache.commons.collections4.iterators.FilterIterator: boolean hasNext()>();

        if $z2 != 0 goto label2;

        $z3 = 1;

        goto label4;

     label2:
        $z3 = 0;

        goto label4;

     label3:
        $r15 = r0.<org.apache.commons.collections4.iterators.FilterIteratorTest: org.apache.commons.collections4.iterators.FilterIterator iterator>;

        $z3 = virtualinvoke $r15.<org.apache.commons.collections4.iterators.FilterIterator: boolean hasNext()>();

     label4:
        staticinvoke <org.apache.commons.collections4.iterators.FilterIteratorTest: void assertTrue(boolean)>($z3);

        i3 = i3 + 1;

        goto label1;

     label5:
        specialinvoke r0.<org.apache.commons.collections4.iterators.FilterIteratorTest: void verifyNoMoreElements()>();

        specialinvoke r0.<org.apache.commons.collections4.iterators.FilterIteratorTest: void initIterator()>();

        $r6 = r0.<org.apache.commons.collections4.iterators.FilterIteratorTest: org.apache.commons.collections4.iterators.FilterIterator iterator>;

        virtualinvoke $r6.<org.apache.commons.collections4.iterators.FilterIterator: void setPredicate(org.apache.commons.collections4.Predicate)>($r4);

        $r7 = r0.<org.apache.commons.collections4.iterators.FilterIteratorTest: org.apache.commons.collections4.iterators.FilterIterator iterator>;

        $z0 = virtualinvoke $r7.<org.apache.commons.collections4.iterators.FilterIterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r8 = r0.<org.apache.commons.collections4.iterators.FilterIteratorTest: org.apache.commons.collections4.iterators.FilterIterator iterator>;

        r17 = virtualinvoke $r8.<org.apache.commons.collections4.iterators.FilterIterator: java.lang.Object next()>();

        $r9 = r0.<org.apache.commons.collections4.iterators.FilterIteratorTest: org.apache.commons.collections4.iterators.FilterIterator iterator>;

        virtualinvoke $r9.<org.apache.commons.collections4.iterators.FilterIterator: void remove()>();

        $r10 = r0.<org.apache.commons.collections4.iterators.FilterIteratorTest: java.util.List list>;

        $z1 = interfaceinvoke $r10.<java.util.List: boolean contains(java.lang.Object)>(r17);

        if $z1 != 0 goto label6;

        $z4 = 1;

        goto label7;

     label6:
        $z4 = 0;

     label7:
        staticinvoke <org.apache.commons.collections4.iterators.FilterIteratorTest: void assertTrue(java.lang.String,boolean)>("Base of FilterIterator still contains removed element.", $z4);

     label8:
        return;
    }

    private void initIterator()
    {
        org.apache.commons.collections4.iterators.FilterIteratorTest r0;
        org.apache.commons.collections4.iterators.FilterIterator $r1;

        r0 := @this: org.apache.commons.collections4.iterators.FilterIteratorTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.FilterIteratorTest: org.apache.commons.collections4.iterators.FilterIterator makeObject()>();

        r0.<org.apache.commons.collections4.iterators.FilterIteratorTest: org.apache.commons.collections4.iterators.FilterIterator iterator> = $r1;

        return;
    }

    protected org.apache.commons.collections4.iterators.FilterIterator makePassThroughFilter(java.util.Iterator)
    {
        org.apache.commons.collections4.iterators.FilterIteratorTest r0;
        java.util.Iterator r1;
        org.apache.commons.collections4.iterators.FilterIteratorTest$2 $r3;
        org.apache.commons.collections4.iterators.FilterIterator $r4;

        r0 := @this: org.apache.commons.collections4.iterators.FilterIteratorTest;

        r1 := @parameter0: java.util.Iterator;

        $r3 = new org.apache.commons.collections4.iterators.FilterIteratorTest$2;

        specialinvoke $r3.<org.apache.commons.collections4.iterators.FilterIteratorTest$2: void <init>(org.apache.commons.collections4.iterators.FilterIteratorTest)>(r0);

        $r4 = new org.apache.commons.collections4.iterators.FilterIterator;

        specialinvoke $r4.<org.apache.commons.collections4.iterators.FilterIterator: void <init>(java.util.Iterator,org.apache.commons.collections4.Predicate)>(r1, $r3);

        return $r4;
    }

    protected org.apache.commons.collections4.iterators.FilterIterator makeBlockAllFilter(java.util.Iterator)
    {
        org.apache.commons.collections4.iterators.FilterIteratorTest r0;
        java.util.Iterator r1;
        org.apache.commons.collections4.iterators.FilterIteratorTest$3 $r3;
        org.apache.commons.collections4.iterators.FilterIterator $r4;

        r0 := @this: org.apache.commons.collections4.iterators.FilterIteratorTest;

        r1 := @parameter0: java.util.Iterator;

        $r3 = new org.apache.commons.collections4.iterators.FilterIteratorTest$3;

        specialinvoke $r3.<org.apache.commons.collections4.iterators.FilterIteratorTest$3: void <init>(org.apache.commons.collections4.iterators.FilterIteratorTest)>(r0);

        $r4 = new org.apache.commons.collections4.iterators.FilterIterator;

        specialinvoke $r4.<org.apache.commons.collections4.iterators.FilterIterator: void <init>(java.util.Iterator,org.apache.commons.collections4.Predicate)>(r1, $r3);

        return $r4;
    }

    public volatile java.util.Iterator makeObject()
    {
        org.apache.commons.collections4.iterators.FilterIteratorTest r0;
        org.apache.commons.collections4.iterators.FilterIterator $r1;

        r0 := @this: org.apache.commons.collections4.iterators.FilterIteratorTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.FilterIteratorTest: org.apache.commons.collections4.iterators.FilterIterator makeObject()>();

        return $r1;
    }

    public volatile java.util.Iterator makeEmptyIterator()
    {
        org.apache.commons.collections4.iterators.FilterIteratorTest r0;
        org.apache.commons.collections4.iterators.FilterIterator $r1;

        r0 := @this: org.apache.commons.collections4.iterators.FilterIteratorTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.FilterIteratorTest: org.apache.commons.collections4.iterators.FilterIterator makeEmptyIterator()>();

        return $r1;
    }

    public volatile java.lang.Object makeObject()
    {
        org.apache.commons.collections4.iterators.FilterIteratorTest r0;
        org.apache.commons.collections4.iterators.FilterIterator $r1;

        r0 := @this: org.apache.commons.collections4.iterators.FilterIteratorTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.FilterIteratorTest: org.apache.commons.collections4.iterators.FilterIterator makeObject()>();

        return $r1;
    }
}
