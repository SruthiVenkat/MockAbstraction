public class org.apache.commons.collections4.iterators.BoundedIterator extends java.lang.Object implements java.util.Iterator
{
    private final java.util.Iterator iterator;
    private final long offset;
    private final long max;
    private long pos;

    public void <init>(java.util.Iterator, long, long)
    {
        org.apache.commons.collections4.iterators.BoundedIterator r0;
        java.util.Iterator r1;
        long l0, l1;
        byte $b2, $b3;
        java.lang.IllegalArgumentException $r2, $r3;
        java.lang.NullPointerException $r4;

        r0 := @this: org.apache.commons.collections4.iterators.BoundedIterator;

        r1 := @parameter0: java.util.Iterator;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("Iterator must not be null");

        throw $r4;

     label1:
        $b2 = l0 cmp 0L;

        if $b2 >= 0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Offset parameter must not be negative.");

        throw $r3;

     label2:
        $b3 = l1 cmp 0L;

        if $b3 >= 0 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Max parameter must not be negative.");

        throw $r2;

     label3:
        r0.<org.apache.commons.collections4.iterators.BoundedIterator: java.util.Iterator iterator> = r1;

        r0.<org.apache.commons.collections4.iterators.BoundedIterator: long offset> = l0;

        r0.<org.apache.commons.collections4.iterators.BoundedIterator: long max> = l1;

        r0.<org.apache.commons.collections4.iterators.BoundedIterator: long pos> = 0L;

        specialinvoke r0.<org.apache.commons.collections4.iterators.BoundedIterator: void init()>();

        return;
    }

    private void init()
    {
        org.apache.commons.collections4.iterators.BoundedIterator r0;
        long $l0, $l1, $l3, $l4;
        byte $b2;
        java.util.Iterator $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.iterators.BoundedIterator;

     label1:
        $l1 = r0.<org.apache.commons.collections4.iterators.BoundedIterator: long pos>;

        $l0 = r0.<org.apache.commons.collections4.iterators.BoundedIterator: long offset>;

        $b2 = $l1 cmp $l0;

        if $b2 >= 0 goto label2;

        $r1 = r0.<org.apache.commons.collections4.iterators.BoundedIterator: java.util.Iterator iterator>;

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = r0.<org.apache.commons.collections4.iterators.BoundedIterator: java.util.Iterator iterator>;

        interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $l3 = r0.<org.apache.commons.collections4.iterators.BoundedIterator: long pos>;

        $l4 = $l3 + 1L;

        r0.<org.apache.commons.collections4.iterators.BoundedIterator: long pos> = $l4;

        goto label1;

     label2:
        return;
    }

    public boolean hasNext()
    {
        org.apache.commons.collections4.iterators.BoundedIterator r0;
        boolean $z0, $z1;
        java.util.Iterator $r1;

        r0 := @this: org.apache.commons.collections4.iterators.BoundedIterator;

        $z0 = specialinvoke r0.<org.apache.commons.collections4.iterators.BoundedIterator: boolean checkBounds()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r1 = r0.<org.apache.commons.collections4.iterators.BoundedIterator: java.util.Iterator iterator>;

        $z1 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        return $z1;
    }

    private boolean checkBounds()
    {
        org.apache.commons.collections4.iterators.BoundedIterator r0;
        long $l0, $l1, $l2, $l3, $l4;
        byte $b5;

        r0 := @this: org.apache.commons.collections4.iterators.BoundedIterator;

        $l1 = r0.<org.apache.commons.collections4.iterators.BoundedIterator: long pos>;

        $l0 = r0.<org.apache.commons.collections4.iterators.BoundedIterator: long offset>;

        $l2 = $l1 - $l0;

        $l4 = $l2 + 1L;

        $l3 = r0.<org.apache.commons.collections4.iterators.BoundedIterator: long max>;

        $b5 = $l4 cmp $l3;

        if $b5 <= 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    public java.lang.Object next()
    {
        org.apache.commons.collections4.iterators.BoundedIterator r0;
        java.lang.Object r1;
        boolean $z0;
        java.util.Iterator $r2;
        long $l0, $l1;
        java.util.NoSuchElementException $r3;

        r0 := @this: org.apache.commons.collections4.iterators.BoundedIterator;

        $z0 = specialinvoke r0.<org.apache.commons.collections4.iterators.BoundedIterator: boolean checkBounds()>();

        if $z0 != 0 goto label1;

        $r3 = new java.util.NoSuchElementException;

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>();

        throw $r3;

     label1:
        $r2 = r0.<org.apache.commons.collections4.iterators.BoundedIterator: java.util.Iterator iterator>;

        r1 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $l0 = r0.<org.apache.commons.collections4.iterators.BoundedIterator: long pos>;

        $l1 = $l0 + 1L;

        r0.<org.apache.commons.collections4.iterators.BoundedIterator: long pos> = $l1;

        return r1;
    }

    public void remove()
    {
        org.apache.commons.collections4.iterators.BoundedIterator r0;
        long $l0, $l1;
        byte $b2;
        java.util.Iterator $r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: org.apache.commons.collections4.iterators.BoundedIterator;

        $l1 = r0.<org.apache.commons.collections4.iterators.BoundedIterator: long pos>;

        $l0 = r0.<org.apache.commons.collections4.iterators.BoundedIterator: long offset>;

        $b2 = $l1 cmp $l0;

        if $b2 > 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("remove() can not be called before calling next()");

        throw $r2;

     label1:
        $r1 = r0.<org.apache.commons.collections4.iterators.BoundedIterator: java.util.Iterator iterator>;

        interfaceinvoke $r1.<java.util.Iterator: void remove()>();

        return;
    }
}
