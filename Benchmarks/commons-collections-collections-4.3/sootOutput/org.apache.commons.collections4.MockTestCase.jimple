public abstract class org.apache.commons.collections4.MockTestCase extends java.lang.Object
{
    private final java.util.List mockObjects;

    public void <init>()
    {
        org.apache.commons.collections4.MockTestCase r0;
        java.util.ArrayList $r1;

        r0 := @this: org.apache.commons.collections4.MockTestCase;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.collections4.MockTestCase: java.util.List mockObjects> = $r1;

        return;
    }

    protected java.lang.Object createMock(java.lang.Class)
    {
        org.apache.commons.collections4.MockTestCase r0;
        java.lang.Class r1;
        java.lang.Object r2, $r3;

        r0 := @this: org.apache.commons.collections4.MockTestCase;

        r1 := @parameter0: java.lang.Class;

        r2 = staticinvoke <org.easymock.EasyMock: java.lang.Object createMock(java.lang.Class)>(r1);

        $r3 = specialinvoke r0.<org.apache.commons.collections4.MockTestCase: java.lang.Object registerMock(java.lang.Object)>(r2);

        return $r3;
    }

    private java.lang.Object registerMock(java.lang.Object)
    {
        org.apache.commons.collections4.MockTestCase r0;
        java.lang.Object r1;
        java.util.List $r2;

        r0 := @this: org.apache.commons.collections4.MockTestCase;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.commons.collections4.MockTestCase: java.util.List mockObjects>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return r1;
    }

    protected org.easymock.IExpectationSetters expect(java.lang.Object)
    {
        org.apache.commons.collections4.MockTestCase r0;
        java.lang.Object r1;
        org.easymock.IExpectationSetters $r2;

        r0 := @this: org.apache.commons.collections4.MockTestCase;

        r1 := @parameter0: java.lang.Object;

        $r2 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>(r1);

        return $r2;
    }

    protected final void replay()
    {
        org.apache.commons.collections4.MockTestCase r0;
        java.util.Iterator r1;
        java.lang.Object r2;
        java.util.List $r3;
        boolean $z0;
        java.lang.Object[] $r4;

        r0 := @this: org.apache.commons.collections4.MockTestCase;

        $r3 = r0.<org.apache.commons.collections4.MockTestCase: java.util.List mockObjects>;

        r1 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r2;

        staticinvoke <org.easymock.EasyMock: void replay(java.lang.Object[])>($r4);

        goto label1;

     label2:
        return;
    }

    protected final void verify()
    {
        org.apache.commons.collections4.MockTestCase r0;
        java.util.ListIterator r1;
        java.util.List $r3;
        boolean $z0;
        java.lang.Object[] $r4;
        java.lang.Object $r5;
        java.lang.AssertionError $r6, $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r12;
        int $i0, $i1;
        java.lang.String $r11, $r13;

        r0 := @this: org.apache.commons.collections4.MockTestCase;

        $r3 = r0.<org.apache.commons.collections4.MockTestCase: java.util.List mockObjects>;

        r1 = interfaceinvoke $r3.<java.util.List: java.util.ListIterator listIterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.ListIterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

     label2:
        $r4 = newarray (java.lang.Object)[1];

        $r5 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object next()>();

        $r4[0] = $r5;

        staticinvoke <org.easymock.EasyMock: void verify(java.lang.Object[])>($r4);

     label3:
        goto label1;

     label4:
        $r6 := @caughtexception;

        $r7 = new java.lang.AssertionError;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $i0 = interfaceinvoke r1.<java.util.ListIterator: int previousIndex()>();

        $i1 = $i0 + 1;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r11 = virtualinvoke $r6.<java.lang.AssertionError: java.lang.String getMessage()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>($r13);

        throw $r7;

     label5:
        return;

        catch java.lang.AssertionError from label2 to label3 with label4;
    }
}
