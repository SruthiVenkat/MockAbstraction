public abstract class org.apache.commons.collections4.comparators.AbstractComparatorTest extends org.apache.commons.collections4.AbstractObjectTest
{

    public void <init>(java.lang.String)
    {
        org.apache.commons.collections4.comparators.AbstractComparatorTest r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.collections4.comparators.AbstractComparatorTest;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.collections4.AbstractObjectTest: void <init>(java.lang.String)>(r1);

        return;
    }

    public abstract java.util.List getComparableObjectsOrdered();

    public abstract java.util.Comparator makeObject();

    public boolean supportsEmptyCollections()
    {
        org.apache.commons.collections4.comparators.AbstractComparatorTest r0;

        r0 := @this: org.apache.commons.collections4.comparators.AbstractComparatorTest;

        return 0;
    }

    public boolean supportsFullCollections()
    {
        org.apache.commons.collections4.comparators.AbstractComparatorTest r0;

        r0 := @this: org.apache.commons.collections4.comparators.AbstractComparatorTest;

        return 0;
    }

    protected void reverseObjects(java.util.List)
    {
        org.apache.commons.collections4.comparators.AbstractComparatorTest r0;
        java.util.List r1;

        r0 := @this: org.apache.commons.collections4.comparators.AbstractComparatorTest;

        r1 := @parameter0: java.util.List;

        staticinvoke <java.util.Collections: void reverse(java.util.List)>(r1);

        return;
    }

    protected void randomizeObjects(java.util.List)
    {
        org.apache.commons.collections4.comparators.AbstractComparatorTest r0;
        java.util.List r1;

        r0 := @this: org.apache.commons.collections4.comparators.AbstractComparatorTest;

        r1 := @parameter0: java.util.List;

        staticinvoke <java.util.Collections: void shuffle(java.util.List)>(r1);

        return;
    }

    protected void sortObjects(java.util.List, java.util.Comparator)
    {
        org.apache.commons.collections4.comparators.AbstractComparatorTest r0;
        java.util.List r1;
        java.util.Comparator r2;

        r0 := @this: org.apache.commons.collections4.comparators.AbstractComparatorTest;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.Comparator;

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r1, r2);

        return;
    }

    public void testEmptyListSort()
    {
        org.apache.commons.collections4.comparators.AbstractComparatorTest r0;
        java.util.LinkedList $r3, $r5;
        java.util.Comparator $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.comparators.AbstractComparatorTest;

        $r3 = new java.util.LinkedList;

        specialinvoke $r3.<java.util.LinkedList: void <init>()>();

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.comparators.AbstractComparatorTest: java.util.Comparator makeObject()>();

        virtualinvoke r0.<org.apache.commons.collections4.comparators.AbstractComparatorTest: void sortObjects(java.util.List,java.util.Comparator)>($r3, $r4);

        $r5 = new java.util.LinkedList;

        specialinvoke $r5.<java.util.LinkedList: void <init>()>();

        $z0 = interfaceinvoke $r5.<java.util.List: boolean equals(java.lang.Object)>($r3);

        staticinvoke <org.apache.commons.collections4.comparators.AbstractComparatorTest: void assertTrue(java.lang.String,boolean)>("Comparator cannot sort empty lists", $z0);

        return;
    }

    public void testReverseListSort()
    {
        org.apache.commons.collections4.comparators.AbstractComparatorTest r0;
        java.util.Comparator r1;
        java.util.List r2, r3;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.comparators.AbstractComparatorTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.comparators.AbstractComparatorTest: java.util.Comparator makeObject()>();

        r2 = virtualinvoke r0.<org.apache.commons.collections4.comparators.AbstractComparatorTest: java.util.List getComparableObjectsOrdered()>();

        virtualinvoke r0.<org.apache.commons.collections4.comparators.AbstractComparatorTest: void reverseObjects(java.util.List)>(r2);

        virtualinvoke r0.<org.apache.commons.collections4.comparators.AbstractComparatorTest: void sortObjects(java.util.List,java.util.Comparator)>(r2, r1);

        r3 = virtualinvoke r0.<org.apache.commons.collections4.comparators.AbstractComparatorTest: java.util.List getComparableObjectsOrdered()>();

        $z0 = interfaceinvoke r3.<java.util.List: boolean equals(java.lang.Object)>(r2);

        staticinvoke <org.apache.commons.collections4.comparators.AbstractComparatorTest: void assertTrue(java.lang.String,boolean)>("Comparator did not reorder the List correctly", $z0);

        return;
    }

    public void testRandomListSort()
    {
        org.apache.commons.collections4.comparators.AbstractComparatorTest r0;
        java.util.Comparator r1;
        java.util.List r2, r3;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.comparators.AbstractComparatorTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.comparators.AbstractComparatorTest: java.util.Comparator makeObject()>();

        r2 = virtualinvoke r0.<org.apache.commons.collections4.comparators.AbstractComparatorTest: java.util.List getComparableObjectsOrdered()>();

        virtualinvoke r0.<org.apache.commons.collections4.comparators.AbstractComparatorTest: void randomizeObjects(java.util.List)>(r2);

        virtualinvoke r0.<org.apache.commons.collections4.comparators.AbstractComparatorTest: void sortObjects(java.util.List,java.util.Comparator)>(r2, r1);

        r3 = virtualinvoke r0.<org.apache.commons.collections4.comparators.AbstractComparatorTest: java.util.List getComparableObjectsOrdered()>();

        $z0 = interfaceinvoke r3.<java.util.List: boolean equals(java.lang.Object)>(r2);

        staticinvoke <org.apache.commons.collections4.comparators.AbstractComparatorTest: void assertTrue(java.lang.String,boolean)>("Comparator did not reorder the List correctly", $z0);

        return;
    }

    public void testComparatorIsSerializable()
    {
        org.apache.commons.collections4.comparators.AbstractComparatorTest r0;
        java.util.Comparator r1;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.comparators.AbstractComparatorTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.comparators.AbstractComparatorTest: java.util.Comparator makeObject()>();

        $z0 = r1 instanceof java.io.Serializable;

        staticinvoke <org.apache.commons.collections4.comparators.AbstractComparatorTest: void assertTrue(java.lang.String,boolean)>("This comparator should be Serializable.", $z0);

        return;
    }

    public java.lang.String getCanonicalComparatorName(java.lang.Object)
    {
        org.apache.commons.collections4.comparators.AbstractComparatorTest r0;
        java.lang.Object r1;
        java.lang.StringBuilder $r3;
        java.lang.Class $r5;
        int $i0, $i1, $i2;
        java.lang.String $r8, $r11, r12, r13;

        r0 := @this: org.apache.commons.collections4.comparators.AbstractComparatorTest;

        r1 := @parameter0: java.lang.Object;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("src/test/resources/data/test/");

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        r12 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $i0 = virtualinvoke r12.<java.lang.String: int lastIndexOf(java.lang.String)>(".");

        $i1 = $i0 + 1;

        $i2 = virtualinvoke r12.<java.lang.String: int length()>();

        r13 = virtualinvoke r12.<java.lang.String: java.lang.String substring(int,int)>($i1, $i2);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".version");

        $r8 = virtualinvoke r0.<org.apache.commons.collections4.comparators.AbstractComparatorTest: java.lang.String getCompatibilityVersion()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".obj");

        $r11 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    public void testComparatorCompatibility() throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.commons.collections4.comparators.AbstractComparatorTest r0;
        boolean $z0, $z1;
        java.util.Comparator $r1, r10;
        java.lang.String $r2, $r7, $r9;
        java.lang.Object $r3;
        java.io.FileNotFoundException $r4;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.util.List r12, r13;

        r0 := @this: org.apache.commons.collections4.comparators.AbstractComparatorTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.comparators.AbstractComparatorTest: boolean skipSerializedCanonicalTests()>();

        if $z0 != 0 goto label5;

        r10 = null;

     label1:
        $r1 = virtualinvoke r0.<org.apache.commons.collections4.comparators.AbstractComparatorTest: java.util.Comparator makeObject()>();

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.comparators.AbstractComparatorTest: java.lang.String getCanonicalComparatorName(java.lang.Object)>($r1);

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.comparators.AbstractComparatorTest: java.lang.Object readExternalFormFromDisk(java.lang.String)>($r2);

        r10 = (java.util.Comparator) $r3;

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The Serialized form could be located to test serialization compatibility: ");

        $r7 = virtualinvoke $r4.<java.io.FileNotFoundException: java.lang.String getMessage()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.collections4.comparators.AbstractComparatorTest: void fail(java.lang.String)>($r9);

     label4:
        r12 = virtualinvoke r0.<org.apache.commons.collections4.comparators.AbstractComparatorTest: java.util.List getComparableObjectsOrdered()>();

        virtualinvoke r0.<org.apache.commons.collections4.comparators.AbstractComparatorTest: void reverseObjects(java.util.List)>(r12);

        virtualinvoke r0.<org.apache.commons.collections4.comparators.AbstractComparatorTest: void sortObjects(java.util.List,java.util.Comparator)>(r12, r10);

        r13 = virtualinvoke r0.<org.apache.commons.collections4.comparators.AbstractComparatorTest: java.util.List getComparableObjectsOrdered()>();

        $z1 = interfaceinvoke r13.<java.util.List: boolean equals(java.lang.Object)>(r12);

        staticinvoke <org.apache.commons.collections4.comparators.AbstractComparatorTest: void assertTrue(java.lang.String,boolean)>("Comparator did not reorder the List correctly", $z1);

     label5:
        return;

        catch java.io.FileNotFoundException from label1 to label2 with label3;
    }

    public volatile java.lang.Object makeObject()
    {
        org.apache.commons.collections4.comparators.AbstractComparatorTest r0;
        java.util.Comparator $r1;

        r0 := @this: org.apache.commons.collections4.comparators.AbstractComparatorTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.comparators.AbstractComparatorTest: java.util.Comparator makeObject()>();

        return $r1;
    }
}
