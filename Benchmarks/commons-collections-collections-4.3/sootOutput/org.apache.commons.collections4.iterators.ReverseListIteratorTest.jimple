public class org.apache.commons.collections4.iterators.ReverseListIteratorTest extends org.apache.commons.collections4.iterators.AbstractListIteratorTest
{
    protected java.lang.String[] testArray;

    public void <init>(java.lang.String)
    {
        org.apache.commons.collections4.iterators.ReverseListIteratorTest r0;
        java.lang.String r1;
        java.lang.String[] $r2;

        r0 := @this: org.apache.commons.collections4.iterators.ReverseListIteratorTest;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.collections4.iterators.AbstractListIteratorTest: void <init>(java.lang.String)>(r1);

        $r2 = newarray (java.lang.String)[4];

        $r2[0] = "One";

        $r2[1] = "Two";

        $r2[2] = "Three";

        $r2[3] = "Four";

        r0.<org.apache.commons.collections4.iterators.ReverseListIteratorTest: java.lang.String[] testArray> = $r2;

        return;
    }

    public java.util.ListIterator makeEmptyIterator()
    {
        org.apache.commons.collections4.iterators.ReverseListIteratorTest r0;
        org.apache.commons.collections4.iterators.ReverseListIterator $r1;
        java.util.ArrayList $r2;

        r0 := @this: org.apache.commons.collections4.iterators.ReverseListIteratorTest;

        $r1 = new org.apache.commons.collections4.iterators.ReverseListIterator;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        specialinvoke $r1.<org.apache.commons.collections4.iterators.ReverseListIterator: void <init>(java.util.List)>($r2);

        return $r1;
    }

    public org.apache.commons.collections4.iterators.ReverseListIterator makeObject()
    {
        org.apache.commons.collections4.iterators.ReverseListIteratorTest r0;
        java.util.ArrayList $r2;
        java.lang.String[] $r3;
        java.lang.Object[] $r4;
        java.util.List $r5;
        org.apache.commons.collections4.iterators.ReverseListIterator $r6;

        r0 := @this: org.apache.commons.collections4.iterators.ReverseListIteratorTest;

        $r2 = new java.util.ArrayList;

        $r3 = r0.<org.apache.commons.collections4.iterators.ReverseListIteratorTest: java.lang.String[] testArray>;

        $r4 = (java.lang.Object[]) $r3;

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>($r5);

        $r6 = new org.apache.commons.collections4.iterators.ReverseListIterator;

        specialinvoke $r6.<org.apache.commons.collections4.iterators.ReverseListIterator: void <init>(java.util.List)>($r2);

        return $r6;
    }

    public void testEmptyListIteratorIsIndeedEmpty()
    {
        org.apache.commons.collections4.iterators.ReverseListIteratorTest r0;
        java.util.ListIterator r1;
        boolean $z0, $z1;
        int $i0, $i1;
        java.util.NoSuchElementException $r4, $r5;

        r0 := @this: org.apache.commons.collections4.iterators.ReverseListIteratorTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.ReverseListIteratorTest: java.util.ListIterator makeEmptyIterator()>();

        $z0 = interfaceinvoke r1.<java.util.ListIterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.ReverseListIteratorTest: void assertEquals(boolean,boolean)>(0, $z0);

        $i0 = interfaceinvoke r1.<java.util.ListIterator: int nextIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.ReverseListIteratorTest: void assertEquals(int,int)>(-1, $i0);

        $z1 = interfaceinvoke r1.<java.util.ListIterator: boolean hasPrevious()>();

        staticinvoke <org.apache.commons.collections4.iterators.ReverseListIteratorTest: void assertEquals(boolean,boolean)>(0, $z1);

        $i1 = interfaceinvoke r1.<java.util.ListIterator: int previousIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.ReverseListIteratorTest: void assertEquals(int,int)>(0, $i1);

     label1:
        interfaceinvoke r1.<java.util.ListIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.ReverseListIteratorTest: void fail(java.lang.String)>("NoSuchElementException must be thrown from empty ListIterator");

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        interfaceinvoke r1.<java.util.ListIterator: java.lang.Object previous()>();

        staticinvoke <org.apache.commons.collections4.iterators.ReverseListIteratorTest: void fail(java.lang.String)>("NoSuchElementException must be thrown from empty ListIterator");

     label5:
        goto label7;

     label6:
        $r5 := @caughtexception;

     label7:
        return;

        catch java.util.NoSuchElementException from label1 to label2 with label3;
        catch java.util.NoSuchElementException from label4 to label5 with label6;
    }

    public void testWalkForwardAndBack()
    {
        org.apache.commons.collections4.iterators.ReverseListIteratorTest r0;
        org.apache.commons.collections4.iterators.ReverseListIterator r2;
        java.lang.Object r3, $r10, $r11;
        java.util.ArrayList $r4;
        boolean $z0, $z1, $z2, $z3, $z4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r9;
        java.util.NoSuchElementException $r12;

        r0 := @this: org.apache.commons.collections4.iterators.ReverseListIteratorTest;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r2 = virtualinvoke r0.<org.apache.commons.collections4.iterators.ReverseListIteratorTest: org.apache.commons.collections4.iterators.ReverseListIterator makeObject()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.ListIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r11 = interfaceinvoke r2.<java.util.ListIterator: java.lang.Object next()>();

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r11);

        goto label1;

     label2:
        $z1 = interfaceinvoke r2.<java.util.ListIterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.ReverseListIteratorTest: void assertEquals(boolean,boolean)>(0, $z1);

        $z2 = interfaceinvoke r2.<java.util.ListIterator: boolean hasPrevious()>();

        staticinvoke <org.apache.commons.collections4.iterators.ReverseListIteratorTest: void assertEquals(boolean,boolean)>(1, $z2);

        $i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        i9 = $i0 - 1;

     label3:
        if i9 < 0 goto label4;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        $i2 = $i1 - i9;

        $i3 = $i2 - 2;

        $i4 = interfaceinvoke r2.<java.util.ListIterator: int nextIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.ReverseListIteratorTest: void assertEquals(java.lang.String,int,int)>($r9, $i3, $i4);

        $i5 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        $i6 = $i5 - i9;

        $i7 = $i6 - 1;

        $i8 = interfaceinvoke r2.<java.util.ListIterator: int previousIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.ReverseListIteratorTest: void assertEquals(int,int)>($i7, $i8);

        r3 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i9);

        $r10 = interfaceinvoke r2.<java.util.ListIterator: java.lang.Object previous()>();

        staticinvoke <org.apache.commons.collections4.iterators.ReverseListIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>(r3, $r10);

        i9 = i9 + -1;

        goto label3;

     label4:
        $z3 = interfaceinvoke r2.<java.util.ListIterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.ReverseListIteratorTest: void assertEquals(boolean,boolean)>(1, $z3);

        $z4 = interfaceinvoke r2.<java.util.ListIterator: boolean hasPrevious()>();

        staticinvoke <org.apache.commons.collections4.iterators.ReverseListIteratorTest: void assertEquals(boolean,boolean)>(0, $z4);

     label5:
        interfaceinvoke r2.<java.util.ListIterator: java.lang.Object previous()>();

        staticinvoke <org.apache.commons.collections4.iterators.ReverseListIteratorTest: void fail(java.lang.String)>("NoSuchElementException must be thrown from previous at start of ListIterator");

     label6:
        goto label8;

     label7:
        $r12 := @caughtexception;

     label8:
        return;

        catch java.util.NoSuchElementException from label5 to label6 with label7;
    }

    public void testReverse()
    {
        org.apache.commons.collections4.iterators.ReverseListIteratorTest r0;
        org.apache.commons.collections4.iterators.ReverseListIterator r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.Object $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        r0 := @this: org.apache.commons.collections4.iterators.ReverseListIteratorTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.ReverseListIteratorTest: org.apache.commons.collections4.iterators.ReverseListIterator makeObject()>();

        $z0 = interfaceinvoke r1.<java.util.ListIterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.ReverseListIteratorTest: void assertEquals(boolean,boolean)>(1, $z0);

        $i0 = interfaceinvoke r1.<java.util.ListIterator: int nextIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.ReverseListIteratorTest: void assertEquals(int,int)>(3, $i0);

        $z1 = interfaceinvoke r1.<java.util.ListIterator: boolean hasPrevious()>();

        staticinvoke <org.apache.commons.collections4.iterators.ReverseListIteratorTest: void assertEquals(boolean,boolean)>(0, $z1);

        $i1 = interfaceinvoke r1.<java.util.ListIterator: int previousIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.ReverseListIteratorTest: void assertEquals(int,int)>(4, $i1);

        $r2 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.ReverseListIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>("Four", $r2);

        $i2 = interfaceinvoke r1.<java.util.ListIterator: int nextIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.ReverseListIteratorTest: void assertEquals(int,int)>(2, $i2);

        $z2 = interfaceinvoke r1.<java.util.ListIterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.ReverseListIteratorTest: void assertEquals(boolean,boolean)>(1, $z2);

        $i3 = interfaceinvoke r1.<java.util.ListIterator: int previousIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.ReverseListIteratorTest: void assertEquals(int,int)>(3, $i3);

        $z3 = interfaceinvoke r1.<java.util.ListIterator: boolean hasPrevious()>();

        staticinvoke <org.apache.commons.collections4.iterators.ReverseListIteratorTest: void assertEquals(boolean,boolean)>(1, $z3);

        $r3 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.ReverseListIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>("Three", $r3);

        $z4 = interfaceinvoke r1.<java.util.ListIterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.ReverseListIteratorTest: void assertEquals(boolean,boolean)>(1, $z4);

        $i4 = interfaceinvoke r1.<java.util.ListIterator: int nextIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.ReverseListIteratorTest: void assertEquals(int,int)>(1, $i4);

        $z5 = interfaceinvoke r1.<java.util.ListIterator: boolean hasPrevious()>();

        staticinvoke <org.apache.commons.collections4.iterators.ReverseListIteratorTest: void assertEquals(boolean,boolean)>(1, $z5);

        $i5 = interfaceinvoke r1.<java.util.ListIterator: int previousIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.ReverseListIteratorTest: void assertEquals(int,int)>(2, $i5);

        $r4 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.ReverseListIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>("Two", $r4);

        $z6 = interfaceinvoke r1.<java.util.ListIterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.ReverseListIteratorTest: void assertEquals(boolean,boolean)>(1, $z6);

        $i6 = interfaceinvoke r1.<java.util.ListIterator: int nextIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.ReverseListIteratorTest: void assertEquals(int,int)>(0, $i6);

        $z7 = interfaceinvoke r1.<java.util.ListIterator: boolean hasPrevious()>();

        staticinvoke <org.apache.commons.collections4.iterators.ReverseListIteratorTest: void assertEquals(boolean,boolean)>(1, $z7);

        $i7 = interfaceinvoke r1.<java.util.ListIterator: int previousIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.ReverseListIteratorTest: void assertEquals(int,int)>(1, $i7);

        $r5 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.ReverseListIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>("One", $r5);

        $z8 = interfaceinvoke r1.<java.util.ListIterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.ReverseListIteratorTest: void assertEquals(boolean,boolean)>(0, $z8);

        $i8 = interfaceinvoke r1.<java.util.ListIterator: int nextIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.ReverseListIteratorTest: void assertEquals(int,int)>(-1, $i8);

        $z9 = interfaceinvoke r1.<java.util.ListIterator: boolean hasPrevious()>();

        staticinvoke <org.apache.commons.collections4.iterators.ReverseListIteratorTest: void assertEquals(boolean,boolean)>(1, $z9);

        $i9 = interfaceinvoke r1.<java.util.ListIterator: int previousIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.ReverseListIteratorTest: void assertEquals(int,int)>(0, $i9);

        $r6 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object previous()>();

        staticinvoke <org.apache.commons.collections4.iterators.ReverseListIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>("One", $r6);

        $r7 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object previous()>();

        staticinvoke <org.apache.commons.collections4.iterators.ReverseListIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>("Two", $r7);

        $r8 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object previous()>();

        staticinvoke <org.apache.commons.collections4.iterators.ReverseListIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>("Three", $r8);

        $r9 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object previous()>();

        staticinvoke <org.apache.commons.collections4.iterators.ReverseListIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>("Four", $r9);

        return;
    }

    public void testReset()
    {
        org.apache.commons.collections4.iterators.ReverseListIteratorTest r0;
        org.apache.commons.collections4.iterators.ReverseListIterator r1;
        java.lang.Object $r2, $r3, $r6;

        r0 := @this: org.apache.commons.collections4.iterators.ReverseListIteratorTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.ReverseListIteratorTest: org.apache.commons.collections4.iterators.ReverseListIterator makeObject()>();

        $r2 = interfaceinvoke r1.<org.apache.commons.collections4.ResettableListIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.ReverseListIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>("Four", $r2);

        interfaceinvoke r1.<org.apache.commons.collections4.ResettableListIterator: void reset()>();

        $r3 = interfaceinvoke r1.<org.apache.commons.collections4.ResettableListIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.ReverseListIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>("Four", $r3);

        interfaceinvoke r1.<org.apache.commons.collections4.ResettableListIterator: java.lang.Object next()>();

        interfaceinvoke r1.<org.apache.commons.collections4.ResettableListIterator: java.lang.Object next()>();

        interfaceinvoke r1.<org.apache.commons.collections4.ResettableListIterator: void reset()>();

        $r6 = interfaceinvoke r1.<org.apache.commons.collections4.ResettableListIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.ReverseListIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>("Four", $r6);

        return;
    }

    public volatile java.util.ListIterator makeObject()
    {
        org.apache.commons.collections4.iterators.ReverseListIteratorTest r0;
        org.apache.commons.collections4.iterators.ReverseListIterator $r1;

        r0 := @this: org.apache.commons.collections4.iterators.ReverseListIteratorTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.ReverseListIteratorTest: org.apache.commons.collections4.iterators.ReverseListIterator makeObject()>();

        return $r1;
    }

    public volatile java.util.Iterator makeObject()
    {
        org.apache.commons.collections4.iterators.ReverseListIteratorTest r0;
        org.apache.commons.collections4.iterators.ReverseListIterator $r1;

        r0 := @this: org.apache.commons.collections4.iterators.ReverseListIteratorTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.ReverseListIteratorTest: org.apache.commons.collections4.iterators.ReverseListIterator makeObject()>();

        return $r1;
    }

    public volatile java.util.Iterator makeEmptyIterator()
    {
        org.apache.commons.collections4.iterators.ReverseListIteratorTest r0;
        java.util.ListIterator $r1;

        r0 := @this: org.apache.commons.collections4.iterators.ReverseListIteratorTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.ReverseListIteratorTest: java.util.ListIterator makeEmptyIterator()>();

        return $r1;
    }

    public volatile java.lang.Object makeObject()
    {
        org.apache.commons.collections4.iterators.ReverseListIteratorTest r0;
        org.apache.commons.collections4.iterators.ReverseListIterator $r1;

        r0 := @this: org.apache.commons.collections4.iterators.ReverseListIteratorTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.ReverseListIteratorTest: org.apache.commons.collections4.iterators.ReverseListIterator makeObject()>();

        return $r1;
    }
}
