public class org.apache.commons.collections4.IteratorUtilsTest extends java.lang.Object
{
    private java.util.List collectionA;
    private java.util.List collectionEven;
    private java.util.List collectionOdd;
    private final java.util.Collection emptyCollection;
    private java.lang.Iterable iterableA;

    public void <init>()
    {
        org.apache.commons.collections4.IteratorUtilsTest r0;
        java.util.ArrayList $r1;

        r0 := @this: org.apache.commons.collections4.IteratorUtilsTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.collections4.IteratorUtilsTest: java.util.List collectionA> = null;

        r0.<org.apache.commons.collections4.IteratorUtilsTest: java.util.List collectionEven> = null;

        r0.<org.apache.commons.collections4.IteratorUtilsTest: java.util.List collectionOdd> = null;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(1);

        r0.<org.apache.commons.collections4.IteratorUtilsTest: java.util.Collection emptyCollection> = $r1;

        r0.<org.apache.commons.collections4.IteratorUtilsTest: java.lang.Iterable iterableA> = null;

        return;
    }

    private org.w3c.dom.NodeList createNodeList(org.w3c.dom.Node[])
    {
        org.apache.commons.collections4.IteratorUtilsTest r0;
        org.w3c.dom.Node[] r1;
        org.apache.commons.collections4.IteratorUtilsTest$1 $r2;

        r0 := @this: org.apache.commons.collections4.IteratorUtilsTest;

        r1 := @parameter0: org.w3c.dom.Node[];

        $r2 = new org.apache.commons.collections4.IteratorUtilsTest$1;

        specialinvoke $r2.<org.apache.commons.collections4.IteratorUtilsTest$1: void <init>(org.apache.commons.collections4.IteratorUtilsTest,org.w3c.dom.Node[])>(r0, r1);

        return $r2;
    }

    private org.w3c.dom.Node[] createNodes()
    {
        org.apache.commons.collections4.IteratorUtilsTest r0;
        org.w3c.dom.Node r1, r2, r3, r4;
        java.lang.Object $r5, $r6, $r7, $r8;
        java.lang.Object[] $r9, $r10, $r11, $r12;
        org.w3c.dom.Node[] $r13;

        r0 := @this: org.apache.commons.collections4.IteratorUtilsTest;

        $r5 = staticinvoke <org.easymock.EasyMock: java.lang.Object createMock(java.lang.Class)>(class "Lorg/w3c/dom/Node;");

        r1 = (org.w3c.dom.Node) $r5;

        $r6 = staticinvoke <org.easymock.EasyMock: java.lang.Object createMock(java.lang.Class)>(class "Lorg/w3c/dom/Node;");

        r2 = (org.w3c.dom.Node) $r6;

        $r7 = staticinvoke <org.easymock.EasyMock: java.lang.Object createMock(java.lang.Class)>(class "Lorg/w3c/dom/Node;");

        r3 = (org.w3c.dom.Node) $r7;

        $r8 = staticinvoke <org.easymock.EasyMock: java.lang.Object createMock(java.lang.Class)>(class "Lorg/w3c/dom/Node;");

        r4 = (org.w3c.dom.Node) $r8;

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = r1;

        staticinvoke <org.easymock.EasyMock: void replay(java.lang.Object[])>($r9);

        $r10 = newarray (java.lang.Object)[1];

        $r10[0] = r2;

        staticinvoke <org.easymock.EasyMock: void replay(java.lang.Object[])>($r10);

        $r11 = newarray (java.lang.Object)[1];

        $r11[0] = r3;

        staticinvoke <org.easymock.EasyMock: void replay(java.lang.Object[])>($r11);

        $r12 = newarray (java.lang.Object)[1];

        $r12[0] = r4;

        staticinvoke <org.easymock.EasyMock: void replay(java.lang.Object[])>($r12);

        $r13 = newarray (org.w3c.dom.Node)[4];

        $r13[0] = r1;

        $r13[1] = r2;

        $r13[2] = r3;

        $r13[3] = r4;

        return $r13;
    }

    private java.util.Iterator getImmutableIterator()
    {
        org.apache.commons.collections4.IteratorUtilsTest r0;
        java.util.ArrayList $r2;
        java.util.Iterator $r3, $r4;

        r0 := @this: org.apache.commons.collections4.IteratorUtilsTest;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>("a");

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>("b");

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>("c");

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>("d");

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        $r4 = staticinvoke <org.apache.commons.collections4.IteratorUtils: java.util.Iterator unmodifiableIterator(java.util.Iterator)>($r3);

        return $r4;
    }

    private java.util.ListIterator getImmutableListIterator()
    {
        org.apache.commons.collections4.IteratorUtilsTest r0;
        java.util.ArrayList $r2;
        java.util.ListIterator $r3, $r4;

        r0 := @this: org.apache.commons.collections4.IteratorUtilsTest;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>("a");

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>("b");

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>("c");

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>("d");

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.ListIterator listIterator()>();

        $r4 = staticinvoke <org.apache.commons.collections4.IteratorUtils: java.util.ListIterator unmodifiableListIterator(java.util.ListIterator)>($r3);

        return $r4;
    }

    public void setUp()
    {
        org.apache.commons.collections4.IteratorUtilsTest r0;
        java.util.ArrayList $r1;
        java.util.List $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r22, $r30, $r38;
        java.lang.Integer $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r24, $r25, $r26, $r27, $r28, $r29, $r32, $r33, $r34, $r35, $r36, $r37;
        java.lang.Integer[] $r23, $r31;

        r0 := @this: org.apache.commons.collections4.IteratorUtilsTest;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.collections4.IteratorUtilsTest: java.util.List collectionA> = $r1;

        $r2 = r0.<org.apache.commons.collections4.IteratorUtilsTest: java.util.List collectionA>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r3);

        $r4 = r0.<org.apache.commons.collections4.IteratorUtilsTest: java.util.List collectionA>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r5);

        $r6 = r0.<org.apache.commons.collections4.IteratorUtilsTest: java.util.List collectionA>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r7);

        $r8 = r0.<org.apache.commons.collections4.IteratorUtilsTest: java.util.List collectionA>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r9);

        $r10 = r0.<org.apache.commons.collections4.IteratorUtilsTest: java.util.List collectionA>;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r11);

        $r12 = r0.<org.apache.commons.collections4.IteratorUtilsTest: java.util.List collectionA>;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r13);

        $r14 = r0.<org.apache.commons.collections4.IteratorUtilsTest: java.util.List collectionA>;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>($r15);

        $r16 = r0.<org.apache.commons.collections4.IteratorUtilsTest: java.util.List collectionA>;

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        interfaceinvoke $r16.<java.util.List: boolean add(java.lang.Object)>($r17);

        $r18 = r0.<org.apache.commons.collections4.IteratorUtilsTest: java.util.List collectionA>;

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        interfaceinvoke $r18.<java.util.List: boolean add(java.lang.Object)>($r19);

        $r20 = r0.<org.apache.commons.collections4.IteratorUtilsTest: java.util.List collectionA>;

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        interfaceinvoke $r20.<java.util.List: boolean add(java.lang.Object)>($r21);

        $r22 = r0.<org.apache.commons.collections4.IteratorUtilsTest: java.util.List collectionA>;

        r0.<org.apache.commons.collections4.IteratorUtilsTest: java.lang.Iterable iterableA> = $r22;

        $r23 = newarray (java.lang.Integer)[6];

        $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r23[0] = $r24;

        $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r23[1] = $r25;

        $r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        $r23[2] = $r26;

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8);

        $r23[3] = $r27;

        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        $r23[4] = $r28;

        $r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(12);

        $r23[5] = $r29;

        $r30 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r23);

        r0.<org.apache.commons.collections4.IteratorUtilsTest: java.util.List collectionEven> = $r30;

        $r31 = newarray (java.lang.Integer)[6];

        $r32 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r31[0] = $r32;

        $r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r31[1] = $r33;

        $r34 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r31[2] = $r34;

        $r35 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(7);

        $r31[3] = $r35;

        $r36 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9);

        $r31[4] = $r36;

        $r37 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(11);

        $r31[5] = $r37;

        $r38 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r31);

        r0.<org.apache.commons.collections4.IteratorUtilsTest: java.util.List collectionOdd> = $r38;

        return;
    }

    public void testArrayIterator()
    {
        org.apache.commons.collections4.IteratorUtilsTest r0;
        java.lang.Object[] $r2, $r7;
        java.lang.Object $r3, $r4, $r5, $r8, $r9, $r11, $r13, $r15, $r17, $r19;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        java.lang.Integer $r6, $r12, $r14, $r16, $r18, $r20;
        int[] $r10;
        java.lang.IllegalArgumentException $r21, $r26, $r29;
        java.lang.IndexOutOfBoundsException $r22, $r23, $r24, $r27, $r28, $r30, $r31, $r32;
        java.lang.NullPointerException $r25;
        org.apache.commons.collections4.ResettableIterator r33, r38, r41, r44, r52, r53, r56, r59;

        r0 := @this: org.apache.commons.collections4.IteratorUtilsTest;

        $r2 = newarray (java.lang.Object)[3];

        $r2[0] = "a";

        $r2[1] = "b";

        $r2[2] = "c";

        r33 = staticinvoke <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableIterator arrayIterator(java.lang.Object[])>($r2);

        $r3 = interfaceinvoke r33.<org.apache.commons.collections4.ResettableIterator: java.lang.Object next()>();

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>("a");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r4 = interfaceinvoke r33.<org.apache.commons.collections4.ResettableIterator: java.lang.Object next()>();

        $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>("b");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        interfaceinvoke r33.<org.apache.commons.collections4.ResettableIterator: void reset()>();

        $r5 = interfaceinvoke r33.<org.apache.commons.collections4.ResettableIterator: java.lang.Object next()>();

        $z2 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>("a");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

     label01:
        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        staticinvoke <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableIterator arrayIterator(java.lang.Object)>($r6);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting IllegalArgumentException");

     label02:
        goto label04;

     label03:
        $r29 := @caughtexception;

     label04:
        $r7 = (java.lang.Object[]) null;

        staticinvoke <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableIterator arrayIterator(java.lang.Object[])>($r7);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting NullPointerException");

     label05:
        goto label07;

     label06:
        $r25 := @caughtexception;

     label07:
        r38 = staticinvoke <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableIterator arrayIterator(java.lang.Object[],int)>($r2, 1);

        $r8 = interfaceinvoke r38.<org.apache.commons.collections4.ResettableIterator: java.lang.Object next()>();

        $z3 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>("b");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

     label08:
        staticinvoke <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableIterator arrayIterator(java.lang.Object[],int)>($r2, -1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting IndexOutOfBoundsException");

     label09:
        goto label11;

     label10:
        $r22 := @caughtexception;

     label11:
        r41 = staticinvoke <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableIterator arrayIterator(java.lang.Object[],int)>($r2, 3);

        $z4 = interfaceinvoke r41.<org.apache.commons.collections4.ResettableIterator: boolean hasNext()>();

        if $z4 != 0 goto label12;

        $z12 = 1;

        goto label13;

     label12:
        $z12 = 0;

     label13:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z12);

        interfaceinvoke r41.<org.apache.commons.collections4.ResettableIterator: void reset()>();

     label14:
        staticinvoke <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableIterator arrayIterator(java.lang.Object[],int)>($r2, 4);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting IndexOutOfBoundsException");

     label15:
        goto label17;

     label16:
        $r28 := @caughtexception;

     label17:
        r44 = staticinvoke <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableIterator arrayIterator(java.lang.Object[],int,int)>($r2, 2, 3);

        $r9 = interfaceinvoke r44.<org.apache.commons.collections4.ResettableIterator: java.lang.Object next()>();

        $z5 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>("c");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

     label18:
        staticinvoke <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableIterator arrayIterator(java.lang.Object[],int,int)>($r2, 2, 4);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting IndexOutOfBoundsException");

     label19:
        goto label21;

     label20:
        $r24 := @caughtexception;

     label21:
        staticinvoke <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableIterator arrayIterator(java.lang.Object[],int,int)>($r2, -1, 1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting IndexOutOfBoundsException");

     label22:
        goto label24;

     label23:
        $r32 := @caughtexception;

     label24:
        staticinvoke <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableIterator arrayIterator(java.lang.Object[],int,int)>($r2, 2, 1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting IllegalArgumentException");

     label25:
        goto label27;

     label26:
        $r26 := @caughtexception;

     label27:
        $r10 = newarray (int)[3];

        $r10[0] = 0;

        $r10[1] = 1;

        $r10[2] = 2;

        r52 = staticinvoke <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableIterator arrayIterator(java.lang.Object)>($r10);

        $r11 = interfaceinvoke r52.<org.apache.commons.collections4.ResettableIterator: java.lang.Object next()>();

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $z6 = virtualinvoke $r11.<java.lang.Object: boolean equals(java.lang.Object)>($r12);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        $r13 = interfaceinvoke r52.<org.apache.commons.collections4.ResettableIterator: java.lang.Object next()>();

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $z7 = virtualinvoke $r13.<java.lang.Object: boolean equals(java.lang.Object)>($r14);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

        interfaceinvoke r52.<org.apache.commons.collections4.ResettableIterator: void reset()>();

        $r15 = interfaceinvoke r52.<org.apache.commons.collections4.ResettableIterator: java.lang.Object next()>();

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $z8 = virtualinvoke $r15.<java.lang.Object: boolean equals(java.lang.Object)>($r16);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

        r53 = staticinvoke <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableIterator arrayIterator(java.lang.Object,int)>($r10, 1);

        $r17 = interfaceinvoke r53.<org.apache.commons.collections4.ResettableIterator: java.lang.Object next()>();

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $z9 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>($r18);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z9);

     label28:
        staticinvoke <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableIterator arrayIterator(java.lang.Object,int)>($r10, -1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting IndexOutOfBoundsException");

     label29:
        goto label31;

     label30:
        $r23 := @caughtexception;

     label31:
        r56 = staticinvoke <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableIterator arrayIterator(java.lang.Object,int)>($r10, 3);

        $z10 = interfaceinvoke r56.<org.apache.commons.collections4.ResettableIterator: boolean hasNext()>();

        if $z10 != 0 goto label32;

        $z13 = 1;

        goto label33;

     label32:
        $z13 = 0;

     label33:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z13);

        interfaceinvoke r56.<org.apache.commons.collections4.ResettableIterator: void reset()>();

     label34:
        staticinvoke <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableIterator arrayIterator(java.lang.Object,int)>($r10, 4);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting IndexOutOfBoundsException");

     label35:
        goto label37;

     label36:
        $r27 := @caughtexception;

     label37:
        r59 = staticinvoke <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableIterator arrayIterator(java.lang.Object,int,int)>($r10, 2, 3);

        $r19 = interfaceinvoke r59.<org.apache.commons.collections4.ResettableIterator: java.lang.Object next()>();

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $z11 = virtualinvoke $r19.<java.lang.Object: boolean equals(java.lang.Object)>($r20);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z11);

     label38:
        staticinvoke <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableIterator arrayIterator(java.lang.Object,int,int)>($r10, 2, 4);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting IndexOutOfBoundsException");

     label39:
        goto label41;

     label40:
        $r31 := @caughtexception;

     label41:
        staticinvoke <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableIterator arrayIterator(java.lang.Object,int,int)>($r10, -1, 1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting IndexOutOfBoundsException");

     label42:
        goto label44;

     label43:
        $r30 := @caughtexception;

     label44:
        staticinvoke <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableIterator arrayIterator(java.lang.Object,int,int)>($r10, 2, 1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting IllegalArgumentException");

     label45:
        goto label47;

     label46:
        $r21 := @caughtexception;

     label47:
        return;

        catch java.lang.IllegalArgumentException from label01 to label02 with label03;
        catch java.lang.NullPointerException from label04 to label05 with label06;
        catch java.lang.IndexOutOfBoundsException from label08 to label09 with label10;
        catch java.lang.IndexOutOfBoundsException from label14 to label15 with label16;
        catch java.lang.IndexOutOfBoundsException from label18 to label19 with label20;
        catch java.lang.IndexOutOfBoundsException from label21 to label22 with label23;
        catch java.lang.IllegalArgumentException from label24 to label25 with label26;
        catch java.lang.IndexOutOfBoundsException from label28 to label29 with label30;
        catch java.lang.IndexOutOfBoundsException from label34 to label35 with label36;
        catch java.lang.IndexOutOfBoundsException from label38 to label39 with label40;
        catch java.lang.IndexOutOfBoundsException from label41 to label42 with label43;
        catch java.lang.IllegalArgumentException from label44 to label45 with label46;
    }

    public void testArrayListIterator()
    {
        org.apache.commons.collections4.IteratorUtilsTest r0;
        java.lang.Object[] $r2, $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z35, $z36, $z37, $z38, $z39, $z40, $z41, $z42, $z43, $z44, $z45, $z46, $z47, $z48, $z49, $z50, $z51, $z52, $z53, $z54, $z55, $z56, $z57;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23;
        java.lang.Object $r3, $r4, $r5, $r6, $r7, $r8, $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r25, $r27, $r29, $r31, $r33;
        java.lang.Integer $r9, $r16, $r18, $r20, $r22, $r24, $r26, $r28, $r30, $r32, $r34;
        int[] $r14;
        java.lang.IndexOutOfBoundsException $r35, $r36, $r39, $r41, $r42, $r43, $r44, $r45;
        java.lang.NullPointerException $r37;
        java.lang.IllegalArgumentException $r38, $r46, $r47;
        java.util.NoSuchElementException $r40;
        org.apache.commons.collections4.ResettableListIterator r48, r53, r56, r60, r68, r69, r72, r75;

        r0 := @this: org.apache.commons.collections4.IteratorUtilsTest;

        $r2 = newarray (java.lang.Object)[4];

        $r2[0] = "a";

        $r2[1] = "b";

        $r2[2] = "c";

        $r2[3] = "d";

        r48 = staticinvoke <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableListIterator arrayListIterator(java.lang.Object[])>($r2);

        $z0 = interfaceinvoke r48.<org.apache.commons.collections4.ResettableListIterator: boolean hasPrevious()>();

        if $z0 != 0 goto label001;

        $z27 = 1;

        goto label002;

     label001:
        $z27 = 0;

     label002:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z27);

        $i0 = interfaceinvoke r48.<org.apache.commons.collections4.ResettableListIterator: int previousIndex()>();

        if $i0 != -1 goto label003;

        $z28 = 1;

        goto label004;

     label003:
        $z28 = 0;

     label004:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z28);

        $i1 = interfaceinvoke r48.<org.apache.commons.collections4.ResettableListIterator: int nextIndex()>();

        if $i1 != 0 goto label005;

        $z29 = 1;

        goto label006;

     label005:
        $z29 = 0;

     label006:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z29);

        $r3 = interfaceinvoke r48.<org.apache.commons.collections4.ResettableListIterator: java.lang.Object next()>();

        $z1 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>("a");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r4 = interfaceinvoke r48.<org.apache.commons.collections4.ResettableListIterator: java.lang.Object previous()>();

        $z2 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>("a");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r5 = interfaceinvoke r48.<org.apache.commons.collections4.ResettableListIterator: java.lang.Object next()>();

        $z3 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>("a");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        $i2 = interfaceinvoke r48.<org.apache.commons.collections4.ResettableListIterator: int previousIndex()>();

        if $i2 != 0 goto label007;

        $z30 = 1;

        goto label008;

     label007:
        $z30 = 0;

     label008:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z30);

        $i3 = interfaceinvoke r48.<org.apache.commons.collections4.ResettableListIterator: int nextIndex()>();

        if $i3 != 1 goto label009;

        $z31 = 1;

        goto label010;

     label009:
        $z31 = 0;

     label010:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z31);

        $r6 = interfaceinvoke r48.<org.apache.commons.collections4.ResettableListIterator: java.lang.Object next()>();

        $z4 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>("b");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $r7 = interfaceinvoke r48.<org.apache.commons.collections4.ResettableListIterator: java.lang.Object next()>();

        $z5 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>("c");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        $r8 = interfaceinvoke r48.<org.apache.commons.collections4.ResettableListIterator: java.lang.Object next()>();

        $z6 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>("d");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        $i4 = interfaceinvoke r48.<org.apache.commons.collections4.ResettableListIterator: int nextIndex()>();

        if $i4 != 4 goto label011;

        $z32 = 1;

        goto label012;

     label011:
        $z32 = 0;

     label012:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z32);

        $i5 = interfaceinvoke r48.<org.apache.commons.collections4.ResettableListIterator: int previousIndex()>();

        if $i5 != 3 goto label013;

        $z33 = 1;

        goto label014;

     label013:
        $z33 = 0;

     label014:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z33);

     label015:
        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        staticinvoke <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableListIterator arrayListIterator(java.lang.Object)>($r9);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting IllegalArgumentException");

     label016:
        goto label018;

     label017:
        $r47 := @caughtexception;

     label018:
        $r10 = (java.lang.Object[]) null;

        staticinvoke <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableListIterator arrayListIterator(java.lang.Object[])>($r10);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting NullPointerException");

     label019:
        goto label021;

     label020:
        $r37 := @caughtexception;

     label021:
        r53 = staticinvoke <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableListIterator arrayListIterator(java.lang.Object[],int)>($r2, 1);

        $i6 = interfaceinvoke r53.<org.apache.commons.collections4.ResettableListIterator: int previousIndex()>();

        if $i6 != -1 goto label022;

        $z34 = 1;

        goto label023;

     label022:
        $z34 = 0;

     label023:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z34);

        $z7 = interfaceinvoke r53.<org.apache.commons.collections4.ResettableListIterator: boolean hasPrevious()>();

        if $z7 != 0 goto label024;

        $z35 = 1;

        goto label025;

     label024:
        $z35 = 0;

     label025:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z35);

        $i7 = interfaceinvoke r53.<org.apache.commons.collections4.ResettableListIterator: int nextIndex()>();

        if $i7 != 0 goto label026;

        $z36 = 1;

        goto label027;

     label026:
        $z36 = 0;

     label027:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z36);

        $r11 = interfaceinvoke r53.<org.apache.commons.collections4.ResettableListIterator: java.lang.Object next()>();

        $z8 = virtualinvoke $r11.<java.lang.Object: boolean equals(java.lang.Object)>("b");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

        $i8 = interfaceinvoke r53.<org.apache.commons.collections4.ResettableListIterator: int previousIndex()>();

        if $i8 != 0 goto label028;

        $z37 = 1;

        goto label029;

     label028:
        $z37 = 0;

     label029:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z37);

     label030:
        staticinvoke <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableListIterator arrayListIterator(java.lang.Object[],int)>($r2, -1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting IndexOutOfBoundsException.");

     label031:
        goto label033;

     label032:
        $r36 := @caughtexception;

     label033:
        r56 = staticinvoke <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableListIterator arrayListIterator(java.lang.Object[],int)>($r2, 3);

        $z9 = interfaceinvoke r56.<org.apache.commons.collections4.ResettableListIterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z9);

     label034:
        interfaceinvoke r56.<org.apache.commons.collections4.ResettableListIterator: java.lang.Object previous()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting NoSuchElementException.");

     label035:
        goto label037;

     label036:
        $r40 := @caughtexception;

     label037:
        staticinvoke <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableListIterator arrayListIterator(java.lang.Object[],int)>($r2, 5);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting IndexOutOfBoundsException.");

     label038:
        goto label040;

     label039:
        $r35 := @caughtexception;

     label040:
        r60 = staticinvoke <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableListIterator arrayListIterator(java.lang.Object[],int,int)>($r2, 2, 3);

        $r13 = interfaceinvoke r60.<org.apache.commons.collections4.ResettableListIterator: java.lang.Object next()>();

        $z10 = virtualinvoke $r13.<java.lang.Object: boolean equals(java.lang.Object)>("c");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z10);

     label041:
        staticinvoke <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableListIterator arrayListIterator(java.lang.Object[],int,int)>($r2, 2, 5);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting IndexOutOfBoundsException");

     label042:
        goto label044;

     label043:
        $r39 := @caughtexception;

     label044:
        staticinvoke <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableListIterator arrayListIterator(java.lang.Object[],int,int)>($r2, -1, 1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting IndexOutOfBoundsException");

     label045:
        goto label047;

     label046:
        $r42 := @caughtexception;

     label047:
        staticinvoke <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableListIterator arrayListIterator(java.lang.Object[],int,int)>($r2, 2, 1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting IllegalArgumentException");

     label048:
        goto label050;

     label049:
        $r46 := @caughtexception;

     label050:
        $r14 = newarray (int)[3];

        $r14[0] = 0;

        $r14[1] = 1;

        $r14[2] = 2;

        r68 = staticinvoke <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableListIterator arrayListIterator(java.lang.Object)>($r14);

        $i9 = interfaceinvoke r68.<org.apache.commons.collections4.ResettableListIterator: int previousIndex()>();

        if $i9 != -1 goto label051;

        $z38 = 1;

        goto label052;

     label051:
        $z38 = 0;

     label052:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z38);

        $z11 = interfaceinvoke r68.<org.apache.commons.collections4.ResettableListIterator: boolean hasPrevious()>();

        if $z11 != 0 goto label053;

        $z39 = 1;

        goto label054;

     label053:
        $z39 = 0;

     label054:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z39);

        $i10 = interfaceinvoke r68.<org.apache.commons.collections4.ResettableListIterator: int nextIndex()>();

        if $i10 != 0 goto label055;

        $z40 = 1;

        goto label056;

     label055:
        $z40 = 0;

     label056:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z40);

        $r15 = interfaceinvoke r68.<org.apache.commons.collections4.ResettableListIterator: java.lang.Object next()>();

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $z12 = virtualinvoke $r15.<java.lang.Object: boolean equals(java.lang.Object)>($r16);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z12);

        $i11 = interfaceinvoke r68.<org.apache.commons.collections4.ResettableListIterator: int previousIndex()>();

        if $i11 != 0 goto label057;

        $z41 = 1;

        goto label058;

     label057:
        $z41 = 0;

     label058:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z41);

        $i12 = interfaceinvoke r68.<org.apache.commons.collections4.ResettableListIterator: int nextIndex()>();

        if $i12 != 1 goto label059;

        $z42 = 1;

        goto label060;

     label059:
        $z42 = 0;

     label060:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z42);

        $r17 = interfaceinvoke r68.<org.apache.commons.collections4.ResettableListIterator: java.lang.Object next()>();

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $z13 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>($r18);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z13);

        $i13 = interfaceinvoke r68.<org.apache.commons.collections4.ResettableListIterator: int previousIndex()>();

        if $i13 != 1 goto label061;

        $z43 = 1;

        goto label062;

     label061:
        $z43 = 0;

     label062:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z43);

        $i14 = interfaceinvoke r68.<org.apache.commons.collections4.ResettableListIterator: int nextIndex()>();

        if $i14 != 2 goto label063;

        $z44 = 1;

        goto label064;

     label063:
        $z44 = 0;

     label064:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z44);

        $r19 = interfaceinvoke r68.<org.apache.commons.collections4.ResettableListIterator: java.lang.Object previous()>();

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $z14 = virtualinvoke $r19.<java.lang.Object: boolean equals(java.lang.Object)>($r20);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z14);

        $r21 = interfaceinvoke r68.<org.apache.commons.collections4.ResettableListIterator: java.lang.Object next()>();

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $z15 = virtualinvoke $r21.<java.lang.Object: boolean equals(java.lang.Object)>($r22);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z15);

        r69 = staticinvoke <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableListIterator arrayListIterator(java.lang.Object,int)>($r14, 1);

        $i15 = interfaceinvoke r69.<org.apache.commons.collections4.ResettableListIterator: int previousIndex()>();

        if $i15 != -1 goto label065;

        $z45 = 1;

        goto label066;

     label065:
        $z45 = 0;

     label066:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z45);

        $z16 = interfaceinvoke r69.<org.apache.commons.collections4.ResettableListIterator: boolean hasPrevious()>();

        if $z16 != 0 goto label067;

        $z46 = 1;

        goto label068;

     label067:
        $z46 = 0;

     label068:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z46);

        $i16 = interfaceinvoke r69.<org.apache.commons.collections4.ResettableListIterator: int nextIndex()>();

        if $i16 != 0 goto label069;

        $z47 = 1;

        goto label070;

     label069:
        $z47 = 0;

     label070:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z47);

        $r23 = interfaceinvoke r69.<org.apache.commons.collections4.ResettableListIterator: java.lang.Object next()>();

        $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $z17 = virtualinvoke $r23.<java.lang.Object: boolean equals(java.lang.Object)>($r24);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z17);

        $r25 = interfaceinvoke r69.<org.apache.commons.collections4.ResettableListIterator: java.lang.Object previous()>();

        $r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $z18 = virtualinvoke $r25.<java.lang.Object: boolean equals(java.lang.Object)>($r26);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z18);

        $r27 = interfaceinvoke r69.<org.apache.commons.collections4.ResettableListIterator: java.lang.Object next()>();

        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $z19 = virtualinvoke $r27.<java.lang.Object: boolean equals(java.lang.Object)>($r28);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z19);

        $i17 = interfaceinvoke r69.<org.apache.commons.collections4.ResettableListIterator: int previousIndex()>();

        if $i17 != 0 goto label071;

        $z48 = 1;

        goto label072;

     label071:
        $z48 = 0;

     label072:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z48);

        $i18 = interfaceinvoke r69.<org.apache.commons.collections4.ResettableListIterator: int nextIndex()>();

        if $i18 != 1 goto label073;

        $z49 = 1;

        goto label074;

     label073:
        $z49 = 0;

     label074:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z49);

        $r29 = interfaceinvoke r69.<org.apache.commons.collections4.ResettableListIterator: java.lang.Object next()>();

        $r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $z20 = virtualinvoke $r29.<java.lang.Object: boolean equals(java.lang.Object)>($r30);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z20);

        $i19 = interfaceinvoke r69.<org.apache.commons.collections4.ResettableListIterator: int previousIndex()>();

        if $i19 != 1 goto label075;

        $z50 = 1;

        goto label076;

     label075:
        $z50 = 0;

     label076:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z50);

        $i20 = interfaceinvoke r69.<org.apache.commons.collections4.ResettableListIterator: int nextIndex()>();

        if $i20 != 2 goto label077;

        $z51 = 1;

        goto label078;

     label077:
        $z51 = 0;

     label078:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z51);

        $r31 = interfaceinvoke r69.<org.apache.commons.collections4.ResettableListIterator: java.lang.Object previous()>();

        $r32 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $z21 = virtualinvoke $r31.<java.lang.Object: boolean equals(java.lang.Object)>($r32);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z21);

        $i21 = interfaceinvoke r69.<org.apache.commons.collections4.ResettableListIterator: int previousIndex()>();

        if $i21 != 0 goto label079;

        $z52 = 1;

        goto label080;

     label079:
        $z52 = 0;

     label080:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z52);

        $i22 = interfaceinvoke r69.<org.apache.commons.collections4.ResettableListIterator: int nextIndex()>();

        if $i22 != 1 goto label081;

        $z53 = 1;

        goto label082;

     label081:
        $z53 = 0;

     label082:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z53);

     label083:
        staticinvoke <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableListIterator arrayListIterator(java.lang.Object,int)>($r14, -1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting IndexOutOfBoundsException");

     label084:
        goto label086;

     label085:
        $r41 := @caughtexception;

     label086:
        r72 = staticinvoke <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableListIterator arrayListIterator(java.lang.Object,int)>($r14, 3);

        $z22 = interfaceinvoke r72.<org.apache.commons.collections4.ResettableListIterator: boolean hasNext()>();

        if $z22 != 0 goto label087;

        $z54 = 1;

        goto label088;

     label087:
        $z54 = 0;

     label088:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z54);

     label089:
        staticinvoke <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableListIterator arrayListIterator(java.lang.Object,int)>($r14, 4);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting IndexOutOfBoundsException");

     label090:
        goto label092;

     label091:
        $r44 := @caughtexception;

     label092:
        r75 = staticinvoke <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableListIterator arrayListIterator(java.lang.Object,int,int)>($r14, 2, 3);

        $z23 = interfaceinvoke r75.<org.apache.commons.collections4.ResettableListIterator: boolean hasPrevious()>();

        if $z23 != 0 goto label093;

        $z55 = 1;

        goto label094;

     label093:
        $z55 = 0;

     label094:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z55);

        $i23 = interfaceinvoke r75.<org.apache.commons.collections4.ResettableListIterator: int previousIndex()>();

        if $i23 != -1 goto label095;

        $z56 = 1;

        goto label096;

     label095:
        $z56 = 0;

     label096:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z56);

        $r33 = interfaceinvoke r75.<org.apache.commons.collections4.ResettableListIterator: java.lang.Object next()>();

        $r34 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $z24 = virtualinvoke $r33.<java.lang.Object: boolean equals(java.lang.Object)>($r34);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z24);

        $z25 = interfaceinvoke r75.<org.apache.commons.collections4.ResettableListIterator: boolean hasPrevious()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z25);

        $z26 = interfaceinvoke r75.<org.apache.commons.collections4.ResettableListIterator: boolean hasNext()>();

        if $z26 != 0 goto label097;

        $z57 = 1;

        goto label098;

     label097:
        $z57 = 0;

     label098:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z57);

     label099:
        staticinvoke <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableListIterator arrayListIterator(java.lang.Object,int,int)>($r14, 2, 4);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting IndexOutOfBoundsException");

     label100:
        goto label102;

     label101:
        $r45 := @caughtexception;

     label102:
        staticinvoke <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableListIterator arrayListIterator(java.lang.Object,int,int)>($r14, -1, 1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting IndexOutOfBoundsException");

     label103:
        goto label105;

     label104:
        $r43 := @caughtexception;

     label105:
        staticinvoke <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableListIterator arrayListIterator(java.lang.Object,int,int)>($r14, 2, 1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting IllegalArgumentException");

     label106:
        goto label108;

     label107:
        $r38 := @caughtexception;

     label108:
        return;

        catch java.lang.IllegalArgumentException from label015 to label016 with label017;
        catch java.lang.NullPointerException from label018 to label019 with label020;
        catch java.lang.IndexOutOfBoundsException from label030 to label031 with label032;
        catch java.util.NoSuchElementException from label034 to label035 with label036;
        catch java.lang.IndexOutOfBoundsException from label037 to label038 with label039;
        catch java.lang.IndexOutOfBoundsException from label041 to label042 with label043;
        catch java.lang.IndexOutOfBoundsException from label044 to label045 with label046;
        catch java.lang.IllegalArgumentException from label047 to label048 with label049;
        catch java.lang.IndexOutOfBoundsException from label083 to label084 with label085;
        catch java.lang.IndexOutOfBoundsException from label089 to label090 with label091;
        catch java.lang.IndexOutOfBoundsException from label099 to label100 with label101;
        catch java.lang.IndexOutOfBoundsException from label102 to label103 with label104;
        catch java.lang.IllegalArgumentException from label105 to label106 with label107;
    }

    public void testAsIterable()
    {
        org.apache.commons.collections4.IteratorUtilsTest r0;
        java.util.Iterator r2, r4, $r11;
        java.lang.Iterable r3, $r10;
        java.lang.Integer r5, $r7, $r8, $r9;
        java.util.ArrayList $r6;
        boolean $z3, $z4, $z5;
        java.lang.Object $r12;
        long $l0, $l2;
        int $i1, i3;

        r0 := @this: org.apache.commons.collections4.IteratorUtilsTest;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r7);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r8);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r9);

        r2 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

        r3 = staticinvoke <org.apache.commons.collections4.IteratorUtils: java.lang.Iterable asIterable(java.util.Iterator)>(r2);

        i3 = 0;

        r4 = interfaceinvoke r3.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label2;

        $r12 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.Integer) $r12;

        $l0 = (long) i3;

        $i1 = virtualinvoke r5.<java.lang.Integer: int intValue()>();

        $l2 = (long) $i1;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l0, $l2);

        i3 = i3 + 1;

        goto label1;

     label2:
        if i3 <= 0 goto label3;

        $z5 = 1;

        goto label4;

     label3:
        $z5 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        $r10 = staticinvoke <org.apache.commons.collections4.IteratorUtils: java.lang.Iterable asIterable(java.util.Iterator)>(r2);

        $r11 = interfaceinvoke $r10.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z4 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("should not be able to iterate twice", $z4);

        return;
    }

    public void testAsIterableNull()
    {
        org.apache.commons.collections4.IteratorUtilsTest r0;
        java.lang.NullPointerException $r3;

        r0 := @this: org.apache.commons.collections4.IteratorUtilsTest;

     label1:
        staticinvoke <org.apache.commons.collections4.IteratorUtils: java.lang.Iterable asIterable(java.util.Iterator)>(null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting NullPointerException");

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public void testAsMultipleIterable()
    {
        org.apache.commons.collections4.IteratorUtilsTest r0;
        java.util.Iterator r2, r10, r12;
        java.lang.Iterable r3;
        java.util.ArrayList $r4;
        java.lang.Integer $r5, $r6, $r7, r11, r13;
        boolean $z3, $z4, $z5, $z6;
        java.lang.Object $r8, $r9;
        long $l0, $l2, $l3, $l5;
        int $i1, $i4, i6, i7;

        r0 := @this: org.apache.commons.collections4.IteratorUtilsTest;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r5);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r6);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r7);

        r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

        r3 = staticinvoke <org.apache.commons.collections4.IteratorUtils: java.lang.Iterable asMultipleUseIterable(java.util.Iterator)>(r2);

        i6 = 0;

        r10 = interfaceinvoke r3.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label2;

        $r9 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r11 = (java.lang.Integer) $r9;

        $l3 = (long) i6;

        $i4 = virtualinvoke r11.<java.lang.Integer: int intValue()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l3, $l5);

        i6 = i6 + 1;

        goto label1;

     label2:
        if i6 <= 0 goto label3;

        $z4 = 1;

        goto label4;

     label3:
        $z4 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        i7 = 0;

        r12 = interfaceinvoke r3.<java.lang.Iterable: java.util.Iterator iterator()>();

     label5:
        $z5 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label6;

        $r8 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>();

        r13 = (java.lang.Integer) $r8;

        $l0 = (long) i7;

        $i1 = virtualinvoke r13.<java.lang.Integer: int intValue()>();

        $l2 = (long) $i1;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l0, $l2);

        i7 = i7 + 1;

        goto label5;

     label6:
        if i7 <= 0 goto label7;

        $z6 = 1;

        goto label8;

     label7:
        $z6 = 0;

     label8:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        return;
    }

    public void testAsMultipleIterableNull()
    {
        org.apache.commons.collections4.IteratorUtilsTest r0;
        java.lang.NullPointerException $r3;

        r0 := @this: org.apache.commons.collections4.IteratorUtilsTest;

     label1:
        staticinvoke <org.apache.commons.collections4.IteratorUtils: java.lang.Iterable asMultipleUseIterable(java.util.Iterator)>(null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting NullPointerException");

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public void testCollatedIterator()
    {
        org.apache.commons.collections4.IteratorUtilsTest r0;
        java.util.Comparator r2, $r21;
        java.util.List $r3, $r6, $r9, $r11, $r14, $r15, $r16, $r20, $r22, $r23, $r24, $r26, r33, r35, r37;
        java.util.Iterator $r4, $r7, $r10, $r12, $r17, $r19, $r25, $r27, r32, r34, r36;
        int $i0;
        long $l1;
        java.util.ArrayList $r13;
        java.util.Collection $r18;
        java.lang.NullPointerException $r28, $r29;

        r0 := @this: org.apache.commons.collections4.IteratorUtilsTest;

     label1:
        $r3 = r0.<org.apache.commons.collections4.IteratorUtilsTest: java.util.List collectionOdd>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

        staticinvoke <org.apache.commons.collections4.IteratorUtils: java.util.Iterator collatedIterator(java.util.Comparator,java.util.Iterator,java.util.Iterator)>(null, $r4, null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting NullPointerException");

     label2:
        goto label4;

     label3:
        $r29 := @caughtexception;

     label4:
        $r6 = r0.<org.apache.commons.collections4.IteratorUtilsTest: java.util.List collectionEven>;

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

        staticinvoke <org.apache.commons.collections4.IteratorUtils: java.util.Iterator collatedIterator(java.util.Comparator,java.util.Iterator,java.util.Iterator)>(null, null, $r7);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting NullPointerException");

     label5:
        goto label7;

     label6:
        $r28 := @caughtexception;

     label7:
        $r9 = r0.<org.apache.commons.collections4.IteratorUtilsTest: java.util.List collectionOdd>;

        $r10 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

        $r11 = r0.<org.apache.commons.collections4.IteratorUtilsTest: java.util.List collectionEven>;

        $r12 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

        r32 = staticinvoke <org.apache.commons.collections4.IteratorUtils: java.util.Iterator collatedIterator(java.util.Comparator,java.util.Iterator,java.util.Iterator)>(null, $r10, $r12);

        r33 = staticinvoke <org.apache.commons.collections4.IteratorUtils: java.util.List toList(java.util.Iterator)>(r32);

        $i0 = interfaceinvoke r33.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(12L, $l1);

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        $r14 = r0.<org.apache.commons.collections4.IteratorUtilsTest: java.util.List collectionOdd>;

        interfaceinvoke $r13.<java.util.List: boolean addAll(java.util.Collection)>($r14);

        $r15 = r0.<org.apache.commons.collections4.IteratorUtilsTest: java.util.List collectionEven>;

        interfaceinvoke $r13.<java.util.List: boolean addAll(java.util.Collection)>($r15);

        staticinvoke <java.util.Collections: void sort(java.util.List)>($r13);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r13, r33);

        $r16 = r0.<org.apache.commons.collections4.IteratorUtilsTest: java.util.List collectionOdd>;

        $r17 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();

        $r18 = r0.<org.apache.commons.collections4.IteratorUtilsTest: java.util.Collection emptyCollection>;

        $r19 = interfaceinvoke $r18.<java.util.Collection: java.util.Iterator iterator()>();

        r34 = staticinvoke <org.apache.commons.collections4.IteratorUtils: java.util.Iterator collatedIterator(java.util.Comparator,java.util.Iterator,java.util.Iterator)>(null, $r17, $r19);

        r35 = staticinvoke <org.apache.commons.collections4.IteratorUtils: java.util.List toList(java.util.Iterator)>(r34);

        $r20 = r0.<org.apache.commons.collections4.IteratorUtilsTest: java.util.List collectionOdd>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r20, r35);

        $r21 = staticinvoke <org.apache.commons.collections4.ComparatorUtils: java.util.Comparator naturalComparator()>();

        r2 = staticinvoke <org.apache.commons.collections4.ComparatorUtils: java.util.Comparator reversedComparator(java.util.Comparator)>($r21);

        $r22 = r0.<org.apache.commons.collections4.IteratorUtilsTest: java.util.List collectionOdd>;

        staticinvoke <java.util.Collections: void reverse(java.util.List)>($r22);

        $r23 = r0.<org.apache.commons.collections4.IteratorUtilsTest: java.util.List collectionEven>;

        staticinvoke <java.util.Collections: void reverse(java.util.List)>($r23);

        staticinvoke <java.util.Collections: void reverse(java.util.List)>($r13);

        $r24 = r0.<org.apache.commons.collections4.IteratorUtilsTest: java.util.List collectionOdd>;

        $r25 = interfaceinvoke $r24.<java.util.List: java.util.Iterator iterator()>();

        $r26 = r0.<org.apache.commons.collections4.IteratorUtilsTest: java.util.List collectionEven>;

        $r27 = interfaceinvoke $r26.<java.util.List: java.util.Iterator iterator()>();

        r36 = staticinvoke <org.apache.commons.collections4.IteratorUtils: java.util.Iterator collatedIterator(java.util.Comparator,java.util.Iterator,java.util.Iterator)>(r2, $r25, $r27);

        r37 = staticinvoke <org.apache.commons.collections4.IteratorUtils: java.util.List toList(java.util.Iterator)>(r36);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r13, r37);

        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
        catch java.lang.NullPointerException from label4 to label5 with label6;
    }

    public void testEmptyIterator()
    {
        org.apache.commons.collections4.IteratorUtilsTest r0;
        org.apache.commons.collections4.ResettableIterator $r1, $r3, $r4, $r6, $r9, $r12, $r15, $r18, $r21, $r23, $r24, $r25, $r26, $r27, $r28, $r30;
        java.util.Iterator $r2;
        java.lang.Boolean $r5, $r7, $r8, $r10, $r11, $r13, $r14, $r16, $r17, $r19, $r20, $r22;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.IllegalStateException $r31;
        java.util.NoSuchElementException $r32;

        r0 := @this: org.apache.commons.collections4.IteratorUtilsTest;

        $r2 = <org.apache.commons.collections4.iterators.EmptyIterator: java.util.Iterator INSTANCE>;

        $r1 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableIterator EMPTY_ITERATOR>;

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($r2, $r1);

        $r4 = <org.apache.commons.collections4.iterators.EmptyIterator: org.apache.commons.collections4.ResettableIterator RESETTABLE_INSTANCE>;

        $r3 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableIterator EMPTY_ITERATOR>;

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($r4, $r3);

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r6 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableIterator EMPTY_ITERATOR>;

        $z0 = $r6 instanceof java.util.Iterator;

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r5, $r7);

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r9 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableIterator EMPTY_ITERATOR>;

        $z1 = $r9 instanceof org.apache.commons.collections4.ResettableIterator;

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r8, $r10);

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r12 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableIterator EMPTY_ITERATOR>;

        $z2 = $r12 instanceof org.apache.commons.collections4.OrderedIterator;

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r11, $r13);

        $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r15 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableIterator EMPTY_ITERATOR>;

        $z3 = $r15 instanceof java.util.ListIterator;

        $r16 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r14, $r16);

        $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r18 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableIterator EMPTY_ITERATOR>;

        $z4 = $r18 instanceof org.apache.commons.collections4.MapIterator;

        $r19 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r17, $r19);

        $r20 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r21 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableIterator EMPTY_ITERATOR>;

        $z5 = interfaceinvoke $r21.<org.apache.commons.collections4.ResettableIterator: boolean hasNext()>();

        $r22 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r20, $r22);

        $r23 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableIterator EMPTY_ITERATOR>;

        interfaceinvoke $r23.<org.apache.commons.collections4.ResettableIterator: void reset()>();

        $r25 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableIterator EMPTY_ITERATOR>;

        $r24 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableIterator EMPTY_ITERATOR>;

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($r25, $r24);

        $r26 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableIterator EMPTY_ITERATOR>;

        $r27 = staticinvoke <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableIterator emptyIterator()>();

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($r26, $r27);

     label1:
        $r28 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableIterator EMPTY_ITERATOR>;

        interfaceinvoke $r28.<org.apache.commons.collections4.ResettableIterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void fail()>();

     label2:
        goto label4;

     label3:
        $r32 := @caughtexception;

     label4:
        $r30 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableIterator EMPTY_ITERATOR>;

        interfaceinvoke $r30.<org.apache.commons.collections4.ResettableIterator: void remove()>();

        staticinvoke <org.junit.Assert: void fail()>();

     label5:
        goto label7;

     label6:
        $r31 := @caughtexception;

     label7:
        return;

        catch java.util.NoSuchElementException from label1 to label2 with label3;
        catch java.lang.IllegalStateException from label4 to label5 with label6;
    }

    public void testEmptyListIterator()
    {
        org.apache.commons.collections4.IteratorUtilsTest r0;
        org.apache.commons.collections4.ResettableListIterator $r1, $r3, $r4, $r6, $r9, $r12, $r15, $r18, $r21, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r32, $r34, $r35, $r36;
        java.util.ListIterator $r2;
        java.lang.Boolean $r5, $r7, $r8, $r10, $r11, $r13, $r14, $r16, $r17, $r19, $r20, $r22;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        int $i0, $i2;
        long $l1, $l3;
        java.lang.UnsupportedOperationException $r37;
        java.util.NoSuchElementException $r38, $r39;
        java.lang.IllegalStateException $r40, $r41;

        r0 := @this: org.apache.commons.collections4.IteratorUtilsTest;

        $r2 = <org.apache.commons.collections4.iterators.EmptyListIterator: java.util.ListIterator INSTANCE>;

        $r1 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableListIterator EMPTY_LIST_ITERATOR>;

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($r2, $r1);

        $r4 = <org.apache.commons.collections4.iterators.EmptyListIterator: org.apache.commons.collections4.ResettableListIterator RESETTABLE_INSTANCE>;

        $r3 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableListIterator EMPTY_LIST_ITERATOR>;

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($r4, $r3);

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r6 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableListIterator EMPTY_LIST_ITERATOR>;

        $z0 = $r6 instanceof java.util.Iterator;

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r5, $r7);

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r9 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableListIterator EMPTY_LIST_ITERATOR>;

        $z1 = $r9 instanceof java.util.ListIterator;

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r8, $r10);

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r12 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableListIterator EMPTY_LIST_ITERATOR>;

        $z2 = $r12 instanceof org.apache.commons.collections4.ResettableIterator;

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r11, $r13);

        $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r15 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableListIterator EMPTY_LIST_ITERATOR>;

        $z3 = $r15 instanceof org.apache.commons.collections4.ResettableListIterator;

        $r16 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r14, $r16);

        $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r18 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableListIterator EMPTY_LIST_ITERATOR>;

        $z4 = $r18 instanceof org.apache.commons.collections4.MapIterator;

        $r19 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r17, $r19);

        $r20 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r21 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableListIterator EMPTY_LIST_ITERATOR>;

        $z5 = interfaceinvoke $r21.<org.apache.commons.collections4.ResettableListIterator: boolean hasNext()>();

        $r22 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r20, $r22);

        $r23 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableListIterator EMPTY_LIST_ITERATOR>;

        $i0 = interfaceinvoke $r23.<org.apache.commons.collections4.ResettableListIterator: int nextIndex()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        $r24 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableListIterator EMPTY_LIST_ITERATOR>;

        $i2 = interfaceinvoke $r24.<org.apache.commons.collections4.ResettableListIterator: int previousIndex()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l3);

        $r25 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableListIterator EMPTY_LIST_ITERATOR>;

        interfaceinvoke $r25.<org.apache.commons.collections4.ResettableListIterator: void reset()>();

        $r27 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableListIterator EMPTY_LIST_ITERATOR>;

        $r26 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableListIterator EMPTY_LIST_ITERATOR>;

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($r27, $r26);

        $r28 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableListIterator EMPTY_LIST_ITERATOR>;

        $r29 = staticinvoke <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableListIterator emptyListIterator()>();

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($r28, $r29);

     label01:
        $r30 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableListIterator EMPTY_LIST_ITERATOR>;

        interfaceinvoke $r30.<org.apache.commons.collections4.ResettableListIterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void fail()>();

     label02:
        goto label04;

     label03:
        $r38 := @caughtexception;

     label04:
        $r32 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableListIterator EMPTY_LIST_ITERATOR>;

        interfaceinvoke $r32.<org.apache.commons.collections4.ResettableListIterator: java.lang.Object previous()>();

        staticinvoke <org.junit.Assert: void fail()>();

     label05:
        goto label07;

     label06:
        $r39 := @caughtexception;

     label07:
        $r34 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableListIterator EMPTY_LIST_ITERATOR>;

        interfaceinvoke $r34.<org.apache.commons.collections4.ResettableListIterator: void remove()>();

        staticinvoke <org.junit.Assert: void fail()>();

     label08:
        goto label10;

     label09:
        $r41 := @caughtexception;

     label10:
        $r35 = staticinvoke <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableListIterator emptyListIterator()>();

        interfaceinvoke $r35.<org.apache.commons.collections4.ResettableListIterator: void set(java.lang.Object)>(null);

        staticinvoke <org.junit.Assert: void fail()>();

     label11:
        goto label13;

     label12:
        $r40 := @caughtexception;

     label13:
        $r36 = staticinvoke <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableListIterator emptyListIterator()>();

        interfaceinvoke $r36.<org.apache.commons.collections4.ResettableListIterator: void add(java.lang.Object)>(null);

        staticinvoke <org.junit.Assert: void fail()>();

     label14:
        goto label16;

     label15:
        $r37 := @caughtexception;

     label16:
        return;

        catch java.util.NoSuchElementException from label01 to label02 with label03;
        catch java.util.NoSuchElementException from label04 to label05 with label06;
        catch java.lang.IllegalStateException from label07 to label08 with label09;
        catch java.lang.IllegalStateException from label10 to label11 with label12;
        catch java.lang.UnsupportedOperationException from label13 to label14 with label15;
    }

    public void testEmptyMapIterator()
    {
        org.apache.commons.collections4.IteratorUtilsTest r0;
        org.apache.commons.collections4.MapIterator $r1, $r2, $r4, $r7, $r10, $r13, $r16, $r19, $r22, $r24, $r26, $r27, $r28, $r29, $r30, $r32, $r33, $r35, $r37;
        java.lang.Boolean $r3, $r5, $r6, $r8, $r9, $r11, $r12, $r14, $r15, $r17, $r18, $r20, $r21, $r23;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.apache.commons.collections4.ResettableIterator $r25;
        java.lang.IllegalStateException $r39, $r40, $r42, $r43;
        java.util.NoSuchElementException $r41;

        r0 := @this: org.apache.commons.collections4.IteratorUtilsTest;

        $r2 = <org.apache.commons.collections4.iterators.EmptyMapIterator: org.apache.commons.collections4.MapIterator INSTANCE>;

        $r1 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.MapIterator EMPTY_MAP_ITERATOR>;

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($r2, $r1);

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r4 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.MapIterator EMPTY_MAP_ITERATOR>;

        $z0 = $r4 instanceof java.util.Iterator;

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r3, $r5);

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r7 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.MapIterator EMPTY_MAP_ITERATOR>;

        $z1 = $r7 instanceof org.apache.commons.collections4.MapIterator;

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r6, $r8);

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r10 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.MapIterator EMPTY_MAP_ITERATOR>;

        $z2 = $r10 instanceof org.apache.commons.collections4.ResettableIterator;

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r9, $r11);

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r13 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.MapIterator EMPTY_MAP_ITERATOR>;

        $z3 = $r13 instanceof java.util.ListIterator;

        $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r12, $r14);

        $r15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r16 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.MapIterator EMPTY_MAP_ITERATOR>;

        $z4 = $r16 instanceof org.apache.commons.collections4.OrderedIterator;

        $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r15, $r17);

        $r18 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r19 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.MapIterator EMPTY_MAP_ITERATOR>;

        $z5 = $r19 instanceof org.apache.commons.collections4.OrderedMapIterator;

        $r20 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r18, $r20);

        $r21 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r22 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.MapIterator EMPTY_MAP_ITERATOR>;

        $z6 = interfaceinvoke $r22.<org.apache.commons.collections4.MapIterator: boolean hasNext()>();

        $r23 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z6);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r21, $r23);

        $r24 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.MapIterator EMPTY_MAP_ITERATOR>;

        $r25 = (org.apache.commons.collections4.ResettableIterator) $r24;

        interfaceinvoke $r25.<org.apache.commons.collections4.ResettableIterator: void reset()>();

        $r27 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.MapIterator EMPTY_MAP_ITERATOR>;

        $r26 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.MapIterator EMPTY_MAP_ITERATOR>;

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($r27, $r26);

        $r28 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.MapIterator EMPTY_MAP_ITERATOR>;

        $r29 = staticinvoke <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.MapIterator emptyMapIterator()>();

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($r28, $r29);

     label01:
        $r30 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.MapIterator EMPTY_MAP_ITERATOR>;

        interfaceinvoke $r30.<org.apache.commons.collections4.MapIterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void fail()>();

     label02:
        goto label04;

     label03:
        $r41 := @caughtexception;

     label04:
        $r32 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.MapIterator EMPTY_MAP_ITERATOR>;

        interfaceinvoke $r32.<org.apache.commons.collections4.MapIterator: void remove()>();

        staticinvoke <org.junit.Assert: void fail()>();

     label05:
        goto label07;

     label06:
        $r43 := @caughtexception;

     label07:
        $r33 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.MapIterator EMPTY_MAP_ITERATOR>;

        interfaceinvoke $r33.<org.apache.commons.collections4.MapIterator: java.lang.Object getKey()>();

        staticinvoke <org.junit.Assert: void fail()>();

     label08:
        goto label10;

     label09:
        $r40 := @caughtexception;

     label10:
        $r35 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.MapIterator EMPTY_MAP_ITERATOR>;

        interfaceinvoke $r35.<org.apache.commons.collections4.MapIterator: java.lang.Object getValue()>();

        staticinvoke <org.junit.Assert: void fail()>();

     label11:
        goto label13;

     label12:
        $r42 := @caughtexception;

     label13:
        $r37 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.MapIterator EMPTY_MAP_ITERATOR>;

        interfaceinvoke $r37.<org.apache.commons.collections4.MapIterator: java.lang.Object setValue(java.lang.Object)>(null);

        staticinvoke <org.junit.Assert: void fail()>();

     label14:
        goto label16;

     label15:
        $r39 := @caughtexception;

     label16:
        return;

        catch java.util.NoSuchElementException from label01 to label02 with label03;
        catch java.lang.IllegalStateException from label04 to label05 with label06;
        catch java.lang.IllegalStateException from label07 to label08 with label09;
        catch java.lang.IllegalStateException from label10 to label11 with label12;
        catch java.lang.IllegalStateException from label13 to label14 with label15;
    }

    public void testEmptyOrderedIterator()
    {
        org.apache.commons.collections4.IteratorUtilsTest r0;
        org.apache.commons.collections4.OrderedIterator $r1, $r2, $r4, $r7, $r10, $r13, $r16, $r19, $r22, $r24, $r26, $r27, $r28, $r29, $r30, $r32, $r34;
        java.lang.Boolean $r3, $r5, $r6, $r8, $r9, $r11, $r12, $r14, $r15, $r17, $r18, $r20, $r21, $r23;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.apache.commons.collections4.ResettableIterator $r25;
        java.lang.IllegalStateException $r35;
        java.util.NoSuchElementException $r36, $r37;

        r0 := @this: org.apache.commons.collections4.IteratorUtilsTest;

        $r2 = <org.apache.commons.collections4.iterators.EmptyOrderedIterator: org.apache.commons.collections4.OrderedIterator INSTANCE>;

        $r1 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.OrderedIterator EMPTY_ORDERED_ITERATOR>;

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($r2, $r1);

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r4 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.OrderedIterator EMPTY_ORDERED_ITERATOR>;

        $z0 = $r4 instanceof java.util.Iterator;

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r3, $r5);

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r7 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.OrderedIterator EMPTY_ORDERED_ITERATOR>;

        $z1 = $r7 instanceof org.apache.commons.collections4.OrderedIterator;

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r6, $r8);

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r10 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.OrderedIterator EMPTY_ORDERED_ITERATOR>;

        $z2 = $r10 instanceof org.apache.commons.collections4.ResettableIterator;

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r9, $r11);

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r13 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.OrderedIterator EMPTY_ORDERED_ITERATOR>;

        $z3 = $r13 instanceof java.util.ListIterator;

        $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r12, $r14);

        $r15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r16 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.OrderedIterator EMPTY_ORDERED_ITERATOR>;

        $z4 = $r16 instanceof org.apache.commons.collections4.MapIterator;

        $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r15, $r17);

        $r18 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r19 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.OrderedIterator EMPTY_ORDERED_ITERATOR>;

        $z5 = interfaceinvoke $r19.<org.apache.commons.collections4.OrderedIterator: boolean hasNext()>();

        $r20 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r18, $r20);

        $r21 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r22 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.OrderedIterator EMPTY_ORDERED_ITERATOR>;

        $z6 = interfaceinvoke $r22.<org.apache.commons.collections4.OrderedIterator: boolean hasPrevious()>();

        $r23 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z6);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r21, $r23);

        $r24 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.OrderedIterator EMPTY_ORDERED_ITERATOR>;

        $r25 = (org.apache.commons.collections4.ResettableIterator) $r24;

        interfaceinvoke $r25.<org.apache.commons.collections4.ResettableIterator: void reset()>();

        $r27 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.OrderedIterator EMPTY_ORDERED_ITERATOR>;

        $r26 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.OrderedIterator EMPTY_ORDERED_ITERATOR>;

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($r27, $r26);

        $r28 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.OrderedIterator EMPTY_ORDERED_ITERATOR>;

        $r29 = staticinvoke <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.OrderedIterator emptyOrderedIterator()>();

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($r28, $r29);

     label01:
        $r30 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.OrderedIterator EMPTY_ORDERED_ITERATOR>;

        interfaceinvoke $r30.<org.apache.commons.collections4.OrderedIterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void fail()>();

     label02:
        goto label04;

     label03:
        $r37 := @caughtexception;

     label04:
        $r32 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.OrderedIterator EMPTY_ORDERED_ITERATOR>;

        interfaceinvoke $r32.<org.apache.commons.collections4.OrderedIterator: java.lang.Object previous()>();

        staticinvoke <org.junit.Assert: void fail()>();

     label05:
        goto label07;

     label06:
        $r36 := @caughtexception;

     label07:
        $r34 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.OrderedIterator EMPTY_ORDERED_ITERATOR>;

        interfaceinvoke $r34.<org.apache.commons.collections4.OrderedIterator: void remove()>();

        staticinvoke <org.junit.Assert: void fail()>();

     label08:
        goto label10;

     label09:
        $r35 := @caughtexception;

     label10:
        return;

        catch java.util.NoSuchElementException from label01 to label02 with label03;
        catch java.util.NoSuchElementException from label04 to label05 with label06;
        catch java.lang.IllegalStateException from label07 to label08 with label09;
    }

    public void testEmptyOrderedMapIterator()
    {
        org.apache.commons.collections4.IteratorUtilsTest r0;
        org.apache.commons.collections4.OrderedMapIterator $r1, $r2, $r4, $r7, $r10, $r13, $r16, $r19, $r22, $r24, $r26, $r27, $r28, $r29, $r30, $r32, $r34, $r35, $r37, $r39;
        java.lang.Boolean $r3, $r5, $r6, $r8, $r9, $r11, $r12, $r14, $r15, $r17, $r18, $r20, $r21, $r23;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.apache.commons.collections4.ResettableIterator $r25;
        java.util.NoSuchElementException $r41, $r44;
        java.lang.IllegalStateException $r42, $r43, $r45, $r46;

        r0 := @this: org.apache.commons.collections4.IteratorUtilsTest;

        $r2 = <org.apache.commons.collections4.iterators.EmptyOrderedMapIterator: org.apache.commons.collections4.OrderedMapIterator INSTANCE>;

        $r1 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR>;

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($r2, $r1);

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r4 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR>;

        $z0 = $r4 instanceof java.util.Iterator;

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r3, $r5);

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r7 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR>;

        $z1 = $r7 instanceof org.apache.commons.collections4.MapIterator;

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r6, $r8);

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r10 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR>;

        $z2 = $r10 instanceof org.apache.commons.collections4.OrderedMapIterator;

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r9, $r11);

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r13 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR>;

        $z3 = $r13 instanceof org.apache.commons.collections4.ResettableIterator;

        $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r12, $r14);

        $r15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r16 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR>;

        $z4 = $r16 instanceof java.util.ListIterator;

        $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r15, $r17);

        $r18 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r19 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR>;

        $z5 = interfaceinvoke $r19.<org.apache.commons.collections4.OrderedMapIterator: boolean hasNext()>();

        $r20 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r18, $r20);

        $r21 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r22 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR>;

        $z6 = interfaceinvoke $r22.<org.apache.commons.collections4.OrderedMapIterator: boolean hasPrevious()>();

        $r23 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z6);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r21, $r23);

        $r24 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR>;

        $r25 = (org.apache.commons.collections4.ResettableIterator) $r24;

        interfaceinvoke $r25.<org.apache.commons.collections4.ResettableIterator: void reset()>();

        $r27 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR>;

        $r26 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR>;

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($r27, $r26);

        $r28 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR>;

        $r29 = staticinvoke <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.OrderedMapIterator emptyOrderedMapIterator()>();

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($r28, $r29);

     label01:
        $r30 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR>;

        interfaceinvoke $r30.<org.apache.commons.collections4.OrderedMapIterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void fail()>();

     label02:
        goto label04;

     label03:
        $r44 := @caughtexception;

     label04:
        $r32 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR>;

        interfaceinvoke $r32.<org.apache.commons.collections4.OrderedMapIterator: java.lang.Object previous()>();

        staticinvoke <org.junit.Assert: void fail()>();

     label05:
        goto label07;

     label06:
        $r41 := @caughtexception;

     label07:
        $r34 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR>;

        interfaceinvoke $r34.<org.apache.commons.collections4.OrderedMapIterator: void remove()>();

        staticinvoke <org.junit.Assert: void fail()>();

     label08:
        goto label10;

     label09:
        $r45 := @caughtexception;

     label10:
        $r35 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR>;

        interfaceinvoke $r35.<org.apache.commons.collections4.OrderedMapIterator: java.lang.Object getKey()>();

        staticinvoke <org.junit.Assert: void fail()>();

     label11:
        goto label13;

     label12:
        $r46 := @caughtexception;

     label13:
        $r37 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR>;

        interfaceinvoke $r37.<org.apache.commons.collections4.OrderedMapIterator: java.lang.Object getValue()>();

        staticinvoke <org.junit.Assert: void fail()>();

     label14:
        goto label16;

     label15:
        $r43 := @caughtexception;

     label16:
        $r39 = <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR>;

        interfaceinvoke $r39.<org.apache.commons.collections4.OrderedMapIterator: java.lang.Object setValue(java.lang.Object)>(null);

        staticinvoke <org.junit.Assert: void fail()>();

     label17:
        goto label19;

     label18:
        $r42 := @caughtexception;

     label19:
        return;

        catch java.util.NoSuchElementException from label01 to label02 with label03;
        catch java.util.NoSuchElementException from label04 to label05 with label06;
        catch java.lang.IllegalStateException from label07 to label08 with label09;
        catch java.lang.IllegalStateException from label10 to label11 with label12;
        catch java.lang.IllegalStateException from label13 to label14 with label15;
        catch java.lang.IllegalStateException from label16 to label17 with label18;
    }

    public void testFind()
    {
        org.apache.commons.collections4.IteratorUtilsTest r0;
        java.lang.Integer $r2, $r6, $r7, r17, r19;
        java.lang.Iterable $r3, $r8, $r12;
        java.util.Iterator $r4, $r9, $r13;
        java.lang.Object $r5, $r10, $r11, $r14;
        boolean $z0, $z1;
        java.lang.NullPointerException $r15;
        org.apache.commons.collections4.Predicate r16, r18;

        r0 := @this: org.apache.commons.collections4.IteratorUtilsTest;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        r16 = staticinvoke <org.apache.commons.collections4.functors.EqualPredicate: org.apache.commons.collections4.Predicate equalPredicate(java.lang.Object)>($r2);

        $r3 = r0.<org.apache.commons.collections4.IteratorUtilsTest: java.lang.Iterable iterableA>;

        $r4 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r5 = staticinvoke <org.apache.commons.collections4.IteratorUtils: java.lang.Object find(java.util.Iterator,org.apache.commons.collections4.Predicate)>($r4, r16);

        r17 = (java.lang.Integer) $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $z0 = virtualinvoke r17.<java.lang.Integer: boolean equals(java.lang.Object)>($r6);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(45);

        r18 = staticinvoke <org.apache.commons.collections4.functors.EqualPredicate: org.apache.commons.collections4.Predicate equalPredicate(java.lang.Object)>($r7);

        $r8 = r0.<org.apache.commons.collections4.IteratorUtilsTest: java.lang.Iterable iterableA>;

        $r9 = interfaceinvoke $r8.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r10 = staticinvoke <org.apache.commons.collections4.IteratorUtils: java.lang.Object find(java.util.Iterator,org.apache.commons.collections4.Predicate)>($r9, r18);

        r19 = (java.lang.Integer) $r10;

        if r19 != null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r11 = staticinvoke <org.apache.commons.collections4.IteratorUtils: java.lang.Object find(java.util.Iterator,org.apache.commons.collections4.Predicate)>(null, r18);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r11);

     label3:
        $r12 = r0.<org.apache.commons.collections4.IteratorUtilsTest: java.lang.Iterable iterableA>;

        $r13 = interfaceinvoke $r12.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r14 = staticinvoke <org.apache.commons.collections4.IteratorUtils: java.lang.Object find(java.util.Iterator,org.apache.commons.collections4.Predicate)>($r13, null);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r14);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting NullPointerException");

     label4:
        goto label6;

     label5:
        $r15 := @caughtexception;

     label6:
        return;

        catch java.lang.NullPointerException from label3 to label4 with label5;
    }

    public void testFirstFromIterator() throws java.lang.Exception
    {
        org.apache.commons.collections4.IteratorUtilsTest r0;
        java.util.Iterator r1;
        java.lang.Iterable $r2;
        java.lang.Object $r3;
        java.lang.Integer $r4;
        int $i0;
        long $l1;

        r0 := @this: org.apache.commons.collections4.IteratorUtilsTest;

        $r2 = r0.<org.apache.commons.collections4.IteratorUtilsTest: java.lang.Iterable iterableA>;

        r1 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r3 = staticinvoke <org.apache.commons.collections4.IteratorUtils: java.lang.Object first(java.util.Iterator)>(r1);

        $r4 = (java.lang.Integer) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l1);

        return;
    }

    public void testForEach()
    {
        org.apache.commons.collections4.IteratorUtilsTest r0;
        org.apache.commons.collections4.Closure r3;
        java.util.ArrayList $r6, $r8, $r10;
        java.lang.Integer $r7, $r9;
        java.util.Iterator $r11, $r12, $r14;
        boolean $z4, $z6, $z7;
        java.lang.NullPointerException $r13;

        r0 := @this: org.apache.commons.collections4.IteratorUtilsTest;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r7);

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r9);

        r3 = staticinvoke <org.apache.commons.collections4.ClosureUtils: org.apache.commons.collections4.Closure invokerClosure(java.lang.String)>("clear");

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r10.<java.util.Collection: boolean add(java.lang.Object)>($r6);

        interfaceinvoke $r10.<java.util.Collection: boolean add(java.lang.Object)>($r8);

        $r11 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();

        staticinvoke <org.apache.commons.collections4.IteratorUtils: void forEach(java.util.Iterator,org.apache.commons.collections4.Closure)>($r11, r3);

        $z4 = interfaceinvoke $r6.<java.util.List: boolean isEmpty()>();

        if $z4 == 0 goto label1;

        $z6 = interfaceinvoke $r8.<java.util.List: boolean isEmpty()>();

        if $z6 == 0 goto label1;

        $z7 = 1;

        goto label2;

     label1:
        $z7 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

     label3:
        $r14 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();

        staticinvoke <org.apache.commons.collections4.IteratorUtils: void forEach(java.util.Iterator,org.apache.commons.collections4.Closure)>($r14, null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting NullPointerException");

     label4:
        goto label6;

     label5:
        $r13 := @caughtexception;

     label6:
        staticinvoke <org.apache.commons.collections4.IteratorUtils: void forEach(java.util.Iterator,org.apache.commons.collections4.Closure)>(null, r3);

        interfaceinvoke $r10.<java.util.Collection: boolean add(java.lang.Object)>(null);

        $r12 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();

        staticinvoke <org.apache.commons.collections4.IteratorUtils: void forEach(java.util.Iterator,org.apache.commons.collections4.Closure)>($r12, r3);

        return;

        catch java.lang.NullPointerException from label3 to label4 with label5;
    }

    public void testForEachButLast()
    {
        org.apache.commons.collections4.IteratorUtilsTest r0;
        org.apache.commons.collections4.Closure r3;
        java.util.ArrayList $r6, $r8, $r10;
        java.lang.Integer $r7, $r9;
        java.util.Iterator $r11, $r15, $r19;
        java.lang.Object $r12, $r16;
        boolean $z4, $z7, $z8;
        java.lang.NullPointerException $r17;
        java.util.List r18, r20;

        r0 := @this: org.apache.commons.collections4.IteratorUtilsTest;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r7);

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r9);

        r3 = staticinvoke <org.apache.commons.collections4.ClosureUtils: org.apache.commons.collections4.Closure invokerClosure(java.lang.String)>("clear");

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r10.<java.util.Collection: boolean add(java.lang.Object)>($r6);

        interfaceinvoke $r10.<java.util.Collection: boolean add(java.lang.Object)>($r8);

        $r11 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();

        $r12 = staticinvoke <org.apache.commons.collections4.IteratorUtils: java.lang.Object forEachButLast(java.util.Iterator,org.apache.commons.collections4.Closure)>($r11, r3);

        r18 = (java.util.List) $r12;

        $z4 = interfaceinvoke $r6.<java.util.List: boolean isEmpty()>();

        if $z4 == 0 goto label1;

        $z7 = interfaceinvoke $r8.<java.util.List: boolean isEmpty()>();

        if $z7 != 0 goto label1;

        $z8 = 1;

        goto label2;

     label1:
        $z8 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($r8, r18);

     label3:
        $r19 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();

        staticinvoke <org.apache.commons.collections4.IteratorUtils: java.lang.Object forEachButLast(java.util.Iterator,org.apache.commons.collections4.Closure)>($r19, null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting NullPointerException");

     label4:
        goto label6;

     label5:
        $r17 := @caughtexception;

     label6:
        staticinvoke <org.apache.commons.collections4.IteratorUtils: java.lang.Object forEachButLast(java.util.Iterator,org.apache.commons.collections4.Closure)>(null, r3);

        interfaceinvoke $r10.<java.util.Collection: boolean add(java.lang.Object)>(null);

        interfaceinvoke $r10.<java.util.Collection: boolean add(java.lang.Object)>(null);

        $r15 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();

        $r16 = staticinvoke <org.apache.commons.collections4.IteratorUtils: java.lang.Object forEachButLast(java.util.Iterator,org.apache.commons.collections4.Closure)>($r15, r3);

        r20 = (java.util.List) $r16;

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>(r20);

        return;

        catch java.lang.NullPointerException from label3 to label4 with label5;
    }

    public void testGetAtIndexFromIterator() throws java.lang.Exception
    {
        org.apache.commons.collections4.IteratorUtilsTest r0;
        java.lang.Iterable $r2, $r5;
        java.lang.Object $r3, $r6;
        java.lang.Integer $r4, $r7;
        int $i0, $i2;
        long $l1, $l3;
        boolean $z0, $z1;
        java.lang.IndexOutOfBoundsException $r9;
        java.util.Iterator r10, r11;

        r0 := @this: org.apache.commons.collections4.IteratorUtilsTest;

        $r2 = r0.<org.apache.commons.collections4.IteratorUtilsTest: java.lang.Iterable iterableA>;

        r10 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r3 = staticinvoke <org.apache.commons.collections4.IteratorUtils: java.lang.Object get(java.util.Iterator,int)>(r10, 0);

        $r4 = (java.lang.Integer) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l1);

        $r5 = r0.<org.apache.commons.collections4.IteratorUtilsTest: java.lang.Iterable iterableA>;

        r11 = interfaceinvoke $r5.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r6 = staticinvoke <org.apache.commons.collections4.IteratorUtils: java.lang.Object get(java.util.Iterator,int)>(r11, 1);

        $r7 = (java.lang.Integer) $r6;

        $i2 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l3);

     label1:
        staticinvoke <org.apache.commons.collections4.IteratorUtils: java.lang.Object get(java.util.Iterator,int)>(r11, 10);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting IndexOutOfBoundsException.");

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

     label4:
        $z0 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label5;

        $z1 = 1;

        goto label6;

     label5:
        $z1 = 0;

     label6:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        return;

        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
    }

    public void testGetIterator()
    {
        org.apache.commons.collections4.IteratorUtilsTest r0;
        org.w3c.dom.Node[] r3;
        org.w3c.dom.NodeList r4;
        java.lang.Object[] $r5;
        java.util.HashMap $r6;
        java.util.Iterator $r7, $r9, $r10, $r12, $r13, $r14, $r15, $r18;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.Iterable $r8, $r11;
        java.util.Vector $r16;
        java.util.Enumeration $r17;

        r0 := @this: org.apache.commons.collections4.IteratorUtilsTest;

        $r5 = newarray (java.lang.Object)[3];

        $r5[0] = "a";

        $r5[1] = "b";

        $r5[2] = "c";

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r3 = specialinvoke r0.<org.apache.commons.collections4.IteratorUtilsTest: org.w3c.dom.Node[] createNodes()>();

        r4 = specialinvoke r0.<org.apache.commons.collections4.IteratorUtilsTest: org.w3c.dom.NodeList createNodeList(org.w3c.dom.Node[])>(r3);

        $r7 = staticinvoke <org.apache.commons.collections4.IteratorUtils: java.util.Iterator getIterator(java.lang.Object)>(null);

        $z0 = $r7 instanceof org.apache.commons.collections4.iterators.EmptyIterator;

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("returns empty iterator when null passed", $z0);

        $r8 = r0.<org.apache.commons.collections4.IteratorUtilsTest: java.lang.Iterable iterableA>;

        $r9 = interfaceinvoke $r8.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r10 = staticinvoke <org.apache.commons.collections4.IteratorUtils: java.util.Iterator getIterator(java.lang.Object)>($r9);

        $z1 = $r10 instanceof java.util.Iterator;

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("returns Iterator when Iterator directly ", $z1);

        $r11 = r0.<org.apache.commons.collections4.IteratorUtilsTest: java.lang.Iterable iterableA>;

        $r12 = staticinvoke <org.apache.commons.collections4.IteratorUtils: java.util.Iterator getIterator(java.lang.Object)>($r11);

        $z2 = $r12 instanceof java.util.Iterator;

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("returns Iterator when iterable passed", $z2);

        $r13 = staticinvoke <org.apache.commons.collections4.IteratorUtils: java.util.Iterator getIterator(java.lang.Object)>($r5);

        $z3 = $r13 instanceof org.apache.commons.collections4.iterators.ObjectArrayIterator;

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("returns ObjectArrayIterator when Object array passed", $z3);

        $r14 = staticinvoke <org.apache.commons.collections4.IteratorUtils: java.util.Iterator getIterator(java.lang.Object)>($r6);

        $z4 = $r14 instanceof java.util.Iterator;

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("returns Iterator when Map passed", $z4);

        $r15 = staticinvoke <org.apache.commons.collections4.IteratorUtils: java.util.Iterator getIterator(java.lang.Object)>(r4);

        $z5 = $r15 instanceof org.apache.commons.collections4.iterators.NodeListIterator;

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("returns NodeListIterator when nodeList passed", $z5);

        $r16 = new java.util.Vector;

        specialinvoke $r16.<java.util.Vector: void <init>()>();

        $r17 = virtualinvoke $r16.<java.util.Vector: java.util.Enumeration elements()>();

        $r18 = staticinvoke <org.apache.commons.collections4.IteratorUtils: java.util.Iterator getIterator(java.lang.Object)>($r17);

        $z6 = $r18 instanceof org.apache.commons.collections4.iterators.EnumerationIterator;

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("returns EnumerationIterator when Enumeration passed", $z6);

        return;
    }

    public void testIndexOf()
    {
        org.apache.commons.collections4.IteratorUtilsTest r0;
        java.lang.Integer $r2, $r5;
        java.lang.Iterable $r3, $r6, $r8;
        java.util.Iterator $r4, $r7, $r9;
        long $l0, $l1, $l3;
        int $i2, i5, i6;
        java.lang.NullPointerException $r10;
        org.apache.commons.collections4.Predicate r11, r12;

        r0 := @this: org.apache.commons.collections4.IteratorUtilsTest;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        r11 = staticinvoke <org.apache.commons.collections4.functors.EqualPredicate: org.apache.commons.collections4.Predicate equalPredicate(java.lang.Object)>($r2);

        $r3 = r0.<org.apache.commons.collections4.IteratorUtilsTest: java.lang.Iterable iterableA>;

        $r4 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>();

        i5 = staticinvoke <org.apache.commons.collections4.IteratorUtils: int indexOf(java.util.Iterator,org.apache.commons.collections4.Predicate)>($r4, r11);

        $l0 = (long) i5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(6L, $l0);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(45);

        r12 = staticinvoke <org.apache.commons.collections4.functors.EqualPredicate: org.apache.commons.collections4.Predicate equalPredicate(java.lang.Object)>($r5);

        $r6 = r0.<org.apache.commons.collections4.IteratorUtilsTest: java.lang.Iterable iterableA>;

        $r7 = interfaceinvoke $r6.<java.lang.Iterable: java.util.Iterator iterator()>();

        i6 = staticinvoke <org.apache.commons.collections4.IteratorUtils: int indexOf(java.util.Iterator,org.apache.commons.collections4.Predicate)>($r7, r12);

        $l1 = (long) i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l1);

        $i2 = staticinvoke <org.apache.commons.collections4.IteratorUtils: int indexOf(java.util.Iterator,org.apache.commons.collections4.Predicate)>(null, r12);

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l3);

     label1:
        $r8 = r0.<org.apache.commons.collections4.IteratorUtilsTest: java.lang.Iterable iterableA>;

        $r9 = interfaceinvoke $r8.<java.lang.Iterable: java.util.Iterator iterator()>();

        staticinvoke <org.apache.commons.collections4.IteratorUtils: int indexOf(java.util.Iterator,org.apache.commons.collections4.Predicate)>($r9, null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting NullPointerException");

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

     label4:
        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public void testNodeIterator()
    {
        org.apache.commons.collections4.IteratorUtilsTest r0;
        org.w3c.dom.Node[] r1;
        org.w3c.dom.NodeList r2, $r8;
        org.w3c.dom.Node r3, r6, $r15;
        org.apache.commons.collections4.iterators.NodeListIterator r4;
        java.util.Iterator r5, $r13;
        java.lang.Object $r7, $r14;
        org.easymock.IExpectationSetters $r9;
        java.lang.Object[] $r10;
        java.lang.Iterable $r11, $r12;
        boolean $z0, $z1, $z2;
        int i0;

        r0 := @this: org.apache.commons.collections4.IteratorUtilsTest;

        r1 = specialinvoke r0.<org.apache.commons.collections4.IteratorUtilsTest: org.w3c.dom.Node[] createNodes()>();

        r2 = specialinvoke r0.<org.apache.commons.collections4.IteratorUtilsTest: org.w3c.dom.NodeList createNodeList(org.w3c.dom.Node[])>(r1);

        $r7 = staticinvoke <org.easymock.EasyMock: java.lang.Object createMock(java.lang.Class)>(class "Lorg/w3c/dom/Node;");

        r3 = (org.w3c.dom.Node) $r7;

        $r8 = interfaceinvoke r3.<org.w3c.dom.Node: org.w3c.dom.NodeList getChildNodes()>();

        $r9 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r8);

        interfaceinvoke $r9.<org.easymock.IExpectationSetters: void andStubReturn(java.lang.Object)>(r2);

        $r10 = newarray (java.lang.Object)[1];

        $r10[0] = r3;

        staticinvoke <org.easymock.EasyMock: void replay(java.lang.Object[])>($r10);

        r4 = staticinvoke <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.iterators.NodeListIterator nodeListIterator(org.w3c.dom.Node)>(r3);

        i0 = 0;

        $r11 = staticinvoke <org.apache.commons.collections4.IteratorUtils: java.lang.Iterable asIterable(java.util.Iterator)>(r4);

        r5 = interfaceinvoke $r11.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r14 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.w3c.dom.Node) $r14;

        $r15 = r1[i0];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r15, r6);

        i0 = i0 + 1;

        goto label1;

     label2:
        if i0 <= 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r12 = staticinvoke <org.apache.commons.collections4.IteratorUtils: java.lang.Iterable asIterable(java.util.Iterator)>(r4);

        $r13 = interfaceinvoke $r12.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z1 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("should not be able to iterate twice", $z1);

        return;
    }

    public void testNodeListIterator()
    {
        org.apache.commons.collections4.IteratorUtilsTest r0;
        org.w3c.dom.Node[] r1;
        org.w3c.dom.NodeList r2;
        org.apache.commons.collections4.iterators.NodeListIterator r3;
        java.util.Iterator r4, $r8;
        org.w3c.dom.Node r5, $r10;
        java.lang.Iterable $r6, $r7;
        boolean $z0, $z1, $z2;
        java.lang.Object $r9;
        int i0;

        r0 := @this: org.apache.commons.collections4.IteratorUtilsTest;

        r1 = specialinvoke r0.<org.apache.commons.collections4.IteratorUtilsTest: org.w3c.dom.Node[] createNodes()>();

        r2 = specialinvoke r0.<org.apache.commons.collections4.IteratorUtilsTest: org.w3c.dom.NodeList createNodeList(org.w3c.dom.Node[])>(r1);

        r3 = staticinvoke <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.iterators.NodeListIterator nodeListIterator(org.w3c.dom.NodeList)>(r2);

        i0 = 0;

        $r6 = staticinvoke <org.apache.commons.collections4.IteratorUtils: java.lang.Iterable asIterable(java.util.Iterator)>(r3);

        r4 = interfaceinvoke $r6.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.w3c.dom.Node) $r9;

        $r10 = r1[i0];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r10, r5);

        i0 = i0 + 1;

        goto label1;

     label2:
        if i0 <= 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r7 = staticinvoke <org.apache.commons.collections4.IteratorUtils: java.lang.Iterable asIterable(java.util.Iterator)>(r3);

        $r8 = interfaceinvoke $r7.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("should not be able to iterate twice", $z1);

        return;
    }

    public void testToArray()
    {
        org.apache.commons.collections4.IteratorUtilsTest r0;
        java.lang.Object[] r2;
        java.util.ArrayList $r4;
        java.lang.Integer $r5;
        java.util.Iterator $r6;
        java.util.List $r7;
        java.lang.NullPointerException $r9;

        r0 := @this: org.apache.commons.collections4.IteratorUtilsTest;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r5);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>("Two");

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(null);

        $r6 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

        r2 = staticinvoke <org.apache.commons.collections4.IteratorUtils: java.lang.Object[] toArray(java.util.Iterator)>($r6);

        $r7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r4, $r7);

     label1:
        staticinvoke <org.apache.commons.collections4.IteratorUtils: java.lang.Object[] toArray(java.util.Iterator)>(null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting NullPointerException");

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

     label4:
        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public void testToArray2()
    {
        org.apache.commons.collections4.IteratorUtilsTest r0;
        java.lang.String[] r2;
        java.util.ArrayList $r3;
        java.util.Iterator $r4, $r7;
        java.lang.Object[] $r5;
        java.util.List $r6;
        java.lang.NullPointerException $r10, $r11;

        r0 := @this: org.apache.commons.collections4.IteratorUtilsTest;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>("One");

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>("Two");

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(null);

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

        $r5 = staticinvoke <org.apache.commons.collections4.IteratorUtils: java.lang.Object[] toArray(java.util.Iterator,java.lang.Class)>($r4, class "Ljava/lang/String;");

        r2 = (java.lang.String[]) $r5;

        $r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r3, $r6);

     label1:
        $r7 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

        staticinvoke <org.apache.commons.collections4.IteratorUtils: java.lang.Object[] toArray(java.util.Iterator,java.lang.Class)>($r7, null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting NullPointerException");

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

     label4:
        staticinvoke <org.apache.commons.collections4.IteratorUtils: java.lang.Object[] toArray(java.util.Iterator,java.lang.Class)>(null, class "Ljava/lang/String;");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting NullPointerException");

     label5:
        goto label7;

     label6:
        $r11 := @caughtexception;

     label7:
        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
        catch java.lang.NullPointerException from label4 to label5 with label6;
    }

    public void testToList()
    {
        org.apache.commons.collections4.IteratorUtilsTest r0;
        java.util.List r2;
        java.util.ArrayList $r3;
        java.lang.Integer $r4;
        java.util.Iterator $r5;

        r0 := @this: org.apache.commons.collections4.IteratorUtilsTest;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r4);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>("Two");

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(null);

        $r5 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

        r2 = staticinvoke <org.apache.commons.collections4.IteratorUtils: java.util.List toList(java.util.Iterator)>($r5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r3, r2);

        return;
    }

    public void testToListIterator()
    {
        org.apache.commons.collections4.IteratorUtilsTest r0;
        java.util.Iterator r2;
        java.util.ListIterator r3;
        java.util.ArrayList $r4;
        java.lang.Integer $r5, $r6, $r7, $r9;
        boolean $z3;
        long $l0, $l2;
        java.lang.Object $r8;
        int $i1, i3;

        r0 := @this: org.apache.commons.collections4.IteratorUtilsTest;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r5);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r6);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r7);

        r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

        r3 = staticinvoke <org.apache.commons.collections4.IteratorUtils: java.util.ListIterator toListIterator(java.util.Iterator)>(r2);

        i3 = 0;

     label1:
        $z3 = interfaceinvoke r3.<java.util.ListIterator: boolean hasNext()>();

        if $z3 == 0 goto label2;

        $l0 = (long) i3;

        $r8 = interfaceinvoke r3.<java.util.ListIterator: java.lang.Object next()>();

        $r9 = (java.lang.Integer) $r8;

        $i1 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        $l2 = (long) $i1;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l0, $l2);

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    public void testToListIteratorNull()
    {
        org.apache.commons.collections4.IteratorUtilsTest r0;
        java.lang.NullPointerException $r3;

        r0 := @this: org.apache.commons.collections4.IteratorUtilsTest;

     label1:
        staticinvoke <org.apache.commons.collections4.IteratorUtils: java.util.ListIterator toListIterator(java.util.Iterator)>(null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting NullPointerException");

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public void testUnmodifiableIteratorImmutability()
    {
        org.apache.commons.collections4.IteratorUtilsTest r0;
        java.util.Iterator r1;
        java.lang.UnsupportedOperationException $r3, $r4;

        r0 := @this: org.apache.commons.collections4.IteratorUtilsTest;

        r1 = specialinvoke r0.<org.apache.commons.collections4.IteratorUtilsTest: java.util.Iterator getImmutableIterator()>();

     label1:
        interfaceinvoke r1.<java.util.Iterator: void remove()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("remove() should throw an UnsupportedOperationException");

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

     label5:
        interfaceinvoke r1.<java.util.Iterator: void remove()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("remove() should throw an UnsupportedOperationException");

     label6:
        goto label8;

     label7:
        $r3 := @caughtexception;

     label8:
        return;

        catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
        catch java.lang.UnsupportedOperationException from label5 to label6 with label7;
    }

    public void testUnmodifiableIteratorIteration()
    {
        org.apache.commons.collections4.IteratorUtilsTest r0;
        java.util.Iterator r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Object $r2, $r3, $r4, $r5;

        r0 := @this: org.apache.commons.collections4.IteratorUtilsTest;

        r1 = specialinvoke r0.<org.apache.commons.collections4.IteratorUtilsTest: java.util.Iterator getImmutableIterator()>();

        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $r2);

        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("b", $r3);

        $z2 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("c", $r4);

        $z3 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("d", $r5);

        $z4 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z4 != 0 goto label1;

        $z5 = 1;

        goto label2;

     label1:
        $z5 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        return;
    }

    public void testUnmodifiableListIteratorImmutability()
    {
        org.apache.commons.collections4.IteratorUtilsTest r0;
        java.util.ListIterator r1;
        java.lang.UnsupportedOperationException $r3, $r4, $r5, $r6, $r7, $r8;

        r0 := @this: org.apache.commons.collections4.IteratorUtilsTest;

        r1 = specialinvoke r0.<org.apache.commons.collections4.IteratorUtilsTest: java.util.ListIterator getImmutableListIterator()>();

     label01:
        interfaceinvoke r1.<java.util.ListIterator: void remove()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("remove() should throw an UnsupportedOperationException");

     label02:
        goto label04;

     label03:
        $r4 := @caughtexception;

     label04:
        interfaceinvoke r1.<java.util.ListIterator: void set(java.lang.Object)>("a");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("set(Object) should throw an UnsupportedOperationException");

     label05:
        goto label07;

     label06:
        $r3 := @caughtexception;

     label07:
        interfaceinvoke r1.<java.util.ListIterator: void add(java.lang.Object)>("a");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("add(Object) should throw an UnsupportedOperationException");

     label08:
        goto label10;

     label09:
        $r5 := @caughtexception;

     label10:
        interfaceinvoke r1.<java.util.ListIterator: java.lang.Object next()>();

     label11:
        interfaceinvoke r1.<java.util.ListIterator: void remove()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("remove() should throw an UnsupportedOperationException");

     label12:
        goto label14;

     label13:
        $r8 := @caughtexception;

     label14:
        interfaceinvoke r1.<java.util.ListIterator: void set(java.lang.Object)>("a");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("set(Object) should throw an UnsupportedOperationException");

     label15:
        goto label17;

     label16:
        $r7 := @caughtexception;

     label17:
        interfaceinvoke r1.<java.util.ListIterator: void add(java.lang.Object)>("a");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("add(Object) should throw an UnsupportedOperationException");

     label18:
        goto label20;

     label19:
        $r6 := @caughtexception;

     label20:
        return;

        catch java.lang.UnsupportedOperationException from label01 to label02 with label03;
        catch java.lang.UnsupportedOperationException from label04 to label05 with label06;
        catch java.lang.UnsupportedOperationException from label07 to label08 with label09;
        catch java.lang.UnsupportedOperationException from label11 to label12 with label13;
        catch java.lang.UnsupportedOperationException from label14 to label15 with label16;
        catch java.lang.UnsupportedOperationException from label17 to label18 with label19;
    }

    public void testUnmodifiableListIteratorIteration()
    {
        org.apache.commons.collections4.IteratorUtilsTest r0;
        java.util.ListIterator r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20;
        java.lang.Object $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        r0 := @this: org.apache.commons.collections4.IteratorUtilsTest;

        r1 = specialinvoke r0.<org.apache.commons.collections4.IteratorUtilsTest: java.util.ListIterator getImmutableListIterator()>();

        $z0 = interfaceinvoke r1.<java.util.ListIterator: boolean hasPrevious()>();

        if $z0 != 0 goto label1;

        $z18 = 1;

        goto label2;

     label1:
        $z18 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z18);

        $z1 = interfaceinvoke r1.<java.util.ListIterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r2 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $r2);

        $z2 = interfaceinvoke r1.<java.util.ListIterator: boolean hasPrevious()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $z3 = interfaceinvoke r1.<java.util.ListIterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        $r3 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("b", $r3);

        $z4 = interfaceinvoke r1.<java.util.ListIterator: boolean hasPrevious()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $z5 = interfaceinvoke r1.<java.util.ListIterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        $r4 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("c", $r4);

        $z6 = interfaceinvoke r1.<java.util.ListIterator: boolean hasPrevious()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        $z7 = interfaceinvoke r1.<java.util.ListIterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

        $r5 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("d", $r5);

        $z8 = interfaceinvoke r1.<java.util.ListIterator: boolean hasPrevious()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

        $z9 = interfaceinvoke r1.<java.util.ListIterator: boolean hasNext()>();

        if $z9 != 0 goto label3;

        $z19 = 1;

        goto label4;

     label3:
        $z19 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z19);

        $r6 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object previous()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("d", $r6);

        $z10 = interfaceinvoke r1.<java.util.ListIterator: boolean hasPrevious()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z10);

        $z11 = interfaceinvoke r1.<java.util.ListIterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z11);

        $r7 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object previous()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("c", $r7);

        $z12 = interfaceinvoke r1.<java.util.ListIterator: boolean hasPrevious()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z12);

        $z13 = interfaceinvoke r1.<java.util.ListIterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z13);

        $r8 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object previous()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("b", $r8);

        $z14 = interfaceinvoke r1.<java.util.ListIterator: boolean hasPrevious()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z14);

        $z15 = interfaceinvoke r1.<java.util.ListIterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z15);

        $r9 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object previous()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $r9);

        $z16 = interfaceinvoke r1.<java.util.ListIterator: boolean hasPrevious()>();

        if $z16 != 0 goto label5;

        $z20 = 1;

        goto label6;

     label5:
        $z20 = 0;

     label6:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z20);

        $z17 = interfaceinvoke r1.<java.util.ListIterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z17);

        return;
    }
}
