public class org.apache.commons.collections4.map.ReferenceIdentityMapTest extends org.apache.commons.collections4.map.AbstractIterableMapTest
{
    private static final java.lang.Integer I1A;
    private static final java.lang.Integer I1B;
    private static final java.lang.Integer I2A;
    private static final java.lang.Integer I2B;
    java.lang.ref.WeakReference keyReference;
    java.lang.ref.WeakReference valueReference;

    public void <init>(java.lang.String)
    {
        org.apache.commons.collections4.map.ReferenceIdentityMapTest r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.collections4.map.ReferenceIdentityMapTest;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.collections4.map.AbstractIterableMapTest: void <init>(java.lang.String)>(r1);

        return;
    }

    public static junit.framework.Test suite()
    {
        junit.framework.TestSuite $r0;

        $r0 = staticinvoke <org.apache.commons.collections4.BulkTest: junit.framework.TestSuite makeSuite(java.lang.Class)>(class "Lorg/apache/commons/collections4/map/ReferenceIdentityMapTest;");

        return $r0;
    }

    public org.apache.commons.collections4.map.ReferenceIdentityMap makeObject()
    {
        org.apache.commons.collections4.map.ReferenceIdentityMapTest r0;
        org.apache.commons.collections4.map.ReferenceIdentityMap $r1;
        org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength $r2, $r3;

        r0 := @this: org.apache.commons.collections4.map.ReferenceIdentityMapTest;

        $r1 = new org.apache.commons.collections4.map.ReferenceIdentityMap;

        $r3 = <org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength: org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength WEAK>;

        $r2 = <org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength: org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength WEAK>;

        specialinvoke $r1.<org.apache.commons.collections4.map.ReferenceIdentityMap: void <init>(org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength,org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength)>($r3, $r2);

        return $r1;
    }

    public java.util.Map makeConfirmedMap()
    {
        org.apache.commons.collections4.map.ReferenceIdentityMapTest r0;
        org.apache.commons.collections4.map.IdentityMap $r1;

        r0 := @this: org.apache.commons.collections4.map.ReferenceIdentityMapTest;

        $r1 = new org.apache.commons.collections4.map.IdentityMap;

        specialinvoke $r1.<org.apache.commons.collections4.map.IdentityMap: void <init>()>();

        return $r1;
    }

    public boolean isAllowNullKey()
    {
        org.apache.commons.collections4.map.ReferenceIdentityMapTest r0;

        r0 := @this: org.apache.commons.collections4.map.ReferenceIdentityMapTest;

        return 0;
    }

    public boolean isAllowNullValue()
    {
        org.apache.commons.collections4.map.ReferenceIdentityMapTest r0;

        r0 := @this: org.apache.commons.collections4.map.ReferenceIdentityMapTest;

        return 0;
    }

    public java.lang.String getCompatibilityVersion()
    {
        org.apache.commons.collections4.map.ReferenceIdentityMapTest r0;

        r0 := @this: org.apache.commons.collections4.map.ReferenceIdentityMapTest;

        return "4";
    }

    public void testBasics()
    {
        org.apache.commons.collections4.map.ReferenceIdentityMapTest r0;
        org.apache.commons.collections4.map.ReferenceIdentityMap $r2;
        org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength $r3, $r4;
        int $i0, $i1, $i2, $i3;
        java.lang.Integer $r5, $r6, $r8, $r9, $r11, $r13, $r14, $r15, $r16, $r17, $r18, $r20, $r21, $r23, $r25, $r26, $r27, $r28, $r29, $r30, $r32, $r33, $r35, $r36, $r38, $r39, $r40, $r41;
        java.lang.Object $r10, $r12, $r22, $r24, $r34, $r37;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;

        r0 := @this: org.apache.commons.collections4.map.ReferenceIdentityMapTest;

        $r2 = new org.apache.commons.collections4.map.ReferenceIdentityMap;

        $r4 = <org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength: org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength HARD>;

        $r3 = <org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength: org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength HARD>;

        specialinvoke $r2.<org.apache.commons.collections4.map.ReferenceIdentityMap: void <init>(org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength,org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength)>($r4, $r3);

        $i0 = interfaceinvoke $r2.<org.apache.commons.collections4.IterableMap: int size()>();

        staticinvoke <org.apache.commons.collections4.map.ReferenceIdentityMapTest: void assertEquals(int,int)>(0, $i0);

        $r6 = <org.apache.commons.collections4.map.ReferenceIdentityMapTest: java.lang.Integer I1A>;

        $r5 = <org.apache.commons.collections4.map.ReferenceIdentityMapTest: java.lang.Integer I2A>;

        interfaceinvoke $r2.<org.apache.commons.collections4.IterableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r5);

        $i1 = interfaceinvoke $r2.<org.apache.commons.collections4.IterableMap: int size()>();

        staticinvoke <org.apache.commons.collections4.map.ReferenceIdentityMapTest: void assertEquals(int,int)>(1, $i1);

        $r9 = <org.apache.commons.collections4.map.ReferenceIdentityMapTest: java.lang.Integer I2A>;

        $r8 = <org.apache.commons.collections4.map.ReferenceIdentityMapTest: java.lang.Integer I1A>;

        $r10 = interfaceinvoke $r2.<org.apache.commons.collections4.IterableMap: java.lang.Object get(java.lang.Object)>($r8);

        staticinvoke <org.apache.commons.collections4.map.ReferenceIdentityMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r9, $r10);

        $r11 = <org.apache.commons.collections4.map.ReferenceIdentityMapTest: java.lang.Integer I1B>;

        $r12 = interfaceinvoke $r2.<org.apache.commons.collections4.IterableMap: java.lang.Object get(java.lang.Object)>($r11);

        staticinvoke <org.apache.commons.collections4.map.ReferenceIdentityMapTest: void assertSame(java.lang.Object,java.lang.Object)>(null, $r12);

        $r13 = <org.apache.commons.collections4.map.ReferenceIdentityMapTest: java.lang.Integer I1A>;

        $z0 = interfaceinvoke $r2.<org.apache.commons.collections4.IterableMap: boolean containsKey(java.lang.Object)>($r13);

        staticinvoke <org.apache.commons.collections4.map.ReferenceIdentityMapTest: void assertEquals(boolean,boolean)>(1, $z0);

        $r14 = <org.apache.commons.collections4.map.ReferenceIdentityMapTest: java.lang.Integer I1B>;

        $z1 = interfaceinvoke $r2.<org.apache.commons.collections4.IterableMap: boolean containsKey(java.lang.Object)>($r14);

        staticinvoke <org.apache.commons.collections4.map.ReferenceIdentityMapTest: void assertEquals(boolean,boolean)>(0, $z1);

        $r15 = <org.apache.commons.collections4.map.ReferenceIdentityMapTest: java.lang.Integer I2A>;

        $z2 = interfaceinvoke $r2.<org.apache.commons.collections4.IterableMap: boolean containsValue(java.lang.Object)>($r15);

        staticinvoke <org.apache.commons.collections4.map.ReferenceIdentityMapTest: void assertEquals(boolean,boolean)>(1, $z2);

        $r16 = <org.apache.commons.collections4.map.ReferenceIdentityMapTest: java.lang.Integer I2B>;

        $z3 = interfaceinvoke $r2.<org.apache.commons.collections4.IterableMap: boolean containsValue(java.lang.Object)>($r16);

        staticinvoke <org.apache.commons.collections4.map.ReferenceIdentityMapTest: void assertEquals(boolean,boolean)>(0, $z3);

        $r18 = <org.apache.commons.collections4.map.ReferenceIdentityMapTest: java.lang.Integer I1A>;

        $r17 = <org.apache.commons.collections4.map.ReferenceIdentityMapTest: java.lang.Integer I2B>;

        interfaceinvoke $r2.<org.apache.commons.collections4.IterableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, $r17);

        $i2 = interfaceinvoke $r2.<org.apache.commons.collections4.IterableMap: int size()>();

        staticinvoke <org.apache.commons.collections4.map.ReferenceIdentityMapTest: void assertEquals(int,int)>(1, $i2);

        $r21 = <org.apache.commons.collections4.map.ReferenceIdentityMapTest: java.lang.Integer I2B>;

        $r20 = <org.apache.commons.collections4.map.ReferenceIdentityMapTest: java.lang.Integer I1A>;

        $r22 = interfaceinvoke $r2.<org.apache.commons.collections4.IterableMap: java.lang.Object get(java.lang.Object)>($r20);

        staticinvoke <org.apache.commons.collections4.map.ReferenceIdentityMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r21, $r22);

        $r23 = <org.apache.commons.collections4.map.ReferenceIdentityMapTest: java.lang.Integer I1B>;

        $r24 = interfaceinvoke $r2.<org.apache.commons.collections4.IterableMap: java.lang.Object get(java.lang.Object)>($r23);

        staticinvoke <org.apache.commons.collections4.map.ReferenceIdentityMapTest: void assertSame(java.lang.Object,java.lang.Object)>(null, $r24);

        $r25 = <org.apache.commons.collections4.map.ReferenceIdentityMapTest: java.lang.Integer I1A>;

        $z4 = interfaceinvoke $r2.<org.apache.commons.collections4.IterableMap: boolean containsKey(java.lang.Object)>($r25);

        staticinvoke <org.apache.commons.collections4.map.ReferenceIdentityMapTest: void assertEquals(boolean,boolean)>(1, $z4);

        $r26 = <org.apache.commons.collections4.map.ReferenceIdentityMapTest: java.lang.Integer I1B>;

        $z5 = interfaceinvoke $r2.<org.apache.commons.collections4.IterableMap: boolean containsKey(java.lang.Object)>($r26);

        staticinvoke <org.apache.commons.collections4.map.ReferenceIdentityMapTest: void assertEquals(boolean,boolean)>(0, $z5);

        $r27 = <org.apache.commons.collections4.map.ReferenceIdentityMapTest: java.lang.Integer I2A>;

        $z6 = interfaceinvoke $r2.<org.apache.commons.collections4.IterableMap: boolean containsValue(java.lang.Object)>($r27);

        staticinvoke <org.apache.commons.collections4.map.ReferenceIdentityMapTest: void assertEquals(boolean,boolean)>(0, $z6);

        $r28 = <org.apache.commons.collections4.map.ReferenceIdentityMapTest: java.lang.Integer I2B>;

        $z7 = interfaceinvoke $r2.<org.apache.commons.collections4.IterableMap: boolean containsValue(java.lang.Object)>($r28);

        staticinvoke <org.apache.commons.collections4.map.ReferenceIdentityMapTest: void assertEquals(boolean,boolean)>(1, $z7);

        $r30 = <org.apache.commons.collections4.map.ReferenceIdentityMapTest: java.lang.Integer I1B>;

        $r29 = <org.apache.commons.collections4.map.ReferenceIdentityMapTest: java.lang.Integer I2B>;

        interfaceinvoke $r2.<org.apache.commons.collections4.IterableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r30, $r29);

        $i3 = interfaceinvoke $r2.<org.apache.commons.collections4.IterableMap: int size()>();

        staticinvoke <org.apache.commons.collections4.map.ReferenceIdentityMapTest: void assertEquals(int,int)>(2, $i3);

        $r33 = <org.apache.commons.collections4.map.ReferenceIdentityMapTest: java.lang.Integer I2B>;

        $r32 = <org.apache.commons.collections4.map.ReferenceIdentityMapTest: java.lang.Integer I1A>;

        $r34 = interfaceinvoke $r2.<org.apache.commons.collections4.IterableMap: java.lang.Object get(java.lang.Object)>($r32);

        staticinvoke <org.apache.commons.collections4.map.ReferenceIdentityMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r33, $r34);

        $r36 = <org.apache.commons.collections4.map.ReferenceIdentityMapTest: java.lang.Integer I2B>;

        $r35 = <org.apache.commons.collections4.map.ReferenceIdentityMapTest: java.lang.Integer I1B>;

        $r37 = interfaceinvoke $r2.<org.apache.commons.collections4.IterableMap: java.lang.Object get(java.lang.Object)>($r35);

        staticinvoke <org.apache.commons.collections4.map.ReferenceIdentityMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r36, $r37);

        $r38 = <org.apache.commons.collections4.map.ReferenceIdentityMapTest: java.lang.Integer I1A>;

        $z8 = interfaceinvoke $r2.<org.apache.commons.collections4.IterableMap: boolean containsKey(java.lang.Object)>($r38);

        staticinvoke <org.apache.commons.collections4.map.ReferenceIdentityMapTest: void assertEquals(boolean,boolean)>(1, $z8);

        $r39 = <org.apache.commons.collections4.map.ReferenceIdentityMapTest: java.lang.Integer I1B>;

        $z9 = interfaceinvoke $r2.<org.apache.commons.collections4.IterableMap: boolean containsKey(java.lang.Object)>($r39);

        staticinvoke <org.apache.commons.collections4.map.ReferenceIdentityMapTest: void assertEquals(boolean,boolean)>(1, $z9);

        $r40 = <org.apache.commons.collections4.map.ReferenceIdentityMapTest: java.lang.Integer I2A>;

        $z10 = interfaceinvoke $r2.<org.apache.commons.collections4.IterableMap: boolean containsValue(java.lang.Object)>($r40);

        staticinvoke <org.apache.commons.collections4.map.ReferenceIdentityMapTest: void assertEquals(boolean,boolean)>(0, $z10);

        $r41 = <org.apache.commons.collections4.map.ReferenceIdentityMapTest: java.lang.Integer I2B>;

        $z11 = interfaceinvoke $r2.<org.apache.commons.collections4.IterableMap: boolean containsValue(java.lang.Object)>($r41);

        staticinvoke <org.apache.commons.collections4.map.ReferenceIdentityMapTest: void assertEquals(boolean,boolean)>(1, $z11);

        return;
    }

    public void testHashEntry()
    {
        org.apache.commons.collections4.map.ReferenceIdentityMapTest r0;
        java.util.Map$Entry r2, r4, r5;
        java.util.Iterator r3, $r16;
        org.apache.commons.collections4.map.ReferenceIdentityMap $r6;
        org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength $r7, $r8;
        java.lang.Integer $r9, $r10, $r12, $r13;
        java.util.Set $r15, $r18;
        java.lang.Object $r17, $r19, $r20;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.commons.collections4.map.ReferenceIdentityMapTest;

        $r6 = new org.apache.commons.collections4.map.ReferenceIdentityMap;

        $r8 = <org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength: org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength HARD>;

        $r7 = <org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength: org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength HARD>;

        specialinvoke $r6.<org.apache.commons.collections4.map.ReferenceIdentityMap: void <init>(org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength,org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength)>($r8, $r7);

        $r10 = <org.apache.commons.collections4.map.ReferenceIdentityMapTest: java.lang.Integer I1A>;

        $r9 = <org.apache.commons.collections4.map.ReferenceIdentityMapTest: java.lang.Integer I2A>;

        interfaceinvoke $r6.<org.apache.commons.collections4.IterableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r9);

        $r13 = <org.apache.commons.collections4.map.ReferenceIdentityMapTest: java.lang.Integer I1B>;

        $r12 = <org.apache.commons.collections4.map.ReferenceIdentityMapTest: java.lang.Integer I2A>;

        interfaceinvoke $r6.<org.apache.commons.collections4.IterableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r12);

        $r15 = interfaceinvoke $r6.<org.apache.commons.collections4.IterableMap: java.util.Set entrySet()>();

        $r16 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();

        $r17 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.util.Map$Entry) $r17;

        $r18 = interfaceinvoke $r6.<org.apache.commons.collections4.IterableMap: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r18.<java.util.Set: java.util.Iterator iterator()>();

        $r19 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r19;

        $r20 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r20;

        $z0 = interfaceinvoke r2.<java.util.Map$Entry: boolean equals(java.lang.Object)>(r4);

        staticinvoke <org.apache.commons.collections4.map.ReferenceIdentityMapTest: void assertEquals(boolean,boolean)>(1, $z0);

        $z1 = interfaceinvoke r4.<java.util.Map$Entry: boolean equals(java.lang.Object)>(r2);

        staticinvoke <org.apache.commons.collections4.map.ReferenceIdentityMapTest: void assertEquals(boolean,boolean)>(1, $z1);

        $z2 = interfaceinvoke r2.<java.util.Map$Entry: boolean equals(java.lang.Object)>(r5);

        staticinvoke <org.apache.commons.collections4.map.ReferenceIdentityMapTest: void assertEquals(boolean,boolean)>(0, $z2);

        return;
    }

    public void testNullHandling()
    {
        org.apache.commons.collections4.map.ReferenceIdentityMapTest r0;
        org.apache.commons.collections4.IterableMap $r1, $r3, $r4, $r5, $r7, $r9, $r11, $r13, $r15, $r18;
        java.lang.Object $r2, $r6, $r16, $r19;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Set $r8, $r10;
        java.util.Collection $r12;
        java.lang.NullPointerException $r21, $r22, $r23;

        r0 := @this: org.apache.commons.collections4.map.ReferenceIdentityMapTest;

        virtualinvoke r0.<org.apache.commons.collections4.map.ReferenceIdentityMapTest: void resetFull()>();

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.map.ReferenceIdentityMapTest: org.apache.commons.collections4.IterableMap getMap()>();

        $r2 = interfaceinvoke $r1.<org.apache.commons.collections4.IterableMap: java.lang.Object get(java.lang.Object)>(null);

        staticinvoke <org.apache.commons.collections4.map.ReferenceIdentityMapTest: void assertEquals(java.lang.Object,java.lang.Object)>(null, $r2);

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.map.ReferenceIdentityMapTest: org.apache.commons.collections4.IterableMap getMap()>();

        $z0 = interfaceinvoke $r3.<org.apache.commons.collections4.IterableMap: boolean containsKey(java.lang.Object)>(null);

        staticinvoke <org.apache.commons.collections4.map.ReferenceIdentityMapTest: void assertEquals(boolean,boolean)>(0, $z0);

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.map.ReferenceIdentityMapTest: org.apache.commons.collections4.IterableMap getMap()>();

        $z1 = interfaceinvoke $r4.<org.apache.commons.collections4.IterableMap: boolean containsValue(java.lang.Object)>(null);

        staticinvoke <org.apache.commons.collections4.map.ReferenceIdentityMapTest: void assertEquals(boolean,boolean)>(0, $z1);

        $r5 = virtualinvoke r0.<org.apache.commons.collections4.map.ReferenceIdentityMapTest: org.apache.commons.collections4.IterableMap getMap()>();

        $r6 = interfaceinvoke $r5.<org.apache.commons.collections4.IterableMap: java.lang.Object remove(java.lang.Object)>(null);

        staticinvoke <org.apache.commons.collections4.map.ReferenceIdentityMapTest: void assertEquals(java.lang.Object,java.lang.Object)>(null, $r6);

        $r7 = virtualinvoke r0.<org.apache.commons.collections4.map.ReferenceIdentityMapTest: org.apache.commons.collections4.IterableMap getMap()>();

        $r8 = interfaceinvoke $r7.<org.apache.commons.collections4.IterableMap: java.util.Set entrySet()>();

        $z2 = interfaceinvoke $r8.<java.util.Set: boolean contains(java.lang.Object)>(null);

        staticinvoke <org.apache.commons.collections4.map.ReferenceIdentityMapTest: void assertEquals(boolean,boolean)>(0, $z2);

        $r9 = virtualinvoke r0.<org.apache.commons.collections4.map.ReferenceIdentityMapTest: org.apache.commons.collections4.IterableMap getMap()>();

        $r10 = interfaceinvoke $r9.<org.apache.commons.collections4.IterableMap: java.util.Set keySet()>();

        $z3 = interfaceinvoke $r10.<java.util.Set: boolean contains(java.lang.Object)>(null);

        staticinvoke <org.apache.commons.collections4.map.ReferenceIdentityMapTest: void assertEquals(boolean,boolean)>(0, $z3);

        $r11 = virtualinvoke r0.<org.apache.commons.collections4.map.ReferenceIdentityMapTest: org.apache.commons.collections4.IterableMap getMap()>();

        $r12 = interfaceinvoke $r11.<org.apache.commons.collections4.IterableMap: java.util.Collection values()>();

        $z4 = interfaceinvoke $r12.<java.util.Collection: boolean contains(java.lang.Object)>(null);

        staticinvoke <org.apache.commons.collections4.map.ReferenceIdentityMapTest: void assertEquals(boolean,boolean)>(0, $z4);

     label01:
        $r13 = virtualinvoke r0.<org.apache.commons.collections4.map.ReferenceIdentityMapTest: org.apache.commons.collections4.IterableMap getMap()>();

        interfaceinvoke $r13.<org.apache.commons.collections4.IterableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(null, null);

        staticinvoke <org.apache.commons.collections4.map.ReferenceIdentityMapTest: void fail()>();

     label02:
        goto label04;

     label03:
        $r23 := @caughtexception;

     label04:
        $r15 = virtualinvoke r0.<org.apache.commons.collections4.map.ReferenceIdentityMapTest: org.apache.commons.collections4.IterableMap getMap()>();

        $r16 = new java.lang.Object;

        specialinvoke $r16.<java.lang.Object: void <init>()>();

        interfaceinvoke $r15.<org.apache.commons.collections4.IterableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, null);

        staticinvoke <org.apache.commons.collections4.map.ReferenceIdentityMapTest: void fail()>();

     label05:
        goto label07;

     label06:
        $r21 := @caughtexception;

     label07:
        $r18 = virtualinvoke r0.<org.apache.commons.collections4.map.ReferenceIdentityMapTest: org.apache.commons.collections4.IterableMap getMap()>();

        $r19 = new java.lang.Object;

        specialinvoke $r19.<java.lang.Object: void <init>()>();

        interfaceinvoke $r18.<org.apache.commons.collections4.IterableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(null, $r19);

        staticinvoke <org.apache.commons.collections4.map.ReferenceIdentityMapTest: void fail()>();

     label08:
        goto label10;

     label09:
        $r22 := @caughtexception;

     label10:
        return;

        catch java.lang.NullPointerException from label01 to label02 with label03;
        catch java.lang.NullPointerException from label04 to label05 with label06;
        catch java.lang.NullPointerException from label07 to label08 with label09;
    }

    private java.util.Map buildRefMap()
    {
        org.apache.commons.collections4.map.ReferenceIdentityMapTest r0;
        java.lang.Object $r4, $r5, $r12, $r14, $r16;
        java.lang.ref.WeakReference $r6, $r7, $r13, $r15;
        org.apache.commons.collections4.map.ReferenceIdentityMap $r8;
        org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength $r9, $r10;

        r0 := @this: org.apache.commons.collections4.map.ReferenceIdentityMapTest;

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        $r6 = new java.lang.ref.WeakReference;

        specialinvoke $r6.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>($r4);

        r0.<org.apache.commons.collections4.map.ReferenceIdentityMapTest: java.lang.ref.WeakReference keyReference> = $r6;

        $r7 = new java.lang.ref.WeakReference;

        specialinvoke $r7.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>($r5);

        r0.<org.apache.commons.collections4.map.ReferenceIdentityMapTest: java.lang.ref.WeakReference valueReference> = $r7;

        $r8 = new org.apache.commons.collections4.map.ReferenceIdentityMap;

        $r10 = <org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength: org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength WEAK>;

        $r9 = <org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength: org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength HARD>;

        specialinvoke $r8.<org.apache.commons.collections4.map.ReferenceIdentityMap: void <init>(org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength,org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength,boolean)>($r10, $r9, 1);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r5);

        $r12 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        staticinvoke <org.apache.commons.collections4.map.ReferenceIdentityMapTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("In map", $r5, $r12);

        $r13 = r0.<org.apache.commons.collections4.map.ReferenceIdentityMapTest: java.lang.ref.WeakReference keyReference>;

        $r14 = virtualinvoke $r13.<java.lang.ref.WeakReference: java.lang.Object get()>();

        staticinvoke <org.apache.commons.collections4.map.ReferenceIdentityMapTest: void assertNotNull(java.lang.String,java.lang.Object)>("Weak reference released early (1)", $r14);

        $r15 = r0.<org.apache.commons.collections4.map.ReferenceIdentityMapTest: java.lang.ref.WeakReference valueReference>;

        $r16 = virtualinvoke $r15.<java.lang.ref.WeakReference: java.lang.Object get()>();

        staticinvoke <org.apache.commons.collections4.map.ReferenceIdentityMapTest: void assertNotNull(java.lang.String,java.lang.Object)>("Weak reference released early (2)", $r16);

        return $r8;
    }

    public void testPurgeValues() throws java.lang.Exception
    {
        org.apache.commons.collections4.map.ReferenceIdentityMapTest r0;
        java.util.Map r1;
        byte[] r2;
        int $i0, i1, i2;
        java.lang.ref.WeakReference $r3, $r5;
        java.lang.Object $r4, $r6;

        r0 := @this: org.apache.commons.collections4.map.ReferenceIdentityMapTest;

        r1 = specialinvoke r0.<org.apache.commons.collections4.map.ReferenceIdentityMapTest: java.util.Map buildRefMap()>();

        i1 = 0;

        i2 = 2;

     label1:
        staticinvoke <java.lang.System: void gc()>();

        $i0 = i1;

        i1 = i1 + 1;

        if $i0 <= 50 goto label2;

        staticinvoke <org.apache.commons.collections4.map.ReferenceIdentityMapTest: void fail(java.lang.String)>("Max iterations reached before resource released.");

     label2:
        interfaceinvoke r1.<java.util.Map: boolean isEmpty()>();

        $r3 = r0.<org.apache.commons.collections4.map.ReferenceIdentityMapTest: java.lang.ref.WeakReference keyReference>;

        $r4 = virtualinvoke $r3.<java.lang.ref.WeakReference: java.lang.Object get()>();

        if $r4 != null goto label3;

        $r5 = r0.<org.apache.commons.collections4.map.ReferenceIdentityMapTest: java.lang.ref.WeakReference valueReference>;

        $r6 = virtualinvoke $r5.<java.lang.ref.WeakReference: java.lang.Object get()>();

        if $r6 != null goto label3;

        goto label4;

     label3:
        r2 = newarray (byte)[i2];

        i2 = i2 * 2;

        goto label1;

     label4:
        return;
    }

    private static void gc()
    {
        java.lang.OutOfMemoryError $r0;
        byte[][] r1;

     label1:
        r1 = newmultiarray (byte)[1000000000][1000000000];

        staticinvoke <org.apache.commons.collections4.map.ReferenceIdentityMapTest: void fail(java.lang.String)>("you have too much RAM");

     label2:
        goto label4;

     label3:
        $r0 := @caughtexception;

        staticinvoke <java.lang.System: void gc()>();

     label4:
        return;

        catch java.lang.OutOfMemoryError from label1 to label2 with label3;
    }

    public volatile org.apache.commons.collections4.IterableMap makeObject()
    {
        org.apache.commons.collections4.map.ReferenceIdentityMapTest r0;
        org.apache.commons.collections4.map.ReferenceIdentityMap $r1;

        r0 := @this: org.apache.commons.collections4.map.ReferenceIdentityMapTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.map.ReferenceIdentityMapTest: org.apache.commons.collections4.map.ReferenceIdentityMap makeObject()>();

        return $r1;
    }

    public volatile java.util.Map makeObject()
    {
        org.apache.commons.collections4.map.ReferenceIdentityMapTest r0;
        org.apache.commons.collections4.map.ReferenceIdentityMap $r1;

        r0 := @this: org.apache.commons.collections4.map.ReferenceIdentityMapTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.map.ReferenceIdentityMapTest: org.apache.commons.collections4.map.ReferenceIdentityMap makeObject()>();

        return $r1;
    }

    public volatile java.lang.Object makeObject()
    {
        org.apache.commons.collections4.map.ReferenceIdentityMapTest r0;
        org.apache.commons.collections4.map.ReferenceIdentityMap $r1;

        r0 := @this: org.apache.commons.collections4.map.ReferenceIdentityMapTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.map.ReferenceIdentityMapTest: org.apache.commons.collections4.map.ReferenceIdentityMap makeObject()>();

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Integer $r0, $r1, $r2, $r3;

        $r0 = new java.lang.Integer;

        specialinvoke $r0.<java.lang.Integer: void <init>(int)>(1);

        <org.apache.commons.collections4.map.ReferenceIdentityMapTest: java.lang.Integer I1A> = $r0;

        $r1 = new java.lang.Integer;

        specialinvoke $r1.<java.lang.Integer: void <init>(int)>(1);

        <org.apache.commons.collections4.map.ReferenceIdentityMapTest: java.lang.Integer I1B> = $r1;

        $r2 = new java.lang.Integer;

        specialinvoke $r2.<java.lang.Integer: void <init>(int)>(2);

        <org.apache.commons.collections4.map.ReferenceIdentityMapTest: java.lang.Integer I2A> = $r2;

        $r3 = new java.lang.Integer;

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>(2);

        <org.apache.commons.collections4.map.ReferenceIdentityMapTest: java.lang.Integer I2B> = $r3;

        return;
    }
}
