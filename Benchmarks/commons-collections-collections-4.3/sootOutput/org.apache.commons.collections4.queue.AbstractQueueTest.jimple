public abstract class org.apache.commons.collections4.queue.AbstractQueueTest extends org.apache.commons.collections4.collection.AbstractCollectionTest
{

    public void <init>(java.lang.String)
    {
        org.apache.commons.collections4.queue.AbstractQueueTest r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.collections4.queue.AbstractQueueTest;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void <init>(java.lang.String)>(r1);

        return;
    }

    public boolean isSetSupported()
    {
        org.apache.commons.collections4.queue.AbstractQueueTest r0;

        r0 := @this: org.apache.commons.collections4.queue.AbstractQueueTest;

        return 1;
    }

    public void verify()
    {
        org.apache.commons.collections4.queue.AbstractQueueTest r0;
        java.util.Iterator r1, r2;
        java.lang.Object r3, r4;
        java.util.Queue $r6;
        java.util.Collection $r7;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.collections4.queue.AbstractQueueTest;

        specialinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

        $r6 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.util.Queue getCollection()>();

        r1 = interfaceinvoke $r6.<java.util.Queue: java.util.Iterator iterator()>();

        $r7 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.util.Collection getConfirmed()>();

        r2 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.queue.AbstractQueueTest: void assertTrue(boolean)>($z1);

        r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.queue.AbstractQueueTest: void assertEquals(java.lang.Object,java.lang.Object)>(r4, r3);

        goto label1;

     label2:
        return;
    }

    public java.util.Collection makeConfirmedCollection()
    {
        org.apache.commons.collections4.queue.AbstractQueueTest r0;
        java.util.ArrayList $r2;

        r0 := @this: org.apache.commons.collections4.queue.AbstractQueueTest;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        return $r2;
    }

    public java.util.Collection makeConfirmedFullCollection()
    {
        org.apache.commons.collections4.queue.AbstractQueueTest r0;
        java.util.ArrayList $r2;
        java.lang.Object[] $r3;
        java.util.List $r4;

        r0 := @this: org.apache.commons.collections4.queue.AbstractQueueTest;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.lang.Object[] getFullElements()>();

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        virtualinvoke $r2.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r4);

        return $r2;
    }

    public abstract java.util.Queue makeObject();

    public java.util.Queue makeFullCollection()
    {
        org.apache.commons.collections4.queue.AbstractQueueTest r0;
        java.util.Queue r1;
        java.lang.Object[] $r2;
        java.util.List $r3;

        r0 := @this: org.apache.commons.collections4.queue.AbstractQueueTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.util.Queue makeObject()>();

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.lang.Object[] getFullElements()>();

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        interfaceinvoke r1.<java.util.Queue: boolean addAll(java.util.Collection)>($r3);

        return r1;
    }

    public java.util.Queue getCollection()
    {
        org.apache.commons.collections4.queue.AbstractQueueTest r0;
        java.util.Collection $r1;
        java.util.Queue $r2;

        r0 := @this: org.apache.commons.collections4.queue.AbstractQueueTest;

        $r1 = specialinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $r2 = (java.util.Queue) $r1;

        return $r2;
    }

    public void testQueueOffer()
    {
        org.apache.commons.collections4.queue.AbstractQueueTest r0;
        java.lang.Object[] r1;
        boolean z0, $z1, $z3, z5;
        java.util.Queue $r2, $r4, $r5, $r6, $r8;
        java.util.Collection $r3, $r7;
        int $i0, $i1, i2, i3, i4, i5, i6;
        java.lang.Object r10, r12;

        r0 := @this: org.apache.commons.collections4.queue.AbstractQueueTest;

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: boolean isAddSupported()>();

        if $z1 != 0 goto label1;

        return;

     label1:
        r1 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.lang.Object[] getFullElements()>();

        i2 = lengthof r1;

        i3 = 0;

     label2:
        if i3 >= i2 goto label3;

        r10 = r1[i3];

        virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: void resetEmpty()>();

        $r6 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.util.Queue getCollection()>();

        z5 = interfaceinvoke $r6.<java.util.Queue: boolean offer(java.lang.Object)>(r10);

        $r7 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.util.Collection getConfirmed()>();

        interfaceinvoke $r7.<java.util.Collection: boolean add(java.lang.Object)>(r10);

        virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: void verify()>();

        staticinvoke <org.apache.commons.collections4.queue.AbstractQueueTest: void assertTrue(java.lang.String,boolean)>("Empty queue changed after add", z5);

        $r8 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.util.Queue getCollection()>();

        $i1 = interfaceinvoke $r8.<java.util.Queue: int size()>();

        staticinvoke <org.apache.commons.collections4.queue.AbstractQueueTest: void assertEquals(java.lang.String,int,int)>("Queue size is 1 after first add", 1, $i1);

        i3 = i3 + 1;

        goto label2;

     label3:
        virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: void resetEmpty()>();

        i4 = 0;

        i5 = lengthof r1;

        i6 = 0;

     label4:
        if i6 >= i5 goto label6;

        r12 = r1[i6];

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.util.Queue getCollection()>();

        z0 = interfaceinvoke $r2.<java.util.Queue: boolean offer(java.lang.Object)>(r12);

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.util.Collection getConfirmed()>();

        interfaceinvoke $r3.<java.util.Collection: boolean add(java.lang.Object)>(r12);

        virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: void verify()>();

        if z0 == 0 goto label5;

        i4 = i4 + 1;

     label5:
        $r4 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.util.Queue getCollection()>();

        $i0 = interfaceinvoke $r4.<java.util.Queue: int size()>();

        staticinvoke <org.apache.commons.collections4.queue.AbstractQueueTest: void assertEquals(java.lang.String,int,int)>("Queue size should grow after add", i4, $i0);

        $r5 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.util.Queue getCollection()>();

        $z3 = interfaceinvoke $r5.<java.util.Queue: boolean contains(java.lang.Object)>(r12);

        staticinvoke <org.apache.commons.collections4.queue.AbstractQueueTest: void assertTrue(java.lang.String,boolean)>("Queue should contain added element", $z3);

        i6 = i6 + 1;

        goto label4;

     label6:
        return;
    }

    public void testQueueElement()
    {
        org.apache.commons.collections4.queue.AbstractQueueTest r0;
        java.lang.Object r1, $r6;
        java.util.Queue $r2, $r5, $r8, $r10, $r12;
        java.util.Collection $r4, $r11, $r13;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object[] $r7;
        java.util.NoSuchElementException $r14, $r15;
        int i0, i1;

        r0 := @this: org.apache.commons.collections4.queue.AbstractQueueTest;

        virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: void resetEmpty()>();

     label01:
        $r2 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.util.Queue getCollection()>();

        interfaceinvoke $r2.<java.util.Queue: java.lang.Object element()>();

        staticinvoke <org.apache.commons.collections4.queue.AbstractQueueTest: void fail(java.lang.String)>("Queue.element should throw NoSuchElementException");

     label02:
        goto label04;

     label03:
        $r15 := @caughtexception;

     label04:
        virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: void resetFull()>();

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.util.Collection getConfirmed()>();

        $r5 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.util.Queue getCollection()>();

        $r6 = interfaceinvoke $r5.<java.util.Queue: java.lang.Object element()>();

        $z0 = interfaceinvoke $r4.<java.util.Collection: boolean contains(java.lang.Object)>($r6);

        staticinvoke <org.apache.commons.collections4.queue.AbstractQueueTest: void assertTrue(boolean)>($z0);

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: boolean isRemoveSupported()>();

        if $z1 != 0 goto label05;

        return;

     label05:
        $r7 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.lang.Object[] getFullElements()>();

        i0 = lengthof $r7;

        i1 = 0;

     label06:
        if i1 >= i0 goto label08;

        $r10 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.util.Queue getCollection()>();

        r1 = interfaceinvoke $r10.<java.util.Queue: java.lang.Object element()>();

        $z2 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: boolean isNullSupported()>();

        if $z2 != 0 goto label07;

        staticinvoke <org.apache.commons.collections4.queue.AbstractQueueTest: void assertNotNull(java.lang.Object)>(r1);

     label07:
        $r11 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.util.Collection getConfirmed()>();

        $z3 = interfaceinvoke $r11.<java.util.Collection: boolean contains(java.lang.Object)>(r1);

        staticinvoke <org.apache.commons.collections4.queue.AbstractQueueTest: void assertTrue(boolean)>($z3);

        $r12 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.util.Queue getCollection()>();

        interfaceinvoke $r12.<java.util.Queue: boolean remove(java.lang.Object)>(r1);

        $r13 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.util.Collection getConfirmed()>();

        interfaceinvoke $r13.<java.util.Collection: boolean remove(java.lang.Object)>(r1);

        virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: void verify()>();

        i1 = i1 + 1;

        goto label06;

     label08:
        $r8 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.util.Queue getCollection()>();

        interfaceinvoke $r8.<java.util.Queue: java.lang.Object element()>();

        staticinvoke <org.apache.commons.collections4.queue.AbstractQueueTest: void fail(java.lang.String)>("Queue.element should throw NoSuchElementException");

     label09:
        goto label11;

     label10:
        $r14 := @caughtexception;

     label11:
        return;

        catch java.util.NoSuchElementException from label01 to label02 with label03;
        catch java.util.NoSuchElementException from label08 to label09 with label10;
    }

    public void testQueuePeek()
    {
        org.apache.commons.collections4.queue.AbstractQueueTest r0;
        int i0, i1;
        boolean $z0, $z1, $z2;
        java.util.Queue $r1, $r3, $r4, $r6;
        java.lang.Object[] $r2;
        java.util.Collection $r5, $r7;
        java.lang.Object r8, r9, r10;

        r0 := @this: org.apache.commons.collections4.queue.AbstractQueueTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: boolean isRemoveSupported()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: void resetEmpty()>();

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.util.Queue getCollection()>();

        r8 = interfaceinvoke $r1.<java.util.Queue: java.lang.Object peek()>();

        staticinvoke <org.apache.commons.collections4.queue.AbstractQueueTest: void assertNull(java.lang.Object)>(r8);

        virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: void resetFull()>();

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.lang.Object[] getFullElements()>();

        i0 = lengthof $r2;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.util.Queue getCollection()>();

        r9 = interfaceinvoke $r4.<java.util.Queue: java.lang.Object peek()>();

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: boolean isNullSupported()>();

        if $z1 != 0 goto label3;

        staticinvoke <org.apache.commons.collections4.queue.AbstractQueueTest: void assertNotNull(java.lang.Object)>(r9);

     label3:
        $r5 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.util.Collection getConfirmed()>();

        $z2 = interfaceinvoke $r5.<java.util.Collection: boolean contains(java.lang.Object)>(r9);

        staticinvoke <org.apache.commons.collections4.queue.AbstractQueueTest: void assertTrue(boolean)>($z2);

        $r6 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.util.Queue getCollection()>();

        interfaceinvoke $r6.<java.util.Queue: boolean remove(java.lang.Object)>(r9);

        $r7 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.util.Collection getConfirmed()>();

        interfaceinvoke $r7.<java.util.Collection: boolean remove(java.lang.Object)>(r9);

        virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: void verify()>();

        i1 = i1 + 1;

        goto label2;

     label4:
        $r3 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.util.Queue getCollection()>();

        r10 = interfaceinvoke $r3.<java.util.Queue: java.lang.Object peek()>();

        staticinvoke <org.apache.commons.collections4.queue.AbstractQueueTest: void assertNull(java.lang.Object)>(r10);

        return;
    }

    public void testQueueRemove()
    {
        org.apache.commons.collections4.queue.AbstractQueueTest r0;
        java.lang.Object r1;
        boolean z0, $z1;
        java.util.Queue $r2, $r5, $r7;
        java.lang.Object[] $r4;
        java.util.Collection $r8;
        java.util.NoSuchElementException $r9, $r10;
        int i0, i1;

        r0 := @this: org.apache.commons.collections4.queue.AbstractQueueTest;

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: boolean isRemoveSupported()>();

        if $z1 != 0 goto label01;

        return;

     label01:
        virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: void resetEmpty()>();

     label02:
        $r2 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.util.Queue getCollection()>();

        interfaceinvoke $r2.<java.util.Queue: java.lang.Object remove()>();

        staticinvoke <org.apache.commons.collections4.queue.AbstractQueueTest: void fail(java.lang.String)>("Queue.remove should throw NoSuchElementException");

     label03:
        goto label05;

     label04:
        $r10 := @caughtexception;

     label05:
        virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: void resetFull()>();

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.lang.Object[] getFullElements()>();

        i0 = lengthof $r4;

        i1 = 0;

     label06:
        if i1 >= i0 goto label07;

        $r7 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.util.Queue getCollection()>();

        r1 = interfaceinvoke $r7.<java.util.Queue: java.lang.Object remove()>();

        $r8 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.util.Collection getConfirmed()>();

        z0 = interfaceinvoke $r8.<java.util.Collection: boolean remove(java.lang.Object)>(r1);

        staticinvoke <org.apache.commons.collections4.queue.AbstractQueueTest: void assertTrue(java.lang.String,boolean)>("remove should return correct element", z0);

        virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: void verify()>();

        i1 = i1 + 1;

        goto label06;

     label07:
        $r5 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.util.Queue getCollection()>();

        interfaceinvoke $r5.<java.util.Queue: java.lang.Object element()>();

        staticinvoke <org.apache.commons.collections4.queue.AbstractQueueTest: void fail(java.lang.String)>("Queue.remove should throw NoSuchElementException");

     label08:
        goto label10;

     label09:
        $r9 := @caughtexception;

     label10:
        return;

        catch java.util.NoSuchElementException from label02 to label03 with label04;
        catch java.util.NoSuchElementException from label07 to label08 with label09;
    }

    public void testQueuePoll()
    {
        org.apache.commons.collections4.queue.AbstractQueueTest r0;
        int i0, i1;
        boolean z0, $z1;
        java.util.Queue $r1, $r3, $r4;
        java.lang.Object[] $r2;
        java.util.Collection $r5;
        java.lang.Object r6, r7, r8;

        r0 := @this: org.apache.commons.collections4.queue.AbstractQueueTest;

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: boolean isRemoveSupported()>();

        if $z1 != 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: void resetEmpty()>();

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.util.Queue getCollection()>();

        r6 = interfaceinvoke $r1.<java.util.Queue: java.lang.Object poll()>();

        staticinvoke <org.apache.commons.collections4.queue.AbstractQueueTest: void assertNull(java.lang.Object)>(r6);

        virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: void resetFull()>();

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.lang.Object[] getFullElements()>();

        i0 = lengthof $r2;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.util.Queue getCollection()>();

        r7 = interfaceinvoke $r4.<java.util.Queue: java.lang.Object poll()>();

        $r5 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.util.Collection getConfirmed()>();

        z0 = interfaceinvoke $r5.<java.util.Collection: boolean remove(java.lang.Object)>(r7);

        staticinvoke <org.apache.commons.collections4.queue.AbstractQueueTest: void assertTrue(java.lang.String,boolean)>("poll should return correct element", z0);

        virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: void verify()>();

        i1 = i1 + 1;

        goto label2;

     label3:
        $r3 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.util.Queue getCollection()>();

        r8 = interfaceinvoke $r3.<java.util.Queue: java.lang.Object poll()>();

        staticinvoke <org.apache.commons.collections4.queue.AbstractQueueTest: void assertNull(java.lang.Object)>(r8);

        return;
    }

    public void testEmptyQueueSerialization() throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.commons.collections4.queue.AbstractQueueTest r0;
        java.util.Queue r1, r3;
        byte[] r2;
        boolean $z0, $z1;
        java.io.Serializable $r4;
        java.lang.Object $r5;
        int $i0, $i1;

        r0 := @this: org.apache.commons.collections4.queue.AbstractQueueTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.util.Queue makeObject()>();

        $z0 = r1 instanceof java.io.Serializable;

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: boolean isTestSerialization()>();

        if $z1 != 0 goto label2;

     label1:
        return;

     label2:
        $r4 = (java.io.Serializable) r1;

        r2 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: byte[] writeExternalFormToBytes(java.io.Serializable)>($r4);

        $r5 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.lang.Object readExternalFormFromBytes(byte[])>(r2);

        r3 = (java.util.Queue) $r5;

        $i0 = interfaceinvoke r1.<java.util.Queue: int size()>();

        staticinvoke <org.apache.commons.collections4.queue.AbstractQueueTest: void assertEquals(java.lang.String,int,int)>("Both queues are empty", 0, $i0);

        $i1 = interfaceinvoke r3.<java.util.Queue: int size()>();

        staticinvoke <org.apache.commons.collections4.queue.AbstractQueueTest: void assertEquals(java.lang.String,int,int)>("Both queues are empty", 0, $i1);

        return;
    }

    public void testFullQueueSerialization() throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.commons.collections4.queue.AbstractQueueTest r0;
        java.util.Queue r1, r3;
        int i0, $i1, $i2;
        byte[] r2;
        java.lang.Object[] $r4;
        boolean $z0, $z1;
        java.io.Serializable $r5;
        java.lang.Object $r6;

        r0 := @this: org.apache.commons.collections4.queue.AbstractQueueTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.util.Queue makeFullCollection()>();

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.lang.Object[] getFullElements()>();

        i0 = lengthof $r4;

        $z0 = r1 instanceof java.io.Serializable;

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: boolean isTestSerialization()>();

        if $z1 != 0 goto label2;

     label1:
        return;

     label2:
        $r5 = (java.io.Serializable) r1;

        r2 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: byte[] writeExternalFormToBytes(java.io.Serializable)>($r5);

        $r6 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.lang.Object readExternalFormFromBytes(byte[])>(r2);

        r3 = (java.util.Queue) $r6;

        $i1 = interfaceinvoke r1.<java.util.Queue: int size()>();

        staticinvoke <org.apache.commons.collections4.queue.AbstractQueueTest: void assertEquals(java.lang.String,int,int)>("Both queues are same size", i0, $i1);

        $i2 = interfaceinvoke r3.<java.util.Queue: int size()>();

        staticinvoke <org.apache.commons.collections4.queue.AbstractQueueTest: void assertEquals(java.lang.String,int,int)>("Both queues are same size", i0, $i2);

        return;
    }

    public void testEmptyQueueCompatibility() throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.commons.collections4.queue.AbstractQueueTest r0;
        java.util.Queue r1, r2;
        boolean $z0, $z1, $z2;
        java.lang.String $r3;
        java.lang.Object $r4;
        int $i0;

        r0 := @this: org.apache.commons.collections4.queue.AbstractQueueTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.util.Queue makeObject()>();

        $z0 = r1 instanceof java.io.Serializable;

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: boolean skipSerializedCanonicalTests()>();

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: boolean isTestSerialization()>();

        if $z2 == 0 goto label1;

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.lang.String getCanonicalEmptyCollectionName(java.lang.Object)>(r1);

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.lang.Object readExternalFormFromDisk(java.lang.String)>($r3);

        r2 = (java.util.Queue) $r4;

        $i0 = interfaceinvoke r2.<java.util.Queue: int size()>();

        staticinvoke <org.apache.commons.collections4.queue.AbstractQueueTest: void assertEquals(java.lang.String,int,int)>("Queue is empty", 0, $i0);

     label1:
        return;
    }

    public void testFullQueueCompatibility() throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.commons.collections4.queue.AbstractQueueTest r0;
        java.util.Queue r1, r2;
        boolean $z0, $z1, $z2;
        java.lang.String $r3;
        java.lang.Object $r4;
        int $i0, $i1;

        r0 := @this: org.apache.commons.collections4.queue.AbstractQueueTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.util.Queue makeFullCollection()>();

        $z0 = r1 instanceof java.io.Serializable;

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: boolean skipSerializedCanonicalTests()>();

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: boolean isTestSerialization()>();

        if $z2 == 0 goto label1;

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.lang.String getCanonicalFullCollectionName(java.lang.Object)>(r1);

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.lang.Object readExternalFormFromDisk(java.lang.String)>($r3);

        r2 = (java.util.Queue) $r4;

        $i0 = interfaceinvoke r1.<java.util.Queue: int size()>();

        $i1 = interfaceinvoke r2.<java.util.Queue: int size()>();

        staticinvoke <org.apache.commons.collections4.queue.AbstractQueueTest: void assertEquals(java.lang.String,int,int)>("Queues are not the right size", $i0, $i1);

     label1:
        return;
    }

    public volatile java.util.Collection getCollection()
    {
        org.apache.commons.collections4.queue.AbstractQueueTest r0;
        java.util.Queue $r1;

        r0 := @this: org.apache.commons.collections4.queue.AbstractQueueTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.util.Queue getCollection()>();

        return $r1;
    }

    public volatile java.util.Collection makeFullCollection()
    {
        org.apache.commons.collections4.queue.AbstractQueueTest r0;
        java.util.Queue $r1;

        r0 := @this: org.apache.commons.collections4.queue.AbstractQueueTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.util.Queue makeFullCollection()>();

        return $r1;
    }

    public volatile java.util.Collection makeObject()
    {
        org.apache.commons.collections4.queue.AbstractQueueTest r0;
        java.util.Queue $r1;

        r0 := @this: org.apache.commons.collections4.queue.AbstractQueueTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.util.Queue makeObject()>();

        return $r1;
    }

    public volatile java.lang.Object makeObject()
    {
        org.apache.commons.collections4.queue.AbstractQueueTest r0;
        java.util.Queue $r1;

        r0 := @this: org.apache.commons.collections4.queue.AbstractQueueTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.queue.AbstractQueueTest: java.util.Queue makeObject()>();

        return $r1;
    }
}
