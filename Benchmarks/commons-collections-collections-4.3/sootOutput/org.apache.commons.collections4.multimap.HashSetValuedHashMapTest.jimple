public class org.apache.commons.collections4.multimap.HashSetValuedHashMapTest extends org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest
{

    public void <init>(java.lang.String)
    {
        org.apache.commons.collections4.multimap.HashSetValuedHashMapTest r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.collections4.multimap.HashSetValuedHashMapTest;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void <init>(java.lang.String)>(r1);

        return;
    }

    public static junit.framework.Test suite()
    {
        junit.framework.TestSuite $r0;

        $r0 = staticinvoke <org.apache.commons.collections4.BulkTest: junit.framework.TestSuite makeSuite(java.lang.Class)>(class "Lorg/apache/commons/collections4/multimap/HashSetValuedHashMapTest;");

        return $r0;
    }

    public org.apache.commons.collections4.SetValuedMap makeObject()
    {
        org.apache.commons.collections4.multimap.HashSetValuedHashMapTest r0;
        org.apache.commons.collections4.multimap.HashSetValuedHashMap $r1;

        r0 := @this: org.apache.commons.collections4.multimap.HashSetValuedHashMapTest;

        $r1 = new org.apache.commons.collections4.multimap.HashSetValuedHashMap;

        specialinvoke $r1.<org.apache.commons.collections4.multimap.HashSetValuedHashMap: void <init>()>();

        return $r1;
    }

    public org.apache.commons.collections4.MultiValuedMap makeConfirmedMap()
    {
        org.apache.commons.collections4.multimap.HashSetValuedHashMapTest r0;
        org.apache.commons.collections4.multimap.HashSetValuedHashMap $r1;

        r0 := @this: org.apache.commons.collections4.multimap.HashSetValuedHashMapTest;

        $r1 = new org.apache.commons.collections4.multimap.HashSetValuedHashMap;

        specialinvoke $r1.<org.apache.commons.collections4.multimap.HashSetValuedHashMap: void <init>()>();

        return $r1;
    }

    public void testSetValuedMapAdd()
    {
        org.apache.commons.collections4.multimap.HashSetValuedHashMapTest r0;
        org.apache.commons.collections4.SetValuedMap r1;
        java.util.Set r2, $r3;
        boolean $z0, $z1, $z2, $z3, $z4;
        int $i0;

        r0 := @this: org.apache.commons.collections4.multimap.HashSetValuedHashMapTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.HashSetValuedHashMapTest: org.apache.commons.collections4.SetValuedMap makeObject()>();

        $r3 = interfaceinvoke r1.<org.apache.commons.collections4.SetValuedMap: java.util.Set get(java.lang.Object)>("whatever");

        $z0 = $r3 instanceof java.util.Set;

        staticinvoke <org.apache.commons.collections4.multimap.HashSetValuedHashMapTest: void assertTrue(boolean)>($z0);

        r2 = interfaceinvoke r1.<org.apache.commons.collections4.SetValuedMap: java.util.Set get(java.lang.Object)>("A");

        $z1 = interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>("a1");

        staticinvoke <org.apache.commons.collections4.multimap.HashSetValuedHashMapTest: void assertTrue(boolean)>($z1);

        $z2 = interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>("a2");

        staticinvoke <org.apache.commons.collections4.multimap.HashSetValuedHashMapTest: void assertTrue(boolean)>($z2);

        $z3 = interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>("a1");

        staticinvoke <org.apache.commons.collections4.multimap.HashSetValuedHashMapTest: void assertFalse(boolean)>($z3);

        $i0 = interfaceinvoke r1.<org.apache.commons.collections4.SetValuedMap: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.HashSetValuedHashMapTest: void assertEquals(int,int)>(2, $i0);

        $z4 = interfaceinvoke r1.<org.apache.commons.collections4.SetValuedMap: boolean containsKey(java.lang.Object)>("A");

        staticinvoke <org.apache.commons.collections4.multimap.HashSetValuedHashMapTest: void assertTrue(boolean)>($z4);

        return;
    }

    public void testSetValuedMapRemove()
    {
        org.apache.commons.collections4.multimap.HashSetValuedHashMapTest r0;
        org.apache.commons.collections4.SetValuedMap r1;
        java.util.Set r2, $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        int $i0, $i1;

        r0 := @this: org.apache.commons.collections4.multimap.HashSetValuedHashMapTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.HashSetValuedHashMapTest: org.apache.commons.collections4.SetValuedMap makeObject()>();

        $r3 = interfaceinvoke r1.<org.apache.commons.collections4.SetValuedMap: java.util.Set get(java.lang.Object)>("whatever");

        $z0 = $r3 instanceof java.util.Set;

        staticinvoke <org.apache.commons.collections4.multimap.HashSetValuedHashMapTest: void assertTrue(boolean)>($z0);

        r2 = interfaceinvoke r1.<org.apache.commons.collections4.SetValuedMap: java.util.Set get(java.lang.Object)>("A");

        $z1 = interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>("a1");

        staticinvoke <org.apache.commons.collections4.multimap.HashSetValuedHashMapTest: void assertTrue(boolean)>($z1);

        $z2 = interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>("a2");

        staticinvoke <org.apache.commons.collections4.multimap.HashSetValuedHashMapTest: void assertTrue(boolean)>($z2);

        $z3 = interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>("a1");

        staticinvoke <org.apache.commons.collections4.multimap.HashSetValuedHashMapTest: void assertFalse(boolean)>($z3);

        $i0 = interfaceinvoke r1.<org.apache.commons.collections4.SetValuedMap: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.HashSetValuedHashMapTest: void assertEquals(int,int)>(2, $i0);

        $z4 = interfaceinvoke r1.<org.apache.commons.collections4.SetValuedMap: boolean containsKey(java.lang.Object)>("A");

        staticinvoke <org.apache.commons.collections4.multimap.HashSetValuedHashMapTest: void assertTrue(boolean)>($z4);

        $z5 = interfaceinvoke r2.<java.util.Set: boolean remove(java.lang.Object)>("a1");

        staticinvoke <org.apache.commons.collections4.multimap.HashSetValuedHashMapTest: void assertTrue(boolean)>($z5);

        $z6 = interfaceinvoke r2.<java.util.Set: boolean remove(java.lang.Object)>("a2");

        staticinvoke <org.apache.commons.collections4.multimap.HashSetValuedHashMapTest: void assertTrue(boolean)>($z6);

        $z7 = interfaceinvoke r2.<java.util.Set: boolean remove(java.lang.Object)>("a1");

        staticinvoke <org.apache.commons.collections4.multimap.HashSetValuedHashMapTest: void assertFalse(boolean)>($z7);

        $i1 = interfaceinvoke r1.<org.apache.commons.collections4.SetValuedMap: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.HashSetValuedHashMapTest: void assertEquals(int,int)>(0, $i1);

        $z8 = interfaceinvoke r1.<org.apache.commons.collections4.SetValuedMap: boolean containsKey(java.lang.Object)>("A");

        staticinvoke <org.apache.commons.collections4.multimap.HashSetValuedHashMapTest: void assertFalse(boolean)>($z8);

        return;
    }

    public void testSetValuedMapRemoveViaIterator()
    {
        org.apache.commons.collections4.multimap.HashSetValuedHashMapTest r0;
        org.apache.commons.collections4.SetValuedMap r1;
        java.util.Set r2, $r4;
        java.util.Iterator r3;
        boolean $z0, $z4, $z5;
        int $i0;

        r0 := @this: org.apache.commons.collections4.multimap.HashSetValuedHashMapTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.HashSetValuedHashMapTest: org.apache.commons.collections4.SetValuedMap makeObject()>();

        $r4 = interfaceinvoke r1.<org.apache.commons.collections4.SetValuedMap: java.util.Set get(java.lang.Object)>("whatever");

        $z0 = $r4 instanceof java.util.Set;

        staticinvoke <org.apache.commons.collections4.multimap.HashSetValuedHashMapTest: void assertTrue(boolean)>($z0);

        r2 = interfaceinvoke r1.<org.apache.commons.collections4.SetValuedMap: java.util.Set get(java.lang.Object)>("A");

        interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>("a1");

        interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>("a2");

        interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>("a1");

        r3 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z4 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label2;

        interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke r3.<java.util.Iterator: void remove()>();

        goto label1;

     label2:
        $i0 = interfaceinvoke r1.<org.apache.commons.collections4.SetValuedMap: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.HashSetValuedHashMapTest: void assertEquals(int,int)>(0, $i0);

        $z5 = interfaceinvoke r1.<org.apache.commons.collections4.SetValuedMap: boolean containsKey(java.lang.Object)>("A");

        staticinvoke <org.apache.commons.collections4.multimap.HashSetValuedHashMapTest: void assertFalse(boolean)>($z5);

        return;
    }

    public void testSetValuedMapEqualsHashCodeContract()
    {
        org.apache.commons.collections4.multimap.HashSetValuedHashMapTest r0;
        org.apache.commons.collections4.SetValuedMap r1, r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Integer $r3, $r4;

        r0 := @this: org.apache.commons.collections4.multimap.HashSetValuedHashMapTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.HashSetValuedHashMapTest: org.apache.commons.collections4.SetValuedMap makeObject()>();

        r2 = virtualinvoke r0.<org.apache.commons.collections4.multimap.HashSetValuedHashMapTest: org.apache.commons.collections4.SetValuedMap makeObject()>();

        interfaceinvoke r1.<org.apache.commons.collections4.SetValuedMap: boolean put(java.lang.Object,java.lang.Object)>("a", "a1");

        interfaceinvoke r1.<org.apache.commons.collections4.SetValuedMap: boolean put(java.lang.Object,java.lang.Object)>("a", "a2");

        interfaceinvoke r2.<org.apache.commons.collections4.SetValuedMap: boolean put(java.lang.Object,java.lang.Object)>("a", "a2");

        interfaceinvoke r2.<org.apache.commons.collections4.SetValuedMap: boolean put(java.lang.Object,java.lang.Object)>("a", "a1");

        staticinvoke <org.apache.commons.collections4.multimap.HashSetValuedHashMapTest: void assertEquals(java.lang.Object,java.lang.Object)>(r1, r2);

        $i0 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        $i1 = virtualinvoke r2.<java.lang.Object: int hashCode()>();

        staticinvoke <org.apache.commons.collections4.multimap.HashSetValuedHashMapTest: void assertEquals(int,int)>($i0, $i1);

        interfaceinvoke r2.<org.apache.commons.collections4.SetValuedMap: boolean put(java.lang.Object,java.lang.Object)>("a", "a2");

        staticinvoke <org.apache.commons.collections4.multimap.HashSetValuedHashMapTest: void assertEquals(java.lang.Object,java.lang.Object)>(r1, r2);

        $i2 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        $i3 = virtualinvoke r2.<java.lang.Object: int hashCode()>();

        staticinvoke <org.apache.commons.collections4.multimap.HashSetValuedHashMapTest: void assertEquals(int,int)>($i2, $i3);

        interfaceinvoke r2.<org.apache.commons.collections4.SetValuedMap: boolean put(java.lang.Object,java.lang.Object)>("a", "a3");

        staticinvoke <org.apache.commons.collections4.multimap.HashSetValuedHashMapTest: void assertNotSame(java.lang.Object,java.lang.Object)>(r1, r2);

        $i4 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $i5 = virtualinvoke r2.<java.lang.Object: int hashCode()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        staticinvoke <org.apache.commons.collections4.multimap.HashSetValuedHashMapTest: void assertNotSame(java.lang.Object,java.lang.Object)>($r3, $r4);

        return;
    }

    public volatile org.apache.commons.collections4.MultiValuedMap makeObject()
    {
        org.apache.commons.collections4.multimap.HashSetValuedHashMapTest r0;
        org.apache.commons.collections4.SetValuedMap $r1;

        r0 := @this: org.apache.commons.collections4.multimap.HashSetValuedHashMapTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.HashSetValuedHashMapTest: org.apache.commons.collections4.SetValuedMap makeObject()>();

        return $r1;
    }

    public volatile java.lang.Object makeObject()
    {
        org.apache.commons.collections4.multimap.HashSetValuedHashMapTest r0;
        org.apache.commons.collections4.SetValuedMap $r1;

        r0 := @this: org.apache.commons.collections4.multimap.HashSetValuedHashMapTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.HashSetValuedHashMapTest: org.apache.commons.collections4.SetValuedMap makeObject()>();

        return $r1;
    }
}
