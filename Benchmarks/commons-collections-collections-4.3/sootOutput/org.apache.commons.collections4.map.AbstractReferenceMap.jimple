public abstract class org.apache.commons.collections4.map.AbstractReferenceMap extends org.apache.commons.collections4.map.AbstractHashedMap
{
    private org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength keyType;
    private org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength valueType;
    private boolean purgeValues;
    private transient java.lang.ref.ReferenceQueue queue;

    protected void <init>()
    {
        org.apache.commons.collections4.map.AbstractReferenceMap r0;

        r0 := @this: org.apache.commons.collections4.map.AbstractReferenceMap;

        specialinvoke r0.<org.apache.commons.collections4.map.AbstractHashedMap: void <init>()>();

        return;
    }

    protected void <init>(org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength, org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength, int, float, boolean)
    {
        org.apache.commons.collections4.map.AbstractReferenceMap r0;
        org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength r1, r2;
        int i0;
        float f0;
        boolean z0;

        r0 := @this: org.apache.commons.collections4.map.AbstractReferenceMap;

        r1 := @parameter0: org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength;

        r2 := @parameter1: org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength;

        i0 := @parameter2: int;

        f0 := @parameter3: float;

        z0 := @parameter4: boolean;

        specialinvoke r0.<org.apache.commons.collections4.map.AbstractHashedMap: void <init>(int,float)>(i0, f0);

        r0.<org.apache.commons.collections4.map.AbstractReferenceMap: org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength keyType> = r1;

        r0.<org.apache.commons.collections4.map.AbstractReferenceMap: org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength valueType> = r2;

        r0.<org.apache.commons.collections4.map.AbstractReferenceMap: boolean purgeValues> = z0;

        return;
    }

    protected void init()
    {
        org.apache.commons.collections4.map.AbstractReferenceMap r0;
        java.lang.ref.ReferenceQueue $r1;

        r0 := @this: org.apache.commons.collections4.map.AbstractReferenceMap;

        $r1 = new java.lang.ref.ReferenceQueue;

        specialinvoke $r1.<java.lang.ref.ReferenceQueue: void <init>()>();

        r0.<org.apache.commons.collections4.map.AbstractReferenceMap: java.lang.ref.ReferenceQueue queue> = $r1;

        return;
    }

    public int size()
    {
        org.apache.commons.collections4.map.AbstractReferenceMap r0;
        int $i0;

        r0 := @this: org.apache.commons.collections4.map.AbstractReferenceMap;

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractReferenceMap: void purgeBeforeRead()>();

        $i0 = specialinvoke r0.<org.apache.commons.collections4.map.AbstractHashedMap: int size()>();

        return $i0;
    }

    public boolean isEmpty()
    {
        org.apache.commons.collections4.map.AbstractReferenceMap r0;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.map.AbstractReferenceMap;

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractReferenceMap: void purgeBeforeRead()>();

        $z0 = specialinvoke r0.<org.apache.commons.collections4.map.AbstractHashedMap: boolean isEmpty()>();

        return $z0;
    }

    public boolean containsKey(java.lang.Object)
    {
        org.apache.commons.collections4.map.AbstractReferenceMap r0;
        java.lang.Object r1, $r3;
        org.apache.commons.collections4.map.AbstractHashedMap$HashEntry r2;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.map.AbstractReferenceMap;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractReferenceMap: void purgeBeforeRead()>();

        r2 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractReferenceMap: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry getEntry(java.lang.Object)>(r1);

        if r2 != null goto label1;

        return 0;

     label1:
        $r3 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        if $r3 == null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean containsValue(java.lang.Object)
    {
        org.apache.commons.collections4.map.AbstractReferenceMap r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.map.AbstractReferenceMap;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractReferenceMap: void purgeBeforeRead()>();

        if r1 != null goto label1;

        return 0;

     label1:
        $z0 = specialinvoke r0.<org.apache.commons.collections4.map.AbstractHashedMap: boolean containsValue(java.lang.Object)>(r1);

        return $z0;
    }

    public java.lang.Object get(java.lang.Object)
    {
        org.apache.commons.collections4.map.AbstractReferenceMap r0;
        java.lang.Object r1, $r3;
        org.apache.commons.collections4.map.AbstractHashedMap$HashEntry r2;

        r0 := @this: org.apache.commons.collections4.map.AbstractReferenceMap;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractReferenceMap: void purgeBeforeRead()>();

        r2 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractReferenceMap: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry getEntry(java.lang.Object)>(r1);

        if r2 != null goto label1;

        return null;

     label1:
        $r3 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        return $r3;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections4.map.AbstractReferenceMap r0;
        java.lang.Object r1, r2, $r3;
        java.lang.NullPointerException $r4, $r5;

        r0 := @this: org.apache.commons.collections4.map.AbstractReferenceMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        if r1 != null goto label1;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("null keys not allowed");

        throw $r5;

     label1:
        if r2 != null goto label2;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("null values not allowed");

        throw $r4;

     label2:
        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractReferenceMap: void purgeBeforeWrite()>();

        $r3 = specialinvoke r0.<org.apache.commons.collections4.map.AbstractHashedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return $r3;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        org.apache.commons.collections4.map.AbstractReferenceMap r0;
        java.lang.Object r1, $r2;

        r0 := @this: org.apache.commons.collections4.map.AbstractReferenceMap;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        return null;

     label1:
        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractReferenceMap: void purgeBeforeWrite()>();

        $r2 = specialinvoke r0.<org.apache.commons.collections4.map.AbstractHashedMap: java.lang.Object remove(java.lang.Object)>(r1);

        return $r2;
    }

    public void clear()
    {
        org.apache.commons.collections4.map.AbstractReferenceMap r0;
        java.lang.ref.ReferenceQueue $r1;
        java.lang.ref.Reference $r2;

        r0 := @this: org.apache.commons.collections4.map.AbstractReferenceMap;

        specialinvoke r0.<org.apache.commons.collections4.map.AbstractHashedMap: void clear()>();

     label1:
        $r1 = r0.<org.apache.commons.collections4.map.AbstractReferenceMap: java.lang.ref.ReferenceQueue queue>;

        $r2 = virtualinvoke $r1.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>();

        if $r2 == null goto label2;

        goto label1;

     label2:
        return;
    }

    public org.apache.commons.collections4.MapIterator mapIterator()
    {
        org.apache.commons.collections4.map.AbstractReferenceMap r0;
        org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceMapIterator $r1;

        r0 := @this: org.apache.commons.collections4.map.AbstractReferenceMap;

        $r1 = new org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceMapIterator;

        specialinvoke $r1.<org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceMapIterator: void <init>(org.apache.commons.collections4.map.AbstractReferenceMap)>(r0);

        return $r1;
    }

    public java.util.Set entrySet()
    {
        org.apache.commons.collections4.map.AbstractReferenceMap r0;
        org.apache.commons.collections4.map.AbstractHashedMap$EntrySet $r1, $r2;
        org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntrySet $r3;

        r0 := @this: org.apache.commons.collections4.map.AbstractReferenceMap;

        $r1 = r0.<org.apache.commons.collections4.map.AbstractReferenceMap: org.apache.commons.collections4.map.AbstractHashedMap$EntrySet entrySet>;

        if $r1 != null goto label1;

        $r3 = new org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntrySet;

        specialinvoke $r3.<org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntrySet: void <init>(org.apache.commons.collections4.map.AbstractHashedMap)>(r0);

        r0.<org.apache.commons.collections4.map.AbstractReferenceMap: org.apache.commons.collections4.map.AbstractHashedMap$EntrySet entrySet> = $r3;

     label1:
        $r2 = r0.<org.apache.commons.collections4.map.AbstractReferenceMap: org.apache.commons.collections4.map.AbstractHashedMap$EntrySet entrySet>;

        return $r2;
    }

    public java.util.Set keySet()
    {
        org.apache.commons.collections4.map.AbstractReferenceMap r0;
        org.apache.commons.collections4.map.AbstractHashedMap$KeySet $r1, $r2;
        org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceKeySet $r3;

        r0 := @this: org.apache.commons.collections4.map.AbstractReferenceMap;

        $r1 = r0.<org.apache.commons.collections4.map.AbstractReferenceMap: org.apache.commons.collections4.map.AbstractHashedMap$KeySet keySet>;

        if $r1 != null goto label1;

        $r3 = new org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceKeySet;

        specialinvoke $r3.<org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceKeySet: void <init>(org.apache.commons.collections4.map.AbstractHashedMap)>(r0);

        r0.<org.apache.commons.collections4.map.AbstractReferenceMap: org.apache.commons.collections4.map.AbstractHashedMap$KeySet keySet> = $r3;

     label1:
        $r2 = r0.<org.apache.commons.collections4.map.AbstractReferenceMap: org.apache.commons.collections4.map.AbstractHashedMap$KeySet keySet>;

        return $r2;
    }

    public java.util.Collection values()
    {
        org.apache.commons.collections4.map.AbstractReferenceMap r0;
        org.apache.commons.collections4.map.AbstractHashedMap$Values $r1, $r2;
        org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceValues $r3;

        r0 := @this: org.apache.commons.collections4.map.AbstractReferenceMap;

        $r1 = r0.<org.apache.commons.collections4.map.AbstractReferenceMap: org.apache.commons.collections4.map.AbstractHashedMap$Values values>;

        if $r1 != null goto label1;

        $r3 = new org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceValues;

        specialinvoke $r3.<org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceValues: void <init>(org.apache.commons.collections4.map.AbstractHashedMap)>(r0);

        r0.<org.apache.commons.collections4.map.AbstractReferenceMap: org.apache.commons.collections4.map.AbstractHashedMap$Values values> = $r3;

     label1:
        $r2 = r0.<org.apache.commons.collections4.map.AbstractReferenceMap: org.apache.commons.collections4.map.AbstractHashedMap$Values values>;

        return $r2;
    }

    protected void purgeBeforeRead()
    {
        org.apache.commons.collections4.map.AbstractReferenceMap r0;

        r0 := @this: org.apache.commons.collections4.map.AbstractReferenceMap;

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractReferenceMap: void purge()>();

        return;
    }

    protected void purgeBeforeWrite()
    {
        org.apache.commons.collections4.map.AbstractReferenceMap r0;

        r0 := @this: org.apache.commons.collections4.map.AbstractReferenceMap;

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractReferenceMap: void purge()>();

        return;
    }

    protected void purge()
    {
        org.apache.commons.collections4.map.AbstractReferenceMap r0;
        java.lang.ref.ReferenceQueue $r1, $r2;
        java.lang.ref.Reference r3;

        r0 := @this: org.apache.commons.collections4.map.AbstractReferenceMap;

        $r1 = r0.<org.apache.commons.collections4.map.AbstractReferenceMap: java.lang.ref.ReferenceQueue queue>;

        r3 = virtualinvoke $r1.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>();

     label1:
        if r3 == null goto label2;

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractReferenceMap: void purge(java.lang.ref.Reference)>(r3);

        $r2 = r0.<org.apache.commons.collections4.map.AbstractReferenceMap: java.lang.ref.ReferenceQueue queue>;

        r3 = virtualinvoke $r2.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>();

        goto label1;

     label2:
        return;
    }

    protected void purge(java.lang.ref.Reference)
    {
        org.apache.commons.collections4.map.AbstractReferenceMap r0;
        java.lang.ref.Reference r1;
        int i0, i1, $i2, $i3, $i4;
        org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntry r2;
        org.apache.commons.collections4.map.AbstractHashedMap$HashEntry[] $r3, $r4, $r7;
        boolean $z0;
        org.apache.commons.collections4.map.AbstractHashedMap$HashEntry $r5, $r6, r9, r10;

        r0 := @this: org.apache.commons.collections4.map.AbstractReferenceMap;

        r1 := @parameter0: java.lang.ref.Reference;

        i0 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        $r3 = r0.<org.apache.commons.collections4.map.AbstractReferenceMap: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry[] data>;

        $i2 = lengthof $r3;

        i1 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractReferenceMap: int hashIndex(int,int)>(i0, $i2);

        r9 = null;

        $r4 = r0.<org.apache.commons.collections4.map.AbstractReferenceMap: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry[] data>;

        r10 = $r4[i1];

     label1:
        if r10 == null goto label5;

        r2 = (org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntry) r10;

        $z0 = virtualinvoke r2.<org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntry: boolean purge(java.lang.ref.Reference)>(r1);

        if $z0 == 0 goto label4;

        if r9 != null goto label2;

        $r7 = r0.<org.apache.commons.collections4.map.AbstractReferenceMap: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry[] data>;

        $r6 = r10.<org.apache.commons.collections4.map.AbstractHashedMap$HashEntry: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry next>;

        $r7[i1] = $r6;

        goto label3;

     label2:
        $r5 = r10.<org.apache.commons.collections4.map.AbstractHashedMap$HashEntry: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry next>;

        r9.<org.apache.commons.collections4.map.AbstractHashedMap$HashEntry: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry next> = $r5;

     label3:
        $i3 = r0.<org.apache.commons.collections4.map.AbstractReferenceMap: int size>;

        $i4 = $i3 - 1;

        r0.<org.apache.commons.collections4.map.AbstractReferenceMap: int size> = $i4;

        virtualinvoke r2.<org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntry: void onPurge()>();

        return;

     label4:
        r9 = r10;

        r10 = r10.<org.apache.commons.collections4.map.AbstractHashedMap$HashEntry: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry next>;

        goto label1;

     label5:
        return;
    }

    protected org.apache.commons.collections4.map.AbstractHashedMap$HashEntry getEntry(java.lang.Object)
    {
        org.apache.commons.collections4.map.AbstractReferenceMap r0;
        java.lang.Object r1;
        org.apache.commons.collections4.map.AbstractHashedMap$HashEntry $r2;

        r0 := @this: org.apache.commons.collections4.map.AbstractReferenceMap;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        return null;

     label1:
        $r2 = specialinvoke r0.<org.apache.commons.collections4.map.AbstractHashedMap: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry getEntry(java.lang.Object)>(r1);

        return $r2;
    }

    protected int hashEntry(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections4.map.AbstractReferenceMap r0;
        java.lang.Object r1, r2;
        int $i2, $i3, $i4;

        r0 := @this: org.apache.commons.collections4.map.AbstractReferenceMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        if r1 != null goto label1;

        $i2 = 0;

        goto label2;

     label1:
        $i2 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

     label2:
        if r2 != null goto label3;

        $i3 = 0;

        goto label4;

     label3:
        $i3 = virtualinvoke r2.<java.lang.Object: int hashCode()>();

     label4:
        $i4 = $i2 ^ $i3;

        return $i4;
    }

    protected boolean isEqualKey(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections4.map.AbstractReferenceMap r0;
        java.lang.Object r1, r5, $r6;
        org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength $r2, $r3;
        java.lang.ref.Reference $r4;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.collections4.map.AbstractReferenceMap;

        r1 := @parameter0: java.lang.Object;

        r5 := @parameter1: java.lang.Object;

        $r3 = r0.<org.apache.commons.collections4.map.AbstractReferenceMap: org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength keyType>;

        $r2 = <org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength: org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength HARD>;

        if $r3 != $r2 goto label1;

        $r6 = r5;

        goto label2;

     label1:
        $r4 = (java.lang.ref.Reference) r5;

        $r6 = virtualinvoke $r4.<java.lang.ref.Reference: java.lang.Object get()>();

     label2:
        if r1 == $r6 goto label3;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label4;

     label3:
        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        return $z1;
    }

    protected org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntry createEntry(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry, int, java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections4.map.AbstractReferenceMap r0;
        org.apache.commons.collections4.map.AbstractHashedMap$HashEntry r1;
        int i0;
        java.lang.Object r2, r3;
        org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntry $r4;

        r0 := @this: org.apache.commons.collections4.map.AbstractReferenceMap;

        r1 := @parameter0: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        $r4 = new org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntry;

        specialinvoke $r4.<org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntry: void <init>(org.apache.commons.collections4.map.AbstractReferenceMap,org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,int,java.lang.Object,java.lang.Object)>(r0, r1, i0, r2, r3);

        return $r4;
    }

    protected java.util.Iterator createEntrySetIterator()
    {
        org.apache.commons.collections4.map.AbstractReferenceMap r0;
        org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntrySetIterator $r1;

        r0 := @this: org.apache.commons.collections4.map.AbstractReferenceMap;

        $r1 = new org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntrySetIterator;

        specialinvoke $r1.<org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntrySetIterator: void <init>(org.apache.commons.collections4.map.AbstractReferenceMap)>(r0);

        return $r1;
    }

    protected java.util.Iterator createKeySetIterator()
    {
        org.apache.commons.collections4.map.AbstractReferenceMap r0;
        org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceKeySetIterator $r1;

        r0 := @this: org.apache.commons.collections4.map.AbstractReferenceMap;

        $r1 = new org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceKeySetIterator;

        specialinvoke $r1.<org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceKeySetIterator: void <init>(org.apache.commons.collections4.map.AbstractReferenceMap)>(r0);

        return $r1;
    }

    protected java.util.Iterator createValuesIterator()
    {
        org.apache.commons.collections4.map.AbstractReferenceMap r0;
        org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceValuesIterator $r1;

        r0 := @this: org.apache.commons.collections4.map.AbstractReferenceMap;

        $r1 = new org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceValuesIterator;

        specialinvoke $r1.<org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceValuesIterator: void <init>(org.apache.commons.collections4.map.AbstractReferenceMap)>(r0);

        return $r1;
    }

    protected void doWriteObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        org.apache.commons.collections4.map.AbstractReferenceMap r0;
        java.io.ObjectOutputStream r1;
        org.apache.commons.collections4.MapIterator r2;
        org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength $r3, $r4;
        int $i0, $i1, $i2;
        boolean $z0, $z1;
        float $f0;
        org.apache.commons.collections4.map.AbstractHashedMap$HashEntry[] $r5;
        java.lang.Object $r6, $r7;

        r0 := @this: org.apache.commons.collections4.map.AbstractReferenceMap;

        r1 := @parameter0: java.io.ObjectOutputStream;

        $r3 = r0.<org.apache.commons.collections4.map.AbstractReferenceMap: org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength keyType>;

        $i0 = $r3.<org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength: int value>;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i0);

        $r4 = r0.<org.apache.commons.collections4.map.AbstractReferenceMap: org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength valueType>;

        $i1 = $r4.<org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength: int value>;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i1);

        $z0 = r0.<org.apache.commons.collections4.map.AbstractReferenceMap: boolean purgeValues>;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeBoolean(boolean)>($z0);

        $f0 = r0.<org.apache.commons.collections4.map.AbstractReferenceMap: float loadFactor>;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeFloat(float)>($f0);

        $r5 = r0.<org.apache.commons.collections4.map.AbstractReferenceMap: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry[] data>;

        $i2 = lengthof $r5;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i2);

        r2 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractReferenceMap: org.apache.commons.collections4.MapIterator mapIterator()>();

     label1:
        $z1 = interfaceinvoke r2.<org.apache.commons.collections4.MapIterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r6 = interfaceinvoke r2.<org.apache.commons.collections4.MapIterator: java.lang.Object next()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r6);

        $r7 = interfaceinvoke r2.<org.apache.commons.collections4.MapIterator: java.lang.Object getValue()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r7);

        goto label1;

     label2:
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(null);

        return;
    }

    protected void doReadObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.commons.collections4.map.AbstractReferenceMap r0;
        java.io.ObjectInputStream r1;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.Object r2, r3;
        org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength $r4, $r5;
        boolean $z0;
        float $f0, $f1;
        org.apache.commons.collections4.map.AbstractHashedMap$HashEntry[] $r6, $r7;

        r0 := @this: org.apache.commons.collections4.map.AbstractReferenceMap;

        r1 := @parameter0: java.io.ObjectInputStream;

        $i1 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

        $r4 = staticinvoke <org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength: org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength resolve(int)>($i1);

        r0.<org.apache.commons.collections4.map.AbstractReferenceMap: org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength keyType> = $r4;

        $i2 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

        $r5 = staticinvoke <org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength: org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength resolve(int)>($i2);

        r0.<org.apache.commons.collections4.map.AbstractReferenceMap: org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength valueType> = $r5;

        $z0 = virtualinvoke r1.<java.io.ObjectInputStream: boolean readBoolean()>();

        r0.<org.apache.commons.collections4.map.AbstractReferenceMap: boolean purgeValues> = $z0;

        $f0 = virtualinvoke r1.<java.io.ObjectInputStream: float readFloat()>();

        r0.<org.apache.commons.collections4.map.AbstractReferenceMap: float loadFactor> = $f0;

        i0 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractReferenceMap: void init()>();

        $r6 = newarray (org.apache.commons.collections4.map.AbstractHashedMap$HashEntry)[i0];

        r0.<org.apache.commons.collections4.map.AbstractReferenceMap: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry[] data> = $r6;

        $r7 = r0.<org.apache.commons.collections4.map.AbstractReferenceMap: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry[] data>;

        $i3 = lengthof $r7;

        $f1 = r0.<org.apache.commons.collections4.map.AbstractReferenceMap: float loadFactor>;

        $i4 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractReferenceMap: int calculateThreshold(int,float)>($i3, $f1);

        r0.<org.apache.commons.collections4.map.AbstractReferenceMap: int threshold> = $i4;

     label1:
        r2 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        if r2 != null goto label2;

        goto label3;

     label2:
        r3 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        virtualinvoke r0.<org.apache.commons.collections4.map.AbstractReferenceMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);

        goto label1;

     label3:
        return;
    }

    protected boolean isKeyType(org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength)
    {
        org.apache.commons.collections4.map.AbstractReferenceMap r0;
        org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.map.AbstractReferenceMap;

        r1 := @parameter0: org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength;

        $r2 = r0.<org.apache.commons.collections4.map.AbstractReferenceMap: org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength keyType>;

        if $r2 != r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected boolean isValueType(org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength)
    {
        org.apache.commons.collections4.map.AbstractReferenceMap r0;
        org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.map.AbstractReferenceMap;

        r1 := @parameter0: org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength;

        $r2 = r0.<org.apache.commons.collections4.map.AbstractReferenceMap: org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength valueType>;

        if $r2 != r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected volatile org.apache.commons.collections4.map.AbstractHashedMap$HashEntry createEntry(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry, int, java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections4.map.AbstractReferenceMap r0;
        org.apache.commons.collections4.map.AbstractHashedMap$HashEntry r1;
        int i0;
        java.lang.Object r2, r3;
        org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntry $r4;

        r0 := @this: org.apache.commons.collections4.map.AbstractReferenceMap;

        r1 := @parameter0: org.apache.commons.collections4.map.AbstractHashedMap$HashEntry;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.map.AbstractReferenceMap: org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntry createEntry(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,int,java.lang.Object,java.lang.Object)>(r1, i0, r2, r3);

        return $r4;
    }

    static org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength access$000(org.apache.commons.collections4.map.AbstractReferenceMap)
    {
        org.apache.commons.collections4.map.AbstractReferenceMap r0;
        org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength $r1;

        r0 := @parameter0: org.apache.commons.collections4.map.AbstractReferenceMap;

        $r1 = r0.<org.apache.commons.collections4.map.AbstractReferenceMap: org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength keyType>;

        return $r1;
    }

    static org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength access$100(org.apache.commons.collections4.map.AbstractReferenceMap)
    {
        org.apache.commons.collections4.map.AbstractReferenceMap r0;
        org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength $r1;

        r0 := @parameter0: org.apache.commons.collections4.map.AbstractReferenceMap;

        $r1 = r0.<org.apache.commons.collections4.map.AbstractReferenceMap: org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength valueType>;

        return $r1;
    }

    static java.lang.ref.ReferenceQueue access$200(org.apache.commons.collections4.map.AbstractReferenceMap)
    {
        org.apache.commons.collections4.map.AbstractReferenceMap r0;
        java.lang.ref.ReferenceQueue $r1;

        r0 := @parameter0: org.apache.commons.collections4.map.AbstractReferenceMap;

        $r1 = r0.<org.apache.commons.collections4.map.AbstractReferenceMap: java.lang.ref.ReferenceQueue queue>;

        return $r1;
    }

    static boolean access$300(org.apache.commons.collections4.map.AbstractReferenceMap)
    {
        org.apache.commons.collections4.map.AbstractReferenceMap r0;
        boolean $z0;

        r0 := @parameter0: org.apache.commons.collections4.map.AbstractReferenceMap;

        $z0 = r0.<org.apache.commons.collections4.map.AbstractReferenceMap: boolean purgeValues>;

        return $z0;
    }
}
