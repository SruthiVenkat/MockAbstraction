public abstract class org.apache.commons.collections4.list.AbstractListTest extends org.apache.commons.collections4.collection.AbstractCollectionTest
{

    public void <init>(java.lang.String)
    {
        org.apache.commons.collections4.list.AbstractListTest r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.collections4.list.AbstractListTest;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void <init>(java.lang.String)>(r1);

        return;
    }

    public boolean isSetSupported()
    {
        org.apache.commons.collections4.list.AbstractListTest r0;

        r0 := @this: org.apache.commons.collections4.list.AbstractListTest;

        return 1;
    }

    public void verify()
    {
        org.apache.commons.collections4.list.AbstractListTest r0;
        java.util.List r1, r2;
        java.util.Iterator r3, r4;
        java.lang.Object[] r5, $r7;
        java.lang.Object r6, r8, r9, r10;
        int $i0, $i1, i2;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.collections4.list.AbstractListTest;

        specialinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void verify()>();

        r1 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        r2 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getConfirmed()>();

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("List should equal confirmed", r1, r2);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Confirmed should equal list", r2, r1);

        $i0 = interfaceinvoke r1.<java.util.List: int hashCode()>();

        $i1 = interfaceinvoke r2.<java.util.List: int hashCode()>();

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.String,int,int)>("Hash codes should be equal", $i0, $i1);

        i2 = 0;

        r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

        r4 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

        $r7 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray()>();

        r5 = (java.lang.Object[]) $r7;

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertTrue(java.lang.String,boolean)>("List iterator should have next", $z1);

        r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Iterator elements should be equal", r6, r8);

        r9 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i2);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("get should return correct element", r6, r9);

        r10 = r5[i2];

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("toArray should have correct element", r6, r10);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public boolean isEqualsCheckable()
    {
        org.apache.commons.collections4.list.AbstractListTest r0;

        r0 := @this: org.apache.commons.collections4.list.AbstractListTest;

        return 1;
    }

    public java.util.Collection makeConfirmedCollection()
    {
        org.apache.commons.collections4.list.AbstractListTest r0;
        java.util.ArrayList $r2;

        r0 := @this: org.apache.commons.collections4.list.AbstractListTest;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        return $r2;
    }

    public java.util.Collection makeConfirmedFullCollection()
    {
        org.apache.commons.collections4.list.AbstractListTest r0;
        java.util.ArrayList $r2;
        java.lang.Object[] $r3;
        java.util.List $r4;

        r0 := @this: org.apache.commons.collections4.list.AbstractListTest;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.lang.Object[] getFullElements()>();

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        virtualinvoke $r2.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r4);

        return $r2;
    }

    public abstract java.util.List makeObject();

    public java.util.List makeFullCollection()
    {
        org.apache.commons.collections4.list.AbstractListTest r0;
        java.util.List r1, $r3;
        java.lang.Object[] $r2;

        r0 := @this: org.apache.commons.collections4.list.AbstractListTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List makeObject()>();

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.lang.Object[] getFullElements()>();

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        interfaceinvoke r1.<java.util.List: boolean addAll(java.util.Collection)>($r3);

        return r1;
    }

    public java.util.List getCollection()
    {
        org.apache.commons.collections4.list.AbstractListTest r0;
        java.util.Collection $r1;
        java.util.List $r2;

        r0 := @this: org.apache.commons.collections4.list.AbstractListTest;

        $r1 = specialinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $r2 = (java.util.List) $r1;

        return $r2;
    }

    public java.util.List getConfirmed()
    {
        org.apache.commons.collections4.list.AbstractListTest r0;
        java.util.Collection $r1;
        java.util.List $r2;

        r0 := @this: org.apache.commons.collections4.list.AbstractListTest;

        $r1 = specialinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getConfirmed()>();

        $r2 = (java.util.List) $r1;

        return $r2;
    }

    public void testListAddByIndexBoundsChecking()
    {
        org.apache.commons.collections4.list.AbstractListTest r0;
        java.lang.Object r1;
        boolean $z0;
        java.lang.Object[] $r2;
        java.lang.IndexOutOfBoundsException $r3, $r4, $r5, $r6;
        java.util.List r7, r9, r11, r13;

        r0 := @this: org.apache.commons.collections4.list.AbstractListTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: boolean isAddSupported()>();

        if $z0 != 0 goto label01;

        return;

     label01:
        $r2 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.lang.Object[] getOtherElements()>();

        r1 = $r2[0];

     label02:
        r7 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List makeObject()>();

        interfaceinvoke r7.<java.util.List: void add(int,java.lang.Object)>(-2147483648, r1);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void fail(java.lang.String)>("List.add should throw IndexOutOfBoundsException [Integer.MIN_VALUE]");

     label03:
        goto label05;

     label04:
        $r3 := @caughtexception;

     label05:
        r9 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List makeObject()>();

        interfaceinvoke r9.<java.util.List: void add(int,java.lang.Object)>(-1, r1);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void fail(java.lang.String)>("List.add should throw IndexOutOfBoundsException [-1]");

     label06:
        goto label08;

     label07:
        $r4 := @caughtexception;

     label08:
        r11 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List makeObject()>();

        interfaceinvoke r11.<java.util.List: void add(int,java.lang.Object)>(1, r1);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void fail(java.lang.String)>("List.add should throw IndexOutOfBoundsException [1]");

     label09:
        goto label11;

     label10:
        $r5 := @caughtexception;

     label11:
        r13 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List makeObject()>();

        interfaceinvoke r13.<java.util.List: void add(int,java.lang.Object)>(2147483647, r1);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void fail(java.lang.String)>("List.add should throw IndexOutOfBoundsException [Integer.MAX_VALUE]");

     label12:
        goto label14;

     label13:
        $r6 := @caughtexception;

     label14:
        return;

        catch java.lang.IndexOutOfBoundsException from label02 to label03 with label04;
        catch java.lang.IndexOutOfBoundsException from label05 to label06 with label07;
        catch java.lang.IndexOutOfBoundsException from label08 to label09 with label10;
        catch java.lang.IndexOutOfBoundsException from label11 to label12 with label13;
    }

    public void testListAddByIndexBoundsChecking2()
    {
        org.apache.commons.collections4.list.AbstractListTest r0;
        java.lang.Object r1;
        boolean $z0;
        java.lang.Object[] $r2;
        int $i0, $i1;
        java.lang.IndexOutOfBoundsException $r3, $r4, $r5, $r6;
        java.util.List r7, r9, r11, r13;

        r0 := @this: org.apache.commons.collections4.list.AbstractListTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: boolean isAddSupported()>();

        if $z0 != 0 goto label01;

        return;

     label01:
        $r2 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.lang.Object[] getOtherElements()>();

        r1 = $r2[0];

     label02:
        r7 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List makeFullCollection()>();

        interfaceinvoke r7.<java.util.List: void add(int,java.lang.Object)>(-2147483648, r1);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void fail(java.lang.String)>("List.add should throw IndexOutOfBoundsException [Integer.MIN_VALUE]");

     label03:
        goto label05;

     label04:
        $r6 := @caughtexception;

     label05:
        r9 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List makeFullCollection()>();

        interfaceinvoke r9.<java.util.List: void add(int,java.lang.Object)>(-1, r1);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void fail(java.lang.String)>("List.add should throw IndexOutOfBoundsException [-1]");

     label06:
        goto label08;

     label07:
        $r4 := @caughtexception;

     label08:
        r11 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List makeFullCollection()>();

        $i0 = interfaceinvoke r11.<java.util.List: int size()>();

        $i1 = $i0 + 1;

        interfaceinvoke r11.<java.util.List: void add(int,java.lang.Object)>($i1, r1);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void fail(java.lang.String)>("List.add should throw IndexOutOfBoundsException [size + 1]");

     label09:
        goto label11;

     label10:
        $r5 := @caughtexception;

     label11:
        r13 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List makeFullCollection()>();

        interfaceinvoke r13.<java.util.List: void add(int,java.lang.Object)>(2147483647, r1);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void fail(java.lang.String)>("List.add should throw IndexOutOfBoundsException [Integer.MAX_VALUE]");

     label12:
        goto label14;

     label13:
        $r3 := @caughtexception;

     label14:
        return;

        catch java.lang.IndexOutOfBoundsException from label02 to label03 with label04;
        catch java.lang.IndexOutOfBoundsException from label05 to label06 with label07;
        catch java.lang.IndexOutOfBoundsException from label08 to label09 with label10;
        catch java.lang.IndexOutOfBoundsException from label11 to label12 with label13;
    }

    public void testListAddByIndex()
    {
        org.apache.commons.collections4.list.AbstractListTest r0;
        java.lang.Object r1;
        int i0, i1;
        boolean $z0;
        java.lang.Object[] $r2, $r3;
        java.util.List $r4, $r5;

        r0 := @this: org.apache.commons.collections4.list.AbstractListTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: boolean isAddSupported()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.lang.Object[] getOtherElements()>();

        r1 = $r2[0];

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.lang.Object[] getFullElements()>();

        i0 = lengthof $r3;

        i1 = 0;

     label2:
        if i1 > i0 goto label3;

        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void resetFull()>();

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        interfaceinvoke $r4.<java.util.List: void add(int,java.lang.Object)>(i1, r1);

        $r5 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getConfirmed()>();

        interfaceinvoke $r5.<java.util.List: void add(int,java.lang.Object)>(i1, r1);

        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void verify()>();

        i1 = i1 + 1;

        goto label2;

     label3:
        return;
    }

    public void testListEquals()
    {
        org.apache.commons.collections4.list.AbstractListTest r0;
        java.util.List r1, $r3, $r6, $r12, $r13, $r15, $r18, r19, r20, r21, r22, r23, r24, r25, r26;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        java.lang.Object[] $r4, $r5, $r7, $r8, $r9, $r11, $r14, $r17;
        int $i0, $i1;
        org.apache.commons.collections4.list.AbstractListTest$1 $r10;
        java.util.ArrayList $r16;

        r0 := @this: org.apache.commons.collections4.list.AbstractListTest;

        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void resetEmpty()>();

        r19 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getConfirmed()>();

        $z0 = interfaceinvoke r19.<java.util.List: boolean equals(java.lang.Object)>($r3);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.String,boolean,boolean)>("Empty lists should be equal", 1, $z0);

        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void verify()>();

        $z1 = interfaceinvoke r19.<java.util.List: boolean equals(java.lang.Object)>(r19);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.String,boolean,boolean)>("Empty list should equal self", 1, $z1);

        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void verify()>();

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.lang.Object[] getFullElements()>();

        r20 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        $z2 = interfaceinvoke r19.<java.util.List: boolean equals(java.lang.Object)>(r20);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.String,boolean,boolean)>("Empty list shouldn\'t equal full", 0, $z2);

        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void verify()>();

        $r5 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.lang.Object[] getOtherElements()>();

        r21 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5);

        $z3 = interfaceinvoke r19.<java.util.List: boolean equals(java.lang.Object)>(r21);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.String,boolean,boolean)>("Empty list shouldn\'t equal other", 0, $z3);

        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void verify()>();

        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void resetFull()>();

        r22 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        $r6 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getConfirmed()>();

        $z4 = interfaceinvoke r22.<java.util.List: boolean equals(java.lang.Object)>($r6);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.String,boolean,boolean)>("Full lists should be equal", 1, $z4);

        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void verify()>();

        $z5 = interfaceinvoke r22.<java.util.List: boolean equals(java.lang.Object)>(r22);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.String,boolean,boolean)>("Full list should equal self", 1, $z5);

        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void verify()>();

        r23 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List makeObject()>();

        $z6 = interfaceinvoke r22.<java.util.List: boolean equals(java.lang.Object)>(r23);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.String,boolean,boolean)>("Full list shouldn\'t equal empty", 0, $z6);

        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void verify()>();

        $r7 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.lang.Object[] getOtherElements()>();

        r24 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r7);

        $z7 = interfaceinvoke r22.<java.util.List: boolean equals(java.lang.Object)>(r24);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.String,boolean,boolean)>("Full list shouldn\'t equal other", 0, $z7);

        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void verify()>();

        $r8 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.lang.Object[] getFullElements()>();

        r25 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r8);

        $i0 = interfaceinvoke r25.<java.util.List: int size()>();

        if $i0 >= 2 goto label1;

        $z11 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: boolean isAddSupported()>();

        if $z11 == 0 goto label1;

        $r11 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.lang.Object[] getOtherElements()>();

        $r12 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r11);

        interfaceinvoke r22.<java.util.List: boolean addAll(java.util.Collection)>($r12);

        $r13 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getConfirmed()>();

        $r14 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.lang.Object[] getOtherElements()>();

        $r15 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r14);

        interfaceinvoke $r13.<java.util.List: boolean addAll(java.util.Collection)>($r15);

        $r16 = new java.util.ArrayList;

        specialinvoke $r16.<java.util.ArrayList: void <init>(java.util.Collection)>(r25);

        r25 = $r16;

        $r17 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.lang.Object[] getOtherElements()>();

        $r18 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r17);

        interfaceinvoke $r16.<java.util.List: boolean addAll(java.util.Collection)>($r18);

     label1:
        $i1 = interfaceinvoke r25.<java.util.List: int size()>();

        if $i1 <= 1 goto label2;

        staticinvoke <java.util.Collections: void reverse(java.util.List)>(r25);

        $z10 = interfaceinvoke r22.<java.util.List: boolean equals(java.lang.Object)>(r25);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.String,boolean,boolean)>("Full list shouldn\'t equal full list with same elements but different order", 0, $z10);

        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void verify()>();

     label2:
        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void resetFull()>();

        r26 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        $z8 = interfaceinvoke r26.<java.util.List: boolean equals(java.lang.Object)>("");

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.String,boolean,boolean)>("List shouldn\'t equal String", 0, $z8);

        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void verify()>();

        $r9 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.lang.Object[] getFullElements()>();

        r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r9);

        $r10 = new org.apache.commons.collections4.list.AbstractListTest$1;

        specialinvoke $r10.<org.apache.commons.collections4.list.AbstractListTest$1: void <init>(org.apache.commons.collections4.list.AbstractListTest,java.util.List)>(r0, r1);

        $z9 = interfaceinvoke r26.<java.util.List: boolean equals(java.lang.Object)>($r10);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.String,boolean,boolean)>("List shouldn\'t equal nonlist with same elements in same order", 0, $z9);

        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void verify()>();

        return;
    }

    public void testListHashCode()
    {
        org.apache.commons.collections4.list.AbstractListTest r0;
        java.util.List $r1, $r2, $r3, $r4;
        int i0, i1, i2, i3;

        r0 := @this: org.apache.commons.collections4.list.AbstractListTest;

        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void resetEmpty()>();

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        i0 = interfaceinvoke $r1.<java.util.List: int hashCode()>();

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getConfirmed()>();

        i1 = interfaceinvoke $r2.<java.util.List: int hashCode()>();

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.String,int,int)>("Empty lists should have equal hashCodes", i0, i1);

        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void verify()>();

        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void resetFull()>();

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        i2 = interfaceinvoke $r3.<java.util.List: int hashCode()>();

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getConfirmed()>();

        i3 = interfaceinvoke $r4.<java.util.List: int hashCode()>();

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.String,int,int)>("Full lists should have equal hashCodes", i2, i3);

        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void verify()>();

        return;
    }

    public void testListGetByIndex()
    {
        org.apache.commons.collections4.list.AbstractListTest r0;
        java.util.List r1;
        java.lang.Object[] r2;
        int $i0, i1;
        java.lang.Object $r3, $r4;

        r0 := @this: org.apache.commons.collections4.list.AbstractListTest;

        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void resetFull()>();

        r1 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        r2 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.lang.Object[] getFullElements()>();

        i1 = 0;

     label1:
        $i0 = lengthof r2;

        if i1 >= $i0 goto label2;

        $r3 = r2[i1];

        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("List should contain correct elements", $r3, $r4);

        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void verify()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void testListGetByIndexBoundsChecking()
    {
        org.apache.commons.collections4.list.AbstractListTest r0;
        java.util.List r1;
        java.lang.IndexOutOfBoundsException $r7, $r8, $r9, $r10, $r11;

        r0 := @this: org.apache.commons.collections4.list.AbstractListTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List makeObject()>();

     label01:
        interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(-2147483648);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void fail(java.lang.String)>("List.get should throw IndexOutOfBoundsException [Integer.MIN_VALUE]");

     label02:
        goto label04;

     label03:
        $r7 := @caughtexception;

     label04:
        interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(-1);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void fail(java.lang.String)>("List.get should throw IndexOutOfBoundsException [-1]");

     label05:
        goto label07;

     label06:
        $r10 := @caughtexception;

     label07:
        interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void fail(java.lang.String)>("List.get should throw IndexOutOfBoundsException [0]");

     label08:
        goto label10;

     label09:
        $r8 := @caughtexception;

     label10:
        interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(1);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void fail(java.lang.String)>("List.get should throw IndexOutOfBoundsException [1]");

     label11:
        goto label13;

     label12:
        $r9 := @caughtexception;

     label13:
        interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(2147483647);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void fail(java.lang.String)>("List.get should throw IndexOutOfBoundsException [Integer.MAX_VALUE]");

     label14:
        goto label16;

     label15:
        $r11 := @caughtexception;

     label16:
        return;

        catch java.lang.IndexOutOfBoundsException from label01 to label02 with label03;
        catch java.lang.IndexOutOfBoundsException from label04 to label05 with label06;
        catch java.lang.IndexOutOfBoundsException from label07 to label08 with label09;
        catch java.lang.IndexOutOfBoundsException from label10 to label11 with label12;
        catch java.lang.IndexOutOfBoundsException from label13 to label14 with label15;
    }

    public void testListGetByIndexBoundsChecking2()
    {
        org.apache.commons.collections4.list.AbstractListTest r0;
        java.util.List r1;
        java.lang.Object[] $r4;
        int $i0;
        java.lang.IndexOutOfBoundsException $r7, $r8, $r9, $r10;

        r0 := @this: org.apache.commons.collections4.list.AbstractListTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List makeFullCollection()>();

     label01:
        interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(-2147483648);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void fail(java.lang.String)>("List.get should throw IndexOutOfBoundsException [Integer.MIN_VALUE]");

     label02:
        goto label04;

     label03:
        $r9 := @caughtexception;

     label04:
        interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(-1);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void fail(java.lang.String)>("List.get should throw IndexOutOfBoundsException [-1]");

     label05:
        goto label07;

     label06:
        $r8 := @caughtexception;

     label07:
        $r4 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.lang.Object[] getFullElements()>();

        $i0 = lengthof $r4;

        interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i0);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void fail(java.lang.String)>("List.get should throw IndexOutOfBoundsException [size]");

     label08:
        goto label10;

     label09:
        $r10 := @caughtexception;

     label10:
        interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(2147483647);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void fail(java.lang.String)>("List.get should throw IndexOutOfBoundsException [Integer.MAX_VALUE]");

     label11:
        goto label13;

     label12:
        $r7 := @caughtexception;

     label13:
        return;

        catch java.lang.IndexOutOfBoundsException from label01 to label02 with label03;
        catch java.lang.IndexOutOfBoundsException from label04 to label05 with label06;
        catch java.lang.IndexOutOfBoundsException from label07 to label08 with label09;
        catch java.lang.IndexOutOfBoundsException from label10 to label11 with label12;
    }

    public void testListIndexOf()
    {
        org.apache.commons.collections4.list.AbstractListTest r0;
        java.util.List r1, r2;
        int i0, $i1, $i2, $i3, i4;
        java.lang.Object r3, r5;
        boolean $z0;
        java.util.Iterator r4;
        java.lang.Object[] r6;

        r0 := @this: org.apache.commons.collections4.list.AbstractListTest;

        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void resetFull()>();

        r1 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        r2 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getConfirmed()>();

        r4 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $i2 = interfaceinvoke r1.<java.util.List: int indexOf(java.lang.Object)>(r5);

        $i3 = interfaceinvoke r2.<java.util.List: int indexOf(java.lang.Object)>(r5);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.String,int,int)>("indexOf should return correct result", $i2, $i3);

        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void verify()>();

        goto label1;

     label2:
        r6 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.lang.Object[] getOtherElements()>();

        i0 = lengthof r6;

        i4 = 0;

     label3:
        if i4 >= i0 goto label4;

        r3 = r6[i4];

        $i1 = interfaceinvoke r1.<java.util.List: int indexOf(java.lang.Object)>(r3);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.String,int,int)>("indexOf should return -1 for nonexistent element", -1, $i1);

        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void verify()>();

        i4 = i4 + 1;

        goto label3;

     label4:
        return;
    }

    public void testListLastIndexOf()
    {
        org.apache.commons.collections4.list.AbstractListTest r0;
        java.util.List r1, r2;
        java.util.Iterator r3;
        int i0, $i1, $i2, $i3, i4;
        java.lang.Object r5, r6;
        boolean $z0;
        java.lang.Object[] r7;

        r0 := @this: org.apache.commons.collections4.list.AbstractListTest;

        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void resetFull()>();

        r1 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        r2 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getConfirmed()>();

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $i2 = interfaceinvoke r1.<java.util.List: int lastIndexOf(java.lang.Object)>(r6);

        $i3 = interfaceinvoke r2.<java.util.List: int lastIndexOf(java.lang.Object)>(r6);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.String,int,int)>("lastIndexOf should return correct result", $i2, $i3);

        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void verify()>();

        goto label1;

     label2:
        r7 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.lang.Object[] getOtherElements()>();

        i0 = lengthof r7;

        i4 = 0;

     label3:
        if i4 >= i0 goto label4;

        r5 = r7[i4];

        $i1 = interfaceinvoke r1.<java.util.List: int lastIndexOf(java.lang.Object)>(r5);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.String,int,int)>("lastIndexOf should return -1 for nonexistent element", -1, $i1);

        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void verify()>();

        i4 = i4 + 1;

        goto label3;

     label4:
        return;
    }

    public void testListSetByIndexBoundsChecking()
    {
        org.apache.commons.collections4.list.AbstractListTest r0;
        java.util.List r1;
        java.lang.Object r2;
        boolean $z0;
        java.lang.Object[] $r3;
        java.lang.IndexOutOfBoundsException $r9, $r10, $r11, $r12, $r13;

        r0 := @this: org.apache.commons.collections4.list.AbstractListTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: boolean isSetSupported()>();

        if $z0 != 0 goto label01;

        return;

     label01:
        r1 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List makeObject()>();

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.lang.Object[] getOtherElements()>();

        r2 = $r3[0];

     label02:
        interfaceinvoke r1.<java.util.List: java.lang.Object set(int,java.lang.Object)>(-2147483648, r2);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void fail(java.lang.String)>("List.set should throw IndexOutOfBoundsException [Integer.MIN_VALUE]");

     label03:
        goto label05;

     label04:
        $r11 := @caughtexception;

     label05:
        interfaceinvoke r1.<java.util.List: java.lang.Object set(int,java.lang.Object)>(-1, r2);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void fail(java.lang.String)>("List.set should throw IndexOutOfBoundsException [-1]");

     label06:
        goto label08;

     label07:
        $r10 := @caughtexception;

     label08:
        interfaceinvoke r1.<java.util.List: java.lang.Object set(int,java.lang.Object)>(0, r2);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void fail(java.lang.String)>("List.set should throw IndexOutOfBoundsException [0]");

     label09:
        goto label11;

     label10:
        $r12 := @caughtexception;

     label11:
        interfaceinvoke r1.<java.util.List: java.lang.Object set(int,java.lang.Object)>(1, r2);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void fail(java.lang.String)>("List.set should throw IndexOutOfBoundsException [1]");

     label12:
        goto label14;

     label13:
        $r13 := @caughtexception;

     label14:
        interfaceinvoke r1.<java.util.List: java.lang.Object set(int,java.lang.Object)>(2147483647, r2);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void fail(java.lang.String)>("List.set should throw IndexOutOfBoundsException [Integer.MAX_VALUE]");

     label15:
        goto label17;

     label16:
        $r9 := @caughtexception;

     label17:
        return;

        catch java.lang.IndexOutOfBoundsException from label02 to label03 with label04;
        catch java.lang.IndexOutOfBoundsException from label05 to label06 with label07;
        catch java.lang.IndexOutOfBoundsException from label08 to label09 with label10;
        catch java.lang.IndexOutOfBoundsException from label11 to label12 with label13;
        catch java.lang.IndexOutOfBoundsException from label14 to label15 with label16;
    }

    public void testListSetByIndexBoundsChecking2()
    {
        org.apache.commons.collections4.list.AbstractListTest r0;
        java.util.List r1;
        java.lang.Object r2;
        boolean $z0;
        java.lang.Object[] $r3, $r6;
        int $i0;
        java.lang.IndexOutOfBoundsException $r9, $r10, $r11, $r12;

        r0 := @this: org.apache.commons.collections4.list.AbstractListTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: boolean isSetSupported()>();

        if $z0 != 0 goto label01;

        return;

     label01:
        r1 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List makeFullCollection()>();

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.lang.Object[] getOtherElements()>();

        r2 = $r3[0];

     label02:
        interfaceinvoke r1.<java.util.List: java.lang.Object set(int,java.lang.Object)>(-2147483648, r2);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void fail(java.lang.String)>("List.set should throw IndexOutOfBoundsException [Integer.MIN_VALUE]");

     label03:
        goto label05;

     label04:
        $r12 := @caughtexception;

     label05:
        interfaceinvoke r1.<java.util.List: java.lang.Object set(int,java.lang.Object)>(-1, r2);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void fail(java.lang.String)>("List.set should throw IndexOutOfBoundsException [-1]");

     label06:
        goto label08;

     label07:
        $r11 := @caughtexception;

     label08:
        $r6 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.lang.Object[] getFullElements()>();

        $i0 = lengthof $r6;

        interfaceinvoke r1.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i0, r2);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void fail(java.lang.String)>("List.set should throw IndexOutOfBoundsException [size]");

     label09:
        goto label11;

     label10:
        $r9 := @caughtexception;

     label11:
        interfaceinvoke r1.<java.util.List: java.lang.Object set(int,java.lang.Object)>(2147483647, r2);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void fail(java.lang.String)>("List.set should throw IndexOutOfBoundsException [Integer.MAX_VALUE]");

     label12:
        goto label14;

     label13:
        $r10 := @caughtexception;

     label14:
        return;

        catch java.lang.IndexOutOfBoundsException from label02 to label03 with label04;
        catch java.lang.IndexOutOfBoundsException from label05 to label06 with label07;
        catch java.lang.IndexOutOfBoundsException from label08 to label09 with label10;
        catch java.lang.IndexOutOfBoundsException from label11 to label12 with label13;
    }

    public void testListSetByIndex()
    {
        org.apache.commons.collections4.list.AbstractListTest r0;
        java.lang.Object[] r1, r2;
        java.lang.Object r3, r4, $r6;
        boolean $z0;
        int $i0, $i1, $i2, i3;
        java.util.List $r5, $r7;

        r0 := @this: org.apache.commons.collections4.list.AbstractListTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: boolean isSetSupported()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void resetFull()>();

        r1 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.lang.Object[] getFullElements()>();

        r2 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.lang.Object[] getOtherElements()>();

        i3 = 0;

     label2:
        $i0 = lengthof r1;

        if i3 >= $i0 goto label3;

        $i1 = lengthof r2;

        $i2 = i3 % $i1;

        r3 = r2[$i2];

        $r5 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        r4 = interfaceinvoke $r5.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i3, r3);

        $r6 = r1[i3];

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Set should return correct element", $r6, r4);

        $r7 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getConfirmed()>();

        interfaceinvoke $r7.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i3, r3);

        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void verify()>();

        i3 = i3 + 1;

        goto label2;

     label3:
        return;
    }

    public void testUnsupportedSet()
    {
        org.apache.commons.collections4.list.AbstractListTest r0;
        boolean $z0;
        java.util.List $r2;
        java.lang.Object[] $r3;
        java.lang.Object $r4;
        java.lang.UnsupportedOperationException $r6;

        r0 := @this: org.apache.commons.collections4.list.AbstractListTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: boolean isSetSupported()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void resetFull()>();

     label2:
        $r2 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.lang.Object[] getFullElements()>();

        $r4 = $r3[0];

        interfaceinvoke $r2.<java.util.List: java.lang.Object set(int,java.lang.Object)>(0, $r4);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void fail(java.lang.String)>("Emtpy collection should not support set.");

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

     label5:
        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void verify()>();

        return;

        catch java.lang.UnsupportedOperationException from label2 to label3 with label4;
    }

    public void testListRemoveByIndexBoundsChecking()
    {
        org.apache.commons.collections4.list.AbstractListTest r0;
        java.util.List r1;
        boolean $z0;
        java.lang.IndexOutOfBoundsException $r7, $r8, $r9, $r10, $r11;

        r0 := @this: org.apache.commons.collections4.list.AbstractListTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: boolean isRemoveSupported()>();

        if $z0 != 0 goto label01;

        return;

     label01:
        r1 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List makeObject()>();

     label02:
        interfaceinvoke r1.<java.util.List: java.lang.Object remove(int)>(-2147483648);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void fail(java.lang.String)>("List.remove should throw IndexOutOfBoundsException [Integer.MIN_VALUE]");

     label03:
        goto label05;

     label04:
        $r11 := @caughtexception;

     label05:
        interfaceinvoke r1.<java.util.List: java.lang.Object remove(int)>(-1);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void fail(java.lang.String)>("List.remove should throw IndexOutOfBoundsException [-1]");

     label06:
        goto label08;

     label07:
        $r8 := @caughtexception;

     label08:
        interfaceinvoke r1.<java.util.List: java.lang.Object remove(int)>(0);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void fail(java.lang.String)>("List.remove should throw IndexOutOfBoundsException [0]");

     label09:
        goto label11;

     label10:
        $r9 := @caughtexception;

     label11:
        interfaceinvoke r1.<java.util.List: java.lang.Object remove(int)>(1);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void fail(java.lang.String)>("List.remove should throw IndexOutOfBoundsException [1]");

     label12:
        goto label14;

     label13:
        $r10 := @caughtexception;

     label14:
        interfaceinvoke r1.<java.util.List: java.lang.Object remove(int)>(2147483647);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void fail(java.lang.String)>("List.remove should throw IndexOutOfBoundsException [Integer.MAX_VALUE]");

     label15:
        goto label17;

     label16:
        $r7 := @caughtexception;

     label17:
        return;

        catch java.lang.IndexOutOfBoundsException from label02 to label03 with label04;
        catch java.lang.IndexOutOfBoundsException from label05 to label06 with label07;
        catch java.lang.IndexOutOfBoundsException from label08 to label09 with label10;
        catch java.lang.IndexOutOfBoundsException from label11 to label12 with label13;
        catch java.lang.IndexOutOfBoundsException from label14 to label15 with label16;
    }

    public void testListRemoveByIndexBoundsChecking2()
    {
        org.apache.commons.collections4.list.AbstractListTest r0;
        java.util.List r1;
        boolean $z0;
        java.lang.Object[] $r4;
        int $i0;
        java.lang.IndexOutOfBoundsException $r7, $r8, $r9, $r10;

        r0 := @this: org.apache.commons.collections4.list.AbstractListTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: boolean isRemoveSupported()>();

        if $z0 != 0 goto label01;

        return;

     label01:
        r1 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List makeFullCollection()>();

     label02:
        interfaceinvoke r1.<java.util.List: java.lang.Object remove(int)>(-2147483648);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void fail(java.lang.String)>("List.remove should throw IndexOutOfBoundsException [Integer.MIN_VALUE]");

     label03:
        goto label05;

     label04:
        $r8 := @caughtexception;

     label05:
        interfaceinvoke r1.<java.util.List: java.lang.Object remove(int)>(-1);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void fail(java.lang.String)>("List.remove should throw IndexOutOfBoundsException [-1]");

     label06:
        goto label08;

     label07:
        $r10 := @caughtexception;

     label08:
        $r4 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.lang.Object[] getFullElements()>();

        $i0 = lengthof $r4;

        interfaceinvoke r1.<java.util.List: java.lang.Object remove(int)>($i0);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void fail(java.lang.String)>("List.remove should throw IndexOutOfBoundsException [size]");

     label09:
        goto label11;

     label10:
        $r9 := @caughtexception;

     label11:
        interfaceinvoke r1.<java.util.List: java.lang.Object remove(int)>(2147483647);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void fail(java.lang.String)>("List.remove should throw IndexOutOfBoundsException [Integer.MAX_VALUE]");

     label12:
        goto label14;

     label13:
        $r7 := @caughtexception;

     label14:
        return;

        catch java.lang.IndexOutOfBoundsException from label02 to label03 with label04;
        catch java.lang.IndexOutOfBoundsException from label05 to label06 with label07;
        catch java.lang.IndexOutOfBoundsException from label08 to label09 with label10;
        catch java.lang.IndexOutOfBoundsException from label11 to label12 with label13;
    }

    public void testListRemoveByIndex()
    {
        org.apache.commons.collections4.list.AbstractListTest r0;
        int i0, i1;
        java.lang.Object r1, r2;
        boolean $z0;
        java.lang.Object[] $r3;
        java.util.List $r4, $r5;

        r0 := @this: org.apache.commons.collections4.list.AbstractListTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: boolean isRemoveSupported()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.lang.Object[] getFullElements()>();

        i0 = lengthof $r3;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void resetFull()>();

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        r1 = interfaceinvoke $r4.<java.util.List: java.lang.Object remove(int)>(i1);

        $r5 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getConfirmed()>();

        r2 = interfaceinvoke $r5.<java.util.List: java.lang.Object remove(int)>(i1);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("remove should return correct element", r1, r2);

        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void verify()>();

        i1 = i1 + 1;

        goto label2;

     label3:
        return;
    }

    public void testListListIterator()
    {
        org.apache.commons.collections4.list.AbstractListTest r0;
        java.util.List $r1, $r3;
        java.util.ListIterator $r2, $r4;

        r0 := @this: org.apache.commons.collections4.list.AbstractListTest;

        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void resetFull()>();

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.ListIterator listIterator()>();

        specialinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void forwardTest(java.util.ListIterator,int)>($r2, 0);

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.ListIterator listIterator()>();

        specialinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void backwardTest(java.util.ListIterator,int)>($r4, 0);

        return;
    }

    public void testListListIteratorByIndex()
    {
        org.apache.commons.collections4.list.AbstractListTest r0;
        java.util.List $r1, $r3, $r4, $r6, $r7, $r9, $r11, $r17;
        int $i0, $i1, $i2, i3, $i4, i5;
        java.util.ListIterator $r8, $r10, $r12;
        java.lang.IndexOutOfBoundsException $r13, $r14;

        r0 := @this: org.apache.commons.collections4.list.AbstractListTest;

        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void resetFull()>();

     label01:
        $r1 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        interfaceinvoke $r1.<java.util.List: java.util.ListIterator listIterator(int)>(-1);

     label02:
        goto label04;

     label03:
        $r14 := @caughtexception;

     label04:
        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void resetFull()>();

     label05:
        $r3 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        $i1 = $i0 + 1;

        interfaceinvoke $r3.<java.util.List: java.util.ListIterator listIterator(int)>($i1);

     label06:
        goto label08;

     label07:
        $r13 := @caughtexception;

     label08:
        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void resetFull()>();

        i3 = 0;

     label09:
        $r17 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getConfirmed()>();

        $i4 = interfaceinvoke $r17.<java.util.List: int size()>();

        if i3 > $i4 goto label10;

        $r9 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        $r10 = interfaceinvoke $r9.<java.util.List: java.util.ListIterator listIterator(int)>(i3);

        specialinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void forwardTest(java.util.ListIterator,int)>($r10, i3);

        $r11 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        $r12 = interfaceinvoke $r11.<java.util.List: java.util.ListIterator listIterator(int)>(i3);

        specialinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void backwardTest(java.util.ListIterator,int)>($r12, i3);

        i3 = i3 + 1;

        goto label09;

     label10:
        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void resetFull()>();

        i5 = 0;

     label11:
        $r6 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getConfirmed()>();

        $i2 = interfaceinvoke $r6.<java.util.List: int size()>();

        if i5 > $i2 goto label12;

        $r7 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.ListIterator listIterator(int)>(i5);

        specialinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void backwardTest(java.util.ListIterator,int)>($r8, i5);

        i5 = i5 + 1;

        goto label11;

     label12:
        return;

        catch java.lang.IndexOutOfBoundsException from label01 to label02 with label03;
        catch java.lang.IndexOutOfBoundsException from label05 to label06 with label07;
    }

    public void testListListIteratorPreviousRemoveNext()
    {
        org.apache.commons.collections4.list.AbstractListTest r0;
        java.util.ListIterator r1;
        java.lang.Object r2, r3, r4, r5, r6, r7, $r11, $r13, $r15, $r17, $r19;
        boolean $z0, $z1, $z2, $z3;
        java.util.List $r8, $r9, $r10, $r12, $r14, $r16, $r18, $r20;
        int $i0, $i1;

        r0 := @this: org.apache.commons.collections4.list.AbstractListTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: boolean isRemoveSupported()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void resetFull()>();

        $r8 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        $i0 = interfaceinvoke $r8.<java.util.List: int size()>();

        if $i0 >= 4 goto label2;

        return;

     label2:
        $r9 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        r1 = interfaceinvoke $r9.<java.util.List: java.util.ListIterator listIterator()>();

        r2 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object next()>();

        r3 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object next()>();

        r4 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object next()>();

        r5 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object previous()>();

        r6 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object previous()>();

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.Object,java.lang.Object)>(r3, r6);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.Object,java.lang.Object)>(r4, r5);

        $r10 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        $r11 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.Object,java.lang.Object)>(r2, $r11);

        $r12 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(1);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.Object,java.lang.Object)>(r3, $r13);

        $r14 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        $r15 = interfaceinvoke $r14.<java.util.List: java.lang.Object get(int)>(2);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.Object,java.lang.Object)>(r4, $r15);

        interfaceinvoke r1.<java.util.ListIterator: void remove()>();

        $r16 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        $r17 = interfaceinvoke $r16.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.Object,java.lang.Object)>(r2, $r17);

        $r18 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        $r19 = interfaceinvoke $r18.<java.util.List: java.lang.Object get(int)>(1);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.Object,java.lang.Object)>(r4, $r19);

        r7 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.Object,java.lang.Object)>(r4, r7);

        $r20 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        $i1 = interfaceinvoke $r20.<java.util.List: int size()>();

        if $i1 <= 2 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        $z1 = interfaceinvoke r1.<java.util.ListIterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(boolean,boolean)>($z3, $z1);

        $z2 = interfaceinvoke r1.<java.util.ListIterator: boolean hasPrevious()>();

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(boolean,boolean)>(1, $z2);

        return;
    }

    public void testListListIteratorPreviousRemovePrevious()
    {
        org.apache.commons.collections4.list.AbstractListTest r0;
        java.util.ListIterator r1;
        java.lang.Object r2, r3, r4, r5, r6, r7, $r11, $r13, $r15, $r17, $r19;
        boolean $z0, $z1, $z2, $z3;
        java.util.List $r8, $r9, $r10, $r12, $r14, $r16, $r18, $r20;
        int $i0, $i1;

        r0 := @this: org.apache.commons.collections4.list.AbstractListTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: boolean isRemoveSupported()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void resetFull()>();

        $r8 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        $i0 = interfaceinvoke $r8.<java.util.List: int size()>();

        if $i0 >= 4 goto label2;

        return;

     label2:
        $r9 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        r1 = interfaceinvoke $r9.<java.util.List: java.util.ListIterator listIterator()>();

        r2 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object next()>();

        r3 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object next()>();

        r4 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object next()>();

        r5 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object previous()>();

        r6 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object previous()>();

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.Object,java.lang.Object)>(r3, r6);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.Object,java.lang.Object)>(r4, r5);

        $r10 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        $r11 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.Object,java.lang.Object)>(r2, $r11);

        $r12 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(1);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.Object,java.lang.Object)>(r3, $r13);

        $r14 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        $r15 = interfaceinvoke $r14.<java.util.List: java.lang.Object get(int)>(2);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.Object,java.lang.Object)>(r4, $r15);

        interfaceinvoke r1.<java.util.ListIterator: void remove()>();

        $r16 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        $r17 = interfaceinvoke $r16.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.Object,java.lang.Object)>(r2, $r17);

        $r18 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        $r19 = interfaceinvoke $r18.<java.util.List: java.lang.Object get(int)>(1);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.Object,java.lang.Object)>(r4, $r19);

        r7 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object previous()>();

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.Object,java.lang.Object)>(r2, r7);

        $z1 = interfaceinvoke r1.<java.util.ListIterator: boolean hasPrevious()>();

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(boolean,boolean)>(0, $z1);

        $r20 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        $i1 = interfaceinvoke $r20.<java.util.List: int size()>();

        if $i1 <= 2 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        $z2 = interfaceinvoke r1.<java.util.ListIterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(boolean,boolean)>($z3, $z2);

        return;
    }

    public void testListListIteratorNextRemoveNext()
    {
        org.apache.commons.collections4.list.AbstractListTest r0;
        java.util.ListIterator r1;
        java.lang.Object r2, r3, r4, r5, r6, $r10, $r12, $r14, $r17, $r19;
        boolean $z0, $z1, $z2, $z3;
        java.util.List $r7, $r8, $r9, $r11, $r13, $r15, $r16, $r18, $r20;
        int $i0, $i1;

        r0 := @this: org.apache.commons.collections4.list.AbstractListTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: boolean isRemoveSupported()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void resetFull()>();

        $r7 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        $i0 = interfaceinvoke $r7.<java.util.List: int size()>();

        if $i0 >= 4 goto label2;

        return;

     label2:
        $r8 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        r1 = interfaceinvoke $r8.<java.util.List: java.util.ListIterator listIterator()>();

        r2 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object next()>();

        r3 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object next()>();

        r4 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object next()>();

        $r9 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        $r10 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.Object,java.lang.Object)>(r2, $r10);

        $r11 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        $r12 = interfaceinvoke $r11.<java.util.List: java.lang.Object get(int)>(1);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.Object,java.lang.Object)>(r3, $r12);

        $r13 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        $r14 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>(2);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.Object,java.lang.Object)>(r4, $r14);

        $r15 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        r5 = interfaceinvoke $r15.<java.util.List: java.lang.Object get(int)>(3);

        interfaceinvoke r1.<java.util.ListIterator: void remove()>();

        $r16 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        $r17 = interfaceinvoke $r16.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.Object,java.lang.Object)>(r2, $r17);

        $r18 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        $r19 = interfaceinvoke $r18.<java.util.List: java.lang.Object get(int)>(1);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.Object,java.lang.Object)>(r3, $r19);

        r6 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.Object,java.lang.Object)>(r5, r6);

        $r20 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        $i1 = interfaceinvoke $r20.<java.util.List: int size()>();

        if $i1 <= 3 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        $z1 = interfaceinvoke r1.<java.util.ListIterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(boolean,boolean)>($z3, $z1);

        $z2 = interfaceinvoke r1.<java.util.ListIterator: boolean hasPrevious()>();

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(boolean,boolean)>(1, $z2);

        return;
    }

    public void testListListIteratorNextRemovePrevious()
    {
        org.apache.commons.collections4.list.AbstractListTest r0;
        java.util.ListIterator r1;
        java.lang.Object r2, r3, r4, r5, $r9, $r11, $r13, $r15, $r17;
        boolean $z0, $z1, $z2;
        java.util.List $r6, $r7, $r8, $r10, $r12, $r14, $r16;
        int $i0;

        r0 := @this: org.apache.commons.collections4.list.AbstractListTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: boolean isRemoveSupported()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void resetFull()>();

        $r6 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        $i0 = interfaceinvoke $r6.<java.util.List: int size()>();

        if $i0 >= 4 goto label2;

        return;

     label2:
        $r7 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        r1 = interfaceinvoke $r7.<java.util.List: java.util.ListIterator listIterator()>();

        r2 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object next()>();

        r3 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object next()>();

        r4 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object next()>();

        $r8 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        $r9 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.Object,java.lang.Object)>(r2, $r9);

        $r10 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        $r11 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>(1);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.Object,java.lang.Object)>(r3, $r11);

        $r12 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(2);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.Object,java.lang.Object)>(r4, $r13);

        interfaceinvoke r1.<java.util.ListIterator: void remove()>();

        $r14 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        $r15 = interfaceinvoke $r14.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.Object,java.lang.Object)>(r2, $r15);

        $r16 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        $r17 = interfaceinvoke $r16.<java.util.List: java.lang.Object get(int)>(1);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.Object,java.lang.Object)>(r3, $r17);

        r5 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object previous()>();

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.Object,java.lang.Object)>(r3, r5);

        $z1 = interfaceinvoke r1.<java.util.ListIterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(boolean,boolean)>(1, $z1);

        $z2 = interfaceinvoke r1.<java.util.ListIterator: boolean hasPrevious()>();

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(boolean,boolean)>(1, $z2);

        return;
    }

    private void forwardTest(java.util.ListIterator, int)
    {
        org.apache.commons.collections4.list.AbstractListTest r0;
        java.util.ListIterator r1;
        java.util.List r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        java.lang.Object[] $r3;
        boolean $z0, $z1, $z2;
        java.lang.Object $r6, r8;
        java.util.NoSuchElementException $r7;

        r0 := @this: org.apache.commons.collections4.list.AbstractListTest;

        r1 := @parameter0: java.util.ListIterator;

        i7 := @parameter1: int;

        r2 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.lang.Object[] getFullElements()>();

        i0 = lengthof $r3;

     label1:
        if i7 >= i0 goto label2;

        $z1 = interfaceinvoke r1.<java.util.ListIterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertTrue(java.lang.String,boolean)>("Iterator should have next", $z1);

        $i4 = interfaceinvoke r1.<java.util.ListIterator: int nextIndex()>();

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.String,int,int)>("Iterator.nextIndex should work", i7, $i4);

        $i5 = i7 - 1;

        $i6 = interfaceinvoke r1.<java.util.ListIterator: int previousIndex()>();

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.String,int,int)>("Iterator.previousIndex should work", $i5, $i6);

        r8 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object next()>();

        $r6 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i7);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Iterator returned correct element", $r6, r8);

        i7 = i7 + 1;

        goto label1;

     label2:
        $z0 = interfaceinvoke r1.<java.util.ListIterator: boolean hasNext()>();

        if $z0 != 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertTrue(java.lang.String,boolean)>("Iterator shouldn\'t have next", $z2);

        $i1 = interfaceinvoke r1.<java.util.ListIterator: int nextIndex()>();

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.String,int,int)>("nextIndex should be size", i0, $i1);

        $i2 = i0 - 1;

        $i3 = interfaceinvoke r1.<java.util.ListIterator: int previousIndex()>();

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.String,int,int)>("previousIndex should be size - 1", $i2, $i3);

     label5:
        interfaceinvoke r1.<java.util.ListIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void fail(java.lang.String)>("Exhausted iterator should raise NoSuchElement");

     label6:
        goto label8;

     label7:
        $r7 := @caughtexception;

     label8:
        return;

        catch java.util.NoSuchElementException from label5 to label6 with label7;
    }

    private void backwardTest(java.util.ListIterator, int)
    {
        org.apache.commons.collections4.list.AbstractListTest r0;
        java.util.ListIterator r1;
        java.util.List r2;
        int i0, $i1, $i2, $i3, $i4, i5, i6;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r6, $r7, $r8, $r10, $r11, $r12, $r14, $r15, $r16;
        java.lang.String $r9, $r13, $r17;
        java.lang.Object $r18, r20;
        java.util.NoSuchElementException $r19;

        r0 := @this: org.apache.commons.collections4.list.AbstractListTest;

        r1 := @parameter0: java.util.ListIterator;

        i5 := @parameter1: int;

        r2 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

     label1:
        if i5 <= 0 goto label2;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Iterator should have previous, i:");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $z1 = interfaceinvoke r1.<java.util.ListIterator: boolean hasPrevious()>();

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertTrue(java.lang.String,boolean)>($r9, $z1);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Iterator.nextIndex should work, i:");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = interfaceinvoke r1.<java.util.ListIterator: int nextIndex()>();

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.String,int,int)>($r13, i5, $i1);

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Iterator.previousIndex should work, i:");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $i2 = i5 - 1;

        $i3 = interfaceinvoke r1.<java.util.ListIterator: int previousIndex()>();

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.String,int,int)>($r17, $i2, $i3);

        r20 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object previous()>();

        $i4 = i5 - 1;

        $r18 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>($i4);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Iterator returned correct element", $r18, r20);

        i5 = i5 + -1;

        goto label1;

     label2:
        $z0 = interfaceinvoke r1.<java.util.ListIterator: boolean hasPrevious()>();

        if $z0 != 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertTrue(java.lang.String,boolean)>("Iterator shouldn\'t have previous", $z2);

        i6 = interfaceinvoke r1.<java.util.ListIterator: int nextIndex()>();

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.String,int,int)>("nextIndex should be 0", 0, i6);

        i0 = interfaceinvoke r1.<java.util.ListIterator: int previousIndex()>();

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.String,int,int)>("previousIndex should be -1", -1, i0);

     label5:
        interfaceinvoke r1.<java.util.ListIterator: java.lang.Object previous()>();

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void fail(java.lang.String)>("Exhausted iterator should raise NoSuchElement");

     label6:
        goto label8;

     label7:
        $r19 := @caughtexception;

     label8:
        return;

        catch java.util.NoSuchElementException from label5 to label6 with label7;
    }

    public void testListIteratorAdd()
    {
        org.apache.commons.collections4.list.AbstractListTest r0;
        java.util.List r1, r2, $r4, $r5;
        java.lang.Object[] r3;
        boolean $z0;
        java.util.ListIterator r8, r9, r12, r13;
        int i0, i1, i2, i3;
        java.lang.Object r11, r15;

        r0 := @this: org.apache.commons.collections4.list.AbstractListTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: boolean isAddSupported()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void resetEmpty()>();

        r1 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        r2 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getConfirmed()>();

        r3 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.lang.Object[] getFullElements()>();

        r8 = interfaceinvoke r1.<java.util.List: java.util.ListIterator listIterator()>();

        r9 = interfaceinvoke r2.<java.util.List: java.util.ListIterator listIterator()>();

        i0 = lengthof r3;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        r11 = r3[i1];

        interfaceinvoke r8.<java.util.ListIterator: void add(java.lang.Object)>(r11);

        interfaceinvoke r9.<java.util.ListIterator: void add(java.lang.Object)>(r11);

        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void verify()>();

        i1 = i1 + 1;

        goto label2;

     label3:
        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void resetFull()>();

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        r12 = interfaceinvoke $r4.<java.util.List: java.util.ListIterator listIterator()>();

        $r5 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getConfirmed()>();

        r13 = interfaceinvoke $r5.<java.util.List: java.util.ListIterator listIterator()>();

        i2 = lengthof r3;

        i3 = 0;

     label4:
        if i3 >= i2 goto label5;

        r15 = r3[i3];

        interfaceinvoke r12.<java.util.ListIterator: java.lang.Object next()>();

        interfaceinvoke r13.<java.util.ListIterator: java.lang.Object next()>();

        interfaceinvoke r12.<java.util.ListIterator: void add(java.lang.Object)>(r15);

        interfaceinvoke r13.<java.util.ListIterator: void add(java.lang.Object)>(r15);

        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void verify()>();

        i3 = i3 + 1;

        goto label4;

     label5:
        return;
    }

    public void testListIteratorSet()
    {
        org.apache.commons.collections4.list.AbstractListTest r0;
        java.lang.Object[] r1;
        java.util.ListIterator r2, r3;
        int i0, i1;
        java.lang.Object r5;
        boolean $z0;
        java.util.List $r6, $r7;

        r0 := @this: org.apache.commons.collections4.list.AbstractListTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: boolean isSetSupported()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r1 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.lang.Object[] getFullElements()>();

        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void resetFull()>();

        $r6 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        r2 = interfaceinvoke $r6.<java.util.List: java.util.ListIterator listIterator()>();

        $r7 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getConfirmed()>();

        r3 = interfaceinvoke $r7.<java.util.List: java.util.ListIterator listIterator()>();

        i0 = lengthof r1;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        r5 = r1[i1];

        interfaceinvoke r2.<java.util.ListIterator: java.lang.Object next()>();

        interfaceinvoke r3.<java.util.ListIterator: java.lang.Object next()>();

        interfaceinvoke r2.<java.util.ListIterator: void set(java.lang.Object)>(r5);

        interfaceinvoke r3.<java.util.ListIterator: void set(java.lang.Object)>(r5);

        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void verify()>();

        i1 = i1 + 1;

        goto label2;

     label3:
        return;
    }

    public void testEmptyListSerialization() throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.commons.collections4.list.AbstractListTest r0;
        java.util.List r1, r3;
        byte[] r2;
        boolean $z0, $z1;
        java.io.Serializable $r4;
        java.lang.Object $r5;
        int $i0, $i1;

        r0 := @this: org.apache.commons.collections4.list.AbstractListTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List makeObject()>();

        $z0 = r1 instanceof java.io.Serializable;

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: boolean isTestSerialization()>();

        if $z1 != 0 goto label2;

     label1:
        return;

     label2:
        $r4 = (java.io.Serializable) r1;

        r2 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: byte[] writeExternalFormToBytes(java.io.Serializable)>($r4);

        $r5 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.lang.Object readExternalFormFromBytes(byte[])>(r2);

        r3 = (java.util.List) $r5;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.String,int,int)>("Both lists are empty", 0, $i0);

        $i1 = interfaceinvoke r3.<java.util.List: int size()>();

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.String,int,int)>("Both lists are empty", 0, $i1);

        return;
    }

    public void testFullListSerialization() throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.commons.collections4.list.AbstractListTest r0;
        java.util.List r1, r3;
        int i0, $i1, $i2;
        byte[] r2;
        java.lang.Object[] $r4;
        boolean $z0, $z1;
        java.io.Serializable $r5;
        java.lang.Object $r6;

        r0 := @this: org.apache.commons.collections4.list.AbstractListTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List makeFullCollection()>();

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.lang.Object[] getFullElements()>();

        i0 = lengthof $r4;

        $z0 = r1 instanceof java.io.Serializable;

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: boolean isTestSerialization()>();

        if $z1 != 0 goto label2;

     label1:
        return;

     label2:
        $r5 = (java.io.Serializable) r1;

        r2 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: byte[] writeExternalFormToBytes(java.io.Serializable)>($r5);

        $r6 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.lang.Object readExternalFormFromBytes(byte[])>(r2);

        r3 = (java.util.List) $r6;

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.String,int,int)>("Both lists are same size", i0, $i1);

        $i2 = interfaceinvoke r3.<java.util.List: int size()>();

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.String,int,int)>("Both lists are same size", i0, $i2);

        return;
    }

    public void testEmptyListCompatibility() throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.commons.collections4.list.AbstractListTest r0;
        java.util.List r1, r2;
        boolean $z0, $z1, $z2;
        java.lang.String $r3;
        java.lang.Object $r4;
        int $i0;

        r0 := @this: org.apache.commons.collections4.list.AbstractListTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List makeObject()>();

        $z0 = r1 instanceof java.io.Serializable;

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: boolean skipSerializedCanonicalTests()>();

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: boolean isTestSerialization()>();

        if $z2 == 0 goto label1;

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.lang.String getCanonicalEmptyCollectionName(java.lang.Object)>(r1);

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.lang.Object readExternalFormFromDisk(java.lang.String)>($r3);

        r2 = (java.util.List) $r4;

        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.String,int,int)>("List is empty", 0, $i0);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.Object,java.lang.Object)>(r1, r2);

     label1:
        return;
    }

    public void testFullListCompatibility() throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.commons.collections4.list.AbstractListTest r0;
        java.util.List r1, r2;
        boolean $z0, $z1, $z2;
        java.lang.String $r3;
        java.lang.Object $r4;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.commons.collections4.list.AbstractListTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List makeFullCollection()>();

        $z0 = r1 instanceof java.io.Serializable;

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: boolean skipSerializedCanonicalTests()>();

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: boolean isTestSerialization()>();

        if $z2 == 0 goto label2;

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.lang.String getCanonicalFullCollectionName(java.lang.Object)>(r1);

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.lang.Object readExternalFormFromDisk(java.lang.String)>($r3);

        r2 = (java.util.List) $r4;

        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i0 != 4 goto label1;

        return;

     label1:
        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        $i2 = interfaceinvoke r2.<java.util.List: int size()>();

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.String,int,int)>("List is the right size", $i1, $i2);

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void assertEquals(java.lang.Object,java.lang.Object)>(r1, r2);

     label2:
        return;
    }

    public org.apache.commons.collections4.BulkTest bulkTestSubList()
    {
        org.apache.commons.collections4.list.AbstractListTest r0;
        java.lang.Object[] $r1;
        int $i0, $i1;
        org.apache.commons.collections4.list.AbstractListTest$BulkTestSubList $r2;

        r0 := @this: org.apache.commons.collections4.list.AbstractListTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.lang.Object[] getFullElements()>();

        $i0 = lengthof $r1;

        $i1 = $i0 - 6;

        if $i1 >= 10 goto label1;

        return null;

     label1:
        $r2 = new org.apache.commons.collections4.list.AbstractListTest$BulkTestSubList;

        specialinvoke $r2.<org.apache.commons.collections4.list.AbstractListTest$BulkTestSubList: void <init>(org.apache.commons.collections4.list.AbstractListTest)>(r0);

        return $r2;
    }

    public void testListSubListFailFastOnAdd()
    {
        org.apache.commons.collections4.list.AbstractListTest r0;
        int i0;
        boolean $z0, $z1;
        java.util.List $r1, $r2, $r3, $r6, $r7, $r10, $r11, $r13, $r14, $r15, $r17, r18, r19, r20, r21;
        java.lang.Object[] $r4, $r8, $r12, $r16;
        java.lang.Object $r5, $r9;

        r0 := @this: org.apache.commons.collections4.list.AbstractListTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: boolean isFailFastSupported()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $z1 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: boolean isAddSupported()>();

        if $z1 != 0 goto label2;

        return;

     label2:
        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void resetFull()>();

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        r18 = interfaceinvoke $r2.<java.util.List: java.util.List subList(int,int)>(1, i0);

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.lang.Object[] getOtherElements()>();

        $r5 = $r4[0];

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r5);

        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void failFastAll(java.util.List)>(r18);

        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void resetFull()>();

        $r6 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        r19 = interfaceinvoke $r6.<java.util.List: java.util.List subList(int,int)>(1, i0);

        $r7 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        $r8 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.lang.Object[] getOtherElements()>();

        $r9 = $r8[0];

        interfaceinvoke $r7.<java.util.List: void add(int,java.lang.Object)>(0, $r9);

        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void failFastAll(java.util.List)>(r19);

        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void resetFull()>();

        $r10 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        r20 = interfaceinvoke $r10.<java.util.List: java.util.List subList(int,int)>(1, i0);

        $r11 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        $r12 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.lang.Object[] getOtherElements()>();

        $r13 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r12);

        interfaceinvoke $r11.<java.util.List: boolean addAll(java.util.Collection)>($r13);

        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void failFastAll(java.util.List)>(r20);

        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void resetFull()>();

        $r14 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        r21 = interfaceinvoke $r14.<java.util.List: java.util.List subList(int,int)>(1, i0);

        $r15 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        $r16 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.lang.Object[] getOtherElements()>();

        $r17 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r16);

        interfaceinvoke $r15.<java.util.List: boolean addAll(int,java.util.Collection)>(0, $r17);

        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void failFastAll(java.util.List)>(r21);

        return;
    }

    public void testListSubListFailFastOnRemove()
    {
        org.apache.commons.collections4.list.AbstractListTest r0;
        int i0;
        boolean $z0, $z1;
        java.util.List $r1, $r2, $r3, $r5, $r6, $r9, $r10, $r12, $r13, $r14, $r16, $r17, $r18, r19, r20, r21, r22, r23;
        java.lang.Object[] $r7, $r11, $r15;
        java.lang.Object $r8;

        r0 := @this: org.apache.commons.collections4.list.AbstractListTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: boolean isFailFastSupported()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $z1 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: boolean isRemoveSupported()>();

        if $z1 != 0 goto label2;

        return;

     label2:
        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void resetFull()>();

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        r19 = interfaceinvoke $r2.<java.util.List: java.util.List subList(int,int)>(1, i0);

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        interfaceinvoke $r3.<java.util.List: java.lang.Object remove(int)>(0);

        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void failFastAll(java.util.List)>(r19);

        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void resetFull()>();

        $r5 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        r20 = interfaceinvoke $r5.<java.util.List: java.util.List subList(int,int)>(1, i0);

        $r6 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        $r7 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.lang.Object[] getFullElements()>();

        $r8 = $r7[2];

        interfaceinvoke $r6.<java.util.List: boolean remove(java.lang.Object)>($r8);

        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void failFastAll(java.util.List)>(r20);

        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void resetFull()>();

        $r9 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        r21 = interfaceinvoke $r9.<java.util.List: java.util.List subList(int,int)>(1, i0);

        $r10 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        $r11 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.lang.Object[] getFullElements()>();

        $r12 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r11);

        interfaceinvoke $r10.<java.util.List: boolean removeAll(java.util.Collection)>($r12);

        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void failFastAll(java.util.List)>(r21);

        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void resetFull()>();

        $r13 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        r22 = interfaceinvoke $r13.<java.util.List: java.util.List subList(int,int)>(1, i0);

        $r14 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        $r15 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.lang.Object[] getOtherElements()>();

        $r16 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r15);

        interfaceinvoke $r14.<java.util.List: boolean retainAll(java.util.Collection)>($r16);

        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void failFastAll(java.util.List)>(r22);

        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void resetFull()>();

        $r17 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        r23 = interfaceinvoke $r17.<java.util.List: java.util.List subList(int,int)>(1, i0);

        $r18 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        interfaceinvoke $r18.<java.util.List: void clear()>();

        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void failFastAll(java.util.List)>(r23);

        return;
    }

    protected void failFastAll(java.util.List)
    {
        org.apache.commons.collections4.list.AbstractListTest r0;
        java.util.List r1;
        java.lang.reflect.Method[] r2;
        int i0, i1;
        java.lang.reflect.Method r4;
        java.lang.Class $r5;

        r0 := @this: org.apache.commons.collections4.list.AbstractListTest;

        r1 := @parameter0: java.util.List;

        $r5 = class "Ljava/util/List;";

        r2 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r4 = r2[i1];

        virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void failFastMethod(java.util.List,java.lang.reflect.Method)>(r1, r4);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    protected void failFastMethod(java.util.List, java.lang.reflect.Method)
    {
        org.apache.commons.collections4.list.AbstractListTest r0;
        java.util.List r1;
        java.lang.reflect.Method r2;
        java.lang.Object r3;
        java.util.Set r4;
        java.lang.Class[] r5;
        java.lang.Object[] r6, $r9, $r21;
        java.lang.Throwable r7;
        java.lang.String $r8, $r12, $r15, $r26, $r30;
        boolean $z0, $z1;
        int $i0, $i1, i2;
        java.lang.StringBuilder $r11, $r13, $r14, $r25, $r27, $r28, $r29;
        java.lang.Class $r16, $r17, $r18, $r19, $r20;
        java.lang.Integer $r22;
        java.lang.IllegalAccessException $r23;
        java.lang.reflect.InvocationTargetException $r24;

        r0 := @this: org.apache.commons.collections4.list.AbstractListTest;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.lang.reflect.Method;

        $r8 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>("equals");

        if $z0 == 0 goto label01;

        return;

     label01:
        $r9 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.lang.Object[] getOtherElements()>();

        r3 = $r9[0];

        r4 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(r3);

        r5 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof r5;

        r6 = newarray (java.lang.Object)[$i0];

        i2 = 0;

     label02:
        $i1 = lengthof r6;

        if i2 >= $i1 goto label07;

        $r17 = r5[i2];

        $r16 = <java.lang.Integer: java.lang.Class TYPE>;

        if $r17 != $r16 goto label03;

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        r6[i2] = $r22;

        goto label06;

     label03:
        $r18 = r5[i2];

        if $r18 != class "Ljava/util/Collection;" goto label04;

        r6[i2] = r4;

        goto label06;

     label04:
        $r19 = r5[i2];

        if $r19 != class "Ljava/lang/Object;" goto label05;

        r6[i2] = r3;

        goto label06;

     label05:
        $r20 = r5[i2];

        if $r20 != class "[Ljava/lang/Object;" goto label06;

        $r21 = newarray (java.lang.Object)[0];

        r6[i2] = $r21;

     label06:
        i2 = i2 + 1;

        goto label02;

     label07:
        virtualinvoke r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r1, r6);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.String getName()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should raise ConcurrentModification");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void fail(java.lang.String)>($r15);

     label08:
        goto label12;

     label09:
        $r23 := @caughtexception;

        goto label12;

     label10:
        $r24 := @caughtexception;

        r7 = virtualinvoke $r24.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $z1 = r7 instanceof java.util.ConcurrentModificationException;

        if $z1 == 0 goto label11;

        return;

     label11:
        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.String getName()>();

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" raised unexpected ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r24);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.collections4.list.AbstractListTest: void fail(java.lang.String)>($r30);

     label12:
        return;

        catch java.lang.IllegalAccessException from label07 to label08 with label09;
        catch java.lang.reflect.InvocationTargetException from label07 to label08 with label10;
    }

    public org.apache.commons.collections4.BulkTest bulkTestListIterator()
    {
        org.apache.commons.collections4.list.AbstractListTest r0;
        org.apache.commons.collections4.list.AbstractListTest$TestListIterator $r1;

        r0 := @this: org.apache.commons.collections4.list.AbstractListTest;

        $r1 = new org.apache.commons.collections4.list.AbstractListTest$TestListIterator;

        specialinvoke $r1.<org.apache.commons.collections4.list.AbstractListTest$TestListIterator: void <init>(org.apache.commons.collections4.list.AbstractListTest)>(r0);

        return $r1;
    }

    public volatile java.util.Collection getConfirmed()
    {
        org.apache.commons.collections4.list.AbstractListTest r0;
        java.util.List $r1;

        r0 := @this: org.apache.commons.collections4.list.AbstractListTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getConfirmed()>();

        return $r1;
    }

    public volatile java.util.Collection getCollection()
    {
        org.apache.commons.collections4.list.AbstractListTest r0;
        java.util.List $r1;

        r0 := @this: org.apache.commons.collections4.list.AbstractListTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List getCollection()>();

        return $r1;
    }

    public volatile java.util.Collection makeFullCollection()
    {
        org.apache.commons.collections4.list.AbstractListTest r0;
        java.util.List $r1;

        r0 := @this: org.apache.commons.collections4.list.AbstractListTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List makeFullCollection()>();

        return $r1;
    }

    public volatile java.util.Collection makeObject()
    {
        org.apache.commons.collections4.list.AbstractListTest r0;
        java.util.List $r1;

        r0 := @this: org.apache.commons.collections4.list.AbstractListTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List makeObject()>();

        return $r1;
    }

    public volatile java.lang.Object makeObject()
    {
        org.apache.commons.collections4.list.AbstractListTest r0;
        java.util.List $r1;

        r0 := @this: org.apache.commons.collections4.list.AbstractListTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: java.util.List makeObject()>();

        return $r1;
    }
}
