public class org.apache.commons.collections4.iterators.ZippingIteratorTest extends org.apache.commons.collections4.iterators.AbstractIteratorTest
{
    private java.util.ArrayList evens;
    private java.util.ArrayList odds;
    private java.util.ArrayList fib;

    public void <init>(java.lang.String)
    {
        org.apache.commons.collections4.iterators.ZippingIteratorTest r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.collections4.iterators.ZippingIteratorTest;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.collections4.iterators.AbstractIteratorTest: void <init>(java.lang.String)>(r1);

        r0.<org.apache.commons.collections4.iterators.ZippingIteratorTest: java.util.ArrayList evens> = null;

        r0.<org.apache.commons.collections4.iterators.ZippingIteratorTest: java.util.ArrayList odds> = null;

        r0.<org.apache.commons.collections4.iterators.ZippingIteratorTest: java.util.ArrayList fib> = null;

        return;
    }

    public void setUp() throws java.lang.Exception
    {
        org.apache.commons.collections4.iterators.ZippingIteratorTest r0;
        java.util.ArrayList $r1, $r2, $r3, $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r22;
        java.lang.Integer $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23;
        int $i0, i1;

        r0 := @this: org.apache.commons.collections4.iterators.ZippingIteratorTest;

        specialinvoke r0.<org.apache.commons.collections4.iterators.AbstractIteratorTest: void setUp()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.collections4.iterators.ZippingIteratorTest: java.util.ArrayList evens> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.collections4.iterators.ZippingIteratorTest: java.util.ArrayList odds> = $r2;

        i1 = 0;

     label1:
        if i1 >= 20 goto label4;

        $i0 = i1 % 2;

        if 0 != $i0 goto label2;

        $r22 = r0.<org.apache.commons.collections4.iterators.ZippingIteratorTest: java.util.ArrayList evens>;

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        virtualinvoke $r22.<java.util.ArrayList: boolean add(java.lang.Object)>($r23);

        goto label3;

     label2:
        $r20 = r0.<org.apache.commons.collections4.iterators.ZippingIteratorTest: java.util.ArrayList odds>;

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        virtualinvoke $r20.<java.util.ArrayList: boolean add(java.lang.Object)>($r21);

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.collections4.iterators.ZippingIteratorTest: java.util.ArrayList fib> = $r3;

        $r4 = r0.<org.apache.commons.collections4.iterators.ZippingIteratorTest: java.util.ArrayList fib>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

        $r6 = r0.<org.apache.commons.collections4.iterators.ZippingIteratorTest: java.util.ArrayList fib>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

        $r8 = r0.<org.apache.commons.collections4.iterators.ZippingIteratorTest: java.util.ArrayList fib>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>($r9);

        $r10 = r0.<org.apache.commons.collections4.iterators.ZippingIteratorTest: java.util.ArrayList fib>;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        virtualinvoke $r10.<java.util.ArrayList: boolean add(java.lang.Object)>($r11);

        $r12 = r0.<org.apache.commons.collections4.iterators.ZippingIteratorTest: java.util.ArrayList fib>;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        virtualinvoke $r12.<java.util.ArrayList: boolean add(java.lang.Object)>($r13);

        $r14 = r0.<org.apache.commons.collections4.iterators.ZippingIteratorTest: java.util.ArrayList fib>;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8);

        virtualinvoke $r14.<java.util.ArrayList: boolean add(java.lang.Object)>($r15);

        $r16 = r0.<org.apache.commons.collections4.iterators.ZippingIteratorTest: java.util.ArrayList fib>;

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(13);

        virtualinvoke $r16.<java.util.ArrayList: boolean add(java.lang.Object)>($r17);

        $r18 = r0.<org.apache.commons.collections4.iterators.ZippingIteratorTest: java.util.ArrayList fib>;

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(21);

        virtualinvoke $r18.<java.util.ArrayList: boolean add(java.lang.Object)>($r19);

        return;
    }

    public org.apache.commons.collections4.iterators.ZippingIterator makeEmptyIterator()
    {
        org.apache.commons.collections4.iterators.ZippingIteratorTest r0;
        org.apache.commons.collections4.iterators.ZippingIterator $r1;
        java.util.Iterator[] $r2;
        org.apache.commons.collections4.ResettableIterator $r3;

        r0 := @this: org.apache.commons.collections4.iterators.ZippingIteratorTest;

        $r1 = new org.apache.commons.collections4.iterators.ZippingIterator;

        $r2 = newarray (java.util.Iterator)[1];

        $r3 = staticinvoke <org.apache.commons.collections4.IteratorUtils: org.apache.commons.collections4.ResettableIterator emptyIterator()>();

        $r2[0] = $r3;

        specialinvoke $r1.<org.apache.commons.collections4.iterators.ZippingIterator: void <init>(java.util.Iterator[])>($r2);

        return $r1;
    }

    public org.apache.commons.collections4.iterators.ZippingIterator makeObject()
    {
        org.apache.commons.collections4.iterators.ZippingIteratorTest r0;
        org.apache.commons.collections4.iterators.ZippingIterator $r1;
        java.util.ArrayList $r2, $r4, $r6;
        java.util.Iterator $r3, $r5, $r7;

        r0 := @this: org.apache.commons.collections4.iterators.ZippingIteratorTest;

        $r1 = new org.apache.commons.collections4.iterators.ZippingIterator;

        $r2 = r0.<org.apache.commons.collections4.iterators.ZippingIteratorTest: java.util.ArrayList evens>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>();

        $r4 = r0.<org.apache.commons.collections4.iterators.ZippingIteratorTest: java.util.ArrayList odds>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.util.Iterator iterator()>();

        $r6 = r0.<org.apache.commons.collections4.iterators.ZippingIteratorTest: java.util.ArrayList fib>;

        $r7 = virtualinvoke $r6.<java.util.ArrayList: java.util.Iterator iterator()>();

        specialinvoke $r1.<org.apache.commons.collections4.iterators.ZippingIterator: void <init>(java.util.Iterator,java.util.Iterator,java.util.Iterator)>($r3, $r5, $r7);

        return $r1;
    }

    public void testIterateEven()
    {
        org.apache.commons.collections4.iterators.ZippingIteratorTest r0;
        org.apache.commons.collections4.iterators.ZippingIterator $r2;
        java.util.Iterator[] $r3;
        java.util.ArrayList $r4, $r6, $r7;
        java.util.Iterator $r5;
        int $i0, i1;
        boolean $z0, $z1, $z2;
        java.lang.Object $r8, $r9;

        r0 := @this: org.apache.commons.collections4.iterators.ZippingIteratorTest;

        $r2 = new org.apache.commons.collections4.iterators.ZippingIterator;

        $r3 = newarray (java.util.Iterator)[1];

        $r4 = r0.<org.apache.commons.collections4.iterators.ZippingIteratorTest: java.util.ArrayList evens>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.util.Iterator iterator()>();

        $r3[0] = $r5;

        specialinvoke $r2.<org.apache.commons.collections4.iterators.ZippingIterator: void <init>(java.util.Iterator[])>($r3);

        i1 = 0;

     label1:
        $r6 = r0.<org.apache.commons.collections4.iterators.ZippingIteratorTest: java.util.ArrayList evens>;

        $i0 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        if i1 >= $i0 goto label2;

        $z1 = virtualinvoke $r2.<org.apache.commons.collections4.iterators.ZippingIterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.ZippingIteratorTest: void assertTrue(boolean)>($z1);

        $r7 = r0.<org.apache.commons.collections4.iterators.ZippingIteratorTest: java.util.ArrayList evens>;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r9 = virtualinvoke $r2.<org.apache.commons.collections4.iterators.ZippingIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.ZippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>($r8, $r9);

        i1 = i1 + 1;

        goto label1;

     label2:
        $z0 = virtualinvoke $r2.<org.apache.commons.collections4.iterators.ZippingIterator: boolean hasNext()>();

        if $z0 != 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        staticinvoke <org.apache.commons.collections4.iterators.ZippingIteratorTest: void assertTrue(boolean)>($z2);

        return;
    }

    public void testIterateEvenOdd()
    {
        org.apache.commons.collections4.iterators.ZippingIteratorTest r0;
        org.apache.commons.collections4.iterators.ZippingIterator $r2;
        java.util.ArrayList $r3, $r5;
        java.util.Iterator $r4, $r6;
        boolean $z0, $z1, $z2;
        java.lang.Integer $r7;
        java.lang.Object $r8;
        int i0;

        r0 := @this: org.apache.commons.collections4.iterators.ZippingIteratorTest;

        $r2 = new org.apache.commons.collections4.iterators.ZippingIterator;

        $r3 = r0.<org.apache.commons.collections4.iterators.ZippingIteratorTest: java.util.ArrayList evens>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

        $r5 = r0.<org.apache.commons.collections4.iterators.ZippingIteratorTest: java.util.ArrayList odds>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.util.Iterator iterator()>();

        specialinvoke $r2.<org.apache.commons.collections4.iterators.ZippingIterator: void <init>(java.util.Iterator,java.util.Iterator)>($r4, $r6);

        i0 = 0;

     label1:
        if i0 >= 20 goto label2;

        $z1 = virtualinvoke $r2.<org.apache.commons.collections4.iterators.ZippingIterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.ZippingIteratorTest: void assertTrue(boolean)>($z1);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r8 = virtualinvoke $r2.<org.apache.commons.collections4.iterators.ZippingIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.ZippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>($r7, $r8);

        i0 = i0 + 1;

        goto label1;

     label2:
        $z0 = virtualinvoke $r2.<org.apache.commons.collections4.iterators.ZippingIterator: boolean hasNext()>();

        if $z0 != 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        staticinvoke <org.apache.commons.collections4.iterators.ZippingIteratorTest: void assertTrue(boolean)>($z2);

        return;
    }

    public void testIterateOddEven()
    {
        org.apache.commons.collections4.iterators.ZippingIteratorTest r0;
        int i0, $i1, $i2, $i3, i4, i5;
        org.apache.commons.collections4.iterators.ZippingIterator $r2;
        java.util.ArrayList $r3, $r5, $r9, $r12;
        java.util.Iterator $r4, $r6;
        boolean $z0, $z1, $z2;
        java.lang.Object $r7, $r10, $r13;
        java.lang.Integer $r8, $r11, $r14;

        r0 := @this: org.apache.commons.collections4.iterators.ZippingIteratorTest;

        $r2 = new org.apache.commons.collections4.iterators.ZippingIterator;

        $r3 = r0.<org.apache.commons.collections4.iterators.ZippingIteratorTest: java.util.ArrayList odds>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

        $r5 = r0.<org.apache.commons.collections4.iterators.ZippingIteratorTest: java.util.ArrayList evens>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.util.Iterator iterator()>();

        specialinvoke $r2.<org.apache.commons.collections4.iterators.ZippingIterator: void <init>(java.util.Iterator,java.util.Iterator)>($r4, $r6);

        i4 = 0;

        i5 = 0;

     label1:
        if i4 >= 20 goto label4;

        $z1 = virtualinvoke $r2.<org.apache.commons.collections4.iterators.ZippingIterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.ZippingIteratorTest: void assertTrue(boolean)>($z1);

        $r7 = virtualinvoke $r2.<org.apache.commons.collections4.iterators.ZippingIterator: java.lang.Object next()>();

        $r8 = (java.lang.Integer) $r7;

        i0 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        $i1 = i4 % 2;

        if $i1 != 0 goto label2;

        $r12 = r0.<org.apache.commons.collections4.iterators.ZippingIteratorTest: java.util.ArrayList odds>;

        $r13 = virtualinvoke $r12.<java.util.ArrayList: java.lang.Object get(int)>(i5);

        $r14 = (java.lang.Integer) $r13;

        $i3 = virtualinvoke $r14.<java.lang.Integer: int intValue()>();

        staticinvoke <org.apache.commons.collections4.iterators.ZippingIteratorTest: void assertEquals(int,int)>($i3, i0);

        goto label3;

     label2:
        $r9 = r0.<org.apache.commons.collections4.iterators.ZippingIteratorTest: java.util.ArrayList evens>;

        $r10 = virtualinvoke $r9.<java.util.ArrayList: java.lang.Object get(int)>(i5);

        $r11 = (java.lang.Integer) $r10;

        $i2 = virtualinvoke $r11.<java.lang.Integer: int intValue()>();

        staticinvoke <org.apache.commons.collections4.iterators.ZippingIteratorTest: void assertEquals(int,int)>($i2, i0);

        i5 = i5 + 1;

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        $z0 = virtualinvoke $r2.<org.apache.commons.collections4.iterators.ZippingIterator: boolean hasNext()>();

        if $z0 != 0 goto label5;

        $z2 = 1;

        goto label6;

     label5:
        $z2 = 0;

     label6:
        staticinvoke <org.apache.commons.collections4.iterators.ZippingIteratorTest: void assertTrue(boolean)>($z2);

        return;
    }

    public void testIterateEvenEven()
    {
        org.apache.commons.collections4.iterators.ZippingIteratorTest r0;
        org.apache.commons.collections4.iterators.ZippingIterator $r2;
        java.util.ArrayList $r3, $r5, $r7, $r8, $r11;
        java.util.Iterator $r4, $r6;
        int $i0, i1;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r9, $r10, $r12, $r13;

        r0 := @this: org.apache.commons.collections4.iterators.ZippingIteratorTest;

        $r2 = new org.apache.commons.collections4.iterators.ZippingIterator;

        $r3 = r0.<org.apache.commons.collections4.iterators.ZippingIteratorTest: java.util.ArrayList evens>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

        $r5 = r0.<org.apache.commons.collections4.iterators.ZippingIteratorTest: java.util.ArrayList evens>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.util.Iterator iterator()>();

        specialinvoke $r2.<org.apache.commons.collections4.iterators.ZippingIterator: void <init>(java.util.Iterator,java.util.Iterator)>($r4, $r6);

        i1 = 0;

     label1:
        $r7 = r0.<org.apache.commons.collections4.iterators.ZippingIteratorTest: java.util.ArrayList evens>;

        $i0 = virtualinvoke $r7.<java.util.ArrayList: int size()>();

        if i1 >= $i0 goto label2;

        $z1 = virtualinvoke $r2.<org.apache.commons.collections4.iterators.ZippingIterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.ZippingIteratorTest: void assertTrue(boolean)>($z1);

        $r8 = r0.<org.apache.commons.collections4.iterators.ZippingIteratorTest: java.util.ArrayList evens>;

        $r9 = virtualinvoke $r8.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r10 = virtualinvoke $r2.<org.apache.commons.collections4.iterators.ZippingIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.ZippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>($r9, $r10);

        $z2 = virtualinvoke $r2.<org.apache.commons.collections4.iterators.ZippingIterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.ZippingIteratorTest: void assertTrue(boolean)>($z2);

        $r11 = r0.<org.apache.commons.collections4.iterators.ZippingIteratorTest: java.util.ArrayList evens>;

        $r12 = virtualinvoke $r11.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r13 = virtualinvoke $r2.<org.apache.commons.collections4.iterators.ZippingIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.ZippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>($r12, $r13);

        i1 = i1 + 1;

        goto label1;

     label2:
        $z0 = virtualinvoke $r2.<org.apache.commons.collections4.iterators.ZippingIterator: boolean hasNext()>();

        if $z0 != 0 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        staticinvoke <org.apache.commons.collections4.iterators.ZippingIteratorTest: void assertTrue(boolean)>($z3);

        return;
    }

    public void testIterateFibEvenOdd()
    {
        org.apache.commons.collections4.iterators.ZippingIteratorTest r0;
        org.apache.commons.collections4.iterators.ZippingIterator $r2;
        java.util.ArrayList $r3, $r5, $r7;
        java.util.Iterator $r4, $r6, $r8;
        java.lang.Integer $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r25, $r27, $r29, $r31, $r33, $r35, $r37, $r39, $r41, $r43, $r45, $r47, $r49, $r51, $r53, $r55, $r57, $r59, $r61, $r63;
        java.lang.Object $r10, $r12, $r14, $r16, $r18, $r20, $r22, $r24, $r26, $r28, $r30, $r32, $r34, $r36, $r38, $r40, $r42, $r44, $r46, $r48, $r50, $r52, $r54, $r56, $r58, $r60, $r62, $r64;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.collections4.iterators.ZippingIteratorTest;

        $r2 = new org.apache.commons.collections4.iterators.ZippingIterator;

        $r3 = r0.<org.apache.commons.collections4.iterators.ZippingIteratorTest: java.util.ArrayList fib>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

        $r5 = r0.<org.apache.commons.collections4.iterators.ZippingIteratorTest: java.util.ArrayList evens>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.util.Iterator iterator()>();

        $r7 = r0.<org.apache.commons.collections4.iterators.ZippingIteratorTest: java.util.ArrayList odds>;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.util.Iterator iterator()>();

        specialinvoke $r2.<org.apache.commons.collections4.iterators.ZippingIterator: void <init>(java.util.Iterator,java.util.Iterator,java.util.Iterator)>($r4, $r6, $r8);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r10 = virtualinvoke $r2.<org.apache.commons.collections4.iterators.ZippingIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.ZippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>($r9, $r10);

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r12 = virtualinvoke $r2.<org.apache.commons.collections4.iterators.ZippingIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.ZippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>($r11, $r12);

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r14 = virtualinvoke $r2.<org.apache.commons.collections4.iterators.ZippingIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.ZippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>($r13, $r14);

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r16 = virtualinvoke $r2.<org.apache.commons.collections4.iterators.ZippingIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.ZippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>($r15, $r16);

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r18 = virtualinvoke $r2.<org.apache.commons.collections4.iterators.ZippingIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.ZippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>($r17, $r18);

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r20 = virtualinvoke $r2.<org.apache.commons.collections4.iterators.ZippingIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.ZippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>($r19, $r20);

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r22 = virtualinvoke $r2.<org.apache.commons.collections4.iterators.ZippingIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.ZippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>($r21, $r22);

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r24 = virtualinvoke $r2.<org.apache.commons.collections4.iterators.ZippingIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.ZippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>($r23, $r24);

        $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r26 = virtualinvoke $r2.<org.apache.commons.collections4.iterators.ZippingIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.ZippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>($r25, $r26);

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r28 = virtualinvoke $r2.<org.apache.commons.collections4.iterators.ZippingIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.ZippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>($r27, $r28);

        $r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        $r30 = virtualinvoke $r2.<org.apache.commons.collections4.iterators.ZippingIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.ZippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>($r29, $r30);

        $r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(7);

        $r32 = virtualinvoke $r2.<org.apache.commons.collections4.iterators.ZippingIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.ZippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>($r31, $r32);

        $r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r34 = virtualinvoke $r2.<org.apache.commons.collections4.iterators.ZippingIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.ZippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>($r33, $r34);

        $r35 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8);

        $r36 = virtualinvoke $r2.<org.apache.commons.collections4.iterators.ZippingIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.ZippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>($r35, $r36);

        $r37 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9);

        $r38 = virtualinvoke $r2.<org.apache.commons.collections4.iterators.ZippingIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.ZippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>($r37, $r38);

        $r39 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8);

        $r40 = virtualinvoke $r2.<org.apache.commons.collections4.iterators.ZippingIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.ZippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>($r39, $r40);

        $r41 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        $r42 = virtualinvoke $r2.<org.apache.commons.collections4.iterators.ZippingIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.ZippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>($r41, $r42);

        $r43 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(11);

        $r44 = virtualinvoke $r2.<org.apache.commons.collections4.iterators.ZippingIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.ZippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>($r43, $r44);

        $r45 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(13);

        $r46 = virtualinvoke $r2.<org.apache.commons.collections4.iterators.ZippingIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.ZippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>($r45, $r46);

        $r47 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(12);

        $r48 = virtualinvoke $r2.<org.apache.commons.collections4.iterators.ZippingIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.ZippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>($r47, $r48);

        $r49 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(13);

        $r50 = virtualinvoke $r2.<org.apache.commons.collections4.iterators.ZippingIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.ZippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>($r49, $r50);

        $r51 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(21);

        $r52 = virtualinvoke $r2.<org.apache.commons.collections4.iterators.ZippingIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.ZippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>($r51, $r52);

        $r53 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(14);

        $r54 = virtualinvoke $r2.<org.apache.commons.collections4.iterators.ZippingIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.ZippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>($r53, $r54);

        $r55 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(15);

        $r56 = virtualinvoke $r2.<org.apache.commons.collections4.iterators.ZippingIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.ZippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>($r55, $r56);

        $r57 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(16);

        $r58 = virtualinvoke $r2.<org.apache.commons.collections4.iterators.ZippingIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.ZippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>($r57, $r58);

        $r59 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(17);

        $r60 = virtualinvoke $r2.<org.apache.commons.collections4.iterators.ZippingIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.ZippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>($r59, $r60);

        $r61 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(18);

        $r62 = virtualinvoke $r2.<org.apache.commons.collections4.iterators.ZippingIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.ZippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>($r61, $r62);

        $r63 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(19);

        $r64 = virtualinvoke $r2.<org.apache.commons.collections4.iterators.ZippingIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.ZippingIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>($r63, $r64);

        $z0 = virtualinvoke $r2.<org.apache.commons.collections4.iterators.ZippingIterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.apache.commons.collections4.iterators.ZippingIteratorTest: void assertTrue(boolean)>($z1);

        return;
    }

    public void testRemoveFromSingle()
    {
        org.apache.commons.collections4.iterators.ZippingIteratorTest r0;
        java.lang.Object r2;
        java.lang.Integer r3;
        org.apache.commons.collections4.iterators.ZippingIterator $r4;
        java.util.Iterator[] $r5;
        java.util.ArrayList $r6, $r8, $r9;
        java.util.Iterator $r7;
        boolean $z0;
        int $i0, $i1, $i2, i3;

        r0 := @this: org.apache.commons.collections4.iterators.ZippingIteratorTest;

        $r4 = new org.apache.commons.collections4.iterators.ZippingIterator;

        $r5 = newarray (java.util.Iterator)[1];

        $r6 = r0.<org.apache.commons.collections4.iterators.ZippingIteratorTest: java.util.ArrayList evens>;

        $r7 = virtualinvoke $r6.<java.util.ArrayList: java.util.Iterator iterator()>();

        $r5[0] = $r7;

        specialinvoke $r4.<org.apache.commons.collections4.iterators.ZippingIterator: void <init>(java.util.Iterator[])>($r5);

        $r8 = r0.<org.apache.commons.collections4.iterators.ZippingIteratorTest: java.util.ArrayList evens>;

        i3 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

     label1:
        $z0 = virtualinvoke $r4.<org.apache.commons.collections4.iterators.ZippingIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        r2 = virtualinvoke $r4.<org.apache.commons.collections4.iterators.ZippingIterator: java.lang.Object next()>();

        r3 = (java.lang.Integer) r2;

        $i1 = virtualinvoke r3.<java.lang.Integer: int intValue()>();

        $i2 = $i1 % 4;

        if $i2 != 0 goto label2;

        i3 = i3 + -1;

        virtualinvoke $r4.<org.apache.commons.collections4.iterators.ZippingIterator: void remove()>();

     label2:
        goto label1;

     label3:
        $r9 = r0.<org.apache.commons.collections4.iterators.ZippingIteratorTest: java.util.ArrayList evens>;

        $i0 = virtualinvoke $r9.<java.util.ArrayList: int size()>();

        staticinvoke <org.apache.commons.collections4.iterators.ZippingIteratorTest: void assertEquals(int,int)>(i3, $i0);

        return;
    }

    public void testRemoveFromDouble()
    {
        org.apache.commons.collections4.iterators.ZippingIteratorTest r0;
        java.lang.Object r2;
        java.lang.Integer r3;
        org.apache.commons.collections4.iterators.ZippingIterator $r4;
        java.util.ArrayList $r5, $r7, $r9, $r10, $r11, $r12;
        java.util.Iterator $r6, $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.iterators.ZippingIteratorTest;

        $r4 = new org.apache.commons.collections4.iterators.ZippingIterator;

        $r5 = r0.<org.apache.commons.collections4.iterators.ZippingIteratorTest: java.util.ArrayList evens>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.util.Iterator iterator()>();

        $r7 = r0.<org.apache.commons.collections4.iterators.ZippingIteratorTest: java.util.ArrayList odds>;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.util.Iterator iterator()>();

        specialinvoke $r4.<org.apache.commons.collections4.iterators.ZippingIterator: void <init>(java.util.Iterator,java.util.Iterator)>($r6, $r8);

        $r9 = r0.<org.apache.commons.collections4.iterators.ZippingIteratorTest: java.util.ArrayList evens>;

        $i0 = virtualinvoke $r9.<java.util.ArrayList: int size()>();

        $r10 = r0.<org.apache.commons.collections4.iterators.ZippingIteratorTest: java.util.ArrayList odds>;

        $i1 = virtualinvoke $r10.<java.util.ArrayList: int size()>();

        i9 = $i0 + $i1;

     label1:
        $z0 = virtualinvoke $r4.<org.apache.commons.collections4.iterators.ZippingIterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        r2 = virtualinvoke $r4.<org.apache.commons.collections4.iterators.ZippingIterator: java.lang.Object next()>();

        r3 = (java.lang.Integer) r2;

        $i5 = virtualinvoke r3.<java.lang.Integer: int intValue()>();

        $i6 = $i5 % 4;

        if $i6 == 0 goto label2;

        $i7 = virtualinvoke r3.<java.lang.Integer: int intValue()>();

        $i8 = $i7 % 3;

        if $i8 != 0 goto label3;

     label2:
        i9 = i9 + -1;

        virtualinvoke $r4.<org.apache.commons.collections4.iterators.ZippingIterator: void remove()>();

     label3:
        goto label1;

     label4:
        $r11 = r0.<org.apache.commons.collections4.iterators.ZippingIteratorTest: java.util.ArrayList evens>;

        $i2 = virtualinvoke $r11.<java.util.ArrayList: int size()>();

        $r12 = r0.<org.apache.commons.collections4.iterators.ZippingIteratorTest: java.util.ArrayList odds>;

        $i3 = virtualinvoke $r12.<java.util.ArrayList: int size()>();

        $i4 = $i2 + $i3;

        staticinvoke <org.apache.commons.collections4.iterators.ZippingIteratorTest: void assertEquals(int,int)>(i9, $i4);

        return;
    }

    public volatile java.util.Iterator makeObject()
    {
        org.apache.commons.collections4.iterators.ZippingIteratorTest r0;
        org.apache.commons.collections4.iterators.ZippingIterator $r1;

        r0 := @this: org.apache.commons.collections4.iterators.ZippingIteratorTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.ZippingIteratorTest: org.apache.commons.collections4.iterators.ZippingIterator makeObject()>();

        return $r1;
    }

    public volatile java.util.Iterator makeEmptyIterator()
    {
        org.apache.commons.collections4.iterators.ZippingIteratorTest r0;
        org.apache.commons.collections4.iterators.ZippingIterator $r1;

        r0 := @this: org.apache.commons.collections4.iterators.ZippingIteratorTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.ZippingIteratorTest: org.apache.commons.collections4.iterators.ZippingIterator makeEmptyIterator()>();

        return $r1;
    }

    public volatile java.lang.Object makeObject()
    {
        org.apache.commons.collections4.iterators.ZippingIteratorTest r0;
        org.apache.commons.collections4.iterators.ZippingIterator $r1;

        r0 := @this: org.apache.commons.collections4.iterators.ZippingIteratorTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.ZippingIteratorTest: org.apache.commons.collections4.iterators.ZippingIterator makeObject()>();

        return $r1;
    }
}
