public class org.apache.commons.collections4.iterators.IteratorIterableTest extends org.apache.commons.collections4.BulkTest
{

    public static junit.framework.Test suite()
    {
        junit.framework.TestSuite $r0;

        $r0 = staticinvoke <org.apache.commons.collections4.BulkTest: junit.framework.TestSuite makeSuite(java.lang.Class)>(class "Lorg/apache/commons/collections4/iterators/IteratorIterableTest;");

        return $r0;
    }

    public void <init>(java.lang.String)
    {
        org.apache.commons.collections4.iterators.IteratorIterableTest r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.collections4.iterators.IteratorIterableTest;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.collections4.BulkTest: void <init>(java.lang.String)>(r1);

        return;
    }

    private java.util.Iterator createIterator()
    {
        org.apache.commons.collections4.iterators.IteratorIterableTest r0;
        java.util.Iterator r2;
        java.util.ArrayList $r3;
        java.lang.Integer $r4, $r5, $r6;

        r0 := @this: org.apache.commons.collections4.iterators.IteratorIterableTest;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r4);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r5);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r6);

        r2 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

        return r2;
    }

    public void testIterator()
    {
        org.apache.commons.collections4.iterators.IteratorIterableTest r0;
        java.util.Iterator r1, r3;
        java.lang.Number r4;
        org.apache.commons.collections4.iterators.IteratorIterable $r5;
        boolean $z0;
        java.lang.Object $r6;

        r0 := @this: org.apache.commons.collections4.iterators.IteratorIterableTest;

        r1 = specialinvoke r0.<org.apache.commons.collections4.iterators.IteratorIterableTest: java.util.Iterator createIterator()>();

        $r5 = new org.apache.commons.collections4.iterators.IteratorIterable;

        specialinvoke $r5.<org.apache.commons.collections4.iterators.IteratorIterable: void <init>(java.util.Iterator)>(r1);

        specialinvoke r0.<org.apache.commons.collections4.iterators.IteratorIterableTest: void verifyIteration(java.lang.Iterable)>($r5);

        r3 = interfaceinvoke $r5.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.Number) $r6;

        staticinvoke <org.apache.commons.collections4.iterators.IteratorIterableTest: void fail(java.lang.String)>("should not be able to iterate twice");

        goto label1;

     label2:
        return;
    }

    public void testMultipleUserIterator()
    {
        org.apache.commons.collections4.iterators.IteratorIterableTest r0;
        java.util.Iterator r1;
        org.apache.commons.collections4.iterators.IteratorIterable $r3;

        r0 := @this: org.apache.commons.collections4.iterators.IteratorIterableTest;

        r1 = specialinvoke r0.<org.apache.commons.collections4.iterators.IteratorIterableTest: java.util.Iterator createIterator()>();

        $r3 = new org.apache.commons.collections4.iterators.IteratorIterable;

        specialinvoke $r3.<org.apache.commons.collections4.iterators.IteratorIterable: void <init>(java.util.Iterator,boolean)>(r1, 1);

        specialinvoke r0.<org.apache.commons.collections4.iterators.IteratorIterableTest: void verifyIteration(java.lang.Iterable)>($r3);

        specialinvoke r0.<org.apache.commons.collections4.iterators.IteratorIterableTest: void verifyIteration(java.lang.Iterable)>($r3);

        return;
    }

    private void verifyIteration(java.lang.Iterable)
    {
        org.apache.commons.collections4.iterators.IteratorIterableTest r0;
        java.lang.Iterable r1;
        java.util.Iterator r2;
        java.lang.Number r3;
        boolean $z0, $z1;
        java.lang.Object $r4;
        int $i0, i1;

        r0 := @this: org.apache.commons.collections4.iterators.IteratorIterableTest;

        r1 := @parameter0: java.lang.Iterable;

        i1 = 0;

        r2 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Number) $r4;

        $i0 = virtualinvoke r3.<java.lang.Number: int intValue()>();

        staticinvoke <org.apache.commons.collections4.iterators.IteratorIterableTest: void assertEquals(int,int)>(i1, $i0);

        i1 = i1 + 1;

        goto label1;

     label2:
        if i1 <= 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <org.apache.commons.collections4.iterators.IteratorIterableTest: void assertTrue(boolean)>($z1);

        return;
    }
}
