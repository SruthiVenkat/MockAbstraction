public class org.apache.commons.collections4.map.PassiveExpiringMap extends org.apache.commons.collections4.map.AbstractMapDecorator implements java.io.Serializable
{
    private static final long serialVersionUID;
    private final java.util.Map expirationMap;
    private final org.apache.commons.collections4.map.PassiveExpiringMap$ExpirationPolicy expiringPolicy;

    private static long validateAndConvertToMillis(long, java.util.concurrent.TimeUnit)
    {
        long l0, $l1;
        java.util.concurrent.TimeUnit r0, $r1;
        java.lang.NullPointerException $r2;

        l0 := @parameter0: long;

        r0 := @parameter1: java.util.concurrent.TimeUnit;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Time unit must not be null");

        throw $r2;

     label1:
        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $l1 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>(l0, r0);

        return $l1;
    }

    public void <init>()
    {
        org.apache.commons.collections4.map.PassiveExpiringMap r0;

        r0 := @this: org.apache.commons.collections4.map.PassiveExpiringMap;

        specialinvoke r0.<org.apache.commons.collections4.map.PassiveExpiringMap: void <init>(long)>(-1L);

        return;
    }

    public void <init>(org.apache.commons.collections4.map.PassiveExpiringMap$ExpirationPolicy)
    {
        org.apache.commons.collections4.map.PassiveExpiringMap r0;
        org.apache.commons.collections4.map.PassiveExpiringMap$ExpirationPolicy r1;
        java.util.HashMap $r2;

        r0 := @this: org.apache.commons.collections4.map.PassiveExpiringMap;

        r1 := @parameter0: org.apache.commons.collections4.map.PassiveExpiringMap$ExpirationPolicy;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        specialinvoke r0.<org.apache.commons.collections4.map.PassiveExpiringMap: void <init>(org.apache.commons.collections4.map.PassiveExpiringMap$ExpirationPolicy,java.util.Map)>(r1, $r2);

        return;
    }

    public void <init>(org.apache.commons.collections4.map.PassiveExpiringMap$ExpirationPolicy, java.util.Map)
    {
        org.apache.commons.collections4.map.PassiveExpiringMap r0;
        org.apache.commons.collections4.map.PassiveExpiringMap$ExpirationPolicy r1;
        java.util.Map r2;
        java.util.HashMap $r3;
        java.lang.NullPointerException $r4;

        r0 := @this: org.apache.commons.collections4.map.PassiveExpiringMap;

        r1 := @parameter0: org.apache.commons.collections4.map.PassiveExpiringMap$ExpirationPolicy;

        r2 := @parameter1: java.util.Map;

        specialinvoke r0.<org.apache.commons.collections4.map.AbstractMapDecorator: void <init>(java.util.Map)>(r2);

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.apache.commons.collections4.map.PassiveExpiringMap: java.util.Map expirationMap> = $r3;

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("Policy must not be null.");

        throw $r4;

     label1:
        r0.<org.apache.commons.collections4.map.PassiveExpiringMap: org.apache.commons.collections4.map.PassiveExpiringMap$ExpirationPolicy expiringPolicy> = r1;

        return;
    }

    public void <init>(long)
    {
        org.apache.commons.collections4.map.PassiveExpiringMap r0;
        long l0;
        org.apache.commons.collections4.map.PassiveExpiringMap$ConstantTimeToLiveExpirationPolicy $r1;
        java.util.HashMap $r2;

        r0 := @this: org.apache.commons.collections4.map.PassiveExpiringMap;

        l0 := @parameter0: long;

        $r1 = new org.apache.commons.collections4.map.PassiveExpiringMap$ConstantTimeToLiveExpirationPolicy;

        specialinvoke $r1.<org.apache.commons.collections4.map.PassiveExpiringMap$ConstantTimeToLiveExpirationPolicy: void <init>(long)>(l0);

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        specialinvoke r0.<org.apache.commons.collections4.map.PassiveExpiringMap: void <init>(org.apache.commons.collections4.map.PassiveExpiringMap$ExpirationPolicy,java.util.Map)>($r1, $r2);

        return;
    }

    public void <init>(long, java.util.Map)
    {
        org.apache.commons.collections4.map.PassiveExpiringMap r0;
        long l0;
        java.util.Map r1;
        org.apache.commons.collections4.map.PassiveExpiringMap$ConstantTimeToLiveExpirationPolicy $r2;

        r0 := @this: org.apache.commons.collections4.map.PassiveExpiringMap;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.Map;

        $r2 = new org.apache.commons.collections4.map.PassiveExpiringMap$ConstantTimeToLiveExpirationPolicy;

        specialinvoke $r2.<org.apache.commons.collections4.map.PassiveExpiringMap$ConstantTimeToLiveExpirationPolicy: void <init>(long)>(l0);

        specialinvoke r0.<org.apache.commons.collections4.map.PassiveExpiringMap: void <init>(org.apache.commons.collections4.map.PassiveExpiringMap$ExpirationPolicy,java.util.Map)>($r2, r1);

        return;
    }

    public void <init>(long, java.util.concurrent.TimeUnit)
    {
        org.apache.commons.collections4.map.PassiveExpiringMap r0;
        long l0, $l1;
        java.util.concurrent.TimeUnit r1;

        r0 := @this: org.apache.commons.collections4.map.PassiveExpiringMap;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        $l1 = staticinvoke <org.apache.commons.collections4.map.PassiveExpiringMap: long validateAndConvertToMillis(long,java.util.concurrent.TimeUnit)>(l0, r1);

        specialinvoke r0.<org.apache.commons.collections4.map.PassiveExpiringMap: void <init>(long)>($l1);

        return;
    }

    public void <init>(long, java.util.concurrent.TimeUnit, java.util.Map)
    {
        org.apache.commons.collections4.map.PassiveExpiringMap r0;
        long l0, $l1;
        java.util.concurrent.TimeUnit r1;
        java.util.Map r2;

        r0 := @this: org.apache.commons.collections4.map.PassiveExpiringMap;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        r2 := @parameter2: java.util.Map;

        $l1 = staticinvoke <org.apache.commons.collections4.map.PassiveExpiringMap: long validateAndConvertToMillis(long,java.util.concurrent.TimeUnit)>(l0, r1);

        specialinvoke r0.<org.apache.commons.collections4.map.PassiveExpiringMap: void <init>(long,java.util.Map)>($l1, r2);

        return;
    }

    public void <init>(java.util.Map)
    {
        org.apache.commons.collections4.map.PassiveExpiringMap r0;
        java.util.Map r1;

        r0 := @this: org.apache.commons.collections4.map.PassiveExpiringMap;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<org.apache.commons.collections4.map.PassiveExpiringMap: void <init>(long,java.util.Map)>(-1L, r1);

        return;
    }

    public void clear()
    {
        org.apache.commons.collections4.map.PassiveExpiringMap r0;
        java.util.Map $r1;

        r0 := @this: org.apache.commons.collections4.map.PassiveExpiringMap;

        specialinvoke r0.<org.apache.commons.collections4.map.AbstractMapDecorator: void clear()>();

        $r1 = r0.<org.apache.commons.collections4.map.PassiveExpiringMap: java.util.Map expirationMap>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        return;
    }

    public boolean containsKey(java.lang.Object)
    {
        org.apache.commons.collections4.map.PassiveExpiringMap r0;
        java.lang.Object r1;
        long $l0;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.map.PassiveExpiringMap;

        r1 := @parameter0: java.lang.Object;

        $l0 = specialinvoke r0.<org.apache.commons.collections4.map.PassiveExpiringMap: long now()>();

        specialinvoke r0.<org.apache.commons.collections4.map.PassiveExpiringMap: void removeIfExpired(java.lang.Object,long)>(r1, $l0);

        $z0 = specialinvoke r0.<org.apache.commons.collections4.map.AbstractMapDecorator: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean containsValue(java.lang.Object)
    {
        org.apache.commons.collections4.map.PassiveExpiringMap r0;
        java.lang.Object r1;
        long $l0;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.map.PassiveExpiringMap;

        r1 := @parameter0: java.lang.Object;

        $l0 = specialinvoke r0.<org.apache.commons.collections4.map.PassiveExpiringMap: long now()>();

        specialinvoke r0.<org.apache.commons.collections4.map.PassiveExpiringMap: void removeAllExpired(long)>($l0);

        $z0 = specialinvoke r0.<org.apache.commons.collections4.map.AbstractMapDecorator: boolean containsValue(java.lang.Object)>(r1);

        return $z0;
    }

    public java.util.Set entrySet()
    {
        org.apache.commons.collections4.map.PassiveExpiringMap r0;
        long $l0;
        java.util.Set $r1;

        r0 := @this: org.apache.commons.collections4.map.PassiveExpiringMap;

        $l0 = specialinvoke r0.<org.apache.commons.collections4.map.PassiveExpiringMap: long now()>();

        specialinvoke r0.<org.apache.commons.collections4.map.PassiveExpiringMap: void removeAllExpired(long)>($l0);

        $r1 = specialinvoke r0.<org.apache.commons.collections4.map.AbstractMapDecorator: java.util.Set entrySet()>();

        return $r1;
    }

    public java.lang.Object get(java.lang.Object)
    {
        org.apache.commons.collections4.map.PassiveExpiringMap r0;
        java.lang.Object r1, $r2;
        long $l0;

        r0 := @this: org.apache.commons.collections4.map.PassiveExpiringMap;

        r1 := @parameter0: java.lang.Object;

        $l0 = specialinvoke r0.<org.apache.commons.collections4.map.PassiveExpiringMap: long now()>();

        specialinvoke r0.<org.apache.commons.collections4.map.PassiveExpiringMap: void removeIfExpired(java.lang.Object,long)>(r1, $l0);

        $r2 = specialinvoke r0.<org.apache.commons.collections4.map.AbstractMapDecorator: java.lang.Object get(java.lang.Object)>(r1);

        return $r2;
    }

    public boolean isEmpty()
    {
        org.apache.commons.collections4.map.PassiveExpiringMap r0;
        long $l0;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.map.PassiveExpiringMap;

        $l0 = specialinvoke r0.<org.apache.commons.collections4.map.PassiveExpiringMap: long now()>();

        specialinvoke r0.<org.apache.commons.collections4.map.PassiveExpiringMap: void removeAllExpired(long)>($l0);

        $z0 = specialinvoke r0.<org.apache.commons.collections4.map.AbstractMapDecorator: boolean isEmpty()>();

        return $z0;
    }

    private boolean isExpired(long, java.lang.Long)
    {
        org.apache.commons.collections4.map.PassiveExpiringMap r0;
        long l0, l1;
        java.lang.Long r1;
        byte $b2, $b3;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.map.PassiveExpiringMap;

        l0 := @parameter0: long;

        r1 := @parameter1: java.lang.Long;

        if r1 == null goto label3;

        l1 = virtualinvoke r1.<java.lang.Long: long longValue()>();

        $b2 = l1 cmp 0L;

        if $b2 < 0 goto label1;

        $b3 = l0 cmp l1;

        if $b3 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;

     label3:
        return 0;
    }

    public java.util.Set keySet()
    {
        org.apache.commons.collections4.map.PassiveExpiringMap r0;
        long $l0;
        java.util.Set $r1;

        r0 := @this: org.apache.commons.collections4.map.PassiveExpiringMap;

        $l0 = specialinvoke r0.<org.apache.commons.collections4.map.PassiveExpiringMap: long now()>();

        specialinvoke r0.<org.apache.commons.collections4.map.PassiveExpiringMap: void removeAllExpired(long)>($l0);

        $r1 = specialinvoke r0.<org.apache.commons.collections4.map.AbstractMapDecorator: java.util.Set keySet()>();

        return $r1;
    }

    private long now()
    {
        org.apache.commons.collections4.map.PassiveExpiringMap r0;
        long $l0;

        r0 := @this: org.apache.commons.collections4.map.PassiveExpiringMap;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        return $l0;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections4.map.PassiveExpiringMap r0;
        java.lang.Object r1, r2, $r7;
        long l0, $l1;
        org.apache.commons.collections4.map.PassiveExpiringMap$ExpirationPolicy $r3;
        java.util.Map $r4;
        java.lang.Long $r5;

        r0 := @this: org.apache.commons.collections4.map.PassiveExpiringMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $l1 = specialinvoke r0.<org.apache.commons.collections4.map.PassiveExpiringMap: long now()>();

        specialinvoke r0.<org.apache.commons.collections4.map.PassiveExpiringMap: void removeIfExpired(java.lang.Object,long)>(r1, $l1);

        $r3 = r0.<org.apache.commons.collections4.map.PassiveExpiringMap: org.apache.commons.collections4.map.PassiveExpiringMap$ExpirationPolicy expiringPolicy>;

        l0 = interfaceinvoke $r3.<org.apache.commons.collections4.map.PassiveExpiringMap$ExpirationPolicy: long expirationTime(java.lang.Object,java.lang.Object)>(r1, r2);

        $r4 = r0.<org.apache.commons.collections4.map.PassiveExpiringMap: java.util.Map expirationMap>;

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r5);

        $r7 = specialinvoke r0.<org.apache.commons.collections4.map.AbstractMapDecorator: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return $r7;
    }

    public void putAll(java.util.Map)
    {
        org.apache.commons.collections4.map.PassiveExpiringMap r0;
        java.util.Map r1;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.util.Set $r4;
        boolean $z0;
        java.lang.Object $r5, $r6, $r7;

        r0 := @this: org.apache.commons.collections4.map.PassiveExpiringMap;

        r1 := @parameter0: java.util.Map;

        $r4 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r5;

        $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r0.<org.apache.commons.collections4.map.PassiveExpiringMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7);

        goto label1;

     label2:
        return;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        org.apache.commons.collections4.map.PassiveExpiringMap r0;
        java.lang.Object r1, $r4;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.collections4.map.PassiveExpiringMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.commons.collections4.map.PassiveExpiringMap: java.util.Map expirationMap>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        $r4 = specialinvoke r0.<org.apache.commons.collections4.map.AbstractMapDecorator: java.lang.Object remove(java.lang.Object)>(r1);

        return $r4;
    }

    private void removeAllExpired(long)
    {
        org.apache.commons.collections4.map.PassiveExpiringMap r0;
        long l0;
        java.util.Iterator r1;
        java.util.Map$Entry r2;
        java.util.Map $r3;
        java.util.Set $r4;
        boolean $z0, $z1;
        java.lang.Object $r5, $r6, $r8;
        java.lang.Long $r7;

        r0 := @this: org.apache.commons.collections4.map.PassiveExpiringMap;

        l0 := @parameter0: long;

        $r3 = r0.<org.apache.commons.collections4.map.PassiveExpiringMap: java.util.Map expirationMap>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        r1 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.util.Map$Entry) $r5;

        $r6 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r7 = (java.lang.Long) $r6;

        $z1 = specialinvoke r0.<org.apache.commons.collections4.map.PassiveExpiringMap: boolean isExpired(long,java.lang.Long)>(l0, $r7);

        if $z1 == 0 goto label2;

        $r8 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        specialinvoke r0.<org.apache.commons.collections4.map.AbstractMapDecorator: java.lang.Object remove(java.lang.Object)>($r8);

        interfaceinvoke r1.<java.util.Iterator: void remove()>();

     label2:
        goto label1;

     label3:
        return;
    }

    private void removeIfExpired(java.lang.Object, long)
    {
        org.apache.commons.collections4.map.PassiveExpiringMap r0;
        java.lang.Object r1, $r4;
        long l0;
        java.lang.Long r2;
        java.util.Map $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.map.PassiveExpiringMap;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        $r3 = r0.<org.apache.commons.collections4.map.PassiveExpiringMap: java.util.Map expirationMap>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (java.lang.Long) $r4;

        $z0 = specialinvoke r0.<org.apache.commons.collections4.map.PassiveExpiringMap: boolean isExpired(long,java.lang.Long)>(l0, r2);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.commons.collections4.map.PassiveExpiringMap: java.lang.Object remove(java.lang.Object)>(r1);

     label1:
        return;
    }

    public int size()
    {
        org.apache.commons.collections4.map.PassiveExpiringMap r0;
        long $l0;
        int $i1;

        r0 := @this: org.apache.commons.collections4.map.PassiveExpiringMap;

        $l0 = specialinvoke r0.<org.apache.commons.collections4.map.PassiveExpiringMap: long now()>();

        specialinvoke r0.<org.apache.commons.collections4.map.PassiveExpiringMap: void removeAllExpired(long)>($l0);

        $i1 = specialinvoke r0.<org.apache.commons.collections4.map.AbstractMapDecorator: int size()>();

        return $i1;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.commons.collections4.map.PassiveExpiringMap r0;
        java.io.ObjectInputStream r1;
        java.lang.Object $r2;
        java.util.Map $r3;

        r0 := @this: org.apache.commons.collections4.map.PassiveExpiringMap;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r2 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r3 = (java.util.Map) $r2;

        r0.<org.apache.commons.collections4.map.PassiveExpiringMap: java.util.Map map> = $r3;

        return;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        org.apache.commons.collections4.map.PassiveExpiringMap r0;
        java.io.ObjectOutputStream r1;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.collections4.map.PassiveExpiringMap;

        r1 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $r2 = r0.<org.apache.commons.collections4.map.PassiveExpiringMap: java.util.Map map>;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r2);

        return;
    }

    public java.util.Collection values()
    {
        org.apache.commons.collections4.map.PassiveExpiringMap r0;
        long $l0;
        java.util.Collection $r1;

        r0 := @this: org.apache.commons.collections4.map.PassiveExpiringMap;

        $l0 = specialinvoke r0.<org.apache.commons.collections4.map.PassiveExpiringMap: long now()>();

        specialinvoke r0.<org.apache.commons.collections4.map.PassiveExpiringMap: void removeAllExpired(long)>($l0);

        $r1 = specialinvoke r0.<org.apache.commons.collections4.map.AbstractMapDecorator: java.util.Collection values()>();

        return $r1;
    }

    static long access$000(long, java.util.concurrent.TimeUnit)
    {
        long l0, $l1;
        java.util.concurrent.TimeUnit r0;

        l0 := @parameter0: long;

        r0 := @parameter1: java.util.concurrent.TimeUnit;

        $l1 = staticinvoke <org.apache.commons.collections4.map.PassiveExpiringMap: long validateAndConvertToMillis(long,java.util.concurrent.TimeUnit)>(l0, r0);

        return $l1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.collections4.map.PassiveExpiringMap: long serialVersionUID> = 1L;

        return;
    }
}
