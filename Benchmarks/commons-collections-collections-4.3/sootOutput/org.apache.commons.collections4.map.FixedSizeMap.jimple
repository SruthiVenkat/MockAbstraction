public class org.apache.commons.collections4.map.FixedSizeMap extends org.apache.commons.collections4.map.AbstractMapDecorator implements org.apache.commons.collections4.BoundedMap, java.io.Serializable
{
    private static final long serialVersionUID;

    public static org.apache.commons.collections4.map.FixedSizeMap fixedSizeMap(java.util.Map)
    {
        java.util.Map r0;
        org.apache.commons.collections4.map.FixedSizeMap $r1;

        r0 := @parameter0: java.util.Map;

        $r1 = new org.apache.commons.collections4.map.FixedSizeMap;

        specialinvoke $r1.<org.apache.commons.collections4.map.FixedSizeMap: void <init>(java.util.Map)>(r0);

        return $r1;
    }

    protected void <init>(java.util.Map)
    {
        org.apache.commons.collections4.map.FixedSizeMap r0;
        java.util.Map r1;

        r0 := @this: org.apache.commons.collections4.map.FixedSizeMap;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<org.apache.commons.collections4.map.AbstractMapDecorator: void <init>(java.util.Map)>(r1);

        return;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        org.apache.commons.collections4.map.FixedSizeMap r0;
        java.io.ObjectOutputStream r1;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.collections4.map.FixedSizeMap;

        r1 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $r2 = r0.<org.apache.commons.collections4.map.FixedSizeMap: java.util.Map map>;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r2);

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.commons.collections4.map.FixedSizeMap r0;
        java.io.ObjectInputStream r1;
        java.lang.Object $r2;
        java.util.Map $r3;

        r0 := @this: org.apache.commons.collections4.map.FixedSizeMap;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r2 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r3 = (java.util.Map) $r2;

        r0.<org.apache.commons.collections4.map.FixedSizeMap: java.util.Map map> = $r3;

        return;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections4.map.FixedSizeMap r0;
        java.lang.Object r1, r2, $r5;
        java.util.Map $r3, $r4;
        boolean $z0;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: org.apache.commons.collections4.map.FixedSizeMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<org.apache.commons.collections4.map.FixedSizeMap: java.util.Map map>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot put new key/value pair - Map is fixed size");

        throw $r6;

     label1:
        $r4 = r0.<org.apache.commons.collections4.map.FixedSizeMap: java.util.Map map>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return $r5;
    }

    public void putAll(java.util.Map)
    {
        org.apache.commons.collections4.map.FixedSizeMap r0;
        java.util.Map r1, $r5;
        java.util.Iterator r2;
        java.lang.Object r3;
        java.util.Set $r4;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: org.apache.commons.collections4.map.FixedSizeMap;

        r1 := @parameter0: java.util.Map;

        $r4 = interfaceinvoke r1.<java.util.Map: java.util.Set keySet()>();

        r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.map.FixedSizeMap: boolean containsKey(java.lang.Object)>(r3);

        if $z1 != 0 goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot put new key/value pair - Map is fixed size");

        throw $r6;

     label2:
        goto label1;

     label3:
        $r5 = r0.<org.apache.commons.collections4.map.FixedSizeMap: java.util.Map map>;

        interfaceinvoke $r5.<java.util.Map: void putAll(java.util.Map)>(r1);

        return;
    }

    public void clear()
    {
        org.apache.commons.collections4.map.FixedSizeMap r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.apache.commons.collections4.map.FixedSizeMap;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Map is fixed size");

        throw $r1;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        org.apache.commons.collections4.map.FixedSizeMap r0;
        java.lang.Object r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: org.apache.commons.collections4.map.FixedSizeMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Map is fixed size");

        throw $r2;
    }

    public java.util.Set entrySet()
    {
        org.apache.commons.collections4.map.FixedSizeMap r0;
        java.util.Set r1, $r3;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.collections4.map.FixedSizeMap;

        $r2 = r0.<org.apache.commons.collections4.map.FixedSizeMap: java.util.Map map>;

        r1 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r3 = staticinvoke <org.apache.commons.collections4.set.UnmodifiableSet: java.util.Set unmodifiableSet(java.util.Set)>(r1);

        return $r3;
    }

    public java.util.Set keySet()
    {
        org.apache.commons.collections4.map.FixedSizeMap r0;
        java.util.Set r1, $r3;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.collections4.map.FixedSizeMap;

        $r2 = r0.<org.apache.commons.collections4.map.FixedSizeMap: java.util.Map map>;

        r1 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        $r3 = staticinvoke <org.apache.commons.collections4.set.UnmodifiableSet: java.util.Set unmodifiableSet(java.util.Set)>(r1);

        return $r3;
    }

    public java.util.Collection values()
    {
        org.apache.commons.collections4.map.FixedSizeMap r0;
        java.util.Collection r1, $r3;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.collections4.map.FixedSizeMap;

        $r2 = r0.<org.apache.commons.collections4.map.FixedSizeMap: java.util.Map map>;

        r1 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        $r3 = staticinvoke <org.apache.commons.collections4.collection.UnmodifiableCollection: java.util.Collection unmodifiableCollection(java.util.Collection)>(r1);

        return $r3;
    }

    public boolean isFull()
    {
        org.apache.commons.collections4.map.FixedSizeMap r0;

        r0 := @this: org.apache.commons.collections4.map.FixedSizeMap;

        return 1;
    }

    public int maxSize()
    {
        org.apache.commons.collections4.map.FixedSizeMap r0;
        int $i0;

        r0 := @this: org.apache.commons.collections4.map.FixedSizeMap;

        $i0 = virtualinvoke r0.<org.apache.commons.collections4.map.FixedSizeMap: int size()>();

        return $i0;
    }

    public static void <clinit>()
    {
        <org.apache.commons.collections4.map.FixedSizeMap: long serialVersionUID> = 7450927208116179316L;

        return;
    }
}
