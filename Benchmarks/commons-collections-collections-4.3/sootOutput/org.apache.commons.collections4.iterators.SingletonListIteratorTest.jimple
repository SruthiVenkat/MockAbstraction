public class org.apache.commons.collections4.iterators.SingletonListIteratorTest extends org.apache.commons.collections4.iterators.AbstractListIteratorTest
{
    private static final java.lang.Object testValue;

    public void <init>(java.lang.String)
    {
        org.apache.commons.collections4.iterators.SingletonListIteratorTest r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.collections4.iterators.SingletonListIteratorTest;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.collections4.iterators.AbstractListIteratorTest: void <init>(java.lang.String)>(r1);

        return;
    }

    public org.apache.commons.collections4.iterators.SingletonListIterator makeEmptyIterator()
    {
        org.apache.commons.collections4.iterators.SingletonListIteratorTest r0;
        org.apache.commons.collections4.iterators.SingletonListIterator r1;

        r0 := @this: org.apache.commons.collections4.iterators.SingletonListIteratorTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.SingletonListIteratorTest: org.apache.commons.collections4.iterators.SingletonListIterator makeObject()>();

        virtualinvoke r1.<org.apache.commons.collections4.iterators.SingletonListIterator: java.lang.Object next()>();

        virtualinvoke r1.<org.apache.commons.collections4.iterators.SingletonListIterator: void remove()>();

        virtualinvoke r1.<org.apache.commons.collections4.iterators.SingletonListIterator: void reset()>();

        return r1;
    }

    public org.apache.commons.collections4.iterators.SingletonListIterator makeObject()
    {
        org.apache.commons.collections4.iterators.SingletonListIteratorTest r0;
        org.apache.commons.collections4.iterators.SingletonListIterator $r1;
        java.lang.Object $r2;

        r0 := @this: org.apache.commons.collections4.iterators.SingletonListIteratorTest;

        $r1 = new org.apache.commons.collections4.iterators.SingletonListIterator;

        $r2 = <org.apache.commons.collections4.iterators.SingletonListIteratorTest: java.lang.Object testValue>;

        specialinvoke $r1.<org.apache.commons.collections4.iterators.SingletonListIterator: void <init>(java.lang.Object)>($r2);

        return $r1;
    }

    public boolean supportsAdd()
    {
        org.apache.commons.collections4.iterators.SingletonListIteratorTest r0;

        r0 := @this: org.apache.commons.collections4.iterators.SingletonListIteratorTest;

        return 0;
    }

    public boolean supportsRemove()
    {
        org.apache.commons.collections4.iterators.SingletonListIteratorTest r0;

        r0 := @this: org.apache.commons.collections4.iterators.SingletonListIteratorTest;

        return 1;
    }

    public boolean supportsEmptyIterator()
    {
        org.apache.commons.collections4.iterators.SingletonListIteratorTest r0;

        r0 := @this: org.apache.commons.collections4.iterators.SingletonListIteratorTest;

        return 1;
    }

    public void testIterator()
    {
        org.apache.commons.collections4.iterators.SingletonListIteratorTest r0;
        org.apache.commons.collections4.iterators.SingletonListIterator r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.Object $r3, $r5, $r7, r20, r21, r22;
        java.lang.Exception $r12, $r16;
        java.lang.Class $r13, $r15, $r17, $r19;
        java.util.NoSuchElementException $r14, $r18;

        r0 := @this: org.apache.commons.collections4.iterators.SingletonListIteratorTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.SingletonListIteratorTest: org.apache.commons.collections4.iterators.SingletonListIterator makeObject()>();

        $z0 = interfaceinvoke r1.<java.util.ListIterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.SingletonListIteratorTest: void assertTrue(java.lang.String,boolean)>("Iterator should have next item", $z0);

        $z1 = interfaceinvoke r1.<java.util.ListIterator: boolean hasPrevious()>();

        if $z1 != 0 goto label01;

        $z10 = 1;

        goto label02;

     label01:
        $z10 = 0;

     label02:
        staticinvoke <org.apache.commons.collections4.iterators.SingletonListIteratorTest: void assertTrue(java.lang.String,boolean)>("Iterator should have no previous item", $z10);

        $i0 = interfaceinvoke r1.<java.util.ListIterator: int nextIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.SingletonListIteratorTest: void assertEquals(java.lang.String,int,int)>("Iteration next index", 0, $i0);

        $i1 = interfaceinvoke r1.<java.util.ListIterator: int previousIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.SingletonListIteratorTest: void assertEquals(java.lang.String,int,int)>("Iteration previous index", -1, $i1);

        r20 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object next()>();

        $r3 = <org.apache.commons.collections4.iterators.SingletonListIteratorTest: java.lang.Object testValue>;

        staticinvoke <org.apache.commons.collections4.iterators.SingletonListIteratorTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Iteration value is correct", $r3, r20);

        $z2 = interfaceinvoke r1.<java.util.ListIterator: boolean hasNext()>();

        if $z2 != 0 goto label03;

        $z11 = 1;

        goto label04;

     label03:
        $z11 = 0;

     label04:
        staticinvoke <org.apache.commons.collections4.iterators.SingletonListIteratorTest: void assertTrue(java.lang.String,boolean)>("Iterator should have no next item", $z11);

        $z3 = interfaceinvoke r1.<java.util.ListIterator: boolean hasPrevious()>();

        staticinvoke <org.apache.commons.collections4.iterators.SingletonListIteratorTest: void assertTrue(java.lang.String,boolean)>("Iterator should have previous item", $z3);

        $i2 = interfaceinvoke r1.<java.util.ListIterator: int nextIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.SingletonListIteratorTest: void assertEquals(java.lang.String,int,int)>("Iteration next index", 1, $i2);

        $i3 = interfaceinvoke r1.<java.util.ListIterator: int previousIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.SingletonListIteratorTest: void assertEquals(java.lang.String,int,int)>("Iteration previous index", 0, $i3);

        r21 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object previous()>();

        $r5 = <org.apache.commons.collections4.iterators.SingletonListIteratorTest: java.lang.Object testValue>;

        staticinvoke <org.apache.commons.collections4.iterators.SingletonListIteratorTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Iteration value is correct", $r5, r21);

        $z4 = interfaceinvoke r1.<java.util.ListIterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.SingletonListIteratorTest: void assertTrue(java.lang.String,boolean)>("Iterator should have next item", $z4);

        $z5 = interfaceinvoke r1.<java.util.ListIterator: boolean hasPrevious()>();

        if $z5 != 0 goto label05;

        $z12 = 1;

        goto label06;

     label05:
        $z12 = 0;

     label06:
        staticinvoke <org.apache.commons.collections4.iterators.SingletonListIteratorTest: void assertTrue(java.lang.String,boolean)>("Iterator should have no previous item", $z12);

        $i4 = interfaceinvoke r1.<java.util.ListIterator: int nextIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.SingletonListIteratorTest: void assertEquals(java.lang.String,int,int)>("Iteration next index", 0, $i4);

        $i5 = interfaceinvoke r1.<java.util.ListIterator: int previousIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.SingletonListIteratorTest: void assertEquals(java.lang.String,int,int)>("Iteration previous index", -1, $i5);

        r22 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object next()>();

        $r7 = <org.apache.commons.collections4.iterators.SingletonListIteratorTest: java.lang.Object testValue>;

        staticinvoke <org.apache.commons.collections4.iterators.SingletonListIteratorTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Iteration value is correct", $r7, r22);

        $z6 = interfaceinvoke r1.<java.util.ListIterator: boolean hasNext()>();

        if $z6 != 0 goto label07;

        $z13 = 1;

        goto label08;

     label07:
        $z13 = 0;

     label08:
        staticinvoke <org.apache.commons.collections4.iterators.SingletonListIteratorTest: void assertTrue(java.lang.String,boolean)>("Iterator should have no next item", $z13);

        $z7 = interfaceinvoke r1.<java.util.ListIterator: boolean hasPrevious()>();

        staticinvoke <org.apache.commons.collections4.iterators.SingletonListIteratorTest: void assertTrue(java.lang.String,boolean)>("Iterator should have previous item", $z7);

        $i6 = interfaceinvoke r1.<java.util.ListIterator: int nextIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.SingletonListIteratorTest: void assertEquals(java.lang.String,int,int)>("Iteration next index", 1, $i6);

        $i7 = interfaceinvoke r1.<java.util.ListIterator: int previousIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.SingletonListIteratorTest: void assertEquals(java.lang.String,int,int)>("Iteration previous index", 0, $i7);

     label09:
        interfaceinvoke r1.<java.util.ListIterator: java.lang.Object next()>();

     label10:
        goto label12;

     label11:
        $r12 := @caughtexception;

        $r13 = virtualinvoke $r12.<java.lang.Object: java.lang.Class getClass()>();

        $r14 = new java.util.NoSuchElementException;

        specialinvoke $r14.<java.util.NoSuchElementException: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.Class getClass()>();

        $z8 = virtualinvoke $r13.<java.lang.Object: boolean equals(java.lang.Object)>($r15);

        staticinvoke <org.apache.commons.collections4.iterators.SingletonListIteratorTest: void assertTrue(java.lang.String,boolean)>("NoSuchElementException must be thrown", $z8);

     label12:
        interfaceinvoke r1.<java.util.ListIterator: java.lang.Object previous()>();

     label13:
        interfaceinvoke r1.<java.util.ListIterator: java.lang.Object previous()>();

     label14:
        goto label16;

     label15:
        $r16 := @caughtexception;

        $r17 = virtualinvoke $r16.<java.lang.Object: java.lang.Class getClass()>();

        $r18 = new java.util.NoSuchElementException;

        specialinvoke $r18.<java.util.NoSuchElementException: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.Object: java.lang.Class getClass()>();

        $z9 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>($r19);

        staticinvoke <org.apache.commons.collections4.iterators.SingletonListIteratorTest: void assertTrue(java.lang.String,boolean)>("NoSuchElementException must be thrown", $z9);

     label16:
        return;

        catch java.lang.Exception from label09 to label10 with label11;
        catch java.lang.Exception from label13 to label14 with label15;
    }

    public void testReset()
    {
        org.apache.commons.collections4.iterators.SingletonListIteratorTest r0;
        org.apache.commons.collections4.iterators.SingletonListIterator r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.lang.Object $r2, $r3, $r4, $r5;

        r0 := @this: org.apache.commons.collections4.iterators.SingletonListIteratorTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.SingletonListIteratorTest: org.apache.commons.collections4.iterators.SingletonListIterator makeObject()>();

        $z0 = interfaceinvoke r1.<org.apache.commons.collections4.ResettableListIterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.SingletonListIteratorTest: void assertEquals(boolean,boolean)>(1, $z0);

        $z1 = interfaceinvoke r1.<org.apache.commons.collections4.ResettableListIterator: boolean hasPrevious()>();

        staticinvoke <org.apache.commons.collections4.iterators.SingletonListIteratorTest: void assertEquals(boolean,boolean)>(0, $z1);

        $r2 = <org.apache.commons.collections4.iterators.SingletonListIteratorTest: java.lang.Object testValue>;

        $r3 = interfaceinvoke r1.<org.apache.commons.collections4.ResettableListIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.SingletonListIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>($r2, $r3);

        $z2 = interfaceinvoke r1.<org.apache.commons.collections4.ResettableListIterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.SingletonListIteratorTest: void assertEquals(boolean,boolean)>(0, $z2);

        $z3 = interfaceinvoke r1.<org.apache.commons.collections4.ResettableListIterator: boolean hasPrevious()>();

        staticinvoke <org.apache.commons.collections4.iterators.SingletonListIteratorTest: void assertEquals(boolean,boolean)>(1, $z3);

        interfaceinvoke r1.<org.apache.commons.collections4.ResettableListIterator: void reset()>();

        $z4 = interfaceinvoke r1.<org.apache.commons.collections4.ResettableListIterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.SingletonListIteratorTest: void assertEquals(boolean,boolean)>(1, $z4);

        $z5 = interfaceinvoke r1.<org.apache.commons.collections4.ResettableListIterator: boolean hasPrevious()>();

        staticinvoke <org.apache.commons.collections4.iterators.SingletonListIteratorTest: void assertEquals(boolean,boolean)>(0, $z5);

        $r4 = <org.apache.commons.collections4.iterators.SingletonListIteratorTest: java.lang.Object testValue>;

        $r5 = interfaceinvoke r1.<org.apache.commons.collections4.ResettableListIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.SingletonListIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>($r4, $r5);

        $z6 = interfaceinvoke r1.<org.apache.commons.collections4.ResettableListIterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.SingletonListIteratorTest: void assertEquals(boolean,boolean)>(0, $z6);

        $z7 = interfaceinvoke r1.<org.apache.commons.collections4.ResettableListIterator: boolean hasPrevious()>();

        staticinvoke <org.apache.commons.collections4.iterators.SingletonListIteratorTest: void assertEquals(boolean,boolean)>(1, $z7);

        interfaceinvoke r1.<org.apache.commons.collections4.ResettableListIterator: void reset()>();

        interfaceinvoke r1.<org.apache.commons.collections4.ResettableListIterator: void reset()>();

        $z8 = interfaceinvoke r1.<org.apache.commons.collections4.ResettableListIterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.SingletonListIteratorTest: void assertEquals(boolean,boolean)>(1, $z8);

        return;
    }

    public volatile java.util.ListIterator makeObject()
    {
        org.apache.commons.collections4.iterators.SingletonListIteratorTest r0;
        org.apache.commons.collections4.iterators.SingletonListIterator $r1;

        r0 := @this: org.apache.commons.collections4.iterators.SingletonListIteratorTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.SingletonListIteratorTest: org.apache.commons.collections4.iterators.SingletonListIterator makeObject()>();

        return $r1;
    }

    public volatile java.util.ListIterator makeEmptyIterator()
    {
        org.apache.commons.collections4.iterators.SingletonListIteratorTest r0;
        org.apache.commons.collections4.iterators.SingletonListIterator $r1;

        r0 := @this: org.apache.commons.collections4.iterators.SingletonListIteratorTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.SingletonListIteratorTest: org.apache.commons.collections4.iterators.SingletonListIterator makeEmptyIterator()>();

        return $r1;
    }

    public volatile java.util.Iterator makeObject()
    {
        org.apache.commons.collections4.iterators.SingletonListIteratorTest r0;
        org.apache.commons.collections4.iterators.SingletonListIterator $r1;

        r0 := @this: org.apache.commons.collections4.iterators.SingletonListIteratorTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.SingletonListIteratorTest: org.apache.commons.collections4.iterators.SingletonListIterator makeObject()>();

        return $r1;
    }

    public volatile java.util.Iterator makeEmptyIterator()
    {
        org.apache.commons.collections4.iterators.SingletonListIteratorTest r0;
        org.apache.commons.collections4.iterators.SingletonListIterator $r1;

        r0 := @this: org.apache.commons.collections4.iterators.SingletonListIteratorTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.SingletonListIteratorTest: org.apache.commons.collections4.iterators.SingletonListIterator makeEmptyIterator()>();

        return $r1;
    }

    public volatile java.lang.Object makeObject()
    {
        org.apache.commons.collections4.iterators.SingletonListIteratorTest r0;
        org.apache.commons.collections4.iterators.SingletonListIterator $r1;

        r0 := @this: org.apache.commons.collections4.iterators.SingletonListIteratorTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.SingletonListIteratorTest: org.apache.commons.collections4.iterators.SingletonListIterator makeObject()>();

        return $r1;
    }

    static void <clinit>()
    {
        <org.apache.commons.collections4.iterators.SingletonListIteratorTest: java.lang.Object testValue> = "foo";

        <org.apache.commons.collections4.iterators.SingletonListIteratorTest: java.lang.Object testValue> = "foo";

        return;
    }
}
