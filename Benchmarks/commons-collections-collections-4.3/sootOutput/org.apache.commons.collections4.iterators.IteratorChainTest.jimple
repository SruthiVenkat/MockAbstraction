public class org.apache.commons.collections4.iterators.IteratorChainTest extends org.apache.commons.collections4.iterators.AbstractIteratorTest
{
    protected java.lang.String[] testArray;
    protected java.util.List list1;
    protected java.util.List list2;
    protected java.util.List list3;

    public void <init>(java.lang.String)
    {
        org.apache.commons.collections4.iterators.IteratorChainTest r0;
        java.lang.String r1;
        java.lang.String[] $r2;

        r0 := @this: org.apache.commons.collections4.iterators.IteratorChainTest;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.collections4.iterators.AbstractIteratorTest: void <init>(java.lang.String)>(r1);

        $r2 = newarray (java.lang.String)[6];

        $r2[0] = "One";

        $r2[1] = "Two";

        $r2[2] = "Three";

        $r2[3] = "Four";

        $r2[4] = "Five";

        $r2[5] = "Six";

        r0.<org.apache.commons.collections4.iterators.IteratorChainTest: java.lang.String[] testArray> = $r2;

        r0.<org.apache.commons.collections4.iterators.IteratorChainTest: java.util.List list1> = null;

        r0.<org.apache.commons.collections4.iterators.IteratorChainTest: java.util.List list2> = null;

        r0.<org.apache.commons.collections4.iterators.IteratorChainTest: java.util.List list3> = null;

        return;
    }

    public void setUp()
    {
        org.apache.commons.collections4.iterators.IteratorChainTest r0;
        java.util.ArrayList $r1, $r5, $r7;
        java.util.List $r2, $r3, $r4, $r6, $r8, $r9;

        r0 := @this: org.apache.commons.collections4.iterators.IteratorChainTest;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.collections4.iterators.IteratorChainTest: java.util.List list1> = $r1;

        $r2 = r0.<org.apache.commons.collections4.iterators.IteratorChainTest: java.util.List list1>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>("One");

        $r3 = r0.<org.apache.commons.collections4.iterators.IteratorChainTest: java.util.List list1>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>("Two");

        $r4 = r0.<org.apache.commons.collections4.iterators.IteratorChainTest: java.util.List list1>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>("Three");

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.collections4.iterators.IteratorChainTest: java.util.List list2> = $r5;

        $r6 = r0.<org.apache.commons.collections4.iterators.IteratorChainTest: java.util.List list2>;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>("Four");

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.collections4.iterators.IteratorChainTest: java.util.List list3> = $r7;

        $r8 = r0.<org.apache.commons.collections4.iterators.IteratorChainTest: java.util.List list3>;

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>("Five");

        $r9 = r0.<org.apache.commons.collections4.iterators.IteratorChainTest: java.util.List list3>;

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>("Six");

        return;
    }

    public org.apache.commons.collections4.iterators.IteratorChain makeEmptyIterator()
    {
        org.apache.commons.collections4.iterators.IteratorChainTest r0;
        java.util.ArrayList $r2;
        org.apache.commons.collections4.iterators.IteratorChain $r3;
        java.util.Iterator $r4;

        r0 := @this: org.apache.commons.collections4.iterators.IteratorChainTest;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = new org.apache.commons.collections4.iterators.IteratorChain;

        $r4 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>();

        specialinvoke $r3.<org.apache.commons.collections4.iterators.IteratorChain: void <init>(java.util.Iterator)>($r4);

        return $r3;
    }

    public org.apache.commons.collections4.iterators.IteratorChain makeObject()
    {
        org.apache.commons.collections4.iterators.IteratorChainTest r0;
        org.apache.commons.collections4.iterators.IteratorChain $r2;
        java.util.List $r3, $r5, $r7;
        java.util.Iterator $r4, $r6, $r8;

        r0 := @this: org.apache.commons.collections4.iterators.IteratorChainTest;

        $r2 = new org.apache.commons.collections4.iterators.IteratorChain;

        specialinvoke $r2.<org.apache.commons.collections4.iterators.IteratorChain: void <init>()>();

        $r3 = r0.<org.apache.commons.collections4.iterators.IteratorChainTest: java.util.List list1>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

        virtualinvoke $r2.<org.apache.commons.collections4.iterators.IteratorChain: void addIterator(java.util.Iterator)>($r4);

        $r5 = r0.<org.apache.commons.collections4.iterators.IteratorChainTest: java.util.List list2>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

        virtualinvoke $r2.<org.apache.commons.collections4.iterators.IteratorChain: void addIterator(java.util.Iterator)>($r6);

        $r7 = r0.<org.apache.commons.collections4.iterators.IteratorChainTest: java.util.List list3>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

        virtualinvoke $r2.<org.apache.commons.collections4.iterators.IteratorChain: void addIterator(java.util.Iterator)>($r8);

        return $r2;
    }

    public void testIterator()
    {
        org.apache.commons.collections4.iterators.IteratorChainTest r0;
        org.apache.commons.collections4.iterators.IteratorChain r1;
        int i0, i1;
        java.lang.String r2;
        java.lang.Object r3;
        boolean $z0, $z1, $z2;
        java.lang.Exception $r6;
        java.lang.Class $r7, $r9;
        java.util.NoSuchElementException $r8;
        java.lang.String[] r10;

        r0 := @this: org.apache.commons.collections4.iterators.IteratorChainTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.IteratorChainTest: org.apache.commons.collections4.iterators.IteratorChain makeObject()>();

        r10 = r0.<org.apache.commons.collections4.iterators.IteratorChainTest: java.lang.String[] testArray>;

        i0 = lengthof r10;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = r10[i1];

        r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.IteratorChainTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Iteration value is correct", r2, r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        staticinvoke <org.apache.commons.collections4.iterators.IteratorChainTest: void assertTrue(java.lang.String,boolean)>("Iterator should now be empty", $z2);

     label5:
        interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

     label6:
        goto label8;

     label7:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = new java.util.NoSuchElementException;

        specialinvoke $r8.<java.util.NoSuchElementException: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r9);

        staticinvoke <org.apache.commons.collections4.iterators.IteratorChainTest: void assertTrue(java.lang.String,boolean)>("NoSuchElementException must be thrown", $z1);

     label8:
        return;

        catch java.lang.Exception from label5 to label6 with label7;
    }

    public void testRemoveFromFilteredIterator()
    {
        org.apache.commons.collections4.iterators.IteratorChainTest r0;
        java.util.Iterator r4, r5, r6, $r14, $r15;
        org.apache.commons.collections4.iterators.IteratorChainTest$1 $r7;
        java.util.ArrayList $r8, $r9;
        java.lang.Integer $r10, $r11, $r12, $r13;
        boolean $z4;
        int $i0, $i1;

        r0 := @this: org.apache.commons.collections4.iterators.IteratorChainTest;

        $r7 = new org.apache.commons.collections4.iterators.IteratorChainTest$1;

        specialinvoke $r7.<org.apache.commons.collections4.iterators.IteratorChainTest$1: void <init>(org.apache.commons.collections4.iterators.IteratorChainTest)>(r0);

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r10);

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r11);

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r12);

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r13);

        $r14 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

        r4 = staticinvoke <org.apache.commons.collections4.IteratorUtils: java.util.Iterator filteredIterator(java.util.Iterator,org.apache.commons.collections4.Predicate)>($r14, $r7);

        $r15 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

        r5 = staticinvoke <org.apache.commons.collections4.IteratorUtils: java.util.Iterator filteredIterator(java.util.Iterator,org.apache.commons.collections4.Predicate)>($r15, $r7);

        r6 = staticinvoke <org.apache.commons.collections4.IteratorUtils: java.util.Iterator chainedIterator(java.util.Iterator,java.util.Iterator)>(r4, r5);

     label1:
        $z4 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label2;

        interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke r6.<java.util.Iterator: void remove()>();

        goto label1;

     label2:
        $i0 = interfaceinvoke $r8.<java.util.List: int size()>();

        staticinvoke <org.apache.commons.collections4.iterators.IteratorChainTest: void assertEquals(int,int)>(0, $i0);

        $i1 = interfaceinvoke $r9.<java.util.List: int size()>();

        staticinvoke <org.apache.commons.collections4.iterators.IteratorChainTest: void assertEquals(int,int)>(1, $i1);

        return;
    }

    public void testRemove()
    {
        org.apache.commons.collections4.iterators.IteratorChainTest r0;
        org.apache.commons.collections4.iterators.IteratorChain r1;
        int i0, $i1, $i2, $i3, i4;
        java.lang.String r2, r3;
        java.util.List $r4, $r6, $r8;
        java.lang.Object $r10;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IllegalStateException $r11;
        java.lang.String[] r13;

        r0 := @this: org.apache.commons.collections4.iterators.IteratorChainTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.IteratorChainTest: org.apache.commons.collections4.iterators.IteratorChain makeObject()>();

     label01:
        interfaceinvoke r1.<java.util.Iterator: void remove()>();

        staticinvoke <org.apache.commons.collections4.iterators.IteratorChainTest: void fail(java.lang.String)>("Calling remove before the first call to next() should throw an exception");

     label02:
        goto label04;

     label03:
        $r11 := @caughtexception;

     label04:
        r13 = r0.<org.apache.commons.collections4.iterators.IteratorChainTest: java.lang.String[] testArray>;

        i0 = lengthof r13;

        i4 = 0;

     label05:
        if i4 >= i0 goto label07;

        r2 = r13[i4];

        $r10 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r10;

        staticinvoke <org.apache.commons.collections4.iterators.IteratorChainTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("Iteration value is correct", r2, r3);

        $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("Four");

        if $z0 != 0 goto label06;

        interfaceinvoke r1.<java.util.Iterator: void remove()>();

     label06:
        i4 = i4 + 1;

        goto label05;

     label07:
        $r4 = r0.<org.apache.commons.collections4.iterators.IteratorChainTest: java.util.List list1>;

        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

        if $i1 != 0 goto label08;

        $z1 = 1;

        goto label09;

     label08:
        $z1 = 0;

     label09:
        staticinvoke <org.apache.commons.collections4.iterators.IteratorChainTest: void assertTrue(java.lang.String,boolean)>("List is empty", $z1);

        $r6 = r0.<org.apache.commons.collections4.iterators.IteratorChainTest: java.util.List list2>;

        $i2 = interfaceinvoke $r6.<java.util.List: int size()>();

        if $i2 != 1 goto label10;

        $z2 = 1;

        goto label11;

     label10:
        $z2 = 0;

     label11:
        staticinvoke <org.apache.commons.collections4.iterators.IteratorChainTest: void assertTrue(java.lang.String,boolean)>("List is empty", $z2);

        $r8 = r0.<org.apache.commons.collections4.iterators.IteratorChainTest: java.util.List list3>;

        $i3 = interfaceinvoke $r8.<java.util.List: int size()>();

        if $i3 != 0 goto label12;

        $z3 = 1;

        goto label13;

     label12:
        $z3 = 0;

     label13:
        staticinvoke <org.apache.commons.collections4.iterators.IteratorChainTest: void assertTrue(java.lang.String,boolean)>("List is empty", $z3);

        return;

        catch java.lang.IllegalStateException from label01 to label02 with label03;
    }

    public void testFirstIteratorIsEmptyBug()
    {
        org.apache.commons.collections4.iterators.IteratorChainTest r0;
        java.util.ArrayList $r4, $r5;
        org.apache.commons.collections4.iterators.IteratorChain $r6;
        java.util.Iterator $r7, $r8;
        boolean $z3, $z4, $z5, $z6, $z7;
        java.lang.Object $r9, $r11, $r13;
        java.lang.String $r10, $r12, $r14;

        r0 := @this: org.apache.commons.collections4.iterators.IteratorChainTest;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>("A");

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>("B");

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>("C");

        $r6 = new org.apache.commons.collections4.iterators.IteratorChain;

        specialinvoke $r6.<org.apache.commons.collections4.iterators.IteratorChain: void <init>()>();

        $r7 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

        virtualinvoke $r6.<org.apache.commons.collections4.iterators.IteratorChain: void addIterator(java.util.Iterator)>($r7);

        $r8 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

        virtualinvoke $r6.<org.apache.commons.collections4.iterators.IteratorChain: void addIterator(java.util.Iterator)>($r8);

        $z3 = virtualinvoke $r6.<org.apache.commons.collections4.iterators.IteratorChain: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.IteratorChainTest: void assertTrue(java.lang.String,boolean)>("should have next", $z3);

        $r9 = virtualinvoke $r6.<org.apache.commons.collections4.iterators.IteratorChain: java.lang.Object next()>();

        $r10 = (java.lang.String) $r9;

        staticinvoke <org.apache.commons.collections4.iterators.IteratorChainTest: void assertEquals(java.lang.String,java.lang.String)>("A", $r10);

        $z4 = virtualinvoke $r6.<org.apache.commons.collections4.iterators.IteratorChain: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.IteratorChainTest: void assertTrue(java.lang.String,boolean)>("should have next", $z4);

        $r11 = virtualinvoke $r6.<org.apache.commons.collections4.iterators.IteratorChain: java.lang.Object next()>();

        $r12 = (java.lang.String) $r11;

        staticinvoke <org.apache.commons.collections4.iterators.IteratorChainTest: void assertEquals(java.lang.String,java.lang.String)>("B", $r12);

        $z5 = virtualinvoke $r6.<org.apache.commons.collections4.iterators.IteratorChain: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.IteratorChainTest: void assertTrue(java.lang.String,boolean)>("should have next", $z5);

        $r13 = virtualinvoke $r6.<org.apache.commons.collections4.iterators.IteratorChain: java.lang.Object next()>();

        $r14 = (java.lang.String) $r13;

        staticinvoke <org.apache.commons.collections4.iterators.IteratorChainTest: void assertEquals(java.lang.String,java.lang.String)>("C", $r14);

        $z6 = virtualinvoke $r6.<org.apache.commons.collections4.iterators.IteratorChain: boolean hasNext()>();

        if $z6 != 0 goto label1;

        $z7 = 1;

        goto label2;

     label1:
        $z7 = 0;

     label2:
        staticinvoke <org.apache.commons.collections4.iterators.IteratorChainTest: void assertTrue(java.lang.String,boolean)>("should not have next", $z7);

        return;
    }

    public void testEmptyChain()
    {
        org.apache.commons.collections4.iterators.IteratorChainTest r0;
        org.apache.commons.collections4.iterators.IteratorChain $r2;
        boolean $z0;
        java.util.NoSuchElementException $r4;
        java.lang.IllegalStateException $r5;

        r0 := @this: org.apache.commons.collections4.iterators.IteratorChainTest;

        $r2 = new org.apache.commons.collections4.iterators.IteratorChain;

        specialinvoke $r2.<org.apache.commons.collections4.iterators.IteratorChain: void <init>()>();

        $z0 = virtualinvoke $r2.<org.apache.commons.collections4.iterators.IteratorChain: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.IteratorChainTest: void assertEquals(boolean,boolean)>(0, $z0);

     label1:
        virtualinvoke $r2.<org.apache.commons.collections4.iterators.IteratorChain: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.IteratorChainTest: void fail()>();

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        virtualinvoke $r2.<org.apache.commons.collections4.iterators.IteratorChain: void remove()>();

        staticinvoke <org.apache.commons.collections4.iterators.IteratorChainTest: void fail()>();

     label5:
        goto label7;

     label6:
        $r5 := @caughtexception;

     label7:
        return;

        catch java.util.NoSuchElementException from label1 to label2 with label3;
        catch java.lang.IllegalStateException from label4 to label5 with label6;
    }

    public volatile java.util.Iterator makeObject()
    {
        org.apache.commons.collections4.iterators.IteratorChainTest r0;
        org.apache.commons.collections4.iterators.IteratorChain $r1;

        r0 := @this: org.apache.commons.collections4.iterators.IteratorChainTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.IteratorChainTest: org.apache.commons.collections4.iterators.IteratorChain makeObject()>();

        return $r1;
    }

    public volatile java.util.Iterator makeEmptyIterator()
    {
        org.apache.commons.collections4.iterators.IteratorChainTest r0;
        org.apache.commons.collections4.iterators.IteratorChain $r1;

        r0 := @this: org.apache.commons.collections4.iterators.IteratorChainTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.IteratorChainTest: org.apache.commons.collections4.iterators.IteratorChain makeEmptyIterator()>();

        return $r1;
    }

    public volatile java.lang.Object makeObject()
    {
        org.apache.commons.collections4.iterators.IteratorChainTest r0;
        org.apache.commons.collections4.iterators.IteratorChain $r1;

        r0 := @this: org.apache.commons.collections4.iterators.IteratorChainTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.IteratorChainTest: org.apache.commons.collections4.iterators.IteratorChain makeObject()>();

        return $r1;
    }
}
