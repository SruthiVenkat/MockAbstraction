public class org.apache.commons.collections4.MultiMapUtilsTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.commons.collections4.MultiMapUtilsTest r0;

        r0 := @this: org.apache.commons.collections4.MultiMapUtilsTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testEmptyUnmodifiableMultiValuedMap()
    {
        org.apache.commons.collections4.MultiMapUtilsTest r0;
        org.apache.commons.collections4.MultiValuedMap r1;
        boolean $z0;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.apache.commons.collections4.MultiMapUtilsTest;

        r1 = <org.apache.commons.collections4.MultiMapUtils: org.apache.commons.collections4.MultiValuedMap EMPTY_MULTI_VALUED_MAP>;

        $z0 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

     label1:
        interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean put(java.lang.Object,java.lang.Object)>("key", "value");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should throw UnsupportedOperationException");

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
    }

    public void testTypeSafeEmptyMultiValuedMap()
    {
        org.apache.commons.collections4.MultiMapUtilsTest r0;
        org.apache.commons.collections4.MultiValuedMap r1;
        boolean $z0;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.apache.commons.collections4.MultiMapUtilsTest;

        r1 = staticinvoke <org.apache.commons.collections4.MultiMapUtils: org.apache.commons.collections4.MultiValuedMap emptyMultiValuedMap()>();

        $z0 = interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

     label1:
        interfaceinvoke r1.<org.apache.commons.collections4.MultiValuedMap: boolean put(java.lang.Object,java.lang.Object)>("key", "value");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should throw UnsupportedOperationException");

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
    }

    public void testEmptyIfNull()
    {
        org.apache.commons.collections4.MultiMapUtilsTest r0;
        org.apache.commons.collections4.MultiValuedMap $r2, $r4;
        boolean $z0, $z2;
        org.apache.commons.collections4.multimap.ArrayListValuedHashMap $r3;

        r0 := @this: org.apache.commons.collections4.MultiMapUtilsTest;

        $r2 = staticinvoke <org.apache.commons.collections4.MultiMapUtils: org.apache.commons.collections4.MultiValuedMap emptyIfNull(org.apache.commons.collections4.MultiValuedMap)>(null);

        $z0 = interfaceinvoke $r2.<org.apache.commons.collections4.MultiValuedMap: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r3 = new org.apache.commons.collections4.multimap.ArrayListValuedHashMap;

        specialinvoke $r3.<org.apache.commons.collections4.multimap.ArrayListValuedHashMap: void <init>()>();

        interfaceinvoke $r3.<org.apache.commons.collections4.MultiValuedMap: boolean put(java.lang.Object,java.lang.Object)>("item", "value");

        $r4 = staticinvoke <org.apache.commons.collections4.MultiMapUtils: org.apache.commons.collections4.MultiValuedMap emptyIfNull(org.apache.commons.collections4.MultiValuedMap)>($r3);

        $z2 = interfaceinvoke $r4.<org.apache.commons.collections4.MultiValuedMap: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z2);

        return;
    }

    public void testIsEmptyWithEmptyMap()
    {
        org.apache.commons.collections4.MultiMapUtilsTest r0;
        org.apache.commons.collections4.multimap.ArrayListValuedHashMap $r2;
        java.lang.Boolean $r3, $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.MultiMapUtilsTest;

        $r2 = new org.apache.commons.collections4.multimap.ArrayListValuedHashMap;

        specialinvoke $r2.<org.apache.commons.collections4.multimap.ArrayListValuedHashMap: void <init>()>();

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z0 = staticinvoke <org.apache.commons.collections4.MultiMapUtils: boolean isEmpty(org.apache.commons.collections4.MultiValuedMap)>($r2);

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r3, $r4);

        return;
    }

    public void testIsEmptyWithNonEmptyMap()
    {
        org.apache.commons.collections4.MultiMapUtilsTest r0;
        org.apache.commons.collections4.multimap.ArrayListValuedHashMap $r2;
        java.lang.Boolean $r3, $r4;
        boolean $z1;

        r0 := @this: org.apache.commons.collections4.MultiMapUtilsTest;

        $r2 = new org.apache.commons.collections4.multimap.ArrayListValuedHashMap;

        specialinvoke $r2.<org.apache.commons.collections4.multimap.ArrayListValuedHashMap: void <init>()>();

        interfaceinvoke $r2.<org.apache.commons.collections4.MultiValuedMap: boolean put(java.lang.Object,java.lang.Object)>("item", "value");

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $z1 = staticinvoke <org.apache.commons.collections4.MultiMapUtils: boolean isEmpty(org.apache.commons.collections4.MultiValuedMap)>($r2);

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r3, $r4);

        return;
    }

    public void testIsEmptyWithNull()
    {
        org.apache.commons.collections4.MultiMapUtilsTest r0;
        java.lang.Boolean $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.MultiMapUtilsTest;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z0 = staticinvoke <org.apache.commons.collections4.MultiMapUtils: boolean isEmpty(org.apache.commons.collections4.MultiValuedMap)>(null);

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r1, $r2);

        return;
    }

    public void testGetCollection()
    {
        org.apache.commons.collections4.MultiMapUtilsTest r0;
        java.lang.String r3, r8;
        java.util.Collection $r4, r9;
        java.lang.String[] $r5;
        org.apache.commons.collections4.multimap.ArrayListValuedHashMap $r6;
        boolean $z0;
        int i0, i1, i2, i3;

        r0 := @this: org.apache.commons.collections4.MultiMapUtilsTest;

        $r4 = staticinvoke <org.apache.commons.collections4.MultiMapUtils: java.util.Collection getCollection(org.apache.commons.collections4.MultiValuedMap,java.lang.Object)>(null, "key1");

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r4);

        $r5 = newarray (java.lang.String)[3];

        $r5[0] = "v1";

        $r5[1] = "v2";

        $r5[2] = "v3";

        $r6 = new org.apache.commons.collections4.multimap.ArrayListValuedHashMap;

        specialinvoke $r6.<org.apache.commons.collections4.multimap.ArrayListValuedHashMap: void <init>()>();

        i0 = lengthof $r5;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r8 = $r5[i1];

        interfaceinvoke $r6.<org.apache.commons.collections4.MultiValuedMap: boolean put(java.lang.Object,java.lang.Object)>("key1", r8);

        i1 = i1 + 1;

        goto label1;

     label2:
        r9 = staticinvoke <org.apache.commons.collections4.MultiMapUtils: java.util.Collection getCollection(org.apache.commons.collections4.MultiValuedMap,java.lang.Object)>($r6, "key1");

        i2 = lengthof $r5;

        i3 = 0;

     label3:
        if i3 >= i2 goto label4;

        r3 = $r5[i3];

        $z0 = interfaceinvoke r9.<java.util.Collection: boolean contains(java.lang.Object)>(r3);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        i3 = i3 + 1;

        goto label3;

     label4:
        return;
    }

    public void testGetValuesAsList()
    {
        org.apache.commons.collections4.MultiMapUtilsTest r0;
        java.util.List $r3, r10;
        java.lang.String[] $r4;
        org.apache.commons.collections4.multimap.ArrayListValuedHashMap $r5;
        boolean $z0, $z1;
        java.lang.Object $r6;
        int $i0, i1, i2, i3;
        java.lang.String $r7, r9, r12;
        java.util.Iterator r11;

        r0 := @this: org.apache.commons.collections4.MultiMapUtilsTest;

        $r3 = staticinvoke <org.apache.commons.collections4.MultiMapUtils: java.util.List getValuesAsList(org.apache.commons.collections4.MultiValuedMap,java.lang.Object)>(null, "key1");

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r3);

        $r4 = newarray (java.lang.String)[3];

        $r4[0] = "v1";

        $r4[1] = "v2";

        $r4[2] = "v3";

        $r5 = new org.apache.commons.collections4.multimap.ArrayListValuedHashMap;

        specialinvoke $r5.<org.apache.commons.collections4.multimap.ArrayListValuedHashMap: void <init>()>();

        i1 = lengthof $r4;

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        r9 = $r4[i2];

        interfaceinvoke $r5.<org.apache.commons.collections4.MultiValuedMap: boolean put(java.lang.Object,java.lang.Object)>("key1", r9);

        i2 = i2 + 1;

        goto label1;

     label2:
        r10 = staticinvoke <org.apache.commons.collections4.MultiMapUtils: java.util.List getValuesAsList(org.apache.commons.collections4.MultiValuedMap,java.lang.Object)>($r5, "key1");

        i3 = 0;

        r11 = interfaceinvoke r10.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.lang.String) $r6;

        $i0 = i3;

        i3 = i3 + 1;

        $r7 = $r4[$i0];

        $z1 = virtualinvoke r12.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        goto label3;

     label4:
        return;
    }

    public void testGetValuesAsSet()
    {
        org.apache.commons.collections4.MultiMapUtilsTest r0;
        java.lang.String r3, r8;
        java.util.List $r4;
        java.lang.String[] $r5;
        org.apache.commons.collections4.multimap.ArrayListValuedHashMap $r6;
        int $i0, i2, i3, i4, i5;
        long $l1;
        boolean $z0;
        java.util.Set r9;

        r0 := @this: org.apache.commons.collections4.MultiMapUtilsTest;

        $r4 = staticinvoke <org.apache.commons.collections4.MultiMapUtils: java.util.List getValuesAsList(org.apache.commons.collections4.MultiValuedMap,java.lang.Object)>(null, "key1");

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r4);

        $r5 = newarray (java.lang.String)[3];

        $r5[0] = "v1";

        $r5[1] = "v2";

        $r5[2] = "v3";

        $r6 = new org.apache.commons.collections4.multimap.ArrayListValuedHashMap;

        specialinvoke $r6.<org.apache.commons.collections4.multimap.ArrayListValuedHashMap: void <init>()>();

        i2 = lengthof $r5;

        i3 = 0;

     label1:
        if i3 >= i2 goto label2;

        r8 = $r5[i3];

        interfaceinvoke $r6.<org.apache.commons.collections4.MultiValuedMap: boolean put(java.lang.Object,java.lang.Object)>("key1", r8);

        interfaceinvoke $r6.<org.apache.commons.collections4.MultiValuedMap: boolean put(java.lang.Object,java.lang.Object)>("key1", r8);

        i3 = i3 + 1;

        goto label1;

     label2:
        r9 = staticinvoke <org.apache.commons.collections4.MultiMapUtils: java.util.Set getValuesAsSet(org.apache.commons.collections4.MultiValuedMap,java.lang.Object)>($r6, "key1");

        $i0 = interfaceinvoke r9.<java.util.Set: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l1);

        i4 = lengthof $r5;

        i5 = 0;

     label3:
        if i5 >= i4 goto label4;

        r3 = $r5[i5];

        $z0 = interfaceinvoke r9.<java.util.Set: boolean contains(java.lang.Object)>(r3);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        i5 = i5 + 1;

        goto label3;

     label4:
        return;
    }

    public void testGetValuesAsBag()
    {
        org.apache.commons.collections4.MultiMapUtilsTest r0;
        java.lang.String r3, r8;
        org.apache.commons.collections4.Bag $r4, r9;
        java.lang.String[] $r5;
        org.apache.commons.collections4.multimap.ArrayListValuedHashMap $r6;
        int $i0, $i2, i4, i5, i6, i7;
        long $l1, $l3;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.MultiMapUtilsTest;

        $r4 = staticinvoke <org.apache.commons.collections4.MultiMapUtils: org.apache.commons.collections4.Bag getValuesAsBag(org.apache.commons.collections4.MultiValuedMap,java.lang.Object)>(null, "key1");

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r4);

        $r5 = newarray (java.lang.String)[3];

        $r5[0] = "v1";

        $r5[1] = "v2";

        $r5[2] = "v3";

        $r6 = new org.apache.commons.collections4.multimap.ArrayListValuedHashMap;

        specialinvoke $r6.<org.apache.commons.collections4.multimap.ArrayListValuedHashMap: void <init>()>();

        i4 = lengthof $r5;

        i5 = 0;

     label1:
        if i5 >= i4 goto label2;

        r8 = $r5[i5];

        interfaceinvoke $r6.<org.apache.commons.collections4.MultiValuedMap: boolean put(java.lang.Object,java.lang.Object)>("key1", r8);

        interfaceinvoke $r6.<org.apache.commons.collections4.MultiValuedMap: boolean put(java.lang.Object,java.lang.Object)>("key1", r8);

        i5 = i5 + 1;

        goto label1;

     label2:
        r9 = staticinvoke <org.apache.commons.collections4.MultiMapUtils: org.apache.commons.collections4.Bag getValuesAsBag(org.apache.commons.collections4.MultiValuedMap,java.lang.Object)>($r6, "key1");

        $i0 = interfaceinvoke r9.<org.apache.commons.collections4.Bag: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(6L, $l1);

        i6 = lengthof $r5;

        i7 = 0;

     label3:
        if i7 >= i6 goto label4;

        r3 = $r5[i7];

        $z0 = interfaceinvoke r9.<org.apache.commons.collections4.Bag: boolean contains(java.lang.Object)>(r3);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $i2 = interfaceinvoke r9.<org.apache.commons.collections4.Bag: int getCount(java.lang.Object)>(r3);

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l3);

        i7 = i7 + 1;

        goto label3;

     label4:
        return;
    }
}
