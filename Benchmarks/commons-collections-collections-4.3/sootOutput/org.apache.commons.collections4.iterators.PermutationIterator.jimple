public class org.apache.commons.collections4.iterators.PermutationIterator extends java.lang.Object implements java.util.Iterator
{
    private final int[] keys;
    private final java.util.Map objectMap;
    private final boolean[] direction;
    private java.util.List nextPermutation;

    public void <init>(java.util.Collection)
    {
        org.apache.commons.collections4.iterators.PermutationIterator r0;
        java.util.Collection r1;
        java.util.Iterator r2;
        java.lang.Object r3;
        int $i0, $i1, $i2, i3;
        int[] $r4, $r12;
        boolean[] $r5, $r6;
        java.util.HashMap $r7;
        boolean $z0;
        java.util.ArrayList $r8;
        java.util.Map $r9;
        java.lang.Integer $r10;
        java.lang.NullPointerException $r13;

        r0 := @this: org.apache.commons.collections4.iterators.PermutationIterator;

        r1 := @parameter0: java.util.Collection;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r13 = new java.lang.NullPointerException;

        specialinvoke $r13.<java.lang.NullPointerException: void <init>(java.lang.String)>("The collection must not be null");

        throw $r13;

     label1:
        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        $r4 = newarray (int)[$i0];

        r0.<org.apache.commons.collections4.iterators.PermutationIterator: int[] keys> = $r4;

        $i1 = interfaceinvoke r1.<java.util.Collection: int size()>();

        $r5 = newarray (boolean)[$i1];

        r0.<org.apache.commons.collections4.iterators.PermutationIterator: boolean[] direction> = $r5;

        $r6 = r0.<org.apache.commons.collections4.iterators.PermutationIterator: boolean[] direction>;

        staticinvoke <java.util.Arrays: void fill(boolean[],boolean)>($r6, 0);

        i3 = 1;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        r0.<org.apache.commons.collections4.iterators.PermutationIterator: java.util.Map objectMap> = $r7;

        r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r9 = r0.<org.apache.commons.collections4.iterators.PermutationIterator: java.util.Map objectMap>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, r3);

        $r12 = r0.<org.apache.commons.collections4.iterators.PermutationIterator: int[] keys>;

        $i2 = i3 - 1;

        $r12[$i2] = i3;

        i3 = i3 + 1;

        goto label2;

     label3:
        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

        r0.<org.apache.commons.collections4.iterators.PermutationIterator: java.util.List nextPermutation> = $r8;

        return;
    }

    public boolean hasNext()
    {
        org.apache.commons.collections4.iterators.PermutationIterator r0;
        java.util.List $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.iterators.PermutationIterator;

        $r1 = r0.<org.apache.commons.collections4.iterators.PermutationIterator: java.util.List nextPermutation>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.util.List next()
    {
        org.apache.commons.collections4.iterators.PermutationIterator r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i18, i19, i20, i23, $i24, $i25;
        boolean z0, $z1, $z2, $z3, $z5, $z6, $z7, $z8;
        int[] $r2, $r4, $r5, $r6, $r7, $r13, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r27, $r29;
        boolean[] $r3, $r8, $r9, $r10, $r11, $r14, $r15, $r16, $r25;
        java.util.ArrayList $r12;
        java.util.NoSuchElementException $r24;
        java.util.List r26, r32;
        byte $b21;
        java.util.Map $r28;
        java.lang.Integer $r30;
        java.lang.Object $r31;

        r0 := @this: org.apache.commons.collections4.iterators.PermutationIterator;

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.PermutationIterator: boolean hasNext()>();

        if $z1 != 0 goto label01;

        $r24 = new java.util.NoSuchElementException;

        specialinvoke $r24.<java.util.NoSuchElementException: void <init>()>();

        throw $r24;

     label01:
        i18 = -1;

        i19 = -1;

        i20 = 0;

     label02:
        $r2 = r0.<org.apache.commons.collections4.iterators.PermutationIterator: int[] keys>;

        $i1 = lengthof $r2;

        if i20 >= $i1 goto label06;

        $r16 = r0.<org.apache.commons.collections4.iterators.PermutationIterator: boolean[] direction>;

        $z6 = $r16[i20];

        if $z6 == 0 goto label03;

        $r21 = r0.<org.apache.commons.collections4.iterators.PermutationIterator: int[] keys>;

        $i13 = lengthof $r21;

        $i14 = $i13 - 1;

        if i20 >= $i14 goto label03;

        $r22 = r0.<org.apache.commons.collections4.iterators.PermutationIterator: int[] keys>;

        $i17 = $r22[i20];

        $r23 = r0.<org.apache.commons.collections4.iterators.PermutationIterator: int[] keys>;

        $i15 = i20 + 1;

        $i16 = $r23[$i15];

        if $i17 > $i16 goto label04;

     label03:
        $r25 = r0.<org.apache.commons.collections4.iterators.PermutationIterator: boolean[] direction>;

        $z7 = $r25[i20];

        if $z7 != 0 goto label05;

        if i20 <= 0 goto label05;

        $r17 = r0.<org.apache.commons.collections4.iterators.PermutationIterator: int[] keys>;

        $i11 = $r17[i20];

        $r18 = r0.<org.apache.commons.collections4.iterators.PermutationIterator: int[] keys>;

        $i9 = i20 - 1;

        $i10 = $r18[$i9];

        if $i11 <= $i10 goto label05;

     label04:
        $r19 = r0.<org.apache.commons.collections4.iterators.PermutationIterator: int[] keys>;

        $i12 = $r19[i20];

        if $i12 <= i19 goto label05;

        $r20 = r0.<org.apache.commons.collections4.iterators.PermutationIterator: int[] keys>;

        i19 = $r20[i20];

        i18 = i20;

     label05:
        i20 = i20 + 1;

        goto label02;

     label06:
        if i19 != -1 goto label07;

        r26 = r0.<org.apache.commons.collections4.iterators.PermutationIterator: java.util.List nextPermutation>;

        r0.<org.apache.commons.collections4.iterators.PermutationIterator: java.util.List nextPermutation> = null;

        return r26;

     label07:
        $r3 = r0.<org.apache.commons.collections4.iterators.PermutationIterator: boolean[] direction>;

        $z2 = $r3[i18];

        if $z2 == 0 goto label08;

        $b21 = 1;

        goto label09;

     label08:
        $b21 = -1;

     label09:
        $r4 = r0.<org.apache.commons.collections4.iterators.PermutationIterator: int[] keys>;

        i0 = $r4[i18];

        $r6 = r0.<org.apache.commons.collections4.iterators.PermutationIterator: int[] keys>;

        $r5 = r0.<org.apache.commons.collections4.iterators.PermutationIterator: int[] keys>;

        $i2 = i18 + $b21;

        $i3 = $r5[$i2];

        $r6[i18] = $i3;

        $r7 = r0.<org.apache.commons.collections4.iterators.PermutationIterator: int[] keys>;

        $i4 = i18 + $b21;

        $r7[$i4] = i0;

        $r8 = r0.<org.apache.commons.collections4.iterators.PermutationIterator: boolean[] direction>;

        z0 = $r8[i18];

        $r10 = r0.<org.apache.commons.collections4.iterators.PermutationIterator: boolean[] direction>;

        $r9 = r0.<org.apache.commons.collections4.iterators.PermutationIterator: boolean[] direction>;

        $i5 = i18 + $b21;

        $z3 = $r9[$i5];

        $r10[i18] = $z3;

        $r11 = r0.<org.apache.commons.collections4.iterators.PermutationIterator: boolean[] direction>;

        $i6 = i18 + $b21;

        $r11[$i6] = z0;

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        i23 = 0;

     label10:
        $r27 = r0.<org.apache.commons.collections4.iterators.PermutationIterator: int[] keys>;

        $i24 = lengthof $r27;

        if i23 >= $i24 goto label14;

        $r13 = r0.<org.apache.commons.collections4.iterators.PermutationIterator: int[] keys>;

        $i7 = $r13[i23];

        if $i7 <= i19 goto label13;

        $r15 = r0.<org.apache.commons.collections4.iterators.PermutationIterator: boolean[] direction>;

        $i8 = i23;

        $r14 = r0.<org.apache.commons.collections4.iterators.PermutationIterator: boolean[] direction>;

        $z5 = $r14[i23];

        if $z5 != 0 goto label11;

        $z8 = 1;

        goto label12;

     label11:
        $z8 = 0;

     label12:
        $r15[$i8] = $z8;

     label13:
        $r28 = r0.<org.apache.commons.collections4.iterators.PermutationIterator: java.util.Map objectMap>;

        $r29 = r0.<org.apache.commons.collections4.iterators.PermutationIterator: int[] keys>;

        $i25 = $r29[i23];

        $r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i25);

        $r31 = interfaceinvoke $r28.<java.util.Map: java.lang.Object get(java.lang.Object)>($r30);

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r31);

        i23 = i23 + 1;

        goto label10;

     label14:
        r32 = r0.<org.apache.commons.collections4.iterators.PermutationIterator: java.util.List nextPermutation>;

        r0.<org.apache.commons.collections4.iterators.PermutationIterator: java.util.List nextPermutation> = $r12;

        return r32;
    }

    public void remove()
    {
        org.apache.commons.collections4.iterators.PermutationIterator r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.apache.commons.collections4.iterators.PermutationIterator;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("remove() is not supported");

        throw $r1;
    }

    public volatile java.lang.Object next()
    {
        org.apache.commons.collections4.iterators.PermutationIterator r0;
        java.util.List $r1;

        r0 := @this: org.apache.commons.collections4.iterators.PermutationIterator;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.PermutationIterator: java.util.List next()>();

        return $r1;
    }
}
