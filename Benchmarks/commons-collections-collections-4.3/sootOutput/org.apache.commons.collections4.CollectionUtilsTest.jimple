public class org.apache.commons.collections4.CollectionUtilsTest extends org.apache.commons.collections4.MockTestCase
{
    private java.util.List collectionA;
    private java.util.List collectionB;
    private java.util.Collection collectionC;
    private java.util.Collection collectionD;
    private java.util.Collection collectionE;
    private java.util.Collection collectionA2;
    private java.util.Collection collectionB2;
    private java.util.Collection collectionC2;
    private java.lang.Iterable iterableA;
    private java.lang.Iterable iterableB;
    private java.lang.Iterable iterableC;
    private java.lang.Iterable iterableA2;
    private java.lang.Iterable iterableB2;
    private final java.util.Collection emptyCollection;
    private static org.apache.commons.collections4.Predicate EQUALS_TWO;
    org.apache.commons.collections4.Transformer TRANSFORM_TO_INTEGER;

    public void <init>()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.ArrayList $r1;
        org.apache.commons.collections4.CollectionUtilsTest$6 $r2;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        specialinvoke r0.<org.apache.commons.collections4.MockTestCase: void <init>()>();

        r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA> = null;

        r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionB> = null;

        r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionC> = null;

        r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionD> = null;

        r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionE> = null;

        r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionA2> = null;

        r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionB2> = null;

        r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionC2> = null;

        r0.<org.apache.commons.collections4.CollectionUtilsTest: java.lang.Iterable iterableA> = null;

        r0.<org.apache.commons.collections4.CollectionUtilsTest: java.lang.Iterable iterableB> = null;

        r0.<org.apache.commons.collections4.CollectionUtilsTest: java.lang.Iterable iterableC> = null;

        r0.<org.apache.commons.collections4.CollectionUtilsTest: java.lang.Iterable iterableA2> = null;

        r0.<org.apache.commons.collections4.CollectionUtilsTest: java.lang.Iterable iterableB2> = null;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(1);

        r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection emptyCollection> = $r1;

        $r2 = new org.apache.commons.collections4.CollectionUtilsTest$6;

        specialinvoke $r2.<org.apache.commons.collections4.CollectionUtilsTest$6: void <init>(org.apache.commons.collections4.CollectionUtilsTest)>(r0);

        r0.<org.apache.commons.collections4.CollectionUtilsTest: org.apache.commons.collections4.Transformer TRANSFORM_TO_INTEGER> = $r2;

        return;
    }

    public void setUp()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.Iterator r1;
        java.lang.Long r2, $r26, $r28, $r30, $r32, $r34, $r36, $r38, $r40, $r42, $r44;
        java.util.ArrayList $r3, $r45, $r50, $r58, $r75;
        java.util.List $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r22, $r25, $r27, $r29, $r31, $r33, $r35, $r37, $r39, $r41, $r43, $r46, $r47, $r48, $r51, $r53;
        java.lang.Integer $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r60, $r62, $r64, $r66, $r68, $r70, $r72, $r74, $r77, $r79, $r81, $r83, $r85, $r87, $r89, $r92;
        java.util.LinkedList $r24, $r52, $r54;
        boolean $z20;
        java.util.Collection $r49, $r55, $r56, $r57, $r59, $r61, $r63, $r65, $r67, $r69, $r71, $r73, $r76, $r78, $r80, $r82, $r84, $r86, $r88, $r91;
        java.lang.Object $r90;
        int $i0;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA> = $r3;

        $r4 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r5);

        $r6 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r7);

        $r8 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r9);

        $r10 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r11);

        $r12 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r13);

        $r14 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>($r15);

        $r16 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        interfaceinvoke $r16.<java.util.List: boolean add(java.lang.Object)>($r17);

        $r18 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        interfaceinvoke $r18.<java.util.List: boolean add(java.lang.Object)>($r19);

        $r20 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        interfaceinvoke $r20.<java.util.List: boolean add(java.lang.Object)>($r21);

        $r22 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        interfaceinvoke $r22.<java.util.List: boolean add(java.lang.Object)>($r23);

        $r24 = new java.util.LinkedList;

        specialinvoke $r24.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionB> = $r24;

        $r25 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionB>;

        $r26 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(5L);

        interfaceinvoke $r25.<java.util.List: boolean add(java.lang.Object)>($r26);

        $r27 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionB>;

        $r28 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(4L);

        interfaceinvoke $r27.<java.util.List: boolean add(java.lang.Object)>($r28);

        $r29 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionB>;

        $r30 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(4L);

        interfaceinvoke $r29.<java.util.List: boolean add(java.lang.Object)>($r30);

        $r31 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionB>;

        $r32 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(3L);

        interfaceinvoke $r31.<java.util.List: boolean add(java.lang.Object)>($r32);

        $r33 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionB>;

        $r34 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(3L);

        interfaceinvoke $r33.<java.util.List: boolean add(java.lang.Object)>($r34);

        $r35 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionB>;

        $r36 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(3L);

        interfaceinvoke $r35.<java.util.List: boolean add(java.lang.Object)>($r36);

        $r37 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionB>;

        $r38 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(2L);

        interfaceinvoke $r37.<java.util.List: boolean add(java.lang.Object)>($r38);

        $r39 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionB>;

        $r40 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(2L);

        interfaceinvoke $r39.<java.util.List: boolean add(java.lang.Object)>($r40);

        $r41 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionB>;

        $r42 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(2L);

        interfaceinvoke $r41.<java.util.List: boolean add(java.lang.Object)>($r42);

        $r43 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionB>;

        $r44 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(2L);

        interfaceinvoke $r43.<java.util.List: boolean add(java.lang.Object)>($r44);

        $r45 = new java.util.ArrayList;

        specialinvoke $r45.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionC> = $r45;

        $r46 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionB>;

        r1 = interfaceinvoke $r46.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z20 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z20 == 0 goto label2;

        $r90 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.lang.Long) $r90;

        $r91 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionC>;

        $i0 = virtualinvoke r2.<java.lang.Long: int intValue()>();

        $r92 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r91.<java.util.Collection: boolean add(java.lang.Object)>($r92);

        goto label1;

     label2:
        $r47 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        r0.<org.apache.commons.collections4.CollectionUtilsTest: java.lang.Iterable iterableA> = $r47;

        $r48 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionB>;

        r0.<org.apache.commons.collections4.CollectionUtilsTest: java.lang.Iterable iterableB> = $r48;

        $r49 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionC>;

        r0.<org.apache.commons.collections4.CollectionUtilsTest: java.lang.Iterable iterableC> = $r49;

        $r50 = new java.util.ArrayList;

        $r51 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        specialinvoke $r50.<java.util.ArrayList: void <init>(java.util.Collection)>($r51);

        r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionA2> = $r50;

        $r52 = new java.util.LinkedList;

        $r53 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionB>;

        specialinvoke $r52.<java.util.LinkedList: void <init>(java.util.Collection)>($r53);

        r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionB2> = $r52;

        $r54 = new java.util.LinkedList;

        $r55 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionC>;

        specialinvoke $r54.<java.util.LinkedList: void <init>(java.util.Collection)>($r55);

        r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionC2> = $r54;

        $r56 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionA2>;

        r0.<org.apache.commons.collections4.CollectionUtilsTest: java.lang.Iterable iterableA2> = $r56;

        $r57 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionB2>;

        r0.<org.apache.commons.collections4.CollectionUtilsTest: java.lang.Iterable iterableB2> = $r57;

        $r58 = new java.util.ArrayList;

        specialinvoke $r58.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionD> = $r58;

        $r59 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionD>;

        $r60 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke $r59.<java.util.Collection: boolean add(java.lang.Object)>($r60);

        $r61 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionD>;

        $r62 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke $r61.<java.util.Collection: boolean add(java.lang.Object)>($r62);

        $r63 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionD>;

        $r64 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke $r63.<java.util.Collection: boolean add(java.lang.Object)>($r64);

        $r65 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionD>;

        $r66 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke $r65.<java.util.Collection: boolean add(java.lang.Object)>($r66);

        $r67 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionD>;

        $r68 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        interfaceinvoke $r67.<java.util.Collection: boolean add(java.lang.Object)>($r68);

        $r69 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionD>;

        $r70 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(7);

        interfaceinvoke $r69.<java.util.Collection: boolean add(java.lang.Object)>($r70);

        $r71 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionD>;

        $r72 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(7);

        interfaceinvoke $r71.<java.util.Collection: boolean add(java.lang.Object)>($r72);

        $r73 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionD>;

        $r74 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        interfaceinvoke $r73.<java.util.Collection: boolean add(java.lang.Object)>($r74);

        $r75 = new java.util.ArrayList;

        specialinvoke $r75.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionE> = $r75;

        $r76 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionE>;

        $r77 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        interfaceinvoke $r76.<java.util.Collection: boolean add(java.lang.Object)>($r77);

        $r78 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionE>;

        $r79 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        interfaceinvoke $r78.<java.util.Collection: boolean add(java.lang.Object)>($r79);

        $r80 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionE>;

        $r81 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        interfaceinvoke $r80.<java.util.Collection: boolean add(java.lang.Object)>($r81);

        $r82 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionE>;

        $r83 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        interfaceinvoke $r82.<java.util.Collection: boolean add(java.lang.Object)>($r83);

        $r84 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionE>;

        $r85 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        interfaceinvoke $r84.<java.util.Collection: boolean add(java.lang.Object)>($r85);

        $r86 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionE>;

        $r87 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        interfaceinvoke $r86.<java.util.Collection: boolean add(java.lang.Object)>($r87);

        $r88 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionE>;

        $r89 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9);

        interfaceinvoke $r88.<java.util.Collection: boolean add(java.lang.Object)>($r89);

        return;
    }

    public void getCardinalityMap()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.Map r1, r2;
        java.lang.Iterable $r3, $r18;
        java.lang.Integer $r4, $r6, $r7, $r9, $r10, $r12, $r13, $r15, $r16, $r23, $r26, $r29, $r32;
        java.lang.Object $r5, $r8, $r11, $r14, $r17, $r20, $r22, $r25, $r28, $r31;
        int $i0, $i2, $i4, $i6, $i8, $i10, $i12, $i14;
        long $l1, $l3, $l5, $l7, $l9, $l11, $l13, $l15;
        java.lang.Long $r19, $r21, $r24, $r27, $r30;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r3 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.lang.Iterable iterableA>;

        r1 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Map getCardinalityMap(java.lang.Iterable)>($r3);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r5 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        $r6 = (java.lang.Integer) $r5;

        $i0 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l1);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r8 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        $r9 = (java.lang.Integer) $r8;

        $i2 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l3);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r11 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r10);

        $r12 = (java.lang.Integer) $r11;

        $i4 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l5);

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r14 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r13);

        $r15 = (java.lang.Integer) $r14;

        $i6 = virtualinvoke $r15.<java.lang.Integer: int intValue()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l7);

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r17 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r16);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r17);

        $r18 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.lang.Iterable iterableB>;

        r2 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Map getCardinalityMap(java.lang.Iterable)>($r18);

        $r19 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L);

        $r20 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r19);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r20);

        $r21 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(2L);

        $r22 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r21);

        $r23 = (java.lang.Integer) $r22;

        $i8 = virtualinvoke $r23.<java.lang.Integer: int intValue()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l9);

        $r24 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(3L);

        $r25 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r24);

        $r26 = (java.lang.Integer) $r25;

        $i10 = virtualinvoke $r26.<java.lang.Integer: int intValue()>();

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l11);

        $r27 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(4L);

        $r28 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r27);

        $r29 = (java.lang.Integer) $r28;

        $i12 = virtualinvoke $r29.<java.lang.Integer: int intValue()>();

        $l13 = (long) $i12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l13);

        $r30 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(5L);

        $r31 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r30);

        $r32 = (java.lang.Integer) $r31;

        $i14 = virtualinvoke $r32.<java.lang.Integer: int intValue()>();

        $l15 = (long) $i14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l15);

        return;
    }

    public void cardinality()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.lang.Integer $r3, $r5, $r7, $r9, $r11, $r25;
        java.lang.Iterable $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r22, $r24, $r26;
        int $i0, $i2, $i4, $i6, $i8, $i10, $i12, $i14, $i16, $i18, $i20, $i22, $i24, $i26, $i28, $i30, $i32, $i34, $i36, $i38, $i40, $i42;
        long $l1, $l3, $l5, $l7, $l9, $l11, $l13, $l15, $l17, $l19, $l21, $l23, $l25, $l27, $l29, $l31, $l33, $l35, $l37, $l39, $l41, $l43;
        java.lang.Long $r13, $r15, $r17, $r19, $r21, $r23;
        java.util.HashSet $r27;
        org.apache.commons.collections4.bag.HashBag $r28;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r4 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.lang.Iterable iterableA>;

        $i0 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int cardinality(java.lang.Object,java.lang.Iterable)>($r3, $r4);

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l1);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r6 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.lang.Iterable iterableA>;

        $i2 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int cardinality(java.lang.Object,java.lang.Iterable)>($r5, $r6);

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l3);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r8 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.lang.Iterable iterableA>;

        $i4 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int cardinality(java.lang.Object,java.lang.Iterable)>($r7, $r8);

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l5);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r10 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.lang.Iterable iterableA>;

        $i6 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int cardinality(java.lang.Object,java.lang.Iterable)>($r9, $r10);

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l7);

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r12 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.lang.Iterable iterableA>;

        $i8 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int cardinality(java.lang.Object,java.lang.Iterable)>($r11, $r12);

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l9);

        $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L);

        $r14 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.lang.Iterable iterableB>;

        $i10 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int cardinality(java.lang.Object,java.lang.Iterable)>($r13, $r14);

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l11);

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(2L);

        $r16 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.lang.Iterable iterableB>;

        $i12 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int cardinality(java.lang.Object,java.lang.Iterable)>($r15, $r16);

        $l13 = (long) $i12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l13);

        $r17 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(3L);

        $r18 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.lang.Iterable iterableB>;

        $i14 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int cardinality(java.lang.Object,java.lang.Iterable)>($r17, $r18);

        $l15 = (long) $i14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l15);

        $r19 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(4L);

        $r20 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.lang.Iterable iterableB>;

        $i16 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int cardinality(java.lang.Object,java.lang.Iterable)>($r19, $r20);

        $l17 = (long) $i16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l17);

        $r21 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(5L);

        $r22 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.lang.Iterable iterableB>;

        $i18 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int cardinality(java.lang.Object,java.lang.Iterable)>($r21, $r22);

        $l19 = (long) $i18;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l19);

        $r23 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(2L);

        $r24 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.lang.Iterable iterableA2>;

        $i20 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int cardinality(java.lang.Object,java.lang.Iterable)>($r23, $r24);

        $l21 = (long) $i20;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l21);

        $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r26 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.lang.Iterable iterableB2>;

        $i22 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int cardinality(java.lang.Object,java.lang.Iterable)>($r25, $r26);

        $l23 = (long) $i22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l23);

        $r27 = new java.util.HashSet;

        specialinvoke $r27.<java.util.HashSet: void <init>()>();

        interfaceinvoke $r27.<java.util.Set: boolean add(java.lang.Object)>("A");

        interfaceinvoke $r27.<java.util.Set: boolean add(java.lang.Object)>("C");

        interfaceinvoke $r27.<java.util.Set: boolean add(java.lang.Object)>("E");

        interfaceinvoke $r27.<java.util.Set: boolean add(java.lang.Object)>("E");

        $i24 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int cardinality(java.lang.Object,java.lang.Iterable)>("A", $r27);

        $l25 = (long) $i24;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l25);

        $i26 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int cardinality(java.lang.Object,java.lang.Iterable)>("B", $r27);

        $l27 = (long) $i26;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l27);

        $i28 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int cardinality(java.lang.Object,java.lang.Iterable)>("C", $r27);

        $l29 = (long) $i28;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l29);

        $i30 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int cardinality(java.lang.Object,java.lang.Iterable)>("D", $r27);

        $l31 = (long) $i30;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l31);

        $i32 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int cardinality(java.lang.Object,java.lang.Iterable)>("E", $r27);

        $l33 = (long) $i32;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l33);

        $r28 = new org.apache.commons.collections4.bag.HashBag;

        specialinvoke $r28.<org.apache.commons.collections4.bag.HashBag: void <init>()>();

        interfaceinvoke $r28.<org.apache.commons.collections4.Bag: boolean add(java.lang.Object,int)>("A", 3);

        interfaceinvoke $r28.<org.apache.commons.collections4.Bag: boolean add(java.lang.Object)>("C");

        interfaceinvoke $r28.<org.apache.commons.collections4.Bag: boolean add(java.lang.Object)>("E");

        interfaceinvoke $r28.<org.apache.commons.collections4.Bag: boolean add(java.lang.Object)>("E");

        $i34 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int cardinality(java.lang.Object,java.lang.Iterable)>("A", $r28);

        $l35 = (long) $i34;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l35);

        $i36 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int cardinality(java.lang.Object,java.lang.Iterable)>("B", $r28);

        $l37 = (long) $i36;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l37);

        $i38 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int cardinality(java.lang.Object,java.lang.Iterable)>("C", $r28);

        $l39 = (long) $i38;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l39);

        $i40 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int cardinality(java.lang.Object,java.lang.Iterable)>("D", $r28);

        $l41 = (long) $i40;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l41);

        $i42 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int cardinality(java.lang.Object,java.lang.Iterable)>("E", $r28);

        $l43 = (long) $i42;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l43);

        return;
    }

    public void cardinalityOfNull()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.ArrayList $r2;
        int $i0, $i2, $i4, $i6, $i8, $i10, $i12;
        long $l1, $l3, $l5, $l7, $l9, $l11, $l13;
        java.lang.Object $r3, $r4, $r6, $r8, $r10, $r12, $r14;
        java.lang.Integer $r5, $r7, $r9, $r11, $r13;
        java.util.Map r15, r16, r17, r18, r19, r20, r21;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $i0 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int cardinality(java.lang.Object,java.lang.Iterable)>(null, $r2);

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        r15 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Map getCardinalityMap(java.lang.Iterable)>($r2);

        $r3 = interfaceinvoke r15.<java.util.Map: java.lang.Object get(java.lang.Object)>(null);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r3);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>("A");

        $i2 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int cardinality(java.lang.Object,java.lang.Iterable)>(null, $r2);

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l3);

        r16 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Map getCardinalityMap(java.lang.Iterable)>($r2);

        $r4 = interfaceinvoke r16.<java.util.Map: java.lang.Object get(java.lang.Object)>(null);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r4);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(null);

        $i4 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int cardinality(java.lang.Object,java.lang.Iterable)>(null, $r2);

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l5);

        r17 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Map getCardinalityMap(java.lang.Iterable)>($r2);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r6 = interfaceinvoke r17.<java.util.Map: java.lang.Object get(java.lang.Object)>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r5, $r6);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>("B");

        $i6 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int cardinality(java.lang.Object,java.lang.Iterable)>(null, $r2);

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l7);

        r18 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Map getCardinalityMap(java.lang.Iterable)>($r2);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r8 = interfaceinvoke r18.<java.util.Map: java.lang.Object get(java.lang.Object)>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, $r8);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(null);

        $i8 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int cardinality(java.lang.Object,java.lang.Iterable)>(null, $r2);

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l9);

        r19 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Map getCardinalityMap(java.lang.Iterable)>($r2);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r10 = interfaceinvoke r19.<java.util.Map: java.lang.Object get(java.lang.Object)>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r9, $r10);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>("B");

        $i10 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int cardinality(java.lang.Object,java.lang.Iterable)>(null, $r2);

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l11);

        r20 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Map getCardinalityMap(java.lang.Iterable)>($r2);

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r12 = interfaceinvoke r20.<java.util.Map: java.lang.Object get(java.lang.Object)>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r11, $r12);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(null);

        $i12 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int cardinality(java.lang.Object,java.lang.Iterable)>(null, $r2);

        $l13 = (long) $i12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l13);

        r21 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Map getCardinalityMap(java.lang.Iterable)>($r2);

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r14 = interfaceinvoke r21.<java.util.Map: java.lang.Object get(java.lang.Object)>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r13, $r14);

        return;
    }

    public void containsAll()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.ArrayList $r7, $r8, $r9, $r10, $r11, $r12;
        boolean $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>(int)>(0);

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>(1);

        interfaceinvoke $r8.<java.util.Collection: boolean add(java.lang.Object)>("1");

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>(int)>(1);

        interfaceinvoke $r9.<java.util.Collection: boolean add(java.lang.Object)>("2");

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>(int)>(1);

        interfaceinvoke $r10.<java.util.Collection: boolean add(java.lang.Object)>("3");

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>(int)>(2);

        interfaceinvoke $r11.<java.util.Collection: boolean add(java.lang.Object)>("1");

        interfaceinvoke $r11.<java.util.Collection: boolean add(java.lang.Object)>("3");

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>(int)>(3);

        interfaceinvoke $r12.<java.util.Collection: boolean add(java.lang.Object)>("1");

        interfaceinvoke $r12.<java.util.Collection: boolean add(java.lang.Object)>("3");

        interfaceinvoke $r12.<java.util.Collection: boolean add(java.lang.Object)>("1");

        $z8 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean containsAll(java.util.Collection,java.util.Collection)>($r8, $r11);

        if $z8 != 0 goto label01;

        $z23 = 1;

        goto label02;

     label01:
        $z23 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("containsAll({1},{1,3}) should return false.", $z23);

        $z9 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean containsAll(java.util.Collection,java.util.Collection)>($r11, $r8);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("containsAll({1,3},{1}) should return true.", $z9);

        $z10 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean containsAll(java.util.Collection,java.util.Collection)>($r10, $r11);

        if $z10 != 0 goto label03;

        $z24 = 1;

        goto label04;

     label03:
        $z24 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("containsAll({3},{1,3}) should return false.", $z24);

        $z11 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean containsAll(java.util.Collection,java.util.Collection)>($r11, $r10);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("containsAll({1,3},{3}) should return true.", $z11);

        $z12 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean containsAll(java.util.Collection,java.util.Collection)>($r9, $r9);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("containsAll({2},{2}) should return true.", $z12);

        $z13 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean containsAll(java.util.Collection,java.util.Collection)>($r11, $r11);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("containsAll({1,3},{1,3}) should return true.", $z13);

        $z14 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean containsAll(java.util.Collection,java.util.Collection)>($r9, $r11);

        if $z14 != 0 goto label05;

        $z25 = 1;

        goto label06;

     label05:
        $z25 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("containsAll({2},{1,3}) should return false.", $z25);

        $z15 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean containsAll(java.util.Collection,java.util.Collection)>($r11, $r9);

        if $z15 != 0 goto label07;

        $z26 = 1;

        goto label08;

     label07:
        $z26 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("containsAll({1,3},{2}) should return false.", $z26);

        $z16 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean containsAll(java.util.Collection,java.util.Collection)>($r8, $r10);

        if $z16 != 0 goto label09;

        $z27 = 1;

        goto label10;

     label09:
        $z27 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("containsAll({1},{3}) should return false.", $z27);

        $z17 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean containsAll(java.util.Collection,java.util.Collection)>($r10, $r8);

        if $z17 != 0 goto label11;

        $z28 = 1;

        goto label12;

     label11:
        $z28 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("containsAll({3},{1}) should return false.", $z28);

        $z18 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean containsAll(java.util.Collection,java.util.Collection)>($r11, $r7);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("containsAll({1,3},{}) should return true.", $z18);

        $z19 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean containsAll(java.util.Collection,java.util.Collection)>($r7, $r11);

        if $z19 != 0 goto label13;

        $z29 = 1;

        goto label14;

     label13:
        $z29 = 0;

     label14:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("containsAll({},{1,3}) should return false.", $z29);

        $z20 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean containsAll(java.util.Collection,java.util.Collection)>($r7, $r7);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("containsAll({},{}) should return true.", $z20);

        $z21 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean containsAll(java.util.Collection,java.util.Collection)>($r11, $r12);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("containsAll({1,3},{1,3,1}) should return true.", $z21);

        $z22 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean containsAll(java.util.Collection,java.util.Collection)>($r11, $r11);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("containsAll({1,3,1},{1,3,1}) should return true.", $z22);

        return;
    }

    public void containsAnyInCollection()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.ArrayList $r6, $r7, $r8, $r9, $r10;
        boolean $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>(int)>(0);

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>(int)>(1);

        interfaceinvoke $r7.<java.util.Collection: boolean add(java.lang.Object)>("1");

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>(1);

        interfaceinvoke $r8.<java.util.Collection: boolean add(java.lang.Object)>("2");

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>(int)>(1);

        interfaceinvoke $r9.<java.util.Collection: boolean add(java.lang.Object)>("3");

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>(int)>(2);

        interfaceinvoke $r10.<java.util.Collection: boolean add(java.lang.Object)>("1");

        interfaceinvoke $r10.<java.util.Collection: boolean add(java.lang.Object)>("3");

        $z5 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean containsAny(java.util.Collection,java.util.Collection)>($r7, $r10);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("containsAny({1},{1,3}) should return true.", $z5);

        $z6 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean containsAny(java.util.Collection,java.util.Collection)>($r10, $r7);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("containsAny({1,3},{1}) should return true.", $z6);

        $z7 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean containsAny(java.util.Collection,java.util.Collection)>($r9, $r10);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("containsAny({3},{1,3}) should return true.", $z7);

        $z8 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean containsAny(java.util.Collection,java.util.Collection)>($r10, $r9);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("containsAny({1,3},{3}) should return true.", $z8);

        $z9 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean containsAny(java.util.Collection,java.util.Collection)>($r8, $r8);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("containsAny({2},{2}) should return true.", $z9);

        $z10 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean containsAny(java.util.Collection,java.util.Collection)>($r10, $r10);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("containsAny({1,3},{1,3}) should return true.", $z10);

        $z11 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean containsAny(java.util.Collection,java.util.Collection)>($r8, $r10);

        if $z11 != 0 goto label01;

        $z18 = 1;

        goto label02;

     label01:
        $z18 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("containsAny({2},{1,3}) should return false.", $z18);

        $z12 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean containsAny(java.util.Collection,java.util.Collection)>($r10, $r8);

        if $z12 != 0 goto label03;

        $z19 = 1;

        goto label04;

     label03:
        $z19 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("containsAny({1,3},{2}) should return false.", $z19);

        $z13 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean containsAny(java.util.Collection,java.util.Collection)>($r7, $r9);

        if $z13 != 0 goto label05;

        $z20 = 1;

        goto label06;

     label05:
        $z20 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("containsAny({1},{3}) should return false.", $z20);

        $z14 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean containsAny(java.util.Collection,java.util.Collection)>($r9, $r7);

        if $z14 != 0 goto label07;

        $z21 = 1;

        goto label08;

     label07:
        $z21 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("containsAny({3},{1}) should return false.", $z21);

        $z15 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean containsAny(java.util.Collection,java.util.Collection)>($r10, $r6);

        if $z15 != 0 goto label09;

        $z22 = 1;

        goto label10;

     label09:
        $z22 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("containsAny({1,3},{}) should return false.", $z22);

        $z16 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean containsAny(java.util.Collection,java.util.Collection)>($r6, $r10);

        if $z16 != 0 goto label11;

        $z23 = 1;

        goto label12;

     label11:
        $z23 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("containsAny({},{1,3}) should return false.", $z23);

        $z17 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean containsAny(java.util.Collection,java.util.Collection)>($r6, $r6);

        if $z17 != 0 goto label13;

        $z24 = 1;

        goto label14;

     label13:
        $z24 = 0;

     label14:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("containsAny({},{}) should return false.", $z24);

        return;
    }

    public void containsAnyInArray()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.lang.String[] r2, $r13, $r15, $r17, $r19;
        java.util.ArrayList $r11, $r12, $r14, $r16, $r18;
        boolean $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>(int)>(0);

        r2 = newarray (java.lang.String)[0];

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>(int)>(1);

        interfaceinvoke $r12.<java.util.Collection: boolean add(java.lang.Object)>("1");

        $r13 = newarray (java.lang.String)[1];

        $r13[0] = "1";

        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>(int)>(1);

        interfaceinvoke $r14.<java.util.Collection: boolean add(java.lang.Object)>("2");

        $r15 = newarray (java.lang.String)[1];

        $r15[0] = "2";

        $r16 = new java.util.ArrayList;

        specialinvoke $r16.<java.util.ArrayList: void <init>(int)>(1);

        interfaceinvoke $r16.<java.util.Collection: boolean add(java.lang.Object)>("3");

        $r17 = newarray (java.lang.String)[1];

        $r17[0] = "3";

        $r18 = new java.util.ArrayList;

        specialinvoke $r18.<java.util.ArrayList: void <init>(int)>(2);

        interfaceinvoke $r18.<java.util.Collection: boolean add(java.lang.Object)>("1");

        interfaceinvoke $r18.<java.util.Collection: boolean add(java.lang.Object)>("3");

        $r19 = newarray (java.lang.String)[2];

        $r19[0] = "1";

        $r19[1] = "3";

        $z5 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean containsAny(java.util.Collection,java.lang.Object[])>($r12, $r19);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("containsAny({1},{1,3}) should return true.", $z5);

        $z6 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean containsAny(java.util.Collection,java.lang.Object[])>($r18, $r13);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("containsAny({1,3},{1}) should return true.", $z6);

        $z7 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean containsAny(java.util.Collection,java.lang.Object[])>($r16, $r19);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("containsAny({3},{1,3}) should return true.", $z7);

        $z8 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean containsAny(java.util.Collection,java.lang.Object[])>($r18, $r17);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("containsAny({1,3},{3}) should return true.", $z8);

        $z9 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean containsAny(java.util.Collection,java.lang.Object[])>($r14, $r15);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("containsAny({2},{2}) should return true.", $z9);

        $z10 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean containsAny(java.util.Collection,java.lang.Object[])>($r18, $r19);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("containsAny({1,3},{1,3}) should return true.", $z10);

        $z11 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean containsAny(java.util.Collection,java.lang.Object[])>($r14, $r19);

        if $z11 != 0 goto label01;

        $z18 = 1;

        goto label02;

     label01:
        $z18 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("containsAny({2},{1,3}) should return false.", $z18);

        $z12 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean containsAny(java.util.Collection,java.lang.Object[])>($r18, $r15);

        if $z12 != 0 goto label03;

        $z19 = 1;

        goto label04;

     label03:
        $z19 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("containsAny({1,3},{2}) should return false.", $z19);

        $z13 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean containsAny(java.util.Collection,java.lang.Object[])>($r12, $r17);

        if $z13 != 0 goto label05;

        $z20 = 1;

        goto label06;

     label05:
        $z20 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("containsAny({1},{3}) should return false.", $z20);

        $z14 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean containsAny(java.util.Collection,java.lang.Object[])>($r16, $r13);

        if $z14 != 0 goto label07;

        $z21 = 1;

        goto label08;

     label07:
        $z21 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("containsAny({3},{1}) should return false.", $z21);

        $z15 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean containsAny(java.util.Collection,java.lang.Object[])>($r18, r2);

        if $z15 != 0 goto label09;

        $z22 = 1;

        goto label10;

     label09:
        $z22 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("containsAny({1,3},{}) should return false.", $z22);

        $z16 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean containsAny(java.util.Collection,java.lang.Object[])>($r11, $r19);

        if $z16 != 0 goto label11;

        $z23 = 1;

        goto label12;

     label11:
        $z23 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("containsAny({},{1,3}) should return false.", $z23);

        $z17 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean containsAny(java.util.Collection,java.lang.Object[])>($r11, r2);

        if $z17 != 0 goto label13;

        $z24 = 1;

        goto label14;

     label13:
        $z24 = 0;

     label14:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("containsAny({},{}) should return false.", $z24);

        return;
    }

    public void union()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.Collection r1, r3, $r23;
        java.util.Map r2, r4;
        java.lang.Iterable $r5, $r6, $r22;
        java.lang.Integer $r7, $r8, $r10, $r11, $r13, $r14, $r16, $r17, $r19, $r20, $r24, $r25, $r27, $r28, $r30, $r31, $r33, $r34, $r36, $r37;
        java.lang.Object $r9, $r12, $r15, $r18, $r21, $r26, $r29, $r32, $r35, $r38;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r6 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.lang.Iterable iterableA>;

        $r5 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.lang.Iterable iterableC>;

        r1 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection union(java.lang.Iterable,java.lang.Iterable)>($r6, $r5);

        r2 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Map getCardinalityMap(java.lang.Iterable)>(r1);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r9 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, $r9);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r12 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r11);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r12);

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r15 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r14);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r13, $r15);

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r18 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r17);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r16, $r18);

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r21 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r20);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r19, $r21);

        $r23 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionC2>;

        $r22 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.lang.Iterable iterableA>;

        r3 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection union(java.lang.Iterable,java.lang.Iterable)>($r23, $r22);

        r4 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Map getCardinalityMap(java.lang.Iterable)>(r3);

        $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r26 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r25);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r24, $r26);

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r29 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r28);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r27, $r29);

        $r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r32 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r31);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r30, $r32);

        $r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r34 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r35 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r34);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r33, $r35);

        $r36 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r37 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r38 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r37);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r36, $r38);

        return;
    }

    public void intersection()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.Collection r1, r3, $r21;
        java.util.Map r2, r4;
        java.lang.Iterable $r5, $r6;
        java.lang.Integer $r7, $r9, $r10, $r12, $r13, $r15, $r16, $r18, $r22, $r24, $r25, $r27, $r28, $r30, $r31, $r33;
        java.lang.Object $r8, $r11, $r14, $r17, $r19, $r23, $r26, $r29, $r32, $r34;
        java.util.List $r20;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r6 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.lang.Iterable iterableA>;

        $r5 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.lang.Iterable iterableC>;

        r1 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection intersection(java.lang.Iterable,java.lang.Iterable)>($r6, $r5);

        r2 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Map getCardinalityMap(java.lang.Iterable)>(r1);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r8 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r8);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r11 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r9, $r11);

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r14 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r13);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r12, $r14);

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r17 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r16);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r15, $r17);

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r19 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r18);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r19);

        $r21 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionC2>;

        $r20 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        r3 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection intersection(java.lang.Iterable,java.lang.Iterable)>($r21, $r20);

        r4 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Map getCardinalityMap(java.lang.Iterable)>(r3);

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r23 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r22);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r23);

        $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r26 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r25);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r24, $r26);

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r29 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r28);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r27, $r29);

        $r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r32 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r31);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r30, $r32);

        $r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r34 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r33);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r34);

        return;
    }

    public void disjunction()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.Collection r1, r3, $r22;
        java.util.Map r2, r4;
        java.lang.Iterable $r5, $r6;
        java.lang.Integer $r7, $r8, $r10, $r11, $r13, $r15, $r16, $r18, $r19, $r23, $r24, $r26, $r27, $r29, $r31, $r32, $r34, $r35;
        java.lang.Object $r9, $r12, $r14, $r17, $r20, $r25, $r28, $r30, $r33, $r36;
        java.util.List $r21;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r6 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.lang.Iterable iterableA>;

        $r5 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.lang.Iterable iterableC>;

        r1 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection disjunction(java.lang.Iterable,java.lang.Iterable)>($r6, $r5);

        r2 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Map getCardinalityMap(java.lang.Iterable)>(r1);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r9 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, $r9);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r12 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r11);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r12);

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r14 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r13);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r14);

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r17 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r16);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r15, $r17);

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r20 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r19);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r18, $r20);

        $r22 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionC2>;

        $r21 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        r3 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection disjunction(java.lang.Iterable,java.lang.Iterable)>($r22, $r21);

        r4 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Map getCardinalityMap(java.lang.Iterable)>(r3);

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r25 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r24);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r23, $r25);

        $r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r28 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r27);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r26, $r28);

        $r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r30 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r29);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r30);

        $r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r32 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r33 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r32);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r31, $r33);

        $r34 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r35 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r36 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r35);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r34, $r36);

        return;
    }

    public void testDisjunctionAsUnionMinusIntersection()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.Collection r1, r2, r3, $r4, $r6, $r8, $r10;
        java.util.List $r5, $r7, $r9;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r5 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $r4 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionC>;

        r1 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection disjunction(java.lang.Iterable,java.lang.Iterable)>($r5, $r4);

        $r7 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $r6 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionC>;

        r2 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection union(java.lang.Iterable,java.lang.Iterable)>($r7, $r6);

        $r9 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $r8 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionC>;

        r3 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection intersection(java.lang.Iterable,java.lang.Iterable)>($r9, $r8);

        $r10 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection subtract(java.lang.Iterable,java.lang.Iterable)>(r2, r3);

        $z0 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isEqualCollection(java.util.Collection,java.util.Collection)>(r1, $r10);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testDisjunctionAsSymmetricDifference()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.Collection r1, r2, r3, $r4, $r6, $r9, $r10;
        java.util.List $r5, $r7, $r8;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r5 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $r4 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionC>;

        r1 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection disjunction(java.lang.Iterable,java.lang.Iterable)>($r5, $r4);

        $r7 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $r6 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionC>;

        r2 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection subtract(java.lang.Iterable,java.lang.Iterable)>($r7, $r6);

        $r9 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionC>;

        $r8 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        r3 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection subtract(java.lang.Iterable,java.lang.Iterable)>($r9, $r8);

        $r10 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection union(java.lang.Iterable,java.lang.Iterable)>(r2, r3);

        $z0 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isEqualCollection(java.util.Collection,java.util.Collection)>(r1, $r10);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testSubtract()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.Collection r1, r3, $r20;
        java.util.Map r2, r4;
        java.lang.Iterable $r5, $r6;
        java.lang.Integer $r7, $r8, $r10, $r12, $r14, $r15, $r17, $r21, $r22, $r24, $r26, $r28, $r29, $r31;
        java.lang.Object $r9, $r11, $r13, $r16, $r18, $r23, $r25, $r27, $r30, $r32;
        java.util.List $r19;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r6 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.lang.Iterable iterableA>;

        $r5 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.lang.Iterable iterableC>;

        r1 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection subtract(java.lang.Iterable,java.lang.Iterable)>($r6, $r5);

        r2 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Map getCardinalityMap(java.lang.Iterable)>(r1);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r9 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, $r9);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r11 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r10);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r11);

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r13 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r12);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r13);

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r16 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r15);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r14, $r16);

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r18 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r17);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r18);

        $r20 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionC2>;

        $r19 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        r3 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection subtract(java.lang.Iterable,java.lang.Iterable)>($r20, $r19);

        r4 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Map getCardinalityMap(java.lang.Iterable)>(r3);

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r23 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r22);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r21, $r23);

        $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r25 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r24);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r25);

        $r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r27 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r26);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r27);

        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r30 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r29);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r28, $r30);

        $r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r32 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r31);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r32);

        return;
    }

    public void testSubtractWithPredicate()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.Collection r2, $r5;
        java.util.Map r3;
        org.apache.commons.collections4.CollectionUtilsTest$1 $r4;
        java.lang.Iterable $r6;
        java.lang.Integer $r7, $r8, $r10, $r11, $r13, $r14, $r16, $r17, $r19;
        java.lang.Object $r9, $r12, $r15, $r18, $r20;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r4 = new org.apache.commons.collections4.CollectionUtilsTest$1;

        specialinvoke $r4.<org.apache.commons.collections4.CollectionUtilsTest$1: void <init>(org.apache.commons.collections4.CollectionUtilsTest)>(r0);

        $r6 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.lang.Iterable iterableA>;

        $r5 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionC>;

        r2 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection subtract(java.lang.Iterable,java.lang.Iterable,org.apache.commons.collections4.Predicate)>($r6, $r5, $r4);

        r3 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Map getCardinalityMap(java.lang.Iterable)>(r2);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r9 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, $r9);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r12 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r11);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r12);

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r15 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r14);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r13, $r15);

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r18 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r17);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r16, $r18);

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r20 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r19);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r20);

        return;
    }

    public void testIsSubCollectionOfSelf()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.List $r1, $r2, $r3, $r4;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r2 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $r1 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $z0 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isSubCollection(java.util.Collection,java.util.Collection)>($r2, $r1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r4 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionB>;

        $r3 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionB>;

        $z1 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isSubCollection(java.util.Collection,java.util.Collection)>($r4, $r3);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        return;
    }

    public void testIsSubCollection()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.Collection $r1, $r4;
        java.util.List $r2, $r3;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r2 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $r1 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionC>;

        $z0 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isSubCollection(java.util.Collection,java.util.Collection)>($r2, $r1);

        if $z0 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r4 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionC>;

        $r3 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $z1 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isSubCollection(java.util.Collection,java.util.Collection)>($r4, $r3);

        if $z1 != 0 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        return;
    }

    public void testIsSubCollection2()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.ArrayList $r2;
        java.util.List $r3, $r4, $r6, $r7, $r9, $r10, $r12, $r13, $r15, $r16, $r18, $r19, $r21, $r22, $r24, $r25, $r27, $r28, $r30, $r31, $r33, $r34, $r36, $r37;
        boolean $z0, $z1, $z3, $z4, $z6, $z7, $z9, $z10, $z12, $z13, $z15, $z16, $z18, $z19, $z21, $z22, $z24, $z25, $z27, $z28, $z30, $z31, $z33, $z34, $z35, $z36, $z37, $z38, $z39, $z40, $z41, $z42, $z43, $z44, $z45;
        java.lang.Integer $r5, $r8, $r11, $r14, $r17, $r20, $r23, $r26, $r29, $r32, $r35;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $z0 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isSubCollection(java.util.Collection,java.util.Collection)>($r2, $r3);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r4 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $z1 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isSubCollection(java.util.Collection,java.util.Collection)>($r4, $r2);

        if $z1 != 0 goto label01;

        $z35 = 1;

        goto label02;

     label01:
        $z35 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z35);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke $r2.<java.util.Collection: boolean add(java.lang.Object)>($r5);

        $r6 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $z3 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isSubCollection(java.util.Collection,java.util.Collection)>($r2, $r6);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        $r7 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $z4 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isSubCollection(java.util.Collection,java.util.Collection)>($r7, $r2);

        if $z4 != 0 goto label03;

        $z36 = 1;

        goto label04;

     label03:
        $z36 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z36);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        interfaceinvoke $r2.<java.util.Collection: boolean add(java.lang.Object)>($r8);

        $r9 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $z6 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isSubCollection(java.util.Collection,java.util.Collection)>($r2, $r9);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        $r10 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $z7 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isSubCollection(java.util.Collection,java.util.Collection)>($r10, $r2);

        if $z7 != 0 goto label05;

        $z37 = 1;

        goto label06;

     label05:
        $z37 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z37);

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        interfaceinvoke $r2.<java.util.Collection: boolean add(java.lang.Object)>($r11);

        $r12 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $z9 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isSubCollection(java.util.Collection,java.util.Collection)>($r2, $r12);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z9);

        $r13 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $z10 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isSubCollection(java.util.Collection,java.util.Collection)>($r13, $r2);

        if $z10 != 0 goto label07;

        $z38 = 1;

        goto label08;

     label07:
        $z38 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z38);

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke $r2.<java.util.Collection: boolean add(java.lang.Object)>($r14);

        $r15 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $z12 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isSubCollection(java.util.Collection,java.util.Collection)>($r2, $r15);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z12);

        $r16 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $z13 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isSubCollection(java.util.Collection,java.util.Collection)>($r16, $r2);

        if $z13 != 0 goto label09;

        $z39 = 1;

        goto label10;

     label09:
        $z39 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z39);

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke $r2.<java.util.Collection: boolean add(java.lang.Object)>($r17);

        $r18 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $z15 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isSubCollection(java.util.Collection,java.util.Collection)>($r2, $r18);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z15);

        $r19 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $z16 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isSubCollection(java.util.Collection,java.util.Collection)>($r19, $r2);

        if $z16 != 0 goto label11;

        $z40 = 1;

        goto label12;

     label11:
        $z40 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z40);

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke $r2.<java.util.Collection: boolean add(java.lang.Object)>($r20);

        $r21 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $z18 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isSubCollection(java.util.Collection,java.util.Collection)>($r2, $r21);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z18);

        $r22 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $z19 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isSubCollection(java.util.Collection,java.util.Collection)>($r22, $r2);

        if $z19 != 0 goto label13;

        $z41 = 1;

        goto label14;

     label13:
        $z41 = 0;

     label14:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z41);

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        interfaceinvoke $r2.<java.util.Collection: boolean add(java.lang.Object)>($r23);

        $r24 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $z21 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isSubCollection(java.util.Collection,java.util.Collection)>($r2, $r24);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z21);

        $r25 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $z22 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isSubCollection(java.util.Collection,java.util.Collection)>($r25, $r2);

        if $z22 != 0 goto label15;

        $z42 = 1;

        goto label16;

     label15:
        $z42 = 0;

     label16:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z42);

        $r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        interfaceinvoke $r2.<java.util.Collection: boolean add(java.lang.Object)>($r26);

        $r27 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $z24 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isSubCollection(java.util.Collection,java.util.Collection)>($r2, $r27);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z24);

        $r28 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $z25 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isSubCollection(java.util.Collection,java.util.Collection)>($r28, $r2);

        if $z25 != 0 goto label17;

        $z43 = 1;

        goto label18;

     label17:
        $z43 = 0;

     label18:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z43);

        $r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        interfaceinvoke $r2.<java.util.Collection: boolean add(java.lang.Object)>($r29);

        $r30 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $z27 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isSubCollection(java.util.Collection,java.util.Collection)>($r2, $r30);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z27);

        $r31 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $z28 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isSubCollection(java.util.Collection,java.util.Collection)>($r31, $r2);

        if $z28 != 0 goto label19;

        $z44 = 1;

        goto label20;

     label19:
        $z44 = 0;

     label20:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z44);

        $r32 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        interfaceinvoke $r2.<java.util.Collection: boolean add(java.lang.Object)>($r32);

        $r33 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $z30 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isSubCollection(java.util.Collection,java.util.Collection)>($r2, $r33);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z30);

        $r34 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $z31 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isSubCollection(java.util.Collection,java.util.Collection)>($r34, $r2);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z31);

        $r35 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        interfaceinvoke $r2.<java.util.Collection: boolean add(java.lang.Object)>($r35);

        $r36 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $z33 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isSubCollection(java.util.Collection,java.util.Collection)>($r2, $r36);

        if $z33 != 0 goto label21;

        $z45 = 1;

        goto label22;

     label21:
        $z45 = 0;

     label22:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z45);

        $r37 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $z34 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isSubCollection(java.util.Collection,java.util.Collection)>($r37, $r2);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z34);

        return;
    }

    public void testIsEqualCollectionToSelf()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.List $r1, $r2, $r3, $r4;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r2 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $r1 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $z0 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isEqualCollection(java.util.Collection,java.util.Collection)>($r2, $r1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r4 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionB>;

        $r3 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionB>;

        $z1 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isEqualCollection(java.util.Collection,java.util.Collection)>($r4, $r3);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        return;
    }

    public void testIsEqualCollection()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.Collection $r1, $r4;
        java.util.List $r2, $r3;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r2 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $r1 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionC>;

        $z0 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isEqualCollection(java.util.Collection,java.util.Collection)>($r2, $r1);

        if $z0 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r4 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionC>;

        $r3 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $z1 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isEqualCollection(java.util.Collection,java.util.Collection)>($r4, $r3);

        if $z1 != 0 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        return;
    }

    public void testIsEqualCollectionReturnsFalse()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.ArrayList $r2;
        java.util.List $r3, $r6, $r7;
        java.lang.Integer $r5;
        boolean $z1, $z2;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r2 = new java.util.ArrayList;

        $r3 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        interfaceinvoke $r2.<java.util.List: java.lang.Object remove(int)>(1);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r5);

        $r6 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $z1 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isEqualCollection(java.util.Collection,java.util.Collection)>($r6, $r2);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z1);

        $r7 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $z2 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isEqualCollection(java.util.Collection,java.util.Collection)>($r2, $r7);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z2);

        return;
    }

    public void testIsEqualCollection2()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.ArrayList $r3, $r4;
        boolean $z0, $z1, $z3, $z4, $z6, $z7, $z9, $z10, $z12, $z13, $z15, $z16, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $z0 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isEqualCollection(java.util.Collection,java.util.Collection)>($r3, $r4);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $z1 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isEqualCollection(java.util.Collection,java.util.Collection)>($r4, $r3);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        interfaceinvoke $r3.<java.util.Collection: boolean add(java.lang.Object)>("1");

        $z3 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isEqualCollection(java.util.Collection,java.util.Collection)>($r3, $r4);

        if $z3 != 0 goto label01;

        $z20 = 1;

        goto label02;

     label01:
        $z20 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z20);

        $z4 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isEqualCollection(java.util.Collection,java.util.Collection)>($r4, $r3);

        if $z4 != 0 goto label03;

        $z21 = 1;

        goto label04;

     label03:
        $z21 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z21);

        interfaceinvoke $r4.<java.util.Collection: boolean add(java.lang.Object)>("1");

        $z6 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isEqualCollection(java.util.Collection,java.util.Collection)>($r3, $r4);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        $z7 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isEqualCollection(java.util.Collection,java.util.Collection)>($r4, $r3);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

        interfaceinvoke $r3.<java.util.Collection: boolean add(java.lang.Object)>("2");

        $z9 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isEqualCollection(java.util.Collection,java.util.Collection)>($r3, $r4);

        if $z9 != 0 goto label05;

        $z22 = 1;

        goto label06;

     label05:
        $z22 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z22);

        $z10 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isEqualCollection(java.util.Collection,java.util.Collection)>($r4, $r3);

        if $z10 != 0 goto label07;

        $z23 = 1;

        goto label08;

     label07:
        $z23 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z23);

        interfaceinvoke $r4.<java.util.Collection: boolean add(java.lang.Object)>("2");

        $z12 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isEqualCollection(java.util.Collection,java.util.Collection)>($r3, $r4);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z12);

        $z13 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isEqualCollection(java.util.Collection,java.util.Collection)>($r4, $r3);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z13);

        interfaceinvoke $r3.<java.util.Collection: boolean add(java.lang.Object)>("1");

        $z15 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isEqualCollection(java.util.Collection,java.util.Collection)>($r3, $r4);

        if $z15 != 0 goto label09;

        $z24 = 1;

        goto label10;

     label09:
        $z24 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z24);

        $z16 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isEqualCollection(java.util.Collection,java.util.Collection)>($r4, $r3);

        if $z16 != 0 goto label11;

        $z25 = 1;

        goto label12;

     label11:
        $z25 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z25);

        interfaceinvoke $r4.<java.util.Collection: boolean add(java.lang.Object)>("1");

        $z18 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isEqualCollection(java.util.Collection,java.util.Collection)>($r3, $r4);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z18);

        $z19 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isEqualCollection(java.util.Collection,java.util.Collection)>($r4, $r3);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z19);

        return;
    }

    public void testIsEqualCollectionEquator()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.Collection r1;
        org.apache.commons.collections4.functors.DefaultEquator r3;
        org.apache.commons.collections4.Transformer $r4;
        java.util.List $r5, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        org.apache.commons.collections4.CollectionUtilsTest$2 $r6;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r5 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionB>;

        $r4 = r0.<org.apache.commons.collections4.CollectionUtilsTest: org.apache.commons.collections4.Transformer TRANSFORM_TO_INTEGER>;

        r1 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection collect(java.lang.Iterable,org.apache.commons.collections4.Transformer)>($r5, $r4);

        $r6 = new org.apache.commons.collections4.CollectionUtilsTest$2;

        specialinvoke $r6.<org.apache.commons.collections4.CollectionUtilsTest$2: void <init>(org.apache.commons.collections4.CollectionUtilsTest)>(r0);

        $r8 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $r7 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $z0 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isEqualCollection(java.util.Collection,java.util.Collection,org.apache.commons.collections4.Equator)>($r8, $r7, $r6);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r9 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $z1 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isEqualCollection(java.util.Collection,java.util.Collection,org.apache.commons.collections4.Equator)>($r9, r1, $r6);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r10 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $z2 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isEqualCollection(java.util.Collection,java.util.Collection,org.apache.commons.collections4.Equator)>(r1, $r10, $r6);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        r3 = staticinvoke <org.apache.commons.collections4.functors.DefaultEquator: org.apache.commons.collections4.functors.DefaultEquator defaultEquator()>();

        $r12 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $r11 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionB>;

        $z3 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isEqualCollection(java.util.Collection,java.util.Collection,org.apache.commons.collections4.Equator)>($r12, $r11, r3);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z3);

        $r13 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $z4 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isEqualCollection(java.util.Collection,java.util.Collection,org.apache.commons.collections4.Equator)>($r13, r1, r3);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z4);

        return;
    }

    public void testIsEqualCollectionNullEquator()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.List $r1, $r2;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r2 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $r1 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isEqualCollection(java.util.Collection,java.util.Collection,org.apache.commons.collections4.Equator)>($r2, $r1, null);

        return;
    }

    public void testIsProperSubCollection()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.ArrayList $r3, $r4;
        boolean $z0, $z2, $z3, $z4, $z5, $z9, $z10, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22;
        java.util.Collection $r5, $r7, $r9, $r10;
        java.util.List $r6, $r8;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $z0 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isProperSubCollection(java.util.Collection,java.util.Collection)>($r3, $r4);

        if $z0 != 0 goto label01;

        $z16 = 1;

        goto label02;

     label01:
        $z16 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z16);

        interfaceinvoke $r4.<java.util.Collection: boolean add(java.lang.Object)>("1");

        $z2 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isProperSubCollection(java.util.Collection,java.util.Collection)>($r3, $r4);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $z3 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isProperSubCollection(java.util.Collection,java.util.Collection)>($r4, $r3);

        if $z3 != 0 goto label03;

        $z17 = 1;

        goto label04;

     label03:
        $z17 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z17);

        $z4 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isProperSubCollection(java.util.Collection,java.util.Collection)>($r4, $r4);

        if $z4 != 0 goto label05;

        $z18 = 1;

        goto label06;

     label05:
        $z18 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z18);

        $z5 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isProperSubCollection(java.util.Collection,java.util.Collection)>($r3, $r3);

        if $z5 != 0 goto label07;

        $z19 = 1;

        goto label08;

     label07:
        $z19 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z19);

        interfaceinvoke $r3.<java.util.Collection: boolean add(java.lang.Object)>("1");

        interfaceinvoke $r3.<java.util.Collection: boolean add(java.lang.Object)>("2");

        interfaceinvoke $r4.<java.util.Collection: boolean add(java.lang.Object)>("2");

        $z9 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isProperSubCollection(java.util.Collection,java.util.Collection)>($r4, $r3);

        if $z9 != 0 goto label09;

        $z20 = 1;

        goto label10;

     label09:
        $z20 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z20);

        $z10 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isProperSubCollection(java.util.Collection,java.util.Collection)>($r3, $r4);

        if $z10 != 0 goto label11;

        $z21 = 1;

        goto label12;

     label11:
        $z21 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z21);

        interfaceinvoke $r3.<java.util.Collection: boolean add(java.lang.Object)>("1");

        $z12 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isProperSubCollection(java.util.Collection,java.util.Collection)>($r4, $r3);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z12);

        $r6 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $r5 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionC>;

        $r7 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection intersection(java.lang.Iterable,java.lang.Iterable)>($r6, $r5);

        $r8 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $z13 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isProperSubCollection(java.util.Collection,java.util.Collection)>($r7, $r8);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z13);

        $r9 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection subtract(java.lang.Iterable,java.lang.Iterable)>($r3, $r4);

        $z14 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isProperSubCollection(java.util.Collection,java.util.Collection)>($r9, $r3);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z14);

        $r10 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection subtract(java.lang.Iterable,java.lang.Iterable)>($r3, $r4);

        $z15 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isProperSubCollection(java.util.Collection,java.util.Collection)>($r3, $r10);

        if $z15 != 0 goto label13;

        $z22 = 1;

        goto label14;

     label13:
        $z22 = 0;

     label14:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z22);

        return;
    }

    public void find()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.lang.Integer $r1, $r4, $r5, r12, r14;
        java.util.List $r2, $r6, $r9;
        java.lang.Object $r3, $r7, $r8, $r10;
        boolean $z0, $z1;
        org.apache.commons.collections4.Predicate r11, r13;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        r11 = staticinvoke <org.apache.commons.collections4.functors.EqualPredicate: org.apache.commons.collections4.Predicate equalPredicate(java.lang.Object)>($r1);

        $r2 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $r3 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.lang.Object find(java.lang.Iterable,org.apache.commons.collections4.Predicate)>($r2, r11);

        r12 = (java.lang.Integer) $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $z0 = virtualinvoke r12.<java.lang.Integer: boolean equals(java.lang.Object)>($r4);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(45);

        r13 = staticinvoke <org.apache.commons.collections4.functors.EqualPredicate: org.apache.commons.collections4.Predicate equalPredicate(java.lang.Object)>($r5);

        $r6 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $r7 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.lang.Object find(java.lang.Iterable,org.apache.commons.collections4.Predicate)>($r6, r13);

        r14 = (java.lang.Integer) $r7;

        if r14 != null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r8 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.lang.Object find(java.lang.Iterable,org.apache.commons.collections4.Predicate)>(null, r13);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r8);

        $r9 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $r10 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.lang.Object find(java.lang.Iterable,org.apache.commons.collections4.Predicate)>($r9, null);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r10);

        return;
    }

    public void forAllDoCollection()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        org.apache.commons.collections4.Closure r1, r10, $r11, r12;
        java.util.ArrayList $r3;
        java.util.List $r4, $r6, $r13;
        java.util.Collection $r5, $r8, $r9, $r14;
        boolean $z2, $z4, $z5, $z6, $z7, $z8;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        r1 = staticinvoke <org.apache.commons.collections4.ClosureUtils: org.apache.commons.collections4.Closure invokerClosure(java.lang.String)>("clear");

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        interfaceinvoke $r3.<java.util.Collection: boolean add(java.lang.Object)>($r4);

        $r5 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionC>;

        interfaceinvoke $r3.<java.util.Collection: boolean add(java.lang.Object)>($r5);

        r10 = staticinvoke <org.apache.commons.collections4.CollectionUtils: org.apache.commons.collections4.Closure forAllDo(java.lang.Iterable,org.apache.commons.collections4.Closure)>($r3, r1);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>(r1, r10);

        $r6 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $z2 = interfaceinvoke $r6.<java.util.List: boolean isEmpty()>();

        if $z2 == 0 goto label1;

        $r9 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionC>;

        $z5 = interfaceinvoke $r9.<java.util.Collection: boolean isEmpty()>();

        if $z5 == 0 goto label1;

        $z6 = 1;

        goto label2;

     label1:
        $z6 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        $r11 = (org.apache.commons.collections4.Closure) null;

        r12 = staticinvoke <org.apache.commons.collections4.CollectionUtils: org.apache.commons.collections4.Closure forAllDo(java.lang.Iterable,org.apache.commons.collections4.Closure)>($r3, $r11);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>(r12);

        $r13 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $z7 = interfaceinvoke $r13.<java.util.List: boolean isEmpty()>();

        if $z7 == 0 goto label3;

        $r8 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionC>;

        $z4 = interfaceinvoke $r8.<java.util.Collection: boolean isEmpty()>();

        if $z4 == 0 goto label3;

        $z8 = 1;

        goto label4;

     label3:
        $z8 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

        $r14 = (java.util.Collection) null;

        staticinvoke <org.apache.commons.collections4.CollectionUtils: org.apache.commons.collections4.Closure forAllDo(java.lang.Iterable,org.apache.commons.collections4.Closure)>($r14, r1);

        interfaceinvoke $r3.<java.util.Collection: boolean add(java.lang.Object)>(null);

        staticinvoke <org.apache.commons.collections4.CollectionUtils: org.apache.commons.collections4.Closure forAllDo(java.lang.Iterable,org.apache.commons.collections4.Closure)>($r3, r1);

        return;
    }

    public void forAllDoIterator()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        org.apache.commons.collections4.Closure r1, r11, $r13, r14;
        java.util.ArrayList $r3;
        java.util.List $r4, $r7, $r15;
        java.util.Collection $r5, $r9, $r10;
        java.util.Iterator $r6, $r12, $r16, $r18;
        boolean $z2, $z4, $z5, $z6, $z7, $z8;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        r1 = staticinvoke <org.apache.commons.collections4.ClosureUtils: org.apache.commons.collections4.Closure invokerClosure(java.lang.String)>("clear");

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        interfaceinvoke $r3.<java.util.Collection: boolean add(java.lang.Object)>($r4);

        $r5 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionC>;

        interfaceinvoke $r3.<java.util.Collection: boolean add(java.lang.Object)>($r5);

        $r6 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

        r11 = staticinvoke <org.apache.commons.collections4.CollectionUtils: org.apache.commons.collections4.Closure forAllDo(java.util.Iterator,org.apache.commons.collections4.Closure)>($r6, r1);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>(r1, r11);

        $r7 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $z2 = interfaceinvoke $r7.<java.util.List: boolean isEmpty()>();

        if $z2 == 0 goto label1;

        $r10 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionC>;

        $z5 = interfaceinvoke $r10.<java.util.Collection: boolean isEmpty()>();

        if $z5 == 0 goto label1;

        $z6 = 1;

        goto label2;

     label1:
        $z6 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        $r12 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

        $r13 = (org.apache.commons.collections4.Closure) null;

        r14 = staticinvoke <org.apache.commons.collections4.CollectionUtils: org.apache.commons.collections4.Closure forAllDo(java.util.Iterator,org.apache.commons.collections4.Closure)>($r12, $r13);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>(r14);

        $r15 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $z7 = interfaceinvoke $r15.<java.util.List: boolean isEmpty()>();

        if $z7 == 0 goto label3;

        $r9 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionC>;

        $z4 = interfaceinvoke $r9.<java.util.Collection: boolean isEmpty()>();

        if $z4 == 0 goto label3;

        $z8 = 1;

        goto label4;

     label3:
        $z8 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

        $r16 = (java.util.Iterator) null;

        staticinvoke <org.apache.commons.collections4.CollectionUtils: org.apache.commons.collections4.Closure forAllDo(java.util.Iterator,org.apache.commons.collections4.Closure)>($r16, r1);

        interfaceinvoke $r3.<java.util.Collection: boolean add(java.lang.Object)>(null);

        $r18 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

        staticinvoke <org.apache.commons.collections4.CollectionUtils: org.apache.commons.collections4.Closure forAllDo(java.util.Iterator,org.apache.commons.collections4.Closure)>($r18, r1);

        return;
    }

    public void forAllDoFailure()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        org.apache.commons.collections4.Closure r1;
        java.util.ArrayList $r3;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        r1 = staticinvoke <org.apache.commons.collections4.ClosureUtils: org.apache.commons.collections4.Closure invokerClosure(java.lang.String)>("clear");

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r3.<java.util.Collection: boolean add(java.lang.Object)>("x");

        staticinvoke <org.apache.commons.collections4.CollectionUtils: org.apache.commons.collections4.Closure forAllDo(java.lang.Iterable,org.apache.commons.collections4.Closure)>($r3, r1);

        return;
    }

    public void forAllButLastDoCollection()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        org.apache.commons.collections4.Closure r1, $r28, $r30;
        java.util.List r3, r5, $r8, $r9, $r11, $r12, $r33, r34, $r35, r37, $r38, $r39, r40;
        java.util.ArrayList $r7;
        java.lang.Object $r10, $r13, $r17, $r24, $r29, $r32, $r36;
        boolean $z2, $z4, $z5, $z6, $z7;
        java.lang.String[] $r14, $r21;
        java.lang.StringBuffer $r15, $r22;
        org.apache.commons.collections4.CollectionUtilsTest$3 $r16;
        java.lang.String $r18, $r20, $r25, $r27;
        org.apache.commons.collections4.CollectionUtilsTest$4 $r23;
        java.util.Collection $r31;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        r1 = staticinvoke <org.apache.commons.collections4.ClosureUtils: org.apache.commons.collections4.Closure invokerClosure(java.lang.String)>("clear");

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        $r8 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        interfaceinvoke $r7.<java.util.Collection: boolean add(java.lang.Object)>($r8);

        $r9 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionB>;

        interfaceinvoke $r7.<java.util.Collection: boolean add(java.lang.Object)>($r9);

        $r10 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.lang.Object forAllButLastDo(java.lang.Iterable,org.apache.commons.collections4.Closure)>($r7, r1);

        r34 = (java.util.List) $r10;

        $r11 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionB>;

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>(r34, $r11);

        $r12 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $z2 = interfaceinvoke $r12.<java.util.List: boolean isEmpty()>();

        if $z2 == 0 goto label1;

        $r33 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionB>;

        $z4 = interfaceinvoke $r33.<java.util.List: boolean isEmpty()>();

        if $z4 != 0 goto label1;

        $z5 = 1;

        goto label2;

     label1:
        $z5 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        interfaceinvoke $r7.<java.util.Collection: void clear()>();

        $r35 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionB>;

        interfaceinvoke $r7.<java.util.Collection: boolean add(java.lang.Object)>($r35);

        $r36 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.lang.Object forAllButLastDo(java.lang.Iterable,org.apache.commons.collections4.Closure)>($r7, r1);

        r37 = (java.util.List) $r36;

        $r38 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionB>;

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>(r37, $r38);

        $r39 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionB>;

        $z6 = interfaceinvoke $r39.<java.util.List: boolean isEmpty()>();

        if $z6 != 0 goto label3;

        $z7 = 1;

        goto label4;

     label3:
        $z7 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

        interfaceinvoke $r7.<java.util.Collection: void clear()>();

        $r13 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.lang.Object forAllButLastDo(java.lang.Iterable,org.apache.commons.collections4.Closure)>($r7, r1);

        r40 = (java.util.List) $r13;

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>(r40);

        $r14 = newarray (java.lang.String)[3];

        $r14[0] = "a";

        $r14[1] = "b";

        $r14[2] = "c";

        r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r14);

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r16 = new org.apache.commons.collections4.CollectionUtilsTest$3;

        specialinvoke $r16.<org.apache.commons.collections4.CollectionUtilsTest$3: void <init>(org.apache.commons.collections4.CollectionUtilsTest,java.lang.StringBuffer)>(r0, $r15);

        $r17 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.lang.Object forAllButLastDo(java.lang.Iterable,org.apache.commons.collections4.Closure)>(r3, $r16);

        $r18 = (java.lang.String) $r17;

        virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a;b;c", $r20);

        $r21 = newarray (java.lang.String)[1];

        $r21[0] = "a";

        r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r21);

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r23 = new org.apache.commons.collections4.CollectionUtilsTest$4;

        specialinvoke $r23.<org.apache.commons.collections4.CollectionUtilsTest$4: void <init>(org.apache.commons.collections4.CollectionUtilsTest,java.lang.StringBuffer)>(r0, $r22);

        $r24 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.lang.Object forAllButLastDo(java.lang.Iterable,org.apache.commons.collections4.Closure)>(r5, $r23);

        $r25 = (java.lang.String) $r24;

        virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $r27);

        $r28 = (org.apache.commons.collections4.Closure) null;

        $r29 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.lang.Object forAllButLastDo(java.lang.Iterable,org.apache.commons.collections4.Closure)>(r3, $r28);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r29);

        $r31 = (java.util.Collection) null;

        $r30 = (org.apache.commons.collections4.Closure) null;

        $r32 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.lang.Object forAllButLastDo(java.lang.Iterable,org.apache.commons.collections4.Closure)>($r31, $r30);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r32);

        return;
    }

    public void forAllButLastDoIterator()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        org.apache.commons.collections4.Closure r1, $r13, $r16;
        java.util.List r3, $r5, $r6, $r9, $r10, $r11;
        java.util.ArrayList $r4;
        java.util.Iterator $r7, $r12, $r15;
        java.lang.Object $r8, $r14, $r17;
        boolean $z2, $z3, $z4;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        r1 = staticinvoke <org.apache.commons.collections4.ClosureUtils: org.apache.commons.collections4.Closure invokerClosure(java.lang.String)>("clear");

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        interfaceinvoke $r4.<java.util.Collection: boolean add(java.lang.Object)>($r5);

        $r6 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionB>;

        interfaceinvoke $r4.<java.util.Collection: boolean add(java.lang.Object)>($r6);

        $r7 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

        $r8 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.lang.Object forAllButLastDo(java.util.Iterator,org.apache.commons.collections4.Closure)>($r7, r1);

        r3 = (java.util.List) $r8;

        $r9 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionB>;

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>(r3, $r9);

        $r10 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $z2 = interfaceinvoke $r10.<java.util.List: boolean isEmpty()>();

        if $z2 == 0 goto label1;

        $r11 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionB>;

        $z3 = interfaceinvoke $r11.<java.util.List: boolean isEmpty()>();

        if $z3 != 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $r12 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

        $r13 = (org.apache.commons.collections4.Closure) null;

        $r14 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.lang.Object forAllButLastDo(java.util.Iterator,org.apache.commons.collections4.Closure)>($r12, $r13);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r14);

        $r15 = (java.util.Iterator) null;

        $r16 = (org.apache.commons.collections4.Closure) null;

        $r17 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.lang.Object forAllButLastDo(java.util.Iterator,org.apache.commons.collections4.Closure)>($r15, $r16);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r17);

        return;
    }

    public void getFromMap()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.HashMap $r3, $r6;
        java.lang.Object $r7, $r8, $r10, $r11, $r18, $r19, $r20, $r21;
        java.util.TreeMap $r15;
        java.lang.IndexOutOfBoundsException $r22, $r23;
        java.util.Map$Entry r24, r25, r29, r30;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("zeroKey", "zero");

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("oneKey", "one");

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r24 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Map$Entry get(java.util.Map,int)>($r3, 0);

        $r7 = interfaceinvoke r24.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = interfaceinvoke r24.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r8);

        r25 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Map$Entry get(java.util.Map,int)>($r3, 1);

        $r10 = interfaceinvoke r25.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r11 = interfaceinvoke r25.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r11);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r3, $r6);

     label1:
        staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Map$Entry get(java.util.Map,int)>($r3, 2);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting IndexOutOfBoundsException.");

     label2:
        goto label4;

     label3:
        $r22 := @caughtexception;

     label4:
        staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Map$Entry get(java.util.Map,int)>($r3, -2);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting IndexOutOfBoundsException.");

     label5:
        goto label7;

     label6:
        $r23 := @caughtexception;

     label7:
        $r15 = new java.util.TreeMap;

        specialinvoke $r15.<java.util.TreeMap: void <init>()>();

        interfaceinvoke $r15.<java.util.SortedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("zeroKey", "zero");

        interfaceinvoke $r15.<java.util.SortedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("oneKey", "one");

        r29 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Map$Entry get(java.util.Map,int)>($r15, 1);

        $r18 = interfaceinvoke r29.<java.util.Map$Entry: java.lang.Object getKey()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("zeroKey", $r18);

        $r19 = interfaceinvoke r29.<java.util.Map$Entry: java.lang.Object getValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("zero", $r19);

        r30 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Map$Entry get(java.util.Map,int)>($r15, 0);

        $r20 = interfaceinvoke r30.<java.util.Map$Entry: java.lang.Object getKey()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("oneKey", $r20);

        $r21 = interfaceinvoke r30.<java.util.Map$Entry: java.lang.Object getValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("one", $r21);

        return;

        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
        catch java.lang.IndexOutOfBoundsException from label4 to label5 with label6;
    }

    public void getFromList() throws java.lang.Exception
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.List r1;
        java.lang.String r2;
        java.lang.Object $r3, $r4, $r7, $r10, $r11;
        org.easymock.IExpectationSetters $r5, $r8;
        java.util.ArrayList $r12;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.CollectionUtilsTest: java.lang.Object createMock(java.lang.Class)>(class "Ljava/util/List;");

        r1 = (java.util.List) $r3;

        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        $r5 = virtualinvoke r0.<org.apache.commons.collections4.CollectionUtilsTest: org.easymock.IExpectationSetters expect(java.lang.Object)>($r4);

        interfaceinvoke $r5.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("zero");

        $r7 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(1);

        $r8 = virtualinvoke r0.<org.apache.commons.collections4.CollectionUtilsTest: org.easymock.IExpectationSetters expect(java.lang.Object)>($r7);

        interfaceinvoke $r8.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("one");

        virtualinvoke r0.<org.apache.commons.collections4.CollectionUtilsTest: void replay()>();

        $r10 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.lang.Object get(java.lang.Iterable,int)>(r1, 0);

        r2 = (java.lang.String) $r10;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("zero", r2);

        $r11 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.lang.Object get(java.lang.Iterable,int)>(r1, 1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("one", $r11);

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        staticinvoke <org.apache.commons.collections4.CollectionUtils: java.lang.Object get(java.lang.Iterable,int)>($r12, 2);

        return;
    }

    public void getFromIterator() throws java.lang.Exception
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.lang.Iterable $r2, $r5;
        java.lang.Object $r3, $r6;
        java.lang.Integer $r4, $r7;
        int $i0, $i2;
        long $l1, $l3;
        boolean $z0, $z1;
        java.lang.IndexOutOfBoundsException $r9;
        java.util.Iterator r10, r11;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r2 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.lang.Iterable iterableA>;

        r10 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r3 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.lang.Object get(java.util.Iterator,int)>(r10, 0);

        $r4 = (java.lang.Integer) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l1);

        $r5 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.lang.Iterable iterableA>;

        r11 = interfaceinvoke $r5.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r6 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.lang.Object get(java.util.Iterator,int)>(r11, 1);

        $r7 = (java.lang.Integer) $r6;

        $i2 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l3);

     label1:
        staticinvoke <org.apache.commons.collections4.CollectionUtils: java.lang.Object get(java.util.Iterator,int)>(r11, 10);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting IndexOutOfBoundsException.");

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

     label4:
        $z0 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label5;

        $z1 = 1;

        goto label6;

     label5:
        $z1 = 0;

     label6:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        return;

        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
    }

    public void getFromEnumeration() throws java.lang.Exception
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.Vector $r3;
        java.lang.Object $r4, $r5;
        boolean $z0, $z1;
        java.lang.IndexOutOfBoundsException $r7;
        java.util.Enumeration r8, r9;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r3 = new java.util.Vector;

        specialinvoke $r3.<java.util.Vector: void <init>()>();

        virtualinvoke $r3.<java.util.Vector: void addElement(java.lang.Object)>("zero");

        virtualinvoke $r3.<java.util.Vector: void addElement(java.lang.Object)>("one");

        r8 = virtualinvoke $r3.<java.util.Vector: java.util.Enumeration elements()>();

        $r4 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.lang.Object get(java.lang.Object,int)>(r8, 0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("zero", $r4);

        r9 = virtualinvoke $r3.<java.util.Vector: java.util.Enumeration elements()>();

        $r5 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.lang.Object get(java.lang.Object,int)>(r9, 1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("one", $r5);

     label1:
        staticinvoke <org.apache.commons.collections4.CollectionUtils: java.lang.Object get(java.lang.Object,int)>(r9, 3);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting IndexOutOfBoundsException.");

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

     label4:
        $z0 = interfaceinvoke r9.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 != 0 goto label5;

        $z1 = 1;

        goto label6;

     label5:
        $z1 = 0;

     label6:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        return;

        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
    }

    public void getFromIterable() throws java.lang.Exception
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        org.apache.commons.collections4.bag.HashBag $r2;
        java.lang.Object $r3;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r2 = new org.apache.commons.collections4.bag.HashBag;

        specialinvoke $r2.<org.apache.commons.collections4.bag.HashBag: void <init>()>();

        interfaceinvoke $r2.<org.apache.commons.collections4.Bag: boolean add(java.lang.Object,int)>("element", 1);

        $r3 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.lang.Object get(java.lang.Iterable,int)>($r2, 0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("element", $r3);

        staticinvoke <org.apache.commons.collections4.CollectionUtils: java.lang.Object get(java.lang.Iterable,int)>($r2, 1);

        return;
    }

    public void getFromObjectArray() throws java.lang.Exception
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.lang.Object[] r1;
        java.lang.Object $r2, $r3;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        r1 = newarray (java.lang.Object)[2];

        r1[0] = "zero";

        r1[1] = "one";

        $r2 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.lang.Object get(java.lang.Object,int)>(r1, 0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("zero", $r2);

        $r3 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.lang.Object get(java.lang.Object,int)>(r1, 1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("one", $r3);

        staticinvoke <org.apache.commons.collections4.CollectionUtils: java.lang.Object get(java.lang.Object,int)>(r1, 2);

        return;
    }

    public void getFromPrimitiveArray() throws java.lang.Exception
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        int[] r1;
        java.lang.Integer $r2, $r4;
        java.lang.Object $r3, $r5;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        r1 = newarray (int)[2];

        r1[0] = 10;

        r1[1] = 20;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        $r3 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.lang.Object get(java.lang.Object,int)>(r1, 0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r2, $r3);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(20);

        $r5 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.lang.Object get(java.lang.Object,int)>(r1, 1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r4, $r5);

        staticinvoke <org.apache.commons.collections4.CollectionUtils: java.lang.Object get(java.lang.Object,int)>(r1, 2);

        return;
    }

    public void getFromObject() throws java.lang.Exception
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.lang.Object $r2;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.commons.collections4.CollectionUtils: java.lang.Object get(java.lang.Object,int)>($r2, 0);

        return;
    }

    public void testSize_List()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        int $i0, $i2, $i4, $i6;
        long $l1, $l3, $l5, $l7;
        java.util.ArrayList $r1;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $i0 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int size(java.lang.Object)>(null);

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $i2 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int size(java.lang.Object)>($r1);

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l3);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>("a");

        $i4 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int size(java.lang.Object)>($r1);

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l5);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>("b");

        $i6 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int size(java.lang.Object)>($r1);

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l7);

        return;
    }

    public void testSize_Map()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.HashMap $r2;
        int $i0, $i2, $i4;
        long $l1, $l3, $l5;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        $i0 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int size(java.lang.Object)>($r2);

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("1", "a");

        $i2 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int size(java.lang.Object)>($r2);

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l3);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("2", "b");

        $i4 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int size(java.lang.Object)>($r2);

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l5);

        return;
    }

    public void testSize_Array()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.lang.Object[] r1;
        java.lang.String[] r2;
        int $i0, $i2, $i4;
        long $l1, $l3, $l5;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        r1 = newarray (java.lang.Object)[0];

        $i0 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int size(java.lang.Object)>(r1);

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        r2 = newarray (java.lang.String)[3];

        $i2 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int size(java.lang.Object)>(r2);

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l3);

        r2[0] = "a";

        r2[1] = "b";

        r2[2] = "c";

        $i4 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int size(java.lang.Object)>(r2);

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l5);

        return;
    }

    public void testSize_PrimitiveArray()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        int[] r1;
        double[] r2;
        int $i0, $i2, $i4;
        long $l1, $l3, $l5;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        r1 = newarray (int)[0];

        $i0 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int size(java.lang.Object)>(r1);

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        r2 = newarray (double)[3];

        $i2 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int size(java.lang.Object)>(r2);

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l3);

        r2[0] = 0.0;

        r2[1] = 1.0;

        r2[2] = 2.5;

        $i4 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int size(java.lang.Object)>(r2);

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l5);

        return;
    }

    public void testSize_Enumeration()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.Vector $r2;
        java.util.Enumeration $r3, $r4, $r5;
        int $i0, $i2, $i4;
        long $l1, $l3, $l5;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>()>();

        $r3 = virtualinvoke $r2.<java.util.Vector: java.util.Enumeration elements()>();

        $i0 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int size(java.lang.Object)>($r3);

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        virtualinvoke $r2.<java.util.Vector: boolean add(java.lang.Object)>("a");

        $r4 = virtualinvoke $r2.<java.util.Vector: java.util.Enumeration elements()>();

        $i2 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int size(java.lang.Object)>($r4);

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l3);

        virtualinvoke $r2.<java.util.Vector: boolean add(java.lang.Object)>("b");

        $r5 = virtualinvoke $r2.<java.util.Vector: java.util.Enumeration elements()>();

        $i4 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int size(java.lang.Object)>($r5);

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l5);

        return;
    }

    public void testSize_Iterator()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.ArrayList $r2;
        java.util.Iterator $r3, $r4, $r5;
        int $i0, $i2, $i4;
        long $l1, $l3, $l5;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        $i0 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int size(java.lang.Object)>($r3);

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>("a");

        $r4 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        $i2 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int size(java.lang.Object)>($r4);

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l3);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>("b");

        $r5 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        $i4 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int size(java.lang.Object)>($r5);

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l5);

        return;
    }

    public void testSize_Other()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        staticinvoke <org.apache.commons.collections4.CollectionUtils: int size(java.lang.Object)>("not a list");

        return;
    }

    public void testSizeIsEmpty_Null()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.lang.Boolean $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z0 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean sizeIsEmpty(java.lang.Object)>(null);

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r1, $r2);

        return;
    }

    public void testSizeIsEmpty_List()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.ArrayList $r2;
        java.lang.Boolean $r3, $r4, $r5, $r6;
        boolean $z0, $z2;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z0 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean sizeIsEmpty(java.lang.Object)>($r2);

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r3, $r4);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>("a");

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $z2 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean sizeIsEmpty(java.lang.Object)>($r2);

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r5, $r6);

        return;
    }

    public void testSizeIsEmpty_Map()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.HashMap $r2;
        java.lang.Boolean $r3, $r4, $r6, $r7;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z0 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean sizeIsEmpty(java.lang.Object)>($r2);

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r3, $r4);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("1", "a");

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $z1 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean sizeIsEmpty(java.lang.Object)>($r2);

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r6, $r7);

        return;
    }

    public void testSizeIsEmpty_Array()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.lang.Object[] r1;
        java.lang.String[] r2;
        java.lang.Boolean $r3, $r4, $r5, $r6, $r7, $r8;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        r1 = newarray (java.lang.Object)[0];

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z0 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean sizeIsEmpty(java.lang.Object)>(r1);

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r3, $r4);

        r2 = newarray (java.lang.String)[3];

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $z1 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean sizeIsEmpty(java.lang.Object)>(r2);

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r5, $r6);

        r2[0] = "a";

        r2[1] = "b";

        r2[2] = "c";

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $z2 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean sizeIsEmpty(java.lang.Object)>(r2);

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, $r8);

        return;
    }

    public void testSizeIsEmpty_PrimitiveArray()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        int[] r1;
        double[] r2;
        java.lang.Boolean $r3, $r4, $r5, $r6, $r7, $r8;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        r1 = newarray (int)[0];

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z0 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean sizeIsEmpty(java.lang.Object)>(r1);

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r3, $r4);

        r2 = newarray (double)[3];

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $z1 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean sizeIsEmpty(java.lang.Object)>(r2);

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r5, $r6);

        r2[0] = 0.0;

        r2[1] = 1.0;

        r2[2] = 2.5;

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $z2 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean sizeIsEmpty(java.lang.Object)>(r2);

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, $r8);

        return;
    }

    public void testSizeIsEmpty_Enumeration()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.Enumeration r2, $r5, $r8;
        java.util.Vector $r3;
        java.lang.Boolean $r4, $r6, $r7, $r9, $r11, $r12;
        boolean $z0, $z2, $z3;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r3 = new java.util.Vector;

        specialinvoke $r3.<java.util.Vector: void <init>()>();

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r5 = virtualinvoke $r3.<java.util.Vector: java.util.Enumeration elements()>();

        $z0 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean sizeIsEmpty(java.lang.Object)>($r5);

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r4, $r6);

        virtualinvoke $r3.<java.util.Vector: boolean add(java.lang.Object)>("a");

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r8 = virtualinvoke $r3.<java.util.Vector: java.util.Enumeration elements()>();

        $z2 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean sizeIsEmpty(java.lang.Object)>($r8);

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, $r9);

        r2 = virtualinvoke $r3.<java.util.Vector: java.util.Enumeration elements()>();

        interfaceinvoke r2.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z3 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean sizeIsEmpty(java.lang.Object)>(r2);

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r11, $r12);

        return;
    }

    public void testSizeIsEmpty_Iterator()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.Iterator r2, $r5, $r8;
        java.util.ArrayList $r3;
        java.lang.Boolean $r4, $r6, $r7, $r9, $r11, $r12;
        boolean $z0, $z2, $z3;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r5 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

        $z0 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean sizeIsEmpty(java.lang.Object)>($r5);

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r4, $r6);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>("a");

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r8 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

        $z2 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean sizeIsEmpty(java.lang.Object)>($r8);

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, $r9);

        r2 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

        interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z3 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean sizeIsEmpty(java.lang.Object)>(r2);

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r11, $r12);

        return;
    }

    public void testSizeIsEmpty_Other()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

     label1:
        staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean sizeIsEmpty(java.lang.Object)>("not a list");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting IllegalArgumentException");

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public void testIsEmptyWithEmptyCollection()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.ArrayList $r2;
        java.lang.Boolean $r3, $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z0 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isEmpty(java.util.Collection)>($r2);

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r3, $r4);

        return;
    }

    public void testIsEmptyWithNonEmptyCollection()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.ArrayList $r2;
        java.lang.Boolean $r3, $r4;
        boolean $z1;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r2.<java.util.Collection: boolean add(java.lang.Object)>("item");

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $z1 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isEmpty(java.util.Collection)>($r2);

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r3, $r4);

        return;
    }

    public void testIsEmptyWithNull()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.lang.Boolean $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z0 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isEmpty(java.util.Collection)>(null);

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r1, $r2);

        return;
    }

    public void testIsNotEmptyWithEmptyCollection()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.ArrayList $r2;
        java.lang.Boolean $r3, $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $z0 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isNotEmpty(java.util.Collection)>($r2);

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r3, $r4);

        return;
    }

    public void testIsNotEmptyWithNonEmptyCollection()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.ArrayList $r2;
        java.lang.Boolean $r3, $r4;
        boolean $z1;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r2.<java.util.Collection: boolean add(java.lang.Object)>("item");

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z1 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isNotEmpty(java.util.Collection)>($r2);

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r3, $r4);

        return;
    }

    public void testIsNotEmptyWithNull()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.lang.Boolean $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $z0 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isNotEmpty(java.util.Collection)>(null);

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r1, $r2);

        return;
    }

    public void filter()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.ArrayList $r3;
        java.lang.Integer $r4, $r5, $r6, $r7, $r10;
        org.apache.commons.collections4.Predicate $r8;
        boolean $z4;
        int $i0, $i2;
        long $l1, $l3;
        java.lang.Object $r9;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r4);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r5);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r6);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r7);

        $r8 = <org.apache.commons.collections4.CollectionUtilsTest: org.apache.commons.collections4.Predicate EQUALS_TWO>;

        $z4 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean filter(java.lang.Iterable,org.apache.commons.collections4.Predicate)>($r3, $r8);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l1);

        $r9 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(0);

        $r10 = (java.lang.Integer) $r9;

        $i2 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l3);

        return;
    }

    public void filterNullParameters() throws java.lang.Exception
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.List r1;
        java.lang.Long $r2;
        boolean $z0, $z1, $z2;
        int $i0, $i2, $i4;
        long $l1, $l3, $l5;
        org.apache.commons.collections4.Predicate $r3;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(10L);

        r1 = staticinvoke <java.util.Collections: java.util.List nCopies(int,java.lang.Object)>(4, $r2);

        $z0 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean filter(java.lang.Iterable,org.apache.commons.collections4.Predicate)>(r1, null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l1);

        $r3 = <org.apache.commons.collections4.CollectionUtilsTest: org.apache.commons.collections4.Predicate EQUALS_TWO>;

        $z1 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean filter(java.lang.Iterable,org.apache.commons.collections4.Predicate)>(null, $r3);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z1);

        $i2 = interfaceinvoke r1.<java.util.List: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l3);

        $z2 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean filter(java.lang.Iterable,org.apache.commons.collections4.Predicate)>(null, null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z2);

        $i4 = interfaceinvoke r1.<java.util.List: int size()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l5);

        return;
    }

    public void filterInverse()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.ArrayList $r3;
        java.lang.Integer $r4, $r5, $r6, $r7, $r10, $r12, $r14;
        org.apache.commons.collections4.Predicate $r8;
        boolean $z4;
        int $i0, $i2, $i4, $i6;
        long $l1, $l3, $l5, $l7;
        java.lang.Object $r9, $r11, $r13;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r4);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r5);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r6);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r7);

        $r8 = <org.apache.commons.collections4.CollectionUtilsTest: org.apache.commons.collections4.Predicate EQUALS_TWO>;

        $z4 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean filterInverse(java.lang.Iterable,org.apache.commons.collections4.Predicate)>($r3, $r8);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l1);

        $r9 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(0);

        $r10 = (java.lang.Integer) $r9;

        $i2 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l3);

        $r11 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(1);

        $r12 = (java.lang.Integer) $r11;

        $i4 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l5);

        $r13 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(2);

        $r14 = (java.lang.Integer) $r13;

        $i6 = virtualinvoke $r14.<java.lang.Integer: int intValue()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l7);

        return;
    }

    public void filterInverseNullParameters() throws java.lang.Exception
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.List r1;
        java.lang.Long $r2;
        boolean $z0, $z1, $z2;
        int $i0, $i2, $i4;
        long $l1, $l3, $l5;
        org.apache.commons.collections4.Predicate $r3;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(10L);

        r1 = staticinvoke <java.util.Collections: java.util.List nCopies(int,java.lang.Object)>(4, $r2);

        $z0 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean filterInverse(java.lang.Iterable,org.apache.commons.collections4.Predicate)>(r1, null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l1);

        $r3 = <org.apache.commons.collections4.CollectionUtilsTest: org.apache.commons.collections4.Predicate EQUALS_TWO>;

        $z1 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean filterInverse(java.lang.Iterable,org.apache.commons.collections4.Predicate)>(null, $r3);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z1);

        $i2 = interfaceinvoke r1.<java.util.List: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l3);

        $z2 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean filterInverse(java.lang.Iterable,org.apache.commons.collections4.Predicate)>(null, null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z2);

        $i4 = interfaceinvoke r1.<java.util.List: int size()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l5);

        return;
    }

    public void countMatches()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        org.apache.commons.collections4.Predicate $r1, $r4;
        java.lang.Iterable $r2, $r3;
        int $i0, $i2, $i4, $i6;
        long $l1, $l3, $l5, $l7;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r2 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.lang.Iterable iterableB>;

        $r1 = <org.apache.commons.collections4.CollectionUtilsTest: org.apache.commons.collections4.Predicate EQUALS_TWO>;

        $i0 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int countMatches(java.lang.Iterable,org.apache.commons.collections4.Predicate)>($r2, $r1);

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l1);

        $r3 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.lang.Iterable iterableA>;

        $i2 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int countMatches(java.lang.Iterable,org.apache.commons.collections4.Predicate)>($r3, null);

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l3);

        $r4 = <org.apache.commons.collections4.CollectionUtilsTest: org.apache.commons.collections4.Predicate EQUALS_TWO>;

        $i4 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int countMatches(java.lang.Iterable,org.apache.commons.collections4.Predicate)>(null, $r4);

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l5);

        $i6 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int countMatches(java.lang.Iterable,org.apache.commons.collections4.Predicate)>(null, null);

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l7);

        return;
    }

    public void exists()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.ArrayList $r2;
        boolean $z0, $z1, $z2, $z3, $z7, $z9;
        org.apache.commons.collections4.Predicate $r3, $r4, $r8, $r11;
        java.lang.Integer $r5, $r6, $r7, $r9;
        java.lang.Boolean $r10, $r12;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $z0 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean exists(java.lang.Iterable,org.apache.commons.collections4.Predicate)>(null, null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        $z1 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean exists(java.lang.Iterable,org.apache.commons.collections4.Predicate)>($r2, null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z1);

        $r3 = <org.apache.commons.collections4.CollectionUtilsTest: org.apache.commons.collections4.Predicate EQUALS_TWO>;

        $z2 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean exists(java.lang.Iterable,org.apache.commons.collections4.Predicate)>(null, $r3);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z2);

        $r4 = <org.apache.commons.collections4.CollectionUtilsTest: org.apache.commons.collections4.Predicate EQUALS_TWO>;

        $z3 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean exists(java.lang.Iterable,org.apache.commons.collections4.Predicate)>($r2, $r4);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z3);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r5);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r6);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r7);

        $r8 = <org.apache.commons.collections4.CollectionUtilsTest: org.apache.commons.collections4.Predicate EQUALS_TWO>;

        $z7 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean exists(java.lang.Iterable,org.apache.commons.collections4.Predicate)>($r2, $r8);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z7);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r9);

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r11 = <org.apache.commons.collections4.CollectionUtilsTest: org.apache.commons.collections4.Predicate EQUALS_TWO>;

        $z9 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean exists(java.lang.Iterable,org.apache.commons.collections4.Predicate)>($r2, $r11);

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r12);

        return;
    }

    public void select()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.Collection r2, r3, $r14;
        java.util.HashSet r4, $r12;
        java.util.ArrayList $r5;
        java.lang.Integer $r6, $r7, $r8, $r9, $r15;
        org.apache.commons.collections4.Predicate $r10, $r11, $r13;
        boolean $z4;
        int $i0, $i2;
        long $l1, $l3;
        java.util.Iterator $r16;
        java.lang.Object $r17;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r6);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r7);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r8);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r9);

        $r10 = <org.apache.commons.collections4.CollectionUtilsTest: org.apache.commons.collections4.Predicate EQUALS_TWO>;

        r2 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection select(java.lang.Iterable,org.apache.commons.collections4.Predicate)>($r5, $r10);

        $r11 = <org.apache.commons.collections4.CollectionUtilsTest: org.apache.commons.collections4.Predicate EQUALS_TWO>;

        r3 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection select(java.lang.Iterable,org.apache.commons.collections4.Predicate)>($r5, $r11);

        $r13 = <org.apache.commons.collections4.CollectionUtilsTest: org.apache.commons.collections4.Predicate EQUALS_TWO>;

        $r12 = new java.util.HashSet;

        specialinvoke $r12.<java.util.HashSet: void <init>()>();

        $r14 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection select(java.lang.Iterable,org.apache.commons.collections4.Predicate,java.util.Collection)>($r5, $r13, $r12);

        r4 = (java.util.HashSet) $r14;

        $z4 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isEqualCollection(java.util.Collection,java.util.Collection)>(r2, r4);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l1);

        $i2 = interfaceinvoke r2.<java.util.Collection: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l3);

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r16 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>();

        $r17 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r15, $r17);

        return;
    }

    public void selectWithOutputCollections()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.ArrayList $r5, $r10, $r11;
        java.lang.Integer $r6, $r7, $r8, $r9, $r15, $r17, $r18, $r19;
        org.apache.commons.collections4.Predicate $r12, $r21;
        int $i0, $i2;
        long $l1, $l3;
        java.lang.Object $r14;
        java.lang.Integer[] $r16;
        java.lang.Object[] $r20;
        java.util.List $r22;
        boolean $z4, $z5;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r6);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r7);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r8);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r9);

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        $r12 = <org.apache.commons.collections4.CollectionUtilsTest: org.apache.commons.collections4.Predicate EQUALS_TWO>;

        staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection select(java.lang.Iterable,org.apache.commons.collections4.Predicate,java.util.Collection,java.util.Collection)>($r5, $r12, $r10, $r11);

        $i0 = interfaceinvoke $r10.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l1);

        $r14 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.lang.Object extractSingleton(java.util.Collection)>($r10);

        $r15 = (java.lang.Integer) $r14;

        $i2 = virtualinvoke $r15.<java.lang.Integer: int intValue()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l3);

        $r16 = newarray (java.lang.Integer)[3];

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r16[0] = $r17;

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r16[1] = $r18;

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r16[2] = $r19;

        $r20 = interfaceinvoke $r11.<java.util.List: java.lang.Object[] toArray()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($r16, $r20);

        interfaceinvoke $r10.<java.util.List: void clear()>();

        interfaceinvoke $r11.<java.util.List: void clear()>();

        $r22 = (java.util.List) null;

        $r21 = <org.apache.commons.collections4.CollectionUtilsTest: org.apache.commons.collections4.Predicate EQUALS_TWO>;

        staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection select(java.lang.Iterable,org.apache.commons.collections4.Predicate,java.util.Collection,java.util.Collection)>($r22, $r21, $r10, $r11);

        $z4 = interfaceinvoke $r10.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $z5 = interfaceinvoke $r11.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        return;
    }

    public void selectRejected()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.Collection r2, r3, $r14;
        java.util.HashSet r4, $r12;
        java.util.ArrayList $r5;
        java.lang.Long $r6, $r7, $r8, $r9, $r15, $r16, $r17;
        org.apache.commons.collections4.Predicate $r10, $r11, $r13;
        boolean $z4, $z5, $z6, $z7, $z8;
        int $i0, $i2;
        long $l1, $l3;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r6);

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(2L);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r7);

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(3L);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r8);

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(4L);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r9);

        $r10 = <org.apache.commons.collections4.CollectionUtilsTest: org.apache.commons.collections4.Predicate EQUALS_TWO>;

        r2 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection selectRejected(java.lang.Iterable,org.apache.commons.collections4.Predicate)>($r5, $r10);

        $r11 = <org.apache.commons.collections4.CollectionUtilsTest: org.apache.commons.collections4.Predicate EQUALS_TWO>;

        r3 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection selectRejected(java.lang.Iterable,org.apache.commons.collections4.Predicate)>($r5, $r11);

        $r13 = <org.apache.commons.collections4.CollectionUtilsTest: org.apache.commons.collections4.Predicate EQUALS_TWO>;

        $r12 = new java.util.HashSet;

        specialinvoke $r12.<java.util.HashSet: void <init>()>();

        $r14 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection selectRejected(java.lang.Iterable,org.apache.commons.collections4.Predicate,java.util.Collection)>($r5, $r13, $r12);

        r4 = (java.util.HashSet) $r14;

        $z4 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isEqualCollection(java.util.Collection,java.util.Collection)>(r2, r3);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $z5 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isEqualCollection(java.util.Collection,java.util.Collection)>(r2, r4);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l1);

        $i2 = interfaceinvoke r2.<java.util.Collection: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l3);

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L);

        $z6 = interfaceinvoke r2.<java.util.Collection: boolean contains(java.lang.Object)>($r15);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        $r16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(3L);

        $z7 = interfaceinvoke r2.<java.util.Collection: boolean contains(java.lang.Object)>($r16);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

        $r17 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(4L);

        $z8 = interfaceinvoke r2.<java.util.Collection: boolean contains(java.lang.Object)>($r17);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

        return;
    }

    public void collect()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        org.apache.commons.collections4.Transformer r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.lang.Long $r2, $r16;
        java.lang.Iterable $r3, $r11;
        java.util.List $r4, $r6, $r8, $r13, $r14, $r15, $r17, $r18, $r21, $r22, $r23, $r25, $r38, $r39, $r40;
        java.util.ArrayList $r5, $r9, r29, r30, r32;
        java.util.Collection $r7, $r10, $r12, $r20, r28, r34, r37;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        java.lang.Integer $r24, $r26, $r27;
        java.util.Iterator r31, r33;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(2L);

        r1 = staticinvoke <org.apache.commons.collections4.TransformerUtils: org.apache.commons.collections4.Transformer constantTransformer(java.lang.Object)>($r2);

        $r3 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.lang.Iterable iterableA>;

        r28 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection collect(java.lang.Iterable,org.apache.commons.collections4.Transformer)>($r3, r1);

        $i1 = interfaceinvoke r28.<java.util.Collection: int size()>();

        $r4 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $i2 = interfaceinvoke $r4.<java.util.List: int size()>();

        if $i1 != $i2 goto label01;

        $z4 = 1;

        goto label02;

     label01:
        $z4 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        specialinvoke r0.<org.apache.commons.collections4.CollectionUtilsTest: void assertCollectResult(java.util.Collection)>(r28);

        $r6 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r7 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection collect(java.lang.Iterable,org.apache.commons.collections4.Transformer,java.util.Collection)>($r6, r1, $r5);

        r29 = (java.util.ArrayList) $r7;

        $i3 = virtualinvoke r29.<java.util.ArrayList: int size()>();

        $r8 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $i4 = interfaceinvoke $r8.<java.util.List: int size()>();

        if $i3 != $i4 goto label03;

        $z5 = 1;

        goto label04;

     label03:
        $z5 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        specialinvoke r0.<org.apache.commons.collections4.CollectionUtilsTest: void assertCollectResult(java.util.Collection)>(r29);

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        $r10 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection collect(java.util.Iterator,org.apache.commons.collections4.Transformer,java.util.Collection)>(null, r1, $r9);

        r30 = (java.util.ArrayList) $r10;

        $r11 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.lang.Iterable iterableA>;

        r31 = interfaceinvoke $r11.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r12 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection collect(java.util.Iterator,org.apache.commons.collections4.Transformer,java.util.Collection)>(r31, r1, r30);

        r32 = (java.util.ArrayList) $r12;

        $i5 = interfaceinvoke r28.<java.util.Collection: int size()>();

        $r13 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $i6 = interfaceinvoke $r13.<java.util.List: int size()>();

        if $i5 != $i6 goto label05;

        $z6 = 1;

        goto label06;

     label05:
        $z6 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        specialinvoke r0.<org.apache.commons.collections4.CollectionUtilsTest: void assertCollectResult(java.util.Collection)>(r28);

        $r14 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        r33 = interfaceinvoke $r14.<java.util.List: java.util.Iterator iterator()>();

        r34 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection collect(java.util.Iterator,org.apache.commons.collections4.Transformer)>(r33, r1);

        $i7 = interfaceinvoke r34.<java.util.Collection: int size()>();

        $r15 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $i8 = interfaceinvoke $r15.<java.util.List: int size()>();

        if $i7 != $i8 goto label07;

        $z7 = 1;

        goto label08;

     label07:
        $z7 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

        $r16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(2L);

        $z0 = interfaceinvoke r34.<java.util.Collection: boolean contains(java.lang.Object)>($r16);

        if $z0 == 0 goto label09;

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $z3 = interfaceinvoke r34.<java.util.Collection: boolean contains(java.lang.Object)>($r27);

        if $z3 != 0 goto label09;

        $z8 = 1;

        goto label10;

     label09:
        $z8 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

        r37 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection collect(java.util.Iterator,org.apache.commons.collections4.Transformer)>(null, null);

        $i10 = interfaceinvoke r37.<java.util.Collection: int size()>();

        if $i10 != 0 goto label11;

        $z9 = 1;

        goto label12;

     label11:
        $z9 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z9);

        $r17 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        i0 = interfaceinvoke $r17.<java.util.List: int size()>();

        $r18 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionB>;

        $r20 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection collect(java.lang.Iterable,org.apache.commons.collections4.Transformer,java.util.Collection)>(null, r1, $r18);

        $r21 = (java.util.List) $r20;

        r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionB> = $r21;

        $r22 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $i9 = interfaceinvoke $r22.<java.util.List: int size()>();

        if $i9 != i0 goto label13;

        $r25 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $z2 = interfaceinvoke $r25.<java.util.List: boolean contains(java.lang.Object)>($r26);

        if $z2 == 0 goto label13;

        $z10 = 1;

        goto label14;

     label13:
        $z10 = 0;

     label14:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z10);

        $r38 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionB>;

        $r39 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection collect(java.lang.Iterable,org.apache.commons.collections4.Transformer,java.util.Collection)>($r38, null, $r39);

        $r40 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $i11 = interfaceinvoke $r40.<java.util.List: int size()>();

        if $i11 != i0 goto label15;

        $r23 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $z1 = interfaceinvoke $r23.<java.util.List: boolean contains(java.lang.Object)>($r24);

        if $z1 == 0 goto label15;

        $z11 = 1;

        goto label16;

     label15:
        $z11 = 0;

     label16:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z11);

        return;
    }

    private void assertCollectResult(java.util.Collection)
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.Collection r1;
        java.util.List $r2, $r5;
        java.lang.Integer $r3, $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Long $r6, $r7;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $z0 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        $r5 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(2L);

        $z2 = interfaceinvoke $r5.<java.util.List: boolean contains(java.lang.Object)>($r6);

        if $z2 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(2L);

        $z4 = interfaceinvoke r1.<java.util.Collection: boolean contains(java.lang.Object)>($r7);

        if $z4 == 0 goto label3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $z1 = interfaceinvoke r1.<java.util.Collection: boolean contains(java.lang.Object)>($r4);

        if $z1 != 0 goto label3;

        $z5 = 1;

        goto label4;

     label3:
        $z5 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        return;
    }

    public void transform1()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.ArrayList $r1, $r12;
        java.lang.Long $r2, $r3, $r4, $r13, $r14, $r15;
        org.apache.commons.collections4.Transformer $r5, $r16;
        int $i0, $i2, $i4, $i6;
        long $l1, $l3, $l5, $l7;
        java.lang.Integer $r6, $r8, $r10;
        java.lang.Object $r7, $r9, $r11;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(2L);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r3);

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(3L);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r4);

        $r5 = r0.<org.apache.commons.collections4.CollectionUtilsTest: org.apache.commons.collections4.Transformer TRANSFORM_TO_INTEGER>;

        staticinvoke <org.apache.commons.collections4.CollectionUtils: void transform(java.util.Collection,org.apache.commons.collections4.Transformer)>($r1, $r5);

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l1);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r7 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r6, $r7);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r9 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r8, $r9);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r11 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r11);

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L);

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r13);

        $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(2L);

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r14);

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(3L);

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r15);

        $r16 = r0.<org.apache.commons.collections4.CollectionUtilsTest: org.apache.commons.collections4.Transformer TRANSFORM_TO_INTEGER>;

        staticinvoke <org.apache.commons.collections4.CollectionUtils: void transform(java.util.Collection,org.apache.commons.collections4.Transformer)>(null, $r16);

        $i2 = interfaceinvoke $r12.<java.util.List: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l3);

        staticinvoke <org.apache.commons.collections4.CollectionUtils: void transform(java.util.Collection,org.apache.commons.collections4.Transformer)>($r12, null);

        $i4 = interfaceinvoke $r12.<java.util.List: int size()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l5);

        staticinvoke <org.apache.commons.collections4.CollectionUtils: void transform(java.util.Collection,org.apache.commons.collections4.Transformer)>(null, null);

        $i6 = interfaceinvoke $r12.<java.util.List: int size()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l7);

        return;
    }

    public void transform2()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.HashSet $r2;
        java.lang.Long $r3, $r4, $r5;
        org.apache.commons.collections4.CollectionUtilsTest$7 $r6;
        int $i0;
        long $l1;
        java.lang.Integer $r7;
        java.util.Iterator $r8;
        java.lang.Object $r9;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L);

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r3);

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(2L);

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r4);

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(3L);

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r5);

        $r6 = new org.apache.commons.collections4.CollectionUtilsTest$7;

        specialinvoke $r6.<org.apache.commons.collections4.CollectionUtilsTest$7: void <init>(org.apache.commons.collections4.CollectionUtilsTest)>(r0);

        staticinvoke <org.apache.commons.collections4.CollectionUtils: void transform(java.util.Collection,org.apache.commons.collections4.Transformer)>($r2, $r6);

        $i0 = interfaceinvoke $r2.<java.util.Set: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l1);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r8 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, $r9);

        return;
    }

    public void addIgnoreNull()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.HashSet $r2;
        boolean $z3, $z4, $z5, $z6;
        int $i0, $i2, $i4;
        long $l1, $l3, $l5;
        java.lang.Boolean $r3, $r4, $r5, $r6;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>("1");

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>("2");

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>("3");

        $z3 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean addIgnoreNull(java.util.Collection,java.lang.Object)>($r2, null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z3);

        $i0 = interfaceinvoke $r2.<java.util.Set: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l1);

        $z4 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean addIgnoreNull(java.util.Collection,java.lang.Object)>($r2, "1");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z4);

        $i2 = interfaceinvoke $r2.<java.util.Set: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l3);

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z5 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean addIgnoreNull(java.util.Collection,java.lang.Object)>($r2, "4");

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r3, $r4);

        $i4 = interfaceinvoke $r2.<java.util.Set: int size()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l5);

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z6 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>("4");

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z6);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r5, $r6);

        return;
    }

    public void predicatedCollection()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        org.apache.commons.collections4.Predicate r1;
        java.util.Collection r2;
        java.util.ArrayList $r3, $r4;
        boolean $z0;
        java.lang.NullPointerException $r7, $r8;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        r1 = staticinvoke <org.apache.commons.collections4.PredicateUtils: org.apache.commons.collections4.Predicate instanceofPredicate(java.lang.Class)>(class "Ljava/lang/Integer;");

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r2 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection predicatedCollection(java.util.Collection,org.apache.commons.collections4.Predicate)>($r3, r1);

        $z0 = r2 instanceof org.apache.commons.collections4.collection.PredicatedCollection;

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("returned object should be a PredicatedCollection", $z0);

     label1:
        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection predicatedCollection(java.util.Collection,org.apache.commons.collections4.Predicate)>($r4, null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting NullPointerException for null predicate.");

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

     label4:
        staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection predicatedCollection(java.util.Collection,org.apache.commons.collections4.Predicate)>(null, r1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting NullPointerException for null collection.");

     label5:
        goto label7;

     label6:
        $r7 := @caughtexception;

     label7:
        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
        catch java.lang.NullPointerException from label4 to label5 with label6;
    }

    public void isFull()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.HashSet $r2;
        boolean $z4, $z5, $z7, $z9;
        org.apache.commons.collections4.queue.CircularFifoQueue $r3;
        java.lang.Boolean $r4, $r5, $r6, $r7;
        java.lang.NullPointerException $r8;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>("1");

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>("2");

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>("3");

     label1:
        staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isFull(java.util.Collection)>(null);

        staticinvoke <org.junit.Assert: void fail()>();

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

     label4:
        $z4 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isFull(java.util.Collection)>($r2);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z4);

        $r3 = new org.apache.commons.collections4.queue.CircularFifoQueue;

        specialinvoke $r3.<org.apache.commons.collections4.queue.CircularFifoQueue: void <init>(java.util.Collection)>($r2);

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $z5 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isFull(java.util.Collection)>($r3);

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r4, $r5);

        virtualinvoke $r3.<org.apache.commons.collections4.queue.CircularFifoQueue: boolean remove(java.lang.Object)>("2");

        $z7 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isFull(java.util.Collection)>($r3);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z7);

        virtualinvoke $r3.<org.apache.commons.collections4.queue.CircularFifoQueue: boolean add(java.lang.Object)>("2");

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $z9 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isFull(java.util.Collection)>($r3);

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r6, $r7);

        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public void isEmpty()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        boolean $z0, $z1;
        java.util.List $r1;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $z0 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isNotEmpty(java.util.Collection)>(null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        $r1 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $z1 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isNotEmpty(java.util.Collection)>($r1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        return;
    }

    public void maxSize()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.HashSet $r2;
        int $i1, $i3, $i5, $i7;
        long $l2, $l4, $l6, $l8;
        org.apache.commons.collections4.queue.CircularFifoQueue $r3;
        java.lang.NullPointerException $r4;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>("1");

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>("2");

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>("3");

     label1:
        staticinvoke <org.apache.commons.collections4.CollectionUtils: int maxSize(java.util.Collection)>(null);

        staticinvoke <org.junit.Assert: void fail()>();

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        $i1 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int maxSize(java.util.Collection)>($r2);

        $l2 = (long) $i1;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l2);

        $r3 = new org.apache.commons.collections4.queue.CircularFifoQueue;

        specialinvoke $r3.<org.apache.commons.collections4.queue.CircularFifoQueue: void <init>(java.util.Collection)>($r2);

        $i3 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int maxSize(java.util.Collection)>($r3);

        $l4 = (long) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l4);

        interfaceinvoke $r3.<java.util.Queue: boolean remove(java.lang.Object)>("2");

        $i5 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int maxSize(java.util.Collection)>($r3);

        $l6 = (long) $i5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l6);

        interfaceinvoke $r3.<java.util.Queue: boolean add(java.lang.Object)>("2");

        $i7 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int maxSize(java.util.Collection)>($r3);

        $l8 = (long) $i7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l8);

        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public void intersectionUsesMethodEquals()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.Collection r5;
        java.lang.Object r6;
        java.lang.Integer $r7, $r8;
        java.util.ArrayList $r9, $r10;
        int $i0;
        long $l1;
        java.util.Iterator $r11;
        boolean $z2, $z3;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r7 = new java.lang.Integer;

        specialinvoke $r7.<java.lang.Integer: void <init>(int)>(17);

        $r8 = new java.lang.Integer;

        specialinvoke $r8.<java.lang.Integer: void <init>(int)>(17);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, $r8);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r8, $r7);

        if $r7 == $r8 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r9.<java.util.Collection: boolean add(java.lang.Object)>($r7);

        interfaceinvoke $r10.<java.util.Collection: boolean add(java.lang.Object)>($r8);

        r5 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection intersection(java.lang.Iterable,java.lang.Iterable)>($r9, $r10);

        $i0 = interfaceinvoke r5.<java.util.Collection: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l1);

        $r11 = interfaceinvoke r5.<java.util.Collection: java.util.Iterator iterator()>();

        r6 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        if r6 != $r7 goto label3;

        if r6 != $r8 goto label4;

     label3:
        if r6 == $r7 goto label5;

        if r6 != $r8 goto label5;

     label4:
        $z3 = 1;

        goto label6;

     label5:
        $z3 = 0;

     label6:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, r6);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r6, $r7);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r8, r6);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r6, $r8);

        return;
    }

    public void testRetainAll()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.Collection r3;
        java.util.ArrayList $r5, $r6;
        int $i0, $i2, $i4;
        long $l1, $l3, $l5;
        java.lang.Boolean $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22;
        boolean $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        java.lang.NullPointerException $r24;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>("A");

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>("B");

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>("C");

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>("A");

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>("C");

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>("X");

        r3 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection retainAll(java.util.Collection,java.util.Collection)>($r5, $r6);

        $i0 = interfaceinvoke r3.<java.util.Collection: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l1);

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z6 = interfaceinvoke r3.<java.util.Collection: boolean contains(java.lang.Object)>("A");

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z6);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, $r8);

        $z7 = interfaceinvoke r3.<java.util.Collection: boolean contains(java.lang.Object)>("B");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z7);

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z8 = interfaceinvoke r3.<java.util.Collection: boolean contains(java.lang.Object)>("C");

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z8);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r9, $r10);

        $i2 = interfaceinvoke $r5.<java.util.List: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l3);

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z9 = interfaceinvoke $r5.<java.util.List: boolean contains(java.lang.Object)>("A");

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r11, $r12);

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z10 = interfaceinvoke $r5.<java.util.List: boolean contains(java.lang.Object)>("B");

        $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r13, $r14);

        $r15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z11 = interfaceinvoke $r5.<java.util.List: boolean contains(java.lang.Object)>("C");

        $r16 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z11);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r15, $r16);

        $i4 = interfaceinvoke $r6.<java.util.List: int size()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l5);

        $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z12 = interfaceinvoke $r6.<java.util.List: boolean contains(java.lang.Object)>("A");

        $r18 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z12);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r17, $r18);

        $r19 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z13 = interfaceinvoke $r6.<java.util.List: boolean contains(java.lang.Object)>("C");

        $r20 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z13);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r19, $r20);

        $r21 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z14 = interfaceinvoke $r6.<java.util.List: boolean contains(java.lang.Object)>("X");

        $r22 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z14);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r21, $r22);

     label1:
        staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection retainAll(java.util.Collection,java.util.Collection)>(null, null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting NullPointerException");

     label2:
        goto label4;

     label3:
        $r24 := @caughtexception;

     label4:
        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public void testRemoveAll()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.Collection r3;
        java.util.ArrayList $r5, $r6;
        int $i0, $i2, $i4;
        long $l1, $l3, $l5;
        boolean $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        java.lang.Boolean $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20;
        java.lang.NullPointerException $r22;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>("A");

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>("B");

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>("C");

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>("A");

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>("C");

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>("X");

        r3 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection removeAll(java.util.Collection,java.util.Collection)>($r5, $r6);

        $i0 = interfaceinvoke r3.<java.util.Collection: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l1);

        $z6 = interfaceinvoke r3.<java.util.Collection: boolean contains(java.lang.Object)>("A");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z6);

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z7 = interfaceinvoke r3.<java.util.Collection: boolean contains(java.lang.Object)>("B");

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z7);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, $r8);

        $z8 = interfaceinvoke r3.<java.util.Collection: boolean contains(java.lang.Object)>("C");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z8);

        $i2 = interfaceinvoke $r5.<java.util.List: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l3);

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z9 = interfaceinvoke $r5.<java.util.List: boolean contains(java.lang.Object)>("A");

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r9, $r10);

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z10 = interfaceinvoke $r5.<java.util.List: boolean contains(java.lang.Object)>("B");

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r11, $r12);

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z11 = interfaceinvoke $r5.<java.util.List: boolean contains(java.lang.Object)>("C");

        $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z11);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r13, $r14);

        $i4 = interfaceinvoke $r6.<java.util.List: int size()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l5);

        $r15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z12 = interfaceinvoke $r6.<java.util.List: boolean contains(java.lang.Object)>("A");

        $r16 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z12);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r15, $r16);

        $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z13 = interfaceinvoke $r6.<java.util.List: boolean contains(java.lang.Object)>("C");

        $r18 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z13);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r17, $r18);

        $r19 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z14 = interfaceinvoke $r6.<java.util.List: boolean contains(java.lang.Object)>("X");

        $r20 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z14);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r19, $r20);

     label1:
        staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection removeAll(java.util.Collection,java.util.Collection)>(null, null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting NullPointerException");

     label2:
        goto label4;

     label3:
        $r22 := @caughtexception;

     label4:
        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public void testTransformedCollection()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        org.apache.commons.collections4.Transformer r1;
        java.util.Collection r2;
        java.util.ArrayList $r3, $r4;
        boolean $z0;
        java.lang.NullPointerException $r7, $r8;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        r1 = staticinvoke <org.apache.commons.collections4.TransformerUtils: org.apache.commons.collections4.Transformer nopTransformer()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r2 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection transformingCollection(java.util.Collection,org.apache.commons.collections4.Transformer)>($r3, r1);

        $z0 = r2 instanceof org.apache.commons.collections4.collection.TransformedCollection;

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("returned object should be a TransformedCollection", $z0);

     label1:
        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection transformingCollection(java.util.Collection,org.apache.commons.collections4.Transformer)>($r4, null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting NullPointerException for null transformer.");

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

     label4:
        staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection transformingCollection(java.util.Collection,org.apache.commons.collections4.Transformer)>(null, r1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting NullPointerException for null collection.");

     label5:
        goto label7;

     label6:
        $r7 := @caughtexception;

     label7:
        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
        catch java.lang.NullPointerException from label4 to label5 with label6;
    }

    public void testTransformedCollection_2()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.Collection r2;
        java.util.ArrayList $r3;
        org.apache.commons.collections4.Transformer $r4;
        java.lang.Boolean $r5, $r6, $r7, $r8, $r9, $r10;
        boolean $z3, $z4, $z5;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>("1");

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>("2");

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>("3");

        $r4 = r0.<org.apache.commons.collections4.CollectionUtilsTest: org.apache.commons.collections4.Transformer TRANSFORM_TO_INTEGER>;

        r2 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection transformingCollection(java.util.Collection,org.apache.commons.collections4.Transformer)>($r3, $r4);

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z3 = interfaceinvoke r2.<java.util.Collection: boolean contains(java.lang.Object)>("1");

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r5, $r6);

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z4 = interfaceinvoke r2.<java.util.Collection: boolean contains(java.lang.Object)>("2");

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, $r8);

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z5 = interfaceinvoke r2.<java.util.Collection: boolean contains(java.lang.Object)>("3");

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r9, $r10);

        return;
    }

    public void testSynchronizedCollection()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.Collection r1;
        java.util.ArrayList $r3;
        boolean $z0;
        java.lang.NullPointerException $r5;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r1 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection synchronizedCollection(java.util.Collection)>($r3);

        $z0 = r1 instanceof org.apache.commons.collections4.collection.SynchronizedCollection;

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Returned object should be a SynchronizedCollection.", $z0);

     label1:
        staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection synchronizedCollection(java.util.Collection)>(null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting NullPointerException for null collection.");

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

     label4:
        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public void testUnmodifiableCollection()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.Collection r1;
        java.util.ArrayList $r3;
        boolean $z0;
        java.lang.NullPointerException $r5;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r1 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection unmodifiableCollection(java.util.Collection)>($r3);

        $z0 = r1 instanceof org.apache.commons.collections4.collection.UnmodifiableCollection;

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Returned object should be a UnmodifiableCollection.", $z0);

     label1:
        staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection unmodifiableCollection(java.util.Collection)>(null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting NullPointerException for null collection.");

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

     label4:
        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public void emptyCollection() throws java.lang.Exception
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.Collection r1, $r2;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        r1 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection emptyCollection()>();

        $r2 = <org.apache.commons.collections4.CollectionUtils: java.util.Collection EMPTY_COLLECTION>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r2, r1);

        return;
    }

    public void emptyIfNull()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.Collection $r2, $r4;
        boolean $z0;
        java.util.ArrayList $r3;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r2 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection emptyIfNull(java.util.Collection)>(null);

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection emptyIfNull(java.util.Collection)>($r3);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($r3, $r4);

        return;
    }

    public void addAllForIterable()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.Collection r1, r5;
        java.lang.Iterable r3;
        java.util.Iterator r4, $r10, $r39;
        java.lang.Object $r6, $r7, $r8, $r9;
        org.easymock.IExpectationSetters $r11, $r17, $r22, $r27, $r32, $r36, $r40, $r44, $r49, $r53;
        java.lang.Long $r13, $r14, $r15, $r20, $r25, $r30, $r42, $r47;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        java.lang.Boolean $r16, $r18, $r21, $r23, $r26, $r28, $r31, $r33, $r35, $r37, $r43, $r45, $r48, $r50, $r52, $r54;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r6 = virtualinvoke r0.<org.apache.commons.collections4.CollectionUtilsTest: java.lang.Object createMock(java.lang.Class)>(class "Ljava/util/Collection;");

        r1 = (java.util.Collection) $r6;

        $r7 = virtualinvoke r0.<org.apache.commons.collections4.CollectionUtilsTest: java.lang.Object createMock(java.lang.Class)>(class "Ljava/lang/Iterable;");

        r3 = (java.lang.Iterable) $r7;

        $r8 = virtualinvoke r0.<org.apache.commons.collections4.CollectionUtilsTest: java.lang.Object createMock(java.lang.Class)>(class "Ljava/util/Iterator;");

        r4 = (java.util.Iterator) $r8;

        $r9 = virtualinvoke r0.<org.apache.commons.collections4.CollectionUtilsTest: java.lang.Object createMock(java.lang.Class)>(class "Ljava/util/Collection;");

        r5 = (java.util.Collection) $r9;

        $r10 = interfaceinvoke r3.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r11 = virtualinvoke r0.<org.apache.commons.collections4.CollectionUtilsTest: org.easymock.IExpectationSetters expect(java.lang.Object)>($r10);

        interfaceinvoke $r11.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r4);

        $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L);

        specialinvoke r0.<org.apache.commons.collections4.CollectionUtilsTest: void next(java.util.Iterator,java.lang.Object)>(r4, $r13);

        $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(2L);

        specialinvoke r0.<org.apache.commons.collections4.CollectionUtilsTest: void next(java.util.Iterator,java.lang.Object)>(r4, $r14);

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(3L);

        specialinvoke r0.<org.apache.commons.collections4.CollectionUtilsTest: void next(java.util.Iterator,java.lang.Object)>(r4, $r15);

        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        $r16 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r17 = virtualinvoke r0.<org.apache.commons.collections4.CollectionUtilsTest: org.easymock.IExpectationSetters expect(java.lang.Object)>($r16);

        $r18 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        interfaceinvoke $r17.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r18);

        $r20 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L);

        $z1 = interfaceinvoke r5.<java.util.Collection: boolean add(java.lang.Object)>($r20);

        $r21 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        $r22 = virtualinvoke r0.<org.apache.commons.collections4.CollectionUtilsTest: org.easymock.IExpectationSetters expect(java.lang.Object)>($r21);

        $r23 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r22.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r23);

        $r25 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(2L);

        $z2 = interfaceinvoke r5.<java.util.Collection: boolean add(java.lang.Object)>($r25);

        $r26 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        $r27 = virtualinvoke r0.<org.apache.commons.collections4.CollectionUtilsTest: org.easymock.IExpectationSetters expect(java.lang.Object)>($r26);

        $r28 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r27.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r28);

        $r30 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(3L);

        $z3 = interfaceinvoke r5.<java.util.Collection: boolean add(java.lang.Object)>($r30);

        $r31 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3);

        $r32 = virtualinvoke r0.<org.apache.commons.collections4.CollectionUtilsTest: org.easymock.IExpectationSetters expect(java.lang.Object)>($r31);

        $r33 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r32.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r33);

        $z4 = interfaceinvoke r5.<java.util.Collection: boolean addAll(java.util.Collection)>(r1);

        $r35 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z4);

        $r36 = virtualinvoke r0.<org.apache.commons.collections4.CollectionUtilsTest: org.easymock.IExpectationSetters expect(java.lang.Object)>($r35);

        $r37 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r36.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r37);

        $r39 = interfaceinvoke r3.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r40 = virtualinvoke r0.<org.apache.commons.collections4.CollectionUtilsTest: org.easymock.IExpectationSetters expect(java.lang.Object)>($r39);

        interfaceinvoke $r40.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r4);

        $r42 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L);

        specialinvoke r0.<org.apache.commons.collections4.CollectionUtilsTest: void next(java.util.Iterator,java.lang.Object)>(r4, $r42);

        $z5 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        $r43 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z5);

        $r44 = virtualinvoke r0.<org.apache.commons.collections4.CollectionUtilsTest: org.easymock.IExpectationSetters expect(java.lang.Object)>($r43);

        $r45 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        interfaceinvoke $r44.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r45);

        $r47 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L);

        $z6 = interfaceinvoke r5.<java.util.Collection: boolean add(java.lang.Object)>($r47);

        $r48 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z6);

        $r49 = virtualinvoke r0.<org.apache.commons.collections4.CollectionUtilsTest: org.easymock.IExpectationSetters expect(java.lang.Object)>($r48);

        $r50 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        interfaceinvoke $r49.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r50);

        $z7 = interfaceinvoke r5.<java.util.Collection: boolean addAll(java.util.Collection)>(r1);

        $r52 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z7);

        $r53 = virtualinvoke r0.<org.apache.commons.collections4.CollectionUtilsTest: org.easymock.IExpectationSetters expect(java.lang.Object)>($r52);

        $r54 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        interfaceinvoke $r53.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r54);

        virtualinvoke r0.<org.apache.commons.collections4.CollectionUtilsTest: void replay()>();

        $z8 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean addAll(java.util.Collection,java.lang.Iterable)>(r5, r3);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

        $z9 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean addAll(java.util.Collection,java.lang.Iterable)>(r5, r1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z9);

        $z10 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean addAll(java.util.Collection,java.lang.Iterable)>(r5, r3);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z10);

        $z11 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean addAll(java.util.Collection,java.lang.Iterable)>(r5, r1);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z11);

        virtualinvoke r0.<org.apache.commons.collections4.CollectionUtilsTest: void verify()>();

        return;
    }

    public void addAllForEnumeration()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.Enumeration r2;
        java.util.Hashtable $r3;
        java.lang.Integer $r4, $r5, $r9;
        java.util.List $r7, $r8;
        boolean $z1;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r3 = new java.util.Hashtable;

        specialinvoke $r3.<java.util.Hashtable: void <init>()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        virtualinvoke $r3.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r5);

        r2 = virtualinvoke $r3.<java.util.Hashtable: java.util.Enumeration keys()>();

        $r7 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean addAll(java.util.Collection,java.util.Enumeration)>($r7, r2);

        $r8 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $z1 = interfaceinvoke $r8.<java.util.List: boolean contains(java.lang.Object)>($r9);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        return;
    }

    public void addAllForElements()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.lang.Integer[] $r1;
        java.util.List $r2, $r4;
        java.lang.Integer $r3, $r5;
        boolean $z1;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r2 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $r1 = newarray (java.lang.Integer)[1];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r1[0] = $r3;

        staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean addAll(java.util.Collection,java.lang.Object[])>($r2, $r1);

        $r4 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $z1 = interfaceinvoke $r4.<java.util.List: boolean contains(java.lang.Object)>($r5);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        return;
    }

    public void getNegative()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.List $r1;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r1 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        staticinvoke <org.apache.commons.collections4.CollectionUtils: java.lang.Object get(java.lang.Object,int)>($r1, -3);

        return;
    }

    public void getPositiveOutOfBounds()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.List $r1;
        java.util.Iterator $r2;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r1 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        staticinvoke <org.apache.commons.collections4.CollectionUtils: java.lang.Object get(java.lang.Object,int)>($r2, 30);

        return;
    }

    public void get1()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        staticinvoke <org.apache.commons.collections4.CollectionUtils: java.lang.Object get(java.lang.Object,int)>(null, 0);

        return;
    }

    public void get()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.Map r1;
        java.lang.Integer $r2, $r5;
        java.util.List $r3, $r6, $r9;
        java.lang.Object $r4, $r8, $r12, $r13;
        java.util.Iterator $r7, $r11;
        java.util.Set $r10;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r3 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $r4 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.lang.Object get(java.lang.Object,int)>($r3, 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r2, $r4);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r6 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

        $r8 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.lang.Object get(java.lang.Object,int)>($r7, 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r5, $r8);

        $r9 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        r1 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Map getCardinalityMap(java.lang.Iterable)>($r9);

        $r10 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        $r11 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        $r13 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.lang.Object get(java.lang.Object,int)>(r1, 0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r12, $r13);

        return;
    }

    public void getIterator()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.Iterator r1;
        java.util.List $r2;
        java.lang.Integer $r3, $r5;
        java.lang.Object $r4, $r6;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r2 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        r1 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r4 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.lang.Object get(java.lang.Object,int)>(r1, 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r3, $r4);

        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r6 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.lang.Object get(java.lang.Object,int)>(r1, 6);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r5, $r6);

        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z1);

        return;
    }

    public void getEnumeration()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.Enumeration r2;
        java.util.Vector $r3;
        java.util.List $r4;
        java.lang.Integer $r5, $r7;
        java.lang.Object $r6, $r8;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r3 = new java.util.Vector;

        $r4 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        specialinvoke $r3.<java.util.Vector: void <init>(java.util.Collection)>($r4);

        r2 = virtualinvoke $r3.<java.util.Vector: java.util.Enumeration elements()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r6 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.lang.Object get(java.lang.Object,int)>(r2, 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r5, $r6);

        $z0 = interfaceinvoke r2.<java.util.Enumeration: boolean hasMoreElements()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r8 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.lang.Object get(java.lang.Object,int)>(r2, 6);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, $r8);

        $z1 = interfaceinvoke r2.<java.util.Enumeration: boolean hasMoreElements()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z1);

        return;
    }

    public void reverse()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.lang.Integer[] r1, $r5;
        java.lang.Object[] $r2, $r6;
        java.util.List $r3, $r4, $r7, $r8, $r9;
        int $i0;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r2 = newarray (java.lang.Object)[0];

        staticinvoke <org.apache.commons.collections4.CollectionUtils: void reverseArray(java.lang.Object[])>($r2);

        $r4 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $r3 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $r5 = newarray (java.lang.Integer)[$i0];

        $r6 = interfaceinvoke $r4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        r1 = (java.lang.Integer[]) $r6;

        staticinvoke <org.apache.commons.collections4.CollectionUtils: void reverseArray(java.lang.Object[])>(r1);

        $r7 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        staticinvoke <java.util.Collections: void reverse(java.util.List)>($r7);

        $r8 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $r9 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r8, $r9);

        return;
    }

    public void extractSingleton()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.ArrayList $r1;
        java.lang.Object $r2;
        java.lang.IllegalArgumentException $r3, $r4;
        java.lang.NullPointerException $r5;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

     label01:
        staticinvoke <org.apache.commons.collections4.CollectionUtils: java.lang.Object extractSingleton(java.util.Collection)>(null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expected NullPointerException from extractSingleton(null)");

     label02:
        goto label04;

     label03:
        $r5 := @caughtexception;

     label04:
        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

     label05:
        staticinvoke <org.apache.commons.collections4.CollectionUtils: java.lang.Object extractSingleton(java.util.Collection)>($r1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expected IllegalArgumentException from extractSingleton(empty)");

     label06:
        goto label08;

     label07:
        $r3 := @caughtexception;

     label08:
        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>("foo");

        $r2 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.lang.Object extractSingleton(java.util.Collection)>($r1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("foo", $r2);

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>("bar");

     label09:
        staticinvoke <org.apache.commons.collections4.CollectionUtils: java.lang.Object extractSingleton(java.util.Collection)>($r1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expected IllegalArgumentException from extractSingleton(size == 2)");

     label10:
        goto label12;

     label11:
        $r4 := @caughtexception;

     label12:
        return;

        catch java.lang.NullPointerException from label01 to label02 with label03;
        catch java.lang.IllegalArgumentException from label05 to label06 with label07;
        catch java.lang.IllegalArgumentException from label09 to label10 with label11;
    }

    private void next(java.util.Iterator, java.lang.Object)
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.Iterator r1;
        java.lang.Object r2, $r7;
        boolean $z0;
        java.lang.Boolean $r3, $r5;
        org.easymock.IExpectationSetters $r4, $r8;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        r1 := @parameter0: java.util.Iterator;

        r2 := @parameter1: java.lang.Object;

        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.CollectionUtilsTest: org.easymock.IExpectationSetters expect(java.lang.Object)>($r3);

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r4.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r5);

        $r7 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r8 = virtualinvoke r0.<org.apache.commons.collections4.CollectionUtilsTest: org.easymock.IExpectationSetters expect(java.lang.Object)>($r7);

        interfaceinvoke $r8.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r2);

        return;
    }

    public void collateException1()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.List $r1;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r1 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.List collate(java.lang.Iterable,java.lang.Iterable)>($r1, null);

        return;
    }

    public void collateException2()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.Collection $r1;
        java.util.List $r2;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r2 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $r1 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionC>;

        staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.List collate(java.lang.Iterable,java.lang.Iterable,java.util.Comparator)>($r2, $r1, null);

        return;
    }

    public void testCollate()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.Comparator r2, $r15;
        java.util.Collection $r3, $r4, $r5, $r8, $r9, $r10, $r11, $r13, $r14, $r16, $r17, $r18, $r20, $r22, $r23, $r24, $r25;
        int $i0, $i2;
        long $l1, $l3;
        java.util.List $r6, $r7, $r19, $r21, r26, r27, r28, r29, r30, r31, r32;
        java.util.ArrayList $r12;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r4 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection emptyCollection>;

        $r3 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection emptyCollection>;

        r26 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.List collate(java.lang.Iterable,java.lang.Iterable)>($r4, $r3);

        $i0 = interfaceinvoke r26.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Merge empty with empty", 0L, $l1);

        $r6 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $r5 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection emptyCollection>;

        r27 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.List collate(java.lang.Iterable,java.lang.Iterable)>($r6, $r5);

        $r7 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Merge empty with non-empty", $r7, r27);

        $r9 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionD>;

        $r8 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionE>;

        r28 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.List collate(java.lang.Iterable,java.lang.Iterable)>($r9, $r8);

        $r11 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionE>;

        $r10 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionD>;

        r29 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.List collate(java.lang.Iterable,java.lang.Iterable)>($r11, $r10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Merge two lists 1", r28, r29);

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        $r13 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionD>;

        interfaceinvoke $r12.<java.util.List: boolean addAll(java.util.Collection)>($r13);

        $r14 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionE>;

        interfaceinvoke $r12.<java.util.List: boolean addAll(java.util.Collection)>($r14);

        staticinvoke <java.util.Collections: void sort(java.util.List)>($r12);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Merge two lists 2", $r12, r29);

        $r15 = staticinvoke <org.apache.commons.collections4.ComparatorUtils: java.util.Comparator naturalComparator()>();

        r2 = staticinvoke <org.apache.commons.collections4.ComparatorUtils: java.util.Comparator reversedComparator(java.util.Comparator)>($r15);

        $r17 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection emptyCollection>;

        $r16 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection emptyCollection>;

        r30 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.List collate(java.lang.Iterable,java.lang.Iterable,java.util.Comparator)>($r17, $r16, r2);

        $i2 = interfaceinvoke r30.<java.util.List: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Comparator Merge empty with empty", 0L, $l3);

        $r18 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionD>;

        $r19 = (java.util.List) $r18;

        staticinvoke <java.util.Collections: void reverse(java.util.List)>($r19);

        $r20 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionE>;

        $r21 = (java.util.List) $r20;

        staticinvoke <java.util.Collections: void reverse(java.util.List)>($r21);

        staticinvoke <java.util.Collections: void reverse(java.util.List)>($r12);

        $r23 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionD>;

        $r22 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionE>;

        r31 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.List collate(java.lang.Iterable,java.lang.Iterable,java.util.Comparator)>($r23, $r22, r2);

        $r25 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionE>;

        $r24 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionD>;

        r32 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.List collate(java.lang.Iterable,java.lang.Iterable,java.util.Comparator)>($r25, $r24, r2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Comparator Merge two lists 1", r31, r32);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Comparator Merge two lists 2", $r12, r32);

        return;
    }

    public void testCollateIgnoreDuplicates()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.List r1, r2;
        java.util.Collection $r5, $r6, $r7, $r8, $r10, $r11;
        java.util.HashSet $r9;
        java.util.ArrayList $r12;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r6 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionD>;

        $r5 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionE>;

        r1 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.List collate(java.lang.Iterable,java.lang.Iterable,boolean)>($r6, $r5, 0);

        $r8 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionE>;

        $r7 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionD>;

        r2 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.List collate(java.lang.Iterable,java.lang.Iterable,boolean)>($r8, $r7, 0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Merge two lists 1 - ignore duplicates", r1, r2);

        $r9 = new java.util.HashSet;

        specialinvoke $r9.<java.util.HashSet: void <init>()>();

        $r10 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionD>;

        interfaceinvoke $r9.<java.util.Set: boolean addAll(java.util.Collection)>($r10);

        $r11 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection collectionE>;

        interfaceinvoke $r9.<java.util.Set: boolean addAll(java.util.Collection)>($r11);

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>(java.util.Collection)>($r9);

        staticinvoke <java.util.Collections: void sort(java.util.List)>($r12);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Merge two lists 2 - ignore duplicates", $r12, r2);

        return;
    }

    public void testPermutationsWithNullCollection()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection permutations(java.util.Collection)>(null);

        return;
    }

    public void testPermutations()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.List r1, $r3;
        java.util.Collection r2;
        int i0, $i2, i4, i5;
        long $l1, $l3;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r3 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        r1 = interfaceinvoke $r3.<java.util.List: java.util.List subList(int,int)>(0, 5);

        r2 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection permutations(java.util.Collection)>(r1);

        i0 = interfaceinvoke r1.<java.util.List: int size()>();

        i4 = 1;

        i5 = 1;

     label1:
        if i5 > i0 goto label2;

        i4 = i4 * i5;

        i5 = i5 + 1;

        goto label1;

     label2:
        $l1 = (long) i4;

        $i2 = interfaceinvoke r2.<java.util.Collection: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, $l3);

        return;
    }

    public void testMatchesAll()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.List $r3, $r5, $r7;
        org.apache.commons.collections4.CollectionUtilsTest$8 $r4;
        org.apache.commons.collections4.CollectionUtilsTest$9 $r6;
        java.util.Collection $r8;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $z0 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean matchesAll(java.lang.Iterable,org.apache.commons.collections4.Predicate)>(null, null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        $r3 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $z1 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean matchesAll(java.lang.Iterable,org.apache.commons.collections4.Predicate)>($r3, null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z1);

        $r4 = new org.apache.commons.collections4.CollectionUtilsTest$8;

        specialinvoke $r4.<org.apache.commons.collections4.CollectionUtilsTest$8: void <init>(org.apache.commons.collections4.CollectionUtilsTest)>(r0);

        $r5 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $z2 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean matchesAll(java.lang.Iterable,org.apache.commons.collections4.Predicate)>($r5, $r4);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r6 = new org.apache.commons.collections4.CollectionUtilsTest$9;

        specialinvoke $r6.<org.apache.commons.collections4.CollectionUtilsTest$9: void <init>(org.apache.commons.collections4.CollectionUtilsTest)>(r0);

        $r7 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.List collectionA>;

        $z3 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean matchesAll(java.lang.Iterable,org.apache.commons.collections4.Predicate)>($r7, $r6);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z3);

        $z4 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean matchesAll(java.lang.Iterable,org.apache.commons.collections4.Predicate)>(null, $r6);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $r8 = r0.<org.apache.commons.collections4.CollectionUtilsTest: java.util.Collection emptyCollection>;

        $z5 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean matchesAll(java.lang.Iterable,org.apache.commons.collections4.Predicate)>($r8, $r6);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        return;
    }

    public void testRemoveAllWithEquator()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.Collection r3;
        java.util.ArrayList $r4, $r5;
        org.apache.commons.collections4.CollectionUtilsTest$10 $r6;
        int $i0, $i2, $i4;
        long $l1, $l3, $l5;
        boolean $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        java.lang.Boolean $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18;
        org.apache.commons.collections4.functors.DefaultEquator $r19;
        java.lang.NullPointerException $r22, $r23;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>("AC");

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>("BB");

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>("CA");

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>("AA");

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>("CX");

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>("XZ");

        $r6 = new org.apache.commons.collections4.CollectionUtilsTest$10;

        specialinvoke $r6.<org.apache.commons.collections4.CollectionUtilsTest$10: void <init>(org.apache.commons.collections4.CollectionUtilsTest)>(r0);

        r3 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection removeAll(java.lang.Iterable,java.lang.Iterable,org.apache.commons.collections4.Equator)>($r4, $r5, $r6);

        $i0 = interfaceinvoke r3.<java.util.Collection: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l1);

        $z6 = interfaceinvoke r3.<java.util.Collection: boolean contains(java.lang.Object)>("AC");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        $z7 = interfaceinvoke r3.<java.util.Collection: boolean contains(java.lang.Object)>("BB");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

        $z8 = interfaceinvoke r3.<java.util.Collection: boolean contains(java.lang.Object)>("CA");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z8);

        $i2 = interfaceinvoke $r4.<java.util.List: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l3);

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z9 = interfaceinvoke $r4.<java.util.List: boolean contains(java.lang.Object)>("AC");

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, $r8);

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z10 = interfaceinvoke $r4.<java.util.List: boolean contains(java.lang.Object)>("BB");

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r9, $r10);

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z11 = interfaceinvoke $r4.<java.util.List: boolean contains(java.lang.Object)>("CA");

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z11);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r11, $r12);

        $i4 = interfaceinvoke $r5.<java.util.List: int size()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l5);

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z12 = interfaceinvoke $r5.<java.util.List: boolean contains(java.lang.Object)>("AA");

        $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z12);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r13, $r14);

        $r15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z13 = interfaceinvoke $r5.<java.util.List: boolean contains(java.lang.Object)>("CX");

        $r16 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z13);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r15, $r16);

        $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z14 = interfaceinvoke $r5.<java.util.List: boolean contains(java.lang.Object)>("XZ");

        $r18 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z14);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r17, $r18);

     label1:
        $r19 = staticinvoke <org.apache.commons.collections4.functors.DefaultEquator: org.apache.commons.collections4.functors.DefaultEquator defaultEquator()>();

        staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection removeAll(java.lang.Iterable,java.lang.Iterable,org.apache.commons.collections4.Equator)>(null, null, $r19);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting NullPointerException");

     label2:
        goto label4;

     label3:
        $r22 := @caughtexception;

     label4:
        staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection removeAll(java.lang.Iterable,java.lang.Iterable,org.apache.commons.collections4.Equator)>($r4, $r5, null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting NullPointerException");

     label5:
        goto label7;

     label6:
        $r23 := @caughtexception;

     label7:
        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
        catch java.lang.NullPointerException from label4 to label5 with label6;
    }

    public void testRetainAllWithEquator()
    {
        org.apache.commons.collections4.CollectionUtilsTest r0;
        java.util.Collection r3;
        java.util.ArrayList $r4, $r5;
        org.apache.commons.collections4.CollectionUtilsTest$11 $r6;
        int $i0, $i2, $i4;
        long $l1, $l3, $l5;
        boolean $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        java.lang.NullPointerException $r9, $r10;

        r0 := @this: org.apache.commons.collections4.CollectionUtilsTest;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>("AC");

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>("BB");

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>("CA");

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>("AA");

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>("CX");

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>("XZ");

        $r6 = new org.apache.commons.collections4.CollectionUtilsTest$11;

        specialinvoke $r6.<org.apache.commons.collections4.CollectionUtilsTest$11: void <init>(org.apache.commons.collections4.CollectionUtilsTest)>(r0);

        r3 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection retainAll(java.lang.Iterable,java.lang.Iterable,org.apache.commons.collections4.Equator)>($r4, $r5, $r6);

        $i0 = interfaceinvoke r3.<java.util.Collection: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l1);

        $z6 = interfaceinvoke r3.<java.util.Collection: boolean contains(java.lang.Object)>("CA");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        $z7 = interfaceinvoke r3.<java.util.Collection: boolean contains(java.lang.Object)>("BB");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z7);

        $z8 = interfaceinvoke r3.<java.util.Collection: boolean contains(java.lang.Object)>("AC");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z8);

        $i2 = interfaceinvoke $r4.<java.util.List: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l3);

        $z9 = interfaceinvoke $r4.<java.util.List: boolean contains(java.lang.Object)>("AC");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z9);

        $z10 = interfaceinvoke $r4.<java.util.List: boolean contains(java.lang.Object)>("BB");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z10);

        $z11 = interfaceinvoke $r4.<java.util.List: boolean contains(java.lang.Object)>("CA");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z11);

        $i4 = interfaceinvoke $r5.<java.util.List: int size()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l5);

        $z12 = interfaceinvoke $r5.<java.util.List: boolean contains(java.lang.Object)>("AA");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z12);

        $z13 = interfaceinvoke $r5.<java.util.List: boolean contains(java.lang.Object)>("CX");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z13);

        $z14 = interfaceinvoke $r5.<java.util.List: boolean contains(java.lang.Object)>("XZ");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z14);

     label1:
        staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection retainAll(java.lang.Iterable,java.lang.Iterable,org.apache.commons.collections4.Equator)>(null, null, null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting NullPointerException");

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

     label4:
        staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection retainAll(java.lang.Iterable,java.lang.Iterable,org.apache.commons.collections4.Equator)>($r4, $r5, null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting NullPointerException");

     label5:
        goto label7;

     label6:
        $r9 := @caughtexception;

     label7:
        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
        catch java.lang.NullPointerException from label4 to label5 with label6;
    }

    static void <clinit>()
    {
        org.apache.commons.collections4.CollectionUtilsTest$5 $r0;

        $r0 = new org.apache.commons.collections4.CollectionUtilsTest$5;

        specialinvoke $r0.<org.apache.commons.collections4.CollectionUtilsTest$5: void <init>()>();

        <org.apache.commons.collections4.CollectionUtilsTest: org.apache.commons.collections4.Predicate EQUALS_TWO> = $r0;

        return;
    }
}
