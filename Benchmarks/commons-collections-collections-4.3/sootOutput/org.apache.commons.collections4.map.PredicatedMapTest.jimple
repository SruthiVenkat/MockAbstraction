public class org.apache.commons.collections4.map.PredicatedMapTest extends org.apache.commons.collections4.map.AbstractIterableMapTest
{
    protected static final org.apache.commons.collections4.Predicate truePredicate;
    protected static final org.apache.commons.collections4.Predicate testPredicate;

    public void <init>(java.lang.String)
    {
        org.apache.commons.collections4.map.PredicatedMapTest r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.collections4.map.PredicatedMapTest;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.collections4.map.AbstractIterableMapTest: void <init>(java.lang.String)>(r1);

        return;
    }

    protected org.apache.commons.collections4.IterableMap decorateMap(java.util.Map, org.apache.commons.collections4.Predicate, org.apache.commons.collections4.Predicate)
    {
        org.apache.commons.collections4.map.PredicatedMapTest r0;
        java.util.Map r1;
        org.apache.commons.collections4.Predicate r2, r3;
        org.apache.commons.collections4.map.PredicatedMap $r4;

        r0 := @this: org.apache.commons.collections4.map.PredicatedMapTest;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: org.apache.commons.collections4.Predicate;

        r3 := @parameter2: org.apache.commons.collections4.Predicate;

        $r4 = staticinvoke <org.apache.commons.collections4.map.PredicatedMap: org.apache.commons.collections4.map.PredicatedMap predicatedMap(java.util.Map,org.apache.commons.collections4.Predicate,org.apache.commons.collections4.Predicate)>(r1, r2, r3);

        return $r4;
    }

    public org.apache.commons.collections4.IterableMap makeObject()
    {
        org.apache.commons.collections4.map.PredicatedMapTest r0;
        java.util.HashMap $r1;
        org.apache.commons.collections4.Predicate $r2, $r3;
        org.apache.commons.collections4.IterableMap $r4;

        r0 := @this: org.apache.commons.collections4.map.PredicatedMapTest;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        $r3 = <org.apache.commons.collections4.map.PredicatedMapTest: org.apache.commons.collections4.Predicate truePredicate>;

        $r2 = <org.apache.commons.collections4.map.PredicatedMapTest: org.apache.commons.collections4.Predicate truePredicate>;

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.map.PredicatedMapTest: org.apache.commons.collections4.IterableMap decorateMap(java.util.Map,org.apache.commons.collections4.Predicate,org.apache.commons.collections4.Predicate)>($r1, $r3, $r2);

        return $r4;
    }

    public org.apache.commons.collections4.IterableMap makeTestMap()
    {
        org.apache.commons.collections4.map.PredicatedMapTest r0;
        java.util.HashMap $r1;
        org.apache.commons.collections4.Predicate $r2, $r3;
        org.apache.commons.collections4.IterableMap $r4;

        r0 := @this: org.apache.commons.collections4.map.PredicatedMapTest;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        $r3 = <org.apache.commons.collections4.map.PredicatedMapTest: org.apache.commons.collections4.Predicate testPredicate>;

        $r2 = <org.apache.commons.collections4.map.PredicatedMapTest: org.apache.commons.collections4.Predicate testPredicate>;

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.map.PredicatedMapTest: org.apache.commons.collections4.IterableMap decorateMap(java.util.Map,org.apache.commons.collections4.Predicate,org.apache.commons.collections4.Predicate)>($r1, $r3, $r2);

        return $r4;
    }

    public void testEntrySet()
    {
        org.apache.commons.collections4.map.PredicatedMapTest r0;
        java.util.Set $r2, $r6;
        java.util.HashMap $r3;
        int $i0;
        org.apache.commons.collections4.IterableMap r7, r8;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.collections4.map.PredicatedMapTest;

        r7 = virtualinvoke r0.<org.apache.commons.collections4.map.PredicatedMapTest: org.apache.commons.collections4.IterableMap makeTestMap()>();

        $r2 = interfaceinvoke r7.<java.util.Map: java.util.Set entrySet()>();

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.collections4.map.PredicatedMapTest: void assertTrue(java.lang.String,boolean)>("returned entryset should not be null", $z0);

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r8 = virtualinvoke r0.<org.apache.commons.collections4.map.PredicatedMapTest: org.apache.commons.collections4.IterableMap decorateMap(java.util.Map,org.apache.commons.collections4.Predicate,org.apache.commons.collections4.Predicate)>($r3, null, null);

        interfaceinvoke r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("oneKey", "oneValue");

        $r6 = interfaceinvoke r8.<java.util.Map: java.util.Set entrySet()>();

        $i0 = interfaceinvoke $r6.<java.util.Set: int size()>();

        if $i0 != 1 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <org.apache.commons.collections4.map.PredicatedMapTest: void assertTrue(java.lang.String,boolean)>("returned entryset should contain one entry", $z1);

        virtualinvoke r0.<org.apache.commons.collections4.map.PredicatedMapTest: org.apache.commons.collections4.IterableMap decorateMap(java.util.Map,org.apache.commons.collections4.Predicate,org.apache.commons.collections4.Predicate)>(r8, null, null);

        return;
    }

    public void testPut()
    {
        org.apache.commons.collections4.map.PredicatedMapTest r0;
        org.apache.commons.collections4.IterableMap r1;
        java.lang.Integer $r2, $r4, $r6, $r7, $r12, $r17;
        boolean $z0, $z1, $z2, $z3;
        java.util.HashMap $r8;
        java.util.Set $r15, $r20;
        java.lang.Object $r16, $r21;
        java.lang.IllegalArgumentException $r23, $r24, $r25, $r26;
        java.util.Iterator r31, r34;
        java.util.Map$Entry r32, r35;

        r0 := @this: org.apache.commons.collections4.map.PredicatedMapTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.map.PredicatedMapTest: org.apache.commons.collections4.IterableMap makeTestMap()>();

     label01:
        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("Hi", $r2);

        staticinvoke <org.apache.commons.collections4.map.PredicatedMapTest: void fail(java.lang.String)>("Illegal value should raise IllegalArgument");

     label02:
        goto label04;

     label03:
        $r25 := @caughtexception;

     label04:
        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, "Hi");

        staticinvoke <org.apache.commons.collections4.map.PredicatedMapTest: void fail(java.lang.String)>("Illegal key should raise IllegalArgument");

     label05:
        goto label07;

     label06:
        $r26 := @caughtexception;

     label07:
        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $z0 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r6);

        if $z0 != 0 goto label08;

        $z2 = 1;

        goto label09;

     label08:
        $z2 = 0;

     label09:
        staticinvoke <org.apache.commons.collections4.map.PredicatedMapTest: void assertTrue(boolean)>($z2);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $z1 = interfaceinvoke r1.<java.util.Map: boolean containsValue(java.lang.Object)>($r7);

        if $z1 != 0 goto label10;

        $z3 = 1;

        goto label11;

     label10:
        $z3 = 0;

     label11:
        staticinvoke <org.apache.commons.collections4.map.PredicatedMapTest: void assertTrue(boolean)>($z3);

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("A", "a");

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("B", "b");

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("C", "c");

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("c", $r12);

     label12:
        interfaceinvoke r1.<java.util.Map: void putAll(java.util.Map)>($r8);

        staticinvoke <org.apache.commons.collections4.map.PredicatedMapTest: void fail(java.lang.String)>("Illegal value should raise IllegalArgument");

     label13:
        goto label15;

     label14:
        $r24 := @caughtexception;

     label15:
        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("E", "e");

        $r15 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r31 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();

     label16:
        $r16 = interfaceinvoke r31.<java.util.Iterator: java.lang.Object next()>();

        r32 = (java.util.Map$Entry) $r16;

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke r32.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>($r17);

        staticinvoke <org.apache.commons.collections4.map.PredicatedMapTest: void fail(java.lang.String)>("Illegal value should raise IllegalArgument");

     label17:
        goto label19;

     label18:
        $r23 := @caughtexception;

     label19:
        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("F", "f");

        $r20 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r34 = interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>();

        $r21 = interfaceinvoke r34.<java.util.Iterator: java.lang.Object next()>();

        r35 = (java.util.Map$Entry) $r21;

        interfaceinvoke r35.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>("x");

        return;

        catch java.lang.IllegalArgumentException from label01 to label02 with label03;
        catch java.lang.IllegalArgumentException from label04 to label05 with label06;
        catch java.lang.IllegalArgumentException from label12 to label13 with label14;
        catch java.lang.IllegalArgumentException from label16 to label17 with label18;
    }

    public java.lang.String getCompatibilityVersion()
    {
        org.apache.commons.collections4.map.PredicatedMapTest r0;

        r0 := @this: org.apache.commons.collections4.map.PredicatedMapTest;

        return "4";
    }

    public volatile java.util.Map makeObject()
    {
        org.apache.commons.collections4.map.PredicatedMapTest r0;
        org.apache.commons.collections4.IterableMap $r1;

        r0 := @this: org.apache.commons.collections4.map.PredicatedMapTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.map.PredicatedMapTest: org.apache.commons.collections4.IterableMap makeObject()>();

        return $r1;
    }

    public volatile java.lang.Object makeObject()
    {
        org.apache.commons.collections4.map.PredicatedMapTest r0;
        org.apache.commons.collections4.IterableMap $r1;

        r0 := @this: org.apache.commons.collections4.map.PredicatedMapTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.map.PredicatedMapTest: org.apache.commons.collections4.IterableMap makeObject()>();

        return $r1;
    }

    static void <clinit>()
    {
        org.apache.commons.collections4.Predicate $r0;
        org.apache.commons.collections4.map.PredicatedMapTest$1 $r1;

        $r0 = staticinvoke <org.apache.commons.collections4.functors.TruePredicate: org.apache.commons.collections4.Predicate truePredicate()>();

        <org.apache.commons.collections4.map.PredicatedMapTest: org.apache.commons.collections4.Predicate truePredicate> = $r0;

        $r1 = new org.apache.commons.collections4.map.PredicatedMapTest$1;

        specialinvoke $r1.<org.apache.commons.collections4.map.PredicatedMapTest$1: void <init>()>();

        <org.apache.commons.collections4.map.PredicatedMapTest: org.apache.commons.collections4.Predicate testPredicate> = $r1;

        return;
    }
}
