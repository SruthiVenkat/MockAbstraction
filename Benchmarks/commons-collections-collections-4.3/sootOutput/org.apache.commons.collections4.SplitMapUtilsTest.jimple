public class org.apache.commons.collections4.SplitMapUtilsTest extends java.lang.Object
{
    private java.util.Map backingMap;
    private org.apache.commons.collections4.splitmap.TransformedSplitMap transformedMap;
    private final org.apache.commons.collections4.Transformer stringToInt;

    public void <init>()
    {
        org.apache.commons.collections4.SplitMapUtilsTest r0;
        org.apache.commons.collections4.SplitMapUtilsTest$1 $r1;

        r0 := @this: org.apache.commons.collections4.SplitMapUtilsTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.commons.collections4.SplitMapUtilsTest$1;

        specialinvoke $r1.<org.apache.commons.collections4.SplitMapUtilsTest$1: void <init>(org.apache.commons.collections4.SplitMapUtilsTest)>(r0);

        r0.<org.apache.commons.collections4.SplitMapUtilsTest: org.apache.commons.collections4.Transformer stringToInt> = $r1;

        return;
    }

    public void setUp() throws java.lang.Exception
    {
        org.apache.commons.collections4.SplitMapUtilsTest r0;
        java.util.HashMap $r1;
        java.util.Map $r2;
        org.apache.commons.collections4.Transformer $r3, $r4;
        org.apache.commons.collections4.splitmap.TransformedSplitMap $r5, $r6;
        java.lang.String $r7, $r8;
        int i0;

        r0 := @this: org.apache.commons.collections4.SplitMapUtilsTest;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.commons.collections4.SplitMapUtilsTest: java.util.Map backingMap> = $r1;

        $r2 = r0.<org.apache.commons.collections4.SplitMapUtilsTest: java.util.Map backingMap>;

        $r3 = staticinvoke <org.apache.commons.collections4.functors.NOPTransformer: org.apache.commons.collections4.Transformer nopTransformer()>();

        $r4 = r0.<org.apache.commons.collections4.SplitMapUtilsTest: org.apache.commons.collections4.Transformer stringToInt>;

        $r5 = staticinvoke <org.apache.commons.collections4.splitmap.TransformedSplitMap: org.apache.commons.collections4.splitmap.TransformedSplitMap transformingMap(java.util.Map,org.apache.commons.collections4.Transformer,org.apache.commons.collections4.Transformer)>($r2, $r3, $r4);

        r0.<org.apache.commons.collections4.SplitMapUtilsTest: org.apache.commons.collections4.splitmap.TransformedSplitMap transformedMap> = $r5;

        i0 = 0;

     label1:
        if i0 >= 10 goto label2;

        $r6 = r0.<org.apache.commons.collections4.SplitMapUtilsTest: org.apache.commons.collections4.splitmap.TransformedSplitMap transformedMap>;

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        virtualinvoke $r6.<org.apache.commons.collections4.splitmap.TransformedSplitMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r8);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void testReadableMap()
    {
        org.apache.commons.collections4.SplitMapUtilsTest r0;
        org.apache.commons.collections4.IterableMap r1, r3, $r16;
        org.apache.commons.collections4.splitmap.TransformedSplitMap $r4, $r15;
        boolean $z0, $z1, $z2, $z3;
        org.apache.commons.collections4.SplitMapUtilsTest$2 $r5;
        long $l0, $l2, $l4, $l6, $l7, $l9, $l10, $l12, $l13, $l15;
        int $i1, $i3, $i5, $i8, $i11, $i14, i16, i17, i18;
        org.apache.commons.collections4.SplitMapUtilsTest$3 $r6;
        java.util.HashMap $r7;
        java.lang.Integer $r8, $r10, $r12, $r19, $r22, $r27;
        org.apache.commons.collections4.SplitMapUtilsTest$4 $r14;
        java.lang.String $r17, $r24, $r25, r29;
        java.lang.Object $r18, $r20, $r21, $r23, $r26;
        org.apache.commons.collections4.MapIterator r28;

        r0 := @this: org.apache.commons.collections4.SplitMapUtilsTest;

        $r4 = r0.<org.apache.commons.collections4.SplitMapUtilsTest: org.apache.commons.collections4.splitmap.TransformedSplitMap transformedMap>;

        r1 = staticinvoke <org.apache.commons.collections4.SplitMapUtils: org.apache.commons.collections4.IterableMap readableMap(org.apache.commons.collections4.Get)>($r4);

        i16 = 0;

     label1:
        if i16 >= 10 goto label2;

        $r24 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i16);

        $z3 = interfaceinvoke r1.<org.apache.commons.collections4.IterableMap: boolean containsValue(java.lang.Object)>($r24);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z3);

        $l13 = (long) i16;

        $r25 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i16);

        $r26 = interfaceinvoke r1.<org.apache.commons.collections4.IterableMap: java.lang.Object get(java.lang.Object)>($r25);

        $r27 = (java.lang.Integer) $r26;

        $i14 = virtualinvoke $r27.<java.lang.Integer: int intValue()>();

        $l15 = (long) $i14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l13, $l15);

        i16 = i16 + 1;

        goto label1;

     label2:
        r28 = interfaceinvoke r1.<org.apache.commons.collections4.IterableMap: org.apache.commons.collections4.MapIterator mapIterator()>();

     label3:
        $z0 = interfaceinvoke r28.<org.apache.commons.collections4.MapIterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r20 = interfaceinvoke r28.<org.apache.commons.collections4.MapIterator: java.lang.Object next()>();

        r29 = (java.lang.String) $r20;

        $r21 = interfaceinvoke r28.<org.apache.commons.collections4.MapIterator: java.lang.Object getKey()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r29, $r21);

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>(r29);

        $r23 = interfaceinvoke r28.<org.apache.commons.collections4.MapIterator: java.lang.Object getValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r22, $r23);

        goto label3;

     label4:
        $z1 = r1 instanceof org.apache.commons.collections4.Unmodifiable;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        i17 = interfaceinvoke r1.<org.apache.commons.collections4.IterableMap: int size()>();

        $r5 = new org.apache.commons.collections4.SplitMapUtilsTest$2;

        specialinvoke $r5.<org.apache.commons.collections4.SplitMapUtilsTest$2: void <init>(org.apache.commons.collections4.SplitMapUtilsTest,org.apache.commons.collections4.IterableMap)>(r0, r1);

        specialinvoke r0.<org.apache.commons.collections4.SplitMapUtilsTest: void attemptPutOperation(java.lang.Runnable)>($r5);

        $l0 = (long) i17;

        $i1 = interfaceinvoke r1.<org.apache.commons.collections4.IterableMap: int size()>();

        $l2 = (long) $i1;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l0, $l2);

        $r6 = new org.apache.commons.collections4.SplitMapUtilsTest$3;

        specialinvoke $r6.<org.apache.commons.collections4.SplitMapUtilsTest$3: void <init>(org.apache.commons.collections4.SplitMapUtilsTest,org.apache.commons.collections4.IterableMap)>(r0, r1);

        specialinvoke r0.<org.apache.commons.collections4.SplitMapUtilsTest: void attemptPutOperation(java.lang.Runnable)>($r6);

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(100);

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("foo", $r8);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(200);

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("bar", $r10);

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(300);

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("baz", $r12);

        $r14 = new org.apache.commons.collections4.SplitMapUtilsTest$4;

        specialinvoke $r14.<org.apache.commons.collections4.SplitMapUtilsTest$4: void <init>(org.apache.commons.collections4.SplitMapUtilsTest,org.apache.commons.collections4.IterableMap,java.util.HashMap)>(r0, r1, $r7);

        specialinvoke r0.<org.apache.commons.collections4.SplitMapUtilsTest: void attemptPutOperation(java.lang.Runnable)>($r14);

        $r15 = r0.<org.apache.commons.collections4.SplitMapUtilsTest: org.apache.commons.collections4.splitmap.TransformedSplitMap transformedMap>;

        r3 = staticinvoke <org.apache.commons.collections4.SplitMapUtils: org.apache.commons.collections4.IterableMap readableMap(org.apache.commons.collections4.Get)>($r15);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r3, r1);

        $i3 = virtualinvoke r3.<java.lang.Object: int hashCode()>();

        $l4 = (long) $i3;

        $i5 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        $l6 = (long) $i5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l4, $l6);

        i18 = 0;

     label5:
        if i18 >= 10 goto label6;

        $l7 = (long) i18;

        $r17 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i18);

        $r18 = interfaceinvoke r1.<org.apache.commons.collections4.IterableMap: java.lang.Object remove(java.lang.Object)>($r17);

        $r19 = (java.lang.Integer) $r18;

        $i8 = virtualinvoke $r19.<java.lang.Integer: int intValue()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l7, $l9);

        i17 = i17 + -1;

        $l10 = (long) i17;

        $i11 = interfaceinvoke r1.<org.apache.commons.collections4.IterableMap: int size()>();

        $l12 = (long) $i11;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l10, $l12);

        i18 = i18 + 1;

        goto label5;

     label6:
        $z2 = interfaceinvoke r1.<org.apache.commons.collections4.IterableMap: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r16 = staticinvoke <org.apache.commons.collections4.SplitMapUtils: org.apache.commons.collections4.IterableMap readableMap(org.apache.commons.collections4.Get)>(r1);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>(r1, $r16);

        return;
    }

    public void testAlreadyReadableMap()
    {
        org.apache.commons.collections4.SplitMapUtilsTest r0;
        org.apache.commons.collections4.map.HashedMap $r2;
        org.apache.commons.collections4.IterableMap $r3;

        r0 := @this: org.apache.commons.collections4.SplitMapUtilsTest;

        $r2 = new org.apache.commons.collections4.map.HashedMap;

        specialinvoke $r2.<org.apache.commons.collections4.map.HashedMap: void <init>()>();

        $r3 = staticinvoke <org.apache.commons.collections4.SplitMapUtils: org.apache.commons.collections4.IterableMap readableMap(org.apache.commons.collections4.Get)>($r2);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($r2, $r3);

        return;
    }

    public void testWritableMap()
    {
        org.apache.commons.collections4.SplitMapUtilsTest r0;
        java.util.Map r1, r2, $r15, $r16, $r18, $r23, $r24, $r26;
        org.apache.commons.collections4.splitmap.TransformedSplitMap $r4, $r14;
        org.apache.commons.collections4.SplitMapUtilsTest$5 $r5;
        org.apache.commons.collections4.SplitMapUtilsTest$6 $r6;
        org.apache.commons.collections4.SplitMapUtilsTest$7 $r7;
        org.apache.commons.collections4.SplitMapUtilsTest$8 $r8;
        org.apache.commons.collections4.SplitMapUtilsTest$9 $r9;
        org.apache.commons.collections4.SplitMapUtilsTest$10 $r10;
        org.apache.commons.collections4.SplitMapUtilsTest$11 $r11;
        org.apache.commons.collections4.SplitMapUtilsTest$12 $r12;
        org.apache.commons.collections4.SplitMapUtilsTest$13 $r13;
        int $i0, $i2, $i5, $i7, $i8, $i10, i12, i13;
        long $l1, $l3, $l4, $l6, $l9, $l11;
        boolean $z0, $z1;
        java.util.HashMap $r19;
        org.apache.commons.collections4.Put $r25;

        r0 := @this: org.apache.commons.collections4.SplitMapUtilsTest;

        $r4 = r0.<org.apache.commons.collections4.SplitMapUtilsTest: org.apache.commons.collections4.splitmap.TransformedSplitMap transformedMap>;

        r1 = staticinvoke <org.apache.commons.collections4.SplitMapUtils: java.util.Map writableMap(org.apache.commons.collections4.Put)>($r4);

        $r5 = new org.apache.commons.collections4.SplitMapUtilsTest$5;

        specialinvoke $r5.<org.apache.commons.collections4.SplitMapUtilsTest$5: void <init>(org.apache.commons.collections4.SplitMapUtilsTest,java.util.Map)>(r0, r1);

        specialinvoke r0.<org.apache.commons.collections4.SplitMapUtilsTest: void attemptGetOperation(java.lang.Runnable)>($r5);

        $r6 = new org.apache.commons.collections4.SplitMapUtilsTest$6;

        specialinvoke $r6.<org.apache.commons.collections4.SplitMapUtilsTest$6: void <init>(org.apache.commons.collections4.SplitMapUtilsTest,java.util.Map)>(r0, r1);

        specialinvoke r0.<org.apache.commons.collections4.SplitMapUtilsTest: void attemptGetOperation(java.lang.Runnable)>($r6);

        $r7 = new org.apache.commons.collections4.SplitMapUtilsTest$7;

        specialinvoke $r7.<org.apache.commons.collections4.SplitMapUtilsTest$7: void <init>(org.apache.commons.collections4.SplitMapUtilsTest,java.util.Map)>(r0, r1);

        specialinvoke r0.<org.apache.commons.collections4.SplitMapUtilsTest: void attemptGetOperation(java.lang.Runnable)>($r7);

        $r8 = new org.apache.commons.collections4.SplitMapUtilsTest$8;

        specialinvoke $r8.<org.apache.commons.collections4.SplitMapUtilsTest$8: void <init>(org.apache.commons.collections4.SplitMapUtilsTest,java.util.Map)>(r0, r1);

        specialinvoke r0.<org.apache.commons.collections4.SplitMapUtilsTest: void attemptGetOperation(java.lang.Runnable)>($r8);

        $r9 = new org.apache.commons.collections4.SplitMapUtilsTest$9;

        specialinvoke $r9.<org.apache.commons.collections4.SplitMapUtilsTest$9: void <init>(org.apache.commons.collections4.SplitMapUtilsTest,java.util.Map)>(r0, r1);

        specialinvoke r0.<org.apache.commons.collections4.SplitMapUtilsTest: void attemptGetOperation(java.lang.Runnable)>($r9);

        $r10 = new org.apache.commons.collections4.SplitMapUtilsTest$10;

        specialinvoke $r10.<org.apache.commons.collections4.SplitMapUtilsTest$10: void <init>(org.apache.commons.collections4.SplitMapUtilsTest,java.util.Map)>(r0, r1);

        specialinvoke r0.<org.apache.commons.collections4.SplitMapUtilsTest: void attemptGetOperation(java.lang.Runnable)>($r10);

        $r11 = new org.apache.commons.collections4.SplitMapUtilsTest$11;

        specialinvoke $r11.<org.apache.commons.collections4.SplitMapUtilsTest$11: void <init>(org.apache.commons.collections4.SplitMapUtilsTest,java.util.Map)>(r0, r1);

        specialinvoke r0.<org.apache.commons.collections4.SplitMapUtilsTest: void attemptGetOperation(java.lang.Runnable)>($r11);

        $r12 = new org.apache.commons.collections4.SplitMapUtilsTest$12;

        specialinvoke $r12.<org.apache.commons.collections4.SplitMapUtilsTest$12: void <init>(org.apache.commons.collections4.SplitMapUtilsTest,java.util.Map)>(r0, r1);

        specialinvoke r0.<org.apache.commons.collections4.SplitMapUtilsTest: void attemptGetOperation(java.lang.Runnable)>($r12);

        $r13 = new org.apache.commons.collections4.SplitMapUtilsTest$13;

        specialinvoke $r13.<org.apache.commons.collections4.SplitMapUtilsTest$13: void <init>(org.apache.commons.collections4.SplitMapUtilsTest,java.util.Map)>(r0, r1);

        specialinvoke r0.<org.apache.commons.collections4.SplitMapUtilsTest: void attemptGetOperation(java.lang.Runnable)>($r13);

        $r14 = r0.<org.apache.commons.collections4.SplitMapUtilsTest: org.apache.commons.collections4.splitmap.TransformedSplitMap transformedMap>;

        r2 = staticinvoke <org.apache.commons.collections4.SplitMapUtils: java.util.Map writableMap(org.apache.commons.collections4.Put)>($r14);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r2, r1);

        $i0 = interfaceinvoke r2.<java.util.Map: int hashCode()>();

        $l1 = (long) $i0;

        $i2 = interfaceinvoke r1.<java.util.Map: int hashCode()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, $l3);

        $r15 = r0.<org.apache.commons.collections4.SplitMapUtilsTest: java.util.Map backingMap>;

        i12 = interfaceinvoke $r15.<java.util.Map: int size()>();

        $r16 = r0.<org.apache.commons.collections4.SplitMapUtilsTest: java.util.Map backingMap>;

        $z0 = interfaceinvoke $r16.<java.util.Map: boolean containsKey(java.lang.Object)>("foo");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("new", "66");

        i13 = i12 + 1;

        $l4 = (long) i13;

        $r18 = r0.<org.apache.commons.collections4.SplitMapUtilsTest: java.util.Map backingMap>;

        $i5 = interfaceinvoke $r18.<java.util.Map: int size()>();

        $l6 = (long) $i5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l4, $l6);

        $r19 = new java.util.HashMap;

        specialinvoke $r19.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("foo", "77");

        interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("bar", "88");

        interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("baz", "99");

        interfaceinvoke r1.<java.util.Map: void putAll(java.util.Map)>($r19);

        $i7 = interfaceinvoke $r19.<java.util.Map: int size()>();

        $i8 = i13 + $i7;

        $l9 = (long) $i8;

        $r23 = r0.<org.apache.commons.collections4.SplitMapUtilsTest: java.util.Map backingMap>;

        $i10 = interfaceinvoke $r23.<java.util.Map: int size()>();

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l9, $l11);

        interfaceinvoke r1.<java.util.Map: void clear()>();

        $r24 = r0.<org.apache.commons.collections4.SplitMapUtilsTest: java.util.Map backingMap>;

        $z1 = interfaceinvoke $r24.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r25 = (org.apache.commons.collections4.Put) r1;

        $r26 = staticinvoke <org.apache.commons.collections4.SplitMapUtils: java.util.Map writableMap(org.apache.commons.collections4.Put)>($r25);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>(r1, $r26);

        return;
    }

    public void testAlreadyWritableMap()
    {
        org.apache.commons.collections4.SplitMapUtilsTest r0;
        org.apache.commons.collections4.map.HashedMap $r2;
        java.util.Map $r3;

        r0 := @this: org.apache.commons.collections4.SplitMapUtilsTest;

        $r2 = new org.apache.commons.collections4.map.HashedMap;

        specialinvoke $r2.<org.apache.commons.collections4.map.HashedMap: void <init>()>();

        $r3 = staticinvoke <org.apache.commons.collections4.SplitMapUtils: java.util.Map writableMap(org.apache.commons.collections4.Put)>($r2);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($r2, $r3);

        return;
    }

    private void attemptGetOperation(java.lang.Runnable)
    {
        org.apache.commons.collections4.SplitMapUtilsTest r0;
        java.lang.Runnable r1;

        r0 := @this: org.apache.commons.collections4.SplitMapUtilsTest;

        r1 := @parameter0: java.lang.Runnable;

        specialinvoke r0.<org.apache.commons.collections4.SplitMapUtilsTest: void attemptMapOperation(java.lang.String,java.lang.Runnable)>("Put exposed as writable Map must not allow Get operations", r1);

        return;
    }

    private void attemptPutOperation(java.lang.Runnable)
    {
        org.apache.commons.collections4.SplitMapUtilsTest r0;
        java.lang.Runnable r1;

        r0 := @this: org.apache.commons.collections4.SplitMapUtilsTest;

        r1 := @parameter0: java.lang.Runnable;

        specialinvoke r0.<org.apache.commons.collections4.SplitMapUtilsTest: void attemptMapOperation(java.lang.String,java.lang.Runnable)>("Get exposed as writable Map must not allow Put operations", r1);

        return;
    }

    private void attemptMapOperation(java.lang.String, java.lang.Runnable)
    {
        org.apache.commons.collections4.SplitMapUtilsTest r0;
        java.lang.String r1;
        java.lang.Runnable r2;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: org.apache.commons.collections4.SplitMapUtilsTest;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Runnable;

     label1:
        interfaceinvoke r2.<java.lang.Runnable: void run()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
    }
}
