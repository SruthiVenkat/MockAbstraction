public abstract class org.apache.commons.collections4.iterators.AbstractListIteratorTest extends org.apache.commons.collections4.iterators.AbstractIteratorTest
{

    public void <init>(java.lang.String)
    {
        org.apache.commons.collections4.iterators.AbstractListIteratorTest r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.collections4.iterators.AbstractListIteratorTest;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.collections4.iterators.AbstractIteratorTest: void <init>(java.lang.String)>(r1);

        return;
    }

    public abstract java.util.ListIterator makeEmptyIterator();

    public abstract java.util.ListIterator makeObject();

    public boolean supportsAdd()
    {
        org.apache.commons.collections4.iterators.AbstractListIteratorTest r0;

        r0 := @this: org.apache.commons.collections4.iterators.AbstractListIteratorTest;

        return 1;
    }

    public boolean supportsSet()
    {
        org.apache.commons.collections4.iterators.AbstractListIteratorTest r0;

        r0 := @this: org.apache.commons.collections4.iterators.AbstractListIteratorTest;

        return 1;
    }

    public java.lang.Object addSetValue()
    {
        org.apache.commons.collections4.iterators.AbstractListIteratorTest r0;

        r0 := @this: org.apache.commons.collections4.iterators.AbstractListIteratorTest;

        return null;
    }

    public void testEmptyListIteratorIsIndeedEmpty()
    {
        org.apache.commons.collections4.iterators.AbstractListIteratorTest r0;
        java.util.ListIterator r1;
        boolean $z0, $z1, $z2;
        int $i0, $i1;
        java.util.NoSuchElementException $r4, $r5;

        r0 := @this: org.apache.commons.collections4.iterators.AbstractListIteratorTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractListIteratorTest: boolean supportsEmptyIterator()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractListIteratorTest: java.util.ListIterator makeEmptyIterator()>();

        $z1 = interfaceinvoke r1.<java.util.ListIterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractListIteratorTest: void assertEquals(boolean,boolean)>(0, $z1);

        $i0 = interfaceinvoke r1.<java.util.ListIterator: int nextIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractListIteratorTest: void assertEquals(int,int)>(0, $i0);

        $z2 = interfaceinvoke r1.<java.util.ListIterator: boolean hasPrevious()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractListIteratorTest: void assertEquals(boolean,boolean)>(0, $z2);

        $i1 = interfaceinvoke r1.<java.util.ListIterator: int previousIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractListIteratorTest: void assertEquals(int,int)>(-1, $i1);

     label2:
        interfaceinvoke r1.<java.util.ListIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractListIteratorTest: void fail(java.lang.String)>("NoSuchElementException must be thrown from empty ListIterator");

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

     label5:
        interfaceinvoke r1.<java.util.ListIterator: java.lang.Object previous()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractListIteratorTest: void fail(java.lang.String)>("NoSuchElementException must be thrown from empty ListIterator");

     label6:
        goto label8;

     label7:
        $r4 := @caughtexception;

     label8:
        return;

        catch java.util.NoSuchElementException from label2 to label3 with label4;
        catch java.util.NoSuchElementException from label5 to label6 with label7;
    }

    public void testWalkForwardAndBack()
    {
        org.apache.commons.collections4.iterators.AbstractListIteratorTest r0;
        java.util.ListIterator r2;
        java.lang.Object r3, $r7, $r8;
        java.util.ArrayList $r4;
        boolean $z0, $z1, $z2, $z3, $z4;
        int $i0, $i1, $i2, $i3, i4;
        java.util.NoSuchElementException $r9, $r10;

        r0 := @this: org.apache.commons.collections4.iterators.AbstractListIteratorTest;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r2 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractListIteratorTest: java.util.ListIterator makeObject()>();

     label01:
        $z0 = interfaceinvoke r2.<java.util.ListIterator: boolean hasNext()>();

        if $z0 == 0 goto label02;

        $r8 = interfaceinvoke r2.<java.util.ListIterator: java.lang.Object next()>();

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

        goto label01;

     label02:
        $z1 = interfaceinvoke r2.<java.util.ListIterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractListIteratorTest: void assertEquals(boolean,boolean)>(0, $z1);

        $z2 = interfaceinvoke r2.<java.util.ListIterator: boolean hasPrevious()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractListIteratorTest: void assertEquals(boolean,boolean)>(1, $z2);

     label03:
        interfaceinvoke r2.<java.util.ListIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractListIteratorTest: void fail(java.lang.String)>("NoSuchElementException must be thrown from next at end of ListIterator");

     label04:
        goto label06;

     label05:
        $r9 := @caughtexception;

     label06:
        $i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        i4 = $i0 - 1;

     label07:
        if i4 < 0 goto label08;

        $i1 = i4 + 1;

        $i2 = interfaceinvoke r2.<java.util.ListIterator: int nextIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractListIteratorTest: void assertEquals(int,int)>($i1, $i2);

        $i3 = interfaceinvoke r2.<java.util.ListIterator: int previousIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractListIteratorTest: void assertEquals(int,int)>(i4, $i3);

        r3 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        $r7 = interfaceinvoke r2.<java.util.ListIterator: java.lang.Object previous()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractListIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>(r3, $r7);

        i4 = i4 + -1;

        goto label07;

     label08:
        $z3 = interfaceinvoke r2.<java.util.ListIterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractListIteratorTest: void assertEquals(boolean,boolean)>(1, $z3);

        $z4 = interfaceinvoke r2.<java.util.ListIterator: boolean hasPrevious()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractListIteratorTest: void assertEquals(boolean,boolean)>(0, $z4);

     label09:
        interfaceinvoke r2.<java.util.ListIterator: java.lang.Object previous()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractListIteratorTest: void fail(java.lang.String)>("NoSuchElementException must be thrown from previous at start of ListIterator");

     label10:
        goto label12;

     label11:
        $r10 := @caughtexception;

     label12:
        return;

        catch java.util.NoSuchElementException from label03 to label04 with label05;
        catch java.util.NoSuchElementException from label09 to label10 with label11;
    }

    public void testAdd()
    {
        org.apache.commons.collections4.iterators.AbstractListIteratorTest r0;
        java.lang.Object r1, $r3, $r4, $r6;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r8, $r9, $r12;
        java.lang.Class $r10;
        java.lang.String $r11, $r13;
        java.lang.UnsupportedOperationException $r14;
        java.util.ListIterator r15, r16, r17, r18;

        r0 := @this: org.apache.commons.collections4.iterators.AbstractListIteratorTest;

        r15 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractListIteratorTest: java.util.ListIterator makeObject()>();

        r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractListIteratorTest: java.lang.Object addSetValue()>();

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractListIteratorTest: boolean supportsAdd()>();

        if $z0 != 0 goto label5;

     label1:
        interfaceinvoke r15.<java.util.ListIterator: void add(java.lang.Object)>(r1);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UnsupportedOperationException must be thrown from add of ");

        $r10 = virtualinvoke r15.<java.lang.Object: java.lang.Class getClass()>();

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getSimpleName()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractListIteratorTest: void fail(java.lang.String)>($r13);

     label2:
        goto label4;

     label3:
        $r14 := @caughtexception;

     label4:
        return;

     label5:
        r16 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractListIteratorTest: java.util.ListIterator makeObject()>();

        interfaceinvoke r16.<java.util.ListIterator: void add(java.lang.Object)>(r1);

        $r3 = interfaceinvoke r16.<java.util.ListIterator: java.lang.Object previous()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractListIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>(r1, $r3);

        r17 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractListIteratorTest: java.util.ListIterator makeObject()>();

        interfaceinvoke r17.<java.util.ListIterator: void add(java.lang.Object)>(r1);

        $r4 = interfaceinvoke r17.<java.util.ListIterator: java.lang.Object next()>();

        if r1 == $r4 goto label6;

        $z1 = 1;

        goto label7;

     label6:
        $z1 = 0;

     label7:
        staticinvoke <org.apache.commons.collections4.iterators.AbstractListIteratorTest: void assertTrue(boolean)>($z1);

        r18 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractListIteratorTest: java.util.ListIterator makeObject()>();

     label8:
        $z2 = interfaceinvoke r18.<java.util.ListIterator: boolean hasNext()>();

        if $z2 == 0 goto label9;

        interfaceinvoke r18.<java.util.ListIterator: java.lang.Object next()>();

        interfaceinvoke r18.<java.util.ListIterator: void add(java.lang.Object)>(r1);

        $r6 = interfaceinvoke r18.<java.util.ListIterator: java.lang.Object previous()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractListIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>(r1, $r6);

        interfaceinvoke r18.<java.util.ListIterator: java.lang.Object next()>();

        goto label8;

     label9:
        return;

        catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
    }

    public void testSet()
    {
        org.apache.commons.collections4.iterators.AbstractListIteratorTest r0;
        java.util.ListIterator r1;
        boolean $z0;
        java.lang.Object $r2, $r4, $r5, $r6;
        java.lang.StringBuilder $r7, $r8, $r11;
        java.lang.Class $r9;
        java.lang.String $r10, $r12;
        java.lang.IllegalStateException $r13;
        java.lang.UnsupportedOperationException $r14;

        r0 := @this: org.apache.commons.collections4.iterators.AbstractListIteratorTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractListIteratorTest: java.util.ListIterator makeObject()>();

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractListIteratorTest: boolean supportsSet()>();

        if $z0 != 0 goto label5;

     label1:
        $r6 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractListIteratorTest: java.lang.Object addSetValue()>();

        interfaceinvoke r1.<java.util.ListIterator: void set(java.lang.Object)>($r6);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UnsupportedOperationException must be thrown from set in ");

        $r9 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.String getSimpleName()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractListIteratorTest: void fail(java.lang.String)>($r12);

     label2:
        goto label4;

     label3:
        $r14 := @caughtexception;

     label4:
        return;

     label5:
        $r2 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractListIteratorTest: java.lang.Object addSetValue()>();

        interfaceinvoke r1.<java.util.ListIterator: void set(java.lang.Object)>($r2);

        staticinvoke <org.apache.commons.collections4.iterators.AbstractListIteratorTest: void fail()>();

     label6:
        goto label8;

     label7:
        $r13 := @caughtexception;

     label8:
        interfaceinvoke r1.<java.util.ListIterator: java.lang.Object next()>();

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractListIteratorTest: java.lang.Object addSetValue()>();

        interfaceinvoke r1.<java.util.ListIterator: void set(java.lang.Object)>($r4);

        $r5 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractListIteratorTest: java.lang.Object addSetValue()>();

        interfaceinvoke r1.<java.util.ListIterator: void set(java.lang.Object)>($r5);

        return;

        catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
        catch java.lang.IllegalStateException from label5 to label6 with label7;
    }

    public void testRemoveThenSet()
    {
        org.apache.commons.collections4.iterators.AbstractListIteratorTest r0;
        java.util.ListIterator r1;
        boolean $z0, $z1;
        java.lang.Object $r4;
        java.lang.IllegalStateException $r5;

        r0 := @this: org.apache.commons.collections4.iterators.AbstractListIteratorTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractListIteratorTest: java.util.ListIterator makeObject()>();

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractListIteratorTest: boolean supportsRemove()>();

        if $z0 == 0 goto label4;

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractListIteratorTest: boolean supportsSet()>();

        if $z1 == 0 goto label4;

        interfaceinvoke r1.<java.util.ListIterator: java.lang.Object next()>();

        interfaceinvoke r1.<java.util.ListIterator: void remove()>();

     label1:
        $r4 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractListIteratorTest: java.lang.Object addSetValue()>();

        interfaceinvoke r1.<java.util.ListIterator: void set(java.lang.Object)>($r4);

        staticinvoke <org.apache.commons.collections4.iterators.AbstractListIteratorTest: void fail(java.lang.String)>("IllegalStateException must be thrown from set after remove");

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

     label4:
        return;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    public void testAddThenSet()
    {
        org.apache.commons.collections4.iterators.AbstractListIteratorTest r0;
        java.util.ListIterator r1;
        boolean $z0, $z1;
        java.lang.Object $r4, $r5;
        java.lang.IllegalStateException $r6;

        r0 := @this: org.apache.commons.collections4.iterators.AbstractListIteratorTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractListIteratorTest: java.util.ListIterator makeObject()>();

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractListIteratorTest: boolean supportsAdd()>();

        if $z0 == 0 goto label4;

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractListIteratorTest: boolean supportsSet()>();

        if $z1 == 0 goto label4;

        interfaceinvoke r1.<java.util.ListIterator: java.lang.Object next()>();

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractListIteratorTest: java.lang.Object addSetValue()>();

        interfaceinvoke r1.<java.util.ListIterator: void add(java.lang.Object)>($r4);

     label1:
        $r5 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractListIteratorTest: java.lang.Object addSetValue()>();

        interfaceinvoke r1.<java.util.ListIterator: void set(java.lang.Object)>($r5);

        staticinvoke <org.apache.commons.collections4.iterators.AbstractListIteratorTest: void fail(java.lang.String)>("IllegalStateException must be thrown from set after add");

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        return;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    public void testAddThenRemove()
    {
        org.apache.commons.collections4.iterators.AbstractListIteratorTest r0;
        java.util.ListIterator r1;
        boolean $z0, $z1;
        java.lang.Object $r4;
        java.lang.IllegalStateException $r5;

        r0 := @this: org.apache.commons.collections4.iterators.AbstractListIteratorTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractListIteratorTest: java.util.ListIterator makeObject()>();

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractListIteratorTest: boolean supportsAdd()>();

        if $z0 == 0 goto label4;

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractListIteratorTest: boolean supportsRemove()>();

        if $z1 == 0 goto label4;

        interfaceinvoke r1.<java.util.ListIterator: java.lang.Object next()>();

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractListIteratorTest: java.lang.Object addSetValue()>();

        interfaceinvoke r1.<java.util.ListIterator: void add(java.lang.Object)>($r4);

     label1:
        interfaceinvoke r1.<java.util.ListIterator: void remove()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractListIteratorTest: void fail(java.lang.String)>("IllegalStateException must be thrown from remove after add");

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

     label4:
        return;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    public volatile java.util.Iterator makeObject()
    {
        org.apache.commons.collections4.iterators.AbstractListIteratorTest r0;
        java.util.ListIterator $r1;

        r0 := @this: org.apache.commons.collections4.iterators.AbstractListIteratorTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractListIteratorTest: java.util.ListIterator makeObject()>();

        return $r1;
    }

    public volatile java.util.Iterator makeEmptyIterator()
    {
        org.apache.commons.collections4.iterators.AbstractListIteratorTest r0;
        java.util.ListIterator $r1;

        r0 := @this: org.apache.commons.collections4.iterators.AbstractListIteratorTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractListIteratorTest: java.util.ListIterator makeEmptyIterator()>();

        return $r1;
    }

    public volatile java.lang.Object makeObject()
    {
        org.apache.commons.collections4.iterators.AbstractListIteratorTest r0;
        java.util.ListIterator $r1;

        r0 := @this: org.apache.commons.collections4.iterators.AbstractListIteratorTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractListIteratorTest: java.util.ListIterator makeObject()>();

        return $r1;
    }
}
