public class org.apache.commons.collections4.sequence.SequencesComparatorTest extends java.lang.Object
{
    private java.util.List before;
    private java.util.List after;
    private int[] length;

    public void <init>()
    {
        org.apache.commons.collections4.sequence.SequencesComparatorTest r0;

        r0 := @this: org.apache.commons.collections4.sequence.SequencesComparatorTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testLength()
    {
        org.apache.commons.collections4.sequence.SequencesComparatorTest r0;
        java.util.List $r2, $r4, $r7, $r8, $r11;
        int $i0, $i1, $i3, i5;
        org.apache.commons.collections4.sequence.SequencesComparator $r3;
        java.lang.Object $r5, $r9;
        java.lang.String $r6, $r10;
        int[] $r12;
        long $l2, $l4;
        org.apache.commons.collections4.sequence.EditScript $r13;

        r0 := @this: org.apache.commons.collections4.sequence.SequencesComparatorTest;

        i5 = 0;

     label1:
        $r2 = r0.<org.apache.commons.collections4.sequence.SequencesComparatorTest: java.util.List before>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i5 >= $i0 goto label2;

        $r3 = new org.apache.commons.collections4.sequence.SequencesComparator;

        $r4 = r0.<org.apache.commons.collections4.sequence.SequencesComparatorTest: java.util.List before>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i5);

        $r6 = (java.lang.String) $r5;

        $r7 = specialinvoke r0.<org.apache.commons.collections4.sequence.SequencesComparatorTest: java.util.List sequence(java.lang.String)>($r6);

        $r8 = r0.<org.apache.commons.collections4.sequence.SequencesComparatorTest: java.util.List after>;

        $r9 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(i5);

        $r10 = (java.lang.String) $r9;

        $r11 = specialinvoke r0.<org.apache.commons.collections4.sequence.SequencesComparatorTest: java.util.List sequence(java.lang.String)>($r10);

        specialinvoke $r3.<org.apache.commons.collections4.sequence.SequencesComparator: void <init>(java.util.List,java.util.List)>($r7, $r11);

        $r12 = r0.<org.apache.commons.collections4.sequence.SequencesComparatorTest: int[] length>;

        $i1 = $r12[i5];

        $l2 = (long) $i1;

        $r13 = virtualinvoke $r3.<org.apache.commons.collections4.sequence.SequencesComparator: org.apache.commons.collections4.sequence.EditScript getScript()>();

        $i3 = virtualinvoke $r13.<org.apache.commons.collections4.sequence.EditScript: int getModifications()>();

        $l4 = (long) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l2, $l4);

        i5 = i5 + 1;

        goto label1;

     label2:
        return;
    }

    public void testExecution()
    {
        org.apache.commons.collections4.sequence.SequencesComparatorTest r0;
        org.apache.commons.collections4.sequence.SequencesComparatorTest$ExecutionVisitor $r2;
        java.util.List $r3, $r4, $r7, $r9, $r12, $r13, $r16, $r18;
        int $i0, i1;
        java.lang.Object $r5, $r10, $r14, $r19;
        java.lang.String $r6, $r11, $r15, $r20;
        org.apache.commons.collections4.sequence.SequencesComparator $r8;
        org.apache.commons.collections4.sequence.EditScript $r17;

        r0 := @this: org.apache.commons.collections4.sequence.SequencesComparatorTest;

        $r2 = new org.apache.commons.collections4.sequence.SequencesComparatorTest$ExecutionVisitor;

        specialinvoke $r2.<org.apache.commons.collections4.sequence.SequencesComparatorTest$ExecutionVisitor: void <init>(org.apache.commons.collections4.sequence.SequencesComparatorTest,org.apache.commons.collections4.sequence.SequencesComparatorTest$1)>(r0, null);

        i1 = 0;

     label1:
        $r3 = r0.<org.apache.commons.collections4.sequence.SequencesComparatorTest: java.util.List before>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i1 >= $i0 goto label2;

        $r4 = r0.<org.apache.commons.collections4.sequence.SequencesComparatorTest: java.util.List before>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i1);

        $r6 = (java.lang.String) $r5;

        $r7 = specialinvoke r0.<org.apache.commons.collections4.sequence.SequencesComparatorTest: java.util.List sequence(java.lang.String)>($r6);

        virtualinvoke $r2.<org.apache.commons.collections4.sequence.SequencesComparatorTest$ExecutionVisitor: void setList(java.util.List)>($r7);

        $r8 = new org.apache.commons.collections4.sequence.SequencesComparator;

        $r9 = r0.<org.apache.commons.collections4.sequence.SequencesComparatorTest: java.util.List before>;

        $r10 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(i1);

        $r11 = (java.lang.String) $r10;

        $r12 = specialinvoke r0.<org.apache.commons.collections4.sequence.SequencesComparatorTest: java.util.List sequence(java.lang.String)>($r11);

        $r13 = r0.<org.apache.commons.collections4.sequence.SequencesComparatorTest: java.util.List after>;

        $r14 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>(i1);

        $r15 = (java.lang.String) $r14;

        $r16 = specialinvoke r0.<org.apache.commons.collections4.sequence.SequencesComparatorTest: java.util.List sequence(java.lang.String)>($r15);

        specialinvoke $r8.<org.apache.commons.collections4.sequence.SequencesComparator: void <init>(java.util.List,java.util.List)>($r12, $r16);

        $r17 = virtualinvoke $r8.<org.apache.commons.collections4.sequence.SequencesComparator: org.apache.commons.collections4.sequence.EditScript getScript()>();

        virtualinvoke $r17.<org.apache.commons.collections4.sequence.EditScript: void visit(org.apache.commons.collections4.sequence.CommandVisitor)>($r2);

        $r18 = r0.<org.apache.commons.collections4.sequence.SequencesComparatorTest: java.util.List after>;

        $r19 = interfaceinvoke $r18.<java.util.List: java.lang.Object get(int)>(i1);

        $r20 = virtualinvoke $r2.<org.apache.commons.collections4.sequence.SequencesComparatorTest$ExecutionVisitor: java.lang.String getString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r19, $r20);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void testMinimal()
    {
        org.apache.commons.collections4.sequence.SequencesComparatorTest r0;
        java.lang.String[] $r5;
        java.lang.String $r6, $r7, $r8, $r9, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r36;
        java.util.ArrayList $r10, $r11;
        java.util.Random $r32;
        org.apache.commons.collections4.sequence.SequencesComparator $r33;
        org.apache.commons.collections4.sequence.EditScript $r34;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9;
        boolean $z21;

        r0 := @this: org.apache.commons.collections4.sequence.SequencesComparatorTest;

        $r5 = newarray (java.lang.String)[4];

        $r6 = new java.lang.String;

        specialinvoke $r6.<java.lang.String: void <init>(java.lang.String)>("GA");

        $r5[0] = $r6;

        $r7 = new java.lang.String;

        specialinvoke $r7.<java.lang.String: void <init>(java.lang.String)>("BU");

        $r5[1] = $r7;

        $r8 = new java.lang.String;

        specialinvoke $r8.<java.lang.String: void <init>(java.lang.String)>("ZO");

        $r5[2] = $r8;

        $r9 = new java.lang.String;

        specialinvoke $r9.<java.lang.String: void <init>(java.lang.String)>("MEU");

        $r5[3] = $r9;

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        $r12 = $r5[0];

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r12);

        $r13 = $r5[2];

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r13);

        $r14 = $r5[3];

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r14);

        $r15 = $r5[1];

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r15);

        $r16 = $r5[0];

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r16);

        $r17 = $r5[0];

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r17);

        $r18 = $r5[2];

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r18);

        $r19 = $r5[1];

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r19);

        $r20 = $r5[3];

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r20);

        $r21 = $r5[0];

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r21);

        $r22 = $r5[2];

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r22);

        $r23 = $r5[1];

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r23);

        $r24 = $r5[3];

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r24);

        $r25 = $r5[2];

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r25);

        $r26 = $r5[2];

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r26);

        $r27 = $r5[0];

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r27);

        $r28 = $r5[1];

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r28);

        $r29 = $r5[3];

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r29);

        $r30 = $r5[0];

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r30);

        $r31 = $r5[3];

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r31);

        $r32 = new java.util.Random;

        specialinvoke $r32.<java.util.Random: void <init>(long)>(4564634237452342L);

        i8 = 0;

     label1:
        if i8 > 40 goto label8;

        interfaceinvoke $r11.<java.util.List: void clear()>();

        interfaceinvoke $r11.<java.util.List: boolean addAll(java.util.Collection)>($r10);

        i9 = 0;

     label2:
        if i9 >= i8 goto label5;

        $i1 = virtualinvoke $r32.<java.util.Random: int nextInt(int)>(2);

        if $i1 != 0 goto label3;

        $i4 = interfaceinvoke $r11.<java.util.List: int size()>();

        $i5 = $i4 + 1;

        $i6 = virtualinvoke $r32.<java.util.Random: int nextInt(int)>($i5);

        $i7 = virtualinvoke $r32.<java.util.Random: int nextInt(int)>(4);

        $r36 = $r5[$i7];

        interfaceinvoke $r11.<java.util.List: void add(int,java.lang.Object)>($i6, $r36);

        goto label4;

     label3:
        $i2 = interfaceinvoke $r11.<java.util.List: int size()>();

        $i3 = virtualinvoke $r32.<java.util.Random: int nextInt(int)>($i2);

        interfaceinvoke $r11.<java.util.List: java.lang.Object remove(int)>($i3);

     label4:
        i9 = i9 + 1;

        goto label2;

     label5:
        $r33 = new org.apache.commons.collections4.sequence.SequencesComparator;

        specialinvoke $r33.<org.apache.commons.collections4.sequence.SequencesComparator: void <init>(java.util.List,java.util.List)>($r10, $r11);

        $r34 = virtualinvoke $r33.<org.apache.commons.collections4.sequence.SequencesComparator: org.apache.commons.collections4.sequence.EditScript getScript()>();

        $i0 = virtualinvoke $r34.<org.apache.commons.collections4.sequence.EditScript: int getModifications()>();

        if $i0 > i8 goto label6;

        $z21 = 1;

        goto label7;

     label6:
        $z21 = 0;

     label7:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z21);

        i8 = i8 + 5;

        goto label1;

     label8:
        return;
    }

    public void testShadok()
    {
        org.apache.commons.collections4.sequence.SequencesComparatorTest r0;
        java.util.List r2, $r13, $r16, r34;
        java.lang.String[] $r4;
        java.lang.String $r5, $r6, $r7, $r8, $r19, $r20, r30, r37;
        java.util.ArrayList $r9, $r23, $r24, $r26, r27;
        org.apache.commons.collections4.sequence.SequencesComparatorTest$ExecutionVisitor $r10;
        int $i1, i2, i3, i4, i5;
        boolean $z0, $z1, $z3;
        java.lang.Object $r11, $r12, $r15, $r21, $r25;
        org.apache.commons.collections4.sequence.SequencesComparator $r14;
        org.apache.commons.collections4.sequence.EditScript $r17;
        java.lang.StringBuilder $r18;
        java.util.Iterator r31, r33, r36;

        r0 := @this: org.apache.commons.collections4.sequence.SequencesComparatorTest;

        $r4 = newarray (java.lang.String)[4];

        $r5 = new java.lang.String;

        specialinvoke $r5.<java.lang.String: void <init>(java.lang.String)>("GA");

        $r4[0] = $r5;

        $r6 = new java.lang.String;

        specialinvoke $r6.<java.lang.String: void <init>(java.lang.String)>("BU");

        $r4[1] = $r6;

        $r7 = new java.lang.String;

        specialinvoke $r7.<java.lang.String: void <init>(java.lang.String)>("ZO");

        $r4[2] = $r7;

        $r8 = new java.lang.String;

        specialinvoke $r8.<java.lang.String: void <init>(java.lang.String)>("MEU");

        $r4[3] = $r8;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r27 = $r9;

        i2 = 0;

     label01:
        if i2 >= 5 goto label06;

        $r23 = new java.util.ArrayList;

        specialinvoke $r23.<java.util.ArrayList: void <init>()>();

        $r24 = new java.util.ArrayList;

        specialinvoke $r24.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r23.<java.util.List: boolean add(java.lang.Object)>($r24);

        i3 = lengthof $r4;

        i4 = 0;

     label02:
        if i4 >= i3 goto label05;

        r30 = $r4[i4];

        r31 = interfaceinvoke r27.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z3 = interfaceinvoke r31.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label04;

        $r25 = interfaceinvoke r31.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.util.List) $r25;

        $r26 = new java.util.ArrayList;

        specialinvoke $r26.<java.util.ArrayList: void <init>(java.util.Collection)>(r2);

        interfaceinvoke $r26.<java.util.List: boolean add(java.lang.Object)>(r30);

        interfaceinvoke $r23.<java.util.List: boolean add(java.lang.Object)>($r26);

        goto label03;

     label04:
        i4 = i4 + 1;

        goto label02;

     label05:
        r27 = $r23;

        i2 = i2 + 1;

        goto label01;

     label06:
        $r10 = new org.apache.commons.collections4.sequence.SequencesComparatorTest$ExecutionVisitor;

        specialinvoke $r10.<org.apache.commons.collections4.sequence.SequencesComparatorTest$ExecutionVisitor: void <init>(org.apache.commons.collections4.sequence.SequencesComparatorTest,org.apache.commons.collections4.sequence.SequencesComparatorTest$1)>(r0, null);

        i5 = 0;

     label07:
        $i1 = interfaceinvoke r27.<java.util.List: int size()>();

        if i5 >= $i1 goto label12;

        r33 = interfaceinvoke r27.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z0 = interfaceinvoke r33.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r11 = interfaceinvoke r33.<java.util.Iterator: java.lang.Object next()>();

        r34 = (java.util.List) $r11;

        $r12 = interfaceinvoke r27.<java.util.List: java.lang.Object get(int)>(i5);

        $r13 = (java.util.List) $r12;

        virtualinvoke $r10.<org.apache.commons.collections4.sequence.SequencesComparatorTest$ExecutionVisitor: void setList(java.util.List)>($r13);

        $r14 = new org.apache.commons.collections4.sequence.SequencesComparator;

        $r15 = interfaceinvoke r27.<java.util.List: java.lang.Object get(int)>(i5);

        $r16 = (java.util.List) $r15;

        specialinvoke $r14.<org.apache.commons.collections4.sequence.SequencesComparator: void <init>(java.util.List,java.util.List)>($r16, r34);

        $r17 = virtualinvoke $r14.<org.apache.commons.collections4.sequence.SequencesComparator: org.apache.commons.collections4.sequence.EditScript getScript()>();

        virtualinvoke $r17.<org.apache.commons.collections4.sequence.EditScript: void visit(org.apache.commons.collections4.sequence.CommandVisitor)>($r10);

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        r36 = interfaceinvoke r34.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z1 = interfaceinvoke r36.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label10;

        $r21 = interfaceinvoke r36.<java.util.Iterator: java.lang.Object next()>();

        r37 = (java.lang.String) $r21;

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r37);

        goto label09;

     label10:
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        $r20 = virtualinvoke $r10.<org.apache.commons.collections4.sequence.SequencesComparatorTest$ExecutionVisitor: java.lang.String getString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r19, $r20);

        goto label08;

     label11:
        i5 = i5 + 1;

        goto label07;

     label12:
        return;
    }

    private java.util.List sequence(java.lang.String)
    {
        org.apache.commons.collections4.sequence.SequencesComparatorTest r0;
        java.lang.String r1;
        java.util.ArrayList $r3;
        int $i0, i2;
        java.lang.Character $r4;
        char $c1;

        r0 := @this: org.apache.commons.collections4.sequence.SequencesComparatorTest;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        i2 = 0;

     label1:
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if i2 >= $i0 goto label2;

        $r4 = new java.lang.Character;

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);

        specialinvoke $r4.<java.lang.Character: void <init>(char)>($c1);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r4);

        i2 = i2 + 1;

        goto label1;

     label2:
        return $r3;
    }

    public void setUp()
    {
        org.apache.commons.collections4.sequence.SequencesComparatorTest r0;
        java.lang.String[] $r1, $r3;
        java.util.List $r2, $r4;
        int[] $r5;

        r0 := @this: org.apache.commons.collections4.sequence.SequencesComparatorTest;

        $r1 = newarray (java.lang.String)[9];

        $r1[0] = "bottle";

        $r1[1] = "nematode knowledge";

        $r1[2] = "";

        $r1[3] = "aa";

        $r1[4] = "prefixed string";

        $r1[5] = "ABCABBA";

        $r1[6] = "glop glop";

        $r1[7] = "coq";

        $r1[8] = "spider-man";

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        r0.<org.apache.commons.collections4.sequence.SequencesComparatorTest: java.util.List before> = $r2;

        $r3 = newarray (java.lang.String)[9];

        $r3[0] = "noodle";

        $r3[1] = "empty bottle";

        $r3[2] = "";

        $r3[3] = "C";

        $r3[4] = "prefix";

        $r3[5] = "CBABAC";

        $r3[6] = "pas glop pas glop";

        $r3[7] = "ane";

        $r3[8] = "klingon";

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        r0.<org.apache.commons.collections4.sequence.SequencesComparatorTest: java.util.List after> = $r4;

        $r5 = newarray (int)[9];

        $r5[0] = 6;

        $r5[1] = 16;

        $r5[2] = 0;

        $r5[3] = 3;

        $r5[4] = 9;

        $r5[5] = 5;

        $r5[6] = 8;

        $r5[7] = 6;

        $r5[8] = 13;

        r0.<org.apache.commons.collections4.sequence.SequencesComparatorTest: int[] length> = $r5;

        return;
    }

    public void tearDown()
    {
        org.apache.commons.collections4.sequence.SequencesComparatorTest r0;

        r0 := @this: org.apache.commons.collections4.sequence.SequencesComparatorTest;

        r0.<org.apache.commons.collections4.sequence.SequencesComparatorTest: java.util.List before> = null;

        r0.<org.apache.commons.collections4.sequence.SequencesComparatorTest: java.util.List after> = null;

        r0.<org.apache.commons.collections4.sequence.SequencesComparatorTest: int[] length> = null;

        return;
    }
}
