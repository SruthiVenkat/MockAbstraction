public abstract class org.apache.commons.collections4.multiset.AbstractMapMultiSet extends org.apache.commons.collections4.multiset.AbstractMultiSet
{
    private transient java.util.Map map;
    private transient int size;
    private transient int modCount;

    protected void <init>()
    {
        org.apache.commons.collections4.multiset.AbstractMapMultiSet r0;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMapMultiSet;

        specialinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSet: void <init>()>();

        return;
    }

    protected void <init>(java.util.Map)
    {
        org.apache.commons.collections4.multiset.AbstractMapMultiSet r0;
        java.util.Map r1;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMapMultiSet;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSet: void <init>()>();

        r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet: java.util.Map map> = r1;

        return;
    }

    protected java.util.Map getMap()
    {
        org.apache.commons.collections4.multiset.AbstractMapMultiSet r0;
        java.util.Map $r1;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMapMultiSet;

        $r1 = r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet: java.util.Map map>;

        return $r1;
    }

    protected void setMap(java.util.Map)
    {
        org.apache.commons.collections4.multiset.AbstractMapMultiSet r0;
        java.util.Map r1;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMapMultiSet;

        r1 := @parameter0: java.util.Map;

        r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet: java.util.Map map> = r1;

        return;
    }

    public int size()
    {
        org.apache.commons.collections4.multiset.AbstractMapMultiSet r0;
        int $i0;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMapMultiSet;

        $i0 = r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet: int size>;

        return $i0;
    }

    public boolean isEmpty()
    {
        org.apache.commons.collections4.multiset.AbstractMapMultiSet r0;
        java.util.Map $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMapMultiSet;

        $r1 = r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet: java.util.Map map>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        return $z0;
    }

    public int getCount(java.lang.Object)
    {
        org.apache.commons.collections4.multiset.AbstractMapMultiSet r0;
        java.lang.Object r1, $r4;
        org.apache.commons.collections4.multiset.AbstractMapMultiSet$MutableInteger r2;
        java.util.Map $r3;
        int $i0;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMapMultiSet;

        r1 := @parameter0: java.lang.Object;

        $r3 = r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet: java.util.Map map>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (org.apache.commons.collections4.multiset.AbstractMapMultiSet$MutableInteger) $r4;

        if r2 == null goto label1;

        $i0 = r2.<org.apache.commons.collections4.multiset.AbstractMapMultiSet$MutableInteger: int value>;

        return $i0;

     label1:
        return 0;
    }

    public boolean contains(java.lang.Object)
    {
        org.apache.commons.collections4.multiset.AbstractMapMultiSet r0;
        java.lang.Object r1;
        java.util.Map $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMapMultiSet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet: java.util.Map map>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public java.util.Iterator iterator()
    {
        org.apache.commons.collections4.multiset.AbstractMapMultiSet r0;
        org.apache.commons.collections4.multiset.AbstractMapMultiSet$MapBasedMultiSetIterator $r1;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMapMultiSet;

        $r1 = new org.apache.commons.collections4.multiset.AbstractMapMultiSet$MapBasedMultiSetIterator;

        specialinvoke $r1.<org.apache.commons.collections4.multiset.AbstractMapMultiSet$MapBasedMultiSetIterator: void <init>(org.apache.commons.collections4.multiset.AbstractMapMultiSet)>(r0);

        return $r1;
    }

    public int add(java.lang.Object, int)
    {
        org.apache.commons.collections4.multiset.AbstractMapMultiSet r0;
        java.lang.Object r1, $r4;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        org.apache.commons.collections4.multiset.AbstractMapMultiSet$MutableInteger r2, $r5;
        java.util.Map $r3, $r6;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMapMultiSet;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        if i0 >= 0 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Occurrences must not be negative.");

        throw $r8;

     label1:
        $r3 = r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet: java.util.Map map>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (org.apache.commons.collections4.multiset.AbstractMapMultiSet$MutableInteger) $r4;

        if r2 == null goto label2;

        $i8 = r2.<org.apache.commons.collections4.multiset.AbstractMapMultiSet$MutableInteger: int value>;

        goto label3;

     label2:
        $i8 = 0;

     label3:
        i1 = $i8;

        if i0 <= 0 goto label5;

        $i2 = r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet: int modCount>;

        $i3 = $i2 + 1;

        r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet: int modCount> = $i3;

        $i4 = r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet: int size>;

        $i5 = $i4 + i0;

        r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet: int size> = $i5;

        if r2 != null goto label4;

        $r6 = r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet: java.util.Map map>;

        $r5 = new org.apache.commons.collections4.multiset.AbstractMapMultiSet$MutableInteger;

        specialinvoke $r5.<org.apache.commons.collections4.multiset.AbstractMapMultiSet$MutableInteger: void <init>(int)>(i0);

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r5);

        goto label5;

     label4:
        $i6 = r2.<org.apache.commons.collections4.multiset.AbstractMapMultiSet$MutableInteger: int value>;

        $i7 = $i6 + i0;

        r2.<org.apache.commons.collections4.multiset.AbstractMapMultiSet$MutableInteger: int value> = $i7;

     label5:
        return i1;
    }

    public void clear()
    {
        org.apache.commons.collections4.multiset.AbstractMapMultiSet r0;
        int $i0, $i1;
        java.util.Map $r1;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMapMultiSet;

        $i0 = r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet: int modCount>;

        $i1 = $i0 + 1;

        r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet: int modCount> = $i1;

        $r1 = r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet: java.util.Map map>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet: int size> = 0;

        return;
    }

    public int remove(java.lang.Object, int)
    {
        org.apache.commons.collections4.multiset.AbstractMapMultiSet r0;
        java.lang.Object r1, $r4;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        org.apache.commons.collections4.multiset.AbstractMapMultiSet$MutableInteger r2;
        java.util.Map $r3, $r5;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMapMultiSet;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        if i0 >= 0 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Occurrences must not be negative.");

        throw $r7;

     label1:
        $r3 = r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet: java.util.Map map>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (org.apache.commons.collections4.multiset.AbstractMapMultiSet$MutableInteger) $r4;

        if r2 != null goto label2;

        return 0;

     label2:
        i1 = r2.<org.apache.commons.collections4.multiset.AbstractMapMultiSet$MutableInteger: int value>;

        if i0 <= 0 goto label4;

        $i2 = r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet: int modCount>;

        $i3 = $i2 + 1;

        r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet: int modCount> = $i3;

        $i4 = r2.<org.apache.commons.collections4.multiset.AbstractMapMultiSet$MutableInteger: int value>;

        if i0 >= $i4 goto label3;

        $i8 = r2.<org.apache.commons.collections4.multiset.AbstractMapMultiSet$MutableInteger: int value>;

        $i9 = $i8 - i0;

        r2.<org.apache.commons.collections4.multiset.AbstractMapMultiSet$MutableInteger: int value> = $i9;

        $i10 = r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet: int size>;

        $i11 = $i10 - i0;

        r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet: int size> = $i11;

        goto label4;

     label3:
        $r5 = r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet: java.util.Map map>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        $i6 = r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet: int size>;

        $i5 = r2.<org.apache.commons.collections4.multiset.AbstractMapMultiSet$MutableInteger: int value>;

        $i7 = $i6 - $i5;

        r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet: int size> = $i7;

     label4:
        return i1;
    }

    protected java.util.Iterator createUniqueSetIterator()
    {
        org.apache.commons.collections4.multiset.AbstractMapMultiSet r0;
        org.apache.commons.collections4.multiset.AbstractMapMultiSet$UniqueSetIterator $r1;
        java.util.Map $r2;
        java.util.Set $r3;
        java.util.Iterator $r4;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMapMultiSet;

        $r1 = new org.apache.commons.collections4.multiset.AbstractMapMultiSet$UniqueSetIterator;

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet: java.util.Map getMap()>();

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

        specialinvoke $r1.<org.apache.commons.collections4.multiset.AbstractMapMultiSet$UniqueSetIterator: void <init>(java.util.Iterator,org.apache.commons.collections4.multiset.AbstractMapMultiSet)>($r4, r0);

        return $r1;
    }

    protected int uniqueElements()
    {
        org.apache.commons.collections4.multiset.AbstractMapMultiSet r0;
        java.util.Map $r1;
        int $i0;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMapMultiSet;

        $r1 = r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet: java.util.Map map>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }

    protected java.util.Iterator createEntrySetIterator()
    {
        org.apache.commons.collections4.multiset.AbstractMapMultiSet r0;
        org.apache.commons.collections4.multiset.AbstractMapMultiSet$EntrySetIterator $r1;
        java.util.Map $r2;
        java.util.Set $r3;
        java.util.Iterator $r4;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMapMultiSet;

        $r1 = new org.apache.commons.collections4.multiset.AbstractMapMultiSet$EntrySetIterator;

        $r2 = r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet: java.util.Map map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

        specialinvoke $r1.<org.apache.commons.collections4.multiset.AbstractMapMultiSet$EntrySetIterator: void <init>(java.util.Iterator,org.apache.commons.collections4.multiset.AbstractMapMultiSet)>($r4, r0);

        return $r1;
    }

    protected void doWriteObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        org.apache.commons.collections4.multiset.AbstractMapMultiSet r0;
        java.io.ObjectOutputStream r1;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.util.Map $r4, $r5;
        int $i0, $i1;
        java.util.Set $r6;
        boolean $z0;
        java.lang.Object $r7, $r8, $r9;
        org.apache.commons.collections4.multiset.AbstractMapMultiSet$MutableInteger $r10;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMapMultiSet;

        r1 := @parameter0: java.io.ObjectOutputStream;

        $r4 = r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet: java.util.Map map>;

        $i0 = interfaceinvoke $r4.<java.util.Map: int size()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i0);

        $r5 = r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet: java.util.Map map>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r7;

        $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r8);

        $r9 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = (org.apache.commons.collections4.multiset.AbstractMapMultiSet$MutableInteger) $r9;

        $i1 = $r10.<org.apache.commons.collections4.multiset.AbstractMapMultiSet$MutableInteger: int value>;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i1);

        goto label1;

     label2:
        return;
    }

    protected void doReadObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.commons.collections4.multiset.AbstractMapMultiSet r0;
        java.io.ObjectInputStream r1;
        int i0, i1, $i2, $i3, i4;
        java.lang.Object r2;
        org.apache.commons.collections4.multiset.AbstractMapMultiSet$MutableInteger $r3;
        java.util.Map $r4;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMapMultiSet;

        r1 := @parameter0: java.io.ObjectInputStream;

        i0 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

        i4 = 0;

     label1:
        if i4 >= i0 goto label2;

        r2 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        i1 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

        $r4 = r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet: java.util.Map map>;

        $r3 = new org.apache.commons.collections4.multiset.AbstractMapMultiSet$MutableInteger;

        specialinvoke $r3.<org.apache.commons.collections4.multiset.AbstractMapMultiSet$MutableInteger: void <init>(int)>(i1);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r3);

        $i2 = r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet: int size>;

        $i3 = $i2 + i1;

        r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet: int size> = $i3;

        i4 = i4 + 1;

        goto label1;

     label2:
        return;
    }

    public java.lang.Object[] toArray()
    {
        org.apache.commons.collections4.multiset.AbstractMapMultiSet r0;
        java.lang.Object[] r1;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.lang.Object r4, $r8, $r9;
        org.apache.commons.collections4.multiset.AbstractMapMultiSet$MutableInteger r5;
        int $i0, $i1, i2, i3;
        java.util.Map $r6;
        java.util.Set $r7;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMapMultiSet;

        $i0 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet: int size()>();

        r1 = newarray (java.lang.Object)[$i0];

        i2 = 0;

        $r6 = r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet: java.util.Map map>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r8;

        r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        r5 = (org.apache.commons.collections4.multiset.AbstractMapMultiSet$MutableInteger) $r9;

        i3 = r5.<org.apache.commons.collections4.multiset.AbstractMapMultiSet$MutableInteger: int value>;

     label2:
        if i3 <= 0 goto label3;

        $i1 = i2;

        i2 = i2 + 1;

        r1[$i1] = r4;

        i3 = i3 + -1;

        goto label2;

     label3:
        goto label1;

     label4:
        return r1;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        org.apache.commons.collections4.multiset.AbstractMapMultiSet r0;
        int i0, $i1, $i2, $i3, $i4, i5, i6;
        java.util.Iterator r1;
        java.util.Map$Entry r2;
        java.lang.Object r3, $r8, $r9, $r12;
        org.apache.commons.collections4.multiset.AbstractMapMultiSet$MutableInteger r4;
        java.util.Map $r6;
        java.util.Set $r7;
        java.lang.Class $r10, $r11;
        java.lang.Object[] $r13, r14, r15;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMapMultiSet;

        r14 := @parameter0: java.lang.Object[];

        i0 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet: int size()>();

        $i1 = lengthof r14;

        if $i1 >= i0 goto label1;

        $r10 = virtualinvoke r14.<java.lang.Object: java.lang.Class getClass()>();

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.Class getComponentType()>();

        $r12 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r11, i0);

        $r13 = (java.lang.Object[]) $r12;

        r15 = (java.lang.Object[]) $r13;

        r14 = r15;

     label1:
        i5 = 0;

        $r6 = r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet: java.util.Map map>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Set entrySet()>();

        r1 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r8 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.util.Map$Entry) $r8;

        r3 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        r4 = (org.apache.commons.collections4.multiset.AbstractMapMultiSet$MutableInteger) $r9;

        i6 = r4.<org.apache.commons.collections4.multiset.AbstractMapMultiSet$MutableInteger: int value>;

     label3:
        if i6 <= 0 goto label4;

        $i4 = i5;

        i5 = i5 + 1;

        r14[$i4] = r3;

        i6 = i6 + -1;

        goto label3;

     label4:
        goto label2;

     label5:
        $i2 = lengthof r14;

        if i5 >= $i2 goto label6;

        $i3 = i5;

        i5 = i5 + 1;

        r14[$i3] = null;

        goto label5;

     label6:
        return r14;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.commons.collections4.multiset.AbstractMapMultiSet r0;
        java.lang.Object r1, r4;
        org.apache.commons.collections4.MultiSet r2;
        java.util.Iterator r3;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3;
        java.util.Map $r5;
        java.util.Set $r6;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMapMultiSet;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.apache.commons.collections4.MultiSet;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.apache.commons.collections4.MultiSet) r1;

        $i0 = interfaceinvoke r2.<org.apache.commons.collections4.MultiSet: int size()>();

        $i1 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet: int size()>();

        if $i0 == $i1 goto label3;

        return 0;

     label3:
        $r5 = r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet: java.util.Map map>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set keySet()>();

        r3 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $i2 = interfaceinvoke r2.<org.apache.commons.collections4.MultiSet: int getCount(java.lang.Object)>(r4);

        $i3 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet: int getCount(java.lang.Object)>(r4);

        if $i2 == $i3 goto label5;

        return 0;

     label5:
        goto label4;

     label6:
        return 1;
    }

    public int hashCode()
    {
        org.apache.commons.collections4.multiset.AbstractMapMultiSet r0;
        java.util.Iterator r1;
        java.util.Map$Entry r2;
        java.lang.Object r3, $r7, $r8;
        org.apache.commons.collections4.multiset.AbstractMapMultiSet$MutableInteger r4;
        java.util.Map $r5;
        java.util.Set $r6;
        boolean $z0;
        int $i0, $i1, $i2, i3, $i4;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMapMultiSet;

        i3 = 0;

        $r5 = r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet: java.util.Map map>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>();

        r1 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r7 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.util.Map$Entry) $r7;

        r3 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        r4 = (org.apache.commons.collections4.multiset.AbstractMapMultiSet$MutableInteger) $r8;

        $i2 = i3;

        if r3 != null goto label2;

        $i4 = 0;

        goto label3;

     label2:
        $i4 = virtualinvoke r3.<java.lang.Object: int hashCode()>();

     label3:
        $i0 = r4.<org.apache.commons.collections4.multiset.AbstractMapMultiSet$MutableInteger: int value>;

        $i1 = $i4 ^ $i0;

        i3 = $i2 + $i1;

        goto label1;

     label4:
        return i3;
    }

    static java.util.Map access$000(org.apache.commons.collections4.multiset.AbstractMapMultiSet)
    {
        org.apache.commons.collections4.multiset.AbstractMapMultiSet r0;
        java.util.Map $r1;

        r0 := @parameter0: org.apache.commons.collections4.multiset.AbstractMapMultiSet;

        $r1 = r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet: java.util.Map map>;

        return $r1;
    }

    static int access$100(org.apache.commons.collections4.multiset.AbstractMapMultiSet)
    {
        org.apache.commons.collections4.multiset.AbstractMapMultiSet r0;
        int $i0;

        r0 := @parameter0: org.apache.commons.collections4.multiset.AbstractMapMultiSet;

        $i0 = r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet: int modCount>;

        return $i0;
    }

    static int access$210(org.apache.commons.collections4.multiset.AbstractMapMultiSet)
    {
        org.apache.commons.collections4.multiset.AbstractMapMultiSet r0;
        int $i0, $i1;

        r0 := @parameter0: org.apache.commons.collections4.multiset.AbstractMapMultiSet;

        $i0 = r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet: int size>;

        $i1 = $i0 - 1;

        r0.<org.apache.commons.collections4.multiset.AbstractMapMultiSet: int size> = $i1;

        return $i0;
    }
}
