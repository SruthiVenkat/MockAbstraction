public class org.apache.commons.collections4.multiset.PredicatedMultiSetTest extends org.apache.commons.collections4.multiset.AbstractMultiSetTest
{
    protected org.apache.commons.collections4.Predicate truePredicate;

    public void <init>(java.lang.String)
    {
        org.apache.commons.collections4.multiset.PredicatedMultiSetTest r0;
        java.lang.String r1;
        org.apache.commons.collections4.Predicate $r2;

        r0 := @this: org.apache.commons.collections4.multiset.PredicatedMultiSetTest;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: void <init>(java.lang.String)>(r1);

        $r2 = staticinvoke <org.apache.commons.collections4.functors.TruePredicate: org.apache.commons.collections4.Predicate truePredicate()>();

        r0.<org.apache.commons.collections4.multiset.PredicatedMultiSetTest: org.apache.commons.collections4.Predicate truePredicate> = $r2;

        return;
    }

    public static junit.framework.Test suite()
    {
        junit.framework.TestSuite $r0;

        $r0 = staticinvoke <org.apache.commons.collections4.BulkTest: junit.framework.TestSuite makeSuite(java.lang.Class)>(class "Lorg/apache/commons/collections4/multiset/PredicatedMultiSetTest;");

        return $r0;
    }

    protected org.apache.commons.collections4.Predicate stringPredicate()
    {
        org.apache.commons.collections4.multiset.PredicatedMultiSetTest r0;
        org.apache.commons.collections4.multiset.PredicatedMultiSetTest$1 $r1;

        r0 := @this: org.apache.commons.collections4.multiset.PredicatedMultiSetTest;

        $r1 = new org.apache.commons.collections4.multiset.PredicatedMultiSetTest$1;

        specialinvoke $r1.<org.apache.commons.collections4.multiset.PredicatedMultiSetTest$1: void <init>(org.apache.commons.collections4.multiset.PredicatedMultiSetTest)>(r0);

        return $r1;
    }

    protected org.apache.commons.collections4.MultiSet decorateMultiSet(org.apache.commons.collections4.multiset.HashMultiSet, org.apache.commons.collections4.Predicate)
    {
        org.apache.commons.collections4.multiset.PredicatedMultiSetTest r0;
        org.apache.commons.collections4.multiset.HashMultiSet r1;
        org.apache.commons.collections4.Predicate r2;
        org.apache.commons.collections4.multiset.PredicatedMultiSet $r3;

        r0 := @this: org.apache.commons.collections4.multiset.PredicatedMultiSetTest;

        r1 := @parameter0: org.apache.commons.collections4.multiset.HashMultiSet;

        r2 := @parameter1: org.apache.commons.collections4.Predicate;

        $r3 = staticinvoke <org.apache.commons.collections4.multiset.PredicatedMultiSet: org.apache.commons.collections4.multiset.PredicatedMultiSet predicatedMultiSet(org.apache.commons.collections4.MultiSet,org.apache.commons.collections4.Predicate)>(r1, r2);

        return $r3;
    }

    public org.apache.commons.collections4.MultiSet makeObject()
    {
        org.apache.commons.collections4.multiset.PredicatedMultiSetTest r0;
        org.apache.commons.collections4.multiset.HashMultiSet $r1;
        org.apache.commons.collections4.Predicate $r2;
        org.apache.commons.collections4.MultiSet $r3;

        r0 := @this: org.apache.commons.collections4.multiset.PredicatedMultiSetTest;

        $r1 = new org.apache.commons.collections4.multiset.HashMultiSet;

        specialinvoke $r1.<org.apache.commons.collections4.multiset.HashMultiSet: void <init>()>();

        $r2 = r0.<org.apache.commons.collections4.multiset.PredicatedMultiSetTest: org.apache.commons.collections4.Predicate truePredicate>;

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.multiset.PredicatedMultiSetTest: org.apache.commons.collections4.MultiSet decorateMultiSet(org.apache.commons.collections4.multiset.HashMultiSet,org.apache.commons.collections4.Predicate)>($r1, $r2);

        return $r3;
    }

    protected org.apache.commons.collections4.MultiSet makeTestMultiSet()
    {
        org.apache.commons.collections4.multiset.PredicatedMultiSetTest r0;
        org.apache.commons.collections4.multiset.HashMultiSet $r1;
        org.apache.commons.collections4.Predicate $r2;
        org.apache.commons.collections4.MultiSet $r3;

        r0 := @this: org.apache.commons.collections4.multiset.PredicatedMultiSetTest;

        $r1 = new org.apache.commons.collections4.multiset.HashMultiSet;

        specialinvoke $r1.<org.apache.commons.collections4.multiset.HashMultiSet: void <init>()>();

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.multiset.PredicatedMultiSetTest: org.apache.commons.collections4.Predicate stringPredicate()>();

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.multiset.PredicatedMultiSetTest: org.apache.commons.collections4.MultiSet decorateMultiSet(org.apache.commons.collections4.multiset.HashMultiSet,org.apache.commons.collections4.Predicate)>($r1, $r2);

        return $r3;
    }

    public void testLegalAddRemove()
    {
        org.apache.commons.collections4.multiset.PredicatedMultiSetTest r0;
        org.apache.commons.collections4.MultiSet r1;
        java.lang.Object[] r2, $r3;
        int $i0, $i1, $i2, $i3, i4;
        org.apache.commons.collections4.multiset.PredicatedMultiSet $r4, $r7;
        java.lang.Object $r5, $r6, $r8, $r9, $r10;
        boolean $z0, $z1, $z2, $z4;
        java.util.Set r11, r12;

        r0 := @this: org.apache.commons.collections4.multiset.PredicatedMultiSetTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.multiset.PredicatedMultiSetTest: org.apache.commons.collections4.MultiSet makeTestMultiSet()>();

        $i0 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: int size()>();

        staticinvoke <org.apache.commons.collections4.multiset.PredicatedMultiSetTest: void assertEquals(int,int)>(0, $i0);

        $r3 = newarray (java.lang.Object)[7];

        $r3[0] = "1";

        $r3[1] = "3";

        $r3[2] = "5";

        $r3[3] = "7";

        $r3[4] = "2";

        $r3[5] = "4";

        $r3[6] = "1";

        r2 = (java.lang.Object[]) $r3;

        i4 = 0;

     label1:
        $i1 = lengthof r2;

        if i4 >= $i1 goto label2;

        $r9 = r2[i4];

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>($r9);

        $i2 = i4 + 1;

        $i3 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: int size()>();

        staticinvoke <org.apache.commons.collections4.multiset.PredicatedMultiSetTest: void assertEquals(int,int)>($i2, $i3);

        $r10 = r2[i4];

        $z4 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean contains(java.lang.Object)>($r10);

        staticinvoke <org.apache.commons.collections4.multiset.PredicatedMultiSetTest: void assertEquals(boolean,boolean)>(1, $z4);

        i4 = i4 + 1;

        goto label1;

     label2:
        $r4 = (org.apache.commons.collections4.multiset.PredicatedMultiSet) r1;

        r11 = virtualinvoke $r4.<org.apache.commons.collections4.multiset.PredicatedMultiSet: java.util.Set uniqueSet()>();

        $r5 = r2[0];

        $z0 = interfaceinvoke r11.<java.util.Set: boolean contains(java.lang.Object)>($r5);

        staticinvoke <org.apache.commons.collections4.multiset.PredicatedMultiSetTest: void assertTrue(java.lang.String,boolean)>("Unique set contains the first element", $z0);

        $r6 = r2[0];

        $z1 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean remove(java.lang.Object)>($r6);

        staticinvoke <org.apache.commons.collections4.multiset.PredicatedMultiSetTest: void assertEquals(boolean,boolean)>(1, $z1);

        $r7 = (org.apache.commons.collections4.multiset.PredicatedMultiSet) r1;

        r12 = virtualinvoke $r7.<org.apache.commons.collections4.multiset.PredicatedMultiSet: java.util.Set uniqueSet()>();

        $r8 = r2[0];

        $z2 = interfaceinvoke r12.<java.util.Set: boolean contains(java.lang.Object)>($r8);

        staticinvoke <org.apache.commons.collections4.multiset.PredicatedMultiSetTest: void assertTrue(java.lang.String,boolean)>("Unique set does not contain anymore the first element", $z2);

        return;
    }

    public void testIllegalAdd()
    {
        org.apache.commons.collections4.multiset.PredicatedMultiSetTest r0;
        org.apache.commons.collections4.MultiSet r1;
        java.lang.Integer r2;
        boolean $z1, $z2;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.apache.commons.collections4.multiset.PredicatedMultiSetTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.multiset.PredicatedMultiSetTest: org.apache.commons.collections4.MultiSet makeTestMultiSet()>();

        r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

     label1:
        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>(r2);

        staticinvoke <org.apache.commons.collections4.multiset.PredicatedMultiSetTest: void fail(java.lang.String)>("Integer should fail string predicate.");

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

     label4:
        $z1 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean contains(java.lang.Object)>(r2);

        if $z1 != 0 goto label5;

        $z2 = 1;

        goto label6;

     label5:
        $z2 = 0;

     label6:
        staticinvoke <org.apache.commons.collections4.multiset.PredicatedMultiSetTest: void assertTrue(java.lang.String,boolean)>("Collection shouldn\'t contain illegal element", $z2);

        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public void testIllegalDecorate()
    {
        org.apache.commons.collections4.multiset.PredicatedMultiSetTest r0;
        org.apache.commons.collections4.multiset.HashMultiSet $r2, $r6;
        java.lang.Integer $r3;
        org.apache.commons.collections4.Predicate $r4;
        java.lang.NullPointerException $r8;
        java.lang.IllegalArgumentException $r9;

        r0 := @this: org.apache.commons.collections4.multiset.PredicatedMultiSetTest;

        $r2 = new org.apache.commons.collections4.multiset.HashMultiSet;

        specialinvoke $r2.<org.apache.commons.collections4.multiset.HashMultiSet: void <init>()>();

        virtualinvoke $r2.<org.apache.commons.collections4.multiset.HashMultiSet: boolean add(java.lang.Object)>("one");

        virtualinvoke $r2.<org.apache.commons.collections4.multiset.HashMultiSet: boolean add(java.lang.Object)>("two");

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        virtualinvoke $r2.<org.apache.commons.collections4.multiset.HashMultiSet: boolean add(java.lang.Object)>($r3);

        virtualinvoke $r2.<org.apache.commons.collections4.multiset.HashMultiSet: boolean add(java.lang.Object)>("four");

     label1:
        $r4 = virtualinvoke r0.<org.apache.commons.collections4.multiset.PredicatedMultiSetTest: org.apache.commons.collections4.Predicate stringPredicate()>();

        virtualinvoke r0.<org.apache.commons.collections4.multiset.PredicatedMultiSetTest: org.apache.commons.collections4.MultiSet decorateMultiSet(org.apache.commons.collections4.multiset.HashMultiSet,org.apache.commons.collections4.Predicate)>($r2, $r4);

        staticinvoke <org.apache.commons.collections4.multiset.PredicatedMultiSetTest: void fail(java.lang.String)>("MultiSet contains an element that should fail the predicate.");

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

     label4:
        $r6 = new org.apache.commons.collections4.multiset.HashMultiSet;

        specialinvoke $r6.<org.apache.commons.collections4.multiset.HashMultiSet: void <init>()>();

        virtualinvoke r0.<org.apache.commons.collections4.multiset.PredicatedMultiSetTest: org.apache.commons.collections4.MultiSet decorateMultiSet(org.apache.commons.collections4.multiset.HashMultiSet,org.apache.commons.collections4.Predicate)>($r6, null);

        staticinvoke <org.apache.commons.collections4.multiset.PredicatedMultiSetTest: void fail(java.lang.String)>("Expecting NullPointerException for null predicate.");

     label5:
        goto label7;

     label6:
        $r8 := @caughtexception;

     label7:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
        catch java.lang.NullPointerException from label4 to label5 with label6;
    }

    public java.lang.String getCompatibilityVersion()
    {
        org.apache.commons.collections4.multiset.PredicatedMultiSetTest r0;

        r0 := @this: org.apache.commons.collections4.multiset.PredicatedMultiSetTest;

        return "4.1";
    }

    public volatile java.util.Collection makeObject()
    {
        org.apache.commons.collections4.multiset.PredicatedMultiSetTest r0;
        org.apache.commons.collections4.MultiSet $r1;

        r0 := @this: org.apache.commons.collections4.multiset.PredicatedMultiSetTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.multiset.PredicatedMultiSetTest: org.apache.commons.collections4.MultiSet makeObject()>();

        return $r1;
    }

    public volatile java.lang.Object makeObject()
    {
        org.apache.commons.collections4.multiset.PredicatedMultiSetTest r0;
        org.apache.commons.collections4.MultiSet $r1;

        r0 := @this: org.apache.commons.collections4.multiset.PredicatedMultiSetTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.multiset.PredicatedMultiSetTest: org.apache.commons.collections4.MultiSet makeObject()>();

        return $r1;
    }
}
