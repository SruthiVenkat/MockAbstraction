public class org.apache.commons.collections4.functors.PrototypeFactory extends java.lang.Object
{

    public static org.apache.commons.collections4.Factory prototypeFactory(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.Class $r2, $r11, $r13, $r16, $r18;
        java.lang.Class[] $r3, $r12, $r17;
        org.apache.commons.collections4.functors.PrototypeFactory$PrototypeCloneFactory $r4;
        org.apache.commons.collections4.Factory $r5;
        java.lang.NoSuchMethodException $r6, $r10;
        boolean $z0;
        java.lang.IllegalArgumentException $r7;
        org.apache.commons.collections4.functors.PrototypeFactory$PrototypeSerializationFactory $r8;
        java.io.Serializable $r9;
        org.apache.commons.collections4.functors.InstantiateFactory $r15;
        java.lang.Object[] $r19;
        java.lang.reflect.Method r20;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        $r5 = staticinvoke <org.apache.commons.collections4.functors.ConstantFactory: org.apache.commons.collections4.Factory constantFactory(java.lang.Object)>(null);

        return $r5;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = (java.lang.Class[]) null;

        r20 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("clone", $r3);

        $r4 = new org.apache.commons.collections4.functors.PrototypeFactory$PrototypeCloneFactory;

        specialinvoke $r4.<org.apache.commons.collections4.functors.PrototypeFactory$PrototypeCloneFactory: void <init>(java.lang.Object,java.lang.reflect.Method,org.apache.commons.collections4.functors.PrototypeFactory$1)>(r0, r20, null);

     label2:
        return $r4;

     label3:
        $r10 := @caughtexception;

     label4:
        $r11 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = newarray (java.lang.Class)[1];

        $r13 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r12[0] = $r13;

        virtualinvoke $r11.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r12);

        $r15 = new org.apache.commons.collections4.functors.InstantiateFactory;

        $r16 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r17 = newarray (java.lang.Class)[1];

        $r18 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r17[0] = $r18;

        $r19 = newarray (java.lang.Object)[1];

        $r19[0] = r0;

        specialinvoke $r15.<org.apache.commons.collections4.functors.InstantiateFactory: void <init>(java.lang.Class,java.lang.Class[],java.lang.Object[])>($r16, $r17, $r19);

     label5:
        return $r15;

     label6:
        $r6 := @caughtexception;

        $z0 = r0 instanceof java.io.Serializable;

        if $z0 == 0 goto label7;

        $r8 = new org.apache.commons.collections4.functors.PrototypeFactory$PrototypeSerializationFactory;

        $r9 = (java.io.Serializable) r0;

        specialinvoke $r8.<org.apache.commons.collections4.functors.PrototypeFactory$PrototypeSerializationFactory: void <init>(java.io.Serializable,org.apache.commons.collections4.functors.PrototypeFactory$1)>($r9, null);

        return $r8;

     label7:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The prototype must be cloneable via a public clone method");

        throw $r7;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
        catch java.lang.NoSuchMethodException from label4 to label5 with label6;
    }

    private void <init>()
    {
        org.apache.commons.collections4.functors.PrototypeFactory r0;

        r0 := @this: org.apache.commons.collections4.functors.PrototypeFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
}
