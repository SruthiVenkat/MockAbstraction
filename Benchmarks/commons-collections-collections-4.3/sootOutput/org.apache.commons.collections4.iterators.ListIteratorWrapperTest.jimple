public class org.apache.commons.collections4.iterators.ListIteratorWrapperTest extends org.apache.commons.collections4.iterators.AbstractIteratorTest
{
    protected java.lang.String[] testArray;
    protected java.util.List list1;

    public void <init>(java.lang.String)
    {
        org.apache.commons.collections4.iterators.ListIteratorWrapperTest r0;
        java.lang.String r1;
        java.lang.String[] $r2;

        r0 := @this: org.apache.commons.collections4.iterators.ListIteratorWrapperTest;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.collections4.iterators.AbstractIteratorTest: void <init>(java.lang.String)>(r1);

        $r2 = newarray (java.lang.String)[6];

        $r2[0] = "One";

        $r2[1] = "Two";

        $r2[2] = "Three";

        $r2[3] = "Four";

        $r2[4] = "Five";

        $r2[5] = "Six";

        r0.<org.apache.commons.collections4.iterators.ListIteratorWrapperTest: java.lang.String[] testArray> = $r2;

        r0.<org.apache.commons.collections4.iterators.ListIteratorWrapperTest: java.util.List list1> = null;

        return;
    }

    public void setUp()
    {
        org.apache.commons.collections4.iterators.ListIteratorWrapperTest r0;
        java.util.ArrayList $r1;
        java.util.List $r2, $r3, $r4, $r5, $r6, $r7;

        r0 := @this: org.apache.commons.collections4.iterators.ListIteratorWrapperTest;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.collections4.iterators.ListIteratorWrapperTest: java.util.List list1> = $r1;

        $r2 = r0.<org.apache.commons.collections4.iterators.ListIteratorWrapperTest: java.util.List list1>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>("One");

        $r3 = r0.<org.apache.commons.collections4.iterators.ListIteratorWrapperTest: java.util.List list1>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>("Two");

        $r4 = r0.<org.apache.commons.collections4.iterators.ListIteratorWrapperTest: java.util.List list1>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>("Three");

        $r5 = r0.<org.apache.commons.collections4.iterators.ListIteratorWrapperTest: java.util.List list1>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>("Four");

        $r6 = r0.<org.apache.commons.collections4.iterators.ListIteratorWrapperTest: java.util.List list1>;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>("Five");

        $r7 = r0.<org.apache.commons.collections4.iterators.ListIteratorWrapperTest: java.util.List list1>;

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>("Six");

        return;
    }

    public org.apache.commons.collections4.ResettableListIterator makeEmptyIterator()
    {
        org.apache.commons.collections4.iterators.ListIteratorWrapperTest r0;
        java.util.ArrayList $r2;
        org.apache.commons.collections4.iterators.ListIteratorWrapper $r3;
        java.util.Iterator $r4;

        r0 := @this: org.apache.commons.collections4.iterators.ListIteratorWrapperTest;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = new org.apache.commons.collections4.iterators.ListIteratorWrapper;

        $r4 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>();

        specialinvoke $r3.<org.apache.commons.collections4.iterators.ListIteratorWrapper: void <init>(java.util.Iterator)>($r4);

        return $r3;
    }

    public org.apache.commons.collections4.ResettableListIterator makeObject()
    {
        org.apache.commons.collections4.iterators.ListIteratorWrapperTest r0;
        org.apache.commons.collections4.iterators.ListIteratorWrapper $r1;
        java.util.List $r2;
        java.util.Iterator $r3;

        r0 := @this: org.apache.commons.collections4.iterators.ListIteratorWrapperTest;

        $r1 = new org.apache.commons.collections4.iterators.ListIteratorWrapper;

        $r2 = r0.<org.apache.commons.collections4.iterators.ListIteratorWrapperTest: java.util.List list1>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        specialinvoke $r1.<org.apache.commons.collections4.iterators.ListIteratorWrapper: void <init>(java.util.Iterator)>($r3);

        return $r1;
    }

    public void testIterator()
    {
        org.apache.commons.collections4.iterators.ListIteratorWrapperTest r0;
        org.apache.commons.collections4.ResettableListIterator r1;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String[] $r4, $r6, r15, r22;
        int $i0, i1, i2, i3, i4, i5;
        java.lang.Exception $r7, $r11;
        java.lang.Class $r8, $r10, $r12, $r14;
        java.util.NoSuchElementException $r9, $r13;
        java.lang.String r16, r19, r23;
        java.lang.Object r17, r20, r24;

        r0 := @this: org.apache.commons.collections4.iterators.ListIteratorWrapperTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.ListIteratorWrapperTest: org.apache.commons.collections4.ResettableListIterator makeObject()>();

        r15 = r0.<org.apache.commons.collections4.iterators.ListIteratorWrapperTest: java.lang.String[] testArray>;

        i1 = lengthof r15;

        i2 = 0;

     label01:
        if i2 >= i1 goto label02;

        r16 = r15[i2];

        r17 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Iteration value is correct", r16, r17);

        i2 = i2 + 1;

        goto label01;

     label02:
        $z0 = interfaceinvoke r1.<java.util.ListIterator: boolean hasNext()>();

        if $z0 != 0 goto label03;

        $z3 = 1;

        goto label04;

     label03:
        $z3 = 0;

     label04:
        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void assertTrue(java.lang.String,boolean)>("Iterator should now be empty", $z3);

     label05:
        interfaceinvoke r1.<java.util.ListIterator: java.lang.Object next()>();

     label06:
        goto label08;

     label07:
        $r11 := @caughtexception;

        $r12 = virtualinvoke $r11.<java.lang.Object: java.lang.Class getClass()>();

        $r13 = new java.util.NoSuchElementException;

        specialinvoke $r13.<java.util.NoSuchElementException: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.Object: java.lang.Class getClass()>();

        $z2 = virtualinvoke $r12.<java.lang.Object: boolean equals(java.lang.Object)>($r14);

        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void assertTrue(java.lang.String,boolean)>("NoSuchElementException must be thrown", $z2);

     label08:
        $r4 = r0.<org.apache.commons.collections4.iterators.ListIteratorWrapperTest: java.lang.String[] testArray>;

        $i0 = lengthof $r4;

        i3 = $i0 - 1;

     label09:
        if i3 <= -1 goto label10;

        $r6 = r0.<org.apache.commons.collections4.iterators.ListIteratorWrapperTest: java.lang.String[] testArray>;

        r19 = $r6[i3];

        r20 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object previous()>();

        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Iteration value is correct", r19, r20);

        i3 = i3 + -1;

        goto label09;

     label10:
        interfaceinvoke r1.<java.util.ListIterator: java.lang.Object previous()>();

     label11:
        goto label13;

     label12:
        $r7 := @caughtexception;

        $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = new java.util.NoSuchElementException;

        specialinvoke $r9.<java.util.NoSuchElementException: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>($r10);

        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void assertTrue(java.lang.String,boolean)>("NoSuchElementException must be thrown", $z1);

     label13:
        r22 = r0.<org.apache.commons.collections4.iterators.ListIteratorWrapperTest: java.lang.String[] testArray>;

        i4 = lengthof r22;

        i5 = 0;

     label14:
        if i5 >= i4 goto label15;

        r23 = r22[i5];

        r24 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Iteration value is correct", r23, r24);

        i5 = i5 + 1;

        goto label14;

     label15:
        return;

        catch java.lang.Exception from label05 to label06 with label07;
        catch java.lang.Exception from label10 to label11 with label12;
    }

    public void testRemove()
    {
        org.apache.commons.collections4.iterators.ListIteratorWrapperTest r0;
        org.apache.commons.collections4.ResettableListIterator r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, i33, i34, i35, i36;
        java.util.List $r2, $r3, $r6, $r7, $r10, $r13, $r16, $r17, $r20, $r23, $r26, $r27;
        java.lang.Object $r4, $r5, $r8, $r9, $r11, $r12, $r14, $r15, $r18, $r19, $r21, $r22, $r24, $r25, $r28, $r29;
        java.lang.IllegalStateException $r30, $r31, $r32;

        r0 := @this: org.apache.commons.collections4.iterators.ListIteratorWrapperTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.ListIteratorWrapperTest: org.apache.commons.collections4.ResettableListIterator makeObject()>();

        $i0 = interfaceinvoke r1.<java.util.ListIterator: int previousIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void assertEquals(int,int)>(-1, $i0);

        $i1 = interfaceinvoke r1.<java.util.ListIterator: int nextIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void assertEquals(int,int)>(0, $i1);

     label01:
        interfaceinvoke r1.<java.util.ListIterator: void remove()>();

        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void fail(java.lang.String)>("ListIteratorWrapper#remove() should fail; must be initially positioned first");

     label02:
        goto label04;

     label03:
        $r32 := @caughtexception;

     label04:
        $i2 = interfaceinvoke r1.<java.util.ListIterator: int previousIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void assertEquals(int,int)>(-1, $i2);

        $i3 = interfaceinvoke r1.<java.util.ListIterator: int nextIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void assertEquals(int,int)>(0, $i3);

        $r2 = r0.<org.apache.commons.collections4.iterators.ListIteratorWrapperTest: java.util.List list1>;

        i33 = interfaceinvoke $r2.<java.util.List: int size()>();

        $r3 = r0.<org.apache.commons.collections4.iterators.ListIteratorWrapperTest: java.util.List list1>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(0);

        $r5 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void assertEquals(java.lang.Object,java.lang.Object)>($r4, $r5);

        $i4 = interfaceinvoke r1.<java.util.ListIterator: int previousIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void assertEquals(int,int)>(0, $i4);

        $i5 = interfaceinvoke r1.<java.util.ListIterator: int nextIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void assertEquals(int,int)>(1, $i5);

        interfaceinvoke r1.<java.util.ListIterator: void remove()>();

        i34 = i33 + -1;

        $r6 = r0.<org.apache.commons.collections4.iterators.ListIteratorWrapperTest: java.util.List list1>;

        $i6 = interfaceinvoke $r6.<java.util.List: int size()>();

        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void assertEquals(int,int)>(i34, $i6);

        $i7 = interfaceinvoke r1.<java.util.ListIterator: int previousIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void assertEquals(int,int)>(-1, $i7);

        $i8 = interfaceinvoke r1.<java.util.ListIterator: int nextIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void assertEquals(int,int)>(0, $i8);

     label05:
        interfaceinvoke r1.<java.util.ListIterator: void remove()>();

        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void fail(java.lang.String)>("ListIteratorWrapper#remove() should fail; must be repositioned first");

     label06:
        goto label08;

     label07:
        $r31 := @caughtexception;

     label08:
        $i9 = interfaceinvoke r1.<java.util.ListIterator: int previousIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void assertEquals(int,int)>(-1, $i9);

        $i10 = interfaceinvoke r1.<java.util.ListIterator: int nextIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void assertEquals(int,int)>(0, $i10);

        $r7 = r0.<org.apache.commons.collections4.iterators.ListIteratorWrapperTest: java.util.List list1>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(0);

        $r9 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void assertEquals(java.lang.Object,java.lang.Object)>($r8, $r9);

        $i11 = interfaceinvoke r1.<java.util.ListIterator: int previousIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void assertEquals(int,int)>(0, $i11);

        $i12 = interfaceinvoke r1.<java.util.ListIterator: int nextIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void assertEquals(int,int)>(1, $i12);

        $r10 = r0.<org.apache.commons.collections4.iterators.ListIteratorWrapperTest: java.util.List list1>;

        $r11 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>(1);

        $r12 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void assertEquals(java.lang.Object,java.lang.Object)>($r11, $r12);

        $i13 = interfaceinvoke r1.<java.util.ListIterator: int previousIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void assertEquals(int,int)>(1, $i13);

        $i14 = interfaceinvoke r1.<java.util.ListIterator: int nextIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void assertEquals(int,int)>(2, $i14);

        $r13 = r0.<org.apache.commons.collections4.iterators.ListIteratorWrapperTest: java.util.List list1>;

        $r14 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>(1);

        $r15 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object previous()>();

        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void assertEquals(java.lang.Object,java.lang.Object)>($r14, $r15);

        $i15 = interfaceinvoke r1.<java.util.ListIterator: int previousIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void assertEquals(int,int)>(0, $i15);

        $i16 = interfaceinvoke r1.<java.util.ListIterator: int nextIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void assertEquals(int,int)>(1, $i16);

        interfaceinvoke r1.<java.util.ListIterator: void remove()>();

        i35 = i34 + -1;

        $r16 = r0.<org.apache.commons.collections4.iterators.ListIteratorWrapperTest: java.util.List list1>;

        $i17 = interfaceinvoke $r16.<java.util.List: int size()>();

        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void assertEquals(int,int)>(i35, $i17);

        $i18 = interfaceinvoke r1.<java.util.ListIterator: int previousIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void assertEquals(int,int)>(0, $i18);

        $i19 = interfaceinvoke r1.<java.util.ListIterator: int nextIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void assertEquals(int,int)>(1, $i19);

        $r17 = r0.<org.apache.commons.collections4.iterators.ListIteratorWrapperTest: java.util.List list1>;

        $r18 = interfaceinvoke $r17.<java.util.List: java.lang.Object get(int)>(0);

        $r19 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object previous()>();

        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void assertEquals(java.lang.Object,java.lang.Object)>($r18, $r19);

        $i20 = interfaceinvoke r1.<java.util.ListIterator: int previousIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void assertEquals(int,int)>(-1, $i20);

        $i21 = interfaceinvoke r1.<java.util.ListIterator: int nextIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void assertEquals(int,int)>(0, $i21);

     label09:
        interfaceinvoke r1.<java.util.ListIterator: void remove()>();

        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void fail(java.lang.String)>("ListIteratorWrapper does not support the remove() method while dug into the cache via previous()");

     label10:
        goto label12;

     label11:
        $r30 := @caughtexception;

     label12:
        $i22 = interfaceinvoke r1.<java.util.ListIterator: int previousIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void assertEquals(int,int)>(-1, $i22);

        $i23 = interfaceinvoke r1.<java.util.ListIterator: int nextIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void assertEquals(int,int)>(0, $i23);

        $r20 = r0.<org.apache.commons.collections4.iterators.ListIteratorWrapperTest: java.util.List list1>;

        $r21 = interfaceinvoke $r20.<java.util.List: java.lang.Object get(int)>(0);

        $r22 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void assertEquals(java.lang.Object,java.lang.Object)>($r21, $r22);

        $i24 = interfaceinvoke r1.<java.util.ListIterator: int previousIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void assertEquals(int,int)>(0, $i24);

        $i25 = interfaceinvoke r1.<java.util.ListIterator: int nextIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void assertEquals(int,int)>(1, $i25);

        $r23 = r0.<org.apache.commons.collections4.iterators.ListIteratorWrapperTest: java.util.List list1>;

        $r24 = interfaceinvoke $r23.<java.util.List: java.lang.Object get(int)>(1);

        $r25 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void assertEquals(java.lang.Object,java.lang.Object)>($r24, $r25);

        $i26 = interfaceinvoke r1.<java.util.ListIterator: int previousIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void assertEquals(int,int)>(1, $i26);

        $i27 = interfaceinvoke r1.<java.util.ListIterator: int nextIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void assertEquals(int,int)>(2, $i27);

        interfaceinvoke r1.<java.util.ListIterator: void remove()>();

        i36 = i35 + -1;

        $r26 = r0.<org.apache.commons.collections4.iterators.ListIteratorWrapperTest: java.util.List list1>;

        $i28 = interfaceinvoke $r26.<java.util.List: int size()>();

        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void assertEquals(int,int)>(i36, $i28);

        $i29 = interfaceinvoke r1.<java.util.ListIterator: int previousIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void assertEquals(int,int)>(0, $i29);

        $i30 = interfaceinvoke r1.<java.util.ListIterator: int nextIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void assertEquals(int,int)>(1, $i30);

        $r27 = r0.<org.apache.commons.collections4.iterators.ListIteratorWrapperTest: java.util.List list1>;

        $r28 = interfaceinvoke $r27.<java.util.List: java.lang.Object get(int)>(1);

        $r29 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void assertEquals(java.lang.Object,java.lang.Object)>($r28, $r29);

        $i31 = interfaceinvoke r1.<java.util.ListIterator: int previousIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void assertEquals(int,int)>(1, $i31);

        $i32 = interfaceinvoke r1.<java.util.ListIterator: int nextIndex()>();

        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void assertEquals(int,int)>(2, $i32);

        return;

        catch java.lang.IllegalStateException from label01 to label02 with label03;
        catch java.lang.IllegalStateException from label05 to label06 with label07;
        catch java.lang.IllegalStateException from label09 to label10 with label11;
    }

    public void testReset()
    {
        org.apache.commons.collections4.iterators.ListIteratorWrapperTest r0;
        org.apache.commons.collections4.ResettableListIterator r1;
        java.lang.Object r2, r3, r5, $r6, $r7;
        java.lang.String r4;
        boolean $z0;
        java.lang.String[] $r8, $r9;
        int $i0, i1;

        r0 := @this: org.apache.commons.collections4.iterators.ListIteratorWrapperTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.ListIteratorWrapperTest: org.apache.commons.collections4.ResettableListIterator makeObject()>();

        r2 = interfaceinvoke r1.<org.apache.commons.collections4.ResettableListIterator: java.lang.Object next()>();

        r3 = interfaceinvoke r1.<org.apache.commons.collections4.ResettableListIterator: java.lang.Object next()>();

        interfaceinvoke r1.<org.apache.commons.collections4.ResettableListIterator: void reset()>();

        $z0 = interfaceinvoke r1.<org.apache.commons.collections4.ResettableListIterator: boolean hasPrevious()>();

        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void assertFalse(java.lang.String,boolean)>("No previous elements after reset()", $z0);

        $r6 = interfaceinvoke r1.<org.apache.commons.collections4.ResettableListIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("First element should be the same", r2, $r6);

        $r7 = interfaceinvoke r1.<org.apache.commons.collections4.ResettableListIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Second elment should be the same", r3, $r7);

        i1 = 2;

     label1:
        $r8 = r0.<org.apache.commons.collections4.iterators.ListIteratorWrapperTest: java.lang.String[] testArray>;

        $i0 = lengthof $r8;

        if i1 >= $i0 goto label2;

        $r9 = r0.<org.apache.commons.collections4.iterators.ListIteratorWrapperTest: java.lang.String[] testArray>;

        r4 = $r9[i1];

        r5 = interfaceinvoke r1.<org.apache.commons.collections4.ResettableListIterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.ListIteratorWrapperTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Iteration value is correct", r4, r5);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public volatile java.util.Iterator makeObject()
    {
        org.apache.commons.collections4.iterators.ListIteratorWrapperTest r0;
        org.apache.commons.collections4.ResettableListIterator $r1;

        r0 := @this: org.apache.commons.collections4.iterators.ListIteratorWrapperTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.ListIteratorWrapperTest: org.apache.commons.collections4.ResettableListIterator makeObject()>();

        return $r1;
    }

    public volatile java.util.Iterator makeEmptyIterator()
    {
        org.apache.commons.collections4.iterators.ListIteratorWrapperTest r0;
        org.apache.commons.collections4.ResettableListIterator $r1;

        r0 := @this: org.apache.commons.collections4.iterators.ListIteratorWrapperTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.ListIteratorWrapperTest: org.apache.commons.collections4.ResettableListIterator makeEmptyIterator()>();

        return $r1;
    }

    public volatile java.lang.Object makeObject()
    {
        org.apache.commons.collections4.iterators.ListIteratorWrapperTest r0;
        org.apache.commons.collections4.ResettableListIterator $r1;

        r0 := @this: org.apache.commons.collections4.iterators.ListIteratorWrapperTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.ListIteratorWrapperTest: org.apache.commons.collections4.ResettableListIterator makeObject()>();

        return $r1;
    }
}
