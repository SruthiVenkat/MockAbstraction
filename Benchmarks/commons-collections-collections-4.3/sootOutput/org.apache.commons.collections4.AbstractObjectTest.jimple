public abstract class org.apache.commons.collections4.AbstractObjectTest extends org.apache.commons.collections4.BulkTest
{
    public static final int COLLECTIONS_MAJOR_VERSION;

    public void <init>(java.lang.String)
    {
        org.apache.commons.collections4.AbstractObjectTest r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.collections4.AbstractObjectTest;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.collections4.BulkTest: void <init>(java.lang.String)>(r1);

        return;
    }

    public abstract java.lang.Object makeObject();

    public boolean supportsEmptyCollections()
    {
        org.apache.commons.collections4.AbstractObjectTest r0;

        r0 := @this: org.apache.commons.collections4.AbstractObjectTest;

        return 1;
    }

    public boolean supportsFullCollections()
    {
        org.apache.commons.collections4.AbstractObjectTest r0;

        r0 := @this: org.apache.commons.collections4.AbstractObjectTest;

        return 1;
    }

    public boolean isTestSerialization()
    {
        org.apache.commons.collections4.AbstractObjectTest r0;

        r0 := @this: org.apache.commons.collections4.AbstractObjectTest;

        return 1;
    }

    public boolean isEqualsCheckable()
    {
        org.apache.commons.collections4.AbstractObjectTest r0;

        r0 := @this: org.apache.commons.collections4.AbstractObjectTest;

        return 1;
    }

    public void testObjectEqualsSelf()
    {
        org.apache.commons.collections4.AbstractObjectTest r0;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.collections4.AbstractObjectTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.AbstractObjectTest: java.lang.Object makeObject()>();

        staticinvoke <org.apache.commons.collections4.AbstractObjectTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("A Object should equal itself", r1, r1);

        return;
    }

    public void testEqualsNull()
    {
        org.apache.commons.collections4.AbstractObjectTest r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.AbstractObjectTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.AbstractObjectTest: java.lang.Object makeObject()>();

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(null);

        staticinvoke <org.apache.commons.collections4.AbstractObjectTest: void assertEquals(boolean,boolean)>(0, $z0);

        return;
    }

    public void testObjectHashCodeEqualsSelfHashCode()
    {
        org.apache.commons.collections4.AbstractObjectTest r0;
        java.lang.Object r1;
        int $i0, $i1;

        r0 := @this: org.apache.commons.collections4.AbstractObjectTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.AbstractObjectTest: java.lang.Object makeObject()>();

        $i0 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        staticinvoke <org.apache.commons.collections4.AbstractObjectTest: void assertEquals(java.lang.String,int,int)>("hashCode should be repeatable", $i0, $i1);

        return;
    }

    public void testObjectHashCodeEqualsContract()
    {
        org.apache.commons.collections4.AbstractObjectTest r0;
        java.lang.Object r1, r2;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.commons.collections4.AbstractObjectTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.AbstractObjectTest: java.lang.Object makeObject()>();

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $i2 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        $i3 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        staticinvoke <org.apache.commons.collections4.AbstractObjectTest: void assertEquals(java.lang.String,int,int)>("[1] When two objects are equal, their hashCodes should be also.", $i2, $i3);

     label1:
        r2 = virtualinvoke r0.<org.apache.commons.collections4.AbstractObjectTest: java.lang.Object makeObject()>();

        $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r2);

        if $z1 == 0 goto label2;

        $i0 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        $i1 = virtualinvoke r2.<java.lang.Object: int hashCode()>();

        staticinvoke <org.apache.commons.collections4.AbstractObjectTest: void assertEquals(java.lang.String,int,int)>("[2] When two objects are equal, their hashCodes should be also.", $i0, $i1);

        $z2 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        staticinvoke <org.apache.commons.collections4.AbstractObjectTest: void assertTrue(java.lang.String,boolean)>("When obj1.equals(obj2) is true, then obj2.equals(obj1) should also be true", $z2);

     label2:
        return;
    }

    protected java.lang.Object serializeDeserialize(java.lang.Object) throws java.lang.Exception
    {
        org.apache.commons.collections4.AbstractObjectTest r0;
        java.lang.Object r1, r5;
        java.io.ByteArrayOutputStream $r6;
        java.io.ObjectOutputStream $r7;
        java.io.ObjectInputStream $r8;
        java.io.ByteArrayInputStream $r9;
        byte[] $r10;

        r0 := @this: org.apache.commons.collections4.AbstractObjectTest;

        r1 := @parameter0: java.lang.Object;

        $r6 = new java.io.ByteArrayOutputStream;

        specialinvoke $r6.<java.io.ByteArrayOutputStream: void <init>()>();

        $r7 = new java.io.ObjectOutputStream;

        specialinvoke $r7.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>($r6);

        virtualinvoke $r7.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(r1);

        virtualinvoke $r7.<java.io.ObjectOutputStream: void close()>();

        $r8 = new java.io.ObjectInputStream;

        $r9 = new java.io.ByteArrayInputStream;

        $r10 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r9.<java.io.ByteArrayInputStream: void <init>(byte[])>($r10);

        specialinvoke $r8.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>($r9);

        r5 = virtualinvoke $r8.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        virtualinvoke $r8.<java.io.ObjectInputStream: void close()>();

        return r5;
    }

    public void testSerializeDeserializeThenCompare() throws java.lang.Exception
    {
        org.apache.commons.collections4.AbstractObjectTest r0;
        java.lang.Object r1, r2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.commons.collections4.AbstractObjectTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.AbstractObjectTest: java.lang.Object makeObject()>();

        $z0 = r1 instanceof java.io.Serializable;

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.AbstractObjectTest: boolean isTestSerialization()>();

        if $z1 == 0 goto label1;

        r2 = virtualinvoke r0.<org.apache.commons.collections4.AbstractObjectTest: java.lang.Object serializeDeserialize(java.lang.Object)>(r1);

        $z2 = virtualinvoke r0.<org.apache.commons.collections4.AbstractObjectTest: boolean isEqualsCheckable()>();

        if $z2 == 0 goto label1;

        staticinvoke <org.apache.commons.collections4.AbstractObjectTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("obj != deserialize(serialize(obj))", r1, r2);

     label1:
        return;
    }

    public void testSimpleSerialization() throws java.lang.Exception
    {
        org.apache.commons.collections4.AbstractObjectTest r0;
        java.lang.Object r1;
        byte[] r2;
        boolean $z0, $z1;
        java.io.Serializable $r3;

        r0 := @this: org.apache.commons.collections4.AbstractObjectTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.AbstractObjectTest: java.lang.Object makeObject()>();

        $z0 = r1 instanceof java.io.Serializable;

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.AbstractObjectTest: boolean isTestSerialization()>();

        if $z1 == 0 goto label1;

        $r3 = (java.io.Serializable) r1;

        r2 = virtualinvoke r0.<org.apache.commons.collections4.AbstractObjectTest: byte[] writeExternalFormToBytes(java.io.Serializable)>($r3);

        virtualinvoke r0.<org.apache.commons.collections4.AbstractObjectTest: java.lang.Object readExternalFormFromBytes(byte[])>(r2);

     label1:
        return;
    }

    public void testCanonicalEmptyCollectionExists()
    {
        org.apache.commons.collections4.AbstractObjectTest r0;
        java.lang.Object r1;
        java.lang.String r2, $r7;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.io.File $r8;

        r0 := @this: org.apache.commons.collections4.AbstractObjectTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.AbstractObjectTest: boolean supportsEmptyCollections()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.AbstractObjectTest: boolean isTestSerialization()>();

        if $z1 == 0 goto label1;

        $z2 = virtualinvoke r0.<org.apache.commons.collections4.AbstractObjectTest: boolean skipSerializedCanonicalTests()>();

        if $z2 != 0 goto label1;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.AbstractObjectTest: java.lang.Object makeObject()>();

        $z3 = r1 instanceof java.io.Serializable;

        if $z3 == 0 goto label1;

        r2 = virtualinvoke r0.<org.apache.commons.collections4.AbstractObjectTest: java.lang.String getCanonicalEmptyCollectionName(java.lang.Object)>(r1);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Canonical empty collection (");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is not in SVN");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = new java.io.File;

        specialinvoke $r8.<java.io.File: void <init>(java.lang.String)>(r2);

        $z4 = virtualinvoke $r8.<java.io.File: boolean exists()>();

        staticinvoke <org.apache.commons.collections4.AbstractObjectTest: void assertTrue(java.lang.String,boolean)>($r7, $z4);

     label1:
        return;
    }

    public void testCanonicalFullCollectionExists()
    {
        org.apache.commons.collections4.AbstractObjectTest r0;
        java.lang.Object r1;
        java.lang.String r2, $r7;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.io.File $r8;

        r0 := @this: org.apache.commons.collections4.AbstractObjectTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.AbstractObjectTest: boolean supportsFullCollections()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.AbstractObjectTest: boolean isTestSerialization()>();

        if $z1 == 0 goto label1;

        $z2 = virtualinvoke r0.<org.apache.commons.collections4.AbstractObjectTest: boolean skipSerializedCanonicalTests()>();

        if $z2 != 0 goto label1;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.AbstractObjectTest: java.lang.Object makeObject()>();

        $z3 = r1 instanceof java.io.Serializable;

        if $z3 == 0 goto label1;

        r2 = virtualinvoke r0.<org.apache.commons.collections4.AbstractObjectTest: java.lang.String getCanonicalFullCollectionName(java.lang.Object)>(r1);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Canonical full collection (");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is not in SVN");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = new java.io.File;

        specialinvoke $r8.<java.io.File: void <init>(java.lang.String)>(r2);

        $z4 = virtualinvoke $r8.<java.io.File: boolean exists()>();

        staticinvoke <org.apache.commons.collections4.AbstractObjectTest: void assertTrue(java.lang.String,boolean)>($r7, $z4);

     label1:
        return;
    }

    public java.lang.String getCompatibilityVersion()
    {
        org.apache.commons.collections4.AbstractObjectTest r0;

        r0 := @this: org.apache.commons.collections4.AbstractObjectTest;

        return "4";
    }

    protected java.lang.String getCanonicalEmptyCollectionName(java.lang.Object)
    {
        org.apache.commons.collections4.AbstractObjectTest r0;
        java.lang.Object r1;
        java.lang.StringBuilder $r3;
        java.lang.Class $r5;
        int $i0, $i1, $i2;
        java.lang.String $r8, $r11, r12, r13;

        r0 := @this: org.apache.commons.collections4.AbstractObjectTest;

        r1 := @parameter0: java.lang.Object;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("src/test/resources/data/test/");

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        r12 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $i0 = virtualinvoke r12.<java.lang.String: int lastIndexOf(java.lang.String)>(".");

        $i1 = $i0 + 1;

        $i2 = virtualinvoke r12.<java.lang.String: int length()>();

        r13 = virtualinvoke r12.<java.lang.String: java.lang.String substring(int,int)>($i1, $i2);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".emptyCollection.version");

        $r8 = virtualinvoke r0.<org.apache.commons.collections4.AbstractObjectTest: java.lang.String getCompatibilityVersion()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".obj");

        $r11 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    protected java.lang.String getCanonicalFullCollectionName(java.lang.Object)
    {
        org.apache.commons.collections4.AbstractObjectTest r0;
        java.lang.Object r1;
        java.lang.StringBuilder $r3;
        java.lang.Class $r5;
        int $i0, $i1, $i2;
        java.lang.String $r8, $r11, r12, r13;

        r0 := @this: org.apache.commons.collections4.AbstractObjectTest;

        r1 := @parameter0: java.lang.Object;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("src/test/resources/data/test/");

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        r12 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $i0 = virtualinvoke r12.<java.lang.String: int lastIndexOf(java.lang.String)>(".");

        $i1 = $i0 + 1;

        $i2 = virtualinvoke r12.<java.lang.String: int length()>();

        r13 = virtualinvoke r12.<java.lang.String: java.lang.String substring(int,int)>($i1, $i2);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".fullCollection.version");

        $r8 = virtualinvoke r0.<org.apache.commons.collections4.AbstractObjectTest: java.lang.String getCompatibilityVersion()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".obj");

        $r11 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    protected void writeExternalFormToDisk(java.io.Serializable, java.lang.String) throws java.io.IOException
    {
        org.apache.commons.collections4.AbstractObjectTest r0;
        java.io.Serializable r1;
        java.lang.String r2;
        java.io.FileOutputStream $r5;
        java.lang.Throwable $r6;

        r0 := @this: org.apache.commons.collections4.AbstractObjectTest;

        r1 := @parameter0: java.io.Serializable;

        r2 := @parameter1: java.lang.String;

        $r5 = new java.io.FileOutputStream;

        specialinvoke $r5.<java.io.FileOutputStream: void <init>(java.lang.String)>(r2);

     label1:
        specialinvoke r0.<org.apache.commons.collections4.AbstractObjectTest: void writeExternalFormToStream(java.io.Serializable,java.io.OutputStream)>(r1, $r5);

     label2:
        virtualinvoke $r5.<java.io.FileOutputStream: void close()>();

        goto label5;

     label3:
        $r6 := @caughtexception;

     label4:
        virtualinvoke $r5.<java.io.FileOutputStream: void close()>();

        throw $r6;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected byte[] writeExternalFormToBytes(java.io.Serializable) throws java.io.IOException
    {
        org.apache.commons.collections4.AbstractObjectTest r0;
        java.io.Serializable r1;
        java.io.ByteArrayOutputStream $r3;
        byte[] $r4;

        r0 := @this: org.apache.commons.collections4.AbstractObjectTest;

        r1 := @parameter0: java.io.Serializable;

        $r3 = new java.io.ByteArrayOutputStream;

        specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>()>();

        specialinvoke r0.<org.apache.commons.collections4.AbstractObjectTest: void writeExternalFormToStream(java.io.Serializable,java.io.OutputStream)>(r1, $r3);

        $r4 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r4;
    }

    protected java.lang.Object readExternalFormFromDisk(java.lang.String) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.commons.collections4.AbstractObjectTest r0;
        java.lang.String r1;
        java.lang.Object r3;
        java.io.FileInputStream $r5;
        java.lang.Throwable $r6;

        r0 := @this: org.apache.commons.collections4.AbstractObjectTest;

        r1 := @parameter0: java.lang.String;

        $r5 = new java.io.FileInputStream;

        specialinvoke $r5.<java.io.FileInputStream: void <init>(java.lang.String)>(r1);

     label1:
        r3 = specialinvoke r0.<org.apache.commons.collections4.AbstractObjectTest: java.lang.Object readExternalFormFromStream(java.io.InputStream)>($r5);

     label2:
        virtualinvoke $r5.<java.io.FileInputStream: void close()>();

        return r3;

     label3:
        $r6 := @caughtexception;

     label4:
        virtualinvoke $r5.<java.io.FileInputStream: void close()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected java.lang.Object readExternalFormFromBytes(byte[]) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.commons.collections4.AbstractObjectTest r0;
        byte[] r1;
        java.io.ByteArrayInputStream $r3;
        java.lang.Object $r4;

        r0 := @this: org.apache.commons.collections4.AbstractObjectTest;

        r1 := @parameter0: byte[];

        $r3 = new java.io.ByteArrayInputStream;

        specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1);

        $r4 = specialinvoke r0.<org.apache.commons.collections4.AbstractObjectTest: java.lang.Object readExternalFormFromStream(java.io.InputStream)>($r3);

        return $r4;
    }

    protected boolean skipSerializedCanonicalTests()
    {
        org.apache.commons.collections4.AbstractObjectTest r0;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.AbstractObjectTest;

        $z0 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("org.apache.commons.collections:with-clover");

        return $z0;
    }

    private java.lang.Object readExternalFormFromStream(java.io.InputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.commons.collections4.AbstractObjectTest r0;
        java.io.InputStream r1;
        java.io.ObjectInputStream $r3;
        java.lang.Object $r4;

        r0 := @this: org.apache.commons.collections4.AbstractObjectTest;

        r1 := @parameter0: java.io.InputStream;

        $r3 = new java.io.ObjectInputStream;

        specialinvoke $r3.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>(r1);

        $r4 = virtualinvoke $r3.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        return $r4;
    }

    private void writeExternalFormToStream(java.io.Serializable, java.io.OutputStream) throws java.io.IOException
    {
        org.apache.commons.collections4.AbstractObjectTest r0;
        java.io.Serializable r1;
        java.io.OutputStream r2;
        java.io.ObjectOutputStream $r4;

        r0 := @this: org.apache.commons.collections4.AbstractObjectTest;

        r1 := @parameter0: java.io.Serializable;

        r2 := @parameter1: java.io.OutputStream;

        $r4 = new java.io.ObjectOutputStream;

        specialinvoke $r4.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>(r2);

        virtualinvoke $r4.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(r1);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.commons.collections4.AbstractObjectTest: int COLLECTIONS_MAJOR_VERSION> = 4;

        return;
    }
}
