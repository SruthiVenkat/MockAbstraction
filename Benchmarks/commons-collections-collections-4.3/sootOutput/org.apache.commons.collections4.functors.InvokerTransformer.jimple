public class org.apache.commons.collections4.functors.InvokerTransformer extends java.lang.Object implements org.apache.commons.collections4.Transformer
{
    private final java.lang.String iMethodName;
    private final java.lang.Class[] iParamTypes;
    private final java.lang.Object[] iArgs;

    public static org.apache.commons.collections4.Transformer invokerTransformer(java.lang.String)
    {
        java.lang.String r0;
        org.apache.commons.collections4.functors.InvokerTransformer $r1;
        java.lang.NullPointerException $r2;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("The method to invoke must not be null");

        throw $r2;

     label1:
        $r1 = new org.apache.commons.collections4.functors.InvokerTransformer;

        specialinvoke $r1.<org.apache.commons.collections4.functors.InvokerTransformer: void <init>(java.lang.String)>(r0);

        return $r1;
    }

    public static org.apache.commons.collections4.Transformer invokerTransformer(java.lang.String, java.lang.Class[], java.lang.Object[])
    {
        java.lang.String r0;
        java.lang.Class[] r1;
        java.lang.Object[] r2;
        org.apache.commons.collections4.functors.InvokerTransformer $r3, $r4;
        int $i0, $i1, $i2;
        java.lang.NullPointerException $r5;
        java.lang.IllegalArgumentException $r6;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Class[];

        r2 := @parameter2: java.lang.Object[];

        if r0 != null goto label1;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("The method to invoke must not be null");

        throw $r5;

     label1:
        if r1 != null goto label2;

        if r2 != null goto label4;

     label2:
        if r1 == null goto label3;

        if r2 == null goto label4;

     label3:
        if r1 == null goto label5;

        if r2 == null goto label5;

        $i2 = lengthof r1;

        $i1 = lengthof r2;

        if $i2 == $i1 goto label5;

     label4:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The parameter types must match the arguments");

        throw $r6;

     label5:
        if r1 == null goto label6;

        $i0 = lengthof r1;

        if $i0 != 0 goto label7;

     label6:
        $r3 = new org.apache.commons.collections4.functors.InvokerTransformer;

        specialinvoke $r3.<org.apache.commons.collections4.functors.InvokerTransformer: void <init>(java.lang.String)>(r0);

        return $r3;

     label7:
        $r4 = new org.apache.commons.collections4.functors.InvokerTransformer;

        specialinvoke $r4.<org.apache.commons.collections4.functors.InvokerTransformer: void <init>(java.lang.String,java.lang.Class[],java.lang.Object[])>(r0, r1, r2);

        return $r4;
    }

    private void <init>(java.lang.String)
    {
        org.apache.commons.collections4.functors.InvokerTransformer r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.collections4.functors.InvokerTransformer;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.collections4.functors.InvokerTransformer: java.lang.String iMethodName> = r1;

        r0.<org.apache.commons.collections4.functors.InvokerTransformer: java.lang.Class[] iParamTypes> = null;

        r0.<org.apache.commons.collections4.functors.InvokerTransformer: java.lang.Object[] iArgs> = null;

        return;
    }

    public void <init>(java.lang.String, java.lang.Class[], java.lang.Object[])
    {
        org.apache.commons.collections4.functors.InvokerTransformer r0;
        java.lang.String r1;
        java.lang.Class[] r2, $r8;
        java.lang.Object[] r3, $r9;
        java.lang.Object $r4, $r6;

        r0 := @this: org.apache.commons.collections4.functors.InvokerTransformer;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class[];

        r3 := @parameter2: java.lang.Object[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.collections4.functors.InvokerTransformer: java.lang.String iMethodName> = r1;

        if r2 == null goto label1;

        $r6 = virtualinvoke r2.<java.lang.Object: java.lang.Object clone()>();

        $r8 = (java.lang.Class[]) $r6;

        goto label2;

     label1:
        $r8 = null;

     label2:
        r0.<org.apache.commons.collections4.functors.InvokerTransformer: java.lang.Class[] iParamTypes> = $r8;

        if r3 == null goto label3;

        $r4 = virtualinvoke r3.<java.lang.Object: java.lang.Object clone()>();

        $r9 = (java.lang.Object[]) $r4;

        goto label4;

     label3:
        $r9 = null;

     label4:
        r0.<org.apache.commons.collections4.functors.InvokerTransformer: java.lang.Object[] iArgs> = $r9;

        return;
    }

    public java.lang.Object transform(java.lang.Object)
    {
        org.apache.commons.collections4.functors.InvokerTransformer r0;
        java.lang.Object r1, $r6;
        java.lang.reflect.Method r2;
        java.lang.Class[] $r3;
        java.lang.String $r4, $r11, $r17, $r22, $r28, $r33, $r39;
        java.lang.Object[] $r5;
        java.lang.reflect.InvocationTargetException $r7;
        org.apache.commons.collections4.FunctorException $r8, $r19, $r30;
        java.lang.StringBuilder $r9, $r10, $r12, $r13, $r15, $r16, $r20, $r21, $r23, $r24, $r26, $r27, $r31, $r32, $r34, $r35, $r37, $r38;
        java.lang.Class $r14, $r25, $r36, r40;
        java.lang.NoSuchMethodException $r18;
        java.lang.IllegalAccessException $r29;

        r0 := @this: org.apache.commons.collections4.functors.InvokerTransformer;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        return null;

     label1:
        r40 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = r0.<org.apache.commons.collections4.functors.InvokerTransformer: java.lang.String iMethodName>;

        $r3 = r0.<org.apache.commons.collections4.functors.InvokerTransformer: java.lang.Class[] iParamTypes>;

        r2 = virtualinvoke r40.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>($r4, $r3);

        $r5 = r0.<org.apache.commons.collections4.functors.InvokerTransformer: java.lang.Object[] iArgs>;

        $r6 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r1, $r5);

     label2:
        return $r6;

     label3:
        $r18 := @caughtexception;

        $r19 = new org.apache.commons.collections4.FunctorException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("InvokerTransformer: The method \'");

        $r22 = r0.<org.apache.commons.collections4.functors.InvokerTransformer: java.lang.String iMethodName>;

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' on \'");

        $r25 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not exist");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<org.apache.commons.collections4.FunctorException: void <init>(java.lang.String)>($r28);

        throw $r19;

     label4:
        $r29 := @caughtexception;

        $r30 = new org.apache.commons.collections4.FunctorException;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("InvokerTransformer: The method \'");

        $r33 = r0.<org.apache.commons.collections4.functors.InvokerTransformer: java.lang.String iMethodName>;

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' on \'");

        $r36 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' cannot be accessed");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<org.apache.commons.collections4.FunctorException: void <init>(java.lang.String)>($r39);

        throw $r30;

     label5:
        $r7 := @caughtexception;

        $r8 = new org.apache.commons.collections4.FunctorException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("InvokerTransformer: The method \'");

        $r11 = r0.<org.apache.commons.collections4.functors.InvokerTransformer: java.lang.String iMethodName>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' on \'");

        $r14 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' threw an exception");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.apache.commons.collections4.FunctorException: void <init>(java.lang.String,java.lang.Throwable)>($r17, $r7);

        throw $r8;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label5;
    }
}
