class org.apache.commons.collections4.BulkTestSuiteMaker extends java.lang.Object
{
    private final java.lang.Class startingClass;
    private java.util.List ignored;
    private junit.framework.TestSuite result;
    private java.lang.String prefix;

    public void <init>(java.lang.Class)
    {
        org.apache.commons.collections4.BulkTestSuiteMaker r0;
        java.lang.Class r1;

        r0 := @this: org.apache.commons.collections4.BulkTestSuiteMaker;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.collections4.BulkTestSuiteMaker: java.lang.Class startingClass> = r1;

        return;
    }

    public junit.framework.TestSuite make()
    {
        org.apache.commons.collections4.BulkTestSuiteMaker r0;
        org.apache.commons.collections4.BulkTest r1;
        java.lang.String[] r2;
        junit.framework.TestSuite $r3, $r7, $r10;
        java.lang.Class $r4, $r8;
        java.lang.String $r5, $r6;
        java.util.ArrayList $r9;
        java.util.List $r11, $r12;

        r0 := @this: org.apache.commons.collections4.BulkTestSuiteMaker;

        $r3 = new junit.framework.TestSuite;

        specialinvoke $r3.<junit.framework.TestSuite: void <init>()>();

        r0.<org.apache.commons.collections4.BulkTestSuiteMaker: junit.framework.TestSuite result> = $r3;

        $r4 = r0.<org.apache.commons.collections4.BulkTestSuiteMaker: java.lang.Class startingClass>;

        $r5 = staticinvoke <org.apache.commons.collections4.BulkTestSuiteMaker: java.lang.String getBaseName(java.lang.Class)>($r4);

        r0.<org.apache.commons.collections4.BulkTestSuiteMaker: java.lang.String prefix> = $r5;

        $r7 = r0.<org.apache.commons.collections4.BulkTestSuiteMaker: junit.framework.TestSuite result>;

        $r6 = r0.<org.apache.commons.collections4.BulkTestSuiteMaker: java.lang.String prefix>;

        virtualinvoke $r7.<junit.framework.TestSuite: void setName(java.lang.String)>($r6);

        $r8 = r0.<org.apache.commons.collections4.BulkTestSuiteMaker: java.lang.Class startingClass>;

        r1 = staticinvoke <org.apache.commons.collections4.BulkTestSuiteMaker: org.apache.commons.collections4.BulkTest makeFirstTestCase(java.lang.Class)>($r8);

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.collections4.BulkTestSuiteMaker: java.util.List ignored> = $r9;

        r2 = virtualinvoke r1.<org.apache.commons.collections4.BulkTest: java.lang.String[] ignoredTests()>();

        if r2 == null goto label1;

        $r11 = r0.<org.apache.commons.collections4.BulkTestSuiteMaker: java.util.List ignored>;

        $r12 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r2);

        interfaceinvoke $r11.<java.util.List: boolean addAll(java.util.Collection)>($r12);

     label1:
        virtualinvoke r0.<org.apache.commons.collections4.BulkTestSuiteMaker: void make(org.apache.commons.collections4.BulkTest)>(r1);

        $r10 = r0.<org.apache.commons.collections4.BulkTestSuiteMaker: junit.framework.TestSuite result>;

        return $r10;
    }

    void make(org.apache.commons.collections4.BulkTest)
    {
        org.apache.commons.collections4.BulkTestSuiteMaker r0;
        org.apache.commons.collections4.BulkTest r1;
        java.lang.Class r2;
        java.lang.reflect.Method[] r3;
        int i0, i1;
        java.lang.reflect.Method r5;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.collections4.BulkTestSuiteMaker;

        r1 := @parameter0: org.apache.commons.collections4.BulkTest;

        r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        r3 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i0 = lengthof r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r5 = r3[i1];

        $z0 = staticinvoke <org.apache.commons.collections4.BulkTestSuiteMaker: boolean isTest(java.lang.reflect.Method)>(r5);

        if $z0 == 0 goto label2;

        virtualinvoke r0.<org.apache.commons.collections4.BulkTestSuiteMaker: void addTest(org.apache.commons.collections4.BulkTest,java.lang.reflect.Method)>(r1, r5);

     label2:
        $z1 = staticinvoke <org.apache.commons.collections4.BulkTestSuiteMaker: boolean isBulk(java.lang.reflect.Method)>(r5);

        if $z1 == 0 goto label3;

        virtualinvoke r0.<org.apache.commons.collections4.BulkTestSuiteMaker: void addBulk(org.apache.commons.collections4.BulkTest,java.lang.reflect.Method)>(r1, r5);

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return;
    }

    void addTest(org.apache.commons.collections4.BulkTest, java.lang.reflect.Method)
    {
        org.apache.commons.collections4.BulkTestSuiteMaker r0;
        org.apache.commons.collections4.BulkTest r1, r3;
        java.lang.reflect.Method r2;
        java.lang.Object $r4;
        java.lang.String $r5, $r7, $r10, $r12, $r13;
        java.lang.StringBuilder $r6, $r8, $r9, $r11;
        java.util.List $r14;
        boolean $z0;
        junit.framework.TestSuite $r15;

        r0 := @this: org.apache.commons.collections4.BulkTestSuiteMaker;

        r1 := @parameter0: org.apache.commons.collections4.BulkTest;

        r2 := @parameter1: java.lang.reflect.Method;

        $r4 = virtualinvoke r1.<org.apache.commons.collections4.BulkTest: java.lang.Object clone()>();

        r3 = (org.apache.commons.collections4.BulkTest) $r4;

        $r5 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.String getName()>();

        virtualinvoke r3.<org.apache.commons.collections4.BulkTest: void setName(java.lang.String)>($r5);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = r0.<org.apache.commons.collections4.BulkTestSuiteMaker: java.lang.String prefix>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r10 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.String getName()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        r3.<org.apache.commons.collections4.BulkTest: java.lang.String verboseName> = $r12;

        $r14 = r0.<org.apache.commons.collections4.BulkTestSuiteMaker: java.util.List ignored>;

        $r13 = r3.<org.apache.commons.collections4.BulkTest: java.lang.String verboseName>;

        $z0 = interfaceinvoke $r14.<java.util.List: boolean contains(java.lang.Object)>($r13);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r15 = r0.<org.apache.commons.collections4.BulkTestSuiteMaker: junit.framework.TestSuite result>;

        virtualinvoke $r15.<junit.framework.TestSuite: void addTest(junit.framework.Test)>(r3);

        return;
    }

    void addBulk(org.apache.commons.collections4.BulkTest, java.lang.reflect.Method)
    {
        org.apache.commons.collections4.BulkTestSuiteMaker r0;
        org.apache.commons.collections4.BulkTest r1, r4;
        java.lang.reflect.Method r2;
        java.lang.String r3, $r7, $r10, $r16, $r19, $r21, $r24, r33;
        junit.framework.TestSuite r5, $r22, $r23, $r25;
        java.lang.StringBuilder $r6, $r8, $r9, $r11, $r15, $r17, $r18, $r20;
        java.util.List $r12;
        boolean $z0;
        java.lang.Object[] $r13;
        java.lang.Object $r14;
        java.lang.IllegalAccessException $r26;
        java.lang.Error $r27, $r30;
        java.lang.reflect.InvocationTargetException $r28;
        java.lang.Throwable $r29;

        r0 := @this: org.apache.commons.collections4.BulkTestSuiteMaker;

        r1 := @parameter0: org.apache.commons.collections4.BulkTest;

        r2 := @parameter1: java.lang.reflect.Method;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = r0.<org.apache.commons.collections4.BulkTestSuiteMaker: java.lang.String prefix>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r10 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.String getName()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        r3 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = r0.<org.apache.commons.collections4.BulkTestSuiteMaker: java.util.List ignored>;

        $z0 = interfaceinvoke $r12.<java.util.List: boolean contains(java.lang.Object)>(r3);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r13 = (java.lang.Object[]) null;

        $r14 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r1, $r13);

        r4 = (org.apache.commons.collections4.BulkTest) $r14;

        if r4 != null goto label3;

     label2:
        return;

     label3:
        goto label6;

     label4:
        $r28 := @caughtexception;

        $r29 = virtualinvoke $r28.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        virtualinvoke $r29.<java.lang.Throwable: void printStackTrace()>();

        $r30 = new java.lang.Error;

        specialinvoke $r30.<java.lang.Error: void <init>()>();

        throw $r30;

     label5:
        $r26 := @caughtexception;

        virtualinvoke $r26.<java.lang.IllegalAccessException: void printStackTrace()>();

        $r27 = new java.lang.Error;

        specialinvoke $r27.<java.lang.Error: void <init>()>();

        throw $r27;

     label6:
        r33 = r0.<org.apache.commons.collections4.BulkTestSuiteMaker: java.lang.String prefix>;

        r5 = r0.<org.apache.commons.collections4.BulkTestSuiteMaker: junit.framework.TestSuite result>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = r0.<org.apache.commons.collections4.BulkTestSuiteMaker: java.lang.String prefix>;

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r19 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.String getName()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<org.apache.commons.collections4.BulkTestSuiteMaker: java.lang.String prefix> = $r21;

        $r22 = new junit.framework.TestSuite;

        specialinvoke $r22.<junit.framework.TestSuite: void <init>()>();

        r0.<org.apache.commons.collections4.BulkTestSuiteMaker: junit.framework.TestSuite result> = $r22;

        $r23 = r0.<org.apache.commons.collections4.BulkTestSuiteMaker: junit.framework.TestSuite result>;

        $r24 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.String getName()>();

        virtualinvoke $r23.<junit.framework.TestSuite: void setName(java.lang.String)>($r24);

        virtualinvoke r0.<org.apache.commons.collections4.BulkTestSuiteMaker: void make(org.apache.commons.collections4.BulkTest)>(r4);

        $r25 = r0.<org.apache.commons.collections4.BulkTestSuiteMaker: junit.framework.TestSuite result>;

        virtualinvoke r5.<junit.framework.TestSuite: void addTest(junit.framework.Test)>($r25);

        r0.<org.apache.commons.collections4.BulkTestSuiteMaker: java.lang.String prefix> = r33;

        r0.<org.apache.commons.collections4.BulkTestSuiteMaker: junit.framework.TestSuite result> = r5;

        return;

        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label4;
        catch java.lang.IllegalAccessException from label1 to label2 with label5;
    }

    private static java.lang.String getBaseName(java.lang.Class)
    {
        java.lang.Class r0;
        int i0, $i1;
        java.lang.String r1;

        r0 := @parameter0: java.lang.Class;

        r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        i0 = virtualinvoke r1.<java.lang.String: int lastIndexOf(int)>(46);

        if i0 <= 0 goto label1;

        $i1 = i0 + 1;

        r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i1);

     label1:
        return r1;
    }

    private static java.lang.reflect.Constructor getTestCaseConstructor(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.Class[] $r2;
        java.lang.reflect.Constructor $r3;
        java.lang.NoSuchMethodException $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @parameter0: java.lang.Class;

     label1:
        $r2 = newarray (java.lang.Class)[1];

        $r2[0] = class "Ljava/lang/String;";

        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must provide a (String) constructor");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r5;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
    }

    private static org.apache.commons.collections4.BulkTest makeTestCase(java.lang.Class, java.lang.reflect.Method)
    {
        java.lang.Class r0;
        java.lang.reflect.Method r1;
        java.lang.reflect.Constructor r2;
        java.lang.Object[] $r3;
        java.lang.String $r4;
        java.lang.Object $r5;
        org.apache.commons.collections4.BulkTest $r6;
        java.lang.reflect.InvocationTargetException $r7;
        java.lang.RuntimeException $r8, $r10;
        java.lang.InstantiationException $r9;
        java.lang.IllegalAccessException $r11;
        java.lang.Error $r12;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.reflect.Method;

        r2 = staticinvoke <org.apache.commons.collections4.BulkTestSuiteMaker: java.lang.reflect.Constructor getTestCaseConstructor(java.lang.Class)>(r0);

     label1:
        $r3 = newarray (java.lang.Object)[1];

        $r4 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.String getName()>();

        $r3[0] = $r4;

        $r5 = virtualinvoke r2.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r3);

        $r6 = (org.apache.commons.collections4.BulkTest) $r5;

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        virtualinvoke $r7.<java.lang.reflect.InvocationTargetException: void printStackTrace()>();

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>()>();

        throw $r8;

     label4:
        $r11 := @caughtexception;

        $r12 = new java.lang.Error;

        specialinvoke $r12.<java.lang.Error: void <init>()>();

        throw $r12;

     label5:
        $r9 := @caughtexception;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>()>();

        throw $r10;

        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
        catch java.lang.InstantiationException from label1 to label2 with label5;
    }

    private static org.apache.commons.collections4.BulkTest makeFirstTestCase(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.reflect.Method[] r1;
        int i0, i1;
        java.lang.reflect.Method r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r7, $r8;
        java.lang.String $r6, $r9;
        boolean $z0;
        org.apache.commons.collections4.BulkTest $r10;

        r0 := @parameter0: java.lang.Class;

        r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = r1[i1];

        $z0 = staticinvoke <org.apache.commons.collections4.BulkTestSuiteMaker: boolean isTest(java.lang.reflect.Method)>(r3);

        if $z0 == 0 goto label2;

        $r10 = staticinvoke <org.apache.commons.collections4.BulkTestSuiteMaker: org.apache.commons.collections4.BulkTest makeTestCase(java.lang.Class,java.lang.reflect.Method)>(r0, r3);

        return $r10;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must provide at least one test method.");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r4;
    }

    private static boolean isTest(java.lang.reflect.Method)
    {
        java.lang.reflect.Method r0;
        int i0, $i1;
        java.lang.String $r1;
        boolean $z0, $z1, $z2;
        java.lang.Class $r2, $r3;
        java.lang.Class[] $r4;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("test");

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r3 = <java.lang.Void: java.lang.Class TYPE>;

        if $r2 == $r3 goto label2;

        return 0;

     label2:
        $r4 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i1 = lengthof $r4;

        if $i1 == 0 goto label3;

        return 0;

     label3:
        i0 = virtualinvoke r0.<java.lang.reflect.Method: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>(i0);

        if $z1 == 0 goto label4;

        return 0;

     label4:
        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>(i0);

        if $z2 == 0 goto label5;

        return 0;

     label5:
        return 1;
    }

    private static boolean isBulk(java.lang.reflect.Method)
    {
        java.lang.reflect.Method r0;
        int i0, $i1;
        java.lang.String $r1;
        boolean $z0, $z1, $z2;
        java.lang.Class $r2;
        java.lang.Class[] $r3;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("bulkTest");

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        if $r2 == class "Lorg/apache/commons/collections4/BulkTest;" goto label2;

        return 0;

     label2:
        $r3 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i1 = lengthof $r3;

        if $i1 == 0 goto label3;

        return 0;

     label3:
        i0 = virtualinvoke r0.<java.lang.reflect.Method: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>(i0);

        if $z1 == 0 goto label4;

        return 0;

     label4:
        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>(i0);

        if $z2 == 0 goto label5;

        return 0;

     label5:
        return 1;
    }
}
