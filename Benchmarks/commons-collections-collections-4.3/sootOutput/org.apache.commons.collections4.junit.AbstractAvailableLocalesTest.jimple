public abstract class org.apache.commons.collections4.junit.AbstractAvailableLocalesTest extends java.lang.Object
{
    private final java.util.Locale locale;
    public final org.apache.commons.collections4.junit.SetDefaultLocaleTestRule rule;

    public static java.util.Locale[] getSortedAvailableLocales()
    {
        java.util.Locale[] r0;
        org.apache.commons.collections4.junit.ObjectToStringComparator $r1;

        r0 = staticinvoke <java.util.Locale: java.util.Locale[] getAvailableLocales()>();

        $r1 = new org.apache.commons.collections4.junit.ObjectToStringComparator;

        specialinvoke $r1.<org.apache.commons.collections4.junit.ObjectToStringComparator: void <init>()>();

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(r0, $r1);

        return r0;
    }

    public static java.util.List getSortedDeclaredLocales()
    {
        java.lang.reflect.Field[] r0;
        int i0, i1, $i2, i3;
        java.lang.reflect.Field r3;
        java.util.ArrayList $r5;
        org.apache.commons.collections4.junit.ObjectToStringComparator $r6;
        java.lang.Class $r7;
        boolean $z0, $z1;
        java.lang.Object $r8;
        java.util.Locale $r9;
        java.lang.Exception $r10;
        java.lang.IllegalStateException $r11;
        java.lang.StringBuilder $r12, $r13, $r14;
        java.lang.String $r15;

        r0 = staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: java.lang.reflect.Field[] getAllFields(java.lang.Class)>(class "Ljava/util/Locale;");

        $r5 = new java.util.ArrayList;

        $i2 = lengthof r0;

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>($i2);

        i0 = lengthof r0;

        i3 = 0;

     label1:
        if i3 >= i0 goto label6;

        r3 = r0[i3];

        i1 = virtualinvoke r3.<java.lang.reflect.Field: int getModifiers()>();

        $r7 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.Class getType()>();

        if $r7 != class "Ljava/util/Locale;" goto label5;

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>(i1);

        if $z0 == 0 goto label5;

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>(i1);

        if $z1 == 0 goto label5;

     label2:
        $r8 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(class "Ljava/util/Locale;");

        $r9 = (java.util.Locale) $r8;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r9);

     label3:
        goto label5;

     label4:
        $r10 := @caughtexception;

        $r11 = new java.lang.IllegalStateException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Field ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r15, $r10);

        throw $r11;

     label5:
        i3 = i3 + 1;

        goto label1;

     label6:
        $r6 = new org.apache.commons.collections4.junit.ObjectToStringComparator;

        specialinvoke $r6.<org.apache.commons.collections4.junit.ObjectToStringComparator: void <init>()>();

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r5, $r6);

        return $r5;

        catch java.lang.IllegalArgumentException from label2 to label3 with label4;
        catch java.lang.IllegalAccessException from label2 to label3 with label4;
    }

    public void <init>(java.util.Locale)
    {
        org.apache.commons.collections4.junit.AbstractAvailableLocalesTest r0;
        java.util.Locale r1;
        org.apache.commons.collections4.junit.SetDefaultLocaleTestRule $r2;

        r0 := @this: org.apache.commons.collections4.junit.AbstractAvailableLocalesTest;

        r1 := @parameter0: java.util.Locale;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.collections4.junit.AbstractAvailableLocalesTest: java.util.Locale locale> = r1;

        $r2 = new org.apache.commons.collections4.junit.SetDefaultLocaleTestRule;

        specialinvoke $r2.<org.apache.commons.collections4.junit.SetDefaultLocaleTestRule: void <init>(java.util.Locale)>(r1);

        r0.<org.apache.commons.collections4.junit.AbstractAvailableLocalesTest: org.apache.commons.collections4.junit.SetDefaultLocaleTestRule rule> = $r2;

        return;
    }

    public java.util.Locale getLocale()
    {
        org.apache.commons.collections4.junit.AbstractAvailableLocalesTest r0;
        java.util.Locale $r1;

        r0 := @this: org.apache.commons.collections4.junit.AbstractAvailableLocalesTest;

        $r1 = r0.<org.apache.commons.collections4.junit.AbstractAvailableLocalesTest: java.util.Locale locale>;

        return $r1;
    }
}
