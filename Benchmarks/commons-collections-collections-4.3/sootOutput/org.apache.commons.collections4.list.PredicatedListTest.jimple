public class org.apache.commons.collections4.list.PredicatedListTest extends org.apache.commons.collections4.list.AbstractListTest
{
    protected org.apache.commons.collections4.Predicate truePredicate;
    protected org.apache.commons.collections4.Predicate testPredicate;

    public void <init>(java.lang.String)
    {
        org.apache.commons.collections4.list.PredicatedListTest r0;
        java.lang.String r1;
        org.apache.commons.collections4.Predicate $r2;
        org.apache.commons.collections4.list.PredicatedListTest$1 $r3;

        r0 := @this: org.apache.commons.collections4.list.PredicatedListTest;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.collections4.list.AbstractListTest: void <init>(java.lang.String)>(r1);

        $r2 = staticinvoke <org.apache.commons.collections4.functors.TruePredicate: org.apache.commons.collections4.Predicate truePredicate()>();

        r0.<org.apache.commons.collections4.list.PredicatedListTest: org.apache.commons.collections4.Predicate truePredicate> = $r2;

        $r3 = new org.apache.commons.collections4.list.PredicatedListTest$1;

        specialinvoke $r3.<org.apache.commons.collections4.list.PredicatedListTest$1: void <init>(org.apache.commons.collections4.list.PredicatedListTest)>(r0);

        r0.<org.apache.commons.collections4.list.PredicatedListTest: org.apache.commons.collections4.Predicate testPredicate> = $r3;

        return;
    }

    protected java.util.List decorateList(java.util.List, org.apache.commons.collections4.Predicate)
    {
        org.apache.commons.collections4.list.PredicatedListTest r0;
        java.util.List r1;
        org.apache.commons.collections4.Predicate r2;
        org.apache.commons.collections4.list.PredicatedList $r3;

        r0 := @this: org.apache.commons.collections4.list.PredicatedListTest;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: org.apache.commons.collections4.Predicate;

        $r3 = staticinvoke <org.apache.commons.collections4.list.PredicatedList: org.apache.commons.collections4.list.PredicatedList predicatedList(java.util.List,org.apache.commons.collections4.Predicate)>(r1, r2);

        return $r3;
    }

    public java.util.List makeObject()
    {
        org.apache.commons.collections4.list.PredicatedListTest r0;
        java.util.ArrayList $r1;
        org.apache.commons.collections4.Predicate $r2;
        java.util.List $r3;

        r0 := @this: org.apache.commons.collections4.list.PredicatedListTest;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = r0.<org.apache.commons.collections4.list.PredicatedListTest: org.apache.commons.collections4.Predicate truePredicate>;

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.list.PredicatedListTest: java.util.List decorateList(java.util.List,org.apache.commons.collections4.Predicate)>($r1, $r2);

        return $r3;
    }

    public java.lang.Object[] getFullElements()
    {
        org.apache.commons.collections4.list.PredicatedListTest r0;
        java.lang.Object[] $r1, $r2;

        r0 := @this: org.apache.commons.collections4.list.PredicatedListTest;

        $r1 = newarray (java.lang.Object)[7];

        $r1[0] = "1";

        $r1[1] = "3";

        $r1[2] = "5";

        $r1[3] = "7";

        $r1[4] = "2";

        $r1[5] = "4";

        $r1[6] = "6";

        $r2 = (java.lang.Object[]) $r1;

        return $r2;
    }

    public java.util.List makeTestList()
    {
        org.apache.commons.collections4.list.PredicatedListTest r0;
        java.util.ArrayList $r1;
        org.apache.commons.collections4.Predicate $r2;
        java.util.List $r3;

        r0 := @this: org.apache.commons.collections4.list.PredicatedListTest;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = r0.<org.apache.commons.collections4.list.PredicatedListTest: org.apache.commons.collections4.Predicate testPredicate>;

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.list.PredicatedListTest: java.util.List decorateList(java.util.List,org.apache.commons.collections4.Predicate)>($r1, $r2);

        return $r3;
    }

    public void testIllegalAdd()
    {
        org.apache.commons.collections4.list.PredicatedListTest r0;
        java.util.List r1;
        java.lang.Integer r2;
        boolean $z1, $z2;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.apache.commons.collections4.list.PredicatedListTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.list.PredicatedListTest: java.util.List makeTestList()>();

        r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

     label1:
        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r2);

        staticinvoke <org.apache.commons.collections4.list.PredicatedListTest: void fail(java.lang.String)>("Integer should fail string predicate.");

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

     label4:
        $z1 = interfaceinvoke r1.<java.util.List: boolean contains(java.lang.Object)>(r2);

        if $z1 != 0 goto label5;

        $z2 = 1;

        goto label6;

     label5:
        $z2 = 0;

     label6:
        staticinvoke <org.apache.commons.collections4.list.PredicatedListTest: void assertTrue(java.lang.String,boolean)>("Collection shouldn\'t contain illegal element", $z2);

        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public void testIllegalAddAll()
    {
        org.apache.commons.collections4.list.PredicatedListTest r0;
        java.util.List r1;
        java.util.ArrayList $r4;
        java.lang.Integer $r5, $r9;
        boolean $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        java.lang.IllegalArgumentException $r11;

        r0 := @this: org.apache.commons.collections4.list.PredicatedListTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.list.PredicatedListTest: java.util.List makeTestList()>();

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>("one");

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>("two");

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r5);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>("four");

     label01:
        interfaceinvoke r1.<java.util.List: boolean addAll(int,java.util.Collection)>(0, $r4);

        staticinvoke <org.apache.commons.collections4.list.PredicatedListTest: void fail(java.lang.String)>("Integer should fail string predicate.");

     label02:
        goto label04;

     label03:
        $r11 := @caughtexception;

     label04:
        $z5 = interfaceinvoke r1.<java.util.List: boolean contains(java.lang.Object)>("one");

        if $z5 != 0 goto label05;

        $z9 = 1;

        goto label06;

     label05:
        $z9 = 0;

     label06:
        staticinvoke <org.apache.commons.collections4.list.PredicatedListTest: void assertTrue(java.lang.String,boolean)>("List shouldn\'t contain illegal element", $z9);

        $z6 = interfaceinvoke r1.<java.util.List: boolean contains(java.lang.Object)>("two");

        if $z6 != 0 goto label07;

        $z10 = 1;

        goto label08;

     label07:
        $z10 = 0;

     label08:
        staticinvoke <org.apache.commons.collections4.list.PredicatedListTest: void assertTrue(java.lang.String,boolean)>("List shouldn\'t contain illegal element", $z10);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $z7 = interfaceinvoke r1.<java.util.List: boolean contains(java.lang.Object)>($r9);

        if $z7 != 0 goto label09;

        $z11 = 1;

        goto label10;

     label09:
        $z11 = 0;

     label10:
        staticinvoke <org.apache.commons.collections4.list.PredicatedListTest: void assertTrue(java.lang.String,boolean)>("List shouldn\'t contain illegal element", $z11);

        $z8 = interfaceinvoke r1.<java.util.List: boolean contains(java.lang.Object)>("four");

        if $z8 != 0 goto label11;

        $z12 = 1;

        goto label12;

     label11:
        $z12 = 0;

     label12:
        staticinvoke <org.apache.commons.collections4.list.PredicatedListTest: void assertTrue(java.lang.String,boolean)>("List shouldn\'t contain illegal element", $z12);

        return;

        catch java.lang.IllegalArgumentException from label01 to label02 with label03;
    }

    public void testIllegalSet()
    {
        org.apache.commons.collections4.list.PredicatedListTest r0;
        java.util.List r1;
        java.lang.Integer $r3;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.apache.commons.collections4.list.PredicatedListTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.list.PredicatedListTest: java.util.List makeTestList()>();

     label1:
        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke r1.<java.util.List: java.lang.Object set(int,java.lang.Object)>(0, $r3);

        staticinvoke <org.apache.commons.collections4.list.PredicatedListTest: void fail(java.lang.String)>("Integer should fail string predicate.");

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

     label4:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public void testLegalAddAll()
    {
        org.apache.commons.collections4.list.PredicatedListTest r0;
        java.util.List r1;
        java.util.ArrayList $r3;
        boolean $z5, $z6, $z7, $z8;

        r0 := @this: org.apache.commons.collections4.list.PredicatedListTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.list.PredicatedListTest: java.util.List makeTestList()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("zero");

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>("one");

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>("two");

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>("three");

        interfaceinvoke r1.<java.util.List: boolean addAll(int,java.util.Collection)>(1, $r3);

        $z5 = interfaceinvoke r1.<java.util.List: boolean contains(java.lang.Object)>("zero");

        staticinvoke <org.apache.commons.collections4.list.PredicatedListTest: void assertTrue(java.lang.String,boolean)>("List should contain legal element", $z5);

        $z6 = interfaceinvoke r1.<java.util.List: boolean contains(java.lang.Object)>("one");

        staticinvoke <org.apache.commons.collections4.list.PredicatedListTest: void assertTrue(java.lang.String,boolean)>("List should contain legal element", $z6);

        $z7 = interfaceinvoke r1.<java.util.List: boolean contains(java.lang.Object)>("two");

        staticinvoke <org.apache.commons.collections4.list.PredicatedListTest: void assertTrue(java.lang.String,boolean)>("List should contain legal element", $z7);

        $z8 = interfaceinvoke r1.<java.util.List: boolean contains(java.lang.Object)>("three");

        staticinvoke <org.apache.commons.collections4.list.PredicatedListTest: void assertTrue(java.lang.String,boolean)>("List should contain legal element", $z8);

        return;
    }

    public java.lang.String getCompatibilityVersion()
    {
        org.apache.commons.collections4.list.PredicatedListTest r0;

        r0 := @this: org.apache.commons.collections4.list.PredicatedListTest;

        return "4";
    }

    public volatile java.util.Collection makeObject()
    {
        org.apache.commons.collections4.list.PredicatedListTest r0;
        java.util.List $r1;

        r0 := @this: org.apache.commons.collections4.list.PredicatedListTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.list.PredicatedListTest: java.util.List makeObject()>();

        return $r1;
    }

    public volatile java.lang.Object makeObject()
    {
        org.apache.commons.collections4.list.PredicatedListTest r0;
        java.util.List $r1;

        r0 := @this: org.apache.commons.collections4.list.PredicatedListTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.list.PredicatedListTest: java.util.List makeObject()>();

        return $r1;
    }
}
