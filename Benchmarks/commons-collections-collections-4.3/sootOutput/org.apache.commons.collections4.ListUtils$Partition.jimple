class org.apache.commons.collections4.ListUtils$Partition extends java.util.AbstractList
{
    private final java.util.List list;
    private final int size;

    private void <init>(java.util.List, int)
    {
        org.apache.commons.collections4.ListUtils$Partition r0;
        java.util.List r1;
        int i0;

        r0 := @this: org.apache.commons.collections4.ListUtils$Partition;

        r1 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        specialinvoke r0.<java.util.AbstractList: void <init>()>();

        r0.<org.apache.commons.collections4.ListUtils$Partition: java.util.List list> = r1;

        r0.<org.apache.commons.collections4.ListUtils$Partition: int size> = i0;

        return;
    }

    public java.util.List get(int)
    {
        org.apache.commons.collections4.ListUtils$Partition r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7;
        java.util.List $r1, $r2, $r3;
        java.lang.IndexOutOfBoundsException $r4, $r11;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9, $r12, $r13, $r14, $r15;
        java.lang.String $r10, $r16;

        r0 := @this: org.apache.commons.collections4.ListUtils$Partition;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<org.apache.commons.collections4.ListUtils$Partition: int size()>();

        if i0 >= 0 goto label1;

        $r11 = new java.lang.IndexOutOfBoundsException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Index ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must not be negative");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r16);

        throw $r11;

     label1:
        if i0 < i1 goto label2;

        $r4 = new java.lang.IndexOutOfBoundsException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Index ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be less than size ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label2:
        $i4 = r0.<org.apache.commons.collections4.ListUtils$Partition: int size>;

        i2 = i0 * $i4;

        $i5 = r0.<org.apache.commons.collections4.ListUtils$Partition: int size>;

        $i6 = i2 + $i5;

        $r1 = r0.<org.apache.commons.collections4.ListUtils$Partition: java.util.List list>;

        $i7 = interfaceinvoke $r1.<java.util.List: int size()>();

        i3 = staticinvoke <java.lang.Math: int min(int,int)>($i6, $i7);

        $r2 = r0.<org.apache.commons.collections4.ListUtils$Partition: java.util.List list>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.List subList(int,int)>(i2, i3);

        return $r3;
    }

    public int size()
    {
        org.apache.commons.collections4.ListUtils$Partition r0;
        java.util.List $r1;
        int $i0, $i1, $i2;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.collections4.ListUtils$Partition;

        $r1 = r0.<org.apache.commons.collections4.ListUtils$Partition: java.util.List list>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $d1 = (double) $i0;

        $i1 = r0.<org.apache.commons.collections4.ListUtils$Partition: int size>;

        $d0 = (double) $i1;

        $d2 = $d1 / $d0;

        $d3 = staticinvoke <java.lang.Math: double ceil(double)>($d2);

        $i2 = (int) $d3;

        return $i2;
    }

    public boolean isEmpty()
    {
        org.apache.commons.collections4.ListUtils$Partition r0;
        java.util.List $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.ListUtils$Partition;

        $r1 = r0.<org.apache.commons.collections4.ListUtils$Partition: java.util.List list>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        return $z0;
    }

    public volatile java.lang.Object get(int)
    {
        org.apache.commons.collections4.ListUtils$Partition r0;
        int i0;
        java.util.List $r1;

        r0 := @this: org.apache.commons.collections4.ListUtils$Partition;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.ListUtils$Partition: java.util.List get(int)>(i0);

        return $r1;
    }

    void <init>(java.util.List, int, org.apache.commons.collections4.ListUtils$1)
    {
        org.apache.commons.collections4.ListUtils$Partition r0;
        java.util.List r1;
        int i0;
        org.apache.commons.collections4.ListUtils$1 r2;

        r0 := @this: org.apache.commons.collections4.ListUtils$Partition;

        r1 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        r2 := @parameter2: org.apache.commons.collections4.ListUtils$1;

        specialinvoke r0.<org.apache.commons.collections4.ListUtils$Partition: void <init>(java.util.List,int)>(r1, i0);

        return;
    }
}
