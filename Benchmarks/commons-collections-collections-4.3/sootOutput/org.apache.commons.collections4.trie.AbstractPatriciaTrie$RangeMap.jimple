abstract class org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap extends java.util.AbstractMap implements java.util.SortedMap
{
    private transient volatile java.util.Set entrySet;
    final org.apache.commons.collections4.trie.AbstractPatriciaTrie this$0;

    private void <init>(org.apache.commons.collections4.trie.AbstractPatriciaTrie)
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap r0;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r1;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap;

        r1 := @parameter0: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap: org.apache.commons.collections4.trie.AbstractPatriciaTrie this$0> = r1;

        specialinvoke r0.<java.util.AbstractMap: void <init>()>();

        return;
    }

    protected abstract java.util.Set createEntrySet();

    protected abstract java.lang.Object getFromKey();

    protected abstract boolean isFromInclusive();

    protected abstract java.lang.Object getToKey();

    protected abstract boolean isToInclusive();

    public java.util.Comparator comparator()
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap r0;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie $r1;
        java.util.Comparator $r2;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap;

        $r1 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap: org.apache.commons.collections4.trie.AbstractPatriciaTrie this$0>;

        $r2 = virtualinvoke $r1.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: java.util.Comparator comparator()>();

        return $r2;
    }

    public boolean containsKey(java.lang.Object)
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap r0;
        java.lang.Object r1, $r3;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie $r2, $r4;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap: org.apache.commons.collections4.trie.AbstractPatriciaTrie this$0>;

        $r3 = virtualinvoke $r2.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: java.lang.Object castKey(java.lang.Object)>(r1);

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap: boolean inRange(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r4 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap: org.apache.commons.collections4.trie.AbstractPatriciaTrie this$0>;

        $z1 = virtualinvoke $r4.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: boolean containsKey(java.lang.Object)>(r1);

        return $z1;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap r0;
        java.lang.Object r1, $r3, $r5;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie $r2, $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap: org.apache.commons.collections4.trie.AbstractPatriciaTrie this$0>;

        $r3 = virtualinvoke $r2.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: java.lang.Object castKey(java.lang.Object)>(r1);

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap: boolean inRange(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r4 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap: org.apache.commons.collections4.trie.AbstractPatriciaTrie this$0>;

        $r5 = virtualinvoke $r4.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: java.lang.Object remove(java.lang.Object)>(r1);

        return $r5;
    }

    public java.lang.Object get(java.lang.Object)
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap r0;
        java.lang.Object r1, $r3, $r5;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie $r2, $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap: org.apache.commons.collections4.trie.AbstractPatriciaTrie this$0>;

        $r3 = virtualinvoke $r2.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: java.lang.Object castKey(java.lang.Object)>(r1);

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap: boolean inRange(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r4 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap: org.apache.commons.collections4.trie.AbstractPatriciaTrie this$0>;

        $r5 = virtualinvoke $r4.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: java.lang.Object get(java.lang.Object)>(r1);

        return $r5;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap r0;
        java.lang.Object r1, r2, $r4;
        boolean $z0;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie $r3;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap: boolean inRange(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Key is out of range: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label1:
        $r3 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap: org.apache.commons.collections4.trie.AbstractPatriciaTrie this$0>;

        $r4 = virtualinvoke $r3.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return $r4;
    }

    public java.util.Set entrySet()
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap r0;
        java.util.Set $r1, $r2, $r3;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap;

        $r1 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap: java.util.Set entrySet>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap: java.util.Set createEntrySet()>();

        r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap: java.util.Set entrySet> = $r3;

     label1:
        $r2 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap: java.util.Set entrySet>;

        return $r2;
    }

    public java.util.SortedMap subMap(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap r0;
        java.lang.Object r1, r2;
        boolean $z0, $z1, $z2, $z3;
        java.util.SortedMap $r3;
        java.lang.IllegalArgumentException $r4, $r9;
        java.lang.StringBuilder $r5, $r6, $r7, $r10, $r11, $r12;
        java.lang.String $r8, $r13;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap: boolean inRange2(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FromKey is out of range: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r9;

     label1:
        $z1 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap: boolean inRange2(java.lang.Object)>(r2);

        if $z1 != 0 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ToKey is out of range: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label2:
        $z2 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap: boolean isFromInclusive()>();

        $z3 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap: boolean isToInclusive()>();

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap: java.util.SortedMap createRangeMap(java.lang.Object,boolean,java.lang.Object,boolean)>(r1, $z2, r2, $z3);

        return $r3;
    }

    public java.util.SortedMap headMap(java.lang.Object)
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap r0;
        java.lang.Object r1, $r2;
        boolean $z0, $z1, $z2;
        java.util.SortedMap $r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap: boolean inRange2(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ToKey is out of range: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label1:
        $r2 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap: java.lang.Object getFromKey()>();

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap: boolean isFromInclusive()>();

        $z2 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap: boolean isToInclusive()>();

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap: java.util.SortedMap createRangeMap(java.lang.Object,boolean,java.lang.Object,boolean)>($r2, $z1, r1, $z2);

        return $r3;
    }

    public java.util.SortedMap tailMap(java.lang.Object)
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap r0;
        java.lang.Object r1, $r2;
        boolean $z0, $z1, $z2;
        java.util.SortedMap $r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap: boolean inRange2(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FromKey is out of range: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label1:
        $z1 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap: boolean isFromInclusive()>();

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap: java.lang.Object getToKey()>();

        $z2 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap: boolean isToInclusive()>();

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap: java.util.SortedMap createRangeMap(java.lang.Object,boolean,java.lang.Object,boolean)>(r1, $z1, $r2, $z2);

        return $r3;
    }

    protected boolean inRange(java.lang.Object)
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap r0;
        java.lang.Object r1, r2, r3;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap;

        r1 := @parameter0: java.lang.Object;

        r2 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap: java.lang.Object getFromKey()>();

        r3 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap: java.lang.Object getToKey()>();

        if r2 == null goto label1;

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap: boolean inFromRange(java.lang.Object,boolean)>(r1, 0);

        if $z1 == 0 goto label3;

     label1:
        if r3 == null goto label2;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap: boolean inToRange(java.lang.Object,boolean)>(r1, 0);

        if $z0 == 0 goto label3;

     label2:
        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        return $z2;
    }

    protected boolean inRange2(java.lang.Object)
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap r0;
        java.lang.Object r1, r2, r3;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap;

        r1 := @parameter0: java.lang.Object;

        r2 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap: java.lang.Object getFromKey()>();

        r3 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap: java.lang.Object getToKey()>();

        if r2 == null goto label1;

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap: boolean inFromRange(java.lang.Object,boolean)>(r1, 0);

        if $z1 == 0 goto label3;

     label1:
        if r3 == null goto label2;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap: boolean inToRange(java.lang.Object,boolean)>(r1, 1);

        if $z0 == 0 goto label3;

     label2:
        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        return $z2;
    }

    protected boolean inFromRange(java.lang.Object, boolean)
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap r0;
        java.lang.Object r1, r2;
        boolean z0, z1, $z2, $z3;
        int i0;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie $r3;
        org.apache.commons.collections4.trie.KeyAnalyzer $r4;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        r2 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap: java.lang.Object getFromKey()>();

        z1 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap: boolean isFromInclusive()>();

        $r3 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap: org.apache.commons.collections4.trie.AbstractPatriciaTrie this$0>;

        $r4 = virtualinvoke $r3.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.KeyAnalyzer getKeyAnalyzer()>();

        i0 = virtualinvoke $r4.<org.apache.commons.collections4.trie.KeyAnalyzer: int compare(java.lang.Object,java.lang.Object)>(r1, r2);

        if z1 != 0 goto label1;

        if z0 == 0 goto label4;

     label1:
        if i0 < 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;

     label4:
        if i0 <= 0 goto label5;

        $z3 = 1;

        goto label6;

     label5:
        $z3 = 0;

     label6:
        return $z3;
    }

    protected boolean inToRange(java.lang.Object, boolean)
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap r0;
        java.lang.Object r1, r2;
        boolean z0, z1, $z2, $z3;
        int i0;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie $r3;
        org.apache.commons.collections4.trie.KeyAnalyzer $r4;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        r2 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap: java.lang.Object getToKey()>();

        z1 = virtualinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap: boolean isToInclusive()>();

        $r3 = r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap: org.apache.commons.collections4.trie.AbstractPatriciaTrie this$0>;

        $r4 = virtualinvoke $r3.<org.apache.commons.collections4.trie.AbstractPatriciaTrie: org.apache.commons.collections4.trie.KeyAnalyzer getKeyAnalyzer()>();

        i0 = virtualinvoke $r4.<org.apache.commons.collections4.trie.KeyAnalyzer: int compare(java.lang.Object,java.lang.Object)>(r1, r2);

        if z1 != 0 goto label1;

        if z0 == 0 goto label4;

     label1:
        if i0 > 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;

     label4:
        if i0 >= 0 goto label5;

        $z3 = 1;

        goto label6;

     label5:
        $z3 = 0;

     label6:
        return $z3;
    }

    protected abstract java.util.SortedMap createRangeMap(java.lang.Object, boolean, java.lang.Object, boolean);

    void <init>(org.apache.commons.collections4.trie.AbstractPatriciaTrie, org.apache.commons.collections4.trie.AbstractPatriciaTrie$1)
    {
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap r0;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie r1;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie$1 r2;

        r0 := @this: org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap;

        r1 := @parameter0: org.apache.commons.collections4.trie.AbstractPatriciaTrie;

        r2 := @parameter1: org.apache.commons.collections4.trie.AbstractPatriciaTrie$1;

        specialinvoke r0.<org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap: void <init>(org.apache.commons.collections4.trie.AbstractPatriciaTrie)>(r1);

        return;
    }
}
