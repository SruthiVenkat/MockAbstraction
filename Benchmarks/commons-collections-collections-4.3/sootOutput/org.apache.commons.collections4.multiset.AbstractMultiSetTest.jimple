public abstract class org.apache.commons.collections4.multiset.AbstractMultiSetTest extends org.apache.commons.collections4.collection.AbstractCollectionTest
{

    public void <init>(java.lang.String)
    {
        org.apache.commons.collections4.multiset.AbstractMultiSetTest r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSetTest;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: void <init>(java.lang.String)>(r1);

        return;
    }

    public java.util.Collection makeConfirmedCollection()
    {
        org.apache.commons.collections4.multiset.AbstractMultiSetTest r0;
        java.util.ArrayList $r2;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSetTest;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        return $r2;
    }

    public java.util.Collection makeConfirmedFullCollection()
    {
        org.apache.commons.collections4.multiset.AbstractMultiSetTest r0;
        java.util.Collection r1;
        java.lang.Object[] $r2;
        java.util.List $r3;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSetTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: java.util.Collection makeConfirmedCollection()>();

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: java.lang.Object[] getFullElements()>();

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        interfaceinvoke r1.<java.util.Collection: boolean addAll(java.util.Collection)>($r3);

        return r1;
    }

    public abstract org.apache.commons.collections4.MultiSet makeObject();

    public org.apache.commons.collections4.MultiSet makeFullCollection()
    {
        org.apache.commons.collections4.multiset.AbstractMultiSetTest r0;
        org.apache.commons.collections4.MultiSet r1;
        java.lang.Object[] $r2;
        java.util.List $r3;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSetTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: org.apache.commons.collections4.MultiSet makeObject()>();

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: java.lang.Object[] getFullElements()>();

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean addAll(java.util.Collection)>($r3);

        return r1;
    }

    public void resetEmpty()
    {
        org.apache.commons.collections4.multiset.AbstractMultiSetTest r0;
        org.apache.commons.collections4.MultiSet $r1;
        java.util.Collection $r2;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSetTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: org.apache.commons.collections4.MultiSet makeObject()>();

        virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: void setCollection(java.util.Collection)>($r1);

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: java.util.Collection makeConfirmedCollection()>();

        virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: void setConfirmed(java.util.Collection)>($r2);

        return;
    }

    public void resetFull()
    {
        org.apache.commons.collections4.multiset.AbstractMultiSetTest r0;
        org.apache.commons.collections4.MultiSet $r1;
        java.util.Collection $r2;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSetTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: org.apache.commons.collections4.MultiSet makeFullCollection()>();

        virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: void setCollection(java.util.Collection)>($r1);

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: java.util.Collection makeConfirmedFullCollection()>();

        virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: void setConfirmed(java.util.Collection)>($r2);

        return;
    }

    public org.apache.commons.collections4.MultiSet getCollection()
    {
        org.apache.commons.collections4.multiset.AbstractMultiSetTest r0;
        java.util.Collection $r1;
        org.apache.commons.collections4.MultiSet $r2;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSetTest;

        $r1 = specialinvoke r0.<org.apache.commons.collections4.collection.AbstractCollectionTest: java.util.Collection getCollection()>();

        $r2 = (org.apache.commons.collections4.MultiSet) $r1;

        return $r2;
    }

    public void testMultiSetAdd()
    {
        org.apache.commons.collections4.multiset.AbstractMultiSetTest r0;
        org.apache.commons.collections4.MultiSet r1;
        boolean $z0, $z2, $z4, $z6, $z7;
        int $i0, $i1;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSetTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: boolean isAddSupported()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r1 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: org.apache.commons.collections4.MultiSet makeObject()>();

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("A");

        $z2 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean contains(java.lang.Object)>("A");

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertTrue(java.lang.String,boolean)>("Should contain \'A\'", $z2);

        $i0 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: int getCount(java.lang.Object)>("A");

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,int,int)>("Should have count of 1", 1, $i0);

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("A");

        $z4 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean contains(java.lang.Object)>("A");

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertTrue(java.lang.String,boolean)>("Should contain \'A\'", $z4);

        $i1 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: int getCount(java.lang.Object)>("A");

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,int,int)>("Should have count of 2", 2, $i1);

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("B");

        $z6 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean contains(java.lang.Object)>("A");

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertTrue(boolean)>($z6);

        $z7 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean contains(java.lang.Object)>("B");

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertTrue(boolean)>($z7);

        return;
    }

    public void testMultiSetEqualsSelf()
    {
        org.apache.commons.collections4.multiset.AbstractMultiSetTest r0;
        org.apache.commons.collections4.MultiSet r1;
        boolean $z0, $z1, $z3, $z5, $z7;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSetTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: org.apache.commons.collections4.MultiSet makeObject()>();

        $z0 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean equals(java.lang.Object)>(r1);

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertTrue(boolean)>($z0);

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: boolean isAddSupported()>();

        if $z1 != 0 goto label1;

        return;

     label1:
        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("elt");

        $z3 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean equals(java.lang.Object)>(r1);

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertTrue(boolean)>($z3);

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("elt");

        $z5 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean equals(java.lang.Object)>(r1);

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertTrue(boolean)>($z5);

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("elt2");

        $z7 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean equals(java.lang.Object)>(r1);

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertTrue(boolean)>($z7);

        return;
    }

    public void testMultiSetRemove()
    {
        org.apache.commons.collections4.multiset.AbstractMultiSetTest r0;
        org.apache.commons.collections4.MultiSet r1;
        boolean $z0;
        int $i0, $i1, $i2, $i4, $i6, $i7;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSetTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: boolean isRemoveSupported()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r1 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: org.apache.commons.collections4.MultiSet makeObject()>();

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("A");

        $i0 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: int getCount(java.lang.Object)>("A");

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,int,int)>("Should have count of 1", 1, $i0);

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean remove(java.lang.Object)>("A");

        $i1 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: int getCount(java.lang.Object)>("A");

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,int,int)>("Should have count of 0", 0, $i1);

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("A");

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("A");

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("A");

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("A");

        $i2 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: int getCount(java.lang.Object)>("A");

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,int,int)>("Should have count of 4", 4, $i2);

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: int remove(java.lang.Object,int)>("A", 0);

        $i4 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: int getCount(java.lang.Object)>("A");

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,int,int)>("Should have count of 4", 4, $i4);

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: int remove(java.lang.Object,int)>("A", 2);

        $i6 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: int getCount(java.lang.Object)>("A");

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,int,int)>("Should have count of 2", 2, $i6);

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean remove(java.lang.Object)>("A");

        $i7 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: int getCount(java.lang.Object)>("A");

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,int,int)>("Should have count of 1", 1, $i7);

        return;
    }

    public void testMultiSetRemoveAll()
    {
        org.apache.commons.collections4.multiset.AbstractMultiSetTest r0;
        org.apache.commons.collections4.MultiSet r1;
        boolean $z0;
        int $i1, $i2, $i3, $i4, $i5, $i6;
        java.util.ArrayList $r3;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSetTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: boolean isRemoveSupported()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r1 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: org.apache.commons.collections4.MultiSet makeObject()>();

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: int add(java.lang.Object,int)>("A", 2);

        $i1 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: int getCount(java.lang.Object)>("A");

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,int,int)>("Should have count of 2", 2, $i1);

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("B");

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("C");

        $i2 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: int size()>();

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,int,int)>("Should have count of 4", 4, $i2);

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>("A");

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>("B");

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean removeAll(java.util.Collection)>($r3);

        $i3 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: int getCount(java.lang.Object)>("A");

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,int,int)>("Should have count of 0", 0, $i3);

        $i4 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: int getCount(java.lang.Object)>("B");

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,int,int)>("Should have count of 0", 0, $i4);

        $i5 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: int getCount(java.lang.Object)>("C");

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,int,int)>("Should have count of 1", 1, $i5);

        $i6 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: int size()>();

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,int,int)>("Should have count of 1", 1, $i6);

        return;
    }

    public void testMultiSetContains()
    {
        org.apache.commons.collections4.multiset.AbstractMultiSetTest r0;
        org.apache.commons.collections4.MultiSet r1;
        boolean $z0, $z1, $z2, $z4, $z5, $z7, $z8, $z10, $z11;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSetTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: boolean isAddSupported()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r1 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: org.apache.commons.collections4.MultiSet makeObject()>();

        $z1 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean contains(java.lang.Object)>("A");

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,boolean,boolean)>("MultiSet does not have at least 1 \'A\'", 0, $z1);

        $z2 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean contains(java.lang.Object)>("B");

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,boolean,boolean)>("MultiSet does not have at least 1 \'B\'", 0, $z2);

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("A");

        $z4 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean contains(java.lang.Object)>("A");

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,boolean,boolean)>("MultiSet has at least 1 \'A\'", 1, $z4);

        $z5 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean contains(java.lang.Object)>("B");

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,boolean,boolean)>("MultiSet does not have at least 1 \'B\'", 0, $z5);

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("A");

        $z7 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean contains(java.lang.Object)>("A");

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,boolean,boolean)>("MultiSet has at least 1 \'A\'", 1, $z7);

        $z8 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean contains(java.lang.Object)>("B");

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,boolean,boolean)>("MultiSet does not have at least 1 \'B\'", 0, $z8);

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("B");

        $z10 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean contains(java.lang.Object)>("A");

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,boolean,boolean)>("MultiSet has at least 1 \'A\'", 1, $z10);

        $z11 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean contains(java.lang.Object)>("B");

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,boolean,boolean)>("MultiSet has at least 1 \'B\'", 1, $z11);

        return;
    }

    public void testMultiSetContainsAll()
    {
        org.apache.commons.collections4.multiset.AbstractMultiSetTest r0;
        org.apache.commons.collections4.MultiSet r1;
        boolean $z0, $z7, $z8, $z9, $z10, $z11, $z13, $z14, $z15, $z16, $z17, $z19, $z20, $z21, $z22, $z23, $z25, $z26, $z27, $z28, $z29, $z31, $z32, $z33, $z34, $z35;
        java.util.ArrayList $r7, $r8, $r9, $r10, $r11;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSetTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: boolean isAddSupported()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r1 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: org.apache.commons.collections4.MultiSet makeObject()>();

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>("A");

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>("A");

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>("A");

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>("B");

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>("A");

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>("B");

        $z7 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean containsAll(java.util.Collection)>($r7);

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,boolean,boolean)>("MultiSet containsAll of empty", 1, $z7);

        $z8 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean containsAll(java.util.Collection)>($r8);

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,boolean,boolean)>("MultiSet does not containsAll of 1 \'A\'", 0, $z8);

        $z9 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean containsAll(java.util.Collection)>($r9);

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,boolean,boolean)>("MultiSet does not containsAll of 2 \'A\'", 0, $z9);

        $z10 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean containsAll(java.util.Collection)>($r10);

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,boolean,boolean)>("MultiSet does not containsAll of 1 \'B\'", 0, $z10);

        $z11 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean containsAll(java.util.Collection)>($r11);

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,boolean,boolean)>("MultiSet does not containsAll of 1 \'A\' 1 \'B\'", 0, $z11);

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("A");

        $z13 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean containsAll(java.util.Collection)>($r7);

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,boolean,boolean)>("MultiSet containsAll of empty", 1, $z13);

        $z14 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean containsAll(java.util.Collection)>($r8);

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,boolean,boolean)>("MultiSet containsAll of 1 \'A\'", 1, $z14);

        $z15 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean containsAll(java.util.Collection)>($r9);

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,boolean,boolean)>("MultiSet does not containsAll \'A\'", 1, $z15);

        $z16 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean containsAll(java.util.Collection)>($r10);

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,boolean,boolean)>("MultiSet does not containsAll of 1 \'B\'", 0, $z16);

        $z17 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean containsAll(java.util.Collection)>($r11);

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,boolean,boolean)>("MultiSet does not containsAll of 1 \'A\' 1 \'B\'", 0, $z17);

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("A");

        $z19 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean containsAll(java.util.Collection)>($r7);

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,boolean,boolean)>("MultiSet containsAll of empty", 1, $z19);

        $z20 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean containsAll(java.util.Collection)>($r8);

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,boolean,boolean)>("MultiSet containsAll of 1 \'A\'", 1, $z20);

        $z21 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean containsAll(java.util.Collection)>($r9);

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,boolean,boolean)>("MultiSet containsAll of 2 \'A\'", 1, $z21);

        $z22 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean containsAll(java.util.Collection)>($r10);

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,boolean,boolean)>("MultiSet does not containsAll of 1 \'B\'", 0, $z22);

        $z23 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean containsAll(java.util.Collection)>($r11);

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,boolean,boolean)>("MultiSet does not containsAll of 1 \'A\' 1 \'B\'", 0, $z23);

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("A");

        $z25 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean containsAll(java.util.Collection)>($r7);

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,boolean,boolean)>("MultiSet containsAll of empty", 1, $z25);

        $z26 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean containsAll(java.util.Collection)>($r8);

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,boolean,boolean)>("MultiSet containsAll of 1 \'A\'", 1, $z26);

        $z27 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean containsAll(java.util.Collection)>($r9);

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,boolean,boolean)>("MultiSet containsAll of 2 \'A\'", 1, $z27);

        $z28 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean containsAll(java.util.Collection)>($r10);

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,boolean,boolean)>("MultiSet does not containsAll of 1 \'B\'", 0, $z28);

        $z29 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean containsAll(java.util.Collection)>($r11);

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,boolean,boolean)>("MultiSet does not containsAll of 1 \'A\' 1 \'B\'", 0, $z29);

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("B");

        $z31 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean containsAll(java.util.Collection)>($r7);

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,boolean,boolean)>("MultiSet containsAll of empty", 1, $z31);

        $z32 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean containsAll(java.util.Collection)>($r8);

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,boolean,boolean)>("MultiSet containsAll of 1 \'A\'", 1, $z32);

        $z33 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean containsAll(java.util.Collection)>($r9);

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,boolean,boolean)>("MultiSet containsAll of 2 \'A\'", 1, $z33);

        $z34 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean containsAll(java.util.Collection)>($r10);

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,boolean,boolean)>("MultiSet containsAll of 1 \'B\'", 1, $z34);

        $z35 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean containsAll(java.util.Collection)>($r11);

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,boolean,boolean)>("MultiSet containsAll of 1 \'A\' 1 \'B\'", 1, $z35);

        return;
    }

    public void testMultiSetSize()
    {
        org.apache.commons.collections4.multiset.AbstractMultiSetTest r0;
        org.apache.commons.collections4.MultiSet r1;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i8, $i9;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSetTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: boolean isAddSupported()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r1 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: org.apache.commons.collections4.MultiSet makeObject()>();

        $i0 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: int size()>();

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,int,int)>("Should have 0 total items", 0, $i0);

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("A");

        $i1 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: int size()>();

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,int,int)>("Should have 1 total items", 1, $i1);

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("A");

        $i2 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: int size()>();

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,int,int)>("Should have 2 total items", 2, $i2);

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("A");

        $i3 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: int size()>();

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,int,int)>("Should have 3 total items", 3, $i3);

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("B");

        $i4 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: int size()>();

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,int,int)>("Should have 4 total items", 4, $i4);

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("B");

        $i5 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: int size()>();

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,int,int)>("Should have 5 total items", 5, $i5);

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: int remove(java.lang.Object,int)>("A", 2);

        $i7 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: int getCount(java.lang.Object)>("A");

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,int,int)>("Should have 1 \'A\'", 1, $i7);

        $i8 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: int size()>();

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,int,int)>("Should have 3 total items", 3, $i8);

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean remove(java.lang.Object)>("B");

        $i9 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: int size()>();

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,int,int)>("Should have 2 total item", 2, $i9);

        return;
    }

    public void testMultiSetRetainAll()
    {
        org.apache.commons.collections4.multiset.AbstractMultiSetTest r0;
        org.apache.commons.collections4.MultiSet r1;
        boolean $z0;
        java.util.ArrayList $r3;
        int $i0;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSetTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: boolean isAddSupported()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r1 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: org.apache.commons.collections4.MultiSet makeObject()>();

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("A");

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("A");

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("A");

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("B");

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("B");

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("C");

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>("B");

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>("C");

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean retainAll(java.util.Collection)>($r3);

        $i0 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: int size()>();

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,int,int)>("Should have 3 total items", 3, $i0);

        return;
    }

    public void testMultiSetIterator()
    {
        org.apache.commons.collections4.multiset.AbstractMultiSetTest r0;
        org.apache.commons.collections4.MultiSet r1;
        java.util.Iterator r2;
        java.lang.String r3;
        boolean $z0, $z4, $z5, $z6, z7;
        int $i0, $i1, $i2;
        java.lang.Object $r4;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSetTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: boolean isAddSupported()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r1 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: org.apache.commons.collections4.MultiSet makeObject()>();

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("A");

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("A");

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("B");

        $i0 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: int size()>();

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,int,int)>("MultiSet should have 3 items", 3, $i0);

        r2 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: java.util.Iterator iterator()>();

        z7 = 0;

     label2:
        $z4 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label5;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r4;

        $z6 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("A");

        if $z6 == 0 goto label4;

        if z7 != 0 goto label3;

        z7 = 1;

        goto label4;

     label3:
        interfaceinvoke r2.<java.util.Iterator: void remove()>();

     label4:
        goto label2;

     label5:
        $z5 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean contains(java.lang.Object)>("A");

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertTrue(java.lang.String,boolean)>("MultiSet should still contain \'A\'", $z5);

        $i1 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: int size()>();

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,int,int)>("MultiSet should have 2 items", 2, $i1);

        $i2 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: int getCount(java.lang.Object)>("A");

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,int,int)>("MultiSet should have 1 \'A\'", 1, $i2);

        return;
    }

    public void testMultiSetIteratorFail()
    {
        org.apache.commons.collections4.multiset.AbstractMultiSetTest r0;
        org.apache.commons.collections4.MultiSet r1;
        java.util.Iterator r2;
        boolean $z0;
        java.util.ConcurrentModificationException $r6;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSetTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: boolean isAddSupported()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r1 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: org.apache.commons.collections4.MultiSet makeObject()>();

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("A");

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("A");

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("B");

        r2 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: java.util.Iterator iterator()>();

        interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean remove(java.lang.Object)>("A");

     label2:
        interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void fail(java.lang.String)>("Should throw ConcurrentModificationException");

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

     label5:
        return;

        catch java.util.ConcurrentModificationException from label2 to label3 with label4;
    }

    public void testMultiSetIteratorFailNoMore()
    {
        org.apache.commons.collections4.multiset.AbstractMultiSetTest r0;
        org.apache.commons.collections4.MultiSet r1;
        java.util.Iterator r2;
        boolean $z0;
        java.util.NoSuchElementException $r8;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSetTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: boolean isAddSupported()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r1 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: org.apache.commons.collections4.MultiSet makeObject()>();

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("A");

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("A");

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("B");

        r2 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: java.util.Iterator iterator()>();

        interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

     label2:
        interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void fail(java.lang.String)>("Should throw NoSuchElementException");

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;

     label5:
        return;

        catch java.util.NoSuchElementException from label2 to label3 with label4;
    }

    public void testMultiSetIteratorFailDoubleRemove()
    {
        org.apache.commons.collections4.multiset.AbstractMultiSetTest r0;
        org.apache.commons.collections4.MultiSet r1;
        java.util.Iterator r2;
        boolean $z0;
        int $i0, $i1, $i2, $i3;
        java.lang.IllegalStateException $r7;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSetTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: boolean isAddSupported()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r1 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: org.apache.commons.collections4.MultiSet makeObject()>();

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("A");

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("A");

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("B");

        r2 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: java.util.Iterator iterator()>();

        interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $i0 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: int size()>();

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(int,int)>(3, $i0);

        interfaceinvoke r2.<java.util.Iterator: void remove()>();

        $i1 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: int size()>();

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(int,int)>(2, $i1);

     label2:
        interfaceinvoke r2.<java.util.Iterator: void remove()>();

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void fail(java.lang.String)>("Should throw IllegalStateException");

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

     label5:
        $i2 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: int size()>();

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(int,int)>(2, $i2);

        interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke r2.<java.util.Iterator: void remove()>();

        $i3 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: int size()>();

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(int,int)>(1, $i3);

        return;

        catch java.lang.IllegalStateException from label2 to label3 with label4;
    }

    public void testMultiSetIteratorRemoveProtectsInvariants()
    {
        org.apache.commons.collections4.multiset.AbstractMultiSetTest r0;
        org.apache.commons.collections4.MultiSet r1;
        java.util.Iterator r2, r3;
        boolean $z0, $z3, $z4, $z5, $z6, $z7;
        int $i0, $i1, $i2;
        java.lang.Object $r4, $r5;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSetTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: boolean isAddSupported()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r1 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: org.apache.commons.collections4.MultiSet makeObject()>();

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("A");

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("A");

        $i0 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: int size()>();

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(int,int)>(2, $i0);

        r2 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: java.util.Iterator iterator()>();

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.Object,java.lang.Object)>("A", $r4);

        $z3 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(boolean,boolean)>(1, $z3);

        interfaceinvoke r2.<java.util.Iterator: void remove()>();

        $i1 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: int size()>();

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(int,int)>(1, $i1);

        $z4 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(boolean,boolean)>(1, $z4);

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.Object,java.lang.Object)>("A", $r5);

        $z5 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(boolean,boolean)>(0, $z5);

        interfaceinvoke r2.<java.util.Iterator: void remove()>();

        $i2 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: int size()>();

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(int,int)>(0, $i2);

        $z6 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(boolean,boolean)>(0, $z6);

        r3 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: java.util.Iterator iterator()>();

        $z7 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(boolean,boolean)>(0, $z7);

        return;
    }

    public void testMultiSetToArray()
    {
        org.apache.commons.collections4.multiset.AbstractMultiSetTest r0;
        org.apache.commons.collections4.MultiSet r1;
        java.lang.Object[] r2;
        int i0, $i1, $i2, $i3, i4, i5, i6, i7;
        java.lang.Object r4;
        boolean $z0, $z6, $z7, $z8;
        byte $b8, $b9, $b10;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSetTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: boolean isAddSupported()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r1 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: org.apache.commons.collections4.MultiSet makeObject()>();

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("A");

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("A");

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("B");

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("B");

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("C");

        r2 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: java.lang.Object[] toArray()>();

        i4 = 0;

        i5 = 0;

        i6 = 0;

        i0 = lengthof r2;

        i7 = 0;

     label2:
        if i7 >= i0 goto label9;

        r4 = r2[i7];

        $i3 = i4;

        $z6 = virtualinvoke r4.<java.lang.Object: boolean equals(java.lang.Object)>("A");

        if $z6 == 0 goto label3;

        $b8 = 1;

        goto label4;

     label3:
        $b8 = 0;

     label4:
        i4 = $i3 + $b8;

        $i2 = i5;

        $z7 = virtualinvoke r4.<java.lang.Object: boolean equals(java.lang.Object)>("B");

        if $z7 == 0 goto label5;

        $b9 = 1;

        goto label6;

     label5:
        $b9 = 0;

     label6:
        i5 = $i2 + $b9;

        $i1 = i6;

        $z8 = virtualinvoke r4.<java.lang.Object: boolean equals(java.lang.Object)>("C");

        if $z8 == 0 goto label7;

        $b10 = 1;

        goto label8;

     label7:
        $b10 = 0;

     label8:
        i6 = $i1 + $b10;

        i7 = i7 + 1;

        goto label2;

     label9:
        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(int,int)>(2, i4);

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(int,int)>(2, i5);

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(int,int)>(1, i6);

        return;
    }

    public void testMultiSetToArrayPopulate()
    {
        org.apache.commons.collections4.multiset.AbstractMultiSetTest r0;
        org.apache.commons.collections4.MultiSet r1;
        java.lang.String[] r2, $r5;
        int i0, $i1, $i2, $i3, i4, i5, i6, i7;
        java.lang.String r4;
        boolean $z0, $z6, $z7, $z8;
        java.lang.Object[] $r6;
        byte $b8, $b9, $b10;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSetTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: boolean isAddSupported()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r1 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: org.apache.commons.collections4.MultiSet makeObject()>();

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("A");

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("A");

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("B");

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("B");

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("C");

        $r5 = newarray (java.lang.String)[0];

        $r6 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        r2 = (java.lang.String[]) $r6;

        i4 = 0;

        i5 = 0;

        i6 = 0;

        i0 = lengthof r2;

        i7 = 0;

     label2:
        if i7 >= i0 goto label9;

        r4 = r2[i7];

        $i3 = i4;

        $z6 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("A");

        if $z6 == 0 goto label3;

        $b8 = 1;

        goto label4;

     label3:
        $b8 = 0;

     label4:
        i4 = $i3 + $b8;

        $i2 = i5;

        $z7 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("B");

        if $z7 == 0 goto label5;

        $b9 = 1;

        goto label6;

     label5:
        $b9 = 0;

     label6:
        i5 = $i2 + $b9;

        $i1 = i6;

        $z8 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("C");

        if $z8 == 0 goto label7;

        $b10 = 1;

        goto label8;

     label7:
        $b10 = 0;

     label8:
        i6 = $i1 + $b10;

        i7 = i7 + 1;

        goto label2;

     label9:
        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(int,int)>(2, i4);

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(int,int)>(2, i5);

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(int,int)>(1, i6);

        return;
    }

    public void testMultiSetEquals()
    {
        org.apache.commons.collections4.multiset.AbstractMultiSetTest r0;
        org.apache.commons.collections4.MultiSet r1, r2;
        boolean $z0, $z1, $z3, $z5, $z14;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSetTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: boolean isAddSupported()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r1 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: org.apache.commons.collections4.MultiSet makeObject()>();

        r2 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: org.apache.commons.collections4.MultiSet makeObject()>();

        $z1 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean equals(java.lang.Object)>(r2);

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(boolean,boolean)>(1, $z1);

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("A");

        $z3 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean equals(java.lang.Object)>(r2);

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(boolean,boolean)>(0, $z3);

        interfaceinvoke r2.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("A");

        $z5 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean equals(java.lang.Object)>(r2);

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(boolean,boolean)>(1, $z5);

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("A");

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("B");

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("B");

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("C");

        interfaceinvoke r2.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("A");

        interfaceinvoke r2.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("B");

        interfaceinvoke r2.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("B");

        interfaceinvoke r2.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("C");

        $z14 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean equals(java.lang.Object)>(r2);

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(boolean,boolean)>(1, $z14);

        return;
    }

    public void testMultiSetEqualsHashMultiSet()
    {
        org.apache.commons.collections4.multiset.AbstractMultiSetTest r0;
        org.apache.commons.collections4.MultiSet r1;
        boolean $z0, $z1, $z3, $z5, $z14;
        org.apache.commons.collections4.multiset.HashMultiSet $r3;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSetTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: boolean isAddSupported()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r1 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: org.apache.commons.collections4.MultiSet makeObject()>();

        $r3 = new org.apache.commons.collections4.multiset.HashMultiSet;

        specialinvoke $r3.<org.apache.commons.collections4.multiset.HashMultiSet: void <init>()>();

        $z1 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean equals(java.lang.Object)>($r3);

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(boolean,boolean)>(1, $z1);

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("A");

        $z3 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean equals(java.lang.Object)>($r3);

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(boolean,boolean)>(0, $z3);

        interfaceinvoke $r3.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("A");

        $z5 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean equals(java.lang.Object)>($r3);

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(boolean,boolean)>(1, $z5);

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("A");

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("B");

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("B");

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("C");

        interfaceinvoke $r3.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("A");

        interfaceinvoke $r3.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("B");

        interfaceinvoke $r3.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("B");

        interfaceinvoke $r3.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("C");

        $z14 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean equals(java.lang.Object)>($r3);

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(boolean,boolean)>(1, $z14);

        return;
    }

    public void testMultiSetHashCode()
    {
        org.apache.commons.collections4.multiset.AbstractMultiSetTest r0;
        org.apache.commons.collections4.MultiSet r1, r2;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i15, i16, i17;
        java.lang.String $r3, $r4, $r5;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSetTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: boolean isAddSupported()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r1 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: org.apache.commons.collections4.MultiSet makeObject()>();

        r2 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: org.apache.commons.collections4.MultiSet makeObject()>();

        $i0 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: int hashCode()>();

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(int,int)>(0, $i0);

        $i1 = interfaceinvoke r2.<org.apache.commons.collections4.MultiSet: int hashCode()>();

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(int,int)>(0, $i1);

        $i2 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: int hashCode()>();

        $i3 = interfaceinvoke r2.<org.apache.commons.collections4.MultiSet: int hashCode()>();

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(int,int)>($i2, $i3);

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("A");

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("A");

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("B");

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("B");

        interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("C");

        interfaceinvoke r2.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("A");

        interfaceinvoke r2.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("A");

        interfaceinvoke r2.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("B");

        interfaceinvoke r2.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("B");

        interfaceinvoke r2.<org.apache.commons.collections4.MultiSet: boolean add(java.lang.Object)>("C");

        $i4 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: int hashCode()>();

        $i5 = interfaceinvoke r2.<org.apache.commons.collections4.MultiSet: int hashCode()>();

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(int,int)>($i4, $i5);

        $r3 = "A";

        $i6 = virtualinvoke $r3.<java.lang.String: int hashCode()>();

        $i7 = $i6 ^ 2;

        i15 = 0 + $i7;

        $r4 = "B";

        $i8 = virtualinvoke $r4.<java.lang.String: int hashCode()>();

        $i9 = $i8 ^ 2;

        i16 = i15 + $i9;

        $r5 = "C";

        $i10 = virtualinvoke $r5.<java.lang.String: int hashCode()>();

        $i11 = $i10 ^ 1;

        i17 = i16 + $i11;

        $i12 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: int hashCode()>();

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(int,int)>(i17, $i12);

        $i13 = interfaceinvoke r2.<org.apache.commons.collections4.MultiSet: int hashCode()>();

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(int,int)>(i17, $i13);

        return;
    }

    public org.apache.commons.collections4.BulkTest bulkTestMultiSetUniqueSet()
    {
        org.apache.commons.collections4.multiset.AbstractMultiSetTest r0;
        org.apache.commons.collections4.multiset.AbstractMultiSetTest$TestMultiSetUniqueSet $r1;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSetTest;

        $r1 = new org.apache.commons.collections4.multiset.AbstractMultiSetTest$TestMultiSetUniqueSet;

        specialinvoke $r1.<org.apache.commons.collections4.multiset.AbstractMultiSetTest$TestMultiSetUniqueSet: void <init>(org.apache.commons.collections4.multiset.AbstractMultiSetTest)>(r0);

        return $r1;
    }

    public void testEmptyMultiSetCompatibility() throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.commons.collections4.multiset.AbstractMultiSetTest r0;
        org.apache.commons.collections4.MultiSet r1, r2;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r3;
        java.lang.Object $r4;
        int $i0;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSetTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: org.apache.commons.collections4.MultiSet makeObject()>();

        $z0 = r1 instanceof java.io.Serializable;

        if $z0 == 0 goto label3;

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: boolean skipSerializedCanonicalTests()>();

        if $z1 != 0 goto label3;

        $z2 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: boolean isTestSerialization()>();

        if $z2 == 0 goto label3;

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: java.lang.String getCanonicalEmptyCollectionName(java.lang.Object)>(r1);

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: java.lang.Object readExternalFormFromDisk(java.lang.String)>($r3);

        r2 = (org.apache.commons.collections4.MultiSet) $r4;

        $i0 = interfaceinvoke r2.<org.apache.commons.collections4.MultiSet: int size()>();

        if $i0 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertTrue(java.lang.String,boolean)>("MultiSet is empty", $z3);

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.Object,java.lang.Object)>(r1, r2);

     label3:
        return;
    }

    public void testFullMultiSetCompatibility() throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.commons.collections4.multiset.AbstractMultiSetTest r0;
        org.apache.commons.collections4.MultiSet r1, r2;
        boolean $z0, $z1, $z2;
        java.lang.String $r3;
        java.lang.Object $r4;
        int $i0, $i1;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSetTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: org.apache.commons.collections4.MultiSet makeFullCollection()>();

        $z0 = r1 instanceof java.io.Serializable;

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: boolean skipSerializedCanonicalTests()>();

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: boolean isTestSerialization()>();

        if $z2 == 0 goto label1;

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: java.lang.String getCanonicalFullCollectionName(java.lang.Object)>(r1);

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: java.lang.Object readExternalFormFromDisk(java.lang.String)>($r3);

        r2 = (org.apache.commons.collections4.MultiSet) $r4;

        $i0 = interfaceinvoke r1.<org.apache.commons.collections4.MultiSet: int size()>();

        $i1 = interfaceinvoke r2.<org.apache.commons.collections4.MultiSet: int size()>();

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.String,int,int)>("MultiSet is the right size", $i0, $i1);

        staticinvoke <org.apache.commons.collections4.multiset.AbstractMultiSetTest: void assertEquals(java.lang.Object,java.lang.Object)>(r1, r2);

     label1:
        return;
    }

    public volatile java.util.Collection getCollection()
    {
        org.apache.commons.collections4.multiset.AbstractMultiSetTest r0;
        org.apache.commons.collections4.MultiSet $r1;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSetTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: org.apache.commons.collections4.MultiSet getCollection()>();

        return $r1;
    }

    public volatile java.util.Collection makeFullCollection()
    {
        org.apache.commons.collections4.multiset.AbstractMultiSetTest r0;
        org.apache.commons.collections4.MultiSet $r1;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSetTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: org.apache.commons.collections4.MultiSet makeFullCollection()>();

        return $r1;
    }

    public volatile java.util.Collection makeObject()
    {
        org.apache.commons.collections4.multiset.AbstractMultiSetTest r0;
        org.apache.commons.collections4.MultiSet $r1;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSetTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: org.apache.commons.collections4.MultiSet makeObject()>();

        return $r1;
    }

    public volatile java.lang.Object makeObject()
    {
        org.apache.commons.collections4.multiset.AbstractMultiSetTest r0;
        org.apache.commons.collections4.MultiSet $r1;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSetTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.multiset.AbstractMultiSetTest: org.apache.commons.collections4.MultiSet makeObject()>();

        return $r1;
    }
}
