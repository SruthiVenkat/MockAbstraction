public class org.apache.commons.collections4.map.MultiValueMap extends org.apache.commons.collections4.map.AbstractMapDecorator implements org.apache.commons.collections4.MultiMap, java.io.Serializable
{
    private static final long serialVersionUID;
    private final org.apache.commons.collections4.Factory collectionFactory;
    private transient java.util.Collection valuesView;

    public static org.apache.commons.collections4.map.MultiValueMap multiValueMap(java.util.Map)
    {
        java.util.Map r0;
        org.apache.commons.collections4.map.MultiValueMap $r1;

        r0 := @parameter0: java.util.Map;

        $r1 = staticinvoke <org.apache.commons.collections4.map.MultiValueMap: org.apache.commons.collections4.map.MultiValueMap multiValueMap(java.util.Map,java.lang.Class)>(r0, class "Ljava/util/ArrayList;");

        return $r1;
    }

    public static org.apache.commons.collections4.map.MultiValueMap multiValueMap(java.util.Map, java.lang.Class)
    {
        java.util.Map r0;
        java.lang.Class r1;
        org.apache.commons.collections4.map.MultiValueMap $r2;
        org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory $r3;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Class;

        $r2 = new org.apache.commons.collections4.map.MultiValueMap;

        $r3 = new org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory;

        specialinvoke $r3.<org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory: void <init>(java.lang.Class)>(r1);

        specialinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: void <init>(java.util.Map,org.apache.commons.collections4.Factory)>(r0, $r3);

        return $r2;
    }

    public static org.apache.commons.collections4.map.MultiValueMap multiValueMap(java.util.Map, org.apache.commons.collections4.Factory)
    {
        java.util.Map r0;
        org.apache.commons.collections4.Factory r1;
        org.apache.commons.collections4.map.MultiValueMap $r2;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: org.apache.commons.collections4.Factory;

        $r2 = new org.apache.commons.collections4.map.MultiValueMap;

        specialinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: void <init>(java.util.Map,org.apache.commons.collections4.Factory)>(r0, r1);

        return $r2;
    }

    public void <init>()
    {
        org.apache.commons.collections4.map.MultiValueMap r0;
        java.util.HashMap $r1;
        org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory $r2;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMap;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        $r2 = new org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory;

        specialinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory: void <init>(java.lang.Class)>(class "Ljava/util/ArrayList;");

        specialinvoke r0.<org.apache.commons.collections4.map.MultiValueMap: void <init>(java.util.Map,org.apache.commons.collections4.Factory)>($r1, $r2);

        return;
    }

    protected void <init>(java.util.Map, org.apache.commons.collections4.Factory)
    {
        org.apache.commons.collections4.map.MultiValueMap r0;
        java.util.Map r1;
        org.apache.commons.collections4.Factory r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMap;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: org.apache.commons.collections4.Factory;

        specialinvoke r0.<org.apache.commons.collections4.map.AbstractMapDecorator: void <init>(java.util.Map)>(r1);

        if r2 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The factory must not be null");

        throw $r3;

     label1:
        r0.<org.apache.commons.collections4.map.MultiValueMap: org.apache.commons.collections4.Factory collectionFactory> = r2;

        return;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        org.apache.commons.collections4.map.MultiValueMap r0;
        java.io.ObjectOutputStream r1;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMap;

        r1 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $r2 = r0.<org.apache.commons.collections4.map.MultiValueMap: java.util.Map map>;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r2);

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.commons.collections4.map.MultiValueMap r0;
        java.io.ObjectInputStream r1;
        java.lang.Object $r2;
        java.util.Map $r3;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMap;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r2 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r3 = (java.util.Map) $r2;

        r0.<org.apache.commons.collections4.map.MultiValueMap: java.util.Map map> = $r3;

        return;
    }

    public void clear()
    {
        org.apache.commons.collections4.map.MultiValueMap r0;
        java.util.Map $r1;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMap;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.map.MultiValueMap: java.util.Map decorated()>();

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        return;
    }

    public boolean removeMapping(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections4.map.MultiValueMap r0;
        java.lang.Object r1, r2;
        java.util.Collection r3;
        boolean z0, $z1;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 = virtualinvoke r0.<org.apache.commons.collections4.map.MultiValueMap: java.util.Collection getCollection(java.lang.Object)>(r1);

        if r3 != null goto label1;

        return 0;

     label1:
        z0 = interfaceinvoke r3.<java.util.Collection: boolean remove(java.lang.Object)>(r2);

        if z0 != 0 goto label2;

        return 0;

     label2:
        $z1 = interfaceinvoke r3.<java.util.Collection: boolean isEmpty()>();

        if $z1 == 0 goto label3;

        virtualinvoke r0.<org.apache.commons.collections4.map.MultiValueMap: java.lang.Object remove(java.lang.Object)>(r1);

     label3:
        return 1;
    }

    public boolean containsValue(java.lang.Object)
    {
        org.apache.commons.collections4.map.MultiValueMap r0;
        java.lang.Object r1, $r6, $r7;
        java.util.Set r2;
        java.util.Iterator r3;
        java.util.Map$Entry r4;
        java.util.Map $r5;
        boolean $z0, $z1;
        java.util.Collection $r8;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMap;

        r1 := @parameter0: java.lang.Object;

        $r5 = virtualinvoke r0.<org.apache.commons.collections4.map.MultiValueMap: java.util.Map decorated()>();

        r2 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>();

        if r2 == null goto label3;

        r3 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r6;

        $r7 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r8 = (java.util.Collection) $r7;

        $z1 = interfaceinvoke $r8.<java.util.Collection: boolean contains(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections4.map.MultiValueMap r0;
        java.lang.Object r1, r2, $r7;
        int $i0;
        java.util.Map $r3;
        boolean z1;
        java.util.Collection r5, r6;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        z1 = 0;

        r5 = virtualinvoke r0.<org.apache.commons.collections4.map.MultiValueMap: java.util.Collection getCollection(java.lang.Object)>(r1);

        if r5 != null goto label1;

        r6 = virtualinvoke r0.<org.apache.commons.collections4.map.MultiValueMap: java.util.Collection createCollection(int)>(1);

        interfaceinvoke r6.<java.util.Collection: boolean add(java.lang.Object)>(r2);

        $i0 = interfaceinvoke r6.<java.util.Collection: int size()>();

        if $i0 <= 0 goto label2;

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.map.MultiValueMap: java.util.Map decorated()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r6);

        z1 = 1;

        goto label2;

     label1:
        z1 = interfaceinvoke r5.<java.util.Collection: boolean add(java.lang.Object)>(r2);

     label2:
        if z1 == 0 goto label3;

        $r7 = r2;

        goto label4;

     label3:
        $r7 = null;

     label4:
        return $r7;
    }

    public void putAll(java.util.Map)
    {
        org.apache.commons.collections4.map.MultiValueMap r0;
        java.util.Map r1;
        boolean $z0, $z1, $z2;
        java.util.Set $r2, $r8;
        java.lang.Object $r3, $r4, $r5, $r9, $r10, $r11;
        org.apache.commons.collections4.MultiMap $r7;
        java.util.Collection $r12;
        java.util.Iterator r13, r15;
        java.util.Map$Entry r14, r16;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMap;

        r1 := @parameter0: java.util.Map;

        $z0 = r1 instanceof org.apache.commons.collections4.MultiMap;

        if $z0 == 0 goto label3;

        $r7 = (org.apache.commons.collections4.MultiMap) r1;

        $r8 = interfaceinvoke $r7.<org.apache.commons.collections4.MultiMap: java.util.Set entrySet()>();

        r13 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        $r9 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        r14 = (java.util.Map$Entry) $r9;

        $r10 = interfaceinvoke r14.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r11 = interfaceinvoke r14.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r12 = (java.util.Collection) $r11;

        virtualinvoke r0.<org.apache.commons.collections4.map.MultiValueMap: boolean putAll(java.lang.Object,java.util.Collection)>($r10, $r12);

        goto label1;

     label2:
        goto label5;

     label3:
        $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r15 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r3 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();

        r16 = (java.util.Map$Entry) $r3;

        $r4 = interfaceinvoke r16.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r5 = interfaceinvoke r16.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r0.<org.apache.commons.collections4.map.MultiValueMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r5);

        goto label4;

     label5:
        return;
    }

    public java.util.Set entrySet()
    {
        org.apache.commons.collections4.map.MultiValueMap r0;
        java.util.Set $r1;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMap;

        $r1 = specialinvoke r0.<org.apache.commons.collections4.map.AbstractMapDecorator: java.util.Set entrySet()>();

        return $r1;
    }

    public java.util.Collection values()
    {
        org.apache.commons.collections4.map.MultiValueMap r0;
        java.util.Collection r1, $r2;
        org.apache.commons.collections4.map.MultiValueMap$Values r3;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMap;

        r1 = r0.<org.apache.commons.collections4.map.MultiValueMap: java.util.Collection valuesView>;

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        r3 = new org.apache.commons.collections4.map.MultiValueMap$Values;

        $r2 = r3;

        specialinvoke r3.<org.apache.commons.collections4.map.MultiValueMap$Values: void <init>(org.apache.commons.collections4.map.MultiValueMap,org.apache.commons.collections4.map.MultiValueMap$1)>(r0, null);

        r0.<org.apache.commons.collections4.map.MultiValueMap: java.util.Collection valuesView> = r3;

     label2:
        return $r2;
    }

    public boolean containsValue(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections4.map.MultiValueMap r0;
        java.lang.Object r1, r2;
        java.util.Collection r3;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 = virtualinvoke r0.<org.apache.commons.collections4.map.MultiValueMap: java.util.Collection getCollection(java.lang.Object)>(r1);

        if r3 != null goto label1;

        return 0;

     label1:
        $z0 = interfaceinvoke r3.<java.util.Collection: boolean contains(java.lang.Object)>(r2);

        return $z0;
    }

    public java.util.Collection getCollection(java.lang.Object)
    {
        org.apache.commons.collections4.map.MultiValueMap r0;
        java.lang.Object r1, $r3;
        java.util.Map $r2;
        java.util.Collection $r4;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.apache.commons.collections4.map.MultiValueMap: java.util.Map decorated()>();

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.util.Collection) $r3;

        return $r4;
    }

    public int size(java.lang.Object)
    {
        org.apache.commons.collections4.map.MultiValueMap r0;
        java.lang.Object r1;
        java.util.Collection r2;
        int $i0;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMap;

        r1 := @parameter0: java.lang.Object;

        r2 = virtualinvoke r0.<org.apache.commons.collections4.map.MultiValueMap: java.util.Collection getCollection(java.lang.Object)>(r1);

        if r2 != null goto label1;

        return 0;

     label1:
        $i0 = interfaceinvoke r2.<java.util.Collection: int size()>();

        return $i0;
    }

    public boolean putAll(java.lang.Object, java.util.Collection)
    {
        org.apache.commons.collections4.map.MultiValueMap r0;
        java.lang.Object r1;
        java.util.Collection r2, r5, r6;
        int $i0, $i1, $i2;
        java.util.Map $r3;
        boolean z1;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.util.Collection;

        if r2 == null goto label1;

        $i0 = interfaceinvoke r2.<java.util.Collection: int size()>();

        if $i0 != 0 goto label2;

     label1:
        return 0;

     label2:
        z1 = 0;

        r5 = virtualinvoke r0.<org.apache.commons.collections4.map.MultiValueMap: java.util.Collection getCollection(java.lang.Object)>(r1);

        if r5 != null goto label3;

        $i1 = interfaceinvoke r2.<java.util.Collection: int size()>();

        r6 = virtualinvoke r0.<org.apache.commons.collections4.map.MultiValueMap: java.util.Collection createCollection(int)>($i1);

        interfaceinvoke r6.<java.util.Collection: boolean addAll(java.util.Collection)>(r2);

        $i2 = interfaceinvoke r6.<java.util.Collection: int size()>();

        if $i2 <= 0 goto label4;

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.map.MultiValueMap: java.util.Map decorated()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r6);

        z1 = 1;

        goto label4;

     label3:
        z1 = interfaceinvoke r5.<java.util.Collection: boolean addAll(java.util.Collection)>(r2);

     label4:
        return z1;
    }

    public java.util.Iterator iterator(java.lang.Object)
    {
        org.apache.commons.collections4.map.MultiValueMap r0;
        java.lang.Object r1;
        boolean $z0;
        org.apache.commons.collections4.map.MultiValueMap$ValuesIterator $r2;
        java.util.Iterator $r3;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMap;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.map.MultiValueMap: boolean containsKey(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r3 = staticinvoke <org.apache.commons.collections4.iterators.EmptyIterator: java.util.Iterator emptyIterator()>();

        return $r3;

     label1:
        $r2 = new org.apache.commons.collections4.map.MultiValueMap$ValuesIterator;

        specialinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap$ValuesIterator: void <init>(org.apache.commons.collections4.map.MultiValueMap,java.lang.Object)>(r0, r1);

        return $r2;
    }

    public java.util.Iterator iterator()
    {
        org.apache.commons.collections4.map.MultiValueMap r0;
        java.util.Iterator r2;
        java.util.ArrayList $r3;
        java.util.Set $r4;
        org.apache.commons.collections4.map.MultiValueMap$1 $r5;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMap;

        $r3 = new java.util.ArrayList;

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.map.MultiValueMap: java.util.Set keySet()>();

        specialinvoke $r3.<java.util.ArrayList: void <init>(java.util.Collection)>($r4);

        r2 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

        $r5 = new org.apache.commons.collections4.map.MultiValueMap$1;

        specialinvoke $r5.<org.apache.commons.collections4.map.MultiValueMap$1: void <init>(org.apache.commons.collections4.map.MultiValueMap,java.util.Iterator)>(r0, r2);

        return $r5;
    }

    public int totalSize()
    {
        org.apache.commons.collections4.map.MultiValueMap r0;
        java.util.Iterator r1;
        java.lang.Object r2;
        java.util.Map $r3;
        java.util.Collection $r4;
        boolean $z0;
        int $i0, i1;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMap;

        i1 = 0;

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.map.MultiValueMap: java.util.Map decorated()>();

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Collection values()>();

        r1 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $i0 = staticinvoke <org.apache.commons.collections4.CollectionUtils: int size(java.lang.Object)>(r2);

        i1 = i1 + $i0;

        goto label1;

     label2:
        return i1;
    }

    protected java.util.Collection createCollection(int)
    {
        org.apache.commons.collections4.map.MultiValueMap r0;
        int i0;
        org.apache.commons.collections4.Factory $r1;
        java.lang.Object $r2;
        java.util.Collection $r3;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMap;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.collections4.map.MultiValueMap: org.apache.commons.collections4.Factory collectionFactory>;

        $r2 = interfaceinvoke $r1.<org.apache.commons.collections4.Factory: java.lang.Object create()>();

        $r3 = (java.util.Collection) $r2;

        return $r3;
    }

    public static void <clinit>()
    {
        <org.apache.commons.collections4.map.MultiValueMap: long serialVersionUID> = -2214159910087182007L;

        return;
    }
}
