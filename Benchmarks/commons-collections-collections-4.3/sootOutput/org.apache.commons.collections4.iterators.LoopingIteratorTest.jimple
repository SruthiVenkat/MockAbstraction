public class org.apache.commons.collections4.iterators.LoopingIteratorTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.commons.collections4.iterators.LoopingIteratorTest r0;

        r0 := @this: org.apache.commons.collections4.iterators.LoopingIteratorTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testConstructorEx() throws java.lang.Exception
    {
        org.apache.commons.collections4.iterators.LoopingIteratorTest r0;
        org.apache.commons.collections4.iterators.LoopingIterator $r2;
        java.lang.NullPointerException $r3;

        r0 := @this: org.apache.commons.collections4.iterators.LoopingIteratorTest;

     label1:
        $r2 = new org.apache.commons.collections4.iterators.LoopingIterator;

        specialinvoke $r2.<org.apache.commons.collections4.iterators.LoopingIterator: void <init>(java.util.Collection)>(null);

        staticinvoke <org.junit.Assert: void fail()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public void testLooping0() throws java.lang.Exception
    {
        org.apache.commons.collections4.iterators.LoopingIteratorTest r0;
        java.util.ArrayList $r4;
        org.apache.commons.collections4.iterators.LoopingIterator $r5;
        boolean $z0, $z1;
        java.util.NoSuchElementException $r8;

        r0 := @this: org.apache.commons.collections4.iterators.LoopingIteratorTest;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = new org.apache.commons.collections4.iterators.LoopingIterator;

        specialinvoke $r5.<org.apache.commons.collections4.iterators.LoopingIterator: void <init>(java.util.Collection)>($r4);

        $z0 = virtualinvoke $r5.<org.apache.commons.collections4.iterators.LoopingIterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("hasNext should return false", $z1);

     label3:
        virtualinvoke $r5.<org.apache.commons.collections4.iterators.LoopingIterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("NoSuchElementException was not thrown during next() call.");

     label4:
        goto label6;

     label5:
        $r8 := @caughtexception;

     label6:
        return;

        catch java.util.NoSuchElementException from label3 to label4 with label5;
    }

    public void testLooping1() throws java.lang.Exception
    {
        org.apache.commons.collections4.iterators.LoopingIteratorTest r0;
        java.util.List r1;
        java.lang.String[] $r3;
        org.apache.commons.collections4.iterators.LoopingIterator $r4;
        boolean $z0, $z1, $z2;
        java.lang.Object $r5, $r6, $r7;

        r0 := @this: org.apache.commons.collections4.iterators.LoopingIteratorTest;

        $r3 = newarray (java.lang.String)[1];

        $r3[0] = "a";

        r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        $r4 = new org.apache.commons.collections4.iterators.LoopingIterator;

        specialinvoke $r4.<org.apache.commons.collections4.iterators.LoopingIterator: void <init>(java.util.Collection)>(r1);

        $z0 = virtualinvoke $r4.<org.apache.commons.collections4.iterators.LoopingIterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("1st hasNext should return true", $z0);

        $r5 = virtualinvoke $r4.<org.apache.commons.collections4.iterators.LoopingIterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $r5);

        $z1 = virtualinvoke $r4.<org.apache.commons.collections4.iterators.LoopingIterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("2nd hasNext should return true", $z1);

        $r6 = virtualinvoke $r4.<org.apache.commons.collections4.iterators.LoopingIterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $r6);

        $z2 = virtualinvoke $r4.<org.apache.commons.collections4.iterators.LoopingIterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("3rd hasNext should return true", $z2);

        $r7 = virtualinvoke $r4.<org.apache.commons.collections4.iterators.LoopingIterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $r7);

        return;
    }

    public void testLooping2() throws java.lang.Exception
    {
        org.apache.commons.collections4.iterators.LoopingIteratorTest r0;
        java.util.List r1;
        java.lang.String[] $r3;
        org.apache.commons.collections4.iterators.LoopingIterator $r4;
        boolean $z0, $z1, $z2;
        java.lang.Object $r5, $r6, $r7;

        r0 := @this: org.apache.commons.collections4.iterators.LoopingIteratorTest;

        $r3 = newarray (java.lang.String)[2];

        $r3[0] = "a";

        $r3[1] = "b";

        r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        $r4 = new org.apache.commons.collections4.iterators.LoopingIterator;

        specialinvoke $r4.<org.apache.commons.collections4.iterators.LoopingIterator: void <init>(java.util.Collection)>(r1);

        $z0 = virtualinvoke $r4.<org.apache.commons.collections4.iterators.LoopingIterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("1st hasNext should return true", $z0);

        $r5 = virtualinvoke $r4.<org.apache.commons.collections4.iterators.LoopingIterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $r5);

        $z1 = virtualinvoke $r4.<org.apache.commons.collections4.iterators.LoopingIterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("2nd hasNext should return true", $z1);

        $r6 = virtualinvoke $r4.<org.apache.commons.collections4.iterators.LoopingIterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("b", $r6);

        $z2 = virtualinvoke $r4.<org.apache.commons.collections4.iterators.LoopingIterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("3rd hasNext should return true", $z2);

        $r7 = virtualinvoke $r4.<org.apache.commons.collections4.iterators.LoopingIterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $r7);

        return;
    }

    public void testLooping3() throws java.lang.Exception
    {
        org.apache.commons.collections4.iterators.LoopingIteratorTest r0;
        java.util.List r1;
        java.lang.String[] $r3;
        org.apache.commons.collections4.iterators.LoopingIterator $r4;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r5, $r6, $r7, $r8;

        r0 := @this: org.apache.commons.collections4.iterators.LoopingIteratorTest;

        $r3 = newarray (java.lang.String)[3];

        $r3[0] = "a";

        $r3[1] = "b";

        $r3[2] = "c";

        r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        $r4 = new org.apache.commons.collections4.iterators.LoopingIterator;

        specialinvoke $r4.<org.apache.commons.collections4.iterators.LoopingIterator: void <init>(java.util.Collection)>(r1);

        $z0 = virtualinvoke $r4.<org.apache.commons.collections4.iterators.LoopingIterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("1st hasNext should return true", $z0);

        $r5 = virtualinvoke $r4.<org.apache.commons.collections4.iterators.LoopingIterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $r5);

        $z1 = virtualinvoke $r4.<org.apache.commons.collections4.iterators.LoopingIterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("2nd hasNext should return true", $z1);

        $r6 = virtualinvoke $r4.<org.apache.commons.collections4.iterators.LoopingIterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("b", $r6);

        $z2 = virtualinvoke $r4.<org.apache.commons.collections4.iterators.LoopingIterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("3rd hasNext should return true", $z2);

        $r7 = virtualinvoke $r4.<org.apache.commons.collections4.iterators.LoopingIterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("c", $r7);

        $z3 = virtualinvoke $r4.<org.apache.commons.collections4.iterators.LoopingIterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("4th hasNext should return true", $z3);

        $r8 = virtualinvoke $r4.<org.apache.commons.collections4.iterators.LoopingIterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $r8);

        return;
    }

    public void testRemoving1() throws java.lang.Exception
    {
        org.apache.commons.collections4.iterators.LoopingIteratorTest r0;
        java.util.ArrayList $r4;
        java.lang.String[] $r5;
        java.util.List $r6;
        org.apache.commons.collections4.iterators.LoopingIterator $r7;
        int $i0, $i2, $i4, $i6;
        long $l1, $l3, $l5, $l7;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r8, $r9, $r10;
        java.util.NoSuchElementException $r12;

        r0 := @this: org.apache.commons.collections4.iterators.LoopingIteratorTest;

        $r4 = new java.util.ArrayList;

        $r5 = newarray (java.lang.String)[3];

        $r5[0] = "a";

        $r5[1] = "b";

        $r5[2] = "c";

        $r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5);

        specialinvoke $r4.<java.util.ArrayList: void <init>(java.util.Collection)>($r6);

        $r7 = new org.apache.commons.collections4.iterators.LoopingIterator;

        specialinvoke $r7.<org.apache.commons.collections4.iterators.LoopingIterator: void <init>(java.util.Collection)>($r4);

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("list should have 3 elements.", 3L, $l1);

        $z0 = virtualinvoke $r7.<org.apache.commons.collections4.iterators.LoopingIterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("1st hasNext should return true", $z0);

        $r8 = virtualinvoke $r7.<org.apache.commons.collections4.iterators.LoopingIterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $r8);

        virtualinvoke $r7.<org.apache.commons.collections4.iterators.LoopingIterator: void remove()>();

        $i2 = interfaceinvoke $r4.<java.util.List: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("list should have 2 elements.", 2L, $l3);

        $z1 = virtualinvoke $r7.<org.apache.commons.collections4.iterators.LoopingIterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("2nd hasNext should return true", $z1);

        $r9 = virtualinvoke $r7.<org.apache.commons.collections4.iterators.LoopingIterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("b", $r9);

        virtualinvoke $r7.<org.apache.commons.collections4.iterators.LoopingIterator: void remove()>();

        $i4 = interfaceinvoke $r4.<java.util.List: int size()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("list should have 1 elements.", 1L, $l5);

        $z2 = virtualinvoke $r7.<org.apache.commons.collections4.iterators.LoopingIterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("3rd hasNext should return true", $z2);

        $r10 = virtualinvoke $r7.<org.apache.commons.collections4.iterators.LoopingIterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("c", $r10);

        virtualinvoke $r7.<org.apache.commons.collections4.iterators.LoopingIterator: void remove()>();

        $i6 = interfaceinvoke $r4.<java.util.List: int size()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("list should have 0 elements.", 0L, $l7);

        $z3 = virtualinvoke $r7.<org.apache.commons.collections4.iterators.LoopingIterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("4th hasNext should return false", $z3);

     label1:
        virtualinvoke $r7.<org.apache.commons.collections4.iterators.LoopingIterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected NoSuchElementException to be thrown.");

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;

     label4:
        return;

        catch java.util.NoSuchElementException from label1 to label2 with label3;
    }

    public void testReset() throws java.lang.Exception
    {
        org.apache.commons.collections4.iterators.LoopingIteratorTest r0;
        java.util.List r1;
        java.lang.String[] $r3;
        org.apache.commons.collections4.iterators.LoopingIterator $r4;
        java.lang.Object $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;

        r0 := @this: org.apache.commons.collections4.iterators.LoopingIteratorTest;

        $r3 = newarray (java.lang.String)[3];

        $r3[0] = "a";

        $r3[1] = "b";

        $r3[2] = "c";

        r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        $r4 = new org.apache.commons.collections4.iterators.LoopingIterator;

        specialinvoke $r4.<org.apache.commons.collections4.iterators.LoopingIterator: void <init>(java.util.Collection)>(r1);

        $r5 = virtualinvoke $r4.<org.apache.commons.collections4.iterators.LoopingIterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $r5);

        $r6 = virtualinvoke $r4.<org.apache.commons.collections4.iterators.LoopingIterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("b", $r6);

        virtualinvoke $r4.<org.apache.commons.collections4.iterators.LoopingIterator: void reset()>();

        $r7 = virtualinvoke $r4.<org.apache.commons.collections4.iterators.LoopingIterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $r7);

        virtualinvoke $r4.<org.apache.commons.collections4.iterators.LoopingIterator: void reset()>();

        $r8 = virtualinvoke $r4.<org.apache.commons.collections4.iterators.LoopingIterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $r8);

        $r9 = virtualinvoke $r4.<org.apache.commons.collections4.iterators.LoopingIterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("b", $r9);

        $r10 = virtualinvoke $r4.<org.apache.commons.collections4.iterators.LoopingIterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("c", $r10);

        virtualinvoke $r4.<org.apache.commons.collections4.iterators.LoopingIterator: void reset()>();

        $r11 = virtualinvoke $r4.<org.apache.commons.collections4.iterators.LoopingIterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $r11);

        $r12 = virtualinvoke $r4.<org.apache.commons.collections4.iterators.LoopingIterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("b", $r12);

        $r13 = virtualinvoke $r4.<org.apache.commons.collections4.iterators.LoopingIterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("c", $r13);

        return;
    }

    public void testSize() throws java.lang.Exception
    {
        org.apache.commons.collections4.iterators.LoopingIteratorTest r0;
        java.util.ArrayList $r3;
        java.lang.String[] $r4;
        java.util.List $r5;
        org.apache.commons.collections4.iterators.LoopingIterator $r6;
        int $i0, $i2, $i4, $i6;
        long $l1, $l3, $l5, $l7;

        r0 := @this: org.apache.commons.collections4.iterators.LoopingIteratorTest;

        $r3 = new java.util.ArrayList;

        $r4 = newarray (java.lang.String)[3];

        $r4[0] = "a";

        $r4[1] = "b";

        $r4[2] = "c";

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        specialinvoke $r3.<java.util.ArrayList: void <init>(java.util.Collection)>($r5);

        $r6 = new org.apache.commons.collections4.iterators.LoopingIterator;

        specialinvoke $r6.<org.apache.commons.collections4.iterators.LoopingIterator: void <init>(java.util.Collection)>($r3);

        $i0 = virtualinvoke $r6.<org.apache.commons.collections4.iterators.LoopingIterator: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l1);

        virtualinvoke $r6.<org.apache.commons.collections4.iterators.LoopingIterator: java.lang.Object next()>();

        virtualinvoke $r6.<org.apache.commons.collections4.iterators.LoopingIterator: java.lang.Object next()>();

        $i2 = virtualinvoke $r6.<org.apache.commons.collections4.iterators.LoopingIterator: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l3);

        virtualinvoke $r6.<org.apache.commons.collections4.iterators.LoopingIterator: void reset()>();

        $i4 = virtualinvoke $r6.<org.apache.commons.collections4.iterators.LoopingIterator: int size()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l5);

        virtualinvoke $r6.<org.apache.commons.collections4.iterators.LoopingIterator: java.lang.Object next()>();

        virtualinvoke $r6.<org.apache.commons.collections4.iterators.LoopingIterator: void remove()>();

        $i6 = virtualinvoke $r6.<org.apache.commons.collections4.iterators.LoopingIterator: int size()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l7);

        return;
    }
}
