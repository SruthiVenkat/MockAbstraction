public class org.apache.commons.collections4.map.CompositeMapTest extends org.apache.commons.collections4.map.AbstractIterableMapTest
{
    private boolean pass;

    public void <init>(java.lang.String)
    {
        org.apache.commons.collections4.map.CompositeMapTest r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.collections4.map.CompositeMapTest;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.collections4.map.AbstractIterableMapTest: void <init>(java.lang.String)>(r1);

        r0.<org.apache.commons.collections4.map.CompositeMapTest: boolean pass> = 0;

        return;
    }

    public void setUp() throws java.lang.Exception
    {
        org.apache.commons.collections4.map.CompositeMapTest r0;

        r0 := @this: org.apache.commons.collections4.map.CompositeMapTest;

        specialinvoke r0.<org.apache.commons.collections4.map.AbstractIterableMapTest: void setUp()>();

        r0.<org.apache.commons.collections4.map.CompositeMapTest: boolean pass> = 0;

        return;
    }

    public org.apache.commons.collections4.map.CompositeMap makeObject()
    {
        org.apache.commons.collections4.map.CompositeMapTest r0;
        org.apache.commons.collections4.map.CompositeMap $r2;
        java.util.HashMap $r3;
        org.apache.commons.collections4.map.EmptyMapMutator $r4;

        r0 := @this: org.apache.commons.collections4.map.CompositeMapTest;

        $r2 = new org.apache.commons.collections4.map.CompositeMap;

        specialinvoke $r2.<org.apache.commons.collections4.map.CompositeMap: void <init>()>();

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        virtualinvoke $r2.<org.apache.commons.collections4.map.CompositeMap: void addComposited(java.util.Map)>($r3);

        $r4 = new org.apache.commons.collections4.map.EmptyMapMutator;

        specialinvoke $r4.<org.apache.commons.collections4.map.EmptyMapMutator: void <init>()>();

        virtualinvoke $r2.<org.apache.commons.collections4.map.CompositeMap: void setMutator(org.apache.commons.collections4.map.CompositeMap$MapMutator)>($r4);

        return $r2;
    }

    private java.util.Map buildOne()
    {
        org.apache.commons.collections4.map.CompositeMapTest r0;
        java.util.HashMap $r2;

        r0 := @this: org.apache.commons.collections4.map.CompositeMapTest;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        virtualinvoke $r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("1", "one");

        virtualinvoke $r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("2", "two");

        return $r2;
    }

    public java.util.Map buildTwo()
    {
        org.apache.commons.collections4.map.CompositeMapTest r0;
        java.util.HashMap $r2;

        r0 := @this: org.apache.commons.collections4.map.CompositeMapTest;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        virtualinvoke $r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("3", "three");

        virtualinvoke $r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("4", "four");

        return $r2;
    }

    public void testGet()
    {
        org.apache.commons.collections4.map.CompositeMapTest r0;
        org.apache.commons.collections4.map.CompositeMap $r2;
        java.util.Map $r3, $r4;
        java.lang.Object $r5, $r6;

        r0 := @this: org.apache.commons.collections4.map.CompositeMapTest;

        $r2 = new org.apache.commons.collections4.map.CompositeMap;

        $r3 = specialinvoke r0.<org.apache.commons.collections4.map.CompositeMapTest: java.util.Map buildOne()>();

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.map.CompositeMapTest: java.util.Map buildTwo()>();

        specialinvoke $r2.<org.apache.commons.collections4.map.CompositeMap: void <init>(java.util.Map,java.util.Map)>($r3, $r4);

        $r5 = virtualinvoke $r2.<org.apache.commons.collections4.map.CompositeMap: java.lang.Object get(java.lang.Object)>("1");

        staticinvoke <org.apache.commons.collections4.map.CompositeMapTest: void assertEquals(java.lang.Object,java.lang.Object)>("one", $r5);

        $r6 = virtualinvoke $r2.<org.apache.commons.collections4.map.CompositeMap: java.lang.Object get(java.lang.Object)>("4");

        staticinvoke <org.apache.commons.collections4.map.CompositeMapTest: void assertEquals(java.lang.Object,java.lang.Object)>("four", $r6);

        return;
    }

    public void testAddComposited()
    {
        org.apache.commons.collections4.map.CompositeMapTest r0;
        org.apache.commons.collections4.map.CompositeMap $r4;
        java.util.Map $r5, $r6;
        java.util.HashMap $r7;
        boolean $z0;
        java.lang.IllegalArgumentException $r9;

        r0 := @this: org.apache.commons.collections4.map.CompositeMapTest;

        $r4 = new org.apache.commons.collections4.map.CompositeMap;

        $r5 = specialinvoke r0.<org.apache.commons.collections4.map.CompositeMapTest: java.util.Map buildOne()>();

        $r6 = virtualinvoke r0.<org.apache.commons.collections4.map.CompositeMapTest: java.util.Map buildTwo()>();

        specialinvoke $r4.<org.apache.commons.collections4.map.CompositeMap: void <init>(java.util.Map,java.util.Map)>($r5, $r6);

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("5", "five");

        virtualinvoke $r4.<org.apache.commons.collections4.map.CompositeMap: void addComposited(java.util.Map)>($r7);

        $z0 = virtualinvoke $r4.<org.apache.commons.collections4.map.CompositeMap: boolean containsKey(java.lang.Object)>("5");

        staticinvoke <org.apache.commons.collections4.map.CompositeMapTest: void assertTrue(boolean)>($z0);

     label1:
        virtualinvoke $r4.<org.apache.commons.collections4.map.CompositeMap: void addComposited(java.util.Map)>($r7);

        staticinvoke <org.apache.commons.collections4.map.CompositeMapTest: void fail(java.lang.String)>("Expecting IllegalArgumentException.");

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

     label4:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public void testRemoveComposited()
    {
        org.apache.commons.collections4.map.CompositeMapTest r0;
        org.apache.commons.collections4.map.CompositeMap $r3;
        java.util.Map $r4, $r5, $r9;
        java.util.HashMap $r6;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.commons.collections4.map.CompositeMapTest;

        $r3 = new org.apache.commons.collections4.map.CompositeMap;

        $r4 = specialinvoke r0.<org.apache.commons.collections4.map.CompositeMapTest: java.util.Map buildOne()>();

        $r5 = virtualinvoke r0.<org.apache.commons.collections4.map.CompositeMapTest: java.util.Map buildTwo()>();

        specialinvoke $r3.<org.apache.commons.collections4.map.CompositeMap: void <init>(java.util.Map,java.util.Map)>($r4, $r5);

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("5", "five");

        virtualinvoke $r3.<org.apache.commons.collections4.map.CompositeMap: void addComposited(java.util.Map)>($r6);

        $z0 = virtualinvoke $r3.<org.apache.commons.collections4.map.CompositeMap: boolean containsKey(java.lang.Object)>("5");

        staticinvoke <org.apache.commons.collections4.map.CompositeMapTest: void assertTrue(boolean)>($z0);

        virtualinvoke $r3.<org.apache.commons.collections4.map.CompositeMap: java.util.Map removeComposited(java.util.Map)>($r6);

        $z1 = virtualinvoke $r3.<org.apache.commons.collections4.map.CompositeMap: boolean containsKey(java.lang.Object)>("5");

        staticinvoke <org.apache.commons.collections4.map.CompositeMapTest: void assertFalse(boolean)>($z1);

        $r9 = specialinvoke r0.<org.apache.commons.collections4.map.CompositeMapTest: java.util.Map buildOne()>();

        virtualinvoke $r3.<org.apache.commons.collections4.map.CompositeMap: java.util.Map removeComposited(java.util.Map)>($r9);

        $z2 = virtualinvoke $r3.<org.apache.commons.collections4.map.CompositeMap: boolean containsKey(java.lang.Object)>("2");

        staticinvoke <org.apache.commons.collections4.map.CompositeMapTest: void assertFalse(boolean)>($z2);

        return;
    }

    public void testRemoveFromUnderlying()
    {
        org.apache.commons.collections4.map.CompositeMapTest r0;
        org.apache.commons.collections4.map.CompositeMap $r3;
        java.util.Map $r4, $r5;
        java.util.HashMap $r6;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.collections4.map.CompositeMapTest;

        $r3 = new org.apache.commons.collections4.map.CompositeMap;

        $r4 = specialinvoke r0.<org.apache.commons.collections4.map.CompositeMapTest: java.util.Map buildOne()>();

        $r5 = virtualinvoke r0.<org.apache.commons.collections4.map.CompositeMapTest: java.util.Map buildTwo()>();

        specialinvoke $r3.<org.apache.commons.collections4.map.CompositeMap: void <init>(java.util.Map,java.util.Map)>($r4, $r5);

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("5", "five");

        virtualinvoke $r3.<org.apache.commons.collections4.map.CompositeMap: void addComposited(java.util.Map)>($r6);

        $z0 = virtualinvoke $r3.<org.apache.commons.collections4.map.CompositeMap: boolean containsKey(java.lang.Object)>("5");

        staticinvoke <org.apache.commons.collections4.map.CompositeMapTest: void assertTrue(boolean)>($z0);

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>("5");

        $z1 = virtualinvoke $r3.<org.apache.commons.collections4.map.CompositeMap: boolean containsKey(java.lang.Object)>("5");

        staticinvoke <org.apache.commons.collections4.map.CompositeMapTest: void assertFalse(boolean)>($z1);

        return;
    }

    public void testRemoveFromComposited()
    {
        org.apache.commons.collections4.map.CompositeMapTest r0;
        org.apache.commons.collections4.map.CompositeMap $r3;
        java.util.Map $r4, $r5;
        java.util.HashMap $r6;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.collections4.map.CompositeMapTest;

        $r3 = new org.apache.commons.collections4.map.CompositeMap;

        $r4 = specialinvoke r0.<org.apache.commons.collections4.map.CompositeMapTest: java.util.Map buildOne()>();

        $r5 = virtualinvoke r0.<org.apache.commons.collections4.map.CompositeMapTest: java.util.Map buildTwo()>();

        specialinvoke $r3.<org.apache.commons.collections4.map.CompositeMap: void <init>(java.util.Map,java.util.Map)>($r4, $r5);

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("5", "five");

        virtualinvoke $r3.<org.apache.commons.collections4.map.CompositeMap: void addComposited(java.util.Map)>($r6);

        $z0 = virtualinvoke $r3.<org.apache.commons.collections4.map.CompositeMap: boolean containsKey(java.lang.Object)>("5");

        staticinvoke <org.apache.commons.collections4.map.CompositeMapTest: void assertTrue(boolean)>($z0);

        virtualinvoke $r3.<org.apache.commons.collections4.map.CompositeMap: java.lang.Object remove(java.lang.Object)>("5");

        $z1 = virtualinvoke $r6.<java.util.HashMap: boolean containsKey(java.lang.Object)>("5");

        staticinvoke <org.apache.commons.collections4.map.CompositeMapTest: void assertFalse(boolean)>($z1);

        return;
    }

    public void testResolveCollision()
    {
        org.apache.commons.collections4.map.CompositeMapTest r0;
        org.apache.commons.collections4.map.CompositeMap $r2;
        java.util.Map $r3, $r4, $r6;
        org.apache.commons.collections4.map.CompositeMapTest$1 $r5;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.map.CompositeMapTest;

        $r2 = new org.apache.commons.collections4.map.CompositeMap;

        $r3 = specialinvoke r0.<org.apache.commons.collections4.map.CompositeMapTest: java.util.Map buildOne()>();

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.map.CompositeMapTest: java.util.Map buildTwo()>();

        $r5 = new org.apache.commons.collections4.map.CompositeMapTest$1;

        specialinvoke $r5.<org.apache.commons.collections4.map.CompositeMapTest$1: void <init>(org.apache.commons.collections4.map.CompositeMapTest)>(r0);

        specialinvoke $r2.<org.apache.commons.collections4.map.CompositeMap: void <init>(java.util.Map,java.util.Map,org.apache.commons.collections4.map.CompositeMap$MapMutator)>($r3, $r4, $r5);

        $r6 = specialinvoke r0.<org.apache.commons.collections4.map.CompositeMapTest: java.util.Map buildOne()>();

        virtualinvoke $r2.<org.apache.commons.collections4.map.CompositeMap: void addComposited(java.util.Map)>($r6);

        $z0 = r0.<org.apache.commons.collections4.map.CompositeMapTest: boolean pass>;

        staticinvoke <org.apache.commons.collections4.map.CompositeMapTest: void assertTrue(boolean)>($z0);

        return;
    }

    public void testPut()
    {
        org.apache.commons.collections4.map.CompositeMapTest r0;
        org.apache.commons.collections4.map.CompositeMap $r2;
        java.util.Map $r3, $r4;
        org.apache.commons.collections4.map.CompositeMapTest$2 $r5;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.map.CompositeMapTest;

        $r2 = new org.apache.commons.collections4.map.CompositeMap;

        $r3 = specialinvoke r0.<org.apache.commons.collections4.map.CompositeMapTest: java.util.Map buildOne()>();

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.map.CompositeMapTest: java.util.Map buildTwo()>();

        $r5 = new org.apache.commons.collections4.map.CompositeMapTest$2;

        specialinvoke $r5.<org.apache.commons.collections4.map.CompositeMapTest$2: void <init>(org.apache.commons.collections4.map.CompositeMapTest)>(r0);

        specialinvoke $r2.<org.apache.commons.collections4.map.CompositeMap: void <init>(java.util.Map,java.util.Map,org.apache.commons.collections4.map.CompositeMap$MapMutator)>($r3, $r4, $r5);

        virtualinvoke $r2.<org.apache.commons.collections4.map.CompositeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("willy", "wonka");

        $z0 = r0.<org.apache.commons.collections4.map.CompositeMapTest: boolean pass>;

        staticinvoke <org.apache.commons.collections4.map.CompositeMapTest: void assertTrue(boolean)>($z0);

        return;
    }

    public void testPutAll()
    {
        org.apache.commons.collections4.map.CompositeMapTest r0;
        org.apache.commons.collections4.map.CompositeMap $r2;
        java.util.Map $r3, $r4;
        org.apache.commons.collections4.map.CompositeMapTest$3 $r5;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.map.CompositeMapTest;

        $r2 = new org.apache.commons.collections4.map.CompositeMap;

        $r3 = specialinvoke r0.<org.apache.commons.collections4.map.CompositeMapTest: java.util.Map buildOne()>();

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.map.CompositeMapTest: java.util.Map buildTwo()>();

        $r5 = new org.apache.commons.collections4.map.CompositeMapTest$3;

        specialinvoke $r5.<org.apache.commons.collections4.map.CompositeMapTest$3: void <init>(org.apache.commons.collections4.map.CompositeMapTest)>(r0);

        specialinvoke $r2.<org.apache.commons.collections4.map.CompositeMap: void <init>(java.util.Map,java.util.Map,org.apache.commons.collections4.map.CompositeMap$MapMutator)>($r3, $r4, $r5);

        virtualinvoke $r2.<org.apache.commons.collections4.map.CompositeMap: void putAll(java.util.Map)>(null);

        $z0 = r0.<org.apache.commons.collections4.map.CompositeMapTest: boolean pass>;

        staticinvoke <org.apache.commons.collections4.map.CompositeMapTest: void assertTrue(boolean)>($z0);

        return;
    }

    public java.lang.String getCompatibilityVersion()
    {
        org.apache.commons.collections4.map.CompositeMapTest r0;

        r0 := @this: org.apache.commons.collections4.map.CompositeMapTest;

        return "4";
    }

    public volatile org.apache.commons.collections4.IterableMap makeObject()
    {
        org.apache.commons.collections4.map.CompositeMapTest r0;
        org.apache.commons.collections4.map.CompositeMap $r1;

        r0 := @this: org.apache.commons.collections4.map.CompositeMapTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.map.CompositeMapTest: org.apache.commons.collections4.map.CompositeMap makeObject()>();

        return $r1;
    }

    public volatile java.util.Map makeObject()
    {
        org.apache.commons.collections4.map.CompositeMapTest r0;
        org.apache.commons.collections4.map.CompositeMap $r1;

        r0 := @this: org.apache.commons.collections4.map.CompositeMapTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.map.CompositeMapTest: org.apache.commons.collections4.map.CompositeMap makeObject()>();

        return $r1;
    }

    public volatile java.lang.Object makeObject()
    {
        org.apache.commons.collections4.map.CompositeMapTest r0;
        org.apache.commons.collections4.map.CompositeMap $r1;

        r0 := @this: org.apache.commons.collections4.map.CompositeMapTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.map.CompositeMapTest: org.apache.commons.collections4.map.CompositeMap makeObject()>();

        return $r1;
    }

    static boolean access$002(org.apache.commons.collections4.map.CompositeMapTest, boolean)
    {
        org.apache.commons.collections4.map.CompositeMapTest r0;
        boolean z0;

        r0 := @parameter0: org.apache.commons.collections4.map.CompositeMapTest;

        z0 := @parameter1: boolean;

        r0.<org.apache.commons.collections4.map.CompositeMapTest: boolean pass> = z0;

        return z0;
    }
}
