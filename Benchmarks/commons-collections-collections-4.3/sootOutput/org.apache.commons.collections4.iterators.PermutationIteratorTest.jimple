public class org.apache.commons.collections4.iterators.PermutationIteratorTest extends org.apache.commons.collections4.iterators.AbstractIteratorTest
{
    protected java.lang.Character[] testArray;
    protected java.util.List testList;

    public void <init>(java.lang.String)
    {
        org.apache.commons.collections4.iterators.PermutationIteratorTest r0;
        java.lang.String r1;
        java.lang.Character[] $r2;
        java.lang.Character $r3, $r4, $r5;

        r0 := @this: org.apache.commons.collections4.iterators.PermutationIteratorTest;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.collections4.iterators.AbstractIteratorTest: void <init>(java.lang.String)>(r1);

        $r2 = newarray (java.lang.Character)[3];

        $r3 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(65);

        $r2[0] = $r3;

        $r4 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(66);

        $r2[1] = $r4;

        $r5 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(67);

        $r2[2] = $r5;

        r0.<org.apache.commons.collections4.iterators.PermutationIteratorTest: java.lang.Character[] testArray> = $r2;

        return;
    }

    public void setUp()
    {
        org.apache.commons.collections4.iterators.PermutationIteratorTest r0;
        java.util.ArrayList $r1;
        java.lang.Character[] $r2;
        java.util.List $r3, $r4;

        r0 := @this: org.apache.commons.collections4.iterators.PermutationIteratorTest;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.collections4.iterators.PermutationIteratorTest: java.util.List testList> = $r1;

        $r3 = r0.<org.apache.commons.collections4.iterators.PermutationIteratorTest: java.util.List testList>;

        $r2 = r0.<org.apache.commons.collections4.iterators.PermutationIteratorTest: java.lang.Character[] testArray>;

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>($r4);

        return;
    }

    public boolean supportsRemove()
    {
        org.apache.commons.collections4.iterators.PermutationIteratorTest r0;

        r0 := @this: org.apache.commons.collections4.iterators.PermutationIteratorTest;

        return 0;
    }

    public boolean supportsEmptyIterator()
    {
        org.apache.commons.collections4.iterators.PermutationIteratorTest r0;

        r0 := @this: org.apache.commons.collections4.iterators.PermutationIteratorTest;

        return 0;
    }

    public org.apache.commons.collections4.iterators.PermutationIterator makeEmptyIterator()
    {
        org.apache.commons.collections4.iterators.PermutationIteratorTest r0;
        org.apache.commons.collections4.iterators.PermutationIterator $r1;
        java.util.ArrayList $r2;

        r0 := @this: org.apache.commons.collections4.iterators.PermutationIteratorTest;

        $r1 = new org.apache.commons.collections4.iterators.PermutationIterator;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        specialinvoke $r1.<org.apache.commons.collections4.iterators.PermutationIterator: void <init>(java.util.Collection)>($r2);

        return $r1;
    }

    public org.apache.commons.collections4.iterators.PermutationIterator makeObject()
    {
        org.apache.commons.collections4.iterators.PermutationIteratorTest r0;
        org.apache.commons.collections4.iterators.PermutationIterator $r1;
        java.util.List $r2;

        r0 := @this: org.apache.commons.collections4.iterators.PermutationIteratorTest;

        $r1 = new org.apache.commons.collections4.iterators.PermutationIterator;

        $r2 = r0.<org.apache.commons.collections4.iterators.PermutationIteratorTest: java.util.List testList>;

        specialinvoke $r1.<org.apache.commons.collections4.iterators.PermutationIterator: void <init>(java.util.Collection)>($r2);

        return $r1;
    }

    public void testPermutationResultSize()
    {
        org.apache.commons.collections4.iterators.PermutationIteratorTest r0;
        java.util.ArrayList $r2;
        org.apache.commons.collections4.iterators.PermutationIterator $r3;
        boolean $z0;
        java.lang.Integer $r5;
        int i0, i1, i2, i3;

        r0 := @this: org.apache.commons.collections4.iterators.PermutationIteratorTest;

        i0 = 1;

        i1 = 0;

     label1:
        if i1 >= 8 goto label6;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        i2 = 0;

     label2:
        if i2 >= i1 goto label3;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r5);

        i2 = i2 + 1;

        goto label2;

     label3:
        $r3 = new org.apache.commons.collections4.iterators.PermutationIterator;

        specialinvoke $r3.<org.apache.commons.collections4.iterators.PermutationIterator: void <init>(java.util.Collection)>($r2);

        i3 = 0;

     label4:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        i3 = i3 + 1;

        goto label4;

     label5:
        staticinvoke <org.apache.commons.collections4.iterators.PermutationIteratorTest: void assertEquals(int,int)>(i0, i3);

        i1 = i1 + 1;

        i0 = i0 * i1;

        goto label1;

     label6:
        return;
    }

    public void testPermutationExhaustivity()
    {
        org.apache.commons.collections4.iterators.PermutationIteratorTest r0;
        org.apache.commons.collections4.iterators.PermutationIterator r8;
        java.util.List r9;
        java.util.ArrayList $r10, $r11, $r12, $r13, $r14, $r15, $r34;
        java.lang.Character $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33;
        boolean $z18, $z19, $z20, $z21, $z22, $z23, $z24;
        int $i0;

        r0 := @this: org.apache.commons.collections4.iterators.PermutationIteratorTest;

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>()>();

        $r15 = new java.util.ArrayList;

        specialinvoke $r15.<java.util.ArrayList: void <init>()>();

        $r16 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(65);

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r16);

        $r17 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(65);

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r17);

        $r18 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(66);

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r18);

        $r19 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(66);

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>($r19);

        $r20 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(67);

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>($r20);

        $r21 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(67);

        interfaceinvoke $r15.<java.util.List: boolean add(java.lang.Object)>($r21);

        $r22 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(66);

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r22);

        $r23 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(67);

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r23);

        $r24 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(65);

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r24);

        $r25 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(67);

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>($r25);

        $r26 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(65);

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>($r26);

        $r27 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(66);

        interfaceinvoke $r15.<java.util.List: boolean add(java.lang.Object)>($r27);

        $r28 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(67);

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r28);

        $r29 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(66);

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r29);

        $r30 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(67);

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r30);

        $r31 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(65);

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>($r31);

        $r32 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(66);

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>($r32);

        $r33 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(65);

        interfaceinvoke $r15.<java.util.List: boolean add(java.lang.Object)>($r33);

        $r34 = new java.util.ArrayList;

        specialinvoke $r34.<java.util.ArrayList: void <init>()>();

        r8 = virtualinvoke r0.<org.apache.commons.collections4.iterators.PermutationIteratorTest: org.apache.commons.collections4.iterators.PermutationIterator makeObject()>();

     label1:
        $z18 = virtualinvoke r8.<org.apache.commons.collections4.iterators.PermutationIterator: boolean hasNext()>();

        if $z18 == 0 goto label2;

        r9 = virtualinvoke r8.<org.apache.commons.collections4.iterators.PermutationIterator: java.util.List next()>();

        interfaceinvoke $r34.<java.util.List: boolean add(java.lang.Object)>(r9);

        goto label1;

     label2:
        $i0 = interfaceinvoke $r34.<java.util.List: int size()>();

        staticinvoke <org.apache.commons.collections4.iterators.PermutationIteratorTest: void assertEquals(int,int)>(6, $i0);

        $z19 = interfaceinvoke $r34.<java.util.List: boolean contains(java.lang.Object)>($r10);

        staticinvoke <org.apache.commons.collections4.iterators.PermutationIteratorTest: void assertTrue(boolean)>($z19);

        $z20 = interfaceinvoke $r34.<java.util.List: boolean contains(java.lang.Object)>($r11);

        staticinvoke <org.apache.commons.collections4.iterators.PermutationIteratorTest: void assertTrue(boolean)>($z20);

        $z21 = interfaceinvoke $r34.<java.util.List: boolean contains(java.lang.Object)>($r12);

        staticinvoke <org.apache.commons.collections4.iterators.PermutationIteratorTest: void assertTrue(boolean)>($z21);

        $z22 = interfaceinvoke $r34.<java.util.List: boolean contains(java.lang.Object)>($r13);

        staticinvoke <org.apache.commons.collections4.iterators.PermutationIteratorTest: void assertTrue(boolean)>($z22);

        $z23 = interfaceinvoke $r34.<java.util.List: boolean contains(java.lang.Object)>($r14);

        staticinvoke <org.apache.commons.collections4.iterators.PermutationIteratorTest: void assertTrue(boolean)>($z23);

        $z24 = interfaceinvoke $r34.<java.util.List: boolean contains(java.lang.Object)>($r15);

        staticinvoke <org.apache.commons.collections4.iterators.PermutationIteratorTest: void assertTrue(boolean)>($z24);

        return;
    }

    public void testPermutationUnicity()
    {
        org.apache.commons.collections4.iterators.PermutationIteratorTest r0;
        org.apache.commons.collections4.iterators.PermutationIterator r3;
        java.util.List r4;
        java.util.ArrayList $r5;
        java.util.HashSet $r6;
        boolean $z0;
        int $i0, $i1;

        r0 := @this: org.apache.commons.collections4.iterators.PermutationIteratorTest;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>()>();

        r3 = virtualinvoke r0.<org.apache.commons.collections4.iterators.PermutationIteratorTest: org.apache.commons.collections4.iterators.PermutationIterator makeObject()>();

     label1:
        $z0 = virtualinvoke r3.<org.apache.commons.collections4.iterators.PermutationIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        r4 = virtualinvoke r3.<org.apache.commons.collections4.iterators.PermutationIterator: java.util.List next()>();

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r4);

        interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>(r4);

        goto label1;

     label2:
        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        staticinvoke <org.apache.commons.collections4.iterators.PermutationIteratorTest: void assertEquals(int,int)>(6, $i0);

        $i1 = interfaceinvoke $r6.<java.util.Set: int size()>();

        staticinvoke <org.apache.commons.collections4.iterators.PermutationIteratorTest: void assertEquals(int,int)>(6, $i1);

        return;
    }

    public void testPermutationException()
    {
        org.apache.commons.collections4.iterators.PermutationIteratorTest r0;
        org.apache.commons.collections4.iterators.PermutationIterator r2;
        java.util.ArrayList $r3;
        boolean $z0;
        java.util.NoSuchElementException $r5;
        java.util.List r6;

        r0 := @this: org.apache.commons.collections4.iterators.PermutationIteratorTest;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r2 = virtualinvoke r0.<org.apache.commons.collections4.iterators.PermutationIteratorTest: org.apache.commons.collections4.iterators.PermutationIterator makeObject()>();

     label1:
        $z0 = virtualinvoke r2.<org.apache.commons.collections4.iterators.PermutationIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        r6 = virtualinvoke r2.<org.apache.commons.collections4.iterators.PermutationIterator: java.util.List next()>();

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r6);

        goto label1;

     label2:
        virtualinvoke r2.<org.apache.commons.collections4.iterators.PermutationIterator: java.util.List next()>();

        staticinvoke <org.apache.commons.collections4.iterators.PermutationIteratorTest: void fail()>();

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

     label5:
        return;

        catch java.util.NoSuchElementException from label2 to label3 with label4;
    }

    public void testPermutatorHasMore()
    {
        org.apache.commons.collections4.iterators.PermutationIteratorTest r0;
        org.apache.commons.collections4.iterators.PermutationIterator r1;
        boolean $z0, $z1;
        int i0;

        r0 := @this: org.apache.commons.collections4.iterators.PermutationIteratorTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.PermutationIteratorTest: org.apache.commons.collections4.iterators.PermutationIterator makeObject()>();

        i0 = 0;

     label1:
        if i0 >= 6 goto label2;

        $z1 = virtualinvoke r1.<org.apache.commons.collections4.iterators.PermutationIterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.PermutationIteratorTest: void assertTrue(boolean)>($z1);

        virtualinvoke r1.<org.apache.commons.collections4.iterators.PermutationIterator: java.util.List next()>();

        i0 = i0 + 1;

        goto label1;

     label2:
        $z0 = virtualinvoke r1.<org.apache.commons.collections4.iterators.PermutationIterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.PermutationIteratorTest: void assertFalse(boolean)>($z0);

        return;
    }

    public void testEmptyCollection()
    {
        org.apache.commons.collections4.iterators.PermutationIteratorTest r0;
        org.apache.commons.collections4.iterators.PermutationIterator r1;
        java.util.List r2;
        boolean $z0, $z1;
        int $i0;

        r0 := @this: org.apache.commons.collections4.iterators.PermutationIteratorTest;

        r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.PermutationIteratorTest: org.apache.commons.collections4.iterators.PermutationIterator makeEmptyIterator()>();

        $z0 = virtualinvoke r1.<org.apache.commons.collections4.iterators.PermutationIterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.PermutationIteratorTest: void assertTrue(boolean)>($z0);

        r2 = virtualinvoke r1.<org.apache.commons.collections4.iterators.PermutationIterator: java.util.List next()>();

        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        staticinvoke <org.apache.commons.collections4.iterators.PermutationIteratorTest: void assertEquals(int,int)>(0, $i0);

        $z1 = virtualinvoke r1.<org.apache.commons.collections4.iterators.PermutationIterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.PermutationIteratorTest: void assertFalse(boolean)>($z1);

        return;
    }

    public volatile java.util.Iterator makeObject()
    {
        org.apache.commons.collections4.iterators.PermutationIteratorTest r0;
        org.apache.commons.collections4.iterators.PermutationIterator $r1;

        r0 := @this: org.apache.commons.collections4.iterators.PermutationIteratorTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.PermutationIteratorTest: org.apache.commons.collections4.iterators.PermutationIterator makeObject()>();

        return $r1;
    }

    public volatile java.util.Iterator makeEmptyIterator()
    {
        org.apache.commons.collections4.iterators.PermutationIteratorTest r0;
        org.apache.commons.collections4.iterators.PermutationIterator $r1;

        r0 := @this: org.apache.commons.collections4.iterators.PermutationIteratorTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.PermutationIteratorTest: org.apache.commons.collections4.iterators.PermutationIterator makeEmptyIterator()>();

        return $r1;
    }

    public volatile java.lang.Object makeObject()
    {
        org.apache.commons.collections4.iterators.PermutationIteratorTest r0;
        org.apache.commons.collections4.iterators.PermutationIterator $r1;

        r0 := @this: org.apache.commons.collections4.iterators.PermutationIteratorTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.PermutationIteratorTest: org.apache.commons.collections4.iterators.PermutationIterator makeObject()>();

        return $r1;
    }
}
