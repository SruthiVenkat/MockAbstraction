class org.apache.commons.collections4.multiset.AbstractMultiSet$MultiSetIterator extends java.lang.Object implements java.util.Iterator
{
    private final org.apache.commons.collections4.multiset.AbstractMultiSet parent;
    private final java.util.Iterator entryIterator;
    private org.apache.commons.collections4.MultiSet$Entry current;
    private int itemCount;
    private boolean canRemove;

    public void <init>(org.apache.commons.collections4.multiset.AbstractMultiSet)
    {
        org.apache.commons.collections4.multiset.AbstractMultiSet$MultiSetIterator r0;
        org.apache.commons.collections4.multiset.AbstractMultiSet r1;
        java.util.Set $r2;
        java.util.Iterator $r3;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSet$MultiSetIterator;

        r1 := @parameter0: org.apache.commons.collections4.multiset.AbstractMultiSet;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.collections4.multiset.AbstractMultiSet$MultiSetIterator: org.apache.commons.collections4.multiset.AbstractMultiSet parent> = r1;

        $r2 = virtualinvoke r1.<org.apache.commons.collections4.multiset.AbstractMultiSet: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        r0.<org.apache.commons.collections4.multiset.AbstractMultiSet$MultiSetIterator: java.util.Iterator entryIterator> = $r3;

        r0.<org.apache.commons.collections4.multiset.AbstractMultiSet$MultiSetIterator: org.apache.commons.collections4.MultiSet$Entry current> = null;

        r0.<org.apache.commons.collections4.multiset.AbstractMultiSet$MultiSetIterator: boolean canRemove> = 0;

        return;
    }

    public boolean hasNext()
    {
        org.apache.commons.collections4.multiset.AbstractMultiSet$MultiSetIterator r0;
        int $i0;
        java.util.Iterator $r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSet$MultiSetIterator;

        $i0 = r0.<org.apache.commons.collections4.multiset.AbstractMultiSet$MultiSetIterator: int itemCount>;

        if $i0 > 0 goto label1;

        $r1 = r0.<org.apache.commons.collections4.multiset.AbstractMultiSet$MultiSetIterator: java.util.Iterator entryIterator>;

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public java.lang.Object next()
    {
        org.apache.commons.collections4.multiset.AbstractMultiSet$MultiSetIterator r0;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.collections4.MultiSet$Entry $r1, $r5, $r6;
        java.lang.Object $r2, $r4;
        java.util.Iterator $r3;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSet$MultiSetIterator;

        $i0 = r0.<org.apache.commons.collections4.multiset.AbstractMultiSet$MultiSetIterator: int itemCount>;

        if $i0 != 0 goto label1;

        $r3 = r0.<org.apache.commons.collections4.multiset.AbstractMultiSet$MultiSetIterator: java.util.Iterator entryIterator>;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (org.apache.commons.collections4.MultiSet$Entry) $r4;

        r0.<org.apache.commons.collections4.multiset.AbstractMultiSet$MultiSetIterator: org.apache.commons.collections4.MultiSet$Entry current> = $r5;

        $r6 = r0.<org.apache.commons.collections4.multiset.AbstractMultiSet$MultiSetIterator: org.apache.commons.collections4.MultiSet$Entry current>;

        $i3 = interfaceinvoke $r6.<org.apache.commons.collections4.MultiSet$Entry: int getCount()>();

        r0.<org.apache.commons.collections4.multiset.AbstractMultiSet$MultiSetIterator: int itemCount> = $i3;

     label1:
        r0.<org.apache.commons.collections4.multiset.AbstractMultiSet$MultiSetIterator: boolean canRemove> = 1;

        $i1 = r0.<org.apache.commons.collections4.multiset.AbstractMultiSet$MultiSetIterator: int itemCount>;

        $i2 = $i1 - 1;

        r0.<org.apache.commons.collections4.multiset.AbstractMultiSet$MultiSetIterator: int itemCount> = $i2;

        $r1 = r0.<org.apache.commons.collections4.multiset.AbstractMultiSet$MultiSetIterator: org.apache.commons.collections4.MultiSet$Entry current>;

        $r2 = interfaceinvoke $r1.<org.apache.commons.collections4.MultiSet$Entry: java.lang.Object getElement()>();

        return $r2;
    }

    public void remove()
    {
        org.apache.commons.collections4.multiset.AbstractMultiSet$MultiSetIterator r0;
        int i0;
        boolean $z0;
        org.apache.commons.collections4.MultiSet$Entry $r1, $r3;
        java.util.Iterator $r2;
        org.apache.commons.collections4.multiset.AbstractMultiSet $r4;
        java.lang.Object $r5;
        java.lang.IllegalStateException $r6;

        r0 := @this: org.apache.commons.collections4.multiset.AbstractMultiSet$MultiSetIterator;

        $z0 = r0.<org.apache.commons.collections4.multiset.AbstractMultiSet$MultiSetIterator: boolean canRemove>;

        if $z0 != 0 goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>()>();

        throw $r6;

     label1:
        $r1 = r0.<org.apache.commons.collections4.multiset.AbstractMultiSet$MultiSetIterator: org.apache.commons.collections4.MultiSet$Entry current>;

        i0 = interfaceinvoke $r1.<org.apache.commons.collections4.MultiSet$Entry: int getCount()>();

        if i0 <= 1 goto label2;

        $r4 = r0.<org.apache.commons.collections4.multiset.AbstractMultiSet$MultiSetIterator: org.apache.commons.collections4.multiset.AbstractMultiSet parent>;

        $r3 = r0.<org.apache.commons.collections4.multiset.AbstractMultiSet$MultiSetIterator: org.apache.commons.collections4.MultiSet$Entry current>;

        $r5 = interfaceinvoke $r3.<org.apache.commons.collections4.MultiSet$Entry: java.lang.Object getElement()>();

        virtualinvoke $r4.<org.apache.commons.collections4.multiset.AbstractMultiSet: boolean remove(java.lang.Object)>($r5);

        goto label3;

     label2:
        $r2 = r0.<org.apache.commons.collections4.multiset.AbstractMultiSet$MultiSetIterator: java.util.Iterator entryIterator>;

        interfaceinvoke $r2.<java.util.Iterator: void remove()>();

     label3:
        r0.<org.apache.commons.collections4.multiset.AbstractMultiSet$MultiSetIterator: boolean canRemove> = 0;

        return;
    }
}
