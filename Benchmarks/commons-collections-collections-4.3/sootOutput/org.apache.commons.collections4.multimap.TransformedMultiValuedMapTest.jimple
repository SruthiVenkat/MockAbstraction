public class org.apache.commons.collections4.multimap.TransformedMultiValuedMapTest extends org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest
{

    public void <init>(java.lang.String)
    {
        org.apache.commons.collections4.multimap.TransformedMultiValuedMapTest r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.collections4.multimap.TransformedMultiValuedMapTest;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.collections4.multimap.AbstractMultiValuedMapTest: void <init>(java.lang.String)>(r1);

        return;
    }

    public static junit.framework.Test suite()
    {
        junit.framework.TestSuite $r0;

        $r0 = staticinvoke <org.apache.commons.collections4.BulkTest: junit.framework.TestSuite makeSuite(java.lang.Class)>(class "Lorg/apache/commons/collections4/multimap/TransformedMultiValuedMapTest;");

        return $r0;
    }

    public org.apache.commons.collections4.MultiValuedMap makeObject()
    {
        org.apache.commons.collections4.multimap.TransformedMultiValuedMapTest r0;
        org.apache.commons.collections4.multimap.ArrayListValuedHashMap $r1;
        org.apache.commons.collections4.Transformer $r2, $r3;
        org.apache.commons.collections4.multimap.TransformedMultiValuedMap $r4;

        r0 := @this: org.apache.commons.collections4.multimap.TransformedMultiValuedMapTest;

        $r1 = new org.apache.commons.collections4.multimap.ArrayListValuedHashMap;

        specialinvoke $r1.<org.apache.commons.collections4.multimap.ArrayListValuedHashMap: void <init>()>();

        $r2 = staticinvoke <org.apache.commons.collections4.TransformerUtils: org.apache.commons.collections4.Transformer nopTransformer()>();

        $r3 = staticinvoke <org.apache.commons.collections4.TransformerUtils: org.apache.commons.collections4.Transformer nopTransformer()>();

        $r4 = staticinvoke <org.apache.commons.collections4.multimap.TransformedMultiValuedMap: org.apache.commons.collections4.multimap.TransformedMultiValuedMap transformingMap(org.apache.commons.collections4.MultiValuedMap,org.apache.commons.collections4.Transformer,org.apache.commons.collections4.Transformer)>($r1, $r2, $r3);

        return $r4;
    }

    public void testKeyTransformedMap()
    {
        org.apache.commons.collections4.multimap.TransformedMultiValuedMapTest r0;
        org.apache.commons.collections4.multimap.TransformedMultiValuedMap r2;
        java.lang.Object[] $r3;
        org.apache.commons.collections4.multimap.ArrayListValuedHashMap $r4;
        org.apache.commons.collections4.Transformer $r5;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.lang.Object $r6, $r7, $r11, $r12, $r13, $r14, $r17, $r18, $r19, $r23;
        java.lang.String $r8, $r15, $r20;
        java.lang.Integer $r9, $r16, $r21;
        java.util.Collection $r10, $r22, r24;
        boolean $z0, $z2, $z3, $z4, $z5;

        r0 := @this: org.apache.commons.collections4.multimap.TransformedMultiValuedMapTest;

        $r3 = newarray (java.lang.Object)[7];

        $r3[0] = "1";

        $r3[1] = "3";

        $r3[2] = "5";

        $r3[3] = "7";

        $r3[4] = "2";

        $r3[5] = "4";

        $r3[6] = "6";

        $r4 = new org.apache.commons.collections4.multimap.ArrayListValuedHashMap;

        specialinvoke $r4.<org.apache.commons.collections4.multimap.ArrayListValuedHashMap: void <init>()>();

        $r5 = <org.apache.commons.collections4.collection.TransformedCollectionTest: org.apache.commons.collections4.Transformer STRING_TO_INTEGER_TRANSFORMER>;

        r2 = staticinvoke <org.apache.commons.collections4.multimap.TransformedMultiValuedMap: org.apache.commons.collections4.multimap.TransformedMultiValuedMap transformingMap(org.apache.commons.collections4.MultiValuedMap,org.apache.commons.collections4.Transformer,org.apache.commons.collections4.Transformer)>($r4, $r5, null);

        $i0 = interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.TransformedMultiValuedMapTest: void assertEquals(int,int)>(0, $i0);

        i5 = 0;

     label1:
        $i1 = lengthof $r3;

        if i5 >= $i1 goto label2;

        $r13 = $r3[i5];

        $r12 = $r3[i5];

        interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: boolean put(java.lang.Object,java.lang.Object)>($r13, $r12);

        $i3 = i5 + 1;

        $i4 = interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.TransformedMultiValuedMapTest: void assertEquals(int,int)>($i3, $i4);

        $r14 = $r3[i5];

        $r15 = (java.lang.String) $r14;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r15);

        $z2 = interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: boolean containsKey(java.lang.Object)>($r16);

        staticinvoke <org.apache.commons.collections4.multimap.TransformedMultiValuedMapTest: void assertEquals(boolean,boolean)>(1, $z2);

        $r17 = $r3[i5];

        $z3 = interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: boolean containsKey(java.lang.Object)>($r17);

        staticinvoke <org.apache.commons.collections4.multimap.TransformedMultiValuedMapTest: void assertEquals(boolean,boolean)>(0, $z3);

        $r18 = $r3[i5];

        $z4 = interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: boolean containsValue(java.lang.Object)>($r18);

        staticinvoke <org.apache.commons.collections4.multimap.TransformedMultiValuedMapTest: void assertEquals(boolean,boolean)>(1, $z4);

        $r19 = $r3[i5];

        $r20 = (java.lang.String) $r19;

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r20);

        $r22 = interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection get(java.lang.Object)>($r21);

        $r23 = $r3[i5];

        $z5 = interfaceinvoke $r22.<java.util.Collection: boolean contains(java.lang.Object)>($r23);

        staticinvoke <org.apache.commons.collections4.multimap.TransformedMultiValuedMapTest: void assertEquals(boolean,boolean)>(1, $z5);

        i5 = i5 + 1;

        goto label1;

     label2:
        $r6 = $r3[0];

        r24 = interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection remove(java.lang.Object)>($r6);

        staticinvoke <org.apache.commons.collections4.multimap.TransformedMultiValuedMapTest: void assertNotNull(java.lang.Object)>(r24);

        $i2 = interfaceinvoke r24.<java.util.Collection: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.TransformedMultiValuedMapTest: void assertEquals(int,int)>(0, $i2);

        $r7 = $r3[0];

        $r8 = (java.lang.String) $r7;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r8);

        $r10 = interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection remove(java.lang.Object)>($r9);

        $r11 = $r3[0];

        $z0 = interfaceinvoke $r10.<java.util.Collection: boolean contains(java.lang.Object)>($r11);

        staticinvoke <org.apache.commons.collections4.multimap.TransformedMultiValuedMapTest: void assertEquals(boolean,boolean)>(1, $z0);

        return;
    }

    public void testValueTransformedMap()
    {
        org.apache.commons.collections4.multimap.TransformedMultiValuedMapTest r0;
        org.apache.commons.collections4.multimap.TransformedMultiValuedMap r2;
        java.lang.Object[] $r3;
        org.apache.commons.collections4.multimap.ArrayListValuedHashMap $r4;
        org.apache.commons.collections4.Transformer $r5;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.Object $r6, $r8, $r11, $r12, $r13, $r16, $r17, $r18, $r20;
        java.util.Collection $r7, $r19;
        java.lang.String $r9, $r14, $r21;
        java.lang.Integer $r10, $r15, $r22;
        boolean $z0, $z2, $z3, $z4, $z5;

        r0 := @this: org.apache.commons.collections4.multimap.TransformedMultiValuedMapTest;

        $r3 = newarray (java.lang.Object)[7];

        $r3[0] = "1";

        $r3[1] = "3";

        $r3[2] = "5";

        $r3[3] = "7";

        $r3[4] = "2";

        $r3[5] = "4";

        $r3[6] = "6";

        $r4 = new org.apache.commons.collections4.multimap.ArrayListValuedHashMap;

        specialinvoke $r4.<org.apache.commons.collections4.multimap.ArrayListValuedHashMap: void <init>()>();

        $r5 = <org.apache.commons.collections4.collection.TransformedCollectionTest: org.apache.commons.collections4.Transformer STRING_TO_INTEGER_TRANSFORMER>;

        r2 = staticinvoke <org.apache.commons.collections4.multimap.TransformedMultiValuedMap: org.apache.commons.collections4.multimap.TransformedMultiValuedMap transformingMap(org.apache.commons.collections4.MultiValuedMap,org.apache.commons.collections4.Transformer,org.apache.commons.collections4.Transformer)>($r4, null, $r5);

        $i0 = interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.TransformedMultiValuedMapTest: void assertEquals(int,int)>(0, $i0);

        i4 = 0;

     label1:
        $i1 = lengthof $r3;

        if i4 >= $i1 goto label2;

        $r12 = $r3[i4];

        $r11 = $r3[i4];

        interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: boolean put(java.lang.Object,java.lang.Object)>($r12, $r11);

        $i2 = i4 + 1;

        $i3 = interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.TransformedMultiValuedMapTest: void assertEquals(int,int)>($i2, $i3);

        $r13 = $r3[i4];

        $r14 = (java.lang.String) $r13;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r14);

        $z2 = interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: boolean containsValue(java.lang.Object)>($r15);

        staticinvoke <org.apache.commons.collections4.multimap.TransformedMultiValuedMapTest: void assertEquals(boolean,boolean)>(1, $z2);

        $r16 = $r3[i4];

        $z3 = interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: boolean containsValue(java.lang.Object)>($r16);

        staticinvoke <org.apache.commons.collections4.multimap.TransformedMultiValuedMapTest: void assertEquals(boolean,boolean)>(0, $z3);

        $r17 = $r3[i4];

        $z4 = interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: boolean containsKey(java.lang.Object)>($r17);

        staticinvoke <org.apache.commons.collections4.multimap.TransformedMultiValuedMapTest: void assertEquals(boolean,boolean)>(1, $z4);

        $r18 = $r3[i4];

        $r19 = interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection get(java.lang.Object)>($r18);

        $r20 = $r3[i4];

        $r21 = (java.lang.String) $r20;

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r21);

        $z5 = interfaceinvoke $r19.<java.util.Collection: boolean contains(java.lang.Object)>($r22);

        staticinvoke <org.apache.commons.collections4.multimap.TransformedMultiValuedMapTest: void assertEquals(boolean,boolean)>(1, $z5);

        i4 = i4 + 1;

        goto label1;

     label2:
        $r6 = $r3[0];

        $r7 = interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection remove(java.lang.Object)>($r6);

        $r8 = $r3[0];

        $r9 = (java.lang.String) $r8;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r9);

        $z0 = interfaceinvoke $r7.<java.util.Collection: boolean contains(java.lang.Object)>($r10);

        staticinvoke <org.apache.commons.collections4.multimap.TransformedMultiValuedMapTest: void assertEquals(boolean,boolean)>(1, $z0);

        return;
    }

    public void testFactory_Decorate()
    {
        org.apache.commons.collections4.multimap.TransformedMultiValuedMapTest r0;
        org.apache.commons.collections4.multimap.TransformedMultiValuedMap r2;
        org.apache.commons.collections4.multimap.ArrayListValuedHashMap $r3;
        org.apache.commons.collections4.Transformer $r4;
        int $i0;
        java.util.Collection $r5, $r6, $r7, $r8;
        boolean $z3, $z4, $z5, $z7;
        java.lang.Integer $r9;

        r0 := @this: org.apache.commons.collections4.multimap.TransformedMultiValuedMapTest;

        $r3 = new org.apache.commons.collections4.multimap.ArrayListValuedHashMap;

        specialinvoke $r3.<org.apache.commons.collections4.multimap.ArrayListValuedHashMap: void <init>()>();

        interfaceinvoke $r3.<org.apache.commons.collections4.MultiValuedMap: boolean put(java.lang.Object,java.lang.Object)>("A", "1");

        interfaceinvoke $r3.<org.apache.commons.collections4.MultiValuedMap: boolean put(java.lang.Object,java.lang.Object)>("B", "2");

        interfaceinvoke $r3.<org.apache.commons.collections4.MultiValuedMap: boolean put(java.lang.Object,java.lang.Object)>("C", "3");

        $r4 = <org.apache.commons.collections4.collection.TransformedCollectionTest: org.apache.commons.collections4.Transformer STRING_TO_INTEGER_TRANSFORMER>;

        r2 = staticinvoke <org.apache.commons.collections4.multimap.TransformedMultiValuedMap: org.apache.commons.collections4.multimap.TransformedMultiValuedMap transformingMap(org.apache.commons.collections4.MultiValuedMap,org.apache.commons.collections4.Transformer,org.apache.commons.collections4.Transformer)>($r3, null, $r4);

        $i0 = interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.TransformedMultiValuedMapTest: void assertEquals(int,int)>(3, $i0);

        $r5 = interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection get(java.lang.Object)>("A");

        $z3 = interfaceinvoke $r5.<java.util.Collection: boolean contains(java.lang.Object)>("1");

        staticinvoke <org.apache.commons.collections4.multimap.TransformedMultiValuedMapTest: void assertEquals(boolean,boolean)>(1, $z3);

        $r6 = interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection get(java.lang.Object)>("B");

        $z4 = interfaceinvoke $r6.<java.util.Collection: boolean contains(java.lang.Object)>("2");

        staticinvoke <org.apache.commons.collections4.multimap.TransformedMultiValuedMapTest: void assertEquals(boolean,boolean)>(1, $z4);

        $r7 = interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection get(java.lang.Object)>("C");

        $z5 = interfaceinvoke $r7.<java.util.Collection: boolean contains(java.lang.Object)>("3");

        staticinvoke <org.apache.commons.collections4.multimap.TransformedMultiValuedMapTest: void assertEquals(boolean,boolean)>(1, $z5);

        interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: boolean put(java.lang.Object,java.lang.Object)>("D", "4");

        $r8 = interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection get(java.lang.Object)>("D");

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $z7 = interfaceinvoke $r8.<java.util.Collection: boolean contains(java.lang.Object)>($r9);

        staticinvoke <org.apache.commons.collections4.multimap.TransformedMultiValuedMapTest: void assertEquals(boolean,boolean)>(1, $z7);

        return;
    }

    public void testFactory_decorateTransform()
    {
        org.apache.commons.collections4.multimap.TransformedMultiValuedMapTest r0;
        org.apache.commons.collections4.multimap.TransformedMultiValuedMap r2;
        org.apache.commons.collections4.multimap.ArrayListValuedHashMap $r3;
        org.apache.commons.collections4.Transformer $r4;
        int $i0;
        java.util.Collection $r5, $r7, $r9, $r11;
        java.lang.Integer $r6, $r8, $r10, $r12;
        boolean $z3, $z4, $z5, $z7;

        r0 := @this: org.apache.commons.collections4.multimap.TransformedMultiValuedMapTest;

        $r3 = new org.apache.commons.collections4.multimap.ArrayListValuedHashMap;

        specialinvoke $r3.<org.apache.commons.collections4.multimap.ArrayListValuedHashMap: void <init>()>();

        interfaceinvoke $r3.<org.apache.commons.collections4.MultiValuedMap: boolean put(java.lang.Object,java.lang.Object)>("A", "1");

        interfaceinvoke $r3.<org.apache.commons.collections4.MultiValuedMap: boolean put(java.lang.Object,java.lang.Object)>("B", "2");

        interfaceinvoke $r3.<org.apache.commons.collections4.MultiValuedMap: boolean put(java.lang.Object,java.lang.Object)>("C", "3");

        $r4 = <org.apache.commons.collections4.collection.TransformedCollectionTest: org.apache.commons.collections4.Transformer STRING_TO_INTEGER_TRANSFORMER>;

        r2 = staticinvoke <org.apache.commons.collections4.multimap.TransformedMultiValuedMap: org.apache.commons.collections4.multimap.TransformedMultiValuedMap transformedMap(org.apache.commons.collections4.MultiValuedMap,org.apache.commons.collections4.Transformer,org.apache.commons.collections4.Transformer)>($r3, null, $r4);

        $i0 = interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: int size()>();

        staticinvoke <org.apache.commons.collections4.multimap.TransformedMultiValuedMapTest: void assertEquals(int,int)>(3, $i0);

        $r5 = interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection get(java.lang.Object)>("A");

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $z3 = interfaceinvoke $r5.<java.util.Collection: boolean contains(java.lang.Object)>($r6);

        staticinvoke <org.apache.commons.collections4.multimap.TransformedMultiValuedMapTest: void assertEquals(boolean,boolean)>(1, $z3);

        $r7 = interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection get(java.lang.Object)>("B");

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $z4 = interfaceinvoke $r7.<java.util.Collection: boolean contains(java.lang.Object)>($r8);

        staticinvoke <org.apache.commons.collections4.multimap.TransformedMultiValuedMapTest: void assertEquals(boolean,boolean)>(1, $z4);

        $r9 = interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection get(java.lang.Object)>("C");

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $z5 = interfaceinvoke $r9.<java.util.Collection: boolean contains(java.lang.Object)>($r10);

        staticinvoke <org.apache.commons.collections4.multimap.TransformedMultiValuedMapTest: void assertEquals(boolean,boolean)>(1, $z5);

        interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: boolean put(java.lang.Object,java.lang.Object)>("D", "4");

        $r11 = interfaceinvoke r2.<org.apache.commons.collections4.MultiValuedMap: java.util.Collection get(java.lang.Object)>("D");

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $z7 = interfaceinvoke $r11.<java.util.Collection: boolean contains(java.lang.Object)>($r12);

        staticinvoke <org.apache.commons.collections4.multimap.TransformedMultiValuedMapTest: void assertEquals(boolean,boolean)>(1, $z7);

        return;
    }

    public volatile java.lang.Object makeObject()
    {
        org.apache.commons.collections4.multimap.TransformedMultiValuedMapTest r0;
        org.apache.commons.collections4.MultiValuedMap $r1;

        r0 := @this: org.apache.commons.collections4.multimap.TransformedMultiValuedMapTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.multimap.TransformedMultiValuedMapTest: org.apache.commons.collections4.MultiValuedMap makeObject()>();

        return $r1;
    }
}
