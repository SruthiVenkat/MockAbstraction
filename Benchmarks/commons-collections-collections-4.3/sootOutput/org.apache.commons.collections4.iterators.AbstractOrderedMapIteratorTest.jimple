public abstract class org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest extends org.apache.commons.collections4.iterators.AbstractMapIteratorTest
{

    public void <init>(java.lang.String)
    {
        org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.collections4.iterators.AbstractMapIteratorTest: void <init>(java.lang.String)>(r1);

        return;
    }

    public abstract org.apache.commons.collections4.OrderedMapIterator makeEmptyIterator();

    public abstract org.apache.commons.collections4.OrderedMapIterator makeObject();

    public void testEmptyMapIterator()
    {
        org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest r0;
        org.apache.commons.collections4.OrderedMapIterator r1;
        boolean $z0, $z1;
        java.util.NoSuchElementException $r4;

        r0 := @this: org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest: boolean supportsEmptyIterator()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<org.apache.commons.collections4.iterators.AbstractMapIteratorTest: void testEmptyMapIterator()>();

        r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest: org.apache.commons.collections4.OrderedMapIterator makeEmptyIterator()>();

        $z1 = interfaceinvoke r1.<org.apache.commons.collections4.OrderedMapIterator: boolean hasPrevious()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest: void assertEquals(boolean,boolean)>(0, $z1);

     label2:
        interfaceinvoke r1.<org.apache.commons.collections4.OrderedMapIterator: java.lang.Object previous()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest: void fail()>();

     label3:
        goto label5;

     label4:
        $r4 := @caughtexception;

     label5:
        return;

        catch java.util.NoSuchElementException from label2 to label3 with label4;
    }

    public void testFullMapIterator()
    {
        org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest r0;
        org.apache.commons.collections4.OrderedMapIterator r1;
        java.util.Map r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        java.util.HashSet $r4;
        java.lang.Object $r5, $r6, $r7, $r8, r9, r10, r11, r12;

        r0 := @this: org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest: boolean supportsFullIterator()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<org.apache.commons.collections4.iterators.AbstractMapIteratorTest: void testFullMapIterator()>();

        r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest: org.apache.commons.collections4.OrderedMapIterator makeObject()>();

        r2 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest: java.util.Map getMap()>();

        $z1 = interfaceinvoke r1.<org.apache.commons.collections4.OrderedMapIterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest: void assertEquals(boolean,boolean)>(1, $z1);

        $z2 = interfaceinvoke r1.<org.apache.commons.collections4.OrderedMapIterator: boolean hasPrevious()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest: void assertEquals(boolean,boolean)>(0, $z2);

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

     label2:
        $z3 = interfaceinvoke r1.<org.apache.commons.collections4.OrderedMapIterator: boolean hasNext()>();

        if $z3 == 0 goto label4;

        r9 = interfaceinvoke r1.<org.apache.commons.collections4.OrderedMapIterator: java.lang.Object next()>();

        $r7 = interfaceinvoke r1.<org.apache.commons.collections4.OrderedMapIterator: java.lang.Object getKey()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("it.next() should equals getKey()", r9, $r7);

        $z10 = interfaceinvoke r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r9);

        staticinvoke <org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest: void assertTrue(java.lang.String,boolean)>("Key must be in map", $z10);

        $z11 = interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>(r9);

        staticinvoke <org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest: void assertTrue(java.lang.String,boolean)>("Key must be unique", $z11);

        r10 = interfaceinvoke r1.<org.apache.commons.collections4.OrderedMapIterator: java.lang.Object getValue()>();

        $z12 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest: boolean isGetStructuralModify()>();

        if $z12 != 0 goto label3;

        $r8 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r9);

        staticinvoke <org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("Value must be mapped to key", $r8, r10);

     label3:
        $z13 = interfaceinvoke r2.<java.util.Map: boolean containsValue(java.lang.Object)>(r10);

        staticinvoke <org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest: void assertTrue(java.lang.String,boolean)>("Value must be in map", $z13);

        $z14 = interfaceinvoke r1.<org.apache.commons.collections4.OrderedMapIterator: boolean hasPrevious()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest: void assertEquals(boolean,boolean)>(1, $z14);

        virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest: void verify()>();

        goto label2;

     label4:
        $z4 = interfaceinvoke r1.<org.apache.commons.collections4.OrderedMapIterator: boolean hasPrevious()>();

        if $z4 == 0 goto label6;

        r11 = interfaceinvoke r1.<org.apache.commons.collections4.OrderedMapIterator: java.lang.Object previous()>();

        $r5 = interfaceinvoke r1.<org.apache.commons.collections4.OrderedMapIterator: java.lang.Object getKey()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("it.previous() should equals getKey()", r11, $r5);

        $z5 = interfaceinvoke r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r11);

        staticinvoke <org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest: void assertTrue(java.lang.String,boolean)>("Key must be in map", $z5);

        $z6 = interfaceinvoke $r4.<java.util.Set: boolean remove(java.lang.Object)>(r11);

        staticinvoke <org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest: void assertTrue(java.lang.String,boolean)>("Key must be unique", $z6);

        r12 = interfaceinvoke r1.<org.apache.commons.collections4.OrderedMapIterator: java.lang.Object getValue()>();

        $z7 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest: boolean isGetStructuralModify()>();

        if $z7 != 0 goto label5;

        $r6 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r11);

        staticinvoke <org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("Value must be mapped to key", $r6, r12);

     label5:
        $z8 = interfaceinvoke r2.<java.util.Map: boolean containsValue(java.lang.Object)>(r12);

        staticinvoke <org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest: void assertTrue(java.lang.String,boolean)>("Value must be in map", $z8);

        $z9 = interfaceinvoke r1.<org.apache.commons.collections4.OrderedMapIterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest: void assertEquals(boolean,boolean)>(1, $z9);

        virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest: void verify()>();

        goto label4;

     label6:
        return;
    }

    public void testMapIteratorOrder()
    {
        org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest r0;
        org.apache.commons.collections4.OrderedMapIterator r1;
        java.util.Map r2;
        java.util.Iterator r3;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.ArrayList $r5, $r7, $r10;
        java.util.Set $r6, $r8, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.Object $r11, $r13, r14, r15;

        r0 := @this: org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest;

        $z0 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest: boolean supportsFullIterator()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest: org.apache.commons.collections4.OrderedMapIterator makeObject()>();

        r2 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest: java.util.Map getMap()>();

        $r5 = new java.util.ArrayList;

        $r6 = interfaceinvoke r2.<java.util.Map: java.util.Set keySet()>();

        specialinvoke $r5.<java.util.ArrayList: void <init>(java.util.Collection)>($r6);

        $r7 = new java.util.ArrayList;

        $r8 = interfaceinvoke r2.<java.util.Map: java.util.Set keySet()>();

        specialinvoke $r7.<java.util.ArrayList: void <init>(java.util.Collection)>($r8);

        staticinvoke <org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("keySet() not consistent", $r5, $r7);

        $r9 = interfaceinvoke r2.<java.util.Map: java.util.Set keySet()>();

        r3 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

        $z1 = interfaceinvoke r1.<org.apache.commons.collections4.OrderedMapIterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest: void assertEquals(boolean,boolean)>(1, $z1);

        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest: void assertEquals(boolean,boolean)>(1, $z2);

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

     label2:
        $z3 = interfaceinvoke r1.<org.apache.commons.collections4.OrderedMapIterator: boolean hasNext()>();

        if $z3 == 0 goto label3;

        r14 = interfaceinvoke r1.<org.apache.commons.collections4.OrderedMapIterator: java.lang.Object next()>();

        $r13 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>($r13, r14);

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>(r14);

        goto label2;

     label3:
        $i0 = interfaceinvoke r2.<java.util.Map: int size()>();

        $i1 = interfaceinvoke $r10.<java.util.List: int size()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest: void assertEquals(int,int)>($i0, $i1);

     label4:
        $z4 = interfaceinvoke r1.<org.apache.commons.collections4.OrderedMapIterator: boolean hasPrevious()>();

        if $z4 == 0 goto label5;

        r15 = interfaceinvoke r1.<org.apache.commons.collections4.OrderedMapIterator: java.lang.Object previous()>();

        $i3 = interfaceinvoke $r10.<java.util.List: int size()>();

        $i4 = $i3 - 1;

        $r11 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>($i4);

        staticinvoke <org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest: void assertEquals(java.lang.Object,java.lang.Object)>($r11, r15);

        $i5 = interfaceinvoke $r10.<java.util.List: int size()>();

        $i6 = $i5 - 1;

        interfaceinvoke $r10.<java.util.List: java.lang.Object remove(int)>($i6);

        goto label4;

     label5:
        $i2 = interfaceinvoke $r10.<java.util.List: int size()>();

        staticinvoke <org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest: void assertEquals(int,int)>(0, $i2);

        return;
    }

    public volatile org.apache.commons.collections4.MapIterator makeObject()
    {
        org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest r0;
        org.apache.commons.collections4.OrderedMapIterator $r1;

        r0 := @this: org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest: org.apache.commons.collections4.OrderedMapIterator makeObject()>();

        return $r1;
    }

    public volatile org.apache.commons.collections4.MapIterator makeEmptyIterator()
    {
        org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest r0;
        org.apache.commons.collections4.OrderedMapIterator $r1;

        r0 := @this: org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest: org.apache.commons.collections4.OrderedMapIterator makeEmptyIterator()>();

        return $r1;
    }

    public volatile java.util.Iterator makeObject()
    {
        org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest r0;
        org.apache.commons.collections4.OrderedMapIterator $r1;

        r0 := @this: org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest: org.apache.commons.collections4.OrderedMapIterator makeObject()>();

        return $r1;
    }

    public volatile java.util.Iterator makeEmptyIterator()
    {
        org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest r0;
        org.apache.commons.collections4.OrderedMapIterator $r1;

        r0 := @this: org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest: org.apache.commons.collections4.OrderedMapIterator makeEmptyIterator()>();

        return $r1;
    }

    public volatile java.lang.Object makeObject()
    {
        org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest r0;
        org.apache.commons.collections4.OrderedMapIterator $r1;

        r0 := @this: org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest;

        $r1 = virtualinvoke r0.<org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorTest: org.apache.commons.collections4.OrderedMapIterator makeObject()>();

        return $r1;
    }
}
