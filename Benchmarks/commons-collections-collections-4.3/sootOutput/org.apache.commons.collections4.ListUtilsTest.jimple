public class org.apache.commons.collections4.ListUtilsTest extends java.lang.Object
{
    private static final java.lang.String a;
    private static final java.lang.String b;
    private static final java.lang.String c;
    private static final java.lang.String d;
    private static final java.lang.String e;
    private static final java.lang.String x;
    private java.lang.String[] fullArray;
    private java.util.List fullList;
    private static org.apache.commons.collections4.Predicate EQUALS_TWO;

    public void <init>()
    {
        org.apache.commons.collections4.ListUtilsTest r0;

        r0 := @this: org.apache.commons.collections4.ListUtilsTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void setUp()
    {
        org.apache.commons.collections4.ListUtilsTest r0;
        java.lang.String[] $r1, $r3;
        java.util.ArrayList $r2;
        java.util.List $r4;

        r0 := @this: org.apache.commons.collections4.ListUtilsTest;

        $r1 = newarray (java.lang.String)[5];

        $r1[0] = "a";

        $r1[1] = "b";

        $r1[2] = "c";

        $r1[3] = "d";

        $r1[4] = "e";

        r0.<org.apache.commons.collections4.ListUtilsTest: java.lang.String[] fullArray> = $r1;

        $r2 = new java.util.ArrayList;

        $r3 = r0.<org.apache.commons.collections4.ListUtilsTest: java.lang.String[] fullArray>;

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>($r4);

        r0.<org.apache.commons.collections4.ListUtilsTest: java.util.List fullList> = $r2;

        return;
    }

    public void testIntersectNonEmptyWithEmptyList()
    {
        org.apache.commons.collections4.ListUtilsTest r0;
        java.util.List r1, $r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.ListUtilsTest;

        r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r2 = r0.<org.apache.commons.collections4.ListUtilsTest: java.util.List fullList>;

        $r3 = staticinvoke <org.apache.commons.collections4.ListUtils: java.util.List intersection(java.util.List,java.util.List)>(r1, $r2);

        $z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("result not empty", $z0);

        return;
    }

    public void testIntersectEmptyWithEmptyList()
    {
        org.apache.commons.collections4.ListUtilsTest r0;
        java.util.List r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.ListUtilsTest;

        r1 = <java.util.Collections: java.util.List EMPTY_LIST>;

        $r2 = staticinvoke <org.apache.commons.collections4.ListUtils: java.util.List intersection(java.util.List,java.util.List)>(r1, r1);

        $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("result not empty", $z0);

        return;
    }

    public void testIntersectNonEmptySubset()
    {
        org.apache.commons.collections4.ListUtilsTest r0;
        java.util.ArrayList $r2;
        java.util.List $r3, $r6, $r7;
        java.lang.Object $r4, $r5;

        r0 := @this: org.apache.commons.collections4.ListUtilsTest;

        $r2 = new java.util.ArrayList;

        $r3 = r0.<org.apache.commons.collections4.ListUtilsTest: java.util.List fullList>;

        specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object remove(int)>(0);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r4);

        $r5 = interfaceinvoke $r2.<java.util.List: java.lang.Object remove(int)>(1);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r5);

        $r6 = r0.<org.apache.commons.collections4.ListUtilsTest: java.util.List fullList>;

        $r7 = staticinvoke <org.apache.commons.collections4.ListUtils: java.util.List intersection(java.util.List,java.util.List)>($r6, $r2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r2, $r7);

        return;
    }

    public void testIntersectListWithNoOverlapAndDifferentTypes()
    {
        org.apache.commons.collections4.ListUtilsTest r0;
        java.util.List r1, $r5, $r6;
        java.lang.Integer[] $r2;
        java.lang.Integer $r3, $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.ListUtilsTest;

        $r2 = newarray (java.lang.Integer)[2];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r2[0] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(23);

        $r2[1] = $r4;

        r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        $r5 = r0.<org.apache.commons.collections4.ListUtilsTest: java.util.List fullList>;

        $r6 = staticinvoke <org.apache.commons.collections4.ListUtils: java.util.List intersection(java.util.List,java.util.List)>($r5, r1);

        $z0 = interfaceinvoke $r6.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testIntersectListWithSelf()
    {
        org.apache.commons.collections4.ListUtilsTest r0;
        java.util.List $r1, $r2, $r3, $r4;

        r0 := @this: org.apache.commons.collections4.ListUtilsTest;

        $r3 = r0.<org.apache.commons.collections4.ListUtilsTest: java.util.List fullList>;

        $r2 = r0.<org.apache.commons.collections4.ListUtilsTest: java.util.List fullList>;

        $r1 = r0.<org.apache.commons.collections4.ListUtilsTest: java.util.List fullList>;

        $r4 = staticinvoke <org.apache.commons.collections4.ListUtils: java.util.List intersection(java.util.List,java.util.List)>($r2, $r1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r3, $r4);

        return;
    }

    public void testIntersectionOrderInsensitivity()
    {
        org.apache.commons.collections4.ListUtilsTest r0;
        java.util.ArrayList $r3, $r4;
        java.util.List $r5, $r6;

        r0 := @this: org.apache.commons.collections4.ListUtilsTest;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>("a");

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>("b");

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>("a");

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>("a");

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>("b");

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>("b");

        $r5 = staticinvoke <org.apache.commons.collections4.ListUtils: java.util.List intersection(java.util.List,java.util.List)>($r3, $r4);

        $r6 = staticinvoke <org.apache.commons.collections4.ListUtils: java.util.List intersection(java.util.List,java.util.List)>($r4, $r3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r5, $r6);

        return;
    }

    public void testPredicatedList()
    {
        org.apache.commons.collections4.ListUtilsTest r0;
        java.util.List r2;
        org.apache.commons.collections4.ListUtilsTest$1 $r3;
        java.util.ArrayList $r4, $r5;
        boolean $z0;
        java.lang.NullPointerException $r8, $r9;

        r0 := @this: org.apache.commons.collections4.ListUtilsTest;

        $r3 = new org.apache.commons.collections4.ListUtilsTest$1;

        specialinvoke $r3.<org.apache.commons.collections4.ListUtilsTest$1: void <init>(org.apache.commons.collections4.ListUtilsTest)>(r0);

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r2 = staticinvoke <org.apache.commons.collections4.ListUtils: java.util.List predicatedList(java.util.List,org.apache.commons.collections4.Predicate)>($r4, $r3);

        $z0 = r2 instanceof org.apache.commons.collections4.list.PredicatedList;

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("returned object should be a PredicatedList", $z0);

     label1:
        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        staticinvoke <org.apache.commons.collections4.ListUtils: java.util.List predicatedList(java.util.List,org.apache.commons.collections4.Predicate)>($r5, null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting IllegalArgumentException for null predicate.");

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

     label4:
        staticinvoke <org.apache.commons.collections4.ListUtils: java.util.List predicatedList(java.util.List,org.apache.commons.collections4.Predicate)>(null, $r3);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting IllegalArgumentException for null list.");

     label5:
        goto label7;

     label6:
        $r9 := @caughtexception;

     label7:
        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
        catch java.lang.NullPointerException from label4 to label5 with label6;
    }

    public void testLazyList()
    {
        org.apache.commons.collections4.ListUtilsTest r0;
        java.util.List r1;
        java.util.ArrayList $r2;
        org.apache.commons.collections4.ListUtilsTest$2 $r3;
        java.lang.Object $r4, $r5;
        int $i0, $i2;
        long $l1, $l3;

        r0 := @this: org.apache.commons.collections4.ListUtilsTest;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = new org.apache.commons.collections4.ListUtilsTest$2;

        specialinvoke $r3.<org.apache.commons.collections4.ListUtilsTest$2: void <init>(org.apache.commons.collections4.ListUtilsTest)>(r0);

        r1 = staticinvoke <org.apache.commons.collections4.ListUtils: java.util.List lazyList(java.util.List,org.apache.commons.collections4.Factory)>($r2, $r3);

        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(5);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r4);

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(6L, $l1);

        $r5 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(5);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r5);

        $i2 = interfaceinvoke r1.<java.util.List: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(6L, $l3);

        return;
    }

    public void testEmptyIfNull()
    {
        org.apache.commons.collections4.ListUtilsTest r0;
        java.util.List $r2, $r4;
        boolean $z0;
        java.util.ArrayList $r3;

        r0 := @this: org.apache.commons.collections4.ListUtilsTest;

        $r2 = staticinvoke <org.apache.commons.collections4.ListUtils: java.util.List emptyIfNull(java.util.List)>(null);

        $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = staticinvoke <org.apache.commons.collections4.ListUtils: java.util.List emptyIfNull(java.util.List)>($r3);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($r3, $r4);

        return;
    }

    public void testDefaultIfNull()
    {
        org.apache.commons.collections4.ListUtilsTest r0;
        java.util.List $r2, $r3, $r5, $r6;
        boolean $z0;
        java.util.ArrayList $r4;

        r0 := @this: org.apache.commons.collections4.ListUtilsTest;

        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r3 = staticinvoke <org.apache.commons.collections4.ListUtils: java.util.List defaultIfNull(java.util.List,java.util.List)>(null, $r2);

        $z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r6 = staticinvoke <org.apache.commons.collections4.ListUtils: java.util.List defaultIfNull(java.util.List,java.util.List)>($r4, $r5);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($r4, $r6);

        return;
    }

    public void testEquals()
    {
        org.apache.commons.collections4.ListUtilsTest r0;
        java.util.List r1;
        java.lang.String[] $r4;
        java.util.ArrayList $r5, $r6;
        java.lang.Boolean $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @this: org.apache.commons.collections4.ListUtilsTest;

        $r4 = newarray (java.lang.String)[3];

        $r4[0] = "a";

        $r4[1] = "b";

        $r4[2] = "c";

        r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z0 = interfaceinvoke $r5.<java.util.List: boolean equals(java.lang.Object)>($r6);

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, $r8);

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z1 = staticinvoke <org.apache.commons.collections4.ListUtils: boolean isEqualList(java.util.Collection,java.util.Collection)>($r5, $r6);

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r9, $r10);

        interfaceinvoke $r5.<java.util.List: void clear()>();

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $z2 = staticinvoke <org.apache.commons.collections4.ListUtils: boolean isEqualList(java.util.Collection,java.util.Collection)>($r5, $r6);

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r11, $r12);

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $z3 = staticinvoke <org.apache.commons.collections4.ListUtils: boolean isEqualList(java.util.Collection,java.util.Collection)>($r5, null);

        $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r13, $r14);

        $r15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $z4 = staticinvoke <org.apache.commons.collections4.ListUtils: boolean isEqualList(java.util.Collection,java.util.Collection)>(null, $r6);

        $r16 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r15, $r16);

        $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z5 = staticinvoke <org.apache.commons.collections4.ListUtils: boolean isEqualList(java.util.Collection,java.util.Collection)>(null, null);

        $r18 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r17, $r18);

        return;
    }

    public void testHashCode()
    {
        org.apache.commons.collections4.ListUtilsTest r0;
        java.util.List r1;
        java.lang.String[] $r4;
        java.util.ArrayList $r5, $r6;
        java.lang.Boolean $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        long $l11;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: org.apache.commons.collections4.ListUtilsTest;

        $r4 = newarray (java.lang.String)[3];

        $r4[0] = "a";

        $r4[1] = "b";

        $r4[2] = "c";

        r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $i0 = interfaceinvoke $r5.<java.util.List: int hashCode()>();

        $i1 = interfaceinvoke $r6.<java.util.List: int hashCode()>();

        if $i0 != $i1 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, $r8);

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $i2 = interfaceinvoke $r5.<java.util.List: int hashCode()>();

        $i3 = staticinvoke <org.apache.commons.collections4.ListUtils: int hashCodeForList(java.util.Collection)>($r5);

        if $i2 != $i3 goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r9, $r10);

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $i4 = interfaceinvoke $r6.<java.util.List: int hashCode()>();

        $i5 = staticinvoke <org.apache.commons.collections4.ListUtils: int hashCodeForList(java.util.Collection)>($r6);

        if $i4 != $i5 goto label05;

        $z2 = 1;

        goto label06;

     label05:
        $z2 = 0;

     label06:
        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r11, $r12);

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $i6 = staticinvoke <org.apache.commons.collections4.ListUtils: int hashCodeForList(java.util.Collection)>($r5);

        $i7 = staticinvoke <org.apache.commons.collections4.ListUtils: int hashCodeForList(java.util.Collection)>($r6);

        if $i6 != $i7 goto label07;

        $z3 = 1;

        goto label08;

     label07:
        $z3 = 0;

     label08:
        $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r13, $r14);

        interfaceinvoke $r5.<java.util.List: void clear()>();

        $r15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $i8 = staticinvoke <org.apache.commons.collections4.ListUtils: int hashCodeForList(java.util.Collection)>($r5);

        $i9 = staticinvoke <org.apache.commons.collections4.ListUtils: int hashCodeForList(java.util.Collection)>($r6);

        if $i8 != $i9 goto label09;

        $z4 = 1;

        goto label10;

     label09:
        $z4 = 0;

     label10:
        $r16 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r15, $r16);

        $i10 = staticinvoke <org.apache.commons.collections4.ListUtils: int hashCodeForList(java.util.Collection)>(null);

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l11);

        return;
    }

    public void testRetainAll()
    {
        org.apache.commons.collections4.ListUtilsTest r0;
        java.util.List r2, $r5, $r6, $r7;
        java.util.ArrayList $r4;
        int $i0;
        boolean $z4, $z6, $z7;
        java.lang.NullPointerException $r9;

        r0 := @this: org.apache.commons.collections4.ListUtilsTest;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>("a");

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>("b");

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>("x");

        $r5 = r0.<org.apache.commons.collections4.ListUtilsTest: java.util.List fullList>;

        r2 = staticinvoke <org.apache.commons.collections4.ListUtils: java.util.List retainAll(java.util.Collection,java.util.Collection)>($r5, $r4);

        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i0 != 2 goto label1;

        $z7 = 1;

        goto label2;

     label1:
        $z7 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

        interfaceinvoke $r4.<java.util.List: boolean remove(java.lang.Object)>("x");

        $z4 = interfaceinvoke r2.<java.util.List: boolean equals(java.lang.Object)>($r4);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $r6 = r0.<org.apache.commons.collections4.ListUtilsTest: java.util.List fullList>;

        interfaceinvoke $r6.<java.util.List: boolean retainAll(java.util.Collection)>($r4);

        $r7 = r0.<org.apache.commons.collections4.ListUtilsTest: java.util.List fullList>;

        $z6 = interfaceinvoke r2.<java.util.List: boolean equals(java.lang.Object)>($r7);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

     label3:
        staticinvoke <org.apache.commons.collections4.ListUtils: java.util.List retainAll(java.util.Collection,java.util.Collection)>(null, null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting NullPointerException");

     label4:
        goto label6;

     label5:
        $r9 := @caughtexception;

     label6:
        return;

        catch java.lang.NullPointerException from label3 to label4 with label5;
    }

    public void testRemoveAll()
    {
        org.apache.commons.collections4.ListUtilsTest r0;
        java.util.List r2, $r5, $r6, $r7;
        java.util.ArrayList $r4;
        int $i0;
        boolean $z4, $z5;
        java.lang.NullPointerException $r9;

        r0 := @this: org.apache.commons.collections4.ListUtilsTest;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>("a");

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>("b");

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>("x");

        $r5 = r0.<org.apache.commons.collections4.ListUtilsTest: java.util.List fullList>;

        r2 = staticinvoke <org.apache.commons.collections4.ListUtils: java.util.List removeAll(java.util.Collection,java.util.Collection)>($r5, $r4);

        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i0 != 3 goto label1;

        $z5 = 1;

        goto label2;

     label1:
        $z5 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        $r6 = r0.<org.apache.commons.collections4.ListUtilsTest: java.util.List fullList>;

        interfaceinvoke $r6.<java.util.List: boolean removeAll(java.util.Collection)>($r4);

        $r7 = r0.<org.apache.commons.collections4.ListUtilsTest: java.util.List fullList>;

        $z4 = interfaceinvoke r2.<java.util.List: boolean equals(java.lang.Object)>($r7);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

     label3:
        staticinvoke <org.apache.commons.collections4.ListUtils: java.util.List removeAll(java.util.Collection,java.util.Collection)>(null, null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting NullPointerException");

     label4:
        goto label6;

     label5:
        $r9 := @caughtexception;

     label6:
        return;

        catch java.lang.NullPointerException from label3 to label4 with label5;
    }

    public void testSubtract()
    {
        org.apache.commons.collections4.ListUtilsTest r0;
        java.util.List r3;
        java.util.ArrayList $r6, $r7, $r8;
        int $i0;
        java.lang.NullPointerException $r10;
        boolean $z8;

        r0 := @this: org.apache.commons.collections4.ListUtilsTest;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>("a");

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>("b");

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>("a");

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>("x");

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>("a");

        r3 = staticinvoke <org.apache.commons.collections4.ListUtils: java.util.List subtract(java.util.List,java.util.List)>($r6, $r7);

        $i0 = interfaceinvoke r3.<java.util.List: int size()>();

        if $i0 != 3 goto label1;

        $z8 = 1;

        goto label2;

     label1:
        $z8 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>("b");

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>("a");

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>("x");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r8, r3);

     label3:
        staticinvoke <org.apache.commons.collections4.ListUtils: java.util.List subtract(java.util.List,java.util.List)>($r6, null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting NullPointerException");

     label4:
        goto label6;

     label5:
        $r10 := @caughtexception;

     label6:
        return;

        catch java.lang.NullPointerException from label3 to label4 with label5;
    }

    public void testSubtractNullElement()
    {
        org.apache.commons.collections4.ListUtilsTest r0;
        java.util.List r3;
        java.util.ArrayList $r5, $r6, $r7;
        int $i0;
        boolean $z8;

        r0 := @this: org.apache.commons.collections4.ListUtilsTest;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>("a");

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(null);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(null);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>("x");

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(null);

        r3 = staticinvoke <org.apache.commons.collections4.ListUtils: java.util.List subtract(java.util.List,java.util.List)>($r5, $r6);

        $i0 = interfaceinvoke r3.<java.util.List: int size()>();

        if $i0 != 3 goto label1;

        $z8 = 1;

        goto label2;

     label1:
        $z8 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>("a");

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(null);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>("x");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, r3);

        return;
    }

    public void testIndexOf()
    {
        org.apache.commons.collections4.ListUtilsTest r0;
        java.util.List $r1, $r2, $r4, $r5;
        java.lang.Object $r3;
        long $l0, $l2, $l4;
        int $i1, $i3, i5, i6;
        org.apache.commons.collections4.Predicate r6, r7;

        r0 := @this: org.apache.commons.collections4.ListUtilsTest;

        r6 = staticinvoke <org.apache.commons.collections4.functors.EqualPredicate: org.apache.commons.collections4.Predicate equalPredicate(java.lang.Object)>("d");

        $r1 = r0.<org.apache.commons.collections4.ListUtilsTest: java.util.List fullList>;

        i5 = staticinvoke <org.apache.commons.collections4.ListUtils: int indexOf(java.util.List,org.apache.commons.collections4.Predicate)>($r1, r6);

        $r2 = r0.<org.apache.commons.collections4.ListUtilsTest: java.util.List fullList>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("d", $r3);

        r7 = staticinvoke <org.apache.commons.collections4.functors.EqualPredicate: org.apache.commons.collections4.Predicate equalPredicate(java.lang.Object)>("de");

        $r4 = r0.<org.apache.commons.collections4.ListUtilsTest: java.util.List fullList>;

        i6 = staticinvoke <org.apache.commons.collections4.ListUtils: int indexOf(java.util.List,org.apache.commons.collections4.Predicate)>($r4, r7);

        $l0 = (long) i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l0, -1L);

        $i1 = staticinvoke <org.apache.commons.collections4.ListUtils: int indexOf(java.util.List,org.apache.commons.collections4.Predicate)>(null, r7);

        $l2 = (long) $i1;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l2, -1L);

        $r5 = r0.<org.apache.commons.collections4.ListUtilsTest: java.util.List fullList>;

        $i3 = staticinvoke <org.apache.commons.collections4.ListUtils: int indexOf(java.util.List,org.apache.commons.collections4.Predicate)>($r5, null);

        $l4 = (long) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l4, -1L);

        return;
    }

    public void testLongestCommonSubsequence()
    {
        org.apache.commons.collections4.ListUtilsTest r0;
        java.util.List r1, r2, r3, r4, $r5, $r9, $r13, $r15, $r16, r60, r61, r62, r63, r64, r65;
        java.lang.Character[] $r7, $r11, $r17, $r24, $r31, $r37, $r43, $r48;
        java.lang.Character $r8, $r12, $r18, $r19, $r20, $r21, $r22, $r23, $r25, $r26, $r27, $r28, $r29, $r30, $r32, $r33, $r34, $r35, $r36, $r38, $r39, $r40, $r41, $r42, $r44, $r45, $r46, $r47, $r49, $r50, $r51, $r52, $r53;
        int $i0;
        long $l1;
        boolean $z0;
        java.lang.NullPointerException $r54, $r55, $r56;

        r0 := @this: org.apache.commons.collections4.ListUtilsTest;

     label01:
        $r5 = (java.util.List) null;

        staticinvoke <org.apache.commons.collections4.ListUtils: java.util.List longestCommonSubsequence(java.util.List,java.util.List)>($r5, null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("failed to check for null argument");

     label02:
        goto label04;

     label03:
        $r54 := @caughtexception;

     label04:
        $r7 = newarray (java.lang.Character)[1];

        $r8 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(65);

        $r7[0] = $r8;

        $r9 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r7);

        staticinvoke <org.apache.commons.collections4.ListUtils: java.util.List longestCommonSubsequence(java.util.List,java.util.List)>($r9, null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("failed to check for null argument");

     label05:
        goto label07;

     label06:
        $r56 := @caughtexception;

     label07:
        $r11 = newarray (java.lang.Character)[1];

        $r12 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(65);

        $r11[0] = $r12;

        $r13 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r11);

        staticinvoke <org.apache.commons.collections4.ListUtils: java.util.List longestCommonSubsequence(java.util.List,java.util.List)>(null, $r13);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("failed to check for null argument");

     label08:
        goto label10;

     label09:
        $r55 := @caughtexception;

     label10:
        $r16 = <java.util.Collections: java.util.List EMPTY_LIST>;

        $r15 = <java.util.Collections: java.util.List EMPTY_LIST>;

        r60 = staticinvoke <org.apache.commons.collections4.ListUtils: java.util.List longestCommonSubsequence(java.util.List,java.util.List)>($r16, $r15);

        $i0 = interfaceinvoke r60.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        $r17 = newarray (java.lang.Character)[6];

        $r18 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(66);

        $r17[0] = $r18;

        $r19 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(65);

        $r17[1] = $r19;

        $r20 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(78);

        $r17[2] = $r20;

        $r21 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(65);

        $r17[3] = $r21;

        $r22 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(78);

        $r17[4] = $r22;

        $r23 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(65);

        $r17[5] = $r23;

        r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r17);

        $r24 = newarray (java.lang.Character)[6];

        $r25 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(65);

        $r24[0] = $r25;

        $r26 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(78);

        $r24[1] = $r26;

        $r27 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(65);

        $r24[2] = $r27;

        $r28 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(78);

        $r24[3] = $r28;

        $r29 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(65);

        $r24[4] = $r29;

        $r30 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(83);

        $r24[5] = $r30;

        r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r24);

        r61 = staticinvoke <org.apache.commons.collections4.ListUtils: java.util.List longestCommonSubsequence(java.util.List,java.util.List)>(r1, r2);

        $r31 = newarray (java.lang.Character)[5];

        $r32 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(65);

        $r31[0] = $r32;

        $r33 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(78);

        $r31[1] = $r33;

        $r34 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(65);

        $r31[2] = $r34;

        $r35 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(78);

        $r31[3] = $r35;

        $r36 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(65);

        $r31[4] = $r36;

        r62 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r31);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r62, r61);

        $r37 = newarray (java.lang.Character)[5];

        $r38 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(65);

        $r37[0] = $r38;

        $r39 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(84);

        $r37[1] = $r39;

        $r40 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(65);

        $r37[2] = $r40;

        $r41 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(78);

        $r37[3] = $r41;

        $r42 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(65);

        $r37[4] = $r42;

        r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r37);

        r63 = staticinvoke <org.apache.commons.collections4.ListUtils: java.util.List longestCommonSubsequence(java.util.List,java.util.List)>(r1, r3);

        $r43 = newarray (java.lang.Character)[4];

        $r44 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(65);

        $r43[0] = $r44;

        $r45 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(65);

        $r43[1] = $r45;

        $r46 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(78);

        $r43[2] = $r46;

        $r47 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(65);

        $r43[3] = $r47;

        r64 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r43);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r64, r63);

        $r48 = newarray (java.lang.Character)[5];

        $r49 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(90);

        $r48[0] = $r49;

        $r50 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(79);

        $r48[1] = $r50;

        $r51 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(82);

        $r48[2] = $r51;

        $r52 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(82);

        $r48[3] = $r52;

        $r53 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(79);

        $r48[4] = $r53;

        r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r48);

        r65 = staticinvoke <org.apache.commons.collections4.ListUtils: java.util.List longestCommonSubsequence(java.util.List,java.util.List)>(r1, r4);

        $z0 = interfaceinvoke r65.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;

        catch java.lang.NullPointerException from label01 to label02 with label03;
        catch java.lang.NullPointerException from label04 to label05 with label06;
        catch java.lang.NullPointerException from label07 to label08 with label09;
    }

    public void testLongestCommonSubsequenceWithString()
    {
        org.apache.commons.collections4.ListUtilsTest r0;
        java.lang.String $r5, r15, r16, r17, r18;
        int $i0, $i2;
        long $l1, $l3;
        java.lang.NullPointerException $r9, $r10, $r11;

        r0 := @this: org.apache.commons.collections4.ListUtilsTest;

     label01:
        $r5 = (java.lang.String) null;

        staticinvoke <org.apache.commons.collections4.ListUtils: java.lang.String longestCommonSubsequence(java.lang.CharSequence,java.lang.CharSequence)>($r5, null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("failed to check for null argument");

     label02:
        goto label04;

     label03:
        $r11 := @caughtexception;

     label04:
        staticinvoke <org.apache.commons.collections4.ListUtils: java.lang.String longestCommonSubsequence(java.lang.CharSequence,java.lang.CharSequence)>("A", null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("failed to check for null argument");

     label05:
        goto label07;

     label06:
        $r9 := @caughtexception;

     label07:
        staticinvoke <org.apache.commons.collections4.ListUtils: java.lang.String longestCommonSubsequence(java.lang.CharSequence,java.lang.CharSequence)>(null, "A");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("failed to check for null argument");

     label08:
        goto label10;

     label09:
        $r10 := @caughtexception;

     label10:
        r15 = staticinvoke <org.apache.commons.collections4.ListUtils: java.lang.String longestCommonSubsequence(java.lang.CharSequence,java.lang.CharSequence)>("", "");

        $i0 = virtualinvoke r15.<java.lang.String: int length()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        r16 = staticinvoke <org.apache.commons.collections4.ListUtils: java.lang.String longestCommonSubsequence(java.lang.CharSequence,java.lang.CharSequence)>("BANANA", "ANANAS");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ANANA", r16);

        r17 = staticinvoke <org.apache.commons.collections4.ListUtils: java.lang.String longestCommonSubsequence(java.lang.CharSequence,java.lang.CharSequence)>("BANANA", "ATANA");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AANA", r17);

        r18 = staticinvoke <org.apache.commons.collections4.ListUtils: java.lang.String longestCommonSubsequence(java.lang.CharSequence,java.lang.CharSequence)>("BANANA", "ZORRO");

        $i2 = virtualinvoke r18.<java.lang.String: int length()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l3);

        return;

        catch java.lang.NullPointerException from label01 to label02 with label03;
        catch java.lang.NullPointerException from label04 to label05 with label06;
        catch java.lang.NullPointerException from label07 to label08 with label09;
    }

    public void testPartition()
    {
        org.apache.commons.collections4.ListUtilsTest r0;
        java.util.ArrayList $r2;
        int $i0, $i2, $i4, $i6, $i8, i10;
        long $l1, $l3, $l5, $l7, $l9;
        java.lang.Object $r3, $r8, $r10;
        java.util.List $r4, $r9, r15, r19;
        java.lang.Integer $r11;
        java.lang.IllegalArgumentException $r12, $r14;
        java.lang.NullPointerException $r13;

        r0 := @this: org.apache.commons.collections4.ListUtilsTest;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        i10 = 0;

     label01:
        if i10 > 6 goto label02;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i10);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r11);

        i10 = i10 + 1;

        goto label01;

     label02:
        r15 = staticinvoke <org.apache.commons.collections4.ListUtils: java.util.List partition(java.util.List,int)>($r2, 3);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r15);

        $i0 = interfaceinvoke r15.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l1);

        $r3 = interfaceinvoke r15.<java.util.List: java.lang.Object get(int)>(2);

        $r4 = (java.util.List) $r3;

        $i2 = interfaceinvoke $r4.<java.util.List: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l3);

     label03:
        staticinvoke <org.apache.commons.collections4.ListUtils: java.util.List partition(java.util.List,int)>(null, 3);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("failed to check for null argument");

     label04:
        goto label06;

     label05:
        $r13 := @caughtexception;

     label06:
        staticinvoke <org.apache.commons.collections4.ListUtils: java.util.List partition(java.util.List,int)>($r2, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("failed to check for size argument");

     label07:
        goto label09;

     label08:
        $r12 := @caughtexception;

     label09:
        staticinvoke <org.apache.commons.collections4.ListUtils: java.util.List partition(java.util.List,int)>($r2, -10);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("failed to check for size argument");

     label10:
        goto label12;

     label11:
        $r14 := @caughtexception;

     label12:
        r19 = staticinvoke <org.apache.commons.collections4.ListUtils: java.util.List partition(java.util.List,int)>($r2, 2147483647);

        $i4 = interfaceinvoke r19.<java.util.List: int size()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l5);

        $i6 = interfaceinvoke $r2.<java.util.List: int size()>();

        $l7 = (long) $i6;

        $r8 = interfaceinvoke r19.<java.util.List: java.lang.Object get(int)>(0);

        $r9 = (java.util.List) $r8;

        $i8 = interfaceinvoke $r9.<java.util.List: int size()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l7, $l9);

        $r10 = interfaceinvoke r19.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r2, $r10);

        return;

        catch java.lang.NullPointerException from label03 to label04 with label05;
        catch java.lang.IllegalArgumentException from label06 to label07 with label08;
        catch java.lang.IllegalArgumentException from label09 to label10 with label11;
    }

    public void testSelect()
    {
        org.apache.commons.collections4.ListUtilsTest r0;
        java.util.List r2, r3;
        java.util.HashSet r4, $r12;
        java.util.ArrayList $r5;
        java.lang.Integer $r6, $r7, $r8, $r9, $r15;
        org.apache.commons.collections4.Predicate $r10, $r11, $r13;
        java.util.Collection $r14;
        boolean $z4;
        int $i0, $i2;
        long $l1, $l3;
        java.util.Iterator $r16;
        java.lang.Object $r17;

        r0 := @this: org.apache.commons.collections4.ListUtilsTest;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r6);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r7);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r8);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r9);

        $r10 = <org.apache.commons.collections4.ListUtilsTest: org.apache.commons.collections4.Predicate EQUALS_TWO>;

        r2 = staticinvoke <org.apache.commons.collections4.ListUtils: java.util.List select(java.util.Collection,org.apache.commons.collections4.Predicate)>($r5, $r10);

        $r11 = <org.apache.commons.collections4.ListUtilsTest: org.apache.commons.collections4.Predicate EQUALS_TWO>;

        r3 = staticinvoke <org.apache.commons.collections4.ListUtils: java.util.List select(java.util.Collection,org.apache.commons.collections4.Predicate)>($r5, $r11);

        $r13 = <org.apache.commons.collections4.ListUtilsTest: org.apache.commons.collections4.Predicate EQUALS_TWO>;

        $r12 = new java.util.HashSet;

        specialinvoke $r12.<java.util.HashSet: void <init>()>();

        $r14 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection select(java.lang.Iterable,org.apache.commons.collections4.Predicate,java.util.Collection)>($r5, $r13, $r12);

        r4 = (java.util.HashSet) $r14;

        $z4 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isEqualCollection(java.util.Collection,java.util.Collection)>(r2, r4);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l1);

        $i2 = interfaceinvoke r2.<java.util.List: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l3);

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r16 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

        $r17 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r15, $r17);

        return;
    }

    public void testSelectRejected()
    {
        org.apache.commons.collections4.ListUtilsTest r0;
        java.util.List r2, r3;
        java.util.HashSet r4, $r12;
        java.util.ArrayList $r5;
        java.lang.Long $r6, $r7, $r8, $r9, $r15, $r16, $r17;
        org.apache.commons.collections4.Predicate $r10, $r11, $r13;
        java.util.Collection $r14;
        boolean $z4, $z5, $z6, $z7, $z8;
        int $i0, $i2;
        long $l1, $l3;

        r0 := @this: org.apache.commons.collections4.ListUtilsTest;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r6);

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(2L);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r7);

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(3L);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r8);

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(4L);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r9);

        $r10 = <org.apache.commons.collections4.ListUtilsTest: org.apache.commons.collections4.Predicate EQUALS_TWO>;

        r2 = staticinvoke <org.apache.commons.collections4.ListUtils: java.util.List selectRejected(java.util.Collection,org.apache.commons.collections4.Predicate)>($r5, $r10);

        $r11 = <org.apache.commons.collections4.ListUtilsTest: org.apache.commons.collections4.Predicate EQUALS_TWO>;

        r3 = staticinvoke <org.apache.commons.collections4.ListUtils: java.util.List selectRejected(java.util.Collection,org.apache.commons.collections4.Predicate)>($r5, $r11);

        $r13 = <org.apache.commons.collections4.ListUtilsTest: org.apache.commons.collections4.Predicate EQUALS_TWO>;

        $r12 = new java.util.HashSet;

        specialinvoke $r12.<java.util.HashSet: void <init>()>();

        $r14 = staticinvoke <org.apache.commons.collections4.CollectionUtils: java.util.Collection selectRejected(java.lang.Iterable,org.apache.commons.collections4.Predicate,java.util.Collection)>($r5, $r13, $r12);

        r4 = (java.util.HashSet) $r14;

        $z4 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isEqualCollection(java.util.Collection,java.util.Collection)>(r2, r3);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $z5 = staticinvoke <org.apache.commons.collections4.CollectionUtils: boolean isEqualCollection(java.util.Collection,java.util.Collection)>(r2, r4);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l1);

        $i2 = interfaceinvoke r2.<java.util.List: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l3);

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L);

        $z6 = interfaceinvoke r2.<java.util.List: boolean contains(java.lang.Object)>($r15);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        $r16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(3L);

        $z7 = interfaceinvoke r2.<java.util.List: boolean contains(java.lang.Object)>($r16);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

        $r17 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(4L);

        $z8 = interfaceinvoke r2.<java.util.List: boolean contains(java.lang.Object)>($r17);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

        return;
    }

    static void <clinit>()
    {
        org.apache.commons.collections4.ListUtilsTest$3 $r0;

        <org.apache.commons.collections4.ListUtilsTest: java.lang.String x> = "x";

        <org.apache.commons.collections4.ListUtilsTest: java.lang.String e> = "e";

        <org.apache.commons.collections4.ListUtilsTest: java.lang.String d> = "d";

        <org.apache.commons.collections4.ListUtilsTest: java.lang.String c> = "c";

        <org.apache.commons.collections4.ListUtilsTest: java.lang.String b> = "b";

        <org.apache.commons.collections4.ListUtilsTest: java.lang.String a> = "a";

        $r0 = new org.apache.commons.collections4.ListUtilsTest$3;

        specialinvoke $r0.<org.apache.commons.collections4.ListUtilsTest$3: void <init>()>();

        <org.apache.commons.collections4.ListUtilsTest: org.apache.commons.collections4.Predicate EQUALS_TWO> = $r0;

        return;
    }
}
