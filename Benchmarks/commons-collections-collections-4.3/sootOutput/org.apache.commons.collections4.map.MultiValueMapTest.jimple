public class org.apache.commons.collections4.map.MultiValueMapTest extends org.apache.commons.collections4.AbstractObjectTest
{

    public void <init>(java.lang.String)
    {
        org.apache.commons.collections4.map.MultiValueMapTest r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMapTest;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.collections4.AbstractObjectTest: void <init>(java.lang.String)>(r1);

        return;
    }

    public void testNoMappingReturnsNull()
    {
        org.apache.commons.collections4.map.MultiValueMapTest r0;
        org.apache.commons.collections4.map.MultiValueMap r1;
        java.lang.Object $r2;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMapTest;

        r1 = specialinvoke r0.<org.apache.commons.collections4.map.MultiValueMapTest: org.apache.commons.collections4.map.MultiValueMap createTestMap()>();

        $r2 = virtualinvoke r1.<org.apache.commons.collections4.map.MultiValueMap: java.lang.Object get(java.lang.Object)>("whatever");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertNull(java.lang.Object)>($r2);

        return;
    }

    public void testValueCollectionType()
    {
        org.apache.commons.collections4.map.MultiValueMapTest r0;
        org.apache.commons.collections4.map.MultiValueMap r1;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMapTest;

        r1 = specialinvoke r0.<org.apache.commons.collections4.map.MultiValueMapTest: org.apache.commons.collections4.map.MultiValueMap createTestMap(java.lang.Class)>(class "Ljava/util/LinkedList;");

        $r2 = virtualinvoke r1.<org.apache.commons.collections4.map.MultiValueMap: java.lang.Object get(java.lang.Object)>("one");

        $z0 = $r2 instanceof java.util.LinkedList;

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertTrue(boolean)>($z0);

        return;
    }

    public void testMultipleValues()
    {
        org.apache.commons.collections4.map.MultiValueMapTest r0;
        org.apache.commons.collections4.map.MultiValueMap r1;
        java.util.HashSet $r3;
        java.lang.Object $r4;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMapTest;

        r1 = specialinvoke r0.<org.apache.commons.collections4.map.MultiValueMapTest: org.apache.commons.collections4.map.MultiValueMap createTestMap(java.lang.Class)>(class "Ljava/util/HashSet;");

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        virtualinvoke $r3.<java.util.HashSet: boolean add(java.lang.Object)>("uno");

        virtualinvoke $r3.<java.util.HashSet: boolean add(java.lang.Object)>("un");

        $r4 = virtualinvoke r1.<org.apache.commons.collections4.map.MultiValueMap: java.lang.Object get(java.lang.Object)>("one");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(java.lang.Object,java.lang.Object)>($r3, $r4);

        return;
    }

    public void testContainsValue()
    {
        org.apache.commons.collections4.map.MultiValueMapTest r0;
        org.apache.commons.collections4.map.MultiValueMap r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMapTest;

        r1 = specialinvoke r0.<org.apache.commons.collections4.map.MultiValueMapTest: org.apache.commons.collections4.map.MultiValueMap createTestMap(java.lang.Class)>(class "Ljava/util/HashSet;");

        $z0 = virtualinvoke r1.<org.apache.commons.collections4.map.MultiValueMap: boolean containsValue(java.lang.Object)>("uno");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertTrue(boolean)>($z0);

        $z1 = virtualinvoke r1.<org.apache.commons.collections4.map.MultiValueMap: boolean containsValue(java.lang.Object)>("un");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertTrue(boolean)>($z1);

        $z2 = virtualinvoke r1.<org.apache.commons.collections4.map.MultiValueMap: boolean containsValue(java.lang.Object)>("dos");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertTrue(boolean)>($z2);

        $z3 = virtualinvoke r1.<org.apache.commons.collections4.map.MultiValueMap: boolean containsValue(java.lang.Object)>("deux");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertTrue(boolean)>($z3);

        $z4 = virtualinvoke r1.<org.apache.commons.collections4.map.MultiValueMap: boolean containsValue(java.lang.Object)>("tres");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertTrue(boolean)>($z4);

        $z5 = virtualinvoke r1.<org.apache.commons.collections4.map.MultiValueMap: boolean containsValue(java.lang.Object)>("trois");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertTrue(boolean)>($z5);

        $z6 = virtualinvoke r1.<org.apache.commons.collections4.map.MultiValueMap: boolean containsValue(java.lang.Object)>("quatro");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertFalse(boolean)>($z6);

        return;
    }

    public void testKeyContainsValue()
    {
        org.apache.commons.collections4.map.MultiValueMapTest r0;
        org.apache.commons.collections4.map.MultiValueMap r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMapTest;

        r1 = specialinvoke r0.<org.apache.commons.collections4.map.MultiValueMapTest: org.apache.commons.collections4.map.MultiValueMap createTestMap(java.lang.Class)>(class "Ljava/util/HashSet;");

        $z0 = virtualinvoke r1.<org.apache.commons.collections4.map.MultiValueMap: boolean containsValue(java.lang.Object,java.lang.Object)>("one", "uno");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertTrue(boolean)>($z0);

        $z1 = virtualinvoke r1.<org.apache.commons.collections4.map.MultiValueMap: boolean containsValue(java.lang.Object,java.lang.Object)>("one", "un");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertTrue(boolean)>($z1);

        $z2 = virtualinvoke r1.<org.apache.commons.collections4.map.MultiValueMap: boolean containsValue(java.lang.Object,java.lang.Object)>("two", "dos");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertTrue(boolean)>($z2);

        $z3 = virtualinvoke r1.<org.apache.commons.collections4.map.MultiValueMap: boolean containsValue(java.lang.Object,java.lang.Object)>("two", "deux");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertTrue(boolean)>($z3);

        $z4 = virtualinvoke r1.<org.apache.commons.collections4.map.MultiValueMap: boolean containsValue(java.lang.Object,java.lang.Object)>("three", "tres");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertTrue(boolean)>($z4);

        $z5 = virtualinvoke r1.<org.apache.commons.collections4.map.MultiValueMap: boolean containsValue(java.lang.Object,java.lang.Object)>("three", "trois");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertTrue(boolean)>($z5);

        $z6 = virtualinvoke r1.<org.apache.commons.collections4.map.MultiValueMap: boolean containsValue(java.lang.Object,java.lang.Object)>("four", "quatro");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertFalse(boolean)>($z6);

        return;
    }

    public void testValues()
    {
        org.apache.commons.collections4.map.MultiValueMapTest r0;
        org.apache.commons.collections4.map.MultiValueMap r1;
        java.util.Collection r3;
        java.util.HashSet $r4, $r5;
        int $i0;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMapTest;

        r1 = specialinvoke r0.<org.apache.commons.collections4.map.MultiValueMapTest: org.apache.commons.collections4.map.MultiValueMap createTestMap(java.lang.Class)>(class "Ljava/util/HashSet;");

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        virtualinvoke $r4.<java.util.HashSet: boolean add(java.lang.Object)>("uno");

        virtualinvoke $r4.<java.util.HashSet: boolean add(java.lang.Object)>("dos");

        virtualinvoke $r4.<java.util.HashSet: boolean add(java.lang.Object)>("tres");

        virtualinvoke $r4.<java.util.HashSet: boolean add(java.lang.Object)>("un");

        virtualinvoke $r4.<java.util.HashSet: boolean add(java.lang.Object)>("deux");

        virtualinvoke $r4.<java.util.HashSet: boolean add(java.lang.Object)>("trois");

        r3 = virtualinvoke r1.<org.apache.commons.collections4.map.MultiValueMap: java.util.Collection values()>();

        $i0 = interfaceinvoke r3.<java.util.Collection: int size()>();

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(int,int)>(6, $i0);

        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>(java.util.Collection)>(r3);

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(java.lang.Object,java.lang.Object)>($r4, $r5);

        return;
    }

    private org.apache.commons.collections4.map.MultiValueMap createTestMap()
    {
        org.apache.commons.collections4.map.MultiValueMapTest r0;
        org.apache.commons.collections4.map.MultiValueMap $r1;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMapTest;

        $r1 = specialinvoke r0.<org.apache.commons.collections4.map.MultiValueMapTest: org.apache.commons.collections4.map.MultiValueMap createTestMap(java.lang.Class)>(class "Ljava/util/ArrayList;");

        return $r1;
    }

    private org.apache.commons.collections4.map.MultiValueMap createTestMap(java.lang.Class)
    {
        org.apache.commons.collections4.map.MultiValueMapTest r0;
        java.lang.Class r1;
        org.apache.commons.collections4.map.MultiValueMap r2;
        java.util.HashMap $r3;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMapTest;

        r1 := @parameter0: java.lang.Class;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r2 = staticinvoke <org.apache.commons.collections4.map.MultiValueMap: org.apache.commons.collections4.map.MultiValueMap multiValueMap(java.util.Map,java.lang.Class)>($r3, r1);

        virtualinvoke r2.<org.apache.commons.collections4.map.MultiValueMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("one", "uno");

        virtualinvoke r2.<org.apache.commons.collections4.map.MultiValueMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("one", "un");

        virtualinvoke r2.<org.apache.commons.collections4.map.MultiValueMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("two", "dos");

        virtualinvoke r2.<org.apache.commons.collections4.map.MultiValueMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("two", "deux");

        virtualinvoke r2.<org.apache.commons.collections4.map.MultiValueMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("three", "tres");

        virtualinvoke r2.<org.apache.commons.collections4.map.MultiValueMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("three", "trois");

        return r2;
    }

    public void testKeyedIterator()
    {
        org.apache.commons.collections4.map.MultiValueMapTest r0;
        org.apache.commons.collections4.map.MultiValueMap r1;
        java.util.ArrayList $r4, $r7;
        java.util.Iterator $r5;
        java.util.List $r6, $r9;
        java.lang.String[] $r8;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMapTest;

        r1 = specialinvoke r0.<org.apache.commons.collections4.map.MultiValueMapTest: org.apache.commons.collections4.map.MultiValueMap createTestMap()>();

        $r4 = new java.util.ArrayList;

        $r5 = virtualinvoke r1.<org.apache.commons.collections4.map.MultiValueMap: java.util.Iterator iterator(java.lang.Object)>("one");

        $r6 = staticinvoke <org.apache.commons.collections4.IteratorUtils: java.util.List toList(java.util.Iterator)>($r5);

        specialinvoke $r4.<java.util.ArrayList: void <init>(java.util.Collection)>($r6);

        $r7 = new java.util.ArrayList;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "uno";

        $r8[1] = "un";

        $r9 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r8);

        specialinvoke $r7.<java.util.ArrayList: void <init>(java.util.Collection)>($r9);

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(java.lang.Object,java.lang.Object)>($r7, $r4);

        return;
    }

    public void testRemoveAllViaIterator()
    {
        org.apache.commons.collections4.map.MultiValueMapTest r0;
        org.apache.commons.collections4.map.MultiValueMap r1;
        java.util.Iterator r2;
        java.util.Collection $r3;
        boolean $z0, $z1;
        java.lang.Object $r4;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMapTest;

        r1 = specialinvoke r0.<org.apache.commons.collections4.map.MultiValueMapTest: org.apache.commons.collections4.map.MultiValueMap createTestMap()>();

        $r3 = virtualinvoke r1.<org.apache.commons.collections4.map.MultiValueMap: java.util.Collection values()>();

        r2 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke r2.<java.util.Iterator: void remove()>();

        goto label1;

     label2:
        $r4 = virtualinvoke r1.<org.apache.commons.collections4.map.MultiValueMap: java.lang.Object get(java.lang.Object)>("one");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertNull(java.lang.Object)>($r4);

        $z1 = virtualinvoke r1.<org.apache.commons.collections4.map.MultiValueMap: boolean isEmpty()>();

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertTrue(boolean)>($z1);

        return;
    }

    public void testRemoveAllViaKeyedIterator()
    {
        org.apache.commons.collections4.map.MultiValueMapTest r0;
        org.apache.commons.collections4.map.MultiValueMap r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        int $i0;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMapTest;

        r1 = specialinvoke r0.<org.apache.commons.collections4.map.MultiValueMapTest: org.apache.commons.collections4.map.MultiValueMap createTestMap()>();

        r2 = virtualinvoke r1.<org.apache.commons.collections4.map.MultiValueMap: java.util.Iterator iterator(java.lang.Object)>("one");

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke r2.<java.util.Iterator: void remove()>();

        goto label1;

     label2:
        $r3 = virtualinvoke r1.<org.apache.commons.collections4.map.MultiValueMap: java.lang.Object get(java.lang.Object)>("one");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertNull(java.lang.Object)>($r3);

        $i0 = virtualinvoke r1.<org.apache.commons.collections4.map.MultiValueMap: int totalSize()>();

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(int,int)>(4, $i0);

        return;
    }

    public void testIterator()
    {
        org.apache.commons.collections4.map.MultiValueMapTest r0;
        org.apache.commons.collections4.map.MultiValueMap r1;
        java.util.Iterator r3;
        java.util.Map$Entry r4;
        java.util.ArrayList $r5;
        java.util.Collection $r6;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Object $r7, $r8, $r9, $r10, $r11;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMapTest;

        r1 = specialinvoke r0.<org.apache.commons.collections4.map.MultiValueMapTest: org.apache.commons.collections4.map.MultiValueMap createTestMap()>();

        $r5 = new java.util.ArrayList;

        $r6 = virtualinvoke r1.<org.apache.commons.collections4.map.MultiValueMap: java.util.Collection values()>();

        specialinvoke $r5.<java.util.ArrayList: void <init>(java.util.Collection)>($r6);

        r3 = virtualinvoke r1.<org.apache.commons.collections4.map.MultiValueMap: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r7;

        $r8 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z2 = virtualinvoke r1.<org.apache.commons.collections4.map.MultiValueMap: boolean containsValue(java.lang.Object,java.lang.Object)>($r8, $r9);

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertTrue(boolean)>($z2);

        $r10 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z3 = interfaceinvoke $r5.<java.util.Collection: boolean contains(java.lang.Object)>($r10);

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertTrue(boolean)>($z3);

        $r11 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z4 = interfaceinvoke $r5.<java.util.Collection: boolean remove(java.lang.Object)>($r11);

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertTrue(boolean)>($z4);

        goto label1;

     label2:
        $z1 = interfaceinvoke $r5.<java.util.Collection: boolean isEmpty()>();

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertTrue(boolean)>($z1);

        return;
    }

    public void testRemoveAllViaEntryIterator()
    {
        org.apache.commons.collections4.map.MultiValueMapTest r0;
        org.apache.commons.collections4.map.MultiValueMap r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        int $i0;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMapTest;

        r1 = specialinvoke r0.<org.apache.commons.collections4.map.MultiValueMapTest: org.apache.commons.collections4.map.MultiValueMap createTestMap()>();

        r2 = virtualinvoke r1.<org.apache.commons.collections4.map.MultiValueMap: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke r2.<java.util.Iterator: void remove()>();

        goto label1;

     label2:
        $r3 = virtualinvoke r1.<org.apache.commons.collections4.map.MultiValueMap: java.lang.Object get(java.lang.Object)>("one");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertNull(java.lang.Object)>($r3);

        $i0 = virtualinvoke r1.<org.apache.commons.collections4.map.MultiValueMap: int totalSize()>();

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(int,int)>(0, $i0);

        return;
    }

    public void testTotalSizeA()
    {
        org.apache.commons.collections4.map.MultiValueMapTest r0;
        org.apache.commons.collections4.map.MultiValueMap $r1;
        int $i0;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMapTest;

        $r1 = specialinvoke r0.<org.apache.commons.collections4.map.MultiValueMapTest: org.apache.commons.collections4.map.MultiValueMap createTestMap()>();

        $i0 = virtualinvoke $r1.<org.apache.commons.collections4.map.MultiValueMap: int totalSize()>();

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(int,int)>(6, $i0);

        return;
    }

    public void testMapEquals()
    {
        org.apache.commons.collections4.map.MultiValueMapTest r0;
        java.lang.Integer r2;
        org.apache.commons.collections4.map.MultiValueMap $r4, $r6;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMapTest;

        $r4 = new org.apache.commons.collections4.map.MultiValueMap;

        specialinvoke $r4.<org.apache.commons.collections4.map.MultiValueMap: void <init>()>();

        r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke $r4.<org.apache.commons.collections4.map.MultiValueMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("One", r2);

        virtualinvoke $r4.<org.apache.commons.collections4.map.MultiValueMap: boolean removeMapping(java.lang.Object,java.lang.Object)>("One", r2);

        $r6 = new org.apache.commons.collections4.map.MultiValueMap;

        specialinvoke $r6.<org.apache.commons.collections4.map.MultiValueMap: void <init>()>();

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(java.lang.Object,java.lang.Object)>($r6, $r4);

        return;
    }

    public void testGetCollection()
    {
        org.apache.commons.collections4.map.MultiValueMapTest r0;
        org.apache.commons.collections4.map.MultiValueMap $r2;
        java.lang.Object $r4;
        java.util.Collection $r5;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMapTest;

        $r2 = new org.apache.commons.collections4.map.MultiValueMap;

        specialinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: void <init>()>();

        virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("A", "AA");

        $r4 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: java.lang.Object get(java.lang.Object)>("A");

        $r5 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: java.util.Collection getCollection(java.lang.Object)>("A");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertSame(java.lang.Object,java.lang.Object)>($r4, $r5);

        return;
    }

    public void testTotalSize()
    {
        org.apache.commons.collections4.map.MultiValueMapTest r0;
        org.apache.commons.collections4.map.MultiValueMap $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMapTest;

        $r2 = new org.apache.commons.collections4.map.MultiValueMap;

        specialinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: void <init>()>();

        $i0 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: int totalSize()>();

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(int,int)>(0, $i0);

        virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("A", "AA");

        $i1 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: int totalSize()>();

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(int,int)>(1, $i1);

        virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("B", "BA");

        $i2 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: int totalSize()>();

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(int,int)>(2, $i2);

        virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("B", "BB");

        $i3 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: int totalSize()>();

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(int,int)>(3, $i3);

        virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("B", "BC");

        $i4 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: int totalSize()>();

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(int,int)>(4, $i4);

        virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: java.lang.Object remove(java.lang.Object)>("A");

        $i5 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: int totalSize()>();

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(int,int)>(3, $i5);

        virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: boolean removeMapping(java.lang.Object,java.lang.Object)>("B", "BC");

        $i6 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: int totalSize()>();

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(int,int)>(2, $i6);

        return;
    }

    public void testSize()
    {
        org.apache.commons.collections4.map.MultiValueMapTest r0;
        org.apache.commons.collections4.map.MultiValueMap $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMapTest;

        $r2 = new org.apache.commons.collections4.map.MultiValueMap;

        specialinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: void <init>()>();

        $i0 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: int size()>();

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(int,int)>(0, $i0);

        virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("A", "AA");

        $i1 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: int size()>();

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(int,int)>(1, $i1);

        virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("B", "BA");

        $i2 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: int size()>();

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(int,int)>(2, $i2);

        virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("B", "BB");

        $i3 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: int size()>();

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(int,int)>(2, $i3);

        virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("B", "BC");

        $i4 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: int size()>();

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(int,int)>(2, $i4);

        virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: java.lang.Object remove(java.lang.Object)>("A");

        $i5 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: int size()>();

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(int,int)>(1, $i5);

        virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: boolean removeMapping(java.lang.Object,java.lang.Object)>("B", "BC");

        $i6 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: int size()>();

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(int,int)>(1, $i6);

        return;
    }

    public void testSize_Key()
    {
        org.apache.commons.collections4.map.MultiValueMapTest r0;
        org.apache.commons.collections4.map.MultiValueMap $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMapTest;

        $r2 = new org.apache.commons.collections4.map.MultiValueMap;

        specialinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: void <init>()>();

        $i0 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: int size(java.lang.Object)>("A");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(int,int)>(0, $i0);

        $i1 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: int size(java.lang.Object)>("B");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(int,int)>(0, $i1);

        virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("A", "AA");

        $i2 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: int size(java.lang.Object)>("A");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(int,int)>(1, $i2);

        $i3 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: int size(java.lang.Object)>("B");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(int,int)>(0, $i3);

        virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("B", "BA");

        $i4 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: int size(java.lang.Object)>("A");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(int,int)>(1, $i4);

        $i5 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: int size(java.lang.Object)>("B");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(int,int)>(1, $i5);

        virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("B", "BB");

        $i6 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: int size(java.lang.Object)>("A");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(int,int)>(1, $i6);

        $i7 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: int size(java.lang.Object)>("B");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(int,int)>(2, $i7);

        virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("B", "BC");

        $i8 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: int size(java.lang.Object)>("A");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(int,int)>(1, $i8);

        $i9 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: int size(java.lang.Object)>("B");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(int,int)>(3, $i9);

        virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: java.lang.Object remove(java.lang.Object)>("A");

        $i10 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: int size(java.lang.Object)>("A");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(int,int)>(0, $i10);

        $i11 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: int size(java.lang.Object)>("B");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(int,int)>(3, $i11);

        virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: boolean removeMapping(java.lang.Object,java.lang.Object)>("B", "BC");

        $i12 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: int size(java.lang.Object)>("A");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(int,int)>(0, $i12);

        $i13 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: int size(java.lang.Object)>("B");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(int,int)>(2, $i13);

        return;
    }

    public void testIterator_Key()
    {
        org.apache.commons.collections4.map.MultiValueMapTest r0;
        java.util.Iterator r2, $r4;
        org.apache.commons.collections4.map.MultiValueMap $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMapTest;

        $r3 = new org.apache.commons.collections4.map.MultiValueMap;

        specialinvoke $r3.<org.apache.commons.collections4.map.MultiValueMap: void <init>()>();

        $r4 = virtualinvoke $r3.<org.apache.commons.collections4.map.MultiValueMap: java.util.Iterator iterator(java.lang.Object)>("A");

        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(boolean,boolean)>(0, $z0);

        virtualinvoke $r3.<org.apache.commons.collections4.map.MultiValueMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("A", "AA");

        r2 = virtualinvoke $r3.<org.apache.commons.collections4.map.MultiValueMap: java.util.Iterator iterator(java.lang.Object)>("A");

        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(boolean,boolean)>(1, $z1);

        interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(boolean,boolean)>(0, $z2);

        return;
    }

    public void testContainsValue_Key()
    {
        org.apache.commons.collections4.map.MultiValueMapTest r0;
        org.apache.commons.collections4.map.MultiValueMap $r2;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMapTest;

        $r2 = new org.apache.commons.collections4.map.MultiValueMap;

        specialinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: void <init>()>();

        $z0 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: boolean containsValue(java.lang.Object,java.lang.Object)>("A", "AA");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(boolean,boolean)>(0, $z0);

        $z1 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: boolean containsValue(java.lang.Object,java.lang.Object)>("B", "BB");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(boolean,boolean)>(0, $z1);

        virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("A", "AA");

        $z2 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: boolean containsValue(java.lang.Object,java.lang.Object)>("A", "AA");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(boolean,boolean)>(1, $z2);

        $z3 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: boolean containsValue(java.lang.Object,java.lang.Object)>("A", "AB");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(boolean,boolean)>(0, $z3);

        return;
    }

    public void testPutWithList()
    {
        org.apache.commons.collections4.map.MultiValueMapTest r0;
        org.apache.commons.collections4.map.MultiValueMap r1;
        java.util.HashMap $r2;
        java.lang.Object $r3, $r4;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMapTest;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r1 = staticinvoke <org.apache.commons.collections4.map.MultiValueMap: org.apache.commons.collections4.map.MultiValueMap multiValueMap(java.util.Map,java.lang.Class)>($r2, class "Ljava/util/ArrayList;");

        $r3 = virtualinvoke r1.<org.apache.commons.collections4.map.MultiValueMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("A", "a");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(java.lang.Object,java.lang.Object)>("a", $r3);

        $r4 = virtualinvoke r1.<org.apache.commons.collections4.map.MultiValueMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("A", "b");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(java.lang.Object,java.lang.Object)>("b", $r4);

        $i0 = virtualinvoke r1.<org.apache.commons.collections4.map.MultiValueMap: int size()>();

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(int,int)>(1, $i0);

        $i1 = virtualinvoke r1.<org.apache.commons.collections4.map.MultiValueMap: int size(java.lang.Object)>("A");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(int,int)>(2, $i1);

        $i2 = virtualinvoke r1.<org.apache.commons.collections4.map.MultiValueMap: int totalSize()>();

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(int,int)>(2, $i2);

        return;
    }

    public void testPutWithSet()
    {
        org.apache.commons.collections4.map.MultiValueMapTest r0;
        org.apache.commons.collections4.map.MultiValueMap r1;
        java.util.HashMap $r2;
        java.lang.Object $r3, $r4, $r5;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMapTest;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r1 = staticinvoke <org.apache.commons.collections4.map.MultiValueMap: org.apache.commons.collections4.map.MultiValueMap multiValueMap(java.util.Map,java.lang.Class)>($r2, class "Ljava/util/HashSet;");

        $r3 = virtualinvoke r1.<org.apache.commons.collections4.map.MultiValueMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("A", "a");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(java.lang.Object,java.lang.Object)>("a", $r3);

        $r4 = virtualinvoke r1.<org.apache.commons.collections4.map.MultiValueMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("A", "b");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(java.lang.Object,java.lang.Object)>("b", $r4);

        $r5 = virtualinvoke r1.<org.apache.commons.collections4.map.MultiValueMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("A", "a");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(java.lang.Object,java.lang.Object)>(null, $r5);

        $i0 = virtualinvoke r1.<org.apache.commons.collections4.map.MultiValueMap: int size()>();

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(int,int)>(1, $i0);

        $i1 = virtualinvoke r1.<org.apache.commons.collections4.map.MultiValueMap: int size(java.lang.Object)>("A");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(int,int)>(2, $i1);

        $i2 = virtualinvoke r1.<org.apache.commons.collections4.map.MultiValueMap: int totalSize()>();

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(int,int)>(2, $i2);

        return;
    }

    public void testPutAll_Map1()
    {
        org.apache.commons.collections4.map.MultiValueMapTest r0;
        org.apache.commons.collections4.map.MultiValueMap $r3, $r6;
        int $i0, $i1, $i2, $i3;
        java.util.Collection $r9, $r10;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMapTest;

        $r3 = new org.apache.commons.collections4.map.MultiValueMap;

        specialinvoke $r3.<org.apache.commons.collections4.map.MultiValueMap: void <init>()>();

        interfaceinvoke $r3.<org.apache.commons.collections4.MultiMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("key", "object1");

        interfaceinvoke $r3.<org.apache.commons.collections4.MultiMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("key", "object2");

        $r6 = new org.apache.commons.collections4.map.MultiValueMap;

        specialinvoke $r6.<org.apache.commons.collections4.map.MultiValueMap: void <init>()>();

        virtualinvoke $r6.<org.apache.commons.collections4.map.MultiValueMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("keyA", "objectA");

        virtualinvoke $r6.<org.apache.commons.collections4.map.MultiValueMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("key", "object0");

        virtualinvoke $r6.<org.apache.commons.collections4.map.MultiValueMap: void putAll(java.util.Map)>($r3);

        $i0 = virtualinvoke $r6.<org.apache.commons.collections4.map.MultiValueMap: int size()>();

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(int,int)>(2, $i0);

        $i1 = virtualinvoke $r6.<org.apache.commons.collections4.map.MultiValueMap: int totalSize()>();

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(int,int)>(4, $i1);

        $r9 = virtualinvoke $r6.<org.apache.commons.collections4.map.MultiValueMap: java.util.Collection getCollection(java.lang.Object)>("keyA");

        $i2 = interfaceinvoke $r9.<java.util.Collection: int size()>();

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(int,int)>(1, $i2);

        $r10 = virtualinvoke $r6.<org.apache.commons.collections4.map.MultiValueMap: java.util.Collection getCollection(java.lang.Object)>("key");

        $i3 = interfaceinvoke $r10.<java.util.Collection: int size()>();

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(int,int)>(3, $i3);

        $z0 = virtualinvoke $r6.<org.apache.commons.collections4.map.MultiValueMap: boolean containsValue(java.lang.Object)>("objectA");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(boolean,boolean)>(1, $z0);

        $z1 = virtualinvoke $r6.<org.apache.commons.collections4.map.MultiValueMap: boolean containsValue(java.lang.Object)>("object0");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(boolean,boolean)>(1, $z1);

        $z2 = virtualinvoke $r6.<org.apache.commons.collections4.map.MultiValueMap: boolean containsValue(java.lang.Object)>("object1");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(boolean,boolean)>(1, $z2);

        $z3 = virtualinvoke $r6.<org.apache.commons.collections4.map.MultiValueMap: boolean containsValue(java.lang.Object)>("object2");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(boolean,boolean)>(1, $z3);

        return;
    }

    public void testPutAll_Map2()
    {
        org.apache.commons.collections4.map.MultiValueMapTest r0;
        java.util.HashMap $r3;
        org.apache.commons.collections4.map.MultiValueMap $r6;
        int $i0, $i1, $i2, $i3, $i4;
        java.util.Collection $r9, $r10, $r11;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMapTest;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("keyX", "object1");

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("keyY", "object2");

        $r6 = new org.apache.commons.collections4.map.MultiValueMap;

        specialinvoke $r6.<org.apache.commons.collections4.map.MultiValueMap: void <init>()>();

        virtualinvoke $r6.<org.apache.commons.collections4.map.MultiValueMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("keyA", "objectA");

        virtualinvoke $r6.<org.apache.commons.collections4.map.MultiValueMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("keyX", "object0");

        virtualinvoke $r6.<org.apache.commons.collections4.map.MultiValueMap: void putAll(java.util.Map)>($r3);

        $i0 = virtualinvoke $r6.<org.apache.commons.collections4.map.MultiValueMap: int size()>();

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(int,int)>(3, $i0);

        $i1 = virtualinvoke $r6.<org.apache.commons.collections4.map.MultiValueMap: int totalSize()>();

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(int,int)>(4, $i1);

        $r9 = virtualinvoke $r6.<org.apache.commons.collections4.map.MultiValueMap: java.util.Collection getCollection(java.lang.Object)>("keyA");

        $i2 = interfaceinvoke $r9.<java.util.Collection: int size()>();

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(int,int)>(1, $i2);

        $r10 = virtualinvoke $r6.<org.apache.commons.collections4.map.MultiValueMap: java.util.Collection getCollection(java.lang.Object)>("keyX");

        $i3 = interfaceinvoke $r10.<java.util.Collection: int size()>();

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(int,int)>(2, $i3);

        $r11 = virtualinvoke $r6.<org.apache.commons.collections4.map.MultiValueMap: java.util.Collection getCollection(java.lang.Object)>("keyY");

        $i4 = interfaceinvoke $r11.<java.util.Collection: int size()>();

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(int,int)>(1, $i4);

        $z0 = virtualinvoke $r6.<org.apache.commons.collections4.map.MultiValueMap: boolean containsValue(java.lang.Object)>("objectA");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(boolean,boolean)>(1, $z0);

        $z1 = virtualinvoke $r6.<org.apache.commons.collections4.map.MultiValueMap: boolean containsValue(java.lang.Object)>("object0");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(boolean,boolean)>(1, $z1);

        $z2 = virtualinvoke $r6.<org.apache.commons.collections4.map.MultiValueMap: boolean containsValue(java.lang.Object)>("object1");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(boolean,boolean)>(1, $z2);

        $z3 = virtualinvoke $r6.<org.apache.commons.collections4.map.MultiValueMap: boolean containsValue(java.lang.Object)>("object2");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(boolean,boolean)>(1, $z3);

        return;
    }

    public void testPutAll_KeyCollection()
    {
        org.apache.commons.collections4.map.MultiValueMapTest r0;
        org.apache.commons.collections4.map.MultiValueMap $r2;
        java.lang.String[] $r3, $r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16;
        int $i0, $i1, $i2, $i3;
        java.util.ArrayList $r4;
        java.util.List r6, r7;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMapTest;

        $r2 = new org.apache.commons.collections4.map.MultiValueMap;

        specialinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: void <init>()>();

        $r3 = newarray (java.lang.String)[3];

        $r3[0] = "X";

        $r3[1] = "Y";

        $r3[2] = "Z";

        r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        $z0 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: boolean putAll(java.lang.Object,java.util.Collection)>("A", r6);

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(boolean,boolean)>(1, $z0);

        $i0 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: int size(java.lang.Object)>("A");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(int,int)>(3, $i0);

        $z1 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: boolean containsValue(java.lang.Object,java.lang.Object)>("A", "X");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(boolean,boolean)>(1, $z1);

        $z2 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: boolean containsValue(java.lang.Object,java.lang.Object)>("A", "Y");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(boolean,boolean)>(1, $z2);

        $z3 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: boolean containsValue(java.lang.Object,java.lang.Object)>("A", "Z");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(boolean,boolean)>(1, $z3);

        $z4 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: boolean putAll(java.lang.Object,java.util.Collection)>("A", null);

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(boolean,boolean)>(0, $z4);

        $i1 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: int size(java.lang.Object)>("A");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(int,int)>(3, $i1);

        $z5 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: boolean containsValue(java.lang.Object,java.lang.Object)>("A", "X");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(boolean,boolean)>(1, $z5);

        $z6 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: boolean containsValue(java.lang.Object,java.lang.Object)>("A", "Y");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(boolean,boolean)>(1, $z6);

        $z7 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: boolean containsValue(java.lang.Object,java.lang.Object)>("A", "Z");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(boolean,boolean)>(1, $z7);

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $z8 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: boolean putAll(java.lang.Object,java.util.Collection)>("A", $r4);

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(boolean,boolean)>(0, $z8);

        $i2 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: int size(java.lang.Object)>("A");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(int,int)>(3, $i2);

        $z9 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: boolean containsValue(java.lang.Object,java.lang.Object)>("A", "X");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(boolean,boolean)>(1, $z9);

        $z10 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: boolean containsValue(java.lang.Object,java.lang.Object)>("A", "Y");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(boolean,boolean)>(1, $z10);

        $z11 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: boolean containsValue(java.lang.Object,java.lang.Object)>("A", "Z");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(boolean,boolean)>(1, $z11);

        $r5 = newarray (java.lang.String)[1];

        $r5[0] = "M";

        r7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5);

        $z12 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: boolean putAll(java.lang.Object,java.util.Collection)>("A", r7);

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(boolean,boolean)>(1, $z12);

        $i3 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: int size(java.lang.Object)>("A");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(int,int)>(4, $i3);

        $z13 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: boolean containsValue(java.lang.Object,java.lang.Object)>("A", "X");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(boolean,boolean)>(1, $z13);

        $z14 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: boolean containsValue(java.lang.Object,java.lang.Object)>("A", "Y");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(boolean,boolean)>(1, $z14);

        $z15 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: boolean containsValue(java.lang.Object,java.lang.Object)>("A", "Z");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(boolean,boolean)>(1, $z15);

        $z16 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: boolean containsValue(java.lang.Object,java.lang.Object)>("A", "M");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(boolean,boolean)>(1, $z16);

        return;
    }

    public void testRemove_KeyItem()
    {
        org.apache.commons.collections4.map.MultiValueMapTest r0;
        org.apache.commons.collections4.map.MultiValueMap $r2, $r6;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMapTest;

        $r2 = new org.apache.commons.collections4.map.MultiValueMap;

        specialinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: void <init>()>();

        virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("A", "AA");

        virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("A", "AB");

        virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("A", "AC");

        $z0 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: boolean removeMapping(java.lang.Object,java.lang.Object)>("C", "CA");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(boolean,boolean)>(0, $z0);

        $z1 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: boolean removeMapping(java.lang.Object,java.lang.Object)>("A", "AD");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(boolean,boolean)>(0, $z1);

        $z2 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: boolean removeMapping(java.lang.Object,java.lang.Object)>("A", "AC");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(boolean,boolean)>(1, $z2);

        $z3 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: boolean removeMapping(java.lang.Object,java.lang.Object)>("A", "AB");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(boolean,boolean)>(1, $z3);

        $z4 = virtualinvoke $r2.<org.apache.commons.collections4.map.MultiValueMap: boolean removeMapping(java.lang.Object,java.lang.Object)>("A", "AA");

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(boolean,boolean)>(1, $z4);

        $r6 = new org.apache.commons.collections4.map.MultiValueMap;

        specialinvoke $r6.<org.apache.commons.collections4.map.MultiValueMap: void <init>()>();

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(java.lang.Object,java.lang.Object)>($r6, $r2);

        return;
    }

    public void testUnsafeDeSerialization() throws java.lang.Exception
    {
        org.apache.commons.collections4.map.MultiValueMapTest r0;
        org.apache.commons.collections4.map.MultiValueMap r1, r2;
        java.util.HashMap $r4, $r5;
        java.lang.UnsupportedOperationException $r6;
        byte[] r7, r9;
        java.lang.Object r8;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMapTest;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r1 = staticinvoke <org.apache.commons.collections4.map.MultiValueMap: org.apache.commons.collections4.map.MultiValueMap multiValueMap(java.util.Map,java.lang.Class)>($r4, class "Ljava/util/ArrayList;");

        r7 = specialinvoke r0.<org.apache.commons.collections4.map.MultiValueMapTest: byte[] serialize(java.lang.Object)>(r1);

        r8 = specialinvoke r0.<org.apache.commons.collections4.map.MultiValueMapTest: java.lang.Object deserialize(byte[])>(r7);

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(java.lang.Object,java.lang.Object)>(r1, r8);

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r2 = staticinvoke <org.apache.commons.collections4.map.MultiValueMap: org.apache.commons.collections4.map.MultiValueMap multiValueMap(java.util.Map,java.lang.Class)>($r5, class "Ljava/lang/String;");

        r9 = specialinvoke r0.<org.apache.commons.collections4.map.MultiValueMapTest: byte[] serialize(java.lang.Object)>(r2);

     label1:
        specialinvoke r0.<org.apache.commons.collections4.map.MultiValueMapTest: java.lang.Object deserialize(byte[])>(r9);

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void fail(java.lang.String)>("unsafe clazz accepted when de-serializing MultiValueMap");

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        return;

        catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
    }

    private byte[] serialize(java.lang.Object) throws java.io.IOException
    {
        org.apache.commons.collections4.map.MultiValueMapTest r0;
        java.lang.Object r1;
        java.io.ByteArrayOutputStream $r4;
        java.io.ObjectOutputStream $r5;
        byte[] $r6;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMapTest;

        r1 := @parameter0: java.lang.Object;

        $r4 = new java.io.ByteArrayOutputStream;

        specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>()>();

        $r5 = new java.io.ObjectOutputStream;

        specialinvoke $r5.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>($r4);

        virtualinvoke $r5.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(r1);

        virtualinvoke $r5.<java.io.ObjectOutputStream: void close()>();

        $r6 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r6;
    }

    private java.lang.Object deserialize(byte[]) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.commons.collections4.map.MultiValueMapTest r0;
        byte[] r1;
        java.io.ByteArrayInputStream $r4;
        java.io.ObjectInputStream $r5;
        java.lang.Object $r6;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMapTest;

        r1 := @parameter0: byte[];

        $r4 = new java.io.ByteArrayInputStream;

        specialinvoke $r4.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1);

        $r5 = new java.io.ObjectInputStream;

        specialinvoke $r5.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>($r4);

        $r6 = virtualinvoke $r5.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        return $r6;
    }

    public java.lang.String getCompatibilityVersion()
    {
        org.apache.commons.collections4.map.MultiValueMapTest r0;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMapTest;

        return "4";
    }

    public java.lang.Object makeObject()
    {
        org.apache.commons.collections4.map.MultiValueMapTest r0;
        java.util.Map r1;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMapTest;

        r1 = specialinvoke r0.<org.apache.commons.collections4.map.MultiValueMapTest: java.util.Map makeEmptyMap()>();

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("a", "1");

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("a", "1b");

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("b", "2");

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("c", "3");

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("c", "3b");

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("d", "4");

        return r1;
    }

    private java.util.Map makeEmptyMap()
    {
        org.apache.commons.collections4.map.MultiValueMapTest r0;
        org.apache.commons.collections4.map.MultiValueMap $r1;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMapTest;

        $r1 = new org.apache.commons.collections4.map.MultiValueMap;

        specialinvoke $r1.<org.apache.commons.collections4.map.MultiValueMap: void <init>()>();

        return $r1;
    }

    public void testEmptyMapCompatibility() throws java.lang.Exception
    {
        org.apache.commons.collections4.map.MultiValueMapTest r0;
        java.util.Map r1, r2;
        java.lang.String $r3;
        java.lang.Object $r4;
        int $i0;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMapTest;

        r1 = specialinvoke r0.<org.apache.commons.collections4.map.MultiValueMapTest: java.util.Map makeEmptyMap()>();

        $r3 = virtualinvoke r0.<org.apache.commons.collections4.map.MultiValueMapTest: java.lang.String getCanonicalEmptyCollectionName(java.lang.Object)>(r1);

        $r4 = virtualinvoke r0.<org.apache.commons.collections4.map.MultiValueMapTest: java.lang.Object readExternalFormFromDisk(java.lang.String)>($r3);

        r2 = (java.util.Map) $r4;

        $i0 = interfaceinvoke r2.<java.util.Map: int size()>();

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(java.lang.String,int,int)>("Map is empty", 0, $i0);

        return;
    }

    public void testFullMapCompatibility() throws java.lang.Exception
    {
        org.apache.commons.collections4.map.MultiValueMapTest r0;
        java.util.Map r1, r2;
        java.util.Iterator r3;
        java.lang.Object r4, $r5, $r7, $r9, $r10;
        java.lang.String $r6;
        int $i0, $i1, $i2;
        java.util.Set $r8;
        boolean $z0;

        r0 := @this: org.apache.commons.collections4.map.MultiValueMapTest;

        $r5 = virtualinvoke r0.<org.apache.commons.collections4.map.MultiValueMapTest: java.lang.Object makeObject()>();

        r1 = (java.util.Map) $r5;

        $r6 = virtualinvoke r0.<org.apache.commons.collections4.map.MultiValueMapTest: java.lang.String getCanonicalFullCollectionName(java.lang.Object)>(r1);

        $r7 = virtualinvoke r0.<org.apache.commons.collections4.map.MultiValueMapTest: java.lang.Object readExternalFormFromDisk(java.lang.String)>($r6);

        r2 = (java.util.Map) $r7;

        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        $i1 = interfaceinvoke r2.<java.util.Map: int size()>();

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(java.lang.String,int,int)>("Map is the right size", $i0, $i1);

        $r8 = interfaceinvoke r1.<java.util.Map: java.util.Set keySet()>();

        r3 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r9 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        $r10 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Map had inequal elements", $r9, $r10);

        interfaceinvoke r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r4);

        goto label1;

     label2:
        $i2 = interfaceinvoke r2.<java.util.Map: int size()>();

        staticinvoke <org.apache.commons.collections4.map.MultiValueMapTest: void assertEquals(java.lang.String,int,int)>("Map had extra values", 0, $i2);

        return;
    }
}
