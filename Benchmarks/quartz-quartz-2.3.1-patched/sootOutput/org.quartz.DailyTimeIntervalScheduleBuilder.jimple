public class org.quartz.DailyTimeIntervalScheduleBuilder extends org.quartz.ScheduleBuilder
{
    private int interval;
    private org.quartz.DateBuilder$IntervalUnit intervalUnit;
    private java.util.Set daysOfWeek;
    private org.quartz.TimeOfDay startTimeOfDay;
    private org.quartz.TimeOfDay endTimeOfDay;
    private int repeatCount;
    private int misfireInstruction;
    public static final java.util.Set ALL_DAYS_OF_THE_WEEK;
    public static final java.util.Set MONDAY_THROUGH_FRIDAY;
    public static final java.util.Set SATURDAY_AND_SUNDAY;

    protected void <init>()
    {
        org.quartz.DailyTimeIntervalScheduleBuilder r0;
        org.quartz.DateBuilder$IntervalUnit $r1;

        r0 := @this: org.quartz.DailyTimeIntervalScheduleBuilder;

        specialinvoke r0.<org.quartz.ScheduleBuilder: void <init>()>();

        r0.<org.quartz.DailyTimeIntervalScheduleBuilder: int interval> = 1;

        $r1 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit MINUTE>;

        r0.<org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DateBuilder$IntervalUnit intervalUnit> = $r1;

        r0.<org.quartz.DailyTimeIntervalScheduleBuilder: int repeatCount> = -1;

        r0.<org.quartz.DailyTimeIntervalScheduleBuilder: int misfireInstruction> = 0;

        return;
    }

    public static org.quartz.DailyTimeIntervalScheduleBuilder dailyTimeIntervalSchedule()
    {
        org.quartz.DailyTimeIntervalScheduleBuilder $r0;

        $r0 = new org.quartz.DailyTimeIntervalScheduleBuilder;

        specialinvoke $r0.<org.quartz.DailyTimeIntervalScheduleBuilder: void <init>()>();

        return $r0;
    }

    public org.quartz.spi.MutableTrigger build()
    {
        org.quartz.DailyTimeIntervalScheduleBuilder r0;
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl $r2;
        int $i0, $i1, $i2;
        org.quartz.DateBuilder$IntervalUnit $r3;
        java.util.Set $r4, $r5, $r12;
        org.quartz.TimeOfDay $r6, $r7, $r8, $r9, $r10, $r11;

        r0 := @this: org.quartz.DailyTimeIntervalScheduleBuilder;

        $r2 = new org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        specialinvoke $r2.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void <init>()>();

        $i0 = r0.<org.quartz.DailyTimeIntervalScheduleBuilder: int interval>;

        virtualinvoke $r2.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatInterval(int)>($i0);

        $r3 = r0.<org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DateBuilder$IntervalUnit intervalUnit>;

        virtualinvoke $r2.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)>($r3);

        $i1 = r0.<org.quartz.DailyTimeIntervalScheduleBuilder: int misfireInstruction>;

        virtualinvoke $r2.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setMisfireInstruction(int)>($i1);

        $i2 = r0.<org.quartz.DailyTimeIntervalScheduleBuilder: int repeatCount>;

        virtualinvoke $r2.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatCount(int)>($i2);

        $r4 = r0.<org.quartz.DailyTimeIntervalScheduleBuilder: java.util.Set daysOfWeek>;

        if $r4 == null goto label1;

        $r12 = r0.<org.quartz.DailyTimeIntervalScheduleBuilder: java.util.Set daysOfWeek>;

        virtualinvoke $r2.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setDaysOfWeek(java.util.Set)>($r12);

        goto label2;

     label1:
        $r5 = <org.quartz.DailyTimeIntervalScheduleBuilder: java.util.Set ALL_DAYS_OF_THE_WEEK>;

        virtualinvoke $r2.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setDaysOfWeek(java.util.Set)>($r5);

     label2:
        $r6 = r0.<org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.TimeOfDay startTimeOfDay>;

        if $r6 == null goto label3;

        $r11 = r0.<org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.TimeOfDay startTimeOfDay>;

        virtualinvoke $r2.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setStartTimeOfDay(org.quartz.TimeOfDay)>($r11);

        goto label4;

     label3:
        $r7 = staticinvoke <org.quartz.TimeOfDay: org.quartz.TimeOfDay hourAndMinuteOfDay(int,int)>(0, 0);

        virtualinvoke $r2.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setStartTimeOfDay(org.quartz.TimeOfDay)>($r7);

     label4:
        $r8 = r0.<org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.TimeOfDay endTimeOfDay>;

        if $r8 == null goto label5;

        $r10 = r0.<org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.TimeOfDay endTimeOfDay>;

        virtualinvoke $r2.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setEndTimeOfDay(org.quartz.TimeOfDay)>($r10);

        goto label6;

     label5:
        $r9 = staticinvoke <org.quartz.TimeOfDay: org.quartz.TimeOfDay hourMinuteAndSecondOfDay(int,int,int)>(23, 59, 59);

        virtualinvoke $r2.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setEndTimeOfDay(org.quartz.TimeOfDay)>($r9);

     label6:
        return $r2;
    }

    public org.quartz.DailyTimeIntervalScheduleBuilder withInterval(int, org.quartz.DateBuilder$IntervalUnit)
    {
        org.quartz.DailyTimeIntervalScheduleBuilder r0;
        int i0;
        org.quartz.DateBuilder$IntervalUnit r1, $r3, $r4, $r5;
        java.lang.IllegalArgumentException $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.quartz.DailyTimeIntervalScheduleBuilder;

        i0 := @parameter0: int;

        r1 := @parameter1: org.quartz.DateBuilder$IntervalUnit;

        if r1 == null goto label1;

        $r3 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit SECOND>;

        $z0 = virtualinvoke r1.<org.quartz.DateBuilder$IntervalUnit: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label2;

        $r4 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit MINUTE>;

        $z1 = virtualinvoke r1.<org.quartz.DateBuilder$IntervalUnit: boolean equals(java.lang.Object)>($r4);

        if $z1 != 0 goto label2;

        $r5 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit HOUR>;

        $z2 = virtualinvoke r1.<org.quartz.DateBuilder$IntervalUnit: boolean equals(java.lang.Object)>($r5);

        if $z2 != 0 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid repeat IntervalUnit (must be SECOND, MINUTE or HOUR).");

        throw $r2;

     label2:
        specialinvoke r0.<org.quartz.DailyTimeIntervalScheduleBuilder: void validateInterval(int)>(i0);

        r0.<org.quartz.DailyTimeIntervalScheduleBuilder: int interval> = i0;

        r0.<org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DateBuilder$IntervalUnit intervalUnit> = r1;

        return r0;
    }

    public org.quartz.DailyTimeIntervalScheduleBuilder withIntervalInSeconds(int)
    {
        org.quartz.DailyTimeIntervalScheduleBuilder r0;
        int i0;
        org.quartz.DateBuilder$IntervalUnit $r1;

        r0 := @this: org.quartz.DailyTimeIntervalScheduleBuilder;

        i0 := @parameter0: int;

        $r1 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit SECOND>;

        virtualinvoke r0.<org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DailyTimeIntervalScheduleBuilder withInterval(int,org.quartz.DateBuilder$IntervalUnit)>(i0, $r1);

        return r0;
    }

    public org.quartz.DailyTimeIntervalScheduleBuilder withIntervalInMinutes(int)
    {
        org.quartz.DailyTimeIntervalScheduleBuilder r0;
        int i0;
        org.quartz.DateBuilder$IntervalUnit $r1;

        r0 := @this: org.quartz.DailyTimeIntervalScheduleBuilder;

        i0 := @parameter0: int;

        $r1 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit MINUTE>;

        virtualinvoke r0.<org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DailyTimeIntervalScheduleBuilder withInterval(int,org.quartz.DateBuilder$IntervalUnit)>(i0, $r1);

        return r0;
    }

    public org.quartz.DailyTimeIntervalScheduleBuilder withIntervalInHours(int)
    {
        org.quartz.DailyTimeIntervalScheduleBuilder r0;
        int i0;
        org.quartz.DateBuilder$IntervalUnit $r1;

        r0 := @this: org.quartz.DailyTimeIntervalScheduleBuilder;

        i0 := @parameter0: int;

        $r1 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit HOUR>;

        virtualinvoke r0.<org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DailyTimeIntervalScheduleBuilder withInterval(int,org.quartz.DateBuilder$IntervalUnit)>(i0, $r1);

        return r0;
    }

    public org.quartz.DailyTimeIntervalScheduleBuilder onDaysOfTheWeek(java.util.Set)
    {
        org.quartz.DailyTimeIntervalScheduleBuilder r0;
        java.util.Set r1, $r6;
        java.util.Iterator r2;
        java.lang.Integer r3;
        java.lang.IllegalArgumentException $r4, $r7;
        int $i0;
        boolean $z0, $z1;
        java.lang.Object $r5;
        java.lang.StringBuilder $r8, $r9, $r10;
        java.lang.String $r11;

        r0 := @this: org.quartz.DailyTimeIntervalScheduleBuilder;

        r1 := @parameter0: java.util.Set;

        if r1 == null goto label1;

        $i0 = interfaceinvoke r1.<java.util.Set: int size()>();

        if $i0 != 0 goto label2;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Days of week must be an non-empty set.");

        throw $r4;

     label2:
        r2 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Integer) $r5;

        $r6 = <org.quartz.DailyTimeIntervalScheduleBuilder: java.util.Set ALL_DAYS_OF_THE_WEEK>;

        $z1 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>(r3);

        if $z1 != 0 goto label4;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid value for day of week: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label4:
        goto label3;

     label5:
        r0.<org.quartz.DailyTimeIntervalScheduleBuilder: java.util.Set daysOfWeek> = r1;

        return r0;
    }

    public transient org.quartz.DailyTimeIntervalScheduleBuilder onDaysOfTheWeek(java.lang.Integer[])
    {
        org.quartz.DailyTimeIntervalScheduleBuilder r0, $r4;
        java.lang.Integer[] r1;
        java.util.HashSet $r3;

        r0 := @this: org.quartz.DailyTimeIntervalScheduleBuilder;

        r1 := @parameter0: java.lang.Integer[];

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>(int)>(12);

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r3, r1);

        $r4 = virtualinvoke r0.<org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DailyTimeIntervalScheduleBuilder onDaysOfTheWeek(java.util.Set)>($r3);

        return $r4;
    }

    public org.quartz.DailyTimeIntervalScheduleBuilder onMondayThroughFriday()
    {
        org.quartz.DailyTimeIntervalScheduleBuilder r0;
        java.util.Set $r1;

        r0 := @this: org.quartz.DailyTimeIntervalScheduleBuilder;

        $r1 = <org.quartz.DailyTimeIntervalScheduleBuilder: java.util.Set MONDAY_THROUGH_FRIDAY>;

        r0.<org.quartz.DailyTimeIntervalScheduleBuilder: java.util.Set daysOfWeek> = $r1;

        return r0;
    }

    public org.quartz.DailyTimeIntervalScheduleBuilder onSaturdayAndSunday()
    {
        org.quartz.DailyTimeIntervalScheduleBuilder r0;
        java.util.Set $r1;

        r0 := @this: org.quartz.DailyTimeIntervalScheduleBuilder;

        $r1 = <org.quartz.DailyTimeIntervalScheduleBuilder: java.util.Set SATURDAY_AND_SUNDAY>;

        r0.<org.quartz.DailyTimeIntervalScheduleBuilder: java.util.Set daysOfWeek> = $r1;

        return r0;
    }

    public org.quartz.DailyTimeIntervalScheduleBuilder onEveryDay()
    {
        org.quartz.DailyTimeIntervalScheduleBuilder r0;
        java.util.Set $r1;

        r0 := @this: org.quartz.DailyTimeIntervalScheduleBuilder;

        $r1 = <org.quartz.DailyTimeIntervalScheduleBuilder: java.util.Set ALL_DAYS_OF_THE_WEEK>;

        r0.<org.quartz.DailyTimeIntervalScheduleBuilder: java.util.Set daysOfWeek> = $r1;

        return r0;
    }

    public org.quartz.DailyTimeIntervalScheduleBuilder startingDailyAt(org.quartz.TimeOfDay)
    {
        org.quartz.DailyTimeIntervalScheduleBuilder r0;
        org.quartz.TimeOfDay r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.quartz.DailyTimeIntervalScheduleBuilder;

        r1 := @parameter0: org.quartz.TimeOfDay;

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Start time of day cannot be null!");

        throw $r2;

     label1:
        r0.<org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.TimeOfDay startTimeOfDay> = r1;

        return r0;
    }

    public org.quartz.DailyTimeIntervalScheduleBuilder endingDailyAt(org.quartz.TimeOfDay)
    {
        org.quartz.DailyTimeIntervalScheduleBuilder r0;
        org.quartz.TimeOfDay r1;

        r0 := @this: org.quartz.DailyTimeIntervalScheduleBuilder;

        r1 := @parameter0: org.quartz.TimeOfDay;

        r0.<org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.TimeOfDay endTimeOfDay> = r1;

        return r0;
    }

    public org.quartz.DailyTimeIntervalScheduleBuilder endingDailyAfterCount(int)
    {
        org.quartz.DailyTimeIntervalScheduleBuilder r0;
        int i0, i4, i5, i6, $i9, $i15, $i22, $i25;
        java.util.Date r2, r3, $r7, $r23;
        long l1, l2, l3, $l7, $l8, $l10, $l11, $l12, $l13, $l16, $l17, $l18, $l19, $l20, $l23, $l24, $l26, l27, $l28;
        java.util.Calendar r5;
        org.quartz.TimeOfDay $r6, $r8, $r9, $r24;
        org.quartz.DateBuilder$IntervalUnit $r10, $r11, $r12, $r13, $r14, $r15, $r19;
        java.lang.IllegalArgumentException $r16, $r25, $r32, $r39, $r40, $r41;
        java.lang.StringBuilder $r17, $r18, $r20, $r21, $r26, $r27, $r28, $r29, $r30, $r33, $r34, $r35, $r36, $r37;
        java.lang.String $r22, $r31, $r38;
        byte $b14, $b21, $b29;

        r0 := @this: org.quartz.DailyTimeIntervalScheduleBuilder;

        i0 := @parameter0: int;

        if i0 > 0 goto label1;

        $r41 = new java.lang.IllegalArgumentException;

        specialinvoke $r41.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Ending daily after count must be a positive number!");

        throw $r41;

     label1:
        $r6 = r0.<org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.TimeOfDay startTimeOfDay>;

        if $r6 != null goto label2;

        $r40 = new java.lang.IllegalArgumentException;

        specialinvoke $r40.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("You must set the startDailyAt() before calling this endingDailyAfterCount()!");

        throw $r40;

     label2:
        $r7 = new java.util.Date;

        specialinvoke $r7.<java.util.Date: void <init>()>();

        $r8 = r0.<org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.TimeOfDay startTimeOfDay>;

        r2 = virtualinvoke $r8.<org.quartz.TimeOfDay: java.util.Date getTimeOfDayForDate(java.util.Date)>($r7);

        $r9 = staticinvoke <org.quartz.TimeOfDay: org.quartz.TimeOfDay hourMinuteAndSecondOfDay(int,int,int)>(23, 59, 59);

        r3 = virtualinvoke $r9.<org.quartz.TimeOfDay: java.util.Date getTimeOfDayForDate(java.util.Date)>($r7);

        $l7 = virtualinvoke r3.<java.util.Date: long getTime()>();

        $l8 = virtualinvoke r2.<java.util.Date: long getTime()>();

        l1 = $l7 - $l8;

        $r11 = r0.<org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DateBuilder$IntervalUnit intervalUnit>;

        $r10 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit SECOND>;

        if $r11 != $r10 goto label3;

        $i25 = r0.<org.quartz.DailyTimeIntervalScheduleBuilder: int interval>;

        $l26 = (long) $i25;

        l27 = $l26 * 1000L;

        goto label6;

     label3:
        $r13 = r0.<org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DateBuilder$IntervalUnit intervalUnit>;

        $r12 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit MINUTE>;

        if $r13 != $r12 goto label4;

        $i22 = r0.<org.quartz.DailyTimeIntervalScheduleBuilder: int interval>;

        $l23 = (long) $i22;

        $l24 = $l23 * 1000L;

        l27 = $l24 * 60L;

        goto label6;

     label4:
        $r15 = r0.<org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DateBuilder$IntervalUnit intervalUnit>;

        $r14 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit HOUR>;

        if $r15 != $r14 goto label5;

        $i9 = r0.<org.quartz.DailyTimeIntervalScheduleBuilder: int interval>;

        $l10 = (long) $i9;

        $l11 = $l10 * 1000L;

        $l12 = $l11 * 60L;

        l27 = $l12 * 24L;

        goto label6;

     label5:
        $r16 = new java.lang.IllegalArgumentException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The IntervalUnit: ");

        $r19 = r0.<org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DateBuilder$IntervalUnit intervalUnit>;

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is invalid for this trigger.");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r22);

        throw $r16;

     label6:
        $l28 = l1 - l27;

        $b29 = $l28 cmp 0L;

        if $b29 > 0 goto label7;

        $r39 = new java.lang.IllegalArgumentException;

        specialinvoke $r39.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The startTimeOfDay is too late with given Interval and IntervalUnit values.");

        throw $r39;

     label7:
        l2 = l1 / l27;

        $l13 = (long) i0;

        $b14 = $l13 cmp l2;

        if $b14 <= 0 goto label8;

        $r32 = new java.lang.IllegalArgumentException;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The given count ");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is too large! The max you can set is ");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l2);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r38);

        throw $r32;

     label8:
        $i15 = i0 - 1;

        $l16 = (long) $i15;

        l3 = $l16 * l27;

        $r23 = new java.util.Date;

        $l17 = virtualinvoke r2.<java.util.Date: long getTime()>();

        $l18 = $l17 + l3;

        specialinvoke $r23.<java.util.Date: void <init>(long)>($l18);

        $l19 = virtualinvoke $r23.<java.util.Date: long getTime()>();

        $l20 = virtualinvoke r3.<java.util.Date: long getTime()>();

        $b21 = $l19 cmp $l20;

        if $b21 <= 0 goto label9;

        $r25 = new java.lang.IllegalArgumentException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The given count ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is too large! The max you can set is ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l2);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r31);

        throw $r25;

     label9:
        r5 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r5.<java.util.Calendar: void setTime(java.util.Date)>($r23);

        i4 = virtualinvoke r5.<java.util.Calendar: int get(int)>(11);

        i5 = virtualinvoke r5.<java.util.Calendar: int get(int)>(12);

        i6 = virtualinvoke r5.<java.util.Calendar: int get(int)>(13);

        $r24 = staticinvoke <org.quartz.TimeOfDay: org.quartz.TimeOfDay hourMinuteAndSecondOfDay(int,int,int)>(i4, i5, i6);

        r0.<org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.TimeOfDay endTimeOfDay> = $r24;

        return r0;
    }

    public org.quartz.DailyTimeIntervalScheduleBuilder withMisfireHandlingInstructionIgnoreMisfires()
    {
        org.quartz.DailyTimeIntervalScheduleBuilder r0;

        r0 := @this: org.quartz.DailyTimeIntervalScheduleBuilder;

        r0.<org.quartz.DailyTimeIntervalScheduleBuilder: int misfireInstruction> = -1;

        return r0;
    }

    public org.quartz.DailyTimeIntervalScheduleBuilder withMisfireHandlingInstructionDoNothing()
    {
        org.quartz.DailyTimeIntervalScheduleBuilder r0;

        r0 := @this: org.quartz.DailyTimeIntervalScheduleBuilder;

        r0.<org.quartz.DailyTimeIntervalScheduleBuilder: int misfireInstruction> = 2;

        return r0;
    }

    public org.quartz.DailyTimeIntervalScheduleBuilder withMisfireHandlingInstructionFireAndProceed()
    {
        org.quartz.DailyTimeIntervalScheduleBuilder r0;

        r0 := @this: org.quartz.DailyTimeIntervalScheduleBuilder;

        r0.<org.quartz.DailyTimeIntervalScheduleBuilder: int misfireInstruction> = 1;

        return r0;
    }

    public org.quartz.DailyTimeIntervalScheduleBuilder withRepeatCount(int)
    {
        org.quartz.DailyTimeIntervalScheduleBuilder r0;
        int i0;

        r0 := @this: org.quartz.DailyTimeIntervalScheduleBuilder;

        i0 := @parameter0: int;

        r0.<org.quartz.DailyTimeIntervalScheduleBuilder: int repeatCount> = i0;

        return r0;
    }

    private void validateInterval(int)
    {
        org.quartz.DailyTimeIntervalScheduleBuilder r0;
        int i0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: org.quartz.DailyTimeIntervalScheduleBuilder;

        i0 := @parameter0: int;

        if i0 > 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Interval must be a positive value.");

        throw $r1;

     label1:
        return;
    }

    static void <clinit>()
    {
        java.util.HashSet $r0, $r2, $r4;
        java.util.Set $r1, $r3, $r7;
        java.lang.Integer $r5, $r6, $r8, $r9;
        int i0, i1;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>(int)>(7);

        i0 = 1;

     label1:
        if i0 > 7 goto label2;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r9);

        i0 = i0 + 1;

        goto label1;

     label2:
        $r1 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r0);

        <org.quartz.DailyTimeIntervalScheduleBuilder: java.util.Set ALL_DAYS_OF_THE_WEEK> = $r1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>(int)>(5);

        i1 = 2;

     label3:
        if i1 > 6 goto label4;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r8);

        i1 = i1 + 1;

        goto label3;

     label4:
        $r3 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r2);

        <org.quartz.DailyTimeIntervalScheduleBuilder: java.util.Set MONDAY_THROUGH_FRIDAY> = $r3;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>(int)>(2);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>($r5);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(7);

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>($r6);

        $r7 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r4);

        <org.quartz.DailyTimeIntervalScheduleBuilder: java.util.Set SATURDAY_AND_SUNDAY> = $r7;

        return;
    }
}
