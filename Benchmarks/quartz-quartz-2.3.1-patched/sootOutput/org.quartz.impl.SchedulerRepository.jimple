public class org.quartz.impl.SchedulerRepository extends java.lang.Object
{
    private java.util.HashMap schedulers;
    private static org.quartz.impl.SchedulerRepository inst;

    private void <init>()
    {
        org.quartz.impl.SchedulerRepository r0;
        java.util.HashMap $r1;

        r0 := @this: org.quartz.impl.SchedulerRepository;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.quartz.impl.SchedulerRepository: java.util.HashMap schedulers> = $r1;

        return;
    }

    public static synchronized org.quartz.impl.SchedulerRepository getInstance()
    {
        org.quartz.impl.SchedulerRepository $r0, $r1, $r2;

        $r0 = <org.quartz.impl.SchedulerRepository: org.quartz.impl.SchedulerRepository inst>;

        if $r0 != null goto label1;

        $r2 = new org.quartz.impl.SchedulerRepository;

        specialinvoke $r2.<org.quartz.impl.SchedulerRepository: void <init>()>();

        <org.quartz.impl.SchedulerRepository: org.quartz.impl.SchedulerRepository inst> = $r2;

     label1:
        $r1 = <org.quartz.impl.SchedulerRepository: org.quartz.impl.SchedulerRepository inst>;

        return $r1;
    }

    public synchronized void bind(org.quartz.Scheduler) throws org.quartz.SchedulerException
    {
        org.quartz.impl.SchedulerRepository r0;
        org.quartz.Scheduler r1, $r5;
        java.util.HashMap $r2, $r6;
        java.lang.String $r3, $r7, $r12, $r15;
        java.lang.Object $r4;
        org.quartz.SchedulerException $r9;
        java.lang.StringBuilder $r10, $r11, $r13, $r14;

        r0 := @this: org.quartz.impl.SchedulerRepository;

        r1 := @parameter0: org.quartz.Scheduler;

        $r2 = r0.<org.quartz.impl.SchedulerRepository: java.util.HashMap schedulers>;

        $r3 = interfaceinvoke r1.<org.quartz.Scheduler: java.lang.String getSchedulerName()>();

        $r4 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r3);

        $r5 = (org.quartz.Scheduler) $r4;

        if $r5 == null goto label1;

        $r9 = new org.quartz.SchedulerException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Scheduler with name \'");

        $r12 = interfaceinvoke r1.<org.quartz.Scheduler: java.lang.String getSchedulerName()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' already exists.");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<org.quartz.SchedulerException: void <init>(java.lang.String)>($r15);

        throw $r9;

     label1:
        $r6 = r0.<org.quartz.impl.SchedulerRepository: java.util.HashMap schedulers>;

        $r7 = interfaceinvoke r1.<org.quartz.Scheduler: java.lang.String getSchedulerName()>();

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r1);

        return;
    }

    public synchronized boolean remove(java.lang.String)
    {
        org.quartz.impl.SchedulerRepository r0;
        java.lang.String r1;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.quartz.impl.SchedulerRepository;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.quartz.impl.SchedulerRepository: java.util.HashMap schedulers>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

        if $r3 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public synchronized org.quartz.Scheduler lookup(java.lang.String)
    {
        org.quartz.impl.SchedulerRepository r0;
        java.lang.String r1;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        org.quartz.Scheduler $r4;

        r0 := @this: org.quartz.impl.SchedulerRepository;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.quartz.impl.SchedulerRepository: java.util.HashMap schedulers>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.quartz.Scheduler) $r3;

        return $r4;
    }

    public synchronized java.util.Collection lookupAll()
    {
        org.quartz.impl.SchedulerRepository r0;
        java.util.HashMap $r1;
        java.util.Collection $r2, $r3;

        r0 := @this: org.quartz.impl.SchedulerRepository;

        $r1 = r0.<org.quartz.impl.SchedulerRepository: java.util.HashMap schedulers>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.util.Collection values()>();

        $r3 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r2);

        return $r3;
    }
}
