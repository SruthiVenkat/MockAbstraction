public class org.quartz.Quartz601Test extends junit.framework.TestCase
{

    public void <init>()
    {
        org.quartz.Quartz601Test r0;

        r0 := @this: org.quartz.Quartz601Test;

        specialinvoke r0.<junit.framework.TestCase: void <init>()>();

        return;
    }

    public void testNormal()
    {
        org.quartz.Quartz601Test r0;
        int i0;

        r0 := @this: org.quartz.Quartz601Test;

        i0 = 0;

     label1:
        if i0 >= 6 goto label2;

        specialinvoke r0.<org.quartz.Quartz601Test: java.util.Set assertParsesForField(java.lang.String,int)>("0 15 10 * * ? 2005", i0);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void testSecond()
    {
        org.quartz.Quartz601Test r0;

        r0 := @this: org.quartz.Quartz601Test;

        specialinvoke r0.<org.quartz.Quartz601Test: java.util.Set assertParsesForField(java.lang.String,int)>("58-4 5 21 ? * MON-FRI", 0);

        return;
    }

    public void testMinute()
    {
        org.quartz.Quartz601Test r0;

        r0 := @this: org.quartz.Quartz601Test;

        specialinvoke r0.<org.quartz.Quartz601Test: java.util.Set assertParsesForField(java.lang.String,int)>("0 58-4 21 ? * MON-FRI", 1);

        return;
    }

    public void testHour()
    {
        org.quartz.Quartz601Test r0;

        r0 := @this: org.quartz.Quartz601Test;

        specialinvoke r0.<org.quartz.Quartz601Test: java.util.Set assertParsesForField(java.lang.String,int)>("0 0/5 21-3 ? * MON-FRI", 2);

        return;
    }

    public void testDayOfWeekNumber()
    {
        org.quartz.Quartz601Test r0;

        r0 := @this: org.quartz.Quartz601Test;

        specialinvoke r0.<org.quartz.Quartz601Test: java.util.Set assertParsesForField(java.lang.String,int)>("58 5 21 ? * 6-2", 5);

        return;
    }

    public void testDayOfWeek()
    {
        org.quartz.Quartz601Test r0;

        r0 := @this: org.quartz.Quartz601Test;

        specialinvoke r0.<org.quartz.Quartz601Test: java.util.Set assertParsesForField(java.lang.String,int)>("58 5 21 ? * FRI-TUE", 5);

        return;
    }

    public void testDayOfMonth()
    {
        org.quartz.Quartz601Test r0;

        r0 := @this: org.quartz.Quartz601Test;

        specialinvoke r0.<org.quartz.Quartz601Test: java.util.Set assertParsesForField(java.lang.String,int)>("58 5 21 28-5 1 ?", 3);

        return;
    }

    public void testMonth()
    {
        org.quartz.Quartz601Test r0;

        r0 := @this: org.quartz.Quartz601Test;

        specialinvoke r0.<org.quartz.Quartz601Test: java.util.Set assertParsesForField(java.lang.String,int)>("58 5 21 ? 11-2 FRI", 4);

        return;
    }

    public void testAmbiguous()
    {
        org.quartz.Quartz601Test r0;

        r0 := @this: org.quartz.Quartz601Test;

        specialinvoke r0.<org.quartz.Quartz601Test: java.util.Set assertParsesForField(java.lang.String,int)>("0 0 14-6 ? * FRI-MON", 2);

        specialinvoke r0.<org.quartz.Quartz601Test: java.util.Set assertParsesForField(java.lang.String,int)>("0 0 14-6 ? * FRI-MON", 5);

        specialinvoke r0.<org.quartz.Quartz601Test: java.util.Set assertParsesForField(java.lang.String,int)>("55-3 56-2 6 ? * FRI", 0);

        specialinvoke r0.<org.quartz.Quartz601Test: java.util.Set assertParsesForField(java.lang.String,int)>("55-3 56-2 6 ? * FRI", 1);

        return;
    }

    private java.util.Set assertParsesForField(java.lang.String, int)
    {
        org.quartz.Quartz601Test r0;
        java.lang.String r1, $r9, $r15;
        int i0;
        java.util.TreeSet r2;
        org.quartz.CronExpression $r3;
        boolean $z0;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r12, $r13, $r14;
        java.text.ParseException $r11;

        r0 := @this: org.quartz.Quartz601Test;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        $r3 = new org.quartz.CronExpression;

        specialinvoke $r3.<org.quartz.CronExpression: void <init>(java.lang.String)>(r1);

        r2 = virtualinvoke $r3.<org.quartz.CronExpression: java.util.TreeSet getSet(int)>(i0);

        $z0 = interfaceinvoke r2.<java.util.Set: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Empty field [");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] returned for ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.quartz.Quartz601Test: void fail(java.lang.String)>($r9);

     label2:
        return r2;

     label3:
        $r11 := @caughtexception;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception thrown during parsing: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.quartz.Quartz601Test: void fail(java.lang.String)>($r15);

        return null;

        catch java.text.ParseException from label1 to label2 with label3;
    }
}
