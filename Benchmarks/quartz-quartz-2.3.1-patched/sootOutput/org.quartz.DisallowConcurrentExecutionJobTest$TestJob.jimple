public class org.quartz.DisallowConcurrentExecutionJobTest$TestJob extends java.lang.Object implements org.quartz.Job
{

    public void <init>()
    {
        org.quartz.DisallowConcurrentExecutionJobTest$TestJob r0;

        r0 := @this: org.quartz.DisallowConcurrentExecutionJobTest$TestJob;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void execute(org.quartz.JobExecutionContext) throws org.quartz.JobExecutionException
    {
        org.quartz.DisallowConcurrentExecutionJobTest$TestJob r0;
        org.quartz.JobExecutionContext r1;
        long l0, l1, $l2, $l4, l5;
        org.quartz.Scheduler $r2;
        org.quartz.SchedulerContext $r3;
        java.lang.Object $r4;
        java.util.Date $r5;
        byte $b3;
        org.quartz.SchedulerException $r6;
        org.quartz.JobExecutionException $r7, $r9;
        java.lang.InterruptedException $r8;
        java.util.List r10;

        r0 := @this: org.quartz.DisallowConcurrentExecutionJobTest$TestJob;

        r1 := @parameter0: org.quartz.JobExecutionContext;

     label1:
        $r2 = interfaceinvoke r1.<org.quartz.JobExecutionContext: org.quartz.Scheduler getScheduler()>();

        $r3 = interfaceinvoke $r2.<org.quartz.Scheduler: org.quartz.SchedulerContext getContext()>();

        $r4 = virtualinvoke $r3.<org.quartz.SchedulerContext: java.lang.Object get(java.lang.Object)>("DATE_STAMPS");

        r10 = (java.util.List) $r4;

        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r5 = new java.util.Date;

        specialinvoke $r5.<java.util.Date: void <init>(long)>(l0);

        interfaceinvoke r10.<java.util.List: boolean add(java.lang.Object)>($r5);

        l1 = l0 + 300L;

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l5 = l1 - $l2;

     label2:
        $b3 = l5 cmp 0L;

        if $b3 <= 0 goto label3;

        staticinvoke <java.lang.Thread: void sleep(long)>(l5);

        $l4 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l5 = l1 - $l4;

        goto label2;

     label3:
        goto label6;

     label4:
        $r8 := @caughtexception;

        $r9 = new org.quartz.JobExecutionException;

        specialinvoke $r9.<org.quartz.JobExecutionException: void <init>(java.lang.String)>("Failed to pause job for testing.");

        throw $r9;

     label5:
        $r6 := @caughtexception;

        $r7 = new org.quartz.JobExecutionException;

        specialinvoke $r7.<org.quartz.JobExecutionException: void <init>(java.lang.String)>("Failed to lookup datestamp collection.");

        throw $r7;

     label6:
        return;

        catch java.lang.InterruptedException from label1 to label3 with label4;
        catch org.quartz.SchedulerException from label1 to label3 with label5;
    }
}
