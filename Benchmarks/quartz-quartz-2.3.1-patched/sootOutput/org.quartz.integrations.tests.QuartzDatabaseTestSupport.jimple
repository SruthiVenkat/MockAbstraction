public class org.quartz.integrations.tests.QuartzDatabaseTestSupport extends org.quartz.integrations.tests.QuartzMemoryTestSupport
{
    protected static final org.slf4j.Logger LOG;
    protected static org.apache.derby.drda.NetworkServerControl derbyServer;

    public void <init>()
    {
        org.quartz.integrations.tests.QuartzDatabaseTestSupport r0;

        r0 := @this: org.quartz.integrations.tests.QuartzDatabaseTestSupport;

        specialinvoke r0.<org.quartz.integrations.tests.QuartzMemoryTestSupport: void <init>()>();

        return;
    }

    public static void initialize() throws java.lang.Exception
    {
        org.slf4j.Logger $r0, $r5, $r6, $r7;
        org.apache.derby.drda.NetworkServerControl $r1, $r4, $r9;
        java.io.PrintWriter $r2;
        java.io.PrintStream $r3;
        java.lang.Exception $r8, $r10, $r12;
        java.sql.SQLException $r11;
        int i0;

        $r0 = <org.quartz.integrations.tests.QuartzDatabaseTestSupport: org.slf4j.Logger LOG>;

        interfaceinvoke $r0.<org.slf4j.Logger: void info(java.lang.String)>("Starting DERBY database.");

        $r1 = new org.apache.derby.drda.NetworkServerControl;

        specialinvoke $r1.<org.apache.derby.drda.NetworkServerControl: void <init>()>();

        <org.quartz.integrations.tests.QuartzDatabaseTestSupport: org.apache.derby.drda.NetworkServerControl derbyServer> = $r1;

        $r4 = <org.quartz.integrations.tests.QuartzDatabaseTestSupport: org.apache.derby.drda.NetworkServerControl derbyServer>;

        $r2 = new java.io.PrintWriter;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        specialinvoke $r2.<java.io.PrintWriter: void <init>(java.io.OutputStream)>($r3);

        virtualinvoke $r4.<org.apache.derby.drda.NetworkServerControl: void start(java.io.PrintWriter)>($r2);

        i0 = 0;

     label01:
        if i0 >= 5 goto label05;

     label02:
        staticinvoke <java.lang.Thread: void sleep(long)>(500L);

        $r9 = <org.quartz.integrations.tests.QuartzDatabaseTestSupport: org.apache.derby.drda.NetworkServerControl derbyServer>;

        virtualinvoke $r9.<org.apache.derby.drda.NetworkServerControl: void ping()>();

     label03:
        goto label05;

     label04:
        $r10 := @caughtexception;

        i0 = i0 + 1;

        goto label01;

     label05:
        if i0 != 5 goto label06;

        $r8 = new java.lang.Exception;

        specialinvoke $r8.<java.lang.Exception: void <init>(java.lang.String)>("Failed to start Derby!");

        throw $r8;

     label06:
        $r5 = <org.quartz.integrations.tests.QuartzDatabaseTestSupport: org.slf4j.Logger LOG>;

        interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String)>("Database started.");

     label07:
        $r6 = <org.quartz.integrations.tests.QuartzDatabaseTestSupport: org.slf4j.Logger LOG>;

        interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String)>("Creating Database tables for Quartz.");

        staticinvoke <org.quartz.integrations.tests.JdbcQuartzDerbyUtilities: void createDatabase()>();

        $r7 = <org.quartz.integrations.tests.QuartzDatabaseTestSupport: org.slf4j.Logger LOG>;

        interfaceinvoke $r7.<org.slf4j.Logger: void info(java.lang.String)>("Database tables created.");

     label08:
        goto label10;

     label09:
        $r11 := @caughtexception;

        $r12 = new java.lang.Exception;

        specialinvoke $r12.<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>("Failed to create Quartz tables.", $r11);

        throw $r12;

     label10:
        return;

        catch java.lang.Exception from label02 to label03 with label04;
        catch java.sql.SQLException from label07 to label08 with label09;
    }

    public static void shutdownDb() throws java.lang.Exception
    {
        org.slf4j.Logger $r1, $r2, $r4;
        org.apache.derby.drda.NetworkServerControl $r3;
        java.sql.SQLException $r5, $r6;
        java.lang.AssertionError $r7;

     label1:
        $r1 = <org.quartz.integrations.tests.QuartzDatabaseTestSupport: org.slf4j.Logger LOG>;

        interfaceinvoke $r1.<org.slf4j.Logger: void info(java.lang.String)>("Destroying Database.");

        staticinvoke <org.quartz.integrations.tests.JdbcQuartzDerbyUtilities: void destroyDatabase()>();

        $r2 = <org.quartz.integrations.tests.QuartzDatabaseTestSupport: org.slf4j.Logger LOG>;

        interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String)>("Database destroyed.");

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        virtualinvoke $r5.<java.sql.SQLException: void printStackTrace()>();

        $r6 = virtualinvoke $r5.<java.sql.SQLException: java.sql.SQLException getNextException()>();

        virtualinvoke $r6.<java.sql.SQLException: void printStackTrace()>();

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>($r5);

        throw $r7;

     label4:
        $r3 = <org.quartz.integrations.tests.QuartzDatabaseTestSupport: org.apache.derby.drda.NetworkServerControl derbyServer>;

        virtualinvoke $r3.<org.apache.derby.drda.NetworkServerControl: void shutdown()>();

        $r4 = <org.quartz.integrations.tests.QuartzDatabaseTestSupport: org.slf4j.Logger LOG>;

        interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String)>("Database shutdown.");

        return;

        catch java.sql.SQLException from label1 to label2 with label3;
    }

    protected java.util.Properties createSchedulerProperties()
    {
        org.quartz.integrations.tests.QuartzDatabaseTestSupport r0;
        java.util.Properties $r2;
        java.lang.String $r17;

        r0 := @this: org.quartz.integrations.tests.QuartzDatabaseTestSupport;

        $r2 = new java.util.Properties;

        specialinvoke $r2.<java.util.Properties: void <init>()>();

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.scheduler.instanceName", "TestScheduler");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.scheduler.instanceId", "AUTO");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.scheduler.skipUpdateCheck", "true");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.threadPool.class", "org.quartz.simpl.SimpleThreadPool");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.threadPool.threadCount", "12");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.threadPool.threadPriority", "5");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.jobStore.misfireThreshold", "10000");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.jobStore.class", "org.quartz.impl.jdbcjobstore.JobStoreTX");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.jobStore.driverDelegateClass", "org.quartz.impl.jdbcjobstore.StdJDBCDelegate");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.jobStore.useProperties", "true");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.jobStore.dataSource", "myDS");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.jobStore.tablePrefix", "QRTZ_");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.jobStore.isClustered", "false");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.dataSource.myDS.driver", "org.apache.derby.jdbc.ClientDriver");

        $r17 = <org.quartz.integrations.tests.JdbcQuartzDerbyUtilities: java.lang.String DATABASE_CONNECTION_PREFIX>;

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.dataSource.myDS.URL", $r17);

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.dataSource.myDS.user", "quartz");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.dataSource.myDS.password", "quartz");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.dataSource.myDS.maxConnections", "5");

        return $r2;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/quartz/integrations/tests/QuartzDatabaseTestSupport;");

        <org.quartz.integrations.tests.QuartzDatabaseTestSupport: org.slf4j.Logger LOG> = $r0;

        return;
    }
}
