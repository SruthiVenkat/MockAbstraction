public class org.quartz.core.jmx.TriggerSupport extends java.lang.Object
{
    private static final java.lang.String COMPOSITE_TYPE_NAME;
    private static final java.lang.String COMPOSITE_TYPE_DESCRIPTION;
    private static final java.lang.String[] ITEM_NAMES;
    private static final java.lang.String[] ITEM_DESCRIPTIONS;
    private static final javax.management.openmbean.OpenType[] ITEM_TYPES;
    private static final javax.management.openmbean.CompositeType COMPOSITE_TYPE;
    private static final java.lang.String TABULAR_TYPE_NAME;
    private static final java.lang.String TABULAR_TYPE_DESCRIPTION;
    private static final java.lang.String[] INDEX_NAMES;
    private static final javax.management.openmbean.TabularType TABULAR_TYPE;

    public void <init>()
    {
        org.quartz.core.jmx.TriggerSupport r0;

        r0 := @this: org.quartz.core.jmx.TriggerSupport;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String[] getItemNames()
    {
        java.lang.String[] $r0;

        $r0 = <org.quartz.core.jmx.TriggerSupport: java.lang.String[] ITEM_NAMES>;

        return $r0;
    }

    public static java.lang.String[] getItemDescriptions()
    {
        java.lang.String[] $r0;

        $r0 = <org.quartz.core.jmx.TriggerSupport: java.lang.String[] ITEM_DESCRIPTIONS>;

        return $r0;
    }

    public static javax.management.openmbean.OpenType[] getItemTypes()
    {
        javax.management.openmbean.OpenType[] $r0;

        $r0 = <org.quartz.core.jmx.TriggerSupport: javax.management.openmbean.OpenType[] ITEM_TYPES>;

        return $r0;
    }

    public java.lang.String[] getIndexNames()
    {
        org.quartz.core.jmx.TriggerSupport r0;
        java.lang.String[] $r1;

        r0 := @this: org.quartz.core.jmx.TriggerSupport;

        $r1 = <org.quartz.core.jmx.TriggerSupport: java.lang.String[] INDEX_NAMES>;

        return $r1;
    }

    public static javax.management.openmbean.CompositeData toCompositeData(org.quartz.Trigger)
    {
        org.quartz.Trigger r0;
        javax.management.openmbean.CompositeDataSupport $r2;
        java.lang.Object[] $r3;
        javax.management.openmbean.CompositeType $r4;
        java.lang.String[] $r5;
        org.quartz.TriggerKey $r6, $r8;
        java.lang.String $r7, $r9, $r11, $r13, $r14, $r17, $r19;
        org.quartz.JobKey $r10, $r12;
        org.quartz.JobDataMap $r15;
        javax.management.openmbean.TabularData $r16;
        org.quartz.spi.OperableTrigger $r18;
        int $i0, $i1;
        java.lang.Integer $r20, $r21;
        java.util.Date $r22, $r23, $r24, $r25, $r26;
        javax.management.openmbean.OpenDataException $r27;
        java.lang.RuntimeException $r28;

        r0 := @parameter0: org.quartz.Trigger;

     label1:
        $r2 = new javax.management.openmbean.CompositeDataSupport;

        $r4 = <org.quartz.core.jmx.TriggerSupport: javax.management.openmbean.CompositeType COMPOSITE_TYPE>;

        $r5 = <org.quartz.core.jmx.TriggerSupport: java.lang.String[] ITEM_NAMES>;

        $r3 = newarray (java.lang.Object)[15];

        $r6 = interfaceinvoke r0.<org.quartz.Trigger: org.quartz.TriggerKey getKey()>();

        $r7 = virtualinvoke $r6.<org.quartz.TriggerKey: java.lang.String getName()>();

        $r3[0] = $r7;

        $r8 = interfaceinvoke r0.<org.quartz.Trigger: org.quartz.TriggerKey getKey()>();

        $r9 = virtualinvoke $r8.<org.quartz.TriggerKey: java.lang.String getGroup()>();

        $r3[1] = $r9;

        $r10 = interfaceinvoke r0.<org.quartz.Trigger: org.quartz.JobKey getJobKey()>();

        $r11 = virtualinvoke $r10.<org.quartz.JobKey: java.lang.String getName()>();

        $r3[2] = $r11;

        $r12 = interfaceinvoke r0.<org.quartz.Trigger: org.quartz.JobKey getJobKey()>();

        $r13 = virtualinvoke $r12.<org.quartz.JobKey: java.lang.String getGroup()>();

        $r3[3] = $r13;

        $r14 = interfaceinvoke r0.<org.quartz.Trigger: java.lang.String getDescription()>();

        $r3[4] = $r14;

        $r15 = interfaceinvoke r0.<org.quartz.Trigger: org.quartz.JobDataMap getJobDataMap()>();

        $r16 = staticinvoke <org.quartz.core.jmx.JobDataMapSupport: javax.management.openmbean.TabularData toTabularData(org.quartz.JobDataMap)>($r15);

        $r3[5] = $r16;

        $r17 = interfaceinvoke r0.<org.quartz.Trigger: java.lang.String getCalendarName()>();

        $r3[6] = $r17;

        $r18 = (org.quartz.spi.OperableTrigger) r0;

        $r19 = interfaceinvoke $r18.<org.quartz.spi.OperableTrigger: java.lang.String getFireInstanceId()>();

        $r3[7] = $r19;

        $i0 = interfaceinvoke r0.<org.quartz.Trigger: int getMisfireInstruction()>();

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3[8] = $r20;

        $i1 = interfaceinvoke r0.<org.quartz.Trigger: int getPriority()>();

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r3[9] = $r21;

        $r22 = interfaceinvoke r0.<org.quartz.Trigger: java.util.Date getStartTime()>();

        $r3[10] = $r22;

        $r23 = interfaceinvoke r0.<org.quartz.Trigger: java.util.Date getEndTime()>();

        $r3[11] = $r23;

        $r24 = interfaceinvoke r0.<org.quartz.Trigger: java.util.Date getNextFireTime()>();

        $r3[12] = $r24;

        $r25 = interfaceinvoke r0.<org.quartz.Trigger: java.util.Date getPreviousFireTime()>();

        $r3[13] = $r25;

        $r26 = interfaceinvoke r0.<org.quartz.Trigger: java.util.Date getFinalFireTime()>();

        $r3[14] = $r26;

        specialinvoke $r2.<javax.management.openmbean.CompositeDataSupport: void <init>(javax.management.openmbean.CompositeType,java.lang.String[],java.lang.Object[])>($r4, $r5, $r3);

     label2:
        return $r2;

     label3:
        $r27 := @caughtexception;

        $r28 = new java.lang.RuntimeException;

        specialinvoke $r28.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r27);

        throw $r28;

        catch javax.management.openmbean.OpenDataException from label1 to label2 with label3;
    }

    public static javax.management.openmbean.TabularData toTabularData(java.util.List)
    {
        java.util.List r0;
        java.util.Iterator r3;
        org.quartz.Trigger r4;
        javax.management.openmbean.TabularDataSupport $r5;
        javax.management.openmbean.TabularType $r6;
        java.util.ArrayList $r7;
        boolean $z0;
        int $i0;
        javax.management.openmbean.CompositeData[] $r8, $r10;
        java.lang.Object[] $r9;
        java.lang.Object $r11;
        javax.management.openmbean.CompositeData $r12;

        r0 := @parameter0: java.util.List;

        $r5 = new javax.management.openmbean.TabularDataSupport;

        $r6 = <org.quartz.core.jmx.TriggerSupport: javax.management.openmbean.TabularType TABULAR_TYPE>;

        specialinvoke $r5.<javax.management.openmbean.TabularDataSupport: void <init>(javax.management.openmbean.TabularType)>($r6);

        if r0 == null goto label3;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r3 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r11 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.quartz.Trigger) $r11;

        $r12 = staticinvoke <org.quartz.core.jmx.TriggerSupport: javax.management.openmbean.CompositeData toCompositeData(org.quartz.Trigger)>(r4);

        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>($r12);

        goto label1;

     label2:
        $i0 = virtualinvoke $r7.<java.util.ArrayList: int size()>();

        $r8 = newarray (javax.management.openmbean.CompositeData)[$i0];

        $r9 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r8);

        $r10 = (javax.management.openmbean.CompositeData[]) $r9;

        interfaceinvoke $r5.<javax.management.openmbean.TabularData: void putAll(javax.management.openmbean.CompositeData[])>($r10);

     label3:
        return $r5;
    }

    public static java.util.List toCompositeList(java.util.List)
    {
        java.util.List r0;
        java.util.Iterator r2;
        org.quartz.Trigger r3;
        javax.management.openmbean.CompositeData r4;
        java.util.ArrayList $r5;
        boolean $z0;
        java.lang.Object $r6;

        r0 := @parameter0: java.util.List;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.quartz.Trigger) $r6;

        r4 = staticinvoke <org.quartz.core.jmx.TriggerSupport: javax.management.openmbean.CompositeData toCompositeData(org.quartz.Trigger)>(r3);

        if r4 == null goto label2;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r4);

     label2:
        goto label1;

     label3:
        return $r5;
    }

    public static void initializeTrigger(org.quartz.spi.MutableTrigger, javax.management.openmbean.CompositeData)
    {
        org.quartz.spi.MutableTrigger r0;
        javax.management.openmbean.CompositeData r1;
        java.lang.Object $r2, $r4, $r7, $r10, $r12, $r15, $r17, $r19, $r21, $r22, $r25;
        java.lang.String $r3, $r5, $r11, $r13, $r16, $r18;
        boolean $z0, $z1, $z2, $z3;
        java.util.Date $r6, $r8, r27;
        org.quartz.TriggerKey $r9;
        org.quartz.JobKey $r14;
        java.lang.Integer $r20, $r26;
        int $i0, $i1;
        javax.management.openmbean.TabularData $r23;
        org.quartz.JobDataMap $r24;

        r0 := @parameter0: org.quartz.spi.MutableTrigger;

        r1 := @parameter1: javax.management.openmbean.CompositeData;

        $r2 = interfaceinvoke r1.<javax.management.openmbean.CompositeData: java.lang.Object get(java.lang.String)>("description");

        $r3 = (java.lang.String) $r2;

        interfaceinvoke r0.<org.quartz.spi.MutableTrigger: void setDescription(java.lang.String)>($r3);

        $r4 = interfaceinvoke r1.<javax.management.openmbean.CompositeData: java.lang.Object get(java.lang.String)>("calendarName");

        $r5 = (java.lang.String) $r4;

        interfaceinvoke r0.<org.quartz.spi.MutableTrigger: void setCalendarName(java.lang.String)>($r5);

        $z0 = interfaceinvoke r1.<javax.management.openmbean.CompositeData: boolean containsKey(java.lang.String)>("priority");

        if $z0 == 0 goto label1;

        $r25 = interfaceinvoke r1.<javax.management.openmbean.CompositeData: java.lang.Object get(java.lang.String)>("priority");

        $r26 = (java.lang.Integer) $r25;

        $i1 = virtualinvoke $r26.<java.lang.Integer: int intValue()>();

        interfaceinvoke r0.<org.quartz.spi.MutableTrigger: void setPriority(int)>($i1);

     label1:
        $z1 = interfaceinvoke r1.<javax.management.openmbean.CompositeData: boolean containsKey(java.lang.String)>("jobDataMap");

        if $z1 == 0 goto label2;

        $r22 = interfaceinvoke r1.<javax.management.openmbean.CompositeData: java.lang.Object get(java.lang.String)>("jobDataMap");

        $r23 = (javax.management.openmbean.TabularData) $r22;

        $r24 = staticinvoke <org.quartz.core.jmx.JobDataMapSupport: org.quartz.JobDataMap newJobDataMap(javax.management.openmbean.TabularData)>($r23);

        interfaceinvoke r0.<org.quartz.spi.MutableTrigger: void setJobDataMap(org.quartz.JobDataMap)>($r24);

     label2:
        $z2 = interfaceinvoke r1.<javax.management.openmbean.CompositeData: boolean containsKey(java.lang.String)>("startTime");

        if $z2 == 0 goto label3;

        $r21 = interfaceinvoke r1.<javax.management.openmbean.CompositeData: java.lang.Object get(java.lang.String)>("startTime");

        r27 = (java.util.Date) $r21;

        goto label4;

     label3:
        $r6 = new java.util.Date;

        specialinvoke $r6.<java.util.Date: void <init>()>();

        r27 = $r6;

     label4:
        interfaceinvoke r0.<org.quartz.spi.MutableTrigger: void setStartTime(java.util.Date)>(r27);

        $r7 = interfaceinvoke r1.<javax.management.openmbean.CompositeData: java.lang.Object get(java.lang.String)>("endTime");

        $r8 = (java.util.Date) $r7;

        interfaceinvoke r0.<org.quartz.spi.MutableTrigger: void setEndTime(java.util.Date)>($r8);

        $z3 = interfaceinvoke r1.<javax.management.openmbean.CompositeData: boolean containsKey(java.lang.String)>("misfireInstruction");

        if $z3 == 0 goto label5;

        $r19 = interfaceinvoke r1.<javax.management.openmbean.CompositeData: java.lang.Object get(java.lang.String)>("misfireInstruction");

        $r20 = (java.lang.Integer) $r19;

        $i0 = virtualinvoke $r20.<java.lang.Integer: int intValue()>();

        interfaceinvoke r0.<org.quartz.spi.MutableTrigger: void setMisfireInstruction(int)>($i0);

     label5:
        $r9 = new org.quartz.TriggerKey;

        $r10 = interfaceinvoke r1.<javax.management.openmbean.CompositeData: java.lang.Object get(java.lang.String)>("name");

        $r11 = (java.lang.String) $r10;

        $r12 = interfaceinvoke r1.<javax.management.openmbean.CompositeData: java.lang.Object get(java.lang.String)>("group");

        $r13 = (java.lang.String) $r12;

        specialinvoke $r9.<org.quartz.TriggerKey: void <init>(java.lang.String,java.lang.String)>($r11, $r13);

        interfaceinvoke r0.<org.quartz.spi.MutableTrigger: void setKey(org.quartz.TriggerKey)>($r9);

        $r14 = new org.quartz.JobKey;

        $r15 = interfaceinvoke r1.<javax.management.openmbean.CompositeData: java.lang.Object get(java.lang.String)>("jobName");

        $r16 = (java.lang.String) $r15;

        $r17 = interfaceinvoke r1.<javax.management.openmbean.CompositeData: java.lang.Object get(java.lang.String)>("jobGroup");

        $r18 = (java.lang.String) $r17;

        specialinvoke $r14.<org.quartz.JobKey: void <init>(java.lang.String,java.lang.String)>($r16, $r18);

        interfaceinvoke r0.<org.quartz.spi.MutableTrigger: void setJobKey(org.quartz.JobKey)>($r14);

        return;
    }

    public static void initializeTrigger(org.quartz.spi.MutableTrigger, java.util.Map)
    {
        org.quartz.spi.MutableTrigger r0;
        java.util.Map r1, r26;
        java.lang.Object $r2, $r4, $r8, $r10, $r13, $r15, $r17, $r19, $r21, $r22, $r24;
        java.lang.String $r3, $r5, $r9, $r11, $r14, $r16;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Date $r6, $r20, r27;
        org.quartz.TriggerKey $r7;
        org.quartz.JobKey $r12;
        java.lang.Integer $r18, $r25;
        int $i0, $i1;
        org.quartz.JobDataMap $r23;

        r0 := @parameter0: org.quartz.spi.MutableTrigger;

        r1 := @parameter1: java.util.Map;

        $r2 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("description");

        $r3 = (java.lang.String) $r2;

        interfaceinvoke r0.<org.quartz.spi.MutableTrigger: void setDescription(java.lang.String)>($r3);

        $r4 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("calendarName");

        $r5 = (java.lang.String) $r4;

        interfaceinvoke r0.<org.quartz.spi.MutableTrigger: void setCalendarName(java.lang.String)>($r5);

        $z0 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>("priority");

        if $z0 == 0 goto label1;

        $r24 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("priority");

        $r25 = (java.lang.Integer) $r24;

        $i1 = virtualinvoke $r25.<java.lang.Integer: int intValue()>();

        interfaceinvoke r0.<org.quartz.spi.MutableTrigger: void setPriority(int)>($i1);

     label1:
        $z1 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>("jobDataMap");

        if $z1 == 0 goto label2;

        $r22 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("jobDataMap");

        r26 = (java.util.Map) $r22;

        $r23 = staticinvoke <org.quartz.core.jmx.JobDataMapSupport: org.quartz.JobDataMap newJobDataMap(java.util.Map)>(r26);

        interfaceinvoke r0.<org.quartz.spi.MutableTrigger: void setJobDataMap(org.quartz.JobDataMap)>($r23);

     label2:
        $z2 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>("startTime");

        if $z2 == 0 goto label3;

        $r21 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("startTime");

        r27 = (java.util.Date) $r21;

        goto label4;

     label3:
        $r6 = new java.util.Date;

        specialinvoke $r6.<java.util.Date: void <init>()>();

        r27 = $r6;

     label4:
        interfaceinvoke r0.<org.quartz.spi.MutableTrigger: void setStartTime(java.util.Date)>(r27);

        $z3 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>("endTime");

        if $z3 == 0 goto label5;

        $r19 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("endTime");

        $r20 = (java.util.Date) $r19;

        interfaceinvoke r0.<org.quartz.spi.MutableTrigger: void setEndTime(java.util.Date)>($r20);

     label5:
        $z4 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>("misfireInstruction");

        if $z4 == 0 goto label6;

        $r17 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("misfireInstruction");

        $r18 = (java.lang.Integer) $r17;

        $i0 = virtualinvoke $r18.<java.lang.Integer: int intValue()>();

        interfaceinvoke r0.<org.quartz.spi.MutableTrigger: void setMisfireInstruction(int)>($i0);

     label6:
        $r7 = new org.quartz.TriggerKey;

        $r8 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("name");

        $r9 = (java.lang.String) $r8;

        $r10 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("group");

        $r11 = (java.lang.String) $r10;

        specialinvoke $r7.<org.quartz.TriggerKey: void <init>(java.lang.String,java.lang.String)>($r9, $r11);

        interfaceinvoke r0.<org.quartz.spi.MutableTrigger: void setKey(org.quartz.TriggerKey)>($r7);

        $r12 = new org.quartz.JobKey;

        $r13 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("jobName");

        $r14 = (java.lang.String) $r13;

        $r15 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("jobGroup");

        $r16 = (java.lang.String) $r15;

        specialinvoke $r12.<org.quartz.JobKey: void <init>(java.lang.String,java.lang.String)>($r14, $r16);

        interfaceinvoke r0.<org.quartz.spi.MutableTrigger: void setJobKey(org.quartz.JobKey)>($r12);

        return;
    }

    public static org.quartz.spi.OperableTrigger newTrigger(javax.management.openmbean.CompositeData) throws java.text.ParseException
    {
        javax.management.openmbean.CompositeData r0;
        boolean $z0;
        org.quartz.spi.OperableTrigger r1;

        r0 := @parameter0: javax.management.openmbean.CompositeData;

        $z0 = interfaceinvoke r0.<javax.management.openmbean.CompositeData: boolean containsKey(java.lang.String)>("cronExpression");

        if $z0 == 0 goto label1;

        r1 = staticinvoke <org.quartz.core.jmx.CronTriggerSupport: org.quartz.spi.OperableTrigger newTrigger(javax.management.openmbean.CompositeData)>(r0);

        goto label2;

     label1:
        r1 = staticinvoke <org.quartz.core.jmx.SimpleTriggerSupport: org.quartz.spi.OperableTrigger newTrigger(javax.management.openmbean.CompositeData)>(r0);

     label2:
        return r1;
    }

    public static org.quartz.spi.OperableTrigger newTrigger(java.util.Map) throws java.text.ParseException
    {
        java.util.Map r0;
        boolean $z0;
        org.quartz.spi.OperableTrigger r1;

        r0 := @parameter0: java.util.Map;

        $z0 = interfaceinvoke r0.<java.util.Map: boolean containsKey(java.lang.Object)>("cronExpression");

        if $z0 == 0 goto label1;

        r1 = staticinvoke <org.quartz.core.jmx.CronTriggerSupport: org.quartz.spi.OperableTrigger newTrigger(java.util.Map)>(r0);

        goto label2;

     label1:
        r1 = staticinvoke <org.quartz.core.jmx.SimpleTriggerSupport: org.quartz.spi.OperableTrigger newTrigger(java.util.Map)>(r0);

     label2:
        return r1;
    }

    static void <clinit>()
    {
        java.lang.String[] $r1, $r2, $r19, $r22, $r23, $r25;
        javax.management.openmbean.OpenType[] $r3, $r21;
        javax.management.openmbean.SimpleType $r4, $r5, $r6, $r7, $r8, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18;
        javax.management.openmbean.TabularType $r9, $r24;
        javax.management.openmbean.CompositeType $r20, $r26;
        javax.management.openmbean.OpenDataException $r27;
        java.lang.RuntimeException $r28;

        <org.quartz.core.jmx.TriggerSupport: java.lang.String TABULAR_TYPE_DESCRIPTION> = "Trigger collection";

        <org.quartz.core.jmx.TriggerSupport: java.lang.String TABULAR_TYPE_NAME> = "Trigger collection";

        <org.quartz.core.jmx.TriggerSupport: java.lang.String COMPOSITE_TYPE_DESCRIPTION> = "Trigger Details";

        <org.quartz.core.jmx.TriggerSupport: java.lang.String COMPOSITE_TYPE_NAME> = "Trigger";

        $r1 = newarray (java.lang.String)[15];

        $r1[0] = "name";

        $r1[1] = "group";

        $r1[2] = "jobName";

        $r1[3] = "jobGroup";

        $r1[4] = "description";

        $r1[5] = "jobDataMap";

        $r1[6] = "calendarName";

        $r1[7] = "fireInstanceId";

        $r1[8] = "misfireInstruction";

        $r1[9] = "priority";

        $r1[10] = "startTime";

        $r1[11] = "endTime";

        $r1[12] = "nextFireTime";

        $r1[13] = "previousFireTime";

        $r1[14] = "finalFireTime";

        <org.quartz.core.jmx.TriggerSupport: java.lang.String[] ITEM_NAMES> = $r1;

        $r2 = newarray (java.lang.String)[15];

        $r2[0] = "name";

        $r2[1] = "group";

        $r2[2] = "jobName";

        $r2[3] = "jobGroup";

        $r2[4] = "description";

        $r2[5] = "jobDataMap";

        $r2[6] = "calendarName";

        $r2[7] = "fireInstanceId";

        $r2[8] = "misfireInstruction";

        $r2[9] = "priority";

        $r2[10] = "startTime";

        $r2[11] = "endTime";

        $r2[12] = "nextFireTime";

        $r2[13] = "previousFireTime";

        $r2[14] = "finalFireTime";

        <org.quartz.core.jmx.TriggerSupport: java.lang.String[] ITEM_DESCRIPTIONS> = $r2;

        $r3 = newarray (javax.management.openmbean.OpenType)[15];

        $r4 = <javax.management.openmbean.SimpleType: javax.management.openmbean.SimpleType STRING>;

        $r3[0] = $r4;

        $r5 = <javax.management.openmbean.SimpleType: javax.management.openmbean.SimpleType STRING>;

        $r3[1] = $r5;

        $r6 = <javax.management.openmbean.SimpleType: javax.management.openmbean.SimpleType STRING>;

        $r3[2] = $r6;

        $r7 = <javax.management.openmbean.SimpleType: javax.management.openmbean.SimpleType STRING>;

        $r3[3] = $r7;

        $r8 = <javax.management.openmbean.SimpleType: javax.management.openmbean.SimpleType STRING>;

        $r3[4] = $r8;

        $r9 = <org.quartz.core.jmx.JobDataMapSupport: javax.management.openmbean.TabularType TABULAR_TYPE>;

        $r3[5] = $r9;

        $r10 = <javax.management.openmbean.SimpleType: javax.management.openmbean.SimpleType STRING>;

        $r3[6] = $r10;

        $r11 = <javax.management.openmbean.SimpleType: javax.management.openmbean.SimpleType STRING>;

        $r3[7] = $r11;

        $r12 = <javax.management.openmbean.SimpleType: javax.management.openmbean.SimpleType INTEGER>;

        $r3[8] = $r12;

        $r13 = <javax.management.openmbean.SimpleType: javax.management.openmbean.SimpleType INTEGER>;

        $r3[9] = $r13;

        $r14 = <javax.management.openmbean.SimpleType: javax.management.openmbean.SimpleType DATE>;

        $r3[10] = $r14;

        $r15 = <javax.management.openmbean.SimpleType: javax.management.openmbean.SimpleType DATE>;

        $r3[11] = $r15;

        $r16 = <javax.management.openmbean.SimpleType: javax.management.openmbean.SimpleType DATE>;

        $r3[12] = $r16;

        $r17 = <javax.management.openmbean.SimpleType: javax.management.openmbean.SimpleType DATE>;

        $r3[13] = $r17;

        $r18 = <javax.management.openmbean.SimpleType: javax.management.openmbean.SimpleType DATE>;

        $r3[14] = $r18;

        <org.quartz.core.jmx.TriggerSupport: javax.management.openmbean.OpenType[] ITEM_TYPES> = $r3;

        $r19 = newarray (java.lang.String)[2];

        $r19[0] = "name";

        $r19[1] = "group";

        <org.quartz.core.jmx.TriggerSupport: java.lang.String[] INDEX_NAMES> = $r19;

     label1:
        $r20 = new javax.management.openmbean.CompositeType;

        $r23 = <org.quartz.core.jmx.TriggerSupport: java.lang.String[] ITEM_NAMES>;

        $r22 = <org.quartz.core.jmx.TriggerSupport: java.lang.String[] ITEM_DESCRIPTIONS>;

        $r21 = <org.quartz.core.jmx.TriggerSupport: javax.management.openmbean.OpenType[] ITEM_TYPES>;

        specialinvoke $r20.<javax.management.openmbean.CompositeType: void <init>(java.lang.String,java.lang.String,java.lang.String[],java.lang.String[],javax.management.openmbean.OpenType[])>("Trigger", "Trigger Details", $r23, $r22, $r21);

        <org.quartz.core.jmx.TriggerSupport: javax.management.openmbean.CompositeType COMPOSITE_TYPE> = $r20;

        $r24 = new javax.management.openmbean.TabularType;

        $r26 = <org.quartz.core.jmx.TriggerSupport: javax.management.openmbean.CompositeType COMPOSITE_TYPE>;

        $r25 = <org.quartz.core.jmx.TriggerSupport: java.lang.String[] INDEX_NAMES>;

        specialinvoke $r24.<javax.management.openmbean.TabularType: void <init>(java.lang.String,java.lang.String,javax.management.openmbean.CompositeType,java.lang.String[])>("Trigger collection", "Trigger collection", $r26, $r25);

        <org.quartz.core.jmx.TriggerSupport: javax.management.openmbean.TabularType TABULAR_TYPE> = $r24;

     label2:
        goto label4;

     label3:
        $r27 := @caughtexception;

        $r28 = new java.lang.RuntimeException;

        specialinvoke $r28.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r27);

        throw $r28;

     label4:
        return;

        catch javax.management.openmbean.OpenDataException from label1 to label2 with label3;
    }
}
