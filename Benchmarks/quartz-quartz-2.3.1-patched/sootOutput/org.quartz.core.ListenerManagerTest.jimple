public class org.quartz.core.ListenerManagerTest extends junit.framework.TestCase
{

    public void <init>()
    {
        org.quartz.core.ListenerManagerTest r0;

        r0 := @this: org.quartz.core.ListenerManagerTest;

        specialinvoke r0.<junit.framework.TestCase: void <init>()>();

        return;
    }

    protected void setUp() throws java.lang.Exception
    {
        org.quartz.core.ListenerManagerTest r0;

        r0 := @this: org.quartz.core.ListenerManagerTest;

        return;
    }

    public void testManagementOfJobListeners() throws java.lang.Exception
    {
        org.quartz.core.ListenerManagerTest r0;
        org.quartz.JobListener[] r3;
        java.util.Iterator r4;
        org.quartz.JobListener r5, $r17, $r21;
        org.quartz.core.ListenerManagerTest$TestJobListener $r6, $r7, $r18;
        org.quartz.core.ListenerManagerImpl $r8, $r15;
        java.util.List $r9, $r11, $r12, $r14, r24;
        int $i1, $i2, $i3, $i4, i5, i6;
        org.quartz.impl.matchers.GroupMatcher $r10;
        org.quartz.impl.matchers.NameMatcher $r13;
        boolean $z2;
        java.lang.Object $r16;
        java.util.UUID $r19;
        java.lang.String $r20;

        r0 := @this: org.quartz.core.ListenerManagerTest;

        $r6 = new org.quartz.core.ListenerManagerTest$TestJobListener;

        specialinvoke $r6.<org.quartz.core.ListenerManagerTest$TestJobListener: void <init>(java.lang.String)>("tl1");

        $r7 = new org.quartz.core.ListenerManagerTest$TestJobListener;

        specialinvoke $r7.<org.quartz.core.ListenerManagerTest$TestJobListener: void <init>(java.lang.String)>("tl2");

        $r8 = new org.quartz.core.ListenerManagerImpl;

        specialinvoke $r8.<org.quartz.core.ListenerManagerImpl: void <init>()>();

        virtualinvoke $r8.<org.quartz.core.ListenerManagerImpl: void addJobListener(org.quartz.JobListener)>($r6);

        $r9 = virtualinvoke $r8.<org.quartz.core.ListenerManagerImpl: java.util.List getJobListeners()>();

        $i1 = interfaceinvoke $r9.<java.util.List: int size()>();

        staticinvoke <org.quartz.core.ListenerManagerTest: void assertEquals(java.lang.String,int,int)>("Unexpected size of listener list", 1, $i1);

        $r10 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher jobGroupEquals(java.lang.String)>("foo");

        virtualinvoke $r8.<org.quartz.core.ListenerManagerImpl: void addJobListener(org.quartz.JobListener,org.quartz.Matcher)>($r7, $r10);

        $r11 = virtualinvoke $r8.<org.quartz.core.ListenerManagerImpl: java.util.List getJobListeners()>();

        $i2 = interfaceinvoke $r11.<java.util.List: int size()>();

        staticinvoke <org.quartz.core.ListenerManagerTest: void assertEquals(java.lang.String,int,int)>("Unexpected size of listener list", 2, $i2);

        virtualinvoke $r8.<org.quartz.core.ListenerManagerImpl: boolean removeJobListener(java.lang.String)>("tl1");

        $r12 = virtualinvoke $r8.<org.quartz.core.ListenerManagerImpl: java.util.List getJobListeners()>();

        $i3 = interfaceinvoke $r12.<java.util.List: int size()>();

        staticinvoke <org.quartz.core.ListenerManagerTest: void assertEquals(java.lang.String,int,int)>("Unexpected size of listener list", 1, $i3);

        $r13 = staticinvoke <org.quartz.impl.matchers.NameMatcher: org.quartz.impl.matchers.NameMatcher jobNameContains(java.lang.String)>("foo");

        virtualinvoke $r8.<org.quartz.core.ListenerManagerImpl: boolean addJobListenerMatcher(java.lang.String,org.quartz.Matcher)>("tl2", $r13);

        $r14 = virtualinvoke $r8.<org.quartz.core.ListenerManagerImpl: java.util.List getJobListenerMatchers(java.lang.String)>("tl2");

        $i4 = interfaceinvoke $r14.<java.util.List: int size()>();

        staticinvoke <org.quartz.core.ListenerManagerTest: void assertEquals(java.lang.String,int,int)>("Unexpected size of listener\'s matcher list", 2, $i4);

        $r15 = new org.quartz.core.ListenerManagerImpl;

        specialinvoke $r15.<org.quartz.core.ListenerManagerImpl: void <init>()>();

        r3 = newarray (org.quartz.JobListener)[15];

        i5 = 0;

     label1:
        if i5 >= 15 goto label2;

        $r18 = new org.quartz.core.ListenerManagerTest$TestJobListener;

        $r19 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>();

        $r20 = virtualinvoke $r19.<java.util.UUID: java.lang.String toString()>();

        specialinvoke $r18.<org.quartz.core.ListenerManagerTest$TestJobListener: void <init>(java.lang.String)>($r20);

        r3[i5] = $r18;

        $r21 = r3[i5];

        virtualinvoke $r15.<org.quartz.core.ListenerManagerImpl: void addJobListener(org.quartz.JobListener)>($r21);

        i5 = i5 + 1;

        goto label1;

     label2:
        r24 = virtualinvoke $r15.<org.quartz.core.ListenerManagerImpl: java.util.List getJobListeners()>();

        i6 = 0;

        r4 = interfaceinvoke r24.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r16 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.quartz.JobListener) $r16;

        $r17 = r3[i6];

        staticinvoke <org.quartz.core.ListenerManagerTest: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("Unexpected order of listeners", $r17, r5);

        i6 = i6 + 1;

        goto label3;

     label4:
        return;
    }

    public void testManagementOfTriggerListeners() throws java.lang.Exception
    {
        org.quartz.core.ListenerManagerTest r0;
        org.quartz.TriggerListener[] r3;
        java.util.Iterator r4;
        org.quartz.TriggerListener r5, $r17, $r21;
        org.quartz.core.ListenerManagerTest$TestTriggerListener $r6, $r7, $r18;
        org.quartz.core.ListenerManagerImpl $r8, $r15;
        java.util.List $r9, $r11, $r12, $r14, r24;
        int $i1, $i2, $i3, $i4, i5, i6;
        org.quartz.impl.matchers.GroupMatcher $r10;
        org.quartz.impl.matchers.NameMatcher $r13;
        boolean $z2;
        java.lang.Object $r16;
        java.util.UUID $r19;
        java.lang.String $r20;

        r0 := @this: org.quartz.core.ListenerManagerTest;

        $r6 = new org.quartz.core.ListenerManagerTest$TestTriggerListener;

        specialinvoke $r6.<org.quartz.core.ListenerManagerTest$TestTriggerListener: void <init>(java.lang.String)>("tl1");

        $r7 = new org.quartz.core.ListenerManagerTest$TestTriggerListener;

        specialinvoke $r7.<org.quartz.core.ListenerManagerTest$TestTriggerListener: void <init>(java.lang.String)>("tl2");

        $r8 = new org.quartz.core.ListenerManagerImpl;

        specialinvoke $r8.<org.quartz.core.ListenerManagerImpl: void <init>()>();

        virtualinvoke $r8.<org.quartz.core.ListenerManagerImpl: void addTriggerListener(org.quartz.TriggerListener)>($r6);

        $r9 = virtualinvoke $r8.<org.quartz.core.ListenerManagerImpl: java.util.List getTriggerListeners()>();

        $i1 = interfaceinvoke $r9.<java.util.List: int size()>();

        staticinvoke <org.quartz.core.ListenerManagerTest: void assertEquals(java.lang.String,int,int)>("Unexpected size of listener list", 1, $i1);

        $r10 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher triggerGroupEquals(java.lang.String)>("foo");

        virtualinvoke $r8.<org.quartz.core.ListenerManagerImpl: void addTriggerListener(org.quartz.TriggerListener,org.quartz.Matcher)>($r7, $r10);

        $r11 = virtualinvoke $r8.<org.quartz.core.ListenerManagerImpl: java.util.List getTriggerListeners()>();

        $i2 = interfaceinvoke $r11.<java.util.List: int size()>();

        staticinvoke <org.quartz.core.ListenerManagerTest: void assertEquals(java.lang.String,int,int)>("Unexpected size of listener list", 2, $i2);

        virtualinvoke $r8.<org.quartz.core.ListenerManagerImpl: boolean removeTriggerListener(java.lang.String)>("tl1");

        $r12 = virtualinvoke $r8.<org.quartz.core.ListenerManagerImpl: java.util.List getTriggerListeners()>();

        $i3 = interfaceinvoke $r12.<java.util.List: int size()>();

        staticinvoke <org.quartz.core.ListenerManagerTest: void assertEquals(java.lang.String,int,int)>("Unexpected size of listener list", 1, $i3);

        $r13 = staticinvoke <org.quartz.impl.matchers.NameMatcher: org.quartz.impl.matchers.NameMatcher nameContains(java.lang.String)>("foo");

        virtualinvoke $r8.<org.quartz.core.ListenerManagerImpl: boolean addTriggerListenerMatcher(java.lang.String,org.quartz.Matcher)>("tl2", $r13);

        $r14 = virtualinvoke $r8.<org.quartz.core.ListenerManagerImpl: java.util.List getTriggerListenerMatchers(java.lang.String)>("tl2");

        $i4 = interfaceinvoke $r14.<java.util.List: int size()>();

        staticinvoke <org.quartz.core.ListenerManagerTest: void assertEquals(java.lang.String,int,int)>("Unexpected size of listener\'s matcher list", 2, $i4);

        $r15 = new org.quartz.core.ListenerManagerImpl;

        specialinvoke $r15.<org.quartz.core.ListenerManagerImpl: void <init>()>();

        r3 = newarray (org.quartz.TriggerListener)[15];

        i5 = 0;

     label1:
        if i5 >= 15 goto label2;

        $r18 = new org.quartz.core.ListenerManagerTest$TestTriggerListener;

        $r19 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>();

        $r20 = virtualinvoke $r19.<java.util.UUID: java.lang.String toString()>();

        specialinvoke $r18.<org.quartz.core.ListenerManagerTest$TestTriggerListener: void <init>(java.lang.String)>($r20);

        r3[i5] = $r18;

        $r21 = r3[i5];

        virtualinvoke $r15.<org.quartz.core.ListenerManagerImpl: void addTriggerListener(org.quartz.TriggerListener)>($r21);

        i5 = i5 + 1;

        goto label1;

     label2:
        r24 = virtualinvoke $r15.<org.quartz.core.ListenerManagerImpl: java.util.List getTriggerListeners()>();

        i6 = 0;

        r4 = interfaceinvoke r24.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r16 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.quartz.TriggerListener) $r16;

        $r17 = r3[i6];

        staticinvoke <org.quartz.core.ListenerManagerTest: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("Unexpected order of listeners", $r17, r5);

        i6 = i6 + 1;

        goto label3;

     label4:
        return;
    }

    public void testManagementOfSchedulerListeners() throws java.lang.Exception
    {
        org.quartz.core.ListenerManagerTest r0;
        org.quartz.SchedulerListener[] r3;
        java.util.Iterator r4;
        org.quartz.SchedulerListener r5, $r14, $r16;
        org.quartz.core.ListenerManagerTest$TestSchedulerListener $r6, $r7, $r15;
        org.quartz.core.ListenerManagerImpl $r8, $r12;
        java.util.List $r9, $r10, $r11, r19;
        int $i1, $i2, $i3, i4, i5;
        boolean $z1;
        java.lang.Object $r13;

        r0 := @this: org.quartz.core.ListenerManagerTest;

        $r6 = new org.quartz.core.ListenerManagerTest$TestSchedulerListener;

        specialinvoke $r6.<org.quartz.core.ListenerManagerTest$TestSchedulerListener: void <init>()>();

        $r7 = new org.quartz.core.ListenerManagerTest$TestSchedulerListener;

        specialinvoke $r7.<org.quartz.core.ListenerManagerTest$TestSchedulerListener: void <init>()>();

        $r8 = new org.quartz.core.ListenerManagerImpl;

        specialinvoke $r8.<org.quartz.core.ListenerManagerImpl: void <init>()>();

        virtualinvoke $r8.<org.quartz.core.ListenerManagerImpl: void addSchedulerListener(org.quartz.SchedulerListener)>($r6);

        $r9 = virtualinvoke $r8.<org.quartz.core.ListenerManagerImpl: java.util.List getSchedulerListeners()>();

        $i1 = interfaceinvoke $r9.<java.util.List: int size()>();

        staticinvoke <org.quartz.core.ListenerManagerTest: void assertEquals(java.lang.String,int,int)>("Unexpected size of listener list", 1, $i1);

        virtualinvoke $r8.<org.quartz.core.ListenerManagerImpl: void addSchedulerListener(org.quartz.SchedulerListener)>($r7);

        $r10 = virtualinvoke $r8.<org.quartz.core.ListenerManagerImpl: java.util.List getSchedulerListeners()>();

        $i2 = interfaceinvoke $r10.<java.util.List: int size()>();

        staticinvoke <org.quartz.core.ListenerManagerTest: void assertEquals(java.lang.String,int,int)>("Unexpected size of listener list", 2, $i2);

        virtualinvoke $r8.<org.quartz.core.ListenerManagerImpl: boolean removeSchedulerListener(org.quartz.SchedulerListener)>($r6);

        $r11 = virtualinvoke $r8.<org.quartz.core.ListenerManagerImpl: java.util.List getSchedulerListeners()>();

        $i3 = interfaceinvoke $r11.<java.util.List: int size()>();

        staticinvoke <org.quartz.core.ListenerManagerTest: void assertEquals(java.lang.String,int,int)>("Unexpected size of listener list", 1, $i3);

        $r12 = new org.quartz.core.ListenerManagerImpl;

        specialinvoke $r12.<org.quartz.core.ListenerManagerImpl: void <init>()>();

        r3 = newarray (org.quartz.SchedulerListener)[15];

        i4 = 0;

     label1:
        if i4 >= 15 goto label2;

        $r15 = new org.quartz.core.ListenerManagerTest$TestSchedulerListener;

        specialinvoke $r15.<org.quartz.core.ListenerManagerTest$TestSchedulerListener: void <init>()>();

        r3[i4] = $r15;

        $r16 = r3[i4];

        virtualinvoke $r12.<org.quartz.core.ListenerManagerImpl: void addSchedulerListener(org.quartz.SchedulerListener)>($r16);

        i4 = i4 + 1;

        goto label1;

     label2:
        r19 = virtualinvoke $r12.<org.quartz.core.ListenerManagerImpl: java.util.List getSchedulerListeners()>();

        i5 = 0;

        r4 = interfaceinvoke r19.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r13 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.quartz.SchedulerListener) $r13;

        $r14 = r3[i5];

        staticinvoke <org.quartz.core.ListenerManagerTest: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("Unexpected order of listeners", $r14, r5);

        i5 = i5 + 1;

        goto label3;

     label4:
        return;
    }
}
