public class org.quartz.JobDetailTest extends junit.framework.TestCase
{

    public void <init>()
    {
        org.quartz.JobDetailTest r0;

        r0 := @this: org.quartz.JobDetailTest;

        specialinvoke r0.<junit.framework.TestCase: void <init>()>();

        return;
    }

    public void testClone()
    {
        org.quartz.JobDetailTest r0;
        org.quartz.JobDetail r2;
        org.quartz.impl.JobDetailImpl $r3;
        java.lang.Object $r4;

        r0 := @this: org.quartz.JobDetailTest;

        $r3 = new org.quartz.impl.JobDetailImpl;

        specialinvoke $r3.<org.quartz.impl.JobDetailImpl: void <init>()>();

        virtualinvoke $r3.<org.quartz.impl.JobDetailImpl: void setName(java.lang.String)>("hi");

        $r4 = virtualinvoke $r3.<org.quartz.impl.JobDetailImpl: java.lang.Object clone()>();

        r2 = (org.quartz.JobDetail) $r4;

        staticinvoke <org.quartz.JobDetailTest: void assertEquals(java.lang.Object,java.lang.Object)>(r2, $r3);

        return;
    }

    public void testAnnotationDetection()
    {
        org.quartz.JobDetailTest r0;
        org.quartz.impl.JobDetailImpl $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15;

        r0 := @this: org.quartz.JobDetailTest;

        $r2 = new org.quartz.impl.JobDetailImpl;

        specialinvoke $r2.<org.quartz.impl.JobDetailImpl: void <init>()>();

        virtualinvoke $r2.<org.quartz.impl.JobDetailImpl: void setName(java.lang.String)>("hi");

        virtualinvoke $r2.<org.quartz.impl.JobDetailImpl: void setJobClass(java.lang.Class)>(class "Lorg/quartz/JobDetailTest$SomePersistentJob;");

        $z0 = virtualinvoke $r2.<org.quartz.impl.JobDetailImpl: boolean isPersistJobDataAfterExecution()>();

        staticinvoke <org.quartz.JobDetailTest: void assertTrue(java.lang.String,boolean)>("Expecting SomePersistentJob to be persistent", $z0);

        $z1 = virtualinvoke $r2.<org.quartz.impl.JobDetailImpl: boolean isConcurrentExectionDisallowed()>();

        staticinvoke <org.quartz.JobDetailTest: void assertFalse(java.lang.String,boolean)>("Expecting SomePersistentJob to not disallow concurrent execution", $z1);

        virtualinvoke $r2.<org.quartz.impl.JobDetailImpl: void setJobClass(java.lang.Class)>(class "Lorg/quartz/JobDetailTest$SomeNonConcurrentJob;");

        $z2 = virtualinvoke $r2.<org.quartz.impl.JobDetailImpl: boolean isPersistJobDataAfterExecution()>();

        staticinvoke <org.quartz.JobDetailTest: void assertFalse(java.lang.String,boolean)>("Expecting SomeNonConcurrentJob to not be persistent", $z2);

        $z3 = virtualinvoke $r2.<org.quartz.impl.JobDetailImpl: boolean isConcurrentExectionDisallowed()>();

        staticinvoke <org.quartz.JobDetailTest: void assertTrue(java.lang.String,boolean)>("Expecting SomeNonConcurrentJob to disallow concurrent execution", $z3);

        virtualinvoke $r2.<org.quartz.impl.JobDetailImpl: void setJobClass(java.lang.Class)>(class "Lorg/quartz/JobDetailTest$SomeNonConcurrentPersistentJob;");

        $z4 = virtualinvoke $r2.<org.quartz.impl.JobDetailImpl: boolean isPersistJobDataAfterExecution()>();

        staticinvoke <org.quartz.JobDetailTest: void assertTrue(java.lang.String,boolean)>("Expecting SomeNonConcurrentPersistentJob to be persistent", $z4);

        $z5 = virtualinvoke $r2.<org.quartz.impl.JobDetailImpl: boolean isConcurrentExectionDisallowed()>();

        staticinvoke <org.quartz.JobDetailTest: void assertTrue(java.lang.String,boolean)>("Expecting SomeNonConcurrentPersistentJob to disallow concurrent execution", $z5);

        virtualinvoke $r2.<org.quartz.impl.JobDetailImpl: void setJobClass(java.lang.Class)>(class "Lorg/quartz/JobDetailTest$SomeStatefulJob;");

        $z6 = virtualinvoke $r2.<org.quartz.impl.JobDetailImpl: boolean isPersistJobDataAfterExecution()>();

        staticinvoke <org.quartz.JobDetailTest: void assertTrue(java.lang.String,boolean)>("Expecting SomeStatefulJob to be persistent", $z6);

        $z7 = virtualinvoke $r2.<org.quartz.impl.JobDetailImpl: boolean isConcurrentExectionDisallowed()>();

        staticinvoke <org.quartz.JobDetailTest: void assertTrue(java.lang.String,boolean)>("Expecting SomeStatefulJob to disallow concurrent execution", $z7);

        virtualinvoke $r2.<org.quartz.impl.JobDetailImpl: void setJobClass(java.lang.Class)>(class "Lorg/quartz/JobDetailTest$SomeExtendedPersistentJob;");

        $z8 = virtualinvoke $r2.<org.quartz.impl.JobDetailImpl: boolean isPersistJobDataAfterExecution()>();

        staticinvoke <org.quartz.JobDetailTest: void assertTrue(java.lang.String,boolean)>("Expecting SomeExtendedPersistentJob to be persistent", $z8);

        $z9 = virtualinvoke $r2.<org.quartz.impl.JobDetailImpl: boolean isConcurrentExectionDisallowed()>();

        staticinvoke <org.quartz.JobDetailTest: void assertFalse(java.lang.String,boolean)>("Expecting SomeExtendedPersistentJob to not disallow concurrent execution", $z9);

        virtualinvoke $r2.<org.quartz.impl.JobDetailImpl: void setJobClass(java.lang.Class)>(class "Lorg/quartz/JobDetailTest$SomeExtendedNonConcurrentJob;");

        $z10 = virtualinvoke $r2.<org.quartz.impl.JobDetailImpl: boolean isPersistJobDataAfterExecution()>();

        staticinvoke <org.quartz.JobDetailTest: void assertFalse(java.lang.String,boolean)>("Expecting SomeExtendedNonConcurrentJob to not be persistent", $z10);

        $z11 = virtualinvoke $r2.<org.quartz.impl.JobDetailImpl: boolean isConcurrentExectionDisallowed()>();

        staticinvoke <org.quartz.JobDetailTest: void assertTrue(java.lang.String,boolean)>("Expecting SomeExtendedNonConcurrentJob to disallow concurrent execution", $z11);

        virtualinvoke $r2.<org.quartz.impl.JobDetailImpl: void setJobClass(java.lang.Class)>(class "Lorg/quartz/JobDetailTest$SomeExtendedNonConcurrentPersistentJob;");

        $z12 = virtualinvoke $r2.<org.quartz.impl.JobDetailImpl: boolean isPersistJobDataAfterExecution()>();

        staticinvoke <org.quartz.JobDetailTest: void assertTrue(java.lang.String,boolean)>("Expecting SomeExtendedNonConcurrentPersistentJob to be persistent", $z12);

        $z13 = virtualinvoke $r2.<org.quartz.impl.JobDetailImpl: boolean isConcurrentExectionDisallowed()>();

        staticinvoke <org.quartz.JobDetailTest: void assertTrue(java.lang.String,boolean)>("Expecting SomeExtendedNonConcurrentPersistentJob to disallow concurrent execution", $z13);

        virtualinvoke $r2.<org.quartz.impl.JobDetailImpl: void setJobClass(java.lang.Class)>(class "Lorg/quartz/JobDetailTest$SomeExtendedStatefulJob;");

        $z14 = virtualinvoke $r2.<org.quartz.impl.JobDetailImpl: boolean isPersistJobDataAfterExecution()>();

        staticinvoke <org.quartz.JobDetailTest: void assertTrue(java.lang.String,boolean)>("Expecting SomeExtendedStatefulJob to be persistent", $z14);

        $z15 = virtualinvoke $r2.<org.quartz.impl.JobDetailImpl: boolean isConcurrentExectionDisallowed()>();

        staticinvoke <org.quartz.JobDetailTest: void assertTrue(java.lang.String,boolean)>("Expecting SomeExtendedStatefulJob to disallow concurrent execution", $z15);

        return;
    }
}
