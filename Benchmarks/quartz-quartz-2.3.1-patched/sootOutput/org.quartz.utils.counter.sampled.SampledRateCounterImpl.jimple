public class org.quartz.utils.counter.sampled.SampledRateCounterImpl extends org.quartz.utils.counter.sampled.SampledCounterImpl implements org.quartz.utils.counter.sampled.SampledRateCounter
{
    private static final long serialVersionUID;
    private static final java.lang.String OPERATION_NOT_SUPPORTED_MSG;
    private long numeratorValue;
    private long denominatorValue;

    public void <init>(org.quartz.utils.counter.sampled.SampledRateCounterConfig)
    {
        org.quartz.utils.counter.sampled.SampledRateCounterImpl r0;
        org.quartz.utils.counter.sampled.SampledRateCounterConfig r1;

        r0 := @this: org.quartz.utils.counter.sampled.SampledRateCounterImpl;

        r1 := @parameter0: org.quartz.utils.counter.sampled.SampledRateCounterConfig;

        specialinvoke r0.<org.quartz.utils.counter.sampled.SampledCounterImpl: void <init>(org.quartz.utils.counter.sampled.SampledCounterConfig)>(r1);

        return;
    }

    public synchronized void setValue(long, long)
    {
        org.quartz.utils.counter.sampled.SampledRateCounterImpl r0;
        long l0, l1;

        r0 := @this: org.quartz.utils.counter.sampled.SampledRateCounterImpl;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        r0.<org.quartz.utils.counter.sampled.SampledRateCounterImpl: long numeratorValue> = l0;

        r0.<org.quartz.utils.counter.sampled.SampledRateCounterImpl: long denominatorValue> = l1;

        return;
    }

    public synchronized void increment(long, long)
    {
        org.quartz.utils.counter.sampled.SampledRateCounterImpl r0;
        long l0, l1, $l2, $l3, $l4, $l5;

        r0 := @this: org.quartz.utils.counter.sampled.SampledRateCounterImpl;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $l2 = r0.<org.quartz.utils.counter.sampled.SampledRateCounterImpl: long numeratorValue>;

        $l3 = $l2 + l0;

        r0.<org.quartz.utils.counter.sampled.SampledRateCounterImpl: long numeratorValue> = $l3;

        $l4 = r0.<org.quartz.utils.counter.sampled.SampledRateCounterImpl: long denominatorValue>;

        $l5 = $l4 + l1;

        r0.<org.quartz.utils.counter.sampled.SampledRateCounterImpl: long denominatorValue> = $l5;

        return;
    }

    public synchronized void decrement(long, long)
    {
        org.quartz.utils.counter.sampled.SampledRateCounterImpl r0;
        long l0, l1, $l2, $l3, $l4, $l5;

        r0 := @this: org.quartz.utils.counter.sampled.SampledRateCounterImpl;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $l2 = r0.<org.quartz.utils.counter.sampled.SampledRateCounterImpl: long numeratorValue>;

        $l3 = $l2 - l0;

        r0.<org.quartz.utils.counter.sampled.SampledRateCounterImpl: long numeratorValue> = $l3;

        $l4 = r0.<org.quartz.utils.counter.sampled.SampledRateCounterImpl: long denominatorValue>;

        $l5 = $l4 - l1;

        r0.<org.quartz.utils.counter.sampled.SampledRateCounterImpl: long denominatorValue> = $l5;

        return;
    }

    public synchronized void setDenominatorValue(long)
    {
        org.quartz.utils.counter.sampled.SampledRateCounterImpl r0;
        long l0;

        r0 := @this: org.quartz.utils.counter.sampled.SampledRateCounterImpl;

        l0 := @parameter0: long;

        r0.<org.quartz.utils.counter.sampled.SampledRateCounterImpl: long denominatorValue> = l0;

        return;
    }

    public synchronized void setNumeratorValue(long)
    {
        org.quartz.utils.counter.sampled.SampledRateCounterImpl r0;
        long l0;

        r0 := @this: org.quartz.utils.counter.sampled.SampledRateCounterImpl;

        l0 := @parameter0: long;

        r0.<org.quartz.utils.counter.sampled.SampledRateCounterImpl: long numeratorValue> = l0;

        return;
    }

    public synchronized long getValue()
    {
        org.quartz.utils.counter.sampled.SampledRateCounterImpl r0;
        long $l0, $l2, $l3, $l4;
        byte $b1;

        r0 := @this: org.quartz.utils.counter.sampled.SampledRateCounterImpl;

        $l0 = r0.<org.quartz.utils.counter.sampled.SampledRateCounterImpl: long denominatorValue>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        $l4 = 0L;

        goto label2;

     label1:
        $l3 = r0.<org.quartz.utils.counter.sampled.SampledRateCounterImpl: long numeratorValue>;

        $l2 = r0.<org.quartz.utils.counter.sampled.SampledRateCounterImpl: long denominatorValue>;

        $l4 = $l3 / $l2;

     label2:
        return $l4;
    }

    public synchronized long getAndReset()
    {
        org.quartz.utils.counter.sampled.SampledRateCounterImpl r0;
        long l0;

        r0 := @this: org.quartz.utils.counter.sampled.SampledRateCounterImpl;

        l0 = virtualinvoke r0.<org.quartz.utils.counter.sampled.SampledRateCounterImpl: long getValue()>();

        virtualinvoke r0.<org.quartz.utils.counter.sampled.SampledRateCounterImpl: void setValue(long,long)>(0L, 0L);

        return l0;
    }

    public long getAndSet(long)
    {
        org.quartz.utils.counter.sampled.SampledRateCounterImpl r0;
        long l0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.quartz.utils.counter.sampled.SampledRateCounterImpl;

        l0 := @parameter0: long;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This operation is not supported. Use SampledCounter Or Counter instead");

        throw $r1;
    }

    public synchronized void setValue(long)
    {
        org.quartz.utils.counter.sampled.SampledRateCounterImpl r0;
        long l0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.quartz.utils.counter.sampled.SampledRateCounterImpl;

        l0 := @parameter0: long;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This operation is not supported. Use SampledCounter Or Counter instead");

        throw $r1;
    }

    public long decrement()
    {
        org.quartz.utils.counter.sampled.SampledRateCounterImpl r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.quartz.utils.counter.sampled.SampledRateCounterImpl;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This operation is not supported. Use SampledCounter Or Counter instead");

        throw $r1;
    }

    public long decrement(long)
    {
        org.quartz.utils.counter.sampled.SampledRateCounterImpl r0;
        long l0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.quartz.utils.counter.sampled.SampledRateCounterImpl;

        l0 := @parameter0: long;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This operation is not supported. Use SampledCounter Or Counter instead");

        throw $r1;
    }

    public long getMaxValue()
    {
        org.quartz.utils.counter.sampled.SampledRateCounterImpl r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.quartz.utils.counter.sampled.SampledRateCounterImpl;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This operation is not supported. Use SampledCounter Or Counter instead");

        throw $r1;
    }

    public long getMinValue()
    {
        org.quartz.utils.counter.sampled.SampledRateCounterImpl r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.quartz.utils.counter.sampled.SampledRateCounterImpl;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This operation is not supported. Use SampledCounter Or Counter instead");

        throw $r1;
    }

    public long increment()
    {
        org.quartz.utils.counter.sampled.SampledRateCounterImpl r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.quartz.utils.counter.sampled.SampledRateCounterImpl;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This operation is not supported. Use SampledCounter Or Counter instead");

        throw $r1;
    }

    public long increment(long)
    {
        org.quartz.utils.counter.sampled.SampledRateCounterImpl r0;
        long l0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.quartz.utils.counter.sampled.SampledRateCounterImpl;

        l0 := @parameter0: long;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This operation is not supported. Use SampledCounter Or Counter instead");

        throw $r1;
    }

    public static void <clinit>()
    {
        <org.quartz.utils.counter.sampled.SampledRateCounterImpl: java.lang.String OPERATION_NOT_SUPPORTED_MSG> = "This operation is not supported. Use SampledCounter Or Counter instead";

        <org.quartz.utils.counter.sampled.SampledRateCounterImpl: long serialVersionUID> = 6531350452676920607L;

        return;
    }
}
