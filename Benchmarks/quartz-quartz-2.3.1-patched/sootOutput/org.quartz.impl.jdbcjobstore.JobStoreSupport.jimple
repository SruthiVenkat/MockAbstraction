public abstract class org.quartz.impl.jdbcjobstore.JobStoreSupport extends java.lang.Object implements org.quartz.spi.JobStore, org.quartz.impl.jdbcjobstore.Constants
{
    protected static final java.lang.String LOCK_TRIGGER_ACCESS;
    protected static final java.lang.String LOCK_STATE_ACCESS;
    protected java.lang.String dsName;
    protected java.lang.String tablePrefix;
    protected boolean useProperties;
    protected java.lang.String instanceId;
    protected java.lang.String instanceName;
    protected java.lang.String delegateClassName;
    protected java.lang.String delegateInitString;
    protected java.lang.Class delegateClass;
    protected java.util.HashMap calendarCache;
    private org.quartz.impl.jdbcjobstore.DriverDelegate delegate;
    private long misfireThreshold;
    private boolean dontSetAutoCommitFalse;
    private boolean isClustered;
    private boolean useDBLocks;
    private boolean lockOnInsert;
    private org.quartz.impl.jdbcjobstore.Semaphore lockHandler;
    private java.lang.String selectWithLockSQL;
    private long clusterCheckinInterval;
    private org.quartz.impl.jdbcjobstore.JobStoreSupport$ClusterManager clusterManagementThread;
    private org.quartz.impl.jdbcjobstore.JobStoreSupport$MisfireHandler misfireHandler;
    private org.quartz.spi.ClassLoadHelper classLoadHelper;
    private org.quartz.spi.SchedulerSignaler schedSignaler;
    protected int maxToRecoverAtATime;
    private boolean setTxIsolationLevelSequential;
    private boolean acquireTriggersWithinLock;
    private long dbRetryInterval;
    private boolean makeThreadsDaemons;
    private boolean threadsInheritInitializersClassLoadContext;
    private java.lang.ClassLoader initializersLoader;
    private boolean doubleCheckLockMisfireHandler;
    private final org.slf4j.Logger log;
    private org.quartz.spi.ThreadExecutor threadExecutor;
    private volatile boolean schedulerRunning;
    private volatile boolean shutdown;
    private static long ftrCtr;
    protected java.lang.ThreadLocal sigChangeForTxCompletion;
    protected boolean firstCheckIn;
    protected long lastCheckin;

    public void <init>()
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.util.HashMap $r1;
        java.lang.Class $r2;
        org.slf4j.Logger $r3;
        org.quartz.impl.DefaultThreadExecutor $r4;
        java.lang.ThreadLocal $r5;
        long $l0;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.String tablePrefix> = "QRTZ_";

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean useProperties> = 0;

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.Class delegateClass> = class "Lorg/quartz/impl/jdbcjobstore/StdJDBCDelegate;";

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.util.HashMap calendarCache> = $r1;

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: long misfireThreshold> = 60000L;

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean dontSetAutoCommitFalse> = 0;

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean isClustered> = 0;

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean useDBLocks> = 0;

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean lockOnInsert> = 1;

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.Semaphore lockHandler> = null;

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.String selectWithLockSQL> = null;

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: long clusterCheckinInterval> = 7500L;

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.JobStoreSupport$ClusterManager clusterManagementThread> = null;

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.JobStoreSupport$MisfireHandler misfireHandler> = null;

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: int maxToRecoverAtATime> = 20;

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean setTxIsolationLevelSequential> = 0;

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean acquireTriggersWithinLock> = 0;

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: long dbRetryInterval> = 15000L;

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean makeThreadsDaemons> = 0;

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean threadsInheritInitializersClassLoadContext> = 0;

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.ClassLoader initializersLoader> = null;

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean doubleCheckLockMisfireHandler> = 1;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>($r2);

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.slf4j.Logger log> = $r3;

        $r4 = new org.quartz.impl.DefaultThreadExecutor;

        specialinvoke $r4.<org.quartz.impl.DefaultThreadExecutor: void <init>()>();

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.spi.ThreadExecutor threadExecutor> = $r4;

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean schedulerRunning> = 0;

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean shutdown> = 0;

        $r5 = new java.lang.ThreadLocal;

        specialinvoke $r5.<java.lang.ThreadLocal: void <init>()>();

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.ThreadLocal sigChangeForTxCompletion> = $r5;

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean firstCheckIn> = 1;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: long lastCheckin> = $l0;

        return;
    }

    public void setDataSource(java.lang.String)
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.lang.String r1;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.lang.String;

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.String dsName> = r1;

        return;
    }

    public java.lang.String getDataSource()
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.lang.String $r1;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        $r1 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.String dsName>;

        return $r1;
    }

    public void setTablePrefix(java.lang.String)
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.lang.String r1;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        r1 = "";

     label1:
        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.String tablePrefix> = r1;

        return;
    }

    public java.lang.String getTablePrefix()
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.lang.String $r1;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        $r1 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.String tablePrefix>;

        return $r1;
    }

    public void setUseProperties(java.lang.String)
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.lang.Boolean $r1;
        boolean $z0;
        java.lang.String r2;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r2 := @parameter0: java.lang.String;

        if r2 != null goto label1;

        r2 = "false";

     label1:
        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>(r2);

        $z0 = virtualinvoke $r1.<java.lang.Boolean: boolean booleanValue()>();

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean useProperties> = $z0;

        return;
    }

    public boolean canUseProperties()
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        boolean $z0;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        $z0 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean useProperties>;

        return $z0;
    }

    public void setInstanceId(java.lang.String)
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.lang.String r1;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.lang.String;

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.String instanceId> = r1;

        return;
    }

    public java.lang.String getInstanceId()
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.lang.String $r1;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        $r1 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.String instanceId>;

        return $r1;
    }

    public void setInstanceName(java.lang.String)
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.lang.String r1;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.lang.String;

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.String instanceName> = r1;

        return;
    }

    public void setThreadPoolSize(int)
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        int i0;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        i0 := @parameter0: int;

        return;
    }

    public void setThreadExecutor(org.quartz.spi.ThreadExecutor)
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        org.quartz.spi.ThreadExecutor r1;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: org.quartz.spi.ThreadExecutor;

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.spi.ThreadExecutor threadExecutor> = r1;

        return;
    }

    public org.quartz.spi.ThreadExecutor getThreadExecutor()
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        org.quartz.spi.ThreadExecutor $r1;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        $r1 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.spi.ThreadExecutor threadExecutor>;

        return $r1;
    }

    public java.lang.String getInstanceName()
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.lang.String $r1;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        $r1 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.String instanceName>;

        return $r1;
    }

    public long getEstimatedTimeToReleaseAndAcquireTrigger()
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        return 70L;
    }

    public void setIsClustered(boolean)
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        boolean z0;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        z0 := @parameter0: boolean;

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean isClustered> = z0;

        return;
    }

    public boolean isClustered()
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        boolean $z0;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        $z0 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean isClustered>;

        return $z0;
    }

    public long getClusterCheckinInterval()
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        long $l0;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        $l0 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: long clusterCheckinInterval>;

        return $l0;
    }

    public void setClusterCheckinInterval(long)
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        long l0;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        l0 := @parameter0: long;

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: long clusterCheckinInterval> = l0;

        return;
    }

    public int getMaxMisfiresToHandleAtATime()
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        int $i0;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        $i0 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: int maxToRecoverAtATime>;

        return $i0;
    }

    public void setMaxMisfiresToHandleAtATime(int)
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        int i0;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        i0 := @parameter0: int;

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: int maxToRecoverAtATime> = i0;

        return;
    }

    public long getDbRetryInterval()
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        long $l0;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        $l0 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: long dbRetryInterval>;

        return $l0;
    }

    public void setDbRetryInterval(long)
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        long l0;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        l0 := @parameter0: long;

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: long dbRetryInterval> = l0;

        return;
    }

    public void setUseDBLocks(boolean)
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        boolean z0;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        z0 := @parameter0: boolean;

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean useDBLocks> = z0;

        return;
    }

    public boolean getUseDBLocks()
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        boolean $z0;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        $z0 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean useDBLocks>;

        return $z0;
    }

    public boolean isLockOnInsert()
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        boolean $z0;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        $z0 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean lockOnInsert>;

        return $z0;
    }

    public void setLockOnInsert(boolean)
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        boolean z0;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        z0 := @parameter0: boolean;

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean lockOnInsert> = z0;

        return;
    }

    public long getMisfireThreshold()
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        long $l0;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        $l0 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: long misfireThreshold>;

        return $l0;
    }

    public void setMisfireThreshold(long)
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        long l0;
        byte $b1;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        l0 := @parameter0: long;

        $b1 = l0 cmp 1L;

        if $b1 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Misfirethreshold must be larger than 0");

        throw $r1;

     label1:
        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: long misfireThreshold> = l0;

        return;
    }

    public boolean isDontSetAutoCommitFalse()
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        boolean $z0;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        $z0 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean dontSetAutoCommitFalse>;

        return $z0;
    }

    public void setDontSetAutoCommitFalse(boolean)
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        boolean z0;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        z0 := @parameter0: boolean;

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean dontSetAutoCommitFalse> = z0;

        return;
    }

    public boolean isTxIsolationLevelSerializable()
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        boolean $z0;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        $z0 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean setTxIsolationLevelSequential>;

        return $z0;
    }

    public void setTxIsolationLevelSerializable(boolean)
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        boolean z0;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        z0 := @parameter0: boolean;

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean setTxIsolationLevelSequential> = z0;

        return;
    }

    public boolean isAcquireTriggersWithinLock()
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        boolean $z0;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        $z0 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean acquireTriggersWithinLock>;

        return $z0;
    }

    public void setAcquireTriggersWithinLock(boolean)
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        boolean z0;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        z0 := @parameter0: boolean;

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean acquireTriggersWithinLock> = z0;

        return;
    }

    public void setDriverDelegateClass(java.lang.String) throws org.quartz.impl.jdbcjobstore.InvalidConfigurationException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.lang.String r1;
        java.lang.Throwable $r5;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.lang.String;

        entermonitor r0;

     label1:
        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.String delegateClassName> = r1;

        exitmonitor r0;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        exitmonitor r0;

     label4:
        throw $r5;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.lang.String getDriverDelegateClass()
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.lang.String $r1;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        $r1 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.String delegateClassName>;

        return $r1;
    }

    public void setDriverDelegateInitString(java.lang.String) throws org.quartz.impl.jdbcjobstore.InvalidConfigurationException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.lang.String r1;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.lang.String;

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.String delegateInitString> = r1;

        return;
    }

    public java.lang.String getDriverDelegateInitString()
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.lang.String $r1;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        $r1 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.String delegateInitString>;

        return $r1;
    }

    public java.lang.String getSelectWithLockSQL()
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.lang.String $r1;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        $r1 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.String selectWithLockSQL>;

        return $r1;
    }

    public void setSelectWithLockSQL(java.lang.String)
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.lang.String r1;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.lang.String;

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.String selectWithLockSQL> = r1;

        return;
    }

    protected org.quartz.spi.ClassLoadHelper getClassLoadHelper()
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        org.quartz.spi.ClassLoadHelper $r1;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        $r1 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.spi.ClassLoadHelper classLoadHelper>;

        return $r1;
    }

    public boolean getMakeThreadsDaemons()
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        boolean $z0;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        $z0 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean makeThreadsDaemons>;

        return $z0;
    }

    public void setMakeThreadsDaemons(boolean)
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        boolean z0;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        z0 := @parameter0: boolean;

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean makeThreadsDaemons> = z0;

        return;
    }

    public boolean isThreadsInheritInitializersClassLoadContext()
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        boolean $z0;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        $z0 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean threadsInheritInitializersClassLoadContext>;

        return $z0;
    }

    public void setThreadsInheritInitializersClassLoadContext(boolean)
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        boolean z0;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        z0 := @parameter0: boolean;

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean threadsInheritInitializersClassLoadContext> = z0;

        return;
    }

    public boolean getDoubleCheckLockMisfireHandler()
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        boolean $z0;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        $z0 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean doubleCheckLockMisfireHandler>;

        return $z0;
    }

    public void setDoubleCheckLockMisfireHandler(boolean)
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        boolean z0;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        z0 := @parameter0: boolean;

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean doubleCheckLockMisfireHandler> = z0;

        return;
    }

    public long getAcquireRetryDelay(int)
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        int i0;
        long $l1;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        i0 := @parameter0: int;

        $l1 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: long dbRetryInterval>;

        return $l1;
    }

    protected org.slf4j.Logger getLog()
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        org.slf4j.Logger $r1;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        $r1 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.slf4j.Logger log>;

        return $r1;
    }

    public void initialize(org.quartz.spi.ClassLoadHelper, org.quartz.spi.SchedulerSignaler) throws org.quartz.SchedulerConfigException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        org.quartz.spi.ClassLoadHelper r1;
        org.quartz.spi.SchedulerSignaler r2;
        java.lang.String $r4, $r8, $r9, $r11, $r12, $r18, $r23, $r25, $r31, $r32, $r33;
        boolean $z0, $z1, $z2, $z3;
        org.quartz.impl.jdbcjobstore.Semaphore $r5;
        org.slf4j.Logger $r6, $r13, $r20, $r29;
        org.quartz.impl.jdbcjobstore.SimpleSemaphore $r7;
        java.lang.Class $r10;
        java.lang.StringBuilder $r14, $r15, $r16, $r17, $r19, $r21, $r24;
        java.lang.Thread $r22, $r26;
        java.lang.ClassLoader $r27;
        org.quartz.SchedulerConfigException $r28;
        org.quartz.impl.jdbcjobstore.StdRowLockSemaphore $r30;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: org.quartz.spi.ClassLoadHelper;

        r2 := @parameter1: org.quartz.spi.SchedulerSignaler;

        $r4 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.String dsName>;

        if $r4 != null goto label1;

        $r28 = new org.quartz.SchedulerConfigException;

        specialinvoke $r28.<org.quartz.SchedulerConfigException: void <init>(java.lang.String)>("DataSource name not set.");

        throw $r28;

     label1:
        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.spi.ClassLoadHelper classLoadHelper> = r1;

        $z0 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean isThreadsInheritInitializersClassLoadContext()>();

        if $z0 == 0 goto label2;

        $r20 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.slf4j.Logger log>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("JDBCJobStore threads will inherit ContextClassLoader of thread: ");

        $r22 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r23 = virtualinvoke $r22.<java.lang.Thread: java.lang.String getName()>();

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r20.<org.slf4j.Logger: void info(java.lang.String)>($r25);

        $r26 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r27 = virtualinvoke $r26.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.ClassLoader initializersLoader> = $r27;

     label2:
        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.spi.SchedulerSignaler schedSignaler> = r2;

        $r5 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.Semaphore getLockHandler()>();

        if $r5 != null goto label6;

        $z1 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean isClustered()>();

        if $z1 == 0 goto label3;

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void setUseDBLocks(boolean)>(1);

     label3:
        $z2 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean getUseDBLocks()>();

        if $z2 == 0 goto label5;

        $r8 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.String getDriverDelegateClass()>();

        if $r8 == null goto label4;

        $r9 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.String getDriverDelegateClass()>();

        $r10 = class "Lorg/quartz/impl/jdbcjobstore/MSSQLDelegate;";

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

        $z3 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z3 == 0 goto label4;

        $r12 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.String getSelectWithLockSQL()>();

        if $r12 != null goto label4;

        $r13 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.slf4j.Logger getLog()>();

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Detected usage of MSSQLDelegate class - defaulting \'selectWithLockSQL\' to \'");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT * FROM {0}LOCKS WITH (UPDLOCK,ROWLOCK) WHERE SCHED_NAME = {1} AND LOCK_NAME = ?");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r13.<org.slf4j.Logger: void info(java.lang.String)>($r18);

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void setSelectWithLockSQL(java.lang.String)>("SELECT * FROM {0}LOCKS WITH (UPDLOCK,ROWLOCK) WHERE SCHED_NAME = {1} AND LOCK_NAME = ?");

     label4:
        $r29 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.slf4j.Logger getLog()>();

        interfaceinvoke $r29.<org.slf4j.Logger: void info(java.lang.String)>("Using db table-based data access locking (synchronization).");

        $r30 = new org.quartz.impl.jdbcjobstore.StdRowLockSemaphore;

        $r31 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.String getTablePrefix()>();

        $r32 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.String getInstanceName()>();

        $r33 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.String getSelectWithLockSQL()>();

        specialinvoke $r30.<org.quartz.impl.jdbcjobstore.StdRowLockSemaphore: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r31, $r32, $r33);

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void setLockHandler(org.quartz.impl.jdbcjobstore.Semaphore)>($r30);

        goto label6;

     label5:
        $r6 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.slf4j.Logger getLog()>();

        interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String)>("Using thread monitor-based data access locking (synchronization).");

        $r7 = new org.quartz.impl.jdbcjobstore.SimpleSemaphore;

        specialinvoke $r7.<org.quartz.impl.jdbcjobstore.SimpleSemaphore: void <init>()>();

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void setLockHandler(org.quartz.impl.jdbcjobstore.Semaphore)>($r7);

     label6:
        return;
    }

    public void schedulerStarted() throws org.quartz.SchedulerException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        boolean $z0;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$MisfireHandler $r2, $r4, $r7;
        java.lang.ClassLoader $r3, $r6, $r9, $r11;
        org.slf4j.Logger $r5;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$ClusterManager $r8, $r10, $r12;
        org.quartz.SchedulerException $r13;
        org.quartz.SchedulerConfigException $r14;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        $z0 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean isClustered()>();

        if $z0 == 0 goto label2;

        $r8 = new org.quartz.impl.jdbcjobstore.JobStoreSupport$ClusterManager;

        specialinvoke $r8.<org.quartz.impl.jdbcjobstore.JobStoreSupport$ClusterManager: void <init>(org.quartz.impl.jdbcjobstore.JobStoreSupport)>(r0);

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.JobStoreSupport$ClusterManager clusterManagementThread> = $r8;

        $r9 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.ClassLoader initializersLoader>;

        if $r9 == null goto label1;

        $r12 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.JobStoreSupport$ClusterManager clusterManagementThread>;

        $r11 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.ClassLoader initializersLoader>;

        virtualinvoke $r12.<org.quartz.impl.jdbcjobstore.JobStoreSupport$ClusterManager: void setContextClassLoader(java.lang.ClassLoader)>($r11);

     label1:
        $r10 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.JobStoreSupport$ClusterManager clusterManagementThread>;

        virtualinvoke $r10.<org.quartz.impl.jdbcjobstore.JobStoreSupport$ClusterManager: void initialize()>();

        goto label5;

     label2:
        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void recoverJobs()>();

     label3:
        goto label5;

     label4:
        $r13 := @caughtexception;

        $r14 = new org.quartz.SchedulerConfigException;

        specialinvoke $r14.<org.quartz.SchedulerConfigException: void <init>(java.lang.String,java.lang.Throwable)>("Failure occured during job recovery.", $r13);

        throw $r14;

     label5:
        $r2 = new org.quartz.impl.jdbcjobstore.JobStoreSupport$MisfireHandler;

        specialinvoke $r2.<org.quartz.impl.jdbcjobstore.JobStoreSupport$MisfireHandler: void <init>(org.quartz.impl.jdbcjobstore.JobStoreSupport)>(r0);

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.JobStoreSupport$MisfireHandler misfireHandler> = $r2;

        $r3 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.ClassLoader initializersLoader>;

        if $r3 == null goto label6;

        $r7 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.JobStoreSupport$MisfireHandler misfireHandler>;

        $r6 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.ClassLoader initializersLoader>;

        virtualinvoke $r7.<org.quartz.impl.jdbcjobstore.JobStoreSupport$MisfireHandler: void setContextClassLoader(java.lang.ClassLoader)>($r6);

     label6:
        $r4 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.JobStoreSupport$MisfireHandler misfireHandler>;

        virtualinvoke $r4.<org.quartz.impl.jdbcjobstore.JobStoreSupport$MisfireHandler: void initialize()>();

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean schedulerRunning> = 1;

        $r5 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.slf4j.Logger getLog()>();

        interfaceinvoke $r5.<org.slf4j.Logger: void debug(java.lang.String)>("JobStore background threads started (as scheduler was started).");

        return;

        catch org.quartz.SchedulerException from label2 to label3 with label4;
    }

    public void schedulerPaused()
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean schedulerRunning> = 0;

        return;
    }

    public void schedulerResumed()
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean schedulerRunning> = 1;

        return;
    }

    public void shutdown()
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$MisfireHandler $r1, $r5, $r6;
        org.slf4j.Logger $r2, $r8;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$ClusterManager $r3, $r4, $r12;
        java.sql.SQLException $r7;
        java.lang.InterruptedException $r9, $r10;
        org.quartz.utils.DBConnectionManager $r14;
        java.lang.String $r15;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean shutdown> = 1;

        $r1 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.JobStoreSupport$MisfireHandler misfireHandler>;

        if $r1 == null goto label04;

        $r5 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.JobStoreSupport$MisfireHandler misfireHandler>;

        virtualinvoke $r5.<org.quartz.impl.jdbcjobstore.JobStoreSupport$MisfireHandler: void shutdown()>();

     label01:
        $r6 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.JobStoreSupport$MisfireHandler misfireHandler>;

        virtualinvoke $r6.<org.quartz.impl.jdbcjobstore.JobStoreSupport$MisfireHandler: void join()>();

     label02:
        goto label04;

     label03:
        $r9 := @caughtexception;

     label04:
        $r12 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.JobStoreSupport$ClusterManager clusterManagementThread>;

        if $r12 == null goto label08;

        $r3 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.JobStoreSupport$ClusterManager clusterManagementThread>;

        virtualinvoke $r3.<org.quartz.impl.jdbcjobstore.JobStoreSupport$ClusterManager: void shutdown()>();

     label05:
        $r4 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.JobStoreSupport$ClusterManager clusterManagementThread>;

        virtualinvoke $r4.<org.quartz.impl.jdbcjobstore.JobStoreSupport$ClusterManager: void join()>();

     label06:
        goto label08;

     label07:
        $r10 := @caughtexception;

     label08:
        $r14 = staticinvoke <org.quartz.utils.DBConnectionManager: org.quartz.utils.DBConnectionManager getInstance()>();

        $r15 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.String getDataSource()>();

        virtualinvoke $r14.<org.quartz.utils.DBConnectionManager: void shutdown(java.lang.String)>($r15);

     label09:
        goto label11;

     label10:
        $r7 := @caughtexception;

        $r8 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.slf4j.Logger getLog()>();

        interfaceinvoke $r8.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Database connection shutdown unsuccessful.", $r7);

     label11:
        $r2 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.slf4j.Logger getLog()>();

        interfaceinvoke $r2.<org.slf4j.Logger: void debug(java.lang.String)>("JobStore background threads shutdown.");

        return;

        catch java.lang.InterruptedException from label01 to label02 with label03;
        catch java.lang.InterruptedException from label05 to label06 with label07;
        catch java.sql.SQLException from label08 to label09 with label10;
    }

    public boolean supportsPersistence()
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        return 1;
    }

    protected abstract java.sql.Connection getNonManagedTXConnection() throws org.quartz.JobPersistenceException;

    protected java.sql.Connection getAttributeRestoringConnection(java.sql.Connection)
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1, $r7;
        java.lang.Thread $r2;
        java.lang.ClassLoader $r3;
        java.lang.Class[] $r4;
        org.quartz.impl.jdbcjobstore.AttributeRestoringConnectionInvocationHandler $r5;
        java.lang.Object $r6;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r3 = virtualinvoke $r2.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        $r4 = newarray (java.lang.Class)[1];

        $r4[0] = class "Ljava/sql/Connection;";

        $r5 = new org.quartz.impl.jdbcjobstore.AttributeRestoringConnectionInvocationHandler;

        specialinvoke $r5.<org.quartz.impl.jdbcjobstore.AttributeRestoringConnectionInvocationHandler: void <init>(java.sql.Connection)>(r1);

        $r6 = staticinvoke <java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>($r3, $r4, $r5);

        $r7 = (java.sql.Connection) $r6;

        return $r7;
    }

    protected java.sql.Connection getConnection() throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        org.quartz.utils.DBConnectionManager $r2;
        java.lang.String $r3, $r7, $r10, $r17, $r20, $r22, $r30, $r33, $r35;
        boolean $z0, $z1;
        org.quartz.JobPersistenceException $r4, $r12, $r14, $r27;
        java.lang.StringBuilder $r5, $r6, $r8, $r9, $r15, $r16, $r18, $r19, $r21, $r28, $r29, $r31, $r32, $r34;
        java.lang.Throwable $r11, $r13, $r23;
        java.sql.SQLException $r24, $r26;
        org.slf4j.Logger $r25;
        java.sql.Connection r36, r39;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

     label01:
        $r2 = staticinvoke <org.quartz.utils.DBConnectionManager: org.quartz.utils.DBConnectionManager getInstance()>();

        $r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.String getDataSource()>();

        r36 = virtualinvoke $r2.<org.quartz.utils.DBConnectionManager: java.sql.Connection getConnection(java.lang.String)>($r3);

     label02:
        goto label05;

     label03:
        $r26 := @caughtexception;

        $r27 = new org.quartz.JobPersistenceException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to obtain DB connection from data source \'");

        $r30 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.String getDataSource()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': ");

        $r33 = virtualinvoke $r26.<java.sql.SQLException: java.lang.String toString()>();

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r35, $r26);

        throw $r27;

     label04:
        $r13 := @caughtexception;

        $r14 = new org.quartz.JobPersistenceException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to obtain DB connection from data source \'");

        $r17 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.String getDataSource()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': ");

        $r20 = virtualinvoke $r13.<java.lang.Throwable: java.lang.String toString()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r22, $r13);

        throw $r14;

     label05:
        if r36 != null goto label06;

        $r4 = new org.quartz.JobPersistenceException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not get connection from DataSource \'");

        $r7 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.String getDataSource()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.quartz.JobPersistenceException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label06:
        r39 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.sql.Connection getAttributeRestoringConnection(java.sql.Connection)>(r36);

     label07:
        $z0 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean isDontSetAutoCommitFalse()>();

        if $z0 != 0 goto label08;

        interfaceinvoke r39.<java.sql.Connection: void setAutoCommit(boolean)>(0);

     label08:
        $z1 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean isTxIsolationLevelSerializable()>();

        if $z1 == 0 goto label09;

        interfaceinvoke r39.<java.sql.Connection: void setTransactionIsolation(int)>(8);

     label09:
        goto label16;

     label10:
        $r24 := @caughtexception;

        $r25 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.slf4j.Logger getLog()>();

        interfaceinvoke $r25.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Failed to override connection auto commit/transaction isolation.", $r24);

        goto label16;

     label11:
        $r11 := @caughtexception;

     label12:
        interfaceinvoke r39.<java.sql.Connection: void close()>();

     label13:
        goto label15;

     label14:
        $r23 := @caughtexception;

     label15:
        $r12 = new org.quartz.JobPersistenceException;

        specialinvoke $r12.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>("Failure setting up connection.", $r11);

        throw $r12;

     label16:
        return r39;

        catch java.sql.SQLException from label01 to label02 with label03;
        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.sql.SQLException from label07 to label09 with label10;
        catch java.lang.Throwable from label07 to label09 with label11;
        catch java.lang.Throwable from label12 to label13 with label14;
    }

    protected void releaseLock(java.lang.String, boolean)
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.lang.String r1, $r8, $r10;
        boolean z0;
        org.quartz.impl.jdbcjobstore.Semaphore $r3;
        org.quartz.impl.jdbcjobstore.LockException $r4;
        org.slf4j.Logger $r5;
        java.lang.StringBuilder $r6, $r7, $r9;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label4;

     label1:
        $r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.Semaphore getLockHandler()>();

        interfaceinvoke $r3.<org.quartz.impl.jdbcjobstore.Semaphore: void releaseLock(java.lang.String)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.slf4j.Logger getLog()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error returning lock: ");

        $r8 = virtualinvoke $r4.<org.quartz.impl.jdbcjobstore.LockException: java.lang.String getMessage()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r5.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r10, $r4);

     label4:
        return;

        catch org.quartz.impl.jdbcjobstore.LockException from label1 to label2 with label3;
    }

    protected void recoverJobs() throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$1 $r1;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        $r1 = new org.quartz.impl.jdbcjobstore.JobStoreSupport$1;

        specialinvoke $r1.<org.quartz.impl.jdbcjobstore.JobStoreSupport$1: void <init>(org.quartz.impl.jdbcjobstore.JobStoreSupport)>(r0);

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.Object executeInNonManagedTXLock(java.lang.String,org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback,org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionValidator)>("TRIGGER_ACCESS", $r1, null);

        return;
    }

    protected void recoverJobs(java.sql.Connection) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        java.util.List r2, r49;
        org.quartz.TriggerKey r3;
        org.quartz.impl.jdbcjobstore.DriverDelegate $r4, $r5, $r13, $r21, $r28;
        int $i0, $i1, $i2, i3, i4, i5;
        org.slf4j.Logger $r6, $r14, $r20, $r22, $r29;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r15, $r16, $r17, $r18, $r23, $r24, $r25, $r26, $r30, $r31, $r32, $r33, $r42, $r43, $r45;
        java.lang.String $r11, $r19, $r27, $r34, $r44, $r46;
        boolean $z0, $z1, $z3;
        java.lang.Object $r35, $r36;
        org.quartz.JobKey $r37;
        org.quartz.JobPersistenceException $r39, $r41;
        java.lang.Exception $r40;
        java.util.Iterator r47, r50;
        org.quartz.spi.OperableTrigger r48;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

     label01:
        $r4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        i3 = interfaceinvoke $r4.<org.quartz.impl.jdbcjobstore.DriverDelegate: int updateTriggerStatesFromOtherStates(java.sql.Connection,java.lang.String,java.lang.String,java.lang.String)>(r1, "WAITING", "ACQUIRED", "BLOCKED");

        $r5 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $i0 = interfaceinvoke $r5.<org.quartz.impl.jdbcjobstore.DriverDelegate: int updateTriggerStatesFromOtherStates(java.sql.Connection,java.lang.String,java.lang.String,java.lang.String)>(r1, "PAUSED", "PAUSED_BLOCKED", "PAUSED_BLOCKED");

        i4 = i3 + $i0;

        $r6 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.slf4j.Logger getLog()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Freed ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" triggers from \'acquired\' / \'blocked\' state.");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String)>($r11);

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.JobStoreSupport$RecoverMisfiredJobsResult recoverMisfiredJobs(java.sql.Connection,boolean)>(r1, 1);

        $r13 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        r2 = interfaceinvoke $r13.<org.quartz.impl.jdbcjobstore.DriverDelegate: java.util.List selectTriggersForRecoveringJobs(java.sql.Connection)>(r1);

        $r14 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.slf4j.Logger getLog()>();

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Recovering ");

        $i1 = interfaceinvoke r2.<java.util.List: int size()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" jobs that were in-progress at the time of the last shut-down.");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r14.<org.slf4j.Logger: void info(java.lang.String)>($r19);

        r47 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r47.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r36 = interfaceinvoke r47.<java.util.Iterator: java.lang.Object next()>();

        r48 = (org.quartz.spi.OperableTrigger) $r36;

        $r37 = interfaceinvoke r48.<org.quartz.spi.OperableTrigger: org.quartz.JobKey getJobKey()>();

        $z3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean jobExists(java.sql.Connection,org.quartz.JobKey)>(r1, $r37);

        if $z3 == 0 goto label03;

        interfaceinvoke r48.<org.quartz.spi.OperableTrigger: java.util.Date computeFirstFireTime(org.quartz.Calendar)>(null);

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void storeTrigger(java.sql.Connection,org.quartz.spi.OperableTrigger,org.quartz.JobDetail,boolean,java.lang.String,boolean,boolean)>(r1, r48, null, 0, "WAITING", 0, 1);

     label03:
        goto label02;

     label04:
        $r20 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.slf4j.Logger getLog()>();

        interfaceinvoke $r20.<org.slf4j.Logger: void info(java.lang.String)>("Recovery complete.");

        $r21 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        r49 = interfaceinvoke $r21.<org.quartz.impl.jdbcjobstore.DriverDelegate: java.util.List selectTriggersInState(java.sql.Connection,java.lang.String)>(r1, "COMPLETE");

        r50 = interfaceinvoke r49.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z1 = interfaceinvoke r50.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label06;

        $r35 = interfaceinvoke r50.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.quartz.TriggerKey) $r35;

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean removeTrigger(java.sql.Connection,org.quartz.TriggerKey)>(r1, r3);

        goto label05;

     label06:
        $r22 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.slf4j.Logger getLog()>();

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Removed ");

        $i2 = interfaceinvoke r49.<java.util.List: int size()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" \'complete\' triggers.");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r22.<org.slf4j.Logger: void info(java.lang.String)>($r27);

        $r28 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        i5 = interfaceinvoke $r28.<org.quartz.impl.jdbcjobstore.DriverDelegate: int deleteFiredTriggers(java.sql.Connection)>(r1);

        $r29 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.slf4j.Logger getLog()>();

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Removed ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" stale fired job entries.");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r29.<org.slf4j.Logger: void info(java.lang.String)>($r34);

     label07:
        goto label10;

     label08:
        $r39 := @caughtexception;

        throw $r39;

     label09:
        $r40 := @caughtexception;

        $r41 = new org.quartz.JobPersistenceException;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t recover jobs: ");

        $r44 = virtualinvoke $r40.<java.lang.Exception: java.lang.String getMessage()>();

        $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r44);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r41.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r46, $r40);

        throw $r41;

     label10:
        return;

        catch org.quartz.JobPersistenceException from label01 to label07 with label08;
        catch java.lang.Exception from label01 to label07 with label09;
    }

    protected long getMisfireTime()
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        long $l0, $l3, l4, $l5;
        byte $b1, $b2;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        l4 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l0 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: long getMisfireThreshold()>();

        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label1;

        $l3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: long getMisfireThreshold()>();

        l4 = l4 - $l3;

     label1:
        $b2 = l4 cmp 0L;

        if $b2 <= 0 goto label2;

        $l5 = l4;

        goto label3;

     label2:
        $l5 = 0L;

     label3:
        return $l5;
    }

    protected org.quartz.impl.jdbcjobstore.JobStoreSupport$RecoverMisfiredJobsResult recoverMisfiredJobs(java.sql.Connection, boolean) throws org.quartz.JobPersistenceException, java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        boolean z0, z1, $z2;
        java.util.Iterator r3;
        org.quartz.TriggerKey r4;
        org.quartz.spi.OperableTrigger r5;
        java.util.LinkedList $r6;
        org.quartz.impl.jdbcjobstore.DriverDelegate $r7;
        long $l1, $l5, l9;
        int $i2, $i3, $i4, $i7, $i8;
        org.slf4j.Logger $r8, $r10, $r21;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$RecoverMisfiredJobsResult $r9, $r16;
        java.lang.StringBuilder $r11, $r12, $r13, $r14, $r22, $r23, $r24, $r25;
        java.lang.String $r15, $r26;
        java.lang.Object $r17;
        java.util.Date $r18, $r19, $r20;
        byte $b6;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $i8 = -1;

        goto label2;

     label1:
        $i8 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: int getMaxMisfiresToHandleAtATime()>();

     label2:
        $r6 = new java.util.LinkedList;

        specialinvoke $r6.<java.util.LinkedList: void <init>()>();

        l9 = 9223372036854775807L;

        $r7 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $l1 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: long getMisfireTime()>();

        z1 = interfaceinvoke $r7.<org.quartz.impl.jdbcjobstore.DriverDelegate: boolean hasMisfiredTriggersInState(java.sql.Connection,java.lang.String,long,int,java.util.List)>(r1, "WAITING", $l1, $i8, $r6);

        if z1 == 0 goto label3;

        $r21 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.slf4j.Logger getLog()>();

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Handling the first ");

        $i7 = interfaceinvoke $r6.<java.util.List: int size()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" triggers that missed their scheduled fire-time.  More misfired triggers remain to be processed.");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r21.<org.slf4j.Logger: void info(java.lang.String)>($r26);

        goto label5;

     label3:
        $i2 = interfaceinvoke $r6.<java.util.List: int size()>();

        if $i2 <= 0 goto label4;

        $r10 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.slf4j.Logger getLog()>();

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Handling ");

        $i3 = interfaceinvoke $r6.<java.util.List: int size()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" trigger(s) that missed their scheduled fire-time.");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<org.slf4j.Logger: void info(java.lang.String)>($r15);

        goto label5;

     label4:
        $r8 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.slf4j.Logger getLog()>();

        interfaceinvoke $r8.<org.slf4j.Logger: void debug(java.lang.String)>("Found 0 triggers that missed their scheduled fire-time.");

        $r9 = <org.quartz.impl.jdbcjobstore.JobStoreSupport$RecoverMisfiredJobsResult: org.quartz.impl.jdbcjobstore.JobStoreSupport$RecoverMisfiredJobsResult NO_OP>;

        return $r9;

     label5:
        r3 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label6:
        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label9;

        $r17 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.quartz.TriggerKey) $r17;

        r5 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.spi.OperableTrigger retrieveTrigger(java.sql.Connection,org.quartz.TriggerKey)>(r1, r4);

        if r5 != null goto label7;

        goto label6;

     label7:
        specialinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void doUpdateOfMisfiredTrigger(java.sql.Connection,org.quartz.spi.OperableTrigger,boolean,java.lang.String,boolean)>(r1, r5, 0, "WAITING", z0);

        $r18 = interfaceinvoke r5.<org.quartz.spi.OperableTrigger: java.util.Date getNextFireTime()>();

        if $r18 == null goto label8;

        $r19 = interfaceinvoke r5.<org.quartz.spi.OperableTrigger: java.util.Date getNextFireTime()>();

        $l5 = virtualinvoke $r19.<java.util.Date: long getTime()>();

        $b6 = $l5 cmp l9;

        if $b6 >= 0 goto label8;

        $r20 = interfaceinvoke r5.<org.quartz.spi.OperableTrigger: java.util.Date getNextFireTime()>();

        l9 = virtualinvoke $r20.<java.util.Date: long getTime()>();

     label8:
        goto label6;

     label9:
        $r16 = new org.quartz.impl.jdbcjobstore.JobStoreSupport$RecoverMisfiredJobsResult;

        $i4 = interfaceinvoke $r6.<java.util.List: int size()>();

        specialinvoke $r16.<org.quartz.impl.jdbcjobstore.JobStoreSupport$RecoverMisfiredJobsResult: void <init>(boolean,int,long)>(z1, $i4, l9);

        return $r16;
    }

    protected boolean updateMisfiredTrigger(java.sql.Connection, org.quartz.TriggerKey, java.lang.String, boolean) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        org.quartz.TriggerKey r2;
        java.lang.String r3, $r11, $r13;
        boolean z0;
        long $l0, $l2, $l4, l5;
        byte $b1, $b3;
        java.util.Date $r4;
        java.lang.Exception $r5;
        org.quartz.JobPersistenceException $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r12;
        org.quartz.spi.OperableTrigger r14;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.TriggerKey;

        r3 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

     label1:
        r14 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.spi.OperableTrigger retrieveTrigger(java.sql.Connection,org.quartz.TriggerKey)>(r1, r2);

        l5 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l0 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: long getMisfireThreshold()>();

        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label2;

        $l4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: long getMisfireThreshold()>();

        l5 = l5 - $l4;

     label2:
        $r4 = interfaceinvoke r14.<org.quartz.spi.OperableTrigger: java.util.Date getNextFireTime()>();

        $l2 = virtualinvoke $r4.<java.util.Date: long getTime()>();

        $b3 = $l2 cmp l5;

        if $b3 <= 0 goto label4;

     label3:
        return 0;

     label4:
        specialinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void doUpdateOfMisfiredTrigger(java.sql.Connection,org.quartz.spi.OperableTrigger,boolean,java.lang.String,boolean)>(r1, r14, z0, r3, 0);

     label5:
        return 1;

     label6:
        $r5 := @caughtexception;

        $r6 = new org.quartz.JobPersistenceException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t update misfired trigger \'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': ");

        $r11 = virtualinvoke $r5.<java.lang.Exception: java.lang.String getMessage()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r13, $r5);

        throw $r6;

        catch java.lang.Exception from label1 to label3 with label6;
        catch java.lang.Exception from label4 to label5 with label6;
    }

    private void doUpdateOfMisfiredTrigger(java.sql.Connection, org.quartz.spi.OperableTrigger, boolean, java.lang.String, boolean) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        org.quartz.spi.OperableTrigger r2;
        boolean z0, z1;
        java.lang.String r3, $r4, $r8;
        org.quartz.spi.SchedulerSignaler $r5, $r7;
        java.util.Date $r6;
        org.quartz.Calendar r9;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.spi.OperableTrigger;

        z0 := @parameter2: boolean;

        r3 := @parameter3: java.lang.String;

        z1 := @parameter4: boolean;

        r9 = null;

        $r4 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: java.lang.String getCalendarName()>();

        if $r4 == null goto label1;

        $r8 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: java.lang.String getCalendarName()>();

        r9 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.Calendar retrieveCalendar(java.sql.Connection,java.lang.String)>(r1, $r8);

     label1:
        $r5 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.spi.SchedulerSignaler schedSignaler>;

        interfaceinvoke $r5.<org.quartz.spi.SchedulerSignaler: void notifyTriggerListenersMisfired(org.quartz.Trigger)>(r2);

        interfaceinvoke r2.<org.quartz.spi.OperableTrigger: void updateAfterMisfire(org.quartz.Calendar)>(r9);

        $r6 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: java.util.Date getNextFireTime()>();

        if $r6 != null goto label2;

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void storeTrigger(java.sql.Connection,org.quartz.spi.OperableTrigger,org.quartz.JobDetail,boolean,java.lang.String,boolean,boolean)>(r1, r2, null, 1, "COMPLETE", z0, z1);

        $r7 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.spi.SchedulerSignaler schedSignaler>;

        interfaceinvoke $r7.<org.quartz.spi.SchedulerSignaler: void notifySchedulerListenersFinalized(org.quartz.Trigger)>(r2);

        goto label3;

     label2:
        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void storeTrigger(java.sql.Connection,org.quartz.spi.OperableTrigger,org.quartz.JobDetail,boolean,java.lang.String,boolean,boolean)>(r1, r2, null, 1, r3, z0, z1);

     label3:
        return;
    }

    public void storeJobAndTrigger(org.quartz.JobDetail, org.quartz.spi.OperableTrigger) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        org.quartz.JobDetail r1;
        org.quartz.spi.OperableTrigger r2;
        boolean $z0;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$2 $r3;
        java.lang.String $r6;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: org.quartz.JobDetail;

        r2 := @parameter1: org.quartz.spi.OperableTrigger;

        $z0 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean isLockOnInsert()>();

        if $z0 == 0 goto label1;

        $r6 = "TRIGGER_ACCESS";

        goto label2;

     label1:
        $r6 = null;

     label2:
        $r3 = new org.quartz.impl.jdbcjobstore.JobStoreSupport$2;

        specialinvoke $r3.<org.quartz.impl.jdbcjobstore.JobStoreSupport$2: void <init>(org.quartz.impl.jdbcjobstore.JobStoreSupport,org.quartz.JobDetail,org.quartz.spi.OperableTrigger)>(r0, r1, r2);

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.Object executeInLock(java.lang.String,org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback)>($r6, $r3);

        return;
    }

    public void storeJob(org.quartz.JobDetail, boolean) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        org.quartz.JobDetail r1;
        boolean z0, $z1;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$3 $r2;
        java.lang.String $r5;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: org.quartz.JobDetail;

        z0 := @parameter1: boolean;

        $z1 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean isLockOnInsert()>();

        if $z1 != 0 goto label1;

        if z0 == 0 goto label2;

     label1:
        $r5 = "TRIGGER_ACCESS";

        goto label3;

     label2:
        $r5 = null;

     label3:
        $r2 = new org.quartz.impl.jdbcjobstore.JobStoreSupport$3;

        specialinvoke $r2.<org.quartz.impl.jdbcjobstore.JobStoreSupport$3: void <init>(org.quartz.impl.jdbcjobstore.JobStoreSupport,org.quartz.JobDetail,boolean)>(r0, r1, z0);

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.Object executeInLock(java.lang.String,org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback)>($r5, $r2);

        return;
    }

    protected void storeJob(java.sql.Connection, org.quartz.JobDetail, boolean) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        org.quartz.JobDetail r2;
        boolean z0, z1;
        org.quartz.JobKey $r3;
        org.quartz.impl.jdbcjobstore.DriverDelegate $r4, $r5;
        org.quartz.ObjectAlreadyExistsException $r6;
        java.sql.SQLException $r7;
        org.quartz.JobPersistenceException $r8, $r15;
        java.lang.StringBuilder $r9, $r10, $r12, $r16, $r17, $r19;
        java.lang.String $r11, $r13, $r18, $r20;
        java.io.IOException $r14;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.JobDetail;

        z0 := @parameter2: boolean;

        $r3 = interfaceinvoke r2.<org.quartz.JobDetail: org.quartz.JobKey getKey()>();

        z1 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean jobExists(java.sql.Connection,org.quartz.JobKey)>(r1, $r3);

     label1:
        if z1 == 0 goto label3;

        if z0 != 0 goto label2;

        $r6 = new org.quartz.ObjectAlreadyExistsException;

        specialinvoke $r6.<org.quartz.ObjectAlreadyExistsException: void <init>(org.quartz.JobDetail)>(r2);

        throw $r6;

     label2:
        $r5 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        interfaceinvoke $r5.<org.quartz.impl.jdbcjobstore.DriverDelegate: int updateJobDetail(java.sql.Connection,org.quartz.JobDetail)>(r1, r2);

        goto label4;

     label3:
        $r4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        interfaceinvoke $r4.<org.quartz.impl.jdbcjobstore.DriverDelegate: int insertJobDetail(java.sql.Connection,org.quartz.JobDetail)>(r1, r2);

     label4:
        goto label7;

     label5:
        $r14 := @caughtexception;

        $r15 = new org.quartz.JobPersistenceException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t store job: ");

        $r18 = virtualinvoke $r14.<java.io.IOException: java.lang.String getMessage()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r20, $r14);

        throw $r15;

     label6:
        $r7 := @caughtexception;

        $r8 = new org.quartz.JobPersistenceException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t store job: ");

        $r11 = virtualinvoke $r7.<java.sql.SQLException: java.lang.String getMessage()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r13, $r7);

        throw $r8;

     label7:
        return;

        catch java.io.IOException from label1 to label4 with label5;
        catch java.sql.SQLException from label1 to label4 with label6;
    }

    protected boolean jobExists(java.sql.Connection, org.quartz.JobKey) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        org.quartz.JobKey r2;
        org.quartz.impl.jdbcjobstore.DriverDelegate $r4;
        boolean $z0;
        java.sql.SQLException $r5;
        org.quartz.JobPersistenceException $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r12;
        java.lang.String $r11, $r13;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.JobKey;

     label1:
        $r4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $z0 = interfaceinvoke $r4.<org.quartz.impl.jdbcjobstore.DriverDelegate: boolean jobExists(java.sql.Connection,org.quartz.JobKey)>(r1, r2);

     label2:
        return $z0;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.quartz.JobPersistenceException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t determine job existence (");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r11 = virtualinvoke $r5.<java.sql.SQLException: java.lang.String getMessage()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r13, $r5);

        throw $r6;

        catch java.sql.SQLException from label1 to label2 with label3;
    }

    public void storeTrigger(org.quartz.spi.OperableTrigger, boolean) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        org.quartz.spi.OperableTrigger r1;
        boolean z0, $z1;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$4 $r2;
        java.lang.String $r5;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: org.quartz.spi.OperableTrigger;

        z0 := @parameter1: boolean;

        $z1 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean isLockOnInsert()>();

        if $z1 != 0 goto label1;

        if z0 == 0 goto label2;

     label1:
        $r5 = "TRIGGER_ACCESS";

        goto label3;

     label2:
        $r5 = null;

     label3:
        $r2 = new org.quartz.impl.jdbcjobstore.JobStoreSupport$4;

        specialinvoke $r2.<org.quartz.impl.jdbcjobstore.JobStoreSupport$4: void <init>(org.quartz.impl.jdbcjobstore.JobStoreSupport,org.quartz.spi.OperableTrigger,boolean)>(r0, r1, z0);

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.Object executeInLock(java.lang.String,org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback)>($r5, $r2);

        return;
    }

    protected void storeTrigger(java.sql.Connection, org.quartz.spi.OperableTrigger, org.quartz.JobDetail, boolean, java.lang.String, boolean, boolean) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        org.quartz.spi.OperableTrigger r2;
        boolean z0, z1, z2, z3, $z4, $z5, $z6, z7;
        org.quartz.TriggerKey $r3, $r16, $r20, $r27;
        org.quartz.impl.jdbcjobstore.DriverDelegate $r4, $r5, $r15, $r18, $r19;
        org.quartz.JobKey $r6, $r10, $r14, $r30;
        org.quartz.JobPersistenceException $r7, $r24;
        java.lang.StringBuilder $r8, $r9, $r11, $r12, $r25, $r26, $r28, $r29, $r31, $r32, $r34;
        java.lang.String $r13, $r17, $r21, $r33, $r35, r37;
        org.quartz.ObjectAlreadyExistsException $r22;
        java.lang.Exception $r23;
        org.quartz.JobDetail r36;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.spi.OperableTrigger;

        r36 := @parameter2: org.quartz.JobDetail;

        z0 := @parameter3: boolean;

        r37 := @parameter4: java.lang.String;

        z1 := @parameter5: boolean;

        z2 := @parameter6: boolean;

        $r3 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        z3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean triggerExists(java.sql.Connection,org.quartz.TriggerKey)>(r1, $r3);

        if z3 == 0 goto label01;

        if z0 != 0 goto label01;

        $r22 = new org.quartz.ObjectAlreadyExistsException;

        specialinvoke $r22.<org.quartz.ObjectAlreadyExistsException: void <init>(org.quartz.Trigger)>(r2);

        throw $r22;

     label01:
        if z1 != 0 goto label04;

        $r15 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $r16 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        $r17 = virtualinvoke $r16.<org.quartz.TriggerKey: java.lang.String getGroup()>();

        z7 = interfaceinvoke $r15.<org.quartz.impl.jdbcjobstore.DriverDelegate: boolean isTriggerGroupPaused(java.sql.Connection,java.lang.String)>(r1, $r17);

        if z7 != 0 goto label02;

        $r18 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        z7 = interfaceinvoke $r18.<org.quartz.impl.jdbcjobstore.DriverDelegate: boolean isTriggerGroupPaused(java.sql.Connection,java.lang.String)>(r1, "_$_ALL_GROUPS_PAUSED_$_");

        if z7 == 0 goto label02;

        $r19 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $r20 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        $r21 = virtualinvoke $r20.<org.quartz.TriggerKey: java.lang.String getGroup()>();

        interfaceinvoke $r19.<org.quartz.impl.jdbcjobstore.DriverDelegate: int insertPausedTriggerGroup(java.sql.Connection,java.lang.String)>(r1, $r21);

     label02:
        if z7 == 0 goto label04;

        $z5 = virtualinvoke r37.<java.lang.String: boolean equals(java.lang.Object)>("WAITING");

        if $z5 != 0 goto label03;

        $z6 = virtualinvoke r37.<java.lang.String: boolean equals(java.lang.Object)>("ACQUIRED");

        if $z6 == 0 goto label04;

     label03:
        r37 = "PAUSED";

     label04:
        if r36 != null goto label05;

        $r14 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: org.quartz.JobKey getJobKey()>();

        r36 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.JobDetail retrieveJob(java.sql.Connection,org.quartz.JobKey)>(r1, $r14);

     label05:
        if r36 != null goto label06;

        $r7 = new org.quartz.JobPersistenceException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The job (");

        $r10 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: org.quartz.JobKey getJobKey()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") referenced by the trigger does not exist.");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.quartz.JobPersistenceException: void <init>(java.lang.String)>($r13);

        throw $r7;

     label06:
        $z4 = interfaceinvoke r36.<org.quartz.JobDetail: boolean isConcurrentExectionDisallowed()>();

        if $z4 == 0 goto label07;

        if z2 != 0 goto label07;

        $r6 = interfaceinvoke r36.<org.quartz.JobDetail: org.quartz.JobKey getKey()>();

        r37 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.String checkBlockedState(java.sql.Connection,org.quartz.JobKey,java.lang.String)>(r1, $r6, r37);

     label07:
        if z3 == 0 goto label08;

        $r5 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        interfaceinvoke $r5.<org.quartz.impl.jdbcjobstore.DriverDelegate: int updateTrigger(java.sql.Connection,org.quartz.spi.OperableTrigger,java.lang.String,org.quartz.JobDetail)>(r1, r2, r37, r36);

        goto label09;

     label08:
        $r4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        interfaceinvoke $r4.<org.quartz.impl.jdbcjobstore.DriverDelegate: int insertTrigger(java.sql.Connection,org.quartz.spi.OperableTrigger,java.lang.String,org.quartz.JobDetail)>(r1, r2, r37, r36);

     label09:
        goto label11;

     label10:
        $r23 := @caughtexception;

        $r24 = new org.quartz.JobPersistenceException;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t store trigger \'");

        $r27 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' for \'");

        $r30 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: org.quartz.JobKey getJobKey()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' job:");

        $r33 = virtualinvoke $r23.<java.lang.Exception: java.lang.String getMessage()>();

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r35, $r23);

        throw $r24;

     label11:
        return;

        catch java.lang.Exception from label01 to label09 with label10;
    }

    protected boolean triggerExists(java.sql.Connection, org.quartz.TriggerKey) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        org.quartz.TriggerKey r2;
        org.quartz.impl.jdbcjobstore.DriverDelegate $r4;
        boolean $z0;
        java.sql.SQLException $r5;
        org.quartz.JobPersistenceException $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r12;
        java.lang.String $r11, $r13;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.TriggerKey;

     label1:
        $r4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $z0 = interfaceinvoke $r4.<org.quartz.impl.jdbcjobstore.DriverDelegate: boolean triggerExists(java.sql.Connection,org.quartz.TriggerKey)>(r1, r2);

     label2:
        return $z0;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.quartz.JobPersistenceException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t determine trigger existence (");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r11 = virtualinvoke $r5.<java.sql.SQLException: java.lang.String getMessage()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r13, $r5);

        throw $r6;

        catch java.sql.SQLException from label1 to label2 with label3;
    }

    public boolean removeJob(org.quartz.JobKey) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        org.quartz.JobKey r1;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$5 $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: org.quartz.JobKey;

        $r2 = new org.quartz.impl.jdbcjobstore.JobStoreSupport$5;

        specialinvoke $r2.<org.quartz.impl.jdbcjobstore.JobStoreSupport$5: void <init>(org.quartz.impl.jdbcjobstore.JobStoreSupport,org.quartz.JobKey)>(r0, r1);

        $r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.Object executeInLock(java.lang.String,org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback)>("TRIGGER_ACCESS", $r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    protected boolean removeJob(java.sql.Connection, org.quartz.JobKey) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        org.quartz.JobKey r2;
        java.util.Iterator r3;
        org.quartz.TriggerKey r4;
        org.quartz.impl.jdbcjobstore.DriverDelegate $r5;
        boolean $z0, $z1;
        java.lang.Object $r6;
        java.sql.SQLException $r7;
        org.quartz.JobPersistenceException $r8;
        java.lang.StringBuilder $r9, $r10, $r12;
        java.lang.String $r11, $r13;
        java.util.List r14;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.JobKey;

     label1:
        $r5 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        r14 = interfaceinvoke $r5.<org.quartz.impl.jdbcjobstore.DriverDelegate: java.util.List selectTriggerKeysForJob(java.sql.Connection,org.quartz.JobKey)>(r1, r2);

        r3 = interfaceinvoke r14.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.quartz.TriggerKey) $r6;

        specialinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean deleteTriggerAndChildren(java.sql.Connection,org.quartz.TriggerKey)>(r1, r4);

        goto label2;

     label3:
        $z1 = specialinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean deleteJobAndChildren(java.sql.Connection,org.quartz.JobKey)>(r1, r2);

     label4:
        return $z1;

     label5:
        $r7 := @caughtexception;

        $r8 = new org.quartz.JobPersistenceException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t remove job: ");

        $r11 = virtualinvoke $r7.<java.sql.SQLException: java.lang.String getMessage()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r13, $r7);

        throw $r8;

        catch java.sql.SQLException from label1 to label4 with label5;
    }

    public boolean removeJobs(java.util.List) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.util.List r1;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$6 $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.util.List;

        $r2 = new org.quartz.impl.jdbcjobstore.JobStoreSupport$6;

        specialinvoke $r2.<org.quartz.impl.jdbcjobstore.JobStoreSupport$6: void <init>(org.quartz.impl.jdbcjobstore.JobStoreSupport,java.util.List)>(r0, r1);

        $r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.Object executeInLock(java.lang.String,org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback)>("TRIGGER_ACCESS", $r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    public boolean removeTriggers(java.util.List) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.util.List r1;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$7 $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.util.List;

        $r2 = new org.quartz.impl.jdbcjobstore.JobStoreSupport$7;

        specialinvoke $r2.<org.quartz.impl.jdbcjobstore.JobStoreSupport$7: void <init>(org.quartz.impl.jdbcjobstore.JobStoreSupport,java.util.List)>(r0, r1);

        $r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.Object executeInLock(java.lang.String,org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback)>("TRIGGER_ACCESS", $r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    public void storeJobsAndTriggers(java.util.Map, boolean) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.util.Map r1;
        boolean z0, $z1;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$8 $r2;
        java.lang.String $r5;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.util.Map;

        z0 := @parameter1: boolean;

        $z1 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean isLockOnInsert()>();

        if $z1 != 0 goto label1;

        if z0 == 0 goto label2;

     label1:
        $r5 = "TRIGGER_ACCESS";

        goto label3;

     label2:
        $r5 = null;

     label3:
        $r2 = new org.quartz.impl.jdbcjobstore.JobStoreSupport$8;

        specialinvoke $r2.<org.quartz.impl.jdbcjobstore.JobStoreSupport$8: void <init>(org.quartz.impl.jdbcjobstore.JobStoreSupport,java.util.Map,boolean)>(r0, r1, z0);

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.Object executeInLock(java.lang.String,org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback)>($r5, $r2);

        return;
    }

    private boolean deleteJobAndChildren(java.sql.Connection, org.quartz.JobKey) throws org.quartz.impl.jdbcjobstore.NoSuchDelegateException, java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        org.quartz.JobKey r2;
        org.quartz.impl.jdbcjobstore.DriverDelegate $r3;
        int $i0;
        boolean $z0;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.JobKey;

        $r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $i0 = interfaceinvoke $r3.<org.quartz.impl.jdbcjobstore.DriverDelegate: int deleteJobDetail(java.sql.Connection,org.quartz.JobKey)>(r1, r2);

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private boolean deleteTriggerAndChildren(java.sql.Connection, org.quartz.TriggerKey) throws java.sql.SQLException, org.quartz.impl.jdbcjobstore.NoSuchDelegateException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        org.quartz.TriggerKey r2;
        org.quartz.impl.jdbcjobstore.DriverDelegate $r3;
        int $i0;
        boolean $z0;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.TriggerKey;

        $r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $i0 = interfaceinvoke $r3.<org.quartz.impl.jdbcjobstore.DriverDelegate: int deleteTrigger(java.sql.Connection,org.quartz.TriggerKey)>(r1, r2);

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.quartz.JobDetail retrieveJob(org.quartz.JobKey) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        org.quartz.JobKey r1;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$9 $r2;
        java.lang.Object $r3;
        org.quartz.JobDetail $r4;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: org.quartz.JobKey;

        $r2 = new org.quartz.impl.jdbcjobstore.JobStoreSupport$9;

        specialinvoke $r2.<org.quartz.impl.jdbcjobstore.JobStoreSupport$9: void <init>(org.quartz.impl.jdbcjobstore.JobStoreSupport,org.quartz.JobKey)>(r0, r1);

        $r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.Object executeWithoutLock(org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback)>($r2);

        $r4 = (org.quartz.JobDetail) $r3;

        return $r4;
    }

    protected org.quartz.JobDetail retrieveJob(java.sql.Connection, org.quartz.JobKey) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        org.quartz.JobKey r2;
        org.quartz.impl.jdbcjobstore.DriverDelegate $r3;
        org.quartz.spi.ClassLoadHelper $r4;
        org.quartz.JobDetail $r5;
        java.io.IOException $r6;
        org.quartz.JobPersistenceException $r7, $r14, $r21;
        java.lang.StringBuilder $r8, $r9, $r11, $r15, $r16, $r18, $r22, $r23, $r25;
        java.lang.String $r10, $r12, $r17, $r19, $r24, $r26;
        java.sql.SQLException $r13;
        java.lang.ClassNotFoundException $r20;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.JobKey;

     label1:
        $r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $r4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.spi.ClassLoadHelper getClassLoadHelper()>();

        $r5 = interfaceinvoke $r3.<org.quartz.impl.jdbcjobstore.DriverDelegate: org.quartz.JobDetail selectJobDetail(java.sql.Connection,org.quartz.JobKey,org.quartz.spi.ClassLoadHelper)>(r1, r2, $r4);

     label2:
        return $r5;

     label3:
        $r20 := @caughtexception;

        $r21 = new org.quartz.JobPersistenceException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t retrieve job because a required class was not found: ");

        $r24 = virtualinvoke $r20.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r26, $r20);

        throw $r21;

     label4:
        $r6 := @caughtexception;

        $r7 = new org.quartz.JobPersistenceException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t retrieve job because the BLOB couldn\'t be deserialized: ");

        $r10 = virtualinvoke $r6.<java.io.IOException: java.lang.String getMessage()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r12, $r6);

        throw $r7;

     label5:
        $r13 := @caughtexception;

        $r14 = new org.quartz.JobPersistenceException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t retrieve job: ");

        $r17 = virtualinvoke $r13.<java.sql.SQLException: java.lang.String getMessage()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r19, $r13);

        throw $r14;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.io.IOException from label1 to label2 with label4;
        catch java.sql.SQLException from label1 to label2 with label5;
    }

    public boolean removeTrigger(org.quartz.TriggerKey) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        org.quartz.TriggerKey r1;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$10 $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: org.quartz.TriggerKey;

        $r2 = new org.quartz.impl.jdbcjobstore.JobStoreSupport$10;

        specialinvoke $r2.<org.quartz.impl.jdbcjobstore.JobStoreSupport$10: void <init>(org.quartz.impl.jdbcjobstore.JobStoreSupport,org.quartz.TriggerKey)>(r0, r1);

        $r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.Object executeInLock(java.lang.String,org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback)>("TRIGGER_ACCESS", $r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    protected boolean removeTrigger(java.sql.Connection, org.quartz.TriggerKey) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        org.quartz.TriggerKey r2;
        boolean z0, $z1;
        int i0;
        org.quartz.impl.jdbcjobstore.DriverDelegate $r3, $r5;
        org.quartz.spi.ClassLoadHelper $r4;
        org.quartz.JobKey $r6, $r7;
        java.sql.SQLException $r8;
        org.quartz.JobPersistenceException $r9, $r16;
        java.lang.StringBuilder $r10, $r11, $r13, $r17, $r18, $r20;
        java.lang.String $r12, $r14, $r19, $r21;
        java.lang.ClassNotFoundException $r15;
        org.quartz.JobDetail r22;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.TriggerKey;

     label1:
        $r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $r4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.spi.ClassLoadHelper getClassLoadHelper()>();

        r22 = interfaceinvoke $r3.<org.quartz.impl.jdbcjobstore.DriverDelegate: org.quartz.JobDetail selectJobForTrigger(java.sql.Connection,org.quartz.spi.ClassLoadHelper,org.quartz.TriggerKey,boolean)>(r1, $r4, r2, 0);

        z0 = specialinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean deleteTriggerAndChildren(java.sql.Connection,org.quartz.TriggerKey)>(r1, r2);

        if null == r22 goto label2;

        $z1 = interfaceinvoke r22.<org.quartz.JobDetail: boolean isDurable()>();

        if $z1 != 0 goto label2;

        $r5 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $r6 = interfaceinvoke r22.<org.quartz.JobDetail: org.quartz.JobKey getKey()>();

        i0 = interfaceinvoke $r5.<org.quartz.impl.jdbcjobstore.DriverDelegate: int selectNumTriggersForJob(java.sql.Connection,org.quartz.JobKey)>(r1, $r6);

        if i0 != 0 goto label2;

        $r7 = interfaceinvoke r22.<org.quartz.JobDetail: org.quartz.JobKey getKey()>();

        specialinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean deleteJobAndChildren(java.sql.Connection,org.quartz.JobKey)>(r1, $r7);

     label2:
        goto label5;

     label3:
        $r15 := @caughtexception;

        $r16 = new org.quartz.JobPersistenceException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t remove trigger: ");

        $r19 = virtualinvoke $r15.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r21, $r15);

        throw $r16;

     label4:
        $r8 := @caughtexception;

        $r9 = new org.quartz.JobPersistenceException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t remove trigger: ");

        $r12 = virtualinvoke $r8.<java.sql.SQLException: java.lang.String getMessage()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r14, $r8);

        throw $r9;

     label5:
        return z0;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.sql.SQLException from label1 to label2 with label4;
    }

    public boolean replaceTrigger(org.quartz.TriggerKey, org.quartz.spi.OperableTrigger) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        org.quartz.TriggerKey r1;
        org.quartz.spi.OperableTrigger r2;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$11 $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        boolean $z0;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: org.quartz.TriggerKey;

        r2 := @parameter1: org.quartz.spi.OperableTrigger;

        $r3 = new org.quartz.impl.jdbcjobstore.JobStoreSupport$11;

        specialinvoke $r3.<org.quartz.impl.jdbcjobstore.JobStoreSupport$11: void <init>(org.quartz.impl.jdbcjobstore.JobStoreSupport,org.quartz.TriggerKey,org.quartz.spi.OperableTrigger)>(r0, r1, r2);

        $r4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.Object executeInLock(java.lang.String,org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback)>("TRIGGER_ACCESS", $r3);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    protected boolean replaceTrigger(java.sql.Connection, org.quartz.TriggerKey, org.quartz.spi.OperableTrigger) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        org.quartz.TriggerKey r2;
        org.quartz.spi.OperableTrigger r3;
        boolean z0, $z1;
        org.quartz.impl.jdbcjobstore.DriverDelegate $r4;
        org.quartz.spi.ClassLoadHelper $r5;
        org.quartz.JobKey $r6, $r7;
        org.quartz.JobPersistenceException $r8, $r10, $r17;
        java.sql.SQLException $r9;
        java.lang.StringBuilder $r11, $r12, $r14, $r18, $r19, $r21;
        java.lang.String $r13, $r15, $r20, $r22;
        java.lang.ClassNotFoundException $r16;
        org.quartz.JobDetail r23;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.TriggerKey;

        r3 := @parameter2: org.quartz.spi.OperableTrigger;

     label1:
        $r4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $r5 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.spi.ClassLoadHelper getClassLoadHelper()>();

        r23 = interfaceinvoke $r4.<org.quartz.impl.jdbcjobstore.DriverDelegate: org.quartz.JobDetail selectJobForTrigger(java.sql.Connection,org.quartz.spi.ClassLoadHelper,org.quartz.TriggerKey)>(r1, $r5, r2);

        if r23 != null goto label3;

     label2:
        return 0;

     label3:
        $r6 = interfaceinvoke r3.<org.quartz.spi.OperableTrigger: org.quartz.JobKey getJobKey()>();

        $r7 = interfaceinvoke r23.<org.quartz.JobDetail: org.quartz.JobKey getKey()>();

        $z1 = virtualinvoke $r6.<org.quartz.JobKey: boolean equals(java.lang.Object)>($r7);

        if $z1 != 0 goto label4;

        $r8 = new org.quartz.JobPersistenceException;

        specialinvoke $r8.<org.quartz.JobPersistenceException: void <init>(java.lang.String)>("New trigger is not related to the same job as the old trigger.");

        throw $r8;

     label4:
        z0 = specialinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean deleteTriggerAndChildren(java.sql.Connection,org.quartz.TriggerKey)>(r1, r2);

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void storeTrigger(java.sql.Connection,org.quartz.spi.OperableTrigger,org.quartz.JobDetail,boolean,java.lang.String,boolean,boolean)>(r1, r3, r23, 0, "WAITING", 0, 0);

     label5:
        return z0;

     label6:
        $r16 := @caughtexception;

        $r17 = new org.quartz.JobPersistenceException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t remove trigger: ");

        $r20 = virtualinvoke $r16.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r22, $r16);

        throw $r17;

     label7:
        $r9 := @caughtexception;

        $r10 = new org.quartz.JobPersistenceException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t remove trigger: ");

        $r13 = virtualinvoke $r9.<java.sql.SQLException: java.lang.String getMessage()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r15, $r9);

        throw $r10;

        catch java.lang.ClassNotFoundException from label1 to label2 with label6;
        catch java.lang.ClassNotFoundException from label3 to label5 with label6;
        catch java.sql.SQLException from label1 to label2 with label7;
        catch java.sql.SQLException from label3 to label5 with label7;
    }

    public org.quartz.spi.OperableTrigger retrieveTrigger(org.quartz.TriggerKey) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        org.quartz.TriggerKey r1;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$12 $r2;
        java.lang.Object $r3;
        org.quartz.spi.OperableTrigger $r4;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: org.quartz.TriggerKey;

        $r2 = new org.quartz.impl.jdbcjobstore.JobStoreSupport$12;

        specialinvoke $r2.<org.quartz.impl.jdbcjobstore.JobStoreSupport$12: void <init>(org.quartz.impl.jdbcjobstore.JobStoreSupport,org.quartz.TriggerKey)>(r0, r1);

        $r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.Object executeWithoutLock(org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback)>($r2);

        $r4 = (org.quartz.spi.OperableTrigger) $r3;

        return $r4;
    }

    protected org.quartz.spi.OperableTrigger retrieveTrigger(java.sql.Connection, org.quartz.TriggerKey) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        org.quartz.TriggerKey r2;
        org.quartz.impl.jdbcjobstore.DriverDelegate $r4;
        org.quartz.spi.OperableTrigger $r5;
        java.lang.Exception $r6;
        org.quartz.JobPersistenceException $r7;
        java.lang.StringBuilder $r8, $r9, $r11;
        java.lang.String $r10, $r12;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.TriggerKey;

     label1:
        $r4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $r5 = interfaceinvoke $r4.<org.quartz.impl.jdbcjobstore.DriverDelegate: org.quartz.spi.OperableTrigger selectTrigger(java.sql.Connection,org.quartz.TriggerKey)>(r1, r2);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $r7 = new org.quartz.JobPersistenceException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t retrieve trigger: ");

        $r10 = virtualinvoke $r6.<java.lang.Exception: java.lang.String getMessage()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r12, $r6);

        throw $r7;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public org.quartz.Trigger$TriggerState getTriggerState(org.quartz.TriggerKey) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        org.quartz.TriggerKey r1;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$13 $r2;
        java.lang.Object $r3;
        org.quartz.Trigger$TriggerState $r4;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: org.quartz.TriggerKey;

        $r2 = new org.quartz.impl.jdbcjobstore.JobStoreSupport$13;

        specialinvoke $r2.<org.quartz.impl.jdbcjobstore.JobStoreSupport$13: void <init>(org.quartz.impl.jdbcjobstore.JobStoreSupport,org.quartz.TriggerKey)>(r0, r1);

        $r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.Object executeWithoutLock(org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback)>($r2);

        $r4 = (org.quartz.Trigger$TriggerState) $r3;

        return $r4;
    }

    public org.quartz.Trigger$TriggerState getTriggerState(java.sql.Connection, org.quartz.TriggerKey) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        org.quartz.TriggerKey r2;
        org.quartz.impl.jdbcjobstore.DriverDelegate $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.quartz.Trigger$TriggerState $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        java.sql.SQLException $r12;
        org.quartz.JobPersistenceException $r13;
        java.lang.StringBuilder $r14, $r15, $r16, $r17, $r19;
        java.lang.String $r18, $r20, r21;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.TriggerKey;

     label01:
        $r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        r21 = interfaceinvoke $r3.<org.quartz.impl.jdbcjobstore.DriverDelegate: java.lang.String selectTriggerState(java.sql.Connection,org.quartz.TriggerKey)>(r1, r2);

        if r21 != null goto label03;

        $r11 = <org.quartz.Trigger$TriggerState: org.quartz.Trigger$TriggerState NONE>;

     label02:
        return $r11;

     label03:
        $z0 = virtualinvoke r21.<java.lang.String: boolean equals(java.lang.Object)>("DELETED");

        if $z0 == 0 goto label05;

        $r10 = <org.quartz.Trigger$TriggerState: org.quartz.Trigger$TriggerState NONE>;

     label04:
        return $r10;

     label05:
        $z1 = virtualinvoke r21.<java.lang.String: boolean equals(java.lang.Object)>("COMPLETE");

        if $z1 == 0 goto label07;

        $r9 = <org.quartz.Trigger$TriggerState: org.quartz.Trigger$TriggerState COMPLETE>;

     label06:
        return $r9;

     label07:
        $z2 = virtualinvoke r21.<java.lang.String: boolean equals(java.lang.Object)>("PAUSED");

        if $z2 == 0 goto label09;

        $r8 = <org.quartz.Trigger$TriggerState: org.quartz.Trigger$TriggerState PAUSED>;

     label08:
        return $r8;

     label09:
        $z3 = virtualinvoke r21.<java.lang.String: boolean equals(java.lang.Object)>("PAUSED_BLOCKED");

        if $z3 == 0 goto label11;

        $r7 = <org.quartz.Trigger$TriggerState: org.quartz.Trigger$TriggerState PAUSED>;

     label10:
        return $r7;

     label11:
        $z4 = virtualinvoke r21.<java.lang.String: boolean equals(java.lang.Object)>("ERROR");

        if $z4 == 0 goto label13;

        $r6 = <org.quartz.Trigger$TriggerState: org.quartz.Trigger$TriggerState ERROR>;

     label12:
        return $r6;

     label13:
        $z5 = virtualinvoke r21.<java.lang.String: boolean equals(java.lang.Object)>("BLOCKED");

        if $z5 == 0 goto label15;

        $r5 = <org.quartz.Trigger$TriggerState: org.quartz.Trigger$TriggerState BLOCKED>;

     label14:
        return $r5;

     label15:
        $r4 = <org.quartz.Trigger$TriggerState: org.quartz.Trigger$TriggerState NORMAL>;

     label16:
        return $r4;

     label17:
        $r12 := @caughtexception;

        $r13 = new org.quartz.JobPersistenceException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t determine state of trigger (");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r18 = virtualinvoke $r12.<java.sql.SQLException: java.lang.String getMessage()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r20, $r12);

        throw $r13;

        catch java.sql.SQLException from label01 to label02 with label17;
        catch java.sql.SQLException from label03 to label04 with label17;
        catch java.sql.SQLException from label05 to label06 with label17;
        catch java.sql.SQLException from label07 to label08 with label17;
        catch java.sql.SQLException from label09 to label10 with label17;
        catch java.sql.SQLException from label11 to label12 with label17;
        catch java.sql.SQLException from label13 to label14 with label17;
        catch java.sql.SQLException from label15 to label16 with label17;
    }

    public void resetTriggerFromErrorState(org.quartz.TriggerKey) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        org.quartz.TriggerKey r1;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$14 $r2;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: org.quartz.TriggerKey;

        $r2 = new org.quartz.impl.jdbcjobstore.JobStoreSupport$14;

        specialinvoke $r2.<org.quartz.impl.jdbcjobstore.JobStoreSupport$14: void <init>(org.quartz.impl.jdbcjobstore.JobStoreSupport,org.quartz.TriggerKey)>(r0, r1);

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.Object executeInLock(java.lang.String,org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback)>("TRIGGER_ACCESS", $r2);

        return;
    }

    void resetTriggerFromErrorState(java.sql.Connection, org.quartz.TriggerKey) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        org.quartz.TriggerKey r2;
        org.quartz.impl.jdbcjobstore.DriverDelegate $r3, $r5;
        java.lang.String $r4, $r12, $r19, $r21, r22;
        boolean $z0;
        org.slf4j.Logger $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11, $r15, $r16, $r17, $r18, $r20;
        java.sql.SQLException $r13;
        org.quartz.JobPersistenceException $r14;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.TriggerKey;

     label1:
        r22 = "WAITING";

        $r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $r4 = virtualinvoke r2.<org.quartz.TriggerKey: java.lang.String getGroup()>();

        $z0 = interfaceinvoke $r3.<org.quartz.impl.jdbcjobstore.DriverDelegate: boolean isTriggerGroupPaused(java.sql.Connection,java.lang.String)>(r1, $r4);

        if $z0 == 0 goto label2;

        r22 = "PAUSED";

     label2:
        $r5 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        interfaceinvoke $r5.<org.quartz.impl.jdbcjobstore.DriverDelegate: int updateTriggerStateFromOtherState(java.sql.Connection,org.quartz.TriggerKey,java.lang.String,java.lang.String)>(r1, r2, r22, "ERROR");

        $r6 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.slf4j.Logger getLog()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Trigger ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" reset from ERROR state to: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r22);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String)>($r12);

     label3:
        goto label5;

     label4:
        $r13 := @caughtexception;

        $r14 = new org.quartz.JobPersistenceException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t reset from error state of trigger (");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r19 = virtualinvoke $r13.<java.sql.SQLException: java.lang.String getMessage()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r21, $r13);

        throw $r14;

     label5:
        return;

        catch java.sql.SQLException from label1 to label3 with label4;
    }

    public void storeCalendar(java.lang.String, org.quartz.Calendar, boolean, boolean) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.lang.String r1, $r6;
        org.quartz.Calendar r2;
        boolean z0, z1, $z2;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$15 $r3;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.quartz.Calendar;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        $z2 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean isLockOnInsert()>();

        if $z2 != 0 goto label1;

        if z1 == 0 goto label2;

     label1:
        $r6 = "TRIGGER_ACCESS";

        goto label3;

     label2:
        $r6 = null;

     label3:
        $r3 = new org.quartz.impl.jdbcjobstore.JobStoreSupport$15;

        specialinvoke $r3.<org.quartz.impl.jdbcjobstore.JobStoreSupport$15: void <init>(org.quartz.impl.jdbcjobstore.JobStoreSupport,java.lang.String,org.quartz.Calendar,boolean,boolean)>(r0, r1, r2, z0, z1);

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.Object executeInLock(java.lang.String,org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback)>($r6, $r3);

        return;
    }

    protected void storeCalendar(java.sql.Connection, java.lang.String, org.quartz.Calendar, boolean, boolean) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        java.lang.String r2, $r20, $r25, $r27, $r32, $r34, $r39, $r41;
        org.quartz.Calendar r3;
        boolean z0, z1, $z2, z3, $z4;
        java.util.List r4;
        java.util.Iterator r5;
        org.quartz.spi.OperableTrigger r6;
        org.quartz.impl.jdbcjobstore.DriverDelegate $r7, $r11, $r12;
        int $i0, $i1;
        java.util.HashMap $r8;
        org.quartz.JobPersistenceException $r10, $r14, $r22, $r29, $r36;
        java.lang.Object $r13;
        long $l2;
        org.quartz.ObjectAlreadyExistsException $r15;
        java.lang.StringBuilder $r16, $r17, $r18, $r19, $r23, $r24, $r26, $r30, $r31, $r33, $r37, $r38, $r40;
        java.io.IOException $r21;
        java.sql.SQLException $r28;
        java.lang.ClassNotFoundException $r35;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.quartz.Calendar;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

     label01:
        z3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean calendarExists(java.sql.Connection,java.lang.String)>(r1, r2);

        if z3 == 0 goto label02;

        if z0 != 0 goto label02;

        $r15 = new org.quartz.ObjectAlreadyExistsException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Calendar with name \'");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' already exists.");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<org.quartz.ObjectAlreadyExistsException: void <init>(java.lang.String)>($r20);

        throw $r15;

     label02:
        if z3 == 0 goto label06;

        $r11 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $i1 = interfaceinvoke $r11.<org.quartz.impl.jdbcjobstore.DriverDelegate: int updateCalendar(java.sql.Connection,java.lang.String,org.quartz.Calendar)>(r1, r2, r3);

        if $i1 >= 1 goto label03;

        $r14 = new org.quartz.JobPersistenceException;

        specialinvoke $r14.<org.quartz.JobPersistenceException: void <init>(java.lang.String)>("Couldn\'t store calendar.  Update failed.");

        throw $r14;

     label03:
        if z1 == 0 goto label07;

        $r12 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        r4 = interfaceinvoke $r12.<org.quartz.impl.jdbcjobstore.DriverDelegate: java.util.List selectTriggersForCalendar(java.sql.Connection,java.lang.String)>(r1, r2);

        r5 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z2 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label05;

        $r13 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.quartz.spi.OperableTrigger) $r13;

        $l2 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: long getMisfireThreshold()>();

        interfaceinvoke r6.<org.quartz.spi.OperableTrigger: void updateWithNewCalendar(org.quartz.Calendar,long)>(r3, $l2);

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void storeTrigger(java.sql.Connection,org.quartz.spi.OperableTrigger,org.quartz.JobDetail,boolean,java.lang.String,boolean,boolean)>(r1, r6, null, 1, "WAITING", 0, 0);

        goto label04;

     label05:
        goto label07;

     label06:
        $r7 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $i0 = interfaceinvoke $r7.<org.quartz.impl.jdbcjobstore.DriverDelegate: int insertCalendar(java.sql.Connection,java.lang.String,org.quartz.Calendar)>(r1, r2, r3);

        if $i0 >= 1 goto label07;

        $r10 = new org.quartz.JobPersistenceException;

        specialinvoke $r10.<org.quartz.JobPersistenceException: void <init>(java.lang.String)>("Couldn\'t store calendar.  Insert failed.");

        throw $r10;

     label07:
        $z4 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean isClustered>;

        if $z4 != 0 goto label08;

        $r8 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.util.HashMap calendarCache>;

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);

     label08:
        goto label12;

     label09:
        $r21 := @caughtexception;

        $r22 = new org.quartz.JobPersistenceException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t store calendar because the BLOB couldn\'t be serialized: ");

        $r25 = virtualinvoke $r21.<java.io.IOException: java.lang.String getMessage()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r27, $r21);

        throw $r22;

     label10:
        $r35 := @caughtexception;

        $r36 = new org.quartz.JobPersistenceException;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t store calendar: ");

        $r39 = virtualinvoke $r35.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r36.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r41, $r35);

        throw $r36;

     label11:
        $r28 := @caughtexception;

        $r29 = new org.quartz.JobPersistenceException;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t store calendar: ");

        $r32 = virtualinvoke $r28.<java.sql.SQLException: java.lang.String getMessage()>();

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r34, $r28);

        throw $r29;

     label12:
        return;

        catch java.io.IOException from label01 to label08 with label09;
        catch java.lang.ClassNotFoundException from label01 to label08 with label10;
        catch java.sql.SQLException from label01 to label08 with label11;
    }

    protected boolean calendarExists(java.sql.Connection, java.lang.String) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        java.lang.String r2, $r11, $r13;
        org.quartz.impl.jdbcjobstore.DriverDelegate $r4;
        boolean $z0;
        java.sql.SQLException $r5;
        org.quartz.JobPersistenceException $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r12;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: java.lang.String;

     label1:
        $r4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $z0 = interfaceinvoke $r4.<org.quartz.impl.jdbcjobstore.DriverDelegate: boolean calendarExists(java.sql.Connection,java.lang.String)>(r1, r2);

     label2:
        return $z0;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.quartz.JobPersistenceException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t determine calendar existence (");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r11 = virtualinvoke $r5.<java.sql.SQLException: java.lang.String getMessage()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r13, $r5);

        throw $r6;

        catch java.sql.SQLException from label1 to label2 with label3;
    }

    public boolean removeCalendar(java.lang.String) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.lang.String r1;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$16 $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.lang.String;

        $r2 = new org.quartz.impl.jdbcjobstore.JobStoreSupport$16;

        specialinvoke $r2.<org.quartz.impl.jdbcjobstore.JobStoreSupport$16: void <init>(org.quartz.impl.jdbcjobstore.JobStoreSupport,java.lang.String)>(r0, r1);

        $r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.Object executeInLock(java.lang.String,org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback)>("TRIGGER_ACCESS", $r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    protected boolean removeCalendar(java.sql.Connection, java.lang.String) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        java.lang.String r2, $r13, $r15;
        org.quartz.impl.jdbcjobstore.DriverDelegate $r4, $r5;
        boolean $z0, $z1, $z2;
        int $i0;
        java.util.HashMap $r6;
        org.quartz.JobPersistenceException $r8, $r10;
        java.sql.SQLException $r9;
        java.lang.StringBuilder $r11, $r12, $r14;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: java.lang.String;

     label1:
        $r4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $z0 = interfaceinvoke $r4.<org.quartz.impl.jdbcjobstore.DriverDelegate: boolean calendarIsReferenced(java.sql.Connection,java.lang.String)>(r1, r2);

        if $z0 == 0 goto label2;

        $r8 = new org.quartz.JobPersistenceException;

        specialinvoke $r8.<org.quartz.JobPersistenceException: void <init>(java.lang.String)>("Calender cannot be removed if it referenced by a trigger!");

        throw $r8;

     label2:
        $z1 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean isClustered>;

        if $z1 != 0 goto label3;

        $r6 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.util.HashMap calendarCache>;

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r2);

     label3:
        $r5 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $i0 = interfaceinvoke $r5.<org.quartz.impl.jdbcjobstore.DriverDelegate: int deleteCalendar(java.sql.Connection,java.lang.String)>(r1, r2);

        if $i0 <= 0 goto label4;

        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        return $z2;

     label6:
        $r9 := @caughtexception;

        $r10 = new org.quartz.JobPersistenceException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t remove calendar: ");

        $r13 = virtualinvoke $r9.<java.sql.SQLException: java.lang.String getMessage()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r15, $r9);

        throw $r10;

        catch java.sql.SQLException from label1 to label5 with label6;
    }

    public org.quartz.Calendar retrieveCalendar(java.lang.String) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.lang.String r1;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$17 $r2;
        java.lang.Object $r3;
        org.quartz.Calendar $r4;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.lang.String;

        $r2 = new org.quartz.impl.jdbcjobstore.JobStoreSupport$17;

        specialinvoke $r2.<org.quartz.impl.jdbcjobstore.JobStoreSupport$17: void <init>(org.quartz.impl.jdbcjobstore.JobStoreSupport,java.lang.String)>(r0, r1);

        $r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.Object executeWithoutLock(org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback)>($r2);

        $r4 = (org.quartz.Calendar) $r3;

        return $r4;
    }

    protected org.quartz.Calendar retrieveCalendar(java.sql.Connection, java.lang.String) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        java.lang.String r2, $r13, $r15, $r20, $r22, $r27, $r29;
        boolean $z0, $z1;
        java.util.HashMap $r3, $r6;
        java.lang.Object $r4;
        org.quartz.impl.jdbcjobstore.DriverDelegate $r5;
        java.io.IOException $r9;
        org.quartz.JobPersistenceException $r10, $r17, $r24;
        java.lang.StringBuilder $r11, $r12, $r14, $r18, $r19, $r21, $r25, $r26, $r28;
        java.lang.ClassNotFoundException $r16;
        java.sql.SQLException $r23;
        org.quartz.Calendar $r30, r32;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: java.lang.String;

        $z0 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean isClustered>;

        if $z0 == 0 goto label1;

        $r30 = null;

        goto label2;

     label1:
        $r3 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.util.HashMap calendarCache>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r2);

        $r30 = (org.quartz.Calendar) $r4;

     label2:
        if $r30 == null goto label3;

        return $r30;

     label3:
        $r5 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        r32 = interfaceinvoke $r5.<org.quartz.impl.jdbcjobstore.DriverDelegate: org.quartz.Calendar selectCalendar(java.sql.Connection,java.lang.String)>(r1, r2);

        $z1 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean isClustered>;

        if $z1 != 0 goto label4;

        $r6 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.util.HashMap calendarCache>;

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r32);

     label4:
        return r32;

     label5:
        $r16 := @caughtexception;

        $r17 = new org.quartz.JobPersistenceException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t retrieve calendar because a required class was not found: ");

        $r20 = virtualinvoke $r16.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r22, $r16);

        throw $r17;

     label6:
        $r9 := @caughtexception;

        $r10 = new org.quartz.JobPersistenceException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t retrieve calendar because the BLOB couldn\'t be deserialized: ");

        $r13 = virtualinvoke $r9.<java.io.IOException: java.lang.String getMessage()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r15, $r9);

        throw $r10;

     label7:
        $r23 := @caughtexception;

        $r24 = new org.quartz.JobPersistenceException;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t retrieve calendar: ");

        $r27 = virtualinvoke $r23.<java.sql.SQLException: java.lang.String getMessage()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r29, $r23);

        throw $r24;

        catch java.lang.ClassNotFoundException from label3 to label4 with label5;
        catch java.io.IOException from label3 to label4 with label6;
        catch java.sql.SQLException from label3 to label4 with label7;
    }

    public int getNumberOfJobs() throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$18 $r1;
        java.lang.Object $r2;
        java.lang.Integer $r3;
        int $i0;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        $r1 = new org.quartz.impl.jdbcjobstore.JobStoreSupport$18;

        specialinvoke $r1.<org.quartz.impl.jdbcjobstore.JobStoreSupport$18: void <init>(org.quartz.impl.jdbcjobstore.JobStoreSupport)>(r0);

        $r2 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.Object executeWithoutLock(org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback)>($r1);

        $r3 = (java.lang.Integer) $r2;

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    protected int getNumberOfJobs(java.sql.Connection) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        org.quartz.impl.jdbcjobstore.DriverDelegate $r3;
        int $i0;
        java.sql.SQLException $r4;
        org.quartz.JobPersistenceException $r5;
        java.lang.StringBuilder $r6, $r7, $r9;
        java.lang.String $r8, $r10;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

     label1:
        $r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $i0 = interfaceinvoke $r3.<org.quartz.impl.jdbcjobstore.DriverDelegate: int selectNumJobs(java.sql.Connection)>(r1);

     label2:
        return $i0;

     label3:
        $r4 := @caughtexception;

        $r5 = new org.quartz.JobPersistenceException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t obtain number of jobs: ");

        $r8 = virtualinvoke $r4.<java.sql.SQLException: java.lang.String getMessage()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r10, $r4);

        throw $r5;

        catch java.sql.SQLException from label1 to label2 with label3;
    }

    public int getNumberOfTriggers() throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$19 $r1;
        java.lang.Object $r2;
        java.lang.Integer $r3;
        int $i0;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        $r1 = new org.quartz.impl.jdbcjobstore.JobStoreSupport$19;

        specialinvoke $r1.<org.quartz.impl.jdbcjobstore.JobStoreSupport$19: void <init>(org.quartz.impl.jdbcjobstore.JobStoreSupport)>(r0);

        $r2 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.Object executeWithoutLock(org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback)>($r1);

        $r3 = (java.lang.Integer) $r2;

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    protected int getNumberOfTriggers(java.sql.Connection) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        org.quartz.impl.jdbcjobstore.DriverDelegate $r3;
        int $i0;
        java.sql.SQLException $r4;
        org.quartz.JobPersistenceException $r5;
        java.lang.StringBuilder $r6, $r7, $r9;
        java.lang.String $r8, $r10;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

     label1:
        $r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $i0 = interfaceinvoke $r3.<org.quartz.impl.jdbcjobstore.DriverDelegate: int selectNumTriggers(java.sql.Connection)>(r1);

     label2:
        return $i0;

     label3:
        $r4 := @caughtexception;

        $r5 = new org.quartz.JobPersistenceException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t obtain number of triggers: ");

        $r8 = virtualinvoke $r4.<java.sql.SQLException: java.lang.String getMessage()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r10, $r4);

        throw $r5;

        catch java.sql.SQLException from label1 to label2 with label3;
    }

    public int getNumberOfCalendars() throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$20 $r1;
        java.lang.Object $r2;
        java.lang.Integer $r3;
        int $i0;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        $r1 = new org.quartz.impl.jdbcjobstore.JobStoreSupport$20;

        specialinvoke $r1.<org.quartz.impl.jdbcjobstore.JobStoreSupport$20: void <init>(org.quartz.impl.jdbcjobstore.JobStoreSupport)>(r0);

        $r2 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.Object executeWithoutLock(org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback)>($r1);

        $r3 = (java.lang.Integer) $r2;

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    protected int getNumberOfCalendars(java.sql.Connection) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        org.quartz.impl.jdbcjobstore.DriverDelegate $r3;
        int $i0;
        java.sql.SQLException $r4;
        org.quartz.JobPersistenceException $r5;
        java.lang.StringBuilder $r6, $r7, $r9;
        java.lang.String $r8, $r10;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

     label1:
        $r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $i0 = interfaceinvoke $r3.<org.quartz.impl.jdbcjobstore.DriverDelegate: int selectNumCalendars(java.sql.Connection)>(r1);

     label2:
        return $i0;

     label3:
        $r4 := @caughtexception;

        $r5 = new org.quartz.JobPersistenceException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t obtain number of calendars: ");

        $r8 = virtualinvoke $r4.<java.sql.SQLException: java.lang.String getMessage()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r10, $r4);

        throw $r5;

        catch java.sql.SQLException from label1 to label2 with label3;
    }

    public java.util.Set getJobKeys(org.quartz.impl.matchers.GroupMatcher) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        org.quartz.impl.matchers.GroupMatcher r1;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$21 $r2;
        java.lang.Object $r3;
        java.util.Set $r4;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: org.quartz.impl.matchers.GroupMatcher;

        $r2 = new org.quartz.impl.jdbcjobstore.JobStoreSupport$21;

        specialinvoke $r2.<org.quartz.impl.jdbcjobstore.JobStoreSupport$21: void <init>(org.quartz.impl.jdbcjobstore.JobStoreSupport,org.quartz.impl.matchers.GroupMatcher)>(r0, r1);

        $r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.Object executeWithoutLock(org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback)>($r2);

        $r4 = (java.util.Set) $r3;

        return $r4;
    }

    protected java.util.Set getJobNames(java.sql.Connection, org.quartz.impl.matchers.GroupMatcher) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        org.quartz.impl.matchers.GroupMatcher r2;
        java.util.Set r3;
        org.quartz.impl.jdbcjobstore.DriverDelegate $r5;
        java.sql.SQLException $r6;
        org.quartz.JobPersistenceException $r7;
        java.lang.StringBuilder $r8, $r9, $r11;
        java.lang.String $r10, $r12;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.impl.matchers.GroupMatcher;

     label1:
        $r5 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        r3 = interfaceinvoke $r5.<org.quartz.impl.jdbcjobstore.DriverDelegate: java.util.Set selectJobsInGroup(java.sql.Connection,org.quartz.impl.matchers.GroupMatcher)>(r1, r2);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = new org.quartz.JobPersistenceException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t obtain job names: ");

        $r10 = virtualinvoke $r6.<java.sql.SQLException: java.lang.String getMessage()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r12, $r6);

        throw $r7;

     label4:
        return r3;

        catch java.sql.SQLException from label1 to label2 with label3;
    }

    public boolean checkExists(org.quartz.JobKey) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        org.quartz.JobKey r1;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$22 $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: org.quartz.JobKey;

        $r2 = new org.quartz.impl.jdbcjobstore.JobStoreSupport$22;

        specialinvoke $r2.<org.quartz.impl.jdbcjobstore.JobStoreSupport$22: void <init>(org.quartz.impl.jdbcjobstore.JobStoreSupport,org.quartz.JobKey)>(r0, r1);

        $r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.Object executeWithoutLock(org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    protected boolean checkExists(java.sql.Connection, org.quartz.JobKey) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        org.quartz.JobKey r2;
        org.quartz.impl.jdbcjobstore.DriverDelegate $r4;
        boolean $z0;
        java.sql.SQLException $r5;
        org.quartz.JobPersistenceException $r6;
        java.lang.StringBuilder $r7, $r8, $r10;
        java.lang.String $r9, $r11;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.JobKey;

     label1:
        $r4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $z0 = interfaceinvoke $r4.<org.quartz.impl.jdbcjobstore.DriverDelegate: boolean jobExists(java.sql.Connection,org.quartz.JobKey)>(r1, r2);

     label2:
        return $z0;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.quartz.JobPersistenceException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t check for existence of job: ");

        $r9 = virtualinvoke $r5.<java.sql.SQLException: java.lang.String getMessage()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r11, $r5);

        throw $r6;

        catch java.sql.SQLException from label1 to label2 with label3;
    }

    public boolean checkExists(org.quartz.TriggerKey) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        org.quartz.TriggerKey r1;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$23 $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: org.quartz.TriggerKey;

        $r2 = new org.quartz.impl.jdbcjobstore.JobStoreSupport$23;

        specialinvoke $r2.<org.quartz.impl.jdbcjobstore.JobStoreSupport$23: void <init>(org.quartz.impl.jdbcjobstore.JobStoreSupport,org.quartz.TriggerKey)>(r0, r1);

        $r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.Object executeWithoutLock(org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    protected boolean checkExists(java.sql.Connection, org.quartz.TriggerKey) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        org.quartz.TriggerKey r2;
        org.quartz.impl.jdbcjobstore.DriverDelegate $r4;
        boolean $z0;
        java.sql.SQLException $r5;
        org.quartz.JobPersistenceException $r6;
        java.lang.StringBuilder $r7, $r8, $r10;
        java.lang.String $r9, $r11;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.TriggerKey;

     label1:
        $r4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $z0 = interfaceinvoke $r4.<org.quartz.impl.jdbcjobstore.DriverDelegate: boolean triggerExists(java.sql.Connection,org.quartz.TriggerKey)>(r1, r2);

     label2:
        return $z0;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.quartz.JobPersistenceException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t check for existence of job: ");

        $r9 = virtualinvoke $r5.<java.sql.SQLException: java.lang.String getMessage()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r11, $r5);

        throw $r6;

        catch java.sql.SQLException from label1 to label2 with label3;
    }

    public void clearAllSchedulingData() throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$24 $r1;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        $r1 = new org.quartz.impl.jdbcjobstore.JobStoreSupport$24;

        specialinvoke $r1.<org.quartz.impl.jdbcjobstore.JobStoreSupport$24: void <init>(org.quartz.impl.jdbcjobstore.JobStoreSupport)>(r0);

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.Object executeInLock(java.lang.String,org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback)>("TRIGGER_ACCESS", $r1);

        return;
    }

    protected void clearAllSchedulingData(java.sql.Connection) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        org.quartz.impl.jdbcjobstore.DriverDelegate $r3;
        java.sql.SQLException $r4;
        org.quartz.JobPersistenceException $r5;
        java.lang.StringBuilder $r6, $r7, $r9;
        java.lang.String $r8, $r10;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

     label1:
        $r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        interfaceinvoke $r3.<org.quartz.impl.jdbcjobstore.DriverDelegate: void clearData(java.sql.Connection)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new org.quartz.JobPersistenceException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error clearing scheduling data: ");

        $r8 = virtualinvoke $r4.<java.sql.SQLException: java.lang.String getMessage()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r10, $r4);

        throw $r5;

     label4:
        return;

        catch java.sql.SQLException from label1 to label2 with label3;
    }

    public java.util.Set getTriggerKeys(org.quartz.impl.matchers.GroupMatcher) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        org.quartz.impl.matchers.GroupMatcher r1;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$25 $r2;
        java.lang.Object $r3;
        java.util.Set $r4;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: org.quartz.impl.matchers.GroupMatcher;

        $r2 = new org.quartz.impl.jdbcjobstore.JobStoreSupport$25;

        specialinvoke $r2.<org.quartz.impl.jdbcjobstore.JobStoreSupport$25: void <init>(org.quartz.impl.jdbcjobstore.JobStoreSupport,org.quartz.impl.matchers.GroupMatcher)>(r0, r1);

        $r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.Object executeWithoutLock(org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback)>($r2);

        $r4 = (java.util.Set) $r3;

        return $r4;
    }

    protected java.util.Set getTriggerNames(java.sql.Connection, org.quartz.impl.matchers.GroupMatcher) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        org.quartz.impl.matchers.GroupMatcher r2;
        java.util.Set r3;
        org.quartz.impl.jdbcjobstore.DriverDelegate $r5;
        java.sql.SQLException $r6;
        org.quartz.JobPersistenceException $r7;
        java.lang.StringBuilder $r8, $r9, $r11;
        java.lang.String $r10, $r12;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.impl.matchers.GroupMatcher;

     label1:
        $r5 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        r3 = interfaceinvoke $r5.<org.quartz.impl.jdbcjobstore.DriverDelegate: java.util.Set selectTriggersInGroup(java.sql.Connection,org.quartz.impl.matchers.GroupMatcher)>(r1, r2);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = new org.quartz.JobPersistenceException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t obtain trigger names: ");

        $r10 = virtualinvoke $r6.<java.sql.SQLException: java.lang.String getMessage()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r12, $r6);

        throw $r7;

     label4:
        return r3;

        catch java.sql.SQLException from label1 to label2 with label3;
    }

    public java.util.List getJobGroupNames() throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$26 $r1;
        java.lang.Object $r2;
        java.util.List $r3;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        $r1 = new org.quartz.impl.jdbcjobstore.JobStoreSupport$26;

        specialinvoke $r1.<org.quartz.impl.jdbcjobstore.JobStoreSupport$26: void <init>(org.quartz.impl.jdbcjobstore.JobStoreSupport)>(r0);

        $r2 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.Object executeWithoutLock(org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback)>($r1);

        $r3 = (java.util.List) $r2;

        return $r3;
    }

    protected java.util.List getJobGroupNames(java.sql.Connection) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        java.util.List r2;
        org.quartz.impl.jdbcjobstore.DriverDelegate $r4;
        java.sql.SQLException $r5;
        org.quartz.JobPersistenceException $r6;
        java.lang.StringBuilder $r7, $r8, $r10;
        java.lang.String $r9, $r11;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

     label1:
        $r4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        r2 = interfaceinvoke $r4.<org.quartz.impl.jdbcjobstore.DriverDelegate: java.util.List selectJobGroups(java.sql.Connection)>(r1);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.quartz.JobPersistenceException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t obtain job groups: ");

        $r9 = virtualinvoke $r5.<java.sql.SQLException: java.lang.String getMessage()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r11, $r5);

        throw $r6;

     label4:
        return r2;

        catch java.sql.SQLException from label1 to label2 with label3;
    }

    public java.util.List getTriggerGroupNames() throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$27 $r1;
        java.lang.Object $r2;
        java.util.List $r3;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        $r1 = new org.quartz.impl.jdbcjobstore.JobStoreSupport$27;

        specialinvoke $r1.<org.quartz.impl.jdbcjobstore.JobStoreSupport$27: void <init>(org.quartz.impl.jdbcjobstore.JobStoreSupport)>(r0);

        $r2 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.Object executeWithoutLock(org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback)>($r1);

        $r3 = (java.util.List) $r2;

        return $r3;
    }

    protected java.util.List getTriggerGroupNames(java.sql.Connection) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        java.util.List r2;
        org.quartz.impl.jdbcjobstore.DriverDelegate $r4;
        java.sql.SQLException $r5;
        org.quartz.JobPersistenceException $r6;
        java.lang.StringBuilder $r7, $r8, $r10;
        java.lang.String $r9, $r11;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

     label1:
        $r4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        r2 = interfaceinvoke $r4.<org.quartz.impl.jdbcjobstore.DriverDelegate: java.util.List selectTriggerGroups(java.sql.Connection)>(r1);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.quartz.JobPersistenceException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t obtain trigger groups: ");

        $r9 = virtualinvoke $r5.<java.sql.SQLException: java.lang.String getMessage()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r11, $r5);

        throw $r6;

     label4:
        return r2;

        catch java.sql.SQLException from label1 to label2 with label3;
    }

    public java.util.List getCalendarNames() throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$28 $r1;
        java.lang.Object $r2;
        java.util.List $r3;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        $r1 = new org.quartz.impl.jdbcjobstore.JobStoreSupport$28;

        specialinvoke $r1.<org.quartz.impl.jdbcjobstore.JobStoreSupport$28: void <init>(org.quartz.impl.jdbcjobstore.JobStoreSupport)>(r0);

        $r2 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.Object executeWithoutLock(org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback)>($r1);

        $r3 = (java.util.List) $r2;

        return $r3;
    }

    protected java.util.List getCalendarNames(java.sql.Connection) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        org.quartz.impl.jdbcjobstore.DriverDelegate $r3;
        java.util.List $r4;
        java.sql.SQLException $r5;
        org.quartz.JobPersistenceException $r6;
        java.lang.StringBuilder $r7, $r8, $r10;
        java.lang.String $r9, $r11;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

     label1:
        $r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $r4 = interfaceinvoke $r3.<org.quartz.impl.jdbcjobstore.DriverDelegate: java.util.List selectCalendars(java.sql.Connection)>(r1);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.quartz.JobPersistenceException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t obtain trigger groups: ");

        $r9 = virtualinvoke $r5.<java.sql.SQLException: java.lang.String getMessage()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r11, $r5);

        throw $r6;

        catch java.sql.SQLException from label1 to label2 with label3;
    }

    public java.util.List getTriggersForJob(org.quartz.JobKey) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        org.quartz.JobKey r1;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$29 $r2;
        java.lang.Object $r3;
        java.util.List $r4;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: org.quartz.JobKey;

        $r2 = new org.quartz.impl.jdbcjobstore.JobStoreSupport$29;

        specialinvoke $r2.<org.quartz.impl.jdbcjobstore.JobStoreSupport$29: void <init>(org.quartz.impl.jdbcjobstore.JobStoreSupport,org.quartz.JobKey)>(r0, r1);

        $r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.Object executeWithoutLock(org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback)>($r2);

        $r4 = (java.util.List) $r3;

        return $r4;
    }

    protected java.util.List getTriggersForJob(java.sql.Connection, org.quartz.JobKey) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        org.quartz.JobKey r2;
        java.util.List r3;
        org.quartz.impl.jdbcjobstore.DriverDelegate $r5;
        java.lang.Exception $r6;
        org.quartz.JobPersistenceException $r7;
        java.lang.StringBuilder $r8, $r9, $r11;
        java.lang.String $r10, $r12;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.JobKey;

     label1:
        $r5 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        r3 = interfaceinvoke $r5.<org.quartz.impl.jdbcjobstore.DriverDelegate: java.util.List selectTriggersForJob(java.sql.Connection,org.quartz.JobKey)>(r1, r2);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = new org.quartz.JobPersistenceException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t obtain triggers for job: ");

        $r10 = virtualinvoke $r6.<java.lang.Exception: java.lang.String getMessage()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r12, $r6);

        throw $r7;

     label4:
        return r3;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void pauseTrigger(org.quartz.TriggerKey) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        org.quartz.TriggerKey r1;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$30 $r2;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: org.quartz.TriggerKey;

        $r2 = new org.quartz.impl.jdbcjobstore.JobStoreSupport$30;

        specialinvoke $r2.<org.quartz.impl.jdbcjobstore.JobStoreSupport$30: void <init>(org.quartz.impl.jdbcjobstore.JobStoreSupport,org.quartz.TriggerKey)>(r0, r1);

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.Object executeInLock(java.lang.String,org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback)>("TRIGGER_ACCESS", $r2);

        return;
    }

    public void pauseTrigger(java.sql.Connection, org.quartz.TriggerKey) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        org.quartz.TriggerKey r2;
        org.quartz.impl.jdbcjobstore.DriverDelegate $r3, $r4, $r5;
        boolean $z0, $z1, $z2;
        java.sql.SQLException $r6;
        org.quartz.JobPersistenceException $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r13;
        java.lang.String $r12, $r14, r15;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.TriggerKey;

     label1:
        $r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        r15 = interfaceinvoke $r3.<org.quartz.impl.jdbcjobstore.DriverDelegate: java.lang.String selectTriggerState(java.sql.Connection,org.quartz.TriggerKey)>(r1, r2);

        $z0 = virtualinvoke r15.<java.lang.String: boolean equals(java.lang.Object)>("WAITING");

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r15.<java.lang.String: boolean equals(java.lang.Object)>("ACQUIRED");

        if $z1 == 0 goto label3;

     label2:
        $r4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        interfaceinvoke $r4.<org.quartz.impl.jdbcjobstore.DriverDelegate: int updateTriggerState(java.sql.Connection,org.quartz.TriggerKey,java.lang.String)>(r1, r2, "PAUSED");

        goto label4;

     label3:
        $z2 = virtualinvoke r15.<java.lang.String: boolean equals(java.lang.Object)>("BLOCKED");

        if $z2 == 0 goto label4;

        $r5 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        interfaceinvoke $r5.<org.quartz.impl.jdbcjobstore.DriverDelegate: int updateTriggerState(java.sql.Connection,org.quartz.TriggerKey,java.lang.String)>(r1, r2, "PAUSED_BLOCKED");

     label4:
        goto label6;

     label5:
        $r6 := @caughtexception;

        $r7 = new org.quartz.JobPersistenceException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t pause trigger \'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': ");

        $r12 = virtualinvoke $r6.<java.sql.SQLException: java.lang.String getMessage()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r14, $r6);

        throw $r7;

     label6:
        return;

        catch java.sql.SQLException from label1 to label4 with label5;
    }

    public void pauseJob(org.quartz.JobKey) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        org.quartz.JobKey r1;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$31 $r2;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: org.quartz.JobKey;

        $r2 = new org.quartz.impl.jdbcjobstore.JobStoreSupport$31;

        specialinvoke $r2.<org.quartz.impl.jdbcjobstore.JobStoreSupport$31: void <init>(org.quartz.impl.jdbcjobstore.JobStoreSupport,org.quartz.JobKey)>(r0, r1);

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.Object executeInLock(java.lang.String,org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback)>("TRIGGER_ACCESS", $r2);

        return;
    }

    public java.util.Set pauseJobs(org.quartz.impl.matchers.GroupMatcher) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        org.quartz.impl.matchers.GroupMatcher r1;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$32 $r2;
        java.lang.Object $r3;
        java.util.Set $r4;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: org.quartz.impl.matchers.GroupMatcher;

        $r2 = new org.quartz.impl.jdbcjobstore.JobStoreSupport$32;

        specialinvoke $r2.<org.quartz.impl.jdbcjobstore.JobStoreSupport$32: void <init>(org.quartz.impl.jdbcjobstore.JobStoreSupport,org.quartz.impl.matchers.GroupMatcher)>(r0, r1);

        $r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.Object executeInLock(java.lang.String,org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback)>("TRIGGER_ACCESS", $r2);

        $r4 = (java.util.Set) $r3;

        return $r4;
    }

    protected java.lang.String checkBlockedState(java.sql.Connection, org.quartz.JobKey, java.lang.String) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        org.quartz.JobKey r2;
        java.lang.String r3, $r6, $r7, $r10, $r17, $r19, $r21;
        org.quartz.impl.jdbcjobstore.FiredTriggerRecord r4;
        boolean $z0, $z1, $z2, $z3;
        org.quartz.impl.jdbcjobstore.DriverDelegate $r5;
        int $i0;
        java.lang.Object $r8;
        java.sql.SQLException $r11;
        org.quartz.JobPersistenceException $r12;
        java.lang.StringBuilder $r13, $r14, $r15, $r16, $r18;
        java.util.List r20;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.JobKey;

        r3 := @parameter2: java.lang.String;

        $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("WAITING");

        if $z0 != 0 goto label1;

        $z3 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("PAUSED");

        if $z3 != 0 goto label1;

        return r3;

     label1:
        $r5 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $r6 = virtualinvoke r2.<org.quartz.JobKey: java.lang.String getName()>();

        $r7 = virtualinvoke r2.<org.quartz.JobKey: java.lang.String getGroup()>();

        r20 = interfaceinvoke $r5.<org.quartz.impl.jdbcjobstore.DriverDelegate: java.util.List selectFiredTriggerRecordsByJob(java.sql.Connection,java.lang.String,java.lang.String)>(r1, $r6, $r7);

        $i0 = interfaceinvoke r20.<java.util.List: int size()>();

        if $i0 <= 0 goto label4;

        $r8 = interfaceinvoke r20.<java.util.List: java.lang.Object get(int)>(0);

        r4 = (org.quartz.impl.jdbcjobstore.FiredTriggerRecord) $r8;

        $z1 = virtualinvoke r4.<org.quartz.impl.jdbcjobstore.FiredTriggerRecord: boolean isJobDisallowsConcurrentExecution()>();

        if $z1 == 0 goto label4;

        $r10 = "PAUSED";

        $z2 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z2 == 0 goto label2;

        $r21 = "PAUSED_BLOCKED";

        goto label3;

     label2:
        $r21 = "BLOCKED";

     label3:
        return $r21;

     label4:
        return r3;

     label5:
        $r11 := @caughtexception;

        $r12 = new org.quartz.JobPersistenceException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t determine if trigger should be in a blocked state \'");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': ");

        $r17 = virtualinvoke $r11.<java.sql.SQLException: java.lang.String getMessage()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r19, $r11);

        throw $r12;

        catch java.sql.SQLException from label1 to label3 with label5;
    }

    public void resumeTrigger(org.quartz.TriggerKey) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        org.quartz.TriggerKey r1;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$33 $r2;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: org.quartz.TriggerKey;

        $r2 = new org.quartz.impl.jdbcjobstore.JobStoreSupport$33;

        specialinvoke $r2.<org.quartz.impl.jdbcjobstore.JobStoreSupport$33: void <init>(org.quartz.impl.jdbcjobstore.JobStoreSupport,org.quartz.TriggerKey)>(r0, r1);

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.Object executeInLock(java.lang.String,org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback)>("TRIGGER_ACCESS", $r2);

        return;
    }

    public void resumeTrigger(java.sql.Connection, org.quartz.TriggerKey) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        org.quartz.TriggerKey r2;
        java.lang.String r3, $r6, $r7, $r19, $r21;
        org.quartz.impl.jdbcjobstore.DriverDelegate $r4, $r9, $r10;
        java.util.Date $r5, $r11, $r12;
        boolean $z0, $z1, $z2, z3, z4;
        org.quartz.JobKey $r8;
        java.sql.SQLException $r13;
        org.quartz.JobPersistenceException $r14;
        java.lang.StringBuilder $r15, $r16, $r17, $r18, $r20;
        org.quartz.impl.jdbcjobstore.TriggerStatus r22;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.TriggerKey;

     label1:
        $r4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        r22 = interfaceinvoke $r4.<org.quartz.impl.jdbcjobstore.DriverDelegate: org.quartz.impl.jdbcjobstore.TriggerStatus selectTriggerStatus(java.sql.Connection,org.quartz.TriggerKey)>(r1, r2);

        if r22 == null goto label2;

        $r5 = virtualinvoke r22.<org.quartz.impl.jdbcjobstore.TriggerStatus: java.util.Date getNextFireTime()>();

        if $r5 != null goto label3;

     label2:
        return;

     label3:
        z3 = 0;

        $r6 = "PAUSED_BLOCKED";

        $r7 = virtualinvoke r22.<org.quartz.impl.jdbcjobstore.TriggerStatus: java.lang.String getStatus()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label4;

        z3 = 1;

     label4:
        $r8 = virtualinvoke r22.<org.quartz.impl.jdbcjobstore.TriggerStatus: org.quartz.JobKey getJobKey()>();

        r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.String checkBlockedState(java.sql.Connection,org.quartz.JobKey,java.lang.String)>(r1, $r8, "WAITING");

        z4 = 0;

        $z1 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean schedulerRunning>;

        if $z1 == 0 goto label5;

        $r11 = virtualinvoke r22.<org.quartz.impl.jdbcjobstore.TriggerStatus: java.util.Date getNextFireTime()>();

        $r12 = new java.util.Date;

        specialinvoke $r12.<java.util.Date: void <init>()>();

        $z2 = virtualinvoke $r11.<java.util.Date: boolean before(java.util.Date)>($r12);

        if $z2 == 0 goto label5;

        z4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean updateMisfiredTrigger(java.sql.Connection,org.quartz.TriggerKey,java.lang.String,boolean)>(r1, r2, r3, 1);

     label5:
        if z4 != 0 goto label7;

        if z3 == 0 goto label6;

        $r10 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        interfaceinvoke $r10.<org.quartz.impl.jdbcjobstore.DriverDelegate: int updateTriggerStateFromOtherState(java.sql.Connection,org.quartz.TriggerKey,java.lang.String,java.lang.String)>(r1, r2, r3, "PAUSED_BLOCKED");

        goto label7;

     label6:
        $r9 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        interfaceinvoke $r9.<org.quartz.impl.jdbcjobstore.DriverDelegate: int updateTriggerStateFromOtherState(java.sql.Connection,org.quartz.TriggerKey,java.lang.String,java.lang.String)>(r1, r2, r3, "PAUSED");

     label7:
        goto label9;

     label8:
        $r13 := @caughtexception;

        $r14 = new org.quartz.JobPersistenceException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t resume trigger \'");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': ");

        $r19 = virtualinvoke $r13.<java.sql.SQLException: java.lang.String getMessage()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r21, $r13);

        throw $r14;

     label9:
        return;

        catch java.sql.SQLException from label1 to label2 with label8;
        catch java.sql.SQLException from label3 to label7 with label8;
    }

    public void resumeJob(org.quartz.JobKey) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        org.quartz.JobKey r1;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$34 $r2;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: org.quartz.JobKey;

        $r2 = new org.quartz.impl.jdbcjobstore.JobStoreSupport$34;

        specialinvoke $r2.<org.quartz.impl.jdbcjobstore.JobStoreSupport$34: void <init>(org.quartz.impl.jdbcjobstore.JobStoreSupport,org.quartz.JobKey)>(r0, r1);

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.Object executeInLock(java.lang.String,org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback)>("TRIGGER_ACCESS", $r2);

        return;
    }

    public java.util.Set resumeJobs(org.quartz.impl.matchers.GroupMatcher) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        org.quartz.impl.matchers.GroupMatcher r1;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$35 $r2;
        java.lang.Object $r3;
        java.util.Set $r4;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: org.quartz.impl.matchers.GroupMatcher;

        $r2 = new org.quartz.impl.jdbcjobstore.JobStoreSupport$35;

        specialinvoke $r2.<org.quartz.impl.jdbcjobstore.JobStoreSupport$35: void <init>(org.quartz.impl.jdbcjobstore.JobStoreSupport,org.quartz.impl.matchers.GroupMatcher)>(r0, r1);

        $r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.Object executeInLock(java.lang.String,org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback)>("TRIGGER_ACCESS", $r2);

        $r4 = (java.util.Set) $r3;

        return $r4;
    }

    public java.util.Set pauseTriggers(org.quartz.impl.matchers.GroupMatcher) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        org.quartz.impl.matchers.GroupMatcher r1;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$36 $r2;
        java.lang.Object $r3;
        java.util.Set $r4;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: org.quartz.impl.matchers.GroupMatcher;

        $r2 = new org.quartz.impl.jdbcjobstore.JobStoreSupport$36;

        specialinvoke $r2.<org.quartz.impl.jdbcjobstore.JobStoreSupport$36: void <init>(org.quartz.impl.jdbcjobstore.JobStoreSupport,org.quartz.impl.matchers.GroupMatcher)>(r0, r1);

        $r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.Object executeInLock(java.lang.String,org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback)>("TRIGGER_ACCESS", $r2);

        $r4 = (java.util.Set) $r3;

        return $r4;
    }

    public java.util.Set pauseTriggerGroup(java.sql.Connection, org.quartz.impl.matchers.GroupMatcher) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        org.quartz.impl.matchers.GroupMatcher r2;
        org.quartz.impl.matchers.StringMatcher$StringOperatorName r3, $r9;
        java.util.Iterator r4;
        java.lang.String r5, $r14, $r15, $r22, $r24;
        org.quartz.impl.jdbcjobstore.DriverDelegate $r6, $r7, $r8, $r12, $r13;
        boolean $z0, $z1, $z2, $z4;
        java.util.HashSet $r10;
        java.lang.Object $r11;
        java.sql.SQLException $r16;
        org.quartz.JobPersistenceException $r17;
        java.lang.StringBuilder $r18, $r19, $r20, $r21, $r23;
        java.util.List r25;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.impl.matchers.GroupMatcher;

     label1:
        $r6 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        interfaceinvoke $r6.<org.quartz.impl.jdbcjobstore.DriverDelegate: int updateTriggerGroupStateFromOtherStates(java.sql.Connection,org.quartz.impl.matchers.GroupMatcher,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, "PAUSED", "ACQUIRED", "WAITING", "WAITING");

        $r7 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        interfaceinvoke $r7.<org.quartz.impl.jdbcjobstore.DriverDelegate: int updateTriggerGroupStateFromOtherState(java.sql.Connection,org.quartz.impl.matchers.GroupMatcher,java.lang.String,java.lang.String)>(r1, r2, "PAUSED_BLOCKED", "BLOCKED");

        $r8 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        r25 = interfaceinvoke $r8.<org.quartz.impl.jdbcjobstore.DriverDelegate: java.util.List selectTriggerGroups(java.sql.Connection,org.quartz.impl.matchers.GroupMatcher)>(r1, r2);

        r3 = virtualinvoke r2.<org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.StringMatcher$StringOperatorName getCompareWithOperator()>();

        $r9 = <org.quartz.impl.matchers.StringMatcher$StringOperatorName: org.quartz.impl.matchers.StringMatcher$StringOperatorName EQUALS>;

        $z0 = virtualinvoke r3.<org.quartz.impl.matchers.StringMatcher$StringOperatorName: boolean equals(java.lang.Object)>($r9);

        if $z0 == 0 goto label2;

        $r14 = virtualinvoke r2.<org.quartz.impl.matchers.GroupMatcher: java.lang.String getCompareToValue()>();

        $z2 = interfaceinvoke r25.<java.util.List: boolean contains(java.lang.Object)>($r14);

        if $z2 != 0 goto label2;

        $r15 = virtualinvoke r2.<org.quartz.impl.matchers.GroupMatcher: java.lang.String getCompareToValue()>();

        interfaceinvoke r25.<java.util.List: boolean add(java.lang.Object)>($r15);

     label2:
        r4 = interfaceinvoke r25.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z4 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label5;

        $r11 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r11;

        $r12 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $z1 = interfaceinvoke $r12.<org.quartz.impl.jdbcjobstore.DriverDelegate: boolean isTriggerGroupPaused(java.sql.Connection,java.lang.String)>(r1, r5);

        if $z1 != 0 goto label4;

        $r13 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        interfaceinvoke $r13.<org.quartz.impl.jdbcjobstore.DriverDelegate: int insertPausedTriggerGroup(java.sql.Connection,java.lang.String)>(r1, r5);

     label4:
        goto label3;

     label5:
        $r10 = new java.util.HashSet;

        specialinvoke $r10.<java.util.HashSet: void <init>(java.util.Collection)>(r25);

     label6:
        return $r10;

     label7:
        $r16 := @caughtexception;

        $r17 = new org.quartz.JobPersistenceException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t pause trigger group \'");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': ");

        $r22 = virtualinvoke $r16.<java.sql.SQLException: java.lang.String getMessage()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r24, $r16);

        throw $r17;

        catch java.sql.SQLException from label1 to label6 with label7;
    }

    public java.util.Set getPausedTriggerGroups() throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$37 $r1;
        java.lang.Object $r2;
        java.util.Set $r3;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        $r1 = new org.quartz.impl.jdbcjobstore.JobStoreSupport$37;

        specialinvoke $r1.<org.quartz.impl.jdbcjobstore.JobStoreSupport$37: void <init>(org.quartz.impl.jdbcjobstore.JobStoreSupport)>(r0);

        $r2 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.Object executeWithoutLock(org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback)>($r1);

        $r3 = (java.util.Set) $r2;

        return $r3;
    }

    public java.util.Set getPausedTriggerGroups(java.sql.Connection) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        org.quartz.impl.jdbcjobstore.DriverDelegate $r3;
        java.util.Set $r4;
        java.sql.SQLException $r5;
        org.quartz.JobPersistenceException $r6;
        java.lang.StringBuilder $r7, $r8, $r10;
        java.lang.String $r9, $r11;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

     label1:
        $r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $r4 = interfaceinvoke $r3.<org.quartz.impl.jdbcjobstore.DriverDelegate: java.util.Set selectPausedTriggerGroups(java.sql.Connection)>(r1);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.quartz.JobPersistenceException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t determine paused trigger groups: ");

        $r9 = virtualinvoke $r5.<java.sql.SQLException: java.lang.String getMessage()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r11, $r5);

        throw $r6;

        catch java.sql.SQLException from label1 to label2 with label3;
    }

    public java.util.Set resumeTriggers(org.quartz.impl.matchers.GroupMatcher) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        org.quartz.impl.matchers.GroupMatcher r1;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$38 $r2;
        java.lang.Object $r3;
        java.util.Set $r4;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: org.quartz.impl.matchers.GroupMatcher;

        $r2 = new org.quartz.impl.jdbcjobstore.JobStoreSupport$38;

        specialinvoke $r2.<org.quartz.impl.jdbcjobstore.JobStoreSupport$38: void <init>(org.quartz.impl.jdbcjobstore.JobStoreSupport,org.quartz.impl.matchers.GroupMatcher)>(r0, r1);

        $r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.Object executeInLock(java.lang.String,org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback)>("TRIGGER_ACCESS", $r2);

        $r4 = (java.util.Set) $r3;

        return $r4;
    }

    public java.util.Set resumeTriggerGroup(java.sql.Connection, org.quartz.impl.matchers.GroupMatcher) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        org.quartz.impl.matchers.GroupMatcher r2;
        java.util.Set r3;
        java.util.Iterator r4;
        org.quartz.TriggerKey r5;
        org.quartz.impl.jdbcjobstore.DriverDelegate $r6, $r8;
        java.util.HashSet $r7;
        boolean $z0;
        java.lang.Object $r9;
        java.lang.String $r10, $r17, $r19;
        java.sql.SQLException $r11;
        org.quartz.JobPersistenceException $r12;
        java.lang.StringBuilder $r13, $r14, $r15, $r16, $r18;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.impl.matchers.GroupMatcher;

     label1:
        $r6 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        interfaceinvoke $r6.<org.quartz.impl.jdbcjobstore.DriverDelegate: int deletePausedTriggerGroup(java.sql.Connection,org.quartz.impl.matchers.GroupMatcher)>(r1, r2);

        $r7 = new java.util.HashSet;

        specialinvoke $r7.<java.util.HashSet: void <init>()>();

        $r8 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        r3 = interfaceinvoke $r8.<org.quartz.impl.jdbcjobstore.DriverDelegate: java.util.Set selectTriggersInGroup(java.sql.Connection,org.quartz.impl.matchers.GroupMatcher)>(r1, r2);

        r4 = interfaceinvoke r3.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r9 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.quartz.TriggerKey) $r9;

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void resumeTrigger(java.sql.Connection,org.quartz.TriggerKey)>(r1, r5);

        $r10 = virtualinvoke r5.<org.quartz.TriggerKey: java.lang.String getGroup()>();

        virtualinvoke $r7.<java.util.HashSet: boolean add(java.lang.Object)>($r10);

        goto label2;

     label3:
        return $r7;

     label4:
        $r11 := @caughtexception;

        $r12 = new org.quartz.JobPersistenceException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t pause trigger group \'");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': ");

        $r17 = virtualinvoke $r11.<java.sql.SQLException: java.lang.String getMessage()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r19, $r11);

        throw $r12;

        catch java.sql.SQLException from label1 to label3 with label4;
    }

    public void pauseAll() throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$39 $r1;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        $r1 = new org.quartz.impl.jdbcjobstore.JobStoreSupport$39;

        specialinvoke $r1.<org.quartz.impl.jdbcjobstore.JobStoreSupport$39: void <init>(org.quartz.impl.jdbcjobstore.JobStoreSupport)>(r0);

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.Object executeInLock(java.lang.String,org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback)>("TRIGGER_ACCESS", $r1);

        return;
    }

    public void pauseAll(java.sql.Connection) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        java.util.List r2;
        java.lang.String r3, $r13, $r15;
        boolean $z0, $z1;
        org.quartz.impl.jdbcjobstore.DriverDelegate $r4, $r5;
        java.lang.Object $r6;
        org.quartz.impl.matchers.GroupMatcher $r7;
        java.sql.SQLException $r9;
        org.quartz.JobPersistenceException $r10;
        java.lang.StringBuilder $r11, $r12, $r14;
        java.util.Iterator r16;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

        r2 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.util.List getTriggerGroupNames(java.sql.Connection)>(r1);

        r16 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r6;

        $r7 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher triggerGroupEquals(java.lang.String)>(r3);

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.util.Set pauseTriggerGroup(java.sql.Connection,org.quartz.impl.matchers.GroupMatcher)>(r1, $r7);

        goto label1;

     label2:
        $r4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $z1 = interfaceinvoke $r4.<org.quartz.impl.jdbcjobstore.DriverDelegate: boolean isTriggerGroupPaused(java.sql.Connection,java.lang.String)>(r1, "_$_ALL_GROUPS_PAUSED_$_");

        if $z1 != 0 goto label3;

        $r5 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        interfaceinvoke $r5.<org.quartz.impl.jdbcjobstore.DriverDelegate: int insertPausedTriggerGroup(java.sql.Connection,java.lang.String)>(r1, "_$_ALL_GROUPS_PAUSED_$_");

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;

        $r10 = new org.quartz.JobPersistenceException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t pause all trigger groups: ");

        $r13 = virtualinvoke $r9.<java.sql.SQLException: java.lang.String getMessage()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r15, $r9);

        throw $r10;

     label5:
        return;

        catch java.sql.SQLException from label2 to label3 with label4;
    }

    public void resumeAll() throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$40 $r1;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        $r1 = new org.quartz.impl.jdbcjobstore.JobStoreSupport$40;

        specialinvoke $r1.<org.quartz.impl.jdbcjobstore.JobStoreSupport$40: void <init>(org.quartz.impl.jdbcjobstore.JobStoreSupport)>(r0);

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.Object executeInLock(java.lang.String,org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback)>("TRIGGER_ACCESS", $r1);

        return;
    }

    public void resumeAll(java.sql.Connection) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        java.util.List r2;
        java.lang.String r3, $r12, $r14;
        boolean $z0;
        org.quartz.impl.jdbcjobstore.DriverDelegate $r4;
        java.lang.Object $r5;
        org.quartz.impl.matchers.GroupMatcher $r6;
        java.sql.SQLException $r8;
        org.quartz.JobPersistenceException $r9;
        java.lang.StringBuilder $r10, $r11, $r13;
        java.util.Iterator r15;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

        r2 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.util.List getTriggerGroupNames(java.sql.Connection)>(r1);

        r15 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r5;

        $r6 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher triggerGroupEquals(java.lang.String)>(r3);

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.util.Set resumeTriggerGroup(java.sql.Connection,org.quartz.impl.matchers.GroupMatcher)>(r1, $r6);

        goto label1;

     label2:
        $r4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        interfaceinvoke $r4.<org.quartz.impl.jdbcjobstore.DriverDelegate: int deletePausedTriggerGroup(java.sql.Connection,java.lang.String)>(r1, "_$_ALL_GROUPS_PAUSED_$_");

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;

        $r9 = new org.quartz.JobPersistenceException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t resume all trigger groups: ");

        $r12 = virtualinvoke $r8.<java.sql.SQLException: java.lang.String getMessage()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r14, $r8);

        throw $r9;

     label5:
        return;

        catch java.sql.SQLException from label2 to label3 with label4;
    }

    protected synchronized java.lang.String getFiredTriggerRecordId()
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5;
        long $l0, $l1;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.String getInstanceId()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $l0 = <org.quartz.impl.jdbcjobstore.JobStoreSupport: long ftrCtr>;

        $l1 = $l0 + 1L;

        <org.quartz.impl.jdbcjobstore.JobStoreSupport: long ftrCtr> = $l1;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public java.util.List acquireNextTriggers(long, int, long) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        long l0, l2;
        int i1;
        boolean $z0;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$41 $r1;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$42 $r2;
        java.lang.Object $r3;
        java.util.List $r4;
        java.lang.String r5;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        l2 := @parameter2: long;

        $z0 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean isAcquireTriggersWithinLock()>();

        if $z0 != 0 goto label1;

        if i1 <= 1 goto label2;

     label1:
        r5 = "TRIGGER_ACCESS";

        goto label3;

     label2:
        r5 = null;

     label3:
        $r1 = new org.quartz.impl.jdbcjobstore.JobStoreSupport$41;

        specialinvoke $r1.<org.quartz.impl.jdbcjobstore.JobStoreSupport$41: void <init>(org.quartz.impl.jdbcjobstore.JobStoreSupport,long,int,long)>(r0, l0, i1, l2);

        $r2 = new org.quartz.impl.jdbcjobstore.JobStoreSupport$42;

        specialinvoke $r2.<org.quartz.impl.jdbcjobstore.JobStoreSupport$42: void <init>(org.quartz.impl.jdbcjobstore.JobStoreSupport)>(r0);

        $r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.Object executeInNonManagedTXLock(java.lang.String,org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback,org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionValidator)>(r5, $r1, $r2);

        $r4 = (java.util.List) $r3;

        return $r4;
    }

    protected java.util.List acquireNextTrigger(java.sql.Connection, long, int, long) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        long l0, l2, $l5, $l6, $l9, $l12, $l13, $l14, l17;
        int i1, $i7, $i8, i16, i18;
        java.util.Iterator r4;
        org.quartz.TriggerKey r5, $r17;
        org.quartz.spi.OperableTrigger r6;
        org.quartz.JobKey r7;
        org.quartz.JobDetail r8;
        byte $b4, $b10;
        java.util.ArrayList $r9;
        java.util.HashSet $r10;
        org.quartz.impl.jdbcjobstore.DriverDelegate $r11, $r13, $r15, $r31;
        java.lang.Object $r12;
        boolean $z0, $z1, $z3, $z5;
        java.lang.String $r14, $r24, $r26;
        org.slf4j.Logger $r16, $r28, $r30;
        java.lang.IllegalArgumentException $r19;
        java.lang.Exception $r20;
        org.quartz.JobPersistenceException $r21, $r29;
        java.lang.StringBuilder $r22, $r23, $r25;
        java.sql.SQLException $r27;
        java.util.List r32;
        java.util.Date r35;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        l2 := @parameter3: long;

        $b4 = l2 cmp 0L;

        if $b4 >= 0 goto label01;

        $r19 = new java.lang.IllegalArgumentException;

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r19;

     label01:
        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        $r10 = new java.util.HashSet;

        specialinvoke $r10.<java.util.HashSet: void <init>()>();

        i16 = 0;

     label02:
        i16 = i16 + 1;

     label03:
        $r11 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $l5 = l0 + l2;

        $l6 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: long getMisfireTime()>();

        r32 = interfaceinvoke $r11.<org.quartz.impl.jdbcjobstore.DriverDelegate: java.util.List selectTriggerToAcquire(java.sql.Connection,long,long,int)>(r1, $l5, $l6, i1);

        if r32 == null goto label04;

        $i7 = interfaceinvoke r32.<java.util.List: int size()>();

        if $i7 != 0 goto label05;

     label04:
        return $r9;

     label05:
        l17 = l0;

        r4 = interfaceinvoke r32.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z5 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label22;

        $r12 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.quartz.TriggerKey) $r12;

        r6 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.spi.OperableTrigger retrieveTrigger(java.sql.Connection,org.quartz.TriggerKey)>(r1, r5);

        if r6 != null goto label07;

        goto label06;

     label07:
        r7 = interfaceinvoke r6.<org.quartz.spi.OperableTrigger: org.quartz.JobKey getJobKey()>();

     label08:
        r8 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.JobDetail retrieveJob(java.sql.Connection,org.quartz.JobKey)>(r1, r7);

     label09:
        goto label15;

     label10:
        $r29 := @caughtexception;

     label11:
        $r30 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.slf4j.Logger getLog()>();

        interfaceinvoke $r30.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Error retrieving job, setting trigger state to ERROR.", $r29);

        $r31 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        interfaceinvoke $r31.<org.quartz.impl.jdbcjobstore.DriverDelegate: int updateTriggerState(java.sql.Connection,org.quartz.TriggerKey,java.lang.String)>(r1, r5, "ERROR");

     label12:
        goto label14;

     label13:
        $r27 := @caughtexception;

        $r28 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.slf4j.Logger getLog()>();

        interfaceinvoke $r28.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Unable to set trigger state to ERROR.", $r27);

     label14:
        goto label06;

     label15:
        $z0 = interfaceinvoke r8.<org.quartz.JobDetail: boolean isConcurrentExectionDisallowed()>();

        if $z0 == 0 goto label17;

        $z3 = interfaceinvoke $r10.<java.util.Set: boolean contains(java.lang.Object)>(r7);

        if $z3 == 0 goto label16;

        goto label06;

     label16:
        interfaceinvoke $r10.<java.util.Set: boolean add(java.lang.Object)>(r7);

     label17:
        r35 = interfaceinvoke r6.<org.quartz.spi.OperableTrigger: java.util.Date getNextFireTime()>();

        if r35 != null goto label18;

        $r16 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.slf4j.Logger log>;

        $r17 = interfaceinvoke r6.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        interfaceinvoke $r16.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>("Trigger {} returned null on nextFireTime and yet still exists in DB!", $r17);

        goto label06;

     label18:
        $l9 = virtualinvoke r35.<java.util.Date: long getTime()>();

        $b10 = $l9 cmp l17;

        if $b10 <= 0 goto label19;

        goto label22;

     label19:
        $r13 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        i18 = interfaceinvoke $r13.<org.quartz.impl.jdbcjobstore.DriverDelegate: int updateTriggerStateFromOtherState(java.sql.Connection,org.quartz.TriggerKey,java.lang.String,java.lang.String)>(r1, r5, "ACQUIRED", "WAITING");

        if i18 > 0 goto label20;

        goto label06;

     label20:
        $r14 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.String getFiredTriggerRecordId()>();

        interfaceinvoke r6.<org.quartz.spi.OperableTrigger: void setFireInstanceId(java.lang.String)>($r14);

        $r15 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        interfaceinvoke $r15.<org.quartz.impl.jdbcjobstore.DriverDelegate: int insertFiredTrigger(java.sql.Connection,org.quartz.spi.OperableTrigger,java.lang.String,org.quartz.JobDetail)>(r1, r6, "ACQUIRED", null);

        $z1 = interfaceinvoke $r9.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label21;

        $l12 = virtualinvoke r35.<java.util.Date: long getTime()>();

        $l13 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l14 = staticinvoke <java.lang.Math: long max(long,long)>($l12, $l13);

        l17 = $l14 + l2;

     label21:
        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>(r6);

        goto label06;

     label22:
        $i8 = interfaceinvoke $r9.<java.util.List: int size()>();

        if $i8 != 0 goto label24;

        if i16 >= 3 goto label24;

     label23:
        goto label02;

     label24:
        goto label26;

     label25:
        $r20 := @caughtexception;

        $r21 = new org.quartz.JobPersistenceException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t acquire next trigger: ");

        $r24 = virtualinvoke $r20.<java.lang.Exception: java.lang.String getMessage()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r26, $r20);

        throw $r21;

     label26:
        return $r9;

        catch org.quartz.JobPersistenceException from label08 to label09 with label10;
        catch java.sql.SQLException from label11 to label12 with label13;
        catch java.lang.Exception from label03 to label04 with label25;
        catch java.lang.Exception from label05 to label23 with label25;
    }

    public void releaseAcquiredTrigger(org.quartz.spi.OperableTrigger)
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        org.quartz.spi.OperableTrigger r1;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$43 $r2;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: org.quartz.spi.OperableTrigger;

        $r2 = new org.quartz.impl.jdbcjobstore.JobStoreSupport$43;

        specialinvoke $r2.<org.quartz.impl.jdbcjobstore.JobStoreSupport$43: void <init>(org.quartz.impl.jdbcjobstore.JobStoreSupport,org.quartz.spi.OperableTrigger)>(r0, r1);

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.Object retryExecuteInNonManagedTXLock(java.lang.String,org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback)>("TRIGGER_ACCESS", $r2);

        return;
    }

    protected void releaseAcquiredTrigger(java.sql.Connection, org.quartz.spi.OperableTrigger) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        org.quartz.spi.OperableTrigger r2;
        org.quartz.impl.jdbcjobstore.DriverDelegate $r4, $r6, $r8;
        org.quartz.TriggerKey $r5, $r7;
        java.lang.String $r9, $r14, $r16;
        java.sql.SQLException $r10;
        org.quartz.JobPersistenceException $r11;
        java.lang.StringBuilder $r12, $r13, $r15;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.spi.OperableTrigger;

     label1:
        $r4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $r5 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        interfaceinvoke $r4.<org.quartz.impl.jdbcjobstore.DriverDelegate: int updateTriggerStateFromOtherState(java.sql.Connection,org.quartz.TriggerKey,java.lang.String,java.lang.String)>(r1, $r5, "WAITING", "ACQUIRED");

        $r6 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $r7 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        interfaceinvoke $r6.<org.quartz.impl.jdbcjobstore.DriverDelegate: int updateTriggerStateFromOtherState(java.sql.Connection,org.quartz.TriggerKey,java.lang.String,java.lang.String)>(r1, $r7, "WAITING", "BLOCKED");

        $r8 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $r9 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: java.lang.String getFireInstanceId()>();

        interfaceinvoke $r8.<org.quartz.impl.jdbcjobstore.DriverDelegate: int deleteFiredTrigger(java.sql.Connection,java.lang.String)>(r1, $r9);

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        $r11 = new org.quartz.JobPersistenceException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t release acquired trigger: ");

        $r14 = virtualinvoke $r10.<java.sql.SQLException: java.lang.String getMessage()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r16, $r10);

        throw $r11;

     label4:
        return;

        catch java.sql.SQLException from label1 to label2 with label3;
    }

    public java.util.List triggersFired(java.util.List) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.util.List r1, $r5;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$44 $r2;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$45 $r3;
        java.lang.Object $r4;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.util.List;

        $r2 = new org.quartz.impl.jdbcjobstore.JobStoreSupport$44;

        specialinvoke $r2.<org.quartz.impl.jdbcjobstore.JobStoreSupport$44: void <init>(org.quartz.impl.jdbcjobstore.JobStoreSupport,java.util.List)>(r0, r1);

        $r3 = new org.quartz.impl.jdbcjobstore.JobStoreSupport$45;

        specialinvoke $r3.<org.quartz.impl.jdbcjobstore.JobStoreSupport$45: void <init>(org.quartz.impl.jdbcjobstore.JobStoreSupport)>(r0);

        $r4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.Object executeInNonManagedTXLock(java.lang.String,org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback,org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionValidator)>("TRIGGER_ACCESS", $r2, $r3);

        $r5 = (java.util.List) $r4;

        return $r5;
    }

    protected org.quartz.spi.TriggerFiredBundle triggerFired(java.sql.Connection, org.quartz.spi.OperableTrigger) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        org.quartz.spi.OperableTrigger r2;
        org.quartz.JobDetail r3;
        org.quartz.impl.jdbcjobstore.DriverDelegate $r5, $r9, $r18, $r20, $r22, $r50;
        org.quartz.TriggerKey $r6, $r13, $r51;
        boolean $z0, $z1, $z2, z3;
        org.quartz.JobKey $r7, $r19, $r21, $r23;
        java.lang.String $r8, $r14, $r24, $r29, $r31, $r36, $r38, $r45, $r47, r53, r59;
        java.util.Date $r10, $r15, $r16, $r17, r58;
        org.quartz.JobDataMap $r11;
        org.quartz.spi.TriggerFiredBundle $r12;
        java.sql.SQLException $r25, $r32, $r39, $r41;
        org.quartz.JobPersistenceException $r26, $r33, $r42, $r48;
        java.lang.StringBuilder $r27, $r28, $r30, $r34, $r35, $r37, $r43, $r44, $r46;
        org.slf4j.Logger $r40, $r49;
        org.quartz.Calendar r52;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.spi.OperableTrigger;

        r52 = null;

     label01:
        $r5 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $r6 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        r53 = interfaceinvoke $r5.<org.quartz.impl.jdbcjobstore.DriverDelegate: java.lang.String selectTriggerState(java.sql.Connection,org.quartz.TriggerKey)>(r1, $r6);

        $z0 = virtualinvoke r53.<java.lang.String: boolean equals(java.lang.Object)>("ACQUIRED");

        if $z0 != 0 goto label03;

     label02:
        return null;

     label03:
        goto label05;

     label04:
        $r25 := @caughtexception;

        $r26 = new org.quartz.JobPersistenceException;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t select trigger state: ");

        $r29 = virtualinvoke $r25.<java.sql.SQLException: java.lang.String getMessage()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r31, $r25);

        throw $r26;

     label05:
        $r7 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: org.quartz.JobKey getJobKey()>();

        r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.JobDetail retrieveJob(java.sql.Connection,org.quartz.JobKey)>(r1, $r7);

        if r3 != null goto label07;

     label06:
        return null;

     label07:
        goto label13;

     label08:
        $r48 := @caughtexception;

     label09:
        $r49 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.slf4j.Logger getLog()>();

        interfaceinvoke $r49.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Error retrieving job, setting trigger state to ERROR.", $r48);

        $r50 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $r51 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        interfaceinvoke $r50.<org.quartz.impl.jdbcjobstore.DriverDelegate: int updateTriggerState(java.sql.Connection,org.quartz.TriggerKey,java.lang.String)>(r1, $r51, "ERROR");

     label10:
        goto label12;

     label11:
        $r39 := @caughtexception;

        $r40 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.slf4j.Logger getLog()>();

        interfaceinvoke $r40.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Unable to set trigger state to ERROR.", $r39);

     label12:
        throw $r48;

     label13:
        $r8 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: java.lang.String getCalendarName()>();

        if $r8 == null goto label14;

        $r24 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: java.lang.String getCalendarName()>();

        r52 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.Calendar retrieveCalendar(java.sql.Connection,java.lang.String)>(r1, $r24);

        if r52 != null goto label14;

        return null;

     label14:
        $r9 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        interfaceinvoke $r9.<org.quartz.impl.jdbcjobstore.DriverDelegate: int updateFiredTrigger(java.sql.Connection,org.quartz.spi.OperableTrigger,java.lang.String,org.quartz.JobDetail)>(r1, r2, "EXECUTING", r3);

     label15:
        goto label17;

     label16:
        $r32 := @caughtexception;

        $r33 = new org.quartz.JobPersistenceException;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t insert fired trigger: ");

        $r36 = virtualinvoke $r32.<java.sql.SQLException: java.lang.String getMessage()>();

        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r33.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r38, $r32);

        throw $r33;

     label17:
        r58 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: java.util.Date getPreviousFireTime()>();

        interfaceinvoke r2.<org.quartz.spi.OperableTrigger: void triggered(org.quartz.Calendar)>(r52);

        r59 = "WAITING";

        z3 = 1;

        $z1 = interfaceinvoke r3.<org.quartz.JobDetail: boolean isConcurrentExectionDisallowed()>();

        if $z1 == 0 goto label21;

        r59 = "BLOCKED";

        z3 = 0;

     label18:
        $r18 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $r19 = interfaceinvoke r3.<org.quartz.JobDetail: org.quartz.JobKey getKey()>();

        interfaceinvoke $r18.<org.quartz.impl.jdbcjobstore.DriverDelegate: int updateTriggerStatesForJobFromOtherState(java.sql.Connection,org.quartz.JobKey,java.lang.String,java.lang.String)>(r1, $r19, "BLOCKED", "WAITING");

        $r20 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $r21 = interfaceinvoke r3.<org.quartz.JobDetail: org.quartz.JobKey getKey()>();

        interfaceinvoke $r20.<org.quartz.impl.jdbcjobstore.DriverDelegate: int updateTriggerStatesForJobFromOtherState(java.sql.Connection,org.quartz.JobKey,java.lang.String,java.lang.String)>(r1, $r21, "BLOCKED", "ACQUIRED");

        $r22 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $r23 = interfaceinvoke r3.<org.quartz.JobDetail: org.quartz.JobKey getKey()>();

        interfaceinvoke $r22.<org.quartz.impl.jdbcjobstore.DriverDelegate: int updateTriggerStatesForJobFromOtherState(java.sql.Connection,org.quartz.JobKey,java.lang.String,java.lang.String)>(r1, $r23, "PAUSED_BLOCKED", "PAUSED");

     label19:
        goto label21;

     label20:
        $r41 := @caughtexception;

        $r42 = new org.quartz.JobPersistenceException;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t update states of blocked triggers: ");

        $r45 = virtualinvoke $r41.<java.sql.SQLException: java.lang.String getMessage()>();

        $r46 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r42.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r47, $r41);

        throw $r42;

     label21:
        $r10 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: java.util.Date getNextFireTime()>();

        if $r10 != null goto label22;

        r59 = "COMPLETE";

        z3 = 1;

     label22:
        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void storeTrigger(java.sql.Connection,org.quartz.spi.OperableTrigger,org.quartz.JobDetail,boolean,java.lang.String,boolean,boolean)>(r1, r2, r3, 1, r59, z3, 0);

        $r11 = interfaceinvoke r3.<org.quartz.JobDetail: org.quartz.JobDataMap getJobDataMap()>();

        virtualinvoke $r11.<org.quartz.JobDataMap: void clearDirtyFlag()>();

        $r12 = new org.quartz.spi.TriggerFiredBundle;

        $r13 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        $r14 = virtualinvoke $r13.<org.quartz.TriggerKey: java.lang.String getGroup()>();

        $z2 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>("RECOVERING_JOBS");

        $r15 = new java.util.Date;

        specialinvoke $r15.<java.util.Date: void <init>()>();

        $r16 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: java.util.Date getPreviousFireTime()>();

        $r17 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: java.util.Date getNextFireTime()>();

        specialinvoke $r12.<org.quartz.spi.TriggerFiredBundle: void <init>(org.quartz.JobDetail,org.quartz.spi.OperableTrigger,org.quartz.Calendar,boolean,java.util.Date,java.util.Date,java.util.Date,java.util.Date)>(r3, r2, r52, $z2, $r15, $r16, r58, $r17);

        return $r12;

        catch java.sql.SQLException from label01 to label02 with label04;
        catch org.quartz.JobPersistenceException from label05 to label06 with label08;
        catch java.sql.SQLException from label09 to label10 with label11;
        catch java.sql.SQLException from label14 to label15 with label16;
        catch java.sql.SQLException from label18 to label19 with label20;
    }

    public void triggeredJobComplete(org.quartz.spi.OperableTrigger, org.quartz.JobDetail, org.quartz.Trigger$CompletedExecutionInstruction)
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        org.quartz.spi.OperableTrigger r1;
        org.quartz.JobDetail r2;
        org.quartz.Trigger$CompletedExecutionInstruction r3;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$46 $r4;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: org.quartz.spi.OperableTrigger;

        r2 := @parameter1: org.quartz.JobDetail;

        r3 := @parameter2: org.quartz.Trigger$CompletedExecutionInstruction;

        $r4 = new org.quartz.impl.jdbcjobstore.JobStoreSupport$46;

        specialinvoke $r4.<org.quartz.impl.jdbcjobstore.JobStoreSupport$46: void <init>(org.quartz.impl.jdbcjobstore.JobStoreSupport,org.quartz.spi.OperableTrigger,org.quartz.JobDetail,org.quartz.Trigger$CompletedExecutionInstruction)>(r0, r1, r2, r3);

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.Object retryExecuteInNonManagedTXLock(java.lang.String,org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback)>("TRIGGER_ACCESS", $r4);

        return;
    }

    protected void triggeredJobComplete(java.sql.Connection, org.quartz.spi.OperableTrigger, org.quartz.JobDetail, org.quartz.Trigger$CompletedExecutionInstruction) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        org.quartz.spi.OperableTrigger r2;
        org.quartz.JobDetail r3;
        org.quartz.Trigger$CompletedExecutionInstruction r4, $r5, $r6, $r7, $r8, $r9;
        boolean $z0, $z1, $z4;
        org.quartz.impl.jdbcjobstore.DriverDelegate $r10, $r13, $r14, $r16, $r25, $r27, $r36, $r38, $r42;
        java.lang.String $r11, $r24, $r35, $r50, $r52, $r57, $r59, $r64, $r66, $r71, $r73;
        org.quartz.JobDataMap $r12;
        org.quartz.JobKey $r15, $r17, $r26, $r28;
        org.slf4j.Logger $r18, $r29;
        java.lang.StringBuilder $r19, $r20, $r22, $r23, $r30, $r31, $r33, $r34, $r48, $r49, $r51, $r55, $r56, $r58, $r62, $r63, $r65, $r69, $r70, $r72;
        org.quartz.TriggerKey $r21, $r32, $r37, $r39, $r41, $r43, $r45;
        java.util.Date $r40, $r44;
        java.sql.SQLException $r46, $r53, $r67;
        org.quartz.JobPersistenceException $r47, $r54, $r61, $r68;
        java.io.IOException $r60;
        org.quartz.impl.jdbcjobstore.TriggerStatus r74;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.spi.OperableTrigger;

        r3 := @parameter2: org.quartz.JobDetail;

        r4 := @parameter3: org.quartz.Trigger$CompletedExecutionInstruction;

     label01:
        $r5 = <org.quartz.Trigger$CompletedExecutionInstruction: org.quartz.Trigger$CompletedExecutionInstruction DELETE_TRIGGER>;

        if r4 != $r5 goto label04;

        $r40 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: java.util.Date getNextFireTime()>();

        if $r40 != null goto label03;

        $r42 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $r43 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        r74 = interfaceinvoke $r42.<org.quartz.impl.jdbcjobstore.DriverDelegate: org.quartz.impl.jdbcjobstore.TriggerStatus selectTriggerStatus(java.sql.Connection,org.quartz.TriggerKey)>(r1, $r43);

        if r74 == null goto label02;

        $r44 = virtualinvoke r74.<org.quartz.impl.jdbcjobstore.TriggerStatus: java.util.Date getNextFireTime()>();

        if $r44 != null goto label02;

        $r45 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean removeTrigger(java.sql.Connection,org.quartz.TriggerKey)>(r1, $r45);

     label02:
        goto label08;

     label03:
        $r41 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean removeTrigger(java.sql.Connection,org.quartz.TriggerKey)>(r1, $r41);

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void signalSchedulingChangeOnTxCompletion(long)>(0L);

        goto label08;

     label04:
        $r6 = <org.quartz.Trigger$CompletedExecutionInstruction: org.quartz.Trigger$CompletedExecutionInstruction SET_TRIGGER_COMPLETE>;

        if r4 != $r6 goto label05;

        $r38 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $r39 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        interfaceinvoke $r38.<org.quartz.impl.jdbcjobstore.DriverDelegate: int updateTriggerState(java.sql.Connection,org.quartz.TriggerKey,java.lang.String)>(r1, $r39, "COMPLETE");

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void signalSchedulingChangeOnTxCompletion(long)>(0L);

        goto label08;

     label05:
        $r7 = <org.quartz.Trigger$CompletedExecutionInstruction: org.quartz.Trigger$CompletedExecutionInstruction SET_TRIGGER_ERROR>;

        if r4 != $r7 goto label06;

        $r29 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.slf4j.Logger getLog()>();

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Trigger ");

        $r32 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" set to ERROR state.");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r29.<org.slf4j.Logger: void info(java.lang.String)>($r35);

        $r36 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $r37 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        interfaceinvoke $r36.<org.quartz.impl.jdbcjobstore.DriverDelegate: int updateTriggerState(java.sql.Connection,org.quartz.TriggerKey,java.lang.String)>(r1, $r37, "ERROR");

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void signalSchedulingChangeOnTxCompletion(long)>(0L);

        goto label08;

     label06:
        $r8 = <org.quartz.Trigger$CompletedExecutionInstruction: org.quartz.Trigger$CompletedExecutionInstruction SET_ALL_JOB_TRIGGERS_COMPLETE>;

        if r4 != $r8 goto label07;

        $r27 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $r28 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: org.quartz.JobKey getJobKey()>();

        interfaceinvoke $r27.<org.quartz.impl.jdbcjobstore.DriverDelegate: int updateTriggerStatesForJob(java.sql.Connection,org.quartz.JobKey,java.lang.String)>(r1, $r28, "COMPLETE");

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void signalSchedulingChangeOnTxCompletion(long)>(0L);

        goto label08;

     label07:
        $r9 = <org.quartz.Trigger$CompletedExecutionInstruction: org.quartz.Trigger$CompletedExecutionInstruction SET_ALL_JOB_TRIGGERS_ERROR>;

        if r4 != $r9 goto label08;

        $r18 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.slf4j.Logger getLog()>();

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("All triggers of Job ");

        $r21 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" set to ERROR state.");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r18.<org.slf4j.Logger: void info(java.lang.String)>($r24);

        $r25 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $r26 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: org.quartz.JobKey getJobKey()>();

        interfaceinvoke $r25.<org.quartz.impl.jdbcjobstore.DriverDelegate: int updateTriggerStatesForJob(java.sql.Connection,org.quartz.JobKey,java.lang.String)>(r1, $r26, "ERROR");

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void signalSchedulingChangeOnTxCompletion(long)>(0L);

     label08:
        $z4 = interfaceinvoke r3.<org.quartz.JobDetail: boolean isConcurrentExectionDisallowed()>();

        if $z4 == 0 goto label09;

        $r14 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $r15 = interfaceinvoke r3.<org.quartz.JobDetail: org.quartz.JobKey getKey()>();

        interfaceinvoke $r14.<org.quartz.impl.jdbcjobstore.DriverDelegate: int updateTriggerStatesForJobFromOtherState(java.sql.Connection,org.quartz.JobKey,java.lang.String,java.lang.String)>(r1, $r15, "WAITING", "BLOCKED");

        $r16 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $r17 = interfaceinvoke r3.<org.quartz.JobDetail: org.quartz.JobKey getKey()>();

        interfaceinvoke $r16.<org.quartz.impl.jdbcjobstore.DriverDelegate: int updateTriggerStatesForJobFromOtherState(java.sql.Connection,org.quartz.JobKey,java.lang.String,java.lang.String)>(r1, $r17, "PAUSED", "PAUSED_BLOCKED");

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void signalSchedulingChangeOnTxCompletion(long)>(0L);

     label09:
        $z0 = interfaceinvoke r3.<org.quartz.JobDetail: boolean isPersistJobDataAfterExecution()>();

        if $z0 == 0 goto label14;

     label10:
        $r12 = interfaceinvoke r3.<org.quartz.JobDetail: org.quartz.JobDataMap getJobDataMap()>();

        $z1 = virtualinvoke $r12.<org.quartz.JobDataMap: boolean isDirty()>();

        if $z1 == 0 goto label11;

        $r13 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        interfaceinvoke $r13.<org.quartz.impl.jdbcjobstore.DriverDelegate: int updateJobData(java.sql.Connection,org.quartz.JobDetail)>(r1, r3);

     label11:
        goto label14;

     label12:
        $r60 := @caughtexception;

        $r61 = new org.quartz.JobPersistenceException;

        $r62 = new java.lang.StringBuilder;

        specialinvoke $r62.<java.lang.StringBuilder: void <init>()>();

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t serialize job data: ");

        $r64 = virtualinvoke $r60.<java.io.IOException: java.lang.String getMessage()>();

        $r65 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r64);

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r61.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r66, $r60);

        throw $r61;

     label13:
        $r67 := @caughtexception;

        $r68 = new org.quartz.JobPersistenceException;

        $r69 = new java.lang.StringBuilder;

        specialinvoke $r69.<java.lang.StringBuilder: void <init>()>();

        $r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t update job data: ");

        $r71 = virtualinvoke $r67.<java.sql.SQLException: java.lang.String getMessage()>();

        $r72 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r71);

        $r73 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r68.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r73, $r67);

        throw $r68;

     label14:
        goto label16;

     label15:
        $r53 := @caughtexception;

        $r54 = new org.quartz.JobPersistenceException;

        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>()>();

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t update trigger state(s): ");

        $r57 = virtualinvoke $r53.<java.sql.SQLException: java.lang.String getMessage()>();

        $r58 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r57);

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r54.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r59, $r53);

        throw $r54;

     label16:
        $r10 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $r11 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: java.lang.String getFireInstanceId()>();

        interfaceinvoke $r10.<org.quartz.impl.jdbcjobstore.DriverDelegate: int deleteFiredTrigger(java.sql.Connection,java.lang.String)>(r1, $r11);

     label17:
        goto label19;

     label18:
        $r46 := @caughtexception;

        $r47 = new org.quartz.JobPersistenceException;

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t delete fired trigger: ");

        $r50 = virtualinvoke $r46.<java.sql.SQLException: java.lang.String getMessage()>();

        $r51 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r50);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r47.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r52, $r46);

        throw $r47;

     label19:
        return;

        catch java.io.IOException from label10 to label11 with label12;
        catch java.sql.SQLException from label10 to label11 with label13;
        catch java.sql.SQLException from label01 to label14 with label15;
        catch java.sql.SQLException from label16 to label17 with label18;
    }

    protected org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate() throws org.quartz.impl.jdbcjobstore.NoSuchDelegateException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        org.quartz.impl.jdbcjobstore.DriverDelegate $r4, $r5, $r9, $r10;
        java.lang.String $r6, $r12, $r13, $r14, $r16, $r18, $r24, $r26, $r31, $r33, $r38, $r40;
        java.lang.Class $r7, $r19;
        java.lang.Object $r8;
        org.slf4j.Logger $r11;
        org.quartz.spi.ClassLoadHelper $r15, $r17;
        boolean $z0;
        java.lang.IllegalAccessException $r20;
        org.quartz.impl.jdbcjobstore.NoSuchDelegateException $r21, $r28, $r35;
        java.lang.StringBuilder $r22, $r23, $r25, $r29, $r30, $r32, $r36, $r37, $r39;
        java.lang.ClassNotFoundException $r27;
        java.lang.InstantiationException $r34;
        java.lang.Throwable $r41;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        entermonitor r0;

     label01:
        $r4 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate delegate>;

        if null != $r4 goto label08;

     label02:
        $r6 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.String delegateClassName>;

        if $r6 == null goto label03;

        $r17 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.spi.ClassLoadHelper getClassLoadHelper()>();

        $r18 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.String delegateClassName>;

        $r19 = interfaceinvoke $r17.<org.quartz.spi.ClassLoadHelper: java.lang.Class loadClass(java.lang.String,java.lang.Class)>($r18, class "Lorg/quartz/impl/jdbcjobstore/DriverDelegate;");

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.Class delegateClass> = $r19;

     label03:
        $r7 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.Class delegateClass>;

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.Object newInstance()>();

        $r9 = (org.quartz.impl.jdbcjobstore.DriverDelegate) $r8;

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate delegate> = $r9;

        $r10 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate delegate>;

        $r11 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.slf4j.Logger getLog()>();

        $r12 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.String tablePrefix>;

        $r13 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.String instanceName>;

        $r14 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.String instanceId>;

        $r15 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.spi.ClassLoadHelper getClassLoadHelper()>();

        $z0 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean canUseProperties()>();

        $r16 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.String getDriverDelegateInitString()>();

        interfaceinvoke $r10.<org.quartz.impl.jdbcjobstore.DriverDelegate: void initialize(org.slf4j.Logger,java.lang.String,java.lang.String,java.lang.String,org.quartz.spi.ClassLoadHelper,boolean,java.lang.String)>($r11, $r12, $r13, $r14, $r15, $z0, $r16);

     label04:
        goto label08;

     label05:
        $r34 := @caughtexception;

        $r35 = new org.quartz.impl.jdbcjobstore.NoSuchDelegateException;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t create delegate: ");

        $r38 = virtualinvoke $r34.<java.lang.InstantiationException: java.lang.String getMessage()>();

        $r39 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r35.<org.quartz.impl.jdbcjobstore.NoSuchDelegateException: void <init>(java.lang.String,java.lang.Throwable)>($r40, $r34);

        throw $r35;

     label06:
        $r20 := @caughtexception;

        $r21 = new org.quartz.impl.jdbcjobstore.NoSuchDelegateException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t create delegate: ");

        $r24 = virtualinvoke $r20.<java.lang.IllegalAccessException: java.lang.String getMessage()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<org.quartz.impl.jdbcjobstore.NoSuchDelegateException: void <init>(java.lang.String,java.lang.Throwable)>($r26, $r20);

        throw $r21;

     label07:
        $r27 := @caughtexception;

        $r28 = new org.quartz.impl.jdbcjobstore.NoSuchDelegateException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t load delegate class: ");

        $r31 = virtualinvoke $r27.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r28.<org.quartz.impl.jdbcjobstore.NoSuchDelegateException: void <init>(java.lang.String,java.lang.Throwable)>($r33, $r27);

        throw $r28;

     label08:
        $r5 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate delegate>;

        exitmonitor r0;

     label09:
        return $r5;

     label10:
        $r41 := @caughtexception;

        exitmonitor r0;

     label11:
        throw $r41;

        catch java.lang.InstantiationException from label02 to label04 with label05;
        catch java.lang.IllegalAccessException from label02 to label04 with label06;
        catch java.lang.ClassNotFoundException from label02 to label04 with label07;
        catch java.lang.Throwable from label01 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    protected org.quartz.impl.jdbcjobstore.Semaphore getLockHandler()
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        org.quartz.impl.jdbcjobstore.Semaphore $r1;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        $r1 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.Semaphore lockHandler>;

        return $r1;
    }

    public void setLockHandler(org.quartz.impl.jdbcjobstore.Semaphore)
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        org.quartz.impl.jdbcjobstore.Semaphore r1;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: org.quartz.impl.jdbcjobstore.Semaphore;

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.Semaphore lockHandler> = r1;

        return;
    }

    protected org.quartz.impl.jdbcjobstore.JobStoreSupport$RecoverMisfiredJobsResult doRecoverMisfires() throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        boolean $z0, z1;
        org.quartz.impl.jdbcjobstore.Semaphore $r6;
        org.slf4j.Logger $r7;
        org.quartz.impl.jdbcjobstore.DriverDelegate $r8;
        long $l1;
        java.lang.Throwable $r9, $r11, $r21;
        org.quartz.JobPersistenceException $r10, $r13, $r15;
        java.sql.SQLException $r12;
        java.lang.RuntimeException $r14;
        java.lang.StringBuilder $r16, $r17, $r19;
        java.lang.String $r18, $r20;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$RecoverMisfiredJobsResult r22;
        int $i2;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        z1 = 0;

        r1 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.sql.Connection getNonManagedTXConnection()>();

     label01:
        r22 = <org.quartz.impl.jdbcjobstore.JobStoreSupport$RecoverMisfiredJobsResult: org.quartz.impl.jdbcjobstore.JobStoreSupport$RecoverMisfiredJobsResult NO_OP>;

        $z0 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean getDoubleCheckLockMisfireHandler()>();

        if $z0 == 0 goto label02;

        $r8 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $l1 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: long getMisfireTime()>();

        $i2 = interfaceinvoke $r8.<org.quartz.impl.jdbcjobstore.DriverDelegate: int countMisfiredTriggersInState(java.sql.Connection,java.lang.String,long)>(r1, "WAITING", $l1);

        goto label03;

     label02:
        $i2 = 2147483647;

     label03:
        if $i2 != 0 goto label04;

        $r7 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.slf4j.Logger getLog()>();

        interfaceinvoke $r7.<org.slf4j.Logger: void debug(java.lang.String)>("Found 0 triggers that missed their scheduled fire-time.");

        goto label05;

     label04:
        $r6 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.Semaphore getLockHandler()>();

        z1 = interfaceinvoke $r6.<org.quartz.impl.jdbcjobstore.Semaphore: boolean obtainLock(java.sql.Connection,java.lang.String)>(r1, "TRIGGER_ACCESS");

        r22 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.JobStoreSupport$RecoverMisfiredJobsResult recoverMisfiredJobs(java.sql.Connection,boolean)>(r1, 0);

     label05:
        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void commitConnection(java.sql.Connection)>(r1);

     label06:
        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void releaseLock(java.lang.String,boolean)>("TRIGGER_ACCESS", z1);

     label07:
        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void cleanupConnection(java.sql.Connection)>(r1);

        goto label10;

     label08:
        $r11 := @caughtexception;

     label09:
        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void cleanupConnection(java.sql.Connection)>(r1);

        throw $r11;

     label10:
        return r22;

     label11:
        $r10 := @caughtexception;

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void rollbackConnection(java.sql.Connection)>(r1);

        throw $r10;

     label12:
        $r12 := @caughtexception;

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void rollbackConnection(java.sql.Connection)>(r1);

        $r13 = new org.quartz.JobPersistenceException;

        specialinvoke $r13.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>("Database error recovering from misfires.", $r12);

        throw $r13;

     label13:
        $r14 := @caughtexception;

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void rollbackConnection(java.sql.Connection)>(r1);

        $r15 = new org.quartz.JobPersistenceException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected runtime exception: ");

        $r18 = virtualinvoke $r14.<java.lang.RuntimeException: java.lang.String getMessage()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r20, $r14);

        throw $r15;

     label14:
        $r21 := @caughtexception;

     label15:
        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void releaseLock(java.lang.String,boolean)>("TRIGGER_ACCESS", z1);

     label16:
        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void cleanupConnection(java.sql.Connection)>(r1);

        goto label19;

     label17:
        $r9 := @caughtexception;

     label18:
        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void cleanupConnection(java.sql.Connection)>(r1);

        throw $r9;

     label19:
        throw $r21;

        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch org.quartz.JobPersistenceException from label01 to label06 with label11;
        catch java.sql.SQLException from label01 to label06 with label12;
        catch java.lang.RuntimeException from label01 to label06 with label13;
        catch java.lang.Throwable from label01 to label06 with label14;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
        catch java.lang.Throwable from label11 to label15 with label14;
    }

    protected void signalSchedulingChangeOnTxCompletion(long)
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        long l0, $l1;
        java.lang.Long r1, $r5, $r7;
        java.lang.ThreadLocal $r2, $r4, $r6;
        java.lang.Object $r3;
        byte $b2, $b3;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        l0 := @parameter0: long;

        $r2 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.ThreadLocal sigChangeForTxCompletion>;

        $r3 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>();

        r1 = (java.lang.Long) $r3;

        if r1 != null goto label1;

        $b3 = l0 cmp 0L;

        if $b3 < 0 goto label1;

        $r6 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.ThreadLocal sigChangeForTxCompletion>;

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        virtualinvoke $r6.<java.lang.ThreadLocal: void set(java.lang.Object)>($r7);

        goto label3;

     label1:
        if r1 == null goto label2;

        $l1 = virtualinvoke r1.<java.lang.Long: long longValue()>();

        $b2 = l0 cmp $l1;

        if $b2 >= 0 goto label3;

     label2:
        $r4 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.ThreadLocal sigChangeForTxCompletion>;

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        virtualinvoke $r4.<java.lang.ThreadLocal: void set(java.lang.Object)>($r5);

     label3:
        return;
    }

    protected java.lang.Long clearAndGetSignalSchedulingChangeOnTxCompletion()
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.lang.Long r1;
        java.lang.ThreadLocal $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        $r2 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.ThreadLocal sigChangeForTxCompletion>;

        $r3 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>();

        r1 = (java.lang.Long) $r3;

        $r4 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.ThreadLocal sigChangeForTxCompletion>;

        virtualinvoke $r4.<java.lang.ThreadLocal: void set(java.lang.Object)>(null);

        return r1;
    }

    protected void signalSchedulingChangeImmediately(long)
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        long l0;
        org.quartz.spi.SchedulerSignaler $r1;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        l0 := @parameter0: long;

        $r1 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.spi.SchedulerSignaler schedSignaler>;

        interfaceinvoke $r1.<org.quartz.spi.SchedulerSignaler: void signalSchedulingChange(long)>(l0);

        return;
    }

    protected boolean doCheckin() throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        boolean $z0, $z1, $z3, z5, z6, z7;
        org.quartz.impl.jdbcjobstore.Semaphore $r9, $r10;
        int $i0, $i1;
        java.lang.Throwable $r11, $r12, $r13, $r14, $r16, $r17, $r18;
        org.quartz.JobPersistenceException $r15;
        java.util.List r19, $r20;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        z5 = 0;

        z6 = 0;

        z7 = 0;

        r1 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.sql.Connection getNonManagedTXConnection()>();

     label01:
        r19 = null;

        $z0 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean firstCheckIn>;

        if $z0 != 0 goto label02;

        r19 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.util.List clusterCheckIn(java.sql.Connection)>(r1);

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void commitConnection(java.sql.Connection)>(r1);

     label02:
        $z1 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean firstCheckIn>;

        if $z1 != 0 goto label03;

        $i1 = interfaceinvoke r19.<java.util.List: int size()>();

        if $i1 <= 0 goto label06;

     label03:
        $r9 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.Semaphore getLockHandler()>();

        interfaceinvoke $r9.<org.quartz.impl.jdbcjobstore.Semaphore: boolean obtainLock(java.sql.Connection,java.lang.String)>(r1, "STATE_ACCESS");

        z6 = 1;

        $z3 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean firstCheckIn>;

        if $z3 == 0 goto label04;

        $r20 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.util.List clusterCheckIn(java.sql.Connection)>(r1);

        goto label05;

     label04:
        $r20 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.util.List findFailedInstances(java.sql.Connection)>(r1);

     label05:
        $i0 = interfaceinvoke $r20.<java.util.List: int size()>();

        if $i0 <= 0 goto label06;

        $r10 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.Semaphore getLockHandler()>();

        interfaceinvoke $r10.<org.quartz.impl.jdbcjobstore.Semaphore: boolean obtainLock(java.sql.Connection,java.lang.String)>(r1, "TRIGGER_ACCESS");

        z5 = 1;

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void clusterRecover(java.sql.Connection,java.util.List)>(r1, $r20);

        z7 = 1;

     label06:
        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void commitConnection(java.sql.Connection)>(r1);

     label07:
        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void releaseLock(java.lang.String,boolean)>("TRIGGER_ACCESS", z5);

     label08:
        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void releaseLock(java.lang.String,boolean)>("STATE_ACCESS", z6);

     label09:
        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void cleanupConnection(java.sql.Connection)>(r1);

        goto label12;

     label10:
        $r17 := @caughtexception;

     label11:
        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void cleanupConnection(java.sql.Connection)>(r1);

        throw $r17;

     label12:
        goto label19;

     label13:
        $r11 := @caughtexception;

     label14:
        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void releaseLock(java.lang.String,boolean)>("STATE_ACCESS", z6);

     label15:
        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void cleanupConnection(java.sql.Connection)>(r1);

        goto label18;

     label16:
        $r13 := @caughtexception;

     label17:
        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void cleanupConnection(java.sql.Connection)>(r1);

        throw $r13;

     label18:
        throw $r11;

     label19:
        goto label35;

     label20:
        $r15 := @caughtexception;

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void rollbackConnection(java.sql.Connection)>(r1);

        throw $r15;

     label21:
        $r18 := @caughtexception;

     label22:
        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void releaseLock(java.lang.String,boolean)>("TRIGGER_ACCESS", z5);

     label23:
        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void releaseLock(java.lang.String,boolean)>("STATE_ACCESS", z6);

     label24:
        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void cleanupConnection(java.sql.Connection)>(r1);

        goto label27;

     label25:
        $r16 := @caughtexception;

     label26:
        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void cleanupConnection(java.sql.Connection)>(r1);

        throw $r16;

     label27:
        goto label34;

     label28:
        $r12 := @caughtexception;

     label29:
        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void releaseLock(java.lang.String,boolean)>("STATE_ACCESS", z6);

     label30:
        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void cleanupConnection(java.sql.Connection)>(r1);

        goto label33;

     label31:
        $r14 := @caughtexception;

     label32:
        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void cleanupConnection(java.sql.Connection)>(r1);

        throw $r14;

     label33:
        throw $r12;

     label34:
        throw $r18;

     label35:
        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean firstCheckIn> = 0;

        return z7;

        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label16 to label17 with label16;
        catch java.lang.Throwable from label13 to label14 with label13;
        catch org.quartz.JobPersistenceException from label01 to label07 with label20;
        catch java.lang.Throwable from label01 to label07 with label21;
        catch java.lang.Throwable from label23 to label24 with label25;
        catch java.lang.Throwable from label25 to label26 with label25;
        catch java.lang.Throwable from label22 to label23 with label28;
        catch java.lang.Throwable from label29 to label30 with label31;
        catch java.lang.Throwable from label31 to label32 with label31;
        catch java.lang.Throwable from label28 to label29 with label28;
        catch java.lang.Throwable from label20 to label22 with label21;
    }

    protected java.util.List findFailedInstances(java.sql.Connection) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        long l0, $l1, $l3;
        java.util.List r2, $r14;
        java.util.Iterator r3;
        org.quartz.impl.jdbcjobstore.SchedulerStateRecord r4;
        java.util.LinkedList $r5;
        org.quartz.impl.jdbcjobstore.DriverDelegate $r6;
        boolean $z0, $z1, $z2, $z4, $z6, z8;
        org.slf4j.Logger $r7;
        java.lang.StringBuilder $r8, $r9, $r11, $r12, $r20, $r21, $r23;
        java.lang.String $r10, $r13, $r16, $r17, $r22, $r24;
        java.lang.Object $r15;
        byte $b2;
        java.lang.Exception $r18;
        org.quartz.JobPersistenceException $r19;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

     label1:
        $r5 = new java.util.LinkedList;

        specialinvoke $r5.<java.util.LinkedList: void <init>()>();

        z8 = 0;

        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r6 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        r2 = interfaceinvoke $r6.<org.quartz.impl.jdbcjobstore.DriverDelegate: java.util.List selectSchedulerStateRecords(java.sql.Connection,java.lang.String)>(r1, null);

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r15 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.quartz.impl.jdbcjobstore.SchedulerStateRecord) $r15;

        $r16 = virtualinvoke r4.<org.quartz.impl.jdbcjobstore.SchedulerStateRecord: java.lang.String getSchedulerInstanceId()>();

        $r17 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.String getInstanceId()>();

        $z4 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>($r17);

        if $z4 == 0 goto label3;

        z8 = 1;

        $z6 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean firstCheckIn>;

        if $z6 == 0 goto label4;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r4);

        goto label4;

     label3:
        $l1 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: long calcFailedIfAfter(org.quartz.impl.jdbcjobstore.SchedulerStateRecord)>(r4);

        $b2 = $l1 cmp l0;

        if $b2 >= 0 goto label4;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r4);

     label4:
        goto label2;

     label5:
        $z1 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean firstCheckIn>;

        if $z1 == 0 goto label6;

        $r14 = specialinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.util.List findOrphanedFailedInstances(java.sql.Connection,java.util.List)>(r1, r2);

        interfaceinvoke $r5.<java.util.List: boolean addAll(java.util.Collection)>($r14);

     label6:
        if z8 != 0 goto label7;

        $z2 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean firstCheckIn>;

        if $z2 != 0 goto label7;

        $r7 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.slf4j.Logger getLog()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("This scheduler instance (");

        $r10 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.String getInstanceId()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is still active but was recovered by another instance in the cluster.  This may cause inconsistent behavior.");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<org.slf4j.Logger: void warn(java.lang.String)>($r13);

     label7:
        return $r5;

     label8:
        $r18 := @caughtexception;

        $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: long lastCheckin> = $l3;

        $r19 = new org.quartz.JobPersistenceException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failure identifying failed instances when checking-in: ");

        $r22 = virtualinvoke $r18.<java.lang.Exception: java.lang.String getMessage()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r24, $r18);

        throw $r19;

        catch java.lang.Exception from label1 to label7 with label8;
    }

    private java.util.List findOrphanedFailedInstances(java.sql.Connection, java.util.List) throws java.sql.SQLException, org.quartz.impl.jdbcjobstore.NoSuchDelegateException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        java.util.List r2;
        java.util.Set r4;
        java.util.ArrayList $r6;
        org.quartz.impl.jdbcjobstore.DriverDelegate $r7;
        boolean $z0, $z1, $z2;
        java.lang.Object $r8, $r16;
        org.quartz.impl.jdbcjobstore.SchedulerStateRecord $r9, r19;
        org.slf4j.Logger $r10;
        java.lang.StringBuilder $r11, $r12, $r14;
        java.lang.String $r13, $r15, $r17, r21;
        java.util.Iterator r18, r20;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: java.util.List;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $r7 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        r4 = interfaceinvoke $r7.<org.quartz.impl.jdbcjobstore.DriverDelegate: java.util.Set selectFiredTriggerInstanceNames(java.sql.Connection)>(r1);

        $z0 = interfaceinvoke r4.<java.util.Set: boolean isEmpty()>();

        if $z0 != 0 goto label4;

        r18 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r16 = interfaceinvoke r18.<java.util.Iterator: java.lang.Object next()>();

        r19 = (org.quartz.impl.jdbcjobstore.SchedulerStateRecord) $r16;

        $r17 = virtualinvoke r19.<org.quartz.impl.jdbcjobstore.SchedulerStateRecord: java.lang.String getSchedulerInstanceId()>();

        interfaceinvoke r4.<java.util.Set: boolean remove(java.lang.Object)>($r17);

        goto label1;

     label2:
        r20 = interfaceinvoke r4.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r8 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>();

        r21 = (java.lang.String) $r8;

        $r9 = new org.quartz.impl.jdbcjobstore.SchedulerStateRecord;

        specialinvoke $r9.<org.quartz.impl.jdbcjobstore.SchedulerStateRecord: void <init>()>();

        virtualinvoke $r9.<org.quartz.impl.jdbcjobstore.SchedulerStateRecord: void setSchedulerInstanceId(java.lang.String)>(r21);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r9);

        $r10 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.slf4j.Logger getLog()>();

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found orphaned fired triggers for instance: ");

        $r13 = virtualinvoke $r9.<org.quartz.impl.jdbcjobstore.SchedulerStateRecord: java.lang.String getSchedulerInstanceId()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<org.slf4j.Logger: void warn(java.lang.String)>($r15);

        goto label3;

     label4:
        return $r6;
    }

    protected long calcFailedIfAfter(org.quartz.impl.jdbcjobstore.SchedulerStateRecord)
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        org.quartz.impl.jdbcjobstore.SchedulerStateRecord r1;
        long $l0, $l1, $l2, $l3, $l4, $l5, $l6, $l7;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: org.quartz.impl.jdbcjobstore.SchedulerStateRecord;

        $l0 = virtualinvoke r1.<org.quartz.impl.jdbcjobstore.SchedulerStateRecord: long getCheckinTimestamp()>();

        $l1 = virtualinvoke r1.<org.quartz.impl.jdbcjobstore.SchedulerStateRecord: long getCheckinInterval()>();

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l3 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: long lastCheckin>;

        $l4 = $l2 - $l3;

        $l5 = staticinvoke <java.lang.Math: long max(long,long)>($l1, $l4);

        $l6 = $l0 + $l5;

        $l7 = $l6 + 7500L;

        return $l7;
    }

    protected java.util.List clusterCheckIn(java.sql.Connection) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        java.util.List r2;
        long $l0, $l1, $l3, $l4;
        org.quartz.impl.jdbcjobstore.DriverDelegate $r4, $r6;
        java.lang.String $r5, $r7, $r12, $r14;
        int $i2;
        java.lang.Exception $r8;
        org.quartz.JobPersistenceException $r9;
        java.lang.StringBuilder $r10, $r11, $r13;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

        r2 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.util.List findFailedInstances(java.sql.Connection)>(r1);

     label1:
        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: long lastCheckin> = $l0;

        $r4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $r5 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.String getInstanceId()>();

        $l1 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: long lastCheckin>;

        $i2 = interfaceinvoke $r4.<org.quartz.impl.jdbcjobstore.DriverDelegate: int updateSchedulerState(java.sql.Connection,java.lang.String,long)>(r1, $r5, $l1);

        if $i2 != 0 goto label2;

        $r6 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $r7 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.String getInstanceId()>();

        $l3 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: long lastCheckin>;

        $l4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: long getClusterCheckinInterval()>();

        interfaceinvoke $r6.<org.quartz.impl.jdbcjobstore.DriverDelegate: int insertSchedulerState(java.sql.Connection,java.lang.String,long,long)>(r1, $r7, $l3, $l4);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        $r9 = new org.quartz.JobPersistenceException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failure updating scheduler state when checking-in: ");

        $r12 = virtualinvoke $r8.<java.lang.Exception: java.lang.String getMessage()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r14, $r8);

        throw $r9;

     label4:
        return r2;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected void clusterRecover(java.sql.Connection, java.util.List) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        java.util.List r2, r4, r105;
        org.quartz.impl.jdbcjobstore.SchedulerStateRecord r3;
        org.quartz.JobDataMap r7;
        int $i0, $i1, $i2, $i9, i16, i17, i18, i19;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r15, $r16, $r18, $r19, $r26, $r27, $r28, $r29, $r31, $r32, $r33, $r34, $r36, $r37, $r38, $r39, $r41, $r42, $r43, $r44, $r62, $r63, $r64, $r65, $r68, $r69, $r71, $r72, $r74, $r92, $r93, $r95;
        java.lang.String $r12, $r17, $r20, $r22, $r25, $r30, $r35, $r40, $r45, $r46, $r47, $r49, $r52, $r54, $r55, $r57, $r58, $r66, $r70, $r73, $r75, $r77, $r78, $r80, $r81, $r82, $r83, $r84, $r85, $r94, $r96, $r102;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z8, $z9, $z10, $z11, $z12, $z13;
        java.lang.Object $r13, $r50, $r56;
        org.slf4j.Logger $r14, $r61;
        org.quartz.impl.jdbcjobstore.DriverDelegate $r21, $r24, $r48, $r51, $r53, $r59, $r60, $r79, $r87, $r88, $r89;
        java.util.HashSet $r23;
        org.quartz.impl.triggers.SimpleTriggerImpl $r67;
        long $l7, $l8, $l10, $l11, l15;
        java.util.Date $r76;
        java.lang.Throwable $r90;
        org.quartz.JobPersistenceException $r91;
        java.util.Iterator r97, r98, r103;
        org.quartz.impl.jdbcjobstore.FiredTriggerRecord r99;
        org.quartz.TriggerKey r100, r104;
        org.quartz.JobKey r101;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: java.util.List;

        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i0 <= 0 goto label18;

        l15 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $i1 = interfaceinvoke r2.<java.util.List: int size()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ClusterManager: detected ");

        $i2 = interfaceinvoke r2.<java.util.List: int size()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" failed or restarted instances.");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void logWarnIfNonZero(int,java.lang.String)>($i1, $r12);

     label01:
        r97 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r97.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label16;

        $r13 = interfaceinvoke r97.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.quartz.impl.jdbcjobstore.SchedulerStateRecord) $r13;

        $r14 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.slf4j.Logger getLog()>();

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ClusterManager: Scanning for instance \"");

        $r17 = virtualinvoke r3.<org.quartz.impl.jdbcjobstore.SchedulerStateRecord: java.lang.String getSchedulerInstanceId()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"\'s failed in-progress jobs.");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r14.<org.slf4j.Logger: void info(java.lang.String)>($r20);

        $r21 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $r22 = virtualinvoke r3.<org.quartz.impl.jdbcjobstore.SchedulerStateRecord: java.lang.String getSchedulerInstanceId()>();

        r4 = interfaceinvoke $r21.<org.quartz.impl.jdbcjobstore.DriverDelegate: java.util.List selectInstancesFiredTriggerRecords(java.sql.Connection,java.lang.String)>(r1, $r22);

        i16 = 0;

        i17 = 0;

        i18 = 0;

        $r23 = new java.util.HashSet;

        specialinvoke $r23.<java.util.HashSet: void <init>()>();

        r98 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z1 = interfaceinvoke r98.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label11;

        $r56 = interfaceinvoke r98.<java.util.Iterator: java.lang.Object next()>();

        r99 = (org.quartz.impl.jdbcjobstore.FiredTriggerRecord) $r56;

        r100 = virtualinvoke r99.<org.quartz.impl.jdbcjobstore.FiredTriggerRecord: org.quartz.TriggerKey getTriggerKey()>();

        r101 = virtualinvoke r99.<org.quartz.impl.jdbcjobstore.FiredTriggerRecord: org.quartz.JobKey getJobKey()>();

        interfaceinvoke $r23.<java.util.Set: boolean add(java.lang.Object)>(r100);

        $r57 = virtualinvoke r99.<org.quartz.impl.jdbcjobstore.FiredTriggerRecord: java.lang.String getFireInstanceState()>();

        $z8 = virtualinvoke $r57.<java.lang.String: boolean equals(java.lang.Object)>("BLOCKED");

        if $z8 == 0 goto label04;

        $r89 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        interfaceinvoke $r89.<org.quartz.impl.jdbcjobstore.DriverDelegate: int updateTriggerStatesForJobFromOtherState(java.sql.Connection,org.quartz.JobKey,java.lang.String,java.lang.String)>(r1, r101, "WAITING", "BLOCKED");

        goto label05;

     label04:
        $r58 = virtualinvoke r99.<org.quartz.impl.jdbcjobstore.FiredTriggerRecord: java.lang.String getFireInstanceState()>();

        $z9 = virtualinvoke $r58.<java.lang.String: boolean equals(java.lang.Object)>("PAUSED_BLOCKED");

        if $z9 == 0 goto label05;

        $r88 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        interfaceinvoke $r88.<org.quartz.impl.jdbcjobstore.DriverDelegate: int updateTriggerStatesForJobFromOtherState(java.sql.Connection,org.quartz.JobKey,java.lang.String,java.lang.String)>(r1, r101, "PAUSED", "PAUSED_BLOCKED");

     label05:
        $r102 = virtualinvoke r99.<org.quartz.impl.jdbcjobstore.FiredTriggerRecord: java.lang.String getFireInstanceState()>();

        $z12 = virtualinvoke $r102.<java.lang.String: boolean equals(java.lang.Object)>("ACQUIRED");

        if $z12 == 0 goto label06;

        $r87 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        interfaceinvoke $r87.<org.quartz.impl.jdbcjobstore.DriverDelegate: int updateTriggerStateFromOtherState(java.sql.Connection,org.quartz.TriggerKey,java.lang.String,java.lang.String)>(r1, r100, "WAITING", "ACQUIRED");

        i16 = i16 + 1;

        goto label09;

     label06:
        $z10 = virtualinvoke r99.<org.quartz.impl.jdbcjobstore.FiredTriggerRecord: boolean isJobRequestsRecovery()>();

        if $z10 == 0 goto label08;

        $z11 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean jobExists(java.sql.Connection,org.quartz.JobKey)>(r1, r101);

        if $z11 == 0 goto label07;

        $r67 = new org.quartz.impl.triggers.SimpleTriggerImpl;

        $r68 = new java.lang.StringBuilder;

        specialinvoke $r68.<java.lang.StringBuilder: void <init>()>();

        $r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("recover_");

        $r70 = virtualinvoke r3.<org.quartz.impl.jdbcjobstore.SchedulerStateRecord: java.lang.String getSchedulerInstanceId()>();

        $r71 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r70);

        $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        $l7 = l15;

        l15 = l15 + 1L;

        $r73 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l7);

        $r74 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r73);

        $r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.String toString()>();

        $r76 = new java.util.Date;

        $l8 = virtualinvoke r99.<org.quartz.impl.jdbcjobstore.FiredTriggerRecord: long getScheduleTimestamp()>();

        specialinvoke $r76.<java.util.Date: void <init>(long)>($l8);

        specialinvoke $r67.<org.quartz.impl.triggers.SimpleTriggerImpl: void <init>(java.lang.String,java.lang.String,java.util.Date)>($r75, "RECOVERING_JOBS", $r76);

        $r77 = virtualinvoke r101.<org.quartz.JobKey: java.lang.String getName()>();

        virtualinvoke $r67.<org.quartz.impl.triggers.SimpleTriggerImpl: void setJobName(java.lang.String)>($r77);

        $r78 = virtualinvoke r101.<org.quartz.JobKey: java.lang.String getGroup()>();

        virtualinvoke $r67.<org.quartz.impl.triggers.SimpleTriggerImpl: void setJobGroup(java.lang.String)>($r78);

        virtualinvoke $r67.<org.quartz.impl.triggers.SimpleTriggerImpl: void setMisfireInstruction(int)>(-1);

        $i9 = virtualinvoke r99.<org.quartz.impl.jdbcjobstore.FiredTriggerRecord: int getPriority()>();

        virtualinvoke $r67.<org.quartz.impl.triggers.SimpleTriggerImpl: void setPriority(int)>($i9);

        $r79 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $r80 = virtualinvoke r100.<org.quartz.TriggerKey: java.lang.String getName()>();

        $r81 = virtualinvoke r100.<org.quartz.TriggerKey: java.lang.String getGroup()>();

        r7 = interfaceinvoke $r79.<org.quartz.impl.jdbcjobstore.DriverDelegate: org.quartz.JobDataMap selectTriggerJobDataMap(java.sql.Connection,java.lang.String,java.lang.String)>(r1, $r80, $r81);

        $r82 = virtualinvoke r100.<org.quartz.TriggerKey: java.lang.String getName()>();

        virtualinvoke r7.<org.quartz.JobDataMap: void put(java.lang.String,java.lang.String)>("QRTZ_FAILED_JOB_ORIG_TRIGGER_NAME", $r82);

        $r83 = virtualinvoke r100.<org.quartz.TriggerKey: java.lang.String getGroup()>();

        virtualinvoke r7.<org.quartz.JobDataMap: void put(java.lang.String,java.lang.String)>("QRTZ_FAILED_JOB_ORIG_TRIGGER_GROUP", $r83);

        $l10 = virtualinvoke r99.<org.quartz.impl.jdbcjobstore.FiredTriggerRecord: long getFireTimestamp()>();

        $r84 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l10);

        virtualinvoke r7.<org.quartz.JobDataMap: void put(java.lang.String,java.lang.String)>("QRTZ_FAILED_JOB_ORIG_TRIGGER_FIRETIME_IN_MILLISECONDS_AS_STRING", $r84);

        $l11 = virtualinvoke r99.<org.quartz.impl.jdbcjobstore.FiredTriggerRecord: long getScheduleTimestamp()>();

        $r85 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l11);

        virtualinvoke r7.<org.quartz.JobDataMap: void put(java.lang.String,java.lang.String)>("QRTZ_FAILED_JOB_ORIG_TRIGGER_SCHEDULED_FIRETIME_IN_MILLISECONDS_AS_STRING", $r85);

        virtualinvoke $r67.<org.quartz.impl.triggers.SimpleTriggerImpl: void setJobDataMap(org.quartz.JobDataMap)>(r7);

        virtualinvoke $r67.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date computeFirstFireTime(org.quartz.Calendar)>(null);

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void storeTrigger(java.sql.Connection,org.quartz.spi.OperableTrigger,org.quartz.JobDetail,boolean,java.lang.String,boolean,boolean)>(r1, $r67, null, 0, "WAITING", 0, 1);

        i17 = i17 + 1;

        goto label09;

     label07:
        $r61 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.slf4j.Logger getLog()>();

        $r62 = new java.lang.StringBuilder;

        specialinvoke $r62.<java.lang.StringBuilder: void <init>()>();

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ClusterManager: failed job \'");

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r101);

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' no longer exists, cannot schedule recovery.");

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r61.<org.slf4j.Logger: void warn(java.lang.String)>($r66);

        i18 = i18 + 1;

        goto label09;

     label08:
        i18 = i18 + 1;

     label09:
        $z13 = virtualinvoke r99.<org.quartz.impl.jdbcjobstore.FiredTriggerRecord: boolean isJobDisallowsConcurrentExecution()>();

        if $z13 == 0 goto label10;

        $r59 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        interfaceinvoke $r59.<org.quartz.impl.jdbcjobstore.DriverDelegate: int updateTriggerStatesForJobFromOtherState(java.sql.Connection,org.quartz.JobKey,java.lang.String,java.lang.String)>(r1, r101, "WAITING", "BLOCKED");

        $r60 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        interfaceinvoke $r60.<org.quartz.impl.jdbcjobstore.DriverDelegate: int updateTriggerStatesForJobFromOtherState(java.sql.Connection,org.quartz.JobKey,java.lang.String,java.lang.String)>(r1, r101, "PAUSED", "PAUSED_BLOCKED");

     label10:
        goto label03;

     label11:
        $r24 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $r25 = virtualinvoke r3.<org.quartz.impl.jdbcjobstore.SchedulerStateRecord: java.lang.String getSchedulerInstanceId()>();

        interfaceinvoke $r24.<org.quartz.impl.jdbcjobstore.DriverDelegate: int deleteFiredTriggers(java.sql.Connection,java.lang.String)>(r1, $r25);

        i19 = 0;

        r103 = interfaceinvoke $r23.<java.util.Set: java.util.Iterator iterator()>();

     label12:
        $z2 = interfaceinvoke r103.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label14;

        $r50 = interfaceinvoke r103.<java.util.Iterator: java.lang.Object next()>();

        r104 = (org.quartz.TriggerKey) $r50;

        $r51 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $r52 = interfaceinvoke $r51.<org.quartz.impl.jdbcjobstore.DriverDelegate: java.lang.String selectTriggerState(java.sql.Connection,org.quartz.TriggerKey)>(r1, r104);

        $z4 = virtualinvoke $r52.<java.lang.String: boolean equals(java.lang.Object)>("COMPLETE");

        if $z4 == 0 goto label13;

        $r53 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $r54 = virtualinvoke r104.<org.quartz.TriggerKey: java.lang.String getName()>();

        $r55 = virtualinvoke r104.<org.quartz.TriggerKey: java.lang.String getGroup()>();

        r105 = interfaceinvoke $r53.<org.quartz.impl.jdbcjobstore.DriverDelegate: java.util.List selectFiredTriggerRecords(java.sql.Connection,java.lang.String,java.lang.String)>(r1, $r54, $r55);

        $z5 = interfaceinvoke r105.<java.util.List: boolean isEmpty()>();

        if $z5 == 0 goto label13;

        $z6 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean removeTrigger(java.sql.Connection,org.quartz.TriggerKey)>(r1, r104);

        if $z6 == 0 goto label13;

        i19 = i19 + 1;

     label13:
        goto label12;

     label14:
        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ClusterManager: ......Freed ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i16);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" acquired trigger(s).");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void logWarnIfNonZero(int,java.lang.String)>(i16, $r30);

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ClusterManager: ......Deleted ");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i19);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" complete triggers(s).");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void logWarnIfNonZero(int,java.lang.String)>(i19, $r35);

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ClusterManager: ......Scheduled ");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i17);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" recoverable job(s) for recovery.");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void logWarnIfNonZero(int,java.lang.String)>(i17, $r40);

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ClusterManager: ......Cleaned-up ");

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i18);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" other failed job(s).");

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void logWarnIfNonZero(int,java.lang.String)>(i18, $r45);

        $r46 = virtualinvoke r3.<org.quartz.impl.jdbcjobstore.SchedulerStateRecord: java.lang.String getSchedulerInstanceId()>();

        $r47 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.String getInstanceId()>();

        $z3 = virtualinvoke $r46.<java.lang.String: boolean equals(java.lang.Object)>($r47);

        if $z3 != 0 goto label15;

        $r48 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.DriverDelegate getDelegate()>();

        $r49 = virtualinvoke r3.<org.quartz.impl.jdbcjobstore.SchedulerStateRecord: java.lang.String getSchedulerInstanceId()>();

        interfaceinvoke $r48.<org.quartz.impl.jdbcjobstore.DriverDelegate: int deleteSchedulerState(java.sql.Connection,java.lang.String)>(r1, $r49);

     label15:
        goto label02;

     label16:
        goto label18;

     label17:
        $r90 := @caughtexception;

        $r91 = new org.quartz.JobPersistenceException;

        $r92 = new java.lang.StringBuilder;

        specialinvoke $r92.<java.lang.StringBuilder: void <init>()>();

        $r93 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failure recovering jobs: ");

        $r94 = virtualinvoke $r90.<java.lang.Throwable: java.lang.String getMessage()>();

        $r95 = virtualinvoke $r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r94);

        $r96 = virtualinvoke $r95.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r91.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r96, $r90);

        throw $r91;

     label18:
        return;

        catch java.lang.Throwable from label01 to label16 with label17;
    }

    protected void logWarnIfNonZero(int, java.lang.String)
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        int i0;
        java.lang.String r1;
        org.slf4j.Logger $r2, $r3;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        if i0 <= 0 goto label1;

        $r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.slf4j.Logger getLog()>();

        interfaceinvoke $r3.<org.slf4j.Logger: void info(java.lang.String)>(r1);

        goto label2;

     label1:
        $r2 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.slf4j.Logger getLog()>();

        interfaceinvoke $r2.<org.slf4j.Logger: void debug(java.lang.String)>(r1);

     label2:
        return;
    }

    protected void cleanupConnection(java.sql.Connection)
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1, $r5;
        java.lang.reflect.Proxy r2;
        java.lang.reflect.InvocationHandler r3;
        org.quartz.impl.jdbcjobstore.AttributeRestoringConnectionInvocationHandler r4;
        boolean $z0, $z1;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

        if r1 == null goto label2;

        $z0 = r1 instanceof java.lang.reflect.Proxy;

        if $z0 == 0 goto label1;

        r2 = (java.lang.reflect.Proxy) r1;

        r3 = staticinvoke <java.lang.reflect.Proxy: java.lang.reflect.InvocationHandler getInvocationHandler(java.lang.Object)>(r2);

        $z1 = r3 instanceof org.quartz.impl.jdbcjobstore.AttributeRestoringConnectionInvocationHandler;

        if $z1 == 0 goto label1;

        r4 = (org.quartz.impl.jdbcjobstore.AttributeRestoringConnectionInvocationHandler) r3;

        virtualinvoke r4.<org.quartz.impl.jdbcjobstore.AttributeRestoringConnectionInvocationHandler: void restoreOriginalAtributes()>();

        $r5 = virtualinvoke r4.<org.quartz.impl.jdbcjobstore.AttributeRestoringConnectionInvocationHandler: java.sql.Connection getWrappedConnection()>();

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void closeConnection(java.sql.Connection)>($r5);

        return;

     label1:
        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void closeConnection(java.sql.Connection)>(r1);

     label2:
        return;
    }

    protected void closeConnection(java.sql.Connection)
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        java.sql.SQLException $r2;
        org.slf4j.Logger $r3, $r5;
        java.lang.Throwable $r4;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

        if r1 == null goto label5;

     label1:
        interfaceinvoke r1.<java.sql.Connection: void close()>();

     label2:
        goto label5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.slf4j.Logger getLog()>();

        interfaceinvoke $r3.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Failed to close Connection", $r2);

        goto label5;

     label4:
        $r4 := @caughtexception;

        $r5 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.slf4j.Logger getLog()>();

        interfaceinvoke $r5.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Unexpected exception closing Connection.  This is often due to a Connection being returned after or during shutdown.", $r4);

     label5:
        return;

        catch java.sql.SQLException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
    }

    protected void rollbackConnection(java.sql.Connection)
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        java.sql.SQLException $r3;
        org.slf4j.Logger $r4;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.lang.String $r7, $r9;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

        if r1 == null goto label4;

     label1:
        interfaceinvoke r1.<java.sql.Connection: void rollback()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.slf4j.Logger getLog()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t rollback jdbc connection. ");

        $r7 = virtualinvoke $r3.<java.sql.SQLException: java.lang.String getMessage()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r9, $r3);

     label4:
        return;

        catch java.sql.SQLException from label1 to label2 with label3;
    }

    protected void commitConnection(java.sql.Connection) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.sql.Connection r1;
        java.sql.SQLException $r3;
        org.quartz.JobPersistenceException $r4;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.lang.String $r7, $r9;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.sql.Connection;

        if r1 == null goto label4;

     label1:
        interfaceinvoke r1.<java.sql.Connection: void commit()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new org.quartz.JobPersistenceException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t commit jdbc connection. ");

        $r7 = virtualinvoke $r3.<java.sql.SQLException: java.lang.String getMessage()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r9, $r3);

        throw $r4;

     label4:
        return;

        catch java.sql.SQLException from label1 to label2 with label3;
    }

    public java.lang.Object executeWithoutLock(org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback r1;
        java.lang.Object $r2;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback;

        $r2 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.Object executeInLock(java.lang.String,org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback)>(null, r1);

        return $r2;
    }

    protected abstract java.lang.Object executeInLock(java.lang.String, org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback) throws org.quartz.JobPersistenceException;

    protected java.lang.Object retryExecuteInNonManagedTXLock(java.lang.String, org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback)
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.lang.String r1, $r9, $r11, $r17;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback r2;
        boolean $z0;
        java.lang.IllegalStateException $r3, $r19;
        java.lang.Object $r4;
        java.lang.RuntimeException $r5;
        org.slf4j.Logger $r6;
        java.lang.StringBuilder $r7, $r8, $r10, $r13, $r15, $r16;
        long $l0;
        org.quartz.JobPersistenceException $r12;
        int $i1, i2;
        org.quartz.spi.SchedulerSignaler $r14;
        java.lang.InterruptedException $r18;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback;

        i2 = 1;

     label01:
        $z0 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean shutdown>;

        if $z0 != 0 goto label11;

     label02:
        $r4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.Object executeInNonManagedTXLock(java.lang.String,org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback,org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionValidator)>(r1, r2, null);

     label03:
        return $r4;

     label04:
        $r12 := @caughtexception;

        $i1 = i2 % 4;

        if $i1 != 0 goto label05;

        $r14 = r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.spi.SchedulerSignaler schedSignaler>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("An error occurred while ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r14.<org.quartz.spi.SchedulerSignaler: void notifySchedulerListenersError(java.lang.String,org.quartz.SchedulerException)>($r17, $r12);

     label05:
        goto label07;

     label06:
        $r5 := @caughtexception;

        $r6 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.slf4j.Logger getLog()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("retryExecuteInNonManagedTXLock: RuntimeException ");

        $r9 = virtualinvoke $r5.<java.lang.RuntimeException: java.lang.String getMessage()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r11, $r5);

     label07:
        $l0 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: long getDbRetryInterval()>();

        staticinvoke <java.lang.Thread: void sleep(long)>($l0);

     label08:
        goto label10;

     label09:
        $r18 := @caughtexception;

        $r19 = new java.lang.IllegalStateException;

        specialinvoke $r19.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Received interrupted exception", $r18);

        throw $r19;

     label10:
        i2 = i2 + 1;

        goto label01;

     label11:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("JobStore is shutdown - aborting retry");

        throw $r3;

        catch org.quartz.JobPersistenceException from label02 to label03 with label04;
        catch java.lang.RuntimeException from label02 to label03 with label06;
        catch java.lang.InterruptedException from label07 to label08 with label09;
    }

    protected java.lang.Object executeInNonManagedTXLock(java.lang.String, org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback, org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionValidator) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        java.lang.String r1, $r22, $r24;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback r2;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionValidator r3;
        long $l0, $l2;
        byte $b1;
        org.quartz.impl.jdbcjobstore.Semaphore $r8, $r9;
        boolean $z0, $z1, z2;
        java.lang.Throwable $r10, $r11, $r13;
        org.quartz.JobPersistenceException $r12, $r14, $r19;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$47 $r15;
        java.lang.Object $r16, r26;
        java.lang.Boolean $r17;
        java.lang.RuntimeException $r18;
        java.lang.StringBuilder $r20, $r21, $r23;
        java.sql.Connection r25;
        java.lang.Long r28;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback;

        r3 := @parameter2: org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionValidator;

        z2 = 0;

        r25 = null;

     label01:
        if r1 == null goto label03;

        $r8 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.Semaphore getLockHandler()>();

        $z0 = interfaceinvoke $r8.<org.quartz.impl.jdbcjobstore.Semaphore: boolean requiresConnection()>();

        if $z0 == 0 goto label02;

        r25 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.sql.Connection getNonManagedTXConnection()>();

     label02:
        $r9 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.Semaphore getLockHandler()>();

        z2 = interfaceinvoke $r9.<org.quartz.impl.jdbcjobstore.Semaphore: boolean obtainLock(java.sql.Connection,java.lang.String)>(r25, r1);

     label03:
        if r25 != null goto label04;

        r25 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.sql.Connection getNonManagedTXConnection()>();

     label04:
        r26 = interfaceinvoke r2.<org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback: java.lang.Object execute(java.sql.Connection)>(r25);

     label05:
        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void commitConnection(java.sql.Connection)>(r25);

     label06:
        goto label09;

     label07:
        $r14 := @caughtexception;

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void rollbackConnection(java.sql.Connection)>(r25);

        if r3 == null goto label08;

        $r15 = new org.quartz.impl.jdbcjobstore.JobStoreSupport$47;

        specialinvoke $r15.<org.quartz.impl.jdbcjobstore.JobStoreSupport$47: void <init>(org.quartz.impl.jdbcjobstore.JobStoreSupport,org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionValidator,java.lang.Object)>(r0, r3, r26);

        $r16 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.Object retryExecuteInNonManagedTXLock(java.lang.String,org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback)>(r1, $r15);

        $r17 = (java.lang.Boolean) $r16;

        $z1 = virtualinvoke $r17.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 != 0 goto label09;

     label08:
        throw $r14;

     label09:
        r28 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.Long clearAndGetSignalSchedulingChangeOnTxCompletion()>();

        if r28 == null goto label10;

        $l0 = virtualinvoke r28.<java.lang.Long: long longValue()>();

        $b1 = $l0 cmp 0L;

        if $b1 < 0 goto label10;

        $l2 = virtualinvoke r28.<java.lang.Long: long longValue()>();

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void signalSchedulingChangeImmediately(long)>($l2);

     label10:
        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void releaseLock(java.lang.String,boolean)>(r1, z2);

     label11:
        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void cleanupConnection(java.sql.Connection)>(r25);

        goto label14;

     label12:
        $r13 := @caughtexception;

     label13:
        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void cleanupConnection(java.sql.Connection)>(r25);

        throw $r13;

     label14:
        return r26;

     label15:
        $r12 := @caughtexception;

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void rollbackConnection(java.sql.Connection)>(r25);

        throw $r12;

     label16:
        $r18 := @caughtexception;

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void rollbackConnection(java.sql.Connection)>(r25);

        $r19 = new org.quartz.JobPersistenceException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected runtime exception: ");

        $r22 = virtualinvoke $r18.<java.lang.RuntimeException: java.lang.String getMessage()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r24, $r18);

        throw $r19;

     label17:
        $r11 := @caughtexception;

     label18:
        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void releaseLock(java.lang.String,boolean)>(r1, z2);

     label19:
        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void cleanupConnection(java.sql.Connection)>(r25);

        goto label22;

     label20:
        $r10 := @caughtexception;

     label21:
        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void cleanupConnection(java.sql.Connection)>(r25);

        throw $r10;

     label22:
        throw $r11;

        catch org.quartz.JobPersistenceException from label05 to label06 with label07;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
        catch org.quartz.JobPersistenceException from label01 to label10 with label15;
        catch java.lang.RuntimeException from label01 to label10 with label16;
        catch java.lang.Throwable from label01 to label10 with label17;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Throwable from label20 to label21 with label20;
        catch java.lang.Throwable from label15 to label18 with label17;
    }

    public volatile java.util.Collection resumeJobs(org.quartz.impl.matchers.GroupMatcher) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        org.quartz.impl.matchers.GroupMatcher r1;
        java.util.Set $r2;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: org.quartz.impl.matchers.GroupMatcher;

        $r2 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.util.Set resumeJobs(org.quartz.impl.matchers.GroupMatcher)>(r1);

        return $r2;
    }

    public volatile java.util.Collection resumeTriggers(org.quartz.impl.matchers.GroupMatcher) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        org.quartz.impl.matchers.GroupMatcher r1;
        java.util.Set $r2;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: org.quartz.impl.matchers.GroupMatcher;

        $r2 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.util.Set resumeTriggers(org.quartz.impl.matchers.GroupMatcher)>(r1);

        return $r2;
    }

    public volatile java.util.Collection pauseJobs(org.quartz.impl.matchers.GroupMatcher) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        org.quartz.impl.matchers.GroupMatcher r1;
        java.util.Set $r2;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: org.quartz.impl.matchers.GroupMatcher;

        $r2 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.util.Set pauseJobs(org.quartz.impl.matchers.GroupMatcher)>(r1);

        return $r2;
    }

    public volatile java.util.Collection pauseTriggers(org.quartz.impl.matchers.GroupMatcher) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreSupport r0;
        org.quartz.impl.matchers.GroupMatcher r1;
        java.util.Set $r2;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreSupport;

        r1 := @parameter0: org.quartz.impl.matchers.GroupMatcher;

        $r2 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.util.Set pauseTriggers(org.quartz.impl.matchers.GroupMatcher)>(r1);

        return $r2;
    }

    static void <clinit>()
    {
        long $l0;

        <org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.String LOCK_STATE_ACCESS> = "STATE_ACCESS";

        <org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.String LOCK_TRIGGER_ACCESS> = "TRIGGER_ACCESS";

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        <org.quartz.impl.jdbcjobstore.JobStoreSupport: long ftrCtr> = $l0;

        return;
    }
}
