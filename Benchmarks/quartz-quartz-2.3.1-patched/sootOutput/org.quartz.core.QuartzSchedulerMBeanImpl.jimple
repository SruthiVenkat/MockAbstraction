public class org.quartz.core.QuartzSchedulerMBeanImpl extends javax.management.StandardMBean implements javax.management.NotificationEmitter, org.quartz.core.jmx.QuartzSchedulerMBean, org.quartz.JobListener, org.quartz.SchedulerListener
{
    private static final javax.management.MBeanNotificationInfo[] NOTIFICATION_INFO;
    private final org.quartz.core.QuartzScheduler scheduler;
    private boolean sampledStatisticsEnabled;
    private org.quartz.core.SampledStatistics sampledStatistics;
    private static final org.quartz.core.SampledStatistics NULL_SAMPLED_STATISTICS;
    protected final org.quartz.core.QuartzSchedulerMBeanImpl$Emitter emitter;
    protected final java.util.concurrent.atomic.AtomicLong sequenceNumber;

    protected void <init>(org.quartz.core.QuartzScheduler) throws javax.management.NotCompliantMBeanException
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        org.quartz.core.QuartzScheduler r1, $r4, $r5;
        org.quartz.core.QuartzSchedulerMBeanImpl$Emitter $r2;
        java.util.concurrent.atomic.AtomicLong $r3;
        org.quartz.core.SampledStatistics $r6;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: org.quartz.core.QuartzScheduler;

        specialinvoke r0.<javax.management.StandardMBean: void <init>(java.lang.Class)>(class "Lorg/quartz/core/jmx/QuartzSchedulerMBean;");

        $r2 = new org.quartz.core.QuartzSchedulerMBeanImpl$Emitter;

        specialinvoke $r2.<org.quartz.core.QuartzSchedulerMBeanImpl$Emitter: void <init>(org.quartz.core.QuartzSchedulerMBeanImpl,org.quartz.core.QuartzSchedulerMBeanImpl$1)>(r0, null);

        r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzSchedulerMBeanImpl$Emitter emitter> = $r2;

        $r3 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicLong: void <init>()>();

        r0.<org.quartz.core.QuartzSchedulerMBeanImpl: java.util.concurrent.atomic.AtomicLong sequenceNumber> = $r3;

        r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler> = r1;

        $r4 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        virtualinvoke $r4.<org.quartz.core.QuartzScheduler: void addInternalJobListener(org.quartz.JobListener)>(r0);

        $r5 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        virtualinvoke $r5.<org.quartz.core.QuartzScheduler: void addInternalSchedulerListener(org.quartz.SchedulerListener)>(r0);

        $r6 = <org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.SampledStatistics NULL_SAMPLED_STATISTICS>;

        r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.SampledStatistics sampledStatistics> = $r6;

        r0.<org.quartz.core.QuartzSchedulerMBeanImpl: boolean sampledStatisticsEnabled> = 0;

        return;
    }

    public javax.management.openmbean.TabularData getCurrentlyExecutingJobs() throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        org.quartz.core.QuartzScheduler $r1;
        javax.management.openmbean.TabularData $r2;
        java.lang.Exception $r3, $r4;
        java.util.List r5;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

     label1:
        $r1 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        r5 = virtualinvoke $r1.<org.quartz.core.QuartzScheduler: java.util.List getCurrentlyExecutingJobs()>();

        $r2 = staticinvoke <org.quartz.core.jmx.JobExecutionContextSupport: javax.management.openmbean.TabularData toTabularData(java.util.List)>(r5);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = specialinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: java.lang.Exception newPlainException(java.lang.Exception)>($r3);

        throw $r4;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public javax.management.openmbean.TabularData getAllJobDetails() throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        java.util.Iterator r1, r3;
        java.lang.String r2;
        org.quartz.JobKey r4;
        java.util.ArrayList $r5;
        org.quartz.core.QuartzScheduler $r6, $r13, $r17;
        java.util.List $r7;
        boolean $z0, $z1;
        int $i0;
        org.quartz.JobDetail[] $r8, $r10;
        java.lang.Object[] $r9;
        javax.management.openmbean.TabularData $r11;
        java.lang.Object $r12, $r16;
        org.quartz.impl.matchers.GroupMatcher $r14;
        java.util.Set $r15;
        org.quartz.JobDetail $r18;
        java.lang.Exception $r19, $r20;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

     label1:
        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        $r7 = virtualinvoke $r6.<org.quartz.core.QuartzScheduler: java.util.List getJobGroupNames()>();

        r1 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r12 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.lang.String) $r12;

        $r13 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        $r14 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher jobGroupEquals(java.lang.String)>(r2);

        $r15 = virtualinvoke $r13.<org.quartz.core.QuartzScheduler: java.util.Set getJobKeys(org.quartz.impl.matchers.GroupMatcher)>($r14);

        r3 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r16 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.quartz.JobKey) $r16;

        $r17 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        $r18 = virtualinvoke $r17.<org.quartz.core.QuartzScheduler: org.quartz.JobDetail getJobDetail(org.quartz.JobKey)>(r4);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r18);

        goto label3;

     label4:
        goto label2;

     label5:
        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        $r8 = newarray (org.quartz.JobDetail)[$i0];

        $r9 = interfaceinvoke $r5.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r8);

        $r10 = (org.quartz.JobDetail[]) $r9;

        $r11 = staticinvoke <org.quartz.core.jmx.JobDetailSupport: javax.management.openmbean.TabularData toTabularData(org.quartz.JobDetail[])>($r10);

     label6:
        return $r11;

     label7:
        $r19 := @caughtexception;

        $r20 = specialinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: java.lang.Exception newPlainException(java.lang.Exception)>($r19);

        throw $r20;

        catch java.lang.Exception from label1 to label6 with label7;
    }

    public java.util.List getAllTriggers() throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        java.util.Iterator r1, r3;
        java.lang.String r2;
        org.quartz.TriggerKey r4;
        java.util.ArrayList $r5;
        org.quartz.core.QuartzScheduler $r6, $r10, $r14;
        java.util.List $r7, $r8;
        boolean $z0, $z1;
        java.lang.Object $r9, $r13;
        org.quartz.impl.matchers.GroupMatcher $r11;
        java.util.Set $r12;
        org.quartz.Trigger $r15;
        java.lang.Exception $r16, $r17;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

     label1:
        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        $r7 = virtualinvoke $r6.<org.quartz.core.QuartzScheduler: java.util.List getTriggerGroupNames()>();

        r1 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r9 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.lang.String) $r9;

        $r10 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        $r11 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher triggerGroupEquals(java.lang.String)>(r2);

        $r12 = virtualinvoke $r10.<org.quartz.core.QuartzScheduler: java.util.Set getTriggerKeys(org.quartz.impl.matchers.GroupMatcher)>($r11);

        r3 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r13 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.quartz.TriggerKey) $r13;

        $r14 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        $r15 = virtualinvoke $r14.<org.quartz.core.QuartzScheduler: org.quartz.Trigger getTrigger(org.quartz.TriggerKey)>(r4);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r15);

        goto label3;

     label4:
        goto label2;

     label5:
        $r8 = staticinvoke <org.quartz.core.jmx.TriggerSupport: java.util.List toCompositeList(java.util.List)>($r5);

     label6:
        return $r8;

     label7:
        $r16 := @caughtexception;

        $r17 = specialinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: java.lang.Exception newPlainException(java.lang.Exception)>($r16);

        throw $r17;

        catch java.lang.Exception from label1 to label6 with label7;
    }

    public void addJob(javax.management.openmbean.CompositeData, boolean) throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        javax.management.openmbean.CompositeData r1;
        boolean z0;
        org.quartz.core.QuartzScheduler $r3;
        org.quartz.JobDetail $r4;
        java.lang.Exception $r5, $r6;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: javax.management.openmbean.CompositeData;

        z0 := @parameter1: boolean;

     label1:
        $r3 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        $r4 = staticinvoke <org.quartz.core.jmx.JobDetailSupport: org.quartz.JobDetail newJobDetail(javax.management.openmbean.CompositeData)>(r1);

        virtualinvoke $r3.<org.quartz.core.QuartzScheduler: void addJob(org.quartz.JobDetail,boolean)>($r4, z0);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = specialinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: java.lang.Exception newPlainException(java.lang.Exception)>($r5);

        throw $r6;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private static void invokeSetter(java.lang.Object, java.lang.String, java.lang.Object) throws java.lang.Exception
    {
        java.lang.Object r0, r2;
        java.lang.String r1, r3, $r9, $r21;
        java.lang.reflect.Method r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r10, $r15, $r16, $r17, $r18, $r19, $r20;
        char $c0, $c1;
        java.lang.Class[] $r11;
        java.lang.Class $r12, $r13;
        java.lang.Exception $r14;
        java.lang.Object[] $r22;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("set");

        $c0 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

        $c1 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $r9 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(1);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        r3 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = newarray (java.lang.Class)[1];

        $r12 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r11[0] = $r12;

        $r13 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r5 = staticinvoke <org.quartz.core.QuartzSchedulerMBeanImpl: java.lang.reflect.Method findMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r13, r3, $r11);

        if r5 == null goto label1;

        $r22 = newarray (java.lang.Object)[1];

        $r22[0] = r2;

        virtualinvoke r5.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r22);

        goto label2;

     label1:
        $r14 = new java.lang.Exception;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to find setter for attribute \'");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' and value \'");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.Exception: void <init>(java.lang.String)>($r21);

        throw $r14;

     label2:
        return;
    }

    private static java.lang.Class getWrapperIfPrimitive(java.lang.Class)
    {
        java.lang.Class r0, r3;
        java.lang.Object $r1;
        java.lang.Exception $r2;
        java.lang.reflect.Field r4;

        r0 := @parameter0: java.lang.Class;

        r3 = r0;

     label1:
        r4 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("TYPE");

        virtualinvoke r4.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        $r1 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);

        r3 = (java.lang.Class) $r1;

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        return r3;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private static java.lang.reflect.Method findMethod(java.lang.Class, java.lang.String, java.lang.Class[]) throws java.beans.IntrospectionException
    {
        java.lang.Class r0, $r9, $r10, $r11;
        java.lang.String r1, $r8;
        java.lang.Class[] r2, r7;
        java.beans.BeanInfo r3;
        java.beans.MethodDescriptor[] r4;
        int i0, $i1, $i2, $i3, i4, i5;
        java.beans.MethodDescriptor r5;
        java.lang.reflect.Method r6;
        boolean $z0, z1;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Class[];

        r3 = staticinvoke <java.beans.Introspector: java.beans.BeanInfo getBeanInfo(java.lang.Class)>(r0);

        if r3 == null goto label6;

        r4 = interfaceinvoke r3.<java.beans.BeanInfo: java.beans.MethodDescriptor[] getMethodDescriptors()>();

        i0 = lengthof r4;

        i4 = 0;

     label1:
        if i4 >= i0 goto label6;

        r5 = r4[i4];

        r6 = virtualinvoke r5.<java.beans.MethodDescriptor: java.lang.reflect.Method getMethod()>();

        r7 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r8 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z0 == 0 goto label5;

        $i2 = lengthof r2;

        $i1 = lengthof r7;

        if $i2 != $i1 goto label5;

        z1 = 1;

        i5 = 0;

     label2:
        $i3 = lengthof r2;

        if i5 >= $i3 goto label4;

        $r9 = r2[i5];

        $r10 = staticinvoke <org.quartz.core.QuartzSchedulerMBeanImpl: java.lang.Class getWrapperIfPrimitive(java.lang.Class)>($r9);

        $r11 = r7[i5];

        if $r10 == $r11 goto label3;

        z1 = 0;

        goto label4;

     label3:
        i5 = i5 + 1;

        goto label2;

     label4:
        if z1 == 0 goto label5;

        return r6;

     label5:
        i4 = i4 + 1;

        goto label1;

     label6:
        return null;
    }

    public void scheduleBasicJob(java.util.Map, java.util.Map) throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        java.util.Map r1, r2;
        org.quartz.spi.OperableTrigger r3;
        org.quartz.core.QuartzScheduler $r4, $r6;
        org.quartz.JobKey $r5;
        java.text.ParseException $r8;
        java.lang.Exception $r9, $r10;
        org.quartz.JobDetail r11;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: java.util.Map;

     label1:
        r11 = staticinvoke <org.quartz.core.jmx.JobDetailSupport: org.quartz.JobDetail newJobDetail(java.util.Map)>(r1);

        r3 = staticinvoke <org.quartz.core.jmx.TriggerSupport: org.quartz.spi.OperableTrigger newTrigger(java.util.Map)>(r2);

        $r4 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        $r5 = interfaceinvoke r11.<org.quartz.JobDetail: org.quartz.JobKey getKey()>();

        virtualinvoke $r4.<org.quartz.core.QuartzScheduler: boolean deleteJob(org.quartz.JobKey)>($r5);

        $r6 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        virtualinvoke $r6.<org.quartz.core.QuartzScheduler: java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)>(r11, r3);

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        throw $r8;

     label4:
        $r9 := @caughtexception;

        $r10 = specialinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: java.lang.Exception newPlainException(java.lang.Exception)>($r9);

        throw $r10;

     label5:
        return;

        catch java.text.ParseException from label1 to label2 with label3;
        catch java.lang.Exception from label1 to label2 with label4;
    }

    public void scheduleJob(java.util.Map, java.util.Map) throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        java.util.Map r1, r2, $r28, $r33;
        java.lang.Class r3, r6, r9;
        org.quartz.Trigger r4;
        java.lang.String r5, r8, $r19, $r20, $r26, $r31, r39, r42, r46;
        org.quartz.JobDetail r7;
        java.lang.Object $r10, $r11, $r12, $r13, $r14, $r24, $r25, $r29, $r30, r43, r47;
        java.util.Set $r16, $r17;
        boolean $z0, $z1, $z3, $z4, $z5;
        org.quartz.TriggerKey $r18;
        java.util.Date $r21, $r23, r49;
        org.quartz.JobDataMap $r27, $r32;
        java.lang.IllegalArgumentException $r34, $r35, $r36;
        java.lang.Exception $r37, $r38;
        java.util.Iterator r40, r44;
        java.util.Map$Entry r41, r45;
        org.quartz.impl.triggers.AbstractTrigger r48;
        org.quartz.core.QuartzScheduler $r50, $r52;
        org.quartz.JobKey $r51;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: java.util.Map;

     label01:
        $r10 = interfaceinvoke r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>("triggerClass");

        r39 = (java.lang.String) $r10;

        if r39 != null goto label02;

        $r36 = new java.lang.IllegalArgumentException;

        specialinvoke $r36.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No triggerClass specified");

        throw $r36;

     label02:
        r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r39);

        $r11 = virtualinvoke r3.<java.lang.Class: java.lang.Object newInstance()>();

        r4 = (org.quartz.Trigger) $r11;

        $r12 = interfaceinvoke r1.<java.util.Map: java.lang.Object remove(java.lang.Object)>("jobDetailClass");

        r5 = (java.lang.String) $r12;

        if r5 != null goto label03;

        $r35 = new java.lang.IllegalArgumentException;

        specialinvoke $r35.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No jobDetailClass specified");

        throw $r35;

     label03:
        r6 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r5);

        $r13 = virtualinvoke r6.<java.lang.Class: java.lang.Object newInstance()>();

        r7 = (org.quartz.JobDetail) $r13;

        $r14 = interfaceinvoke r1.<java.util.Map: java.lang.Object remove(java.lang.Object)>("jobClass");

        r8 = (java.lang.String) $r14;

        if r8 != null goto label04;

        $r34 = new java.lang.IllegalArgumentException;

        specialinvoke $r34.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No jobClass specified");

        throw $r34;

     label04:
        r9 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r8);

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("jobClass", r9);

        $r16 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>();

        r40 = interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>();

     label05:
        $z0 = interfaceinvoke r40.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label07;

        $r29 = interfaceinvoke r40.<java.util.Iterator: java.lang.Object next()>();

        r41 = (java.util.Map$Entry) $r29;

        $r30 = interfaceinvoke r41.<java.util.Map$Entry: java.lang.Object getKey()>();

        r42 = (java.lang.String) $r30;

        r43 = interfaceinvoke r41.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r31 = "jobDataMap";

        $z5 = virtualinvoke $r31.<java.lang.String: boolean equals(java.lang.Object)>(r42);

        if $z5 == 0 goto label06;

        $r32 = new org.quartz.JobDataMap;

        $r33 = (java.util.Map) r43;

        specialinvoke $r32.<org.quartz.JobDataMap: void <init>(java.util.Map)>($r33);

        r43 = $r32;

     label06:
        staticinvoke <org.quartz.core.QuartzSchedulerMBeanImpl: void invokeSetter(java.lang.Object,java.lang.String,java.lang.Object)>(r4, r42, r43);

        goto label05;

     label07:
        $r17 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r44 = interfaceinvoke $r17.<java.util.Set: java.util.Iterator iterator()>();

     label08:
        $z1 = interfaceinvoke r44.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label10;

        $r24 = interfaceinvoke r44.<java.util.Iterator: java.lang.Object next()>();

        r45 = (java.util.Map$Entry) $r24;

        $r25 = interfaceinvoke r45.<java.util.Map$Entry: java.lang.Object getKey()>();

        r46 = (java.lang.String) $r25;

        r47 = interfaceinvoke r45.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r26 = "jobDataMap";

        $z4 = virtualinvoke $r26.<java.lang.String: boolean equals(java.lang.Object)>(r46);

        if $z4 == 0 goto label09;

        $r27 = new org.quartz.JobDataMap;

        $r28 = (java.util.Map) r47;

        specialinvoke $r27.<org.quartz.JobDataMap: void <init>(java.util.Map)>($r28);

        r47 = $r27;

     label09:
        staticinvoke <org.quartz.core.QuartzSchedulerMBeanImpl: void invokeSetter(java.lang.Object,java.lang.String,java.lang.Object)>(r7, r46, r47);

        goto label08;

     label10:
        r48 = (org.quartz.impl.triggers.AbstractTrigger) r4;

        $r18 = new org.quartz.TriggerKey;

        $r19 = virtualinvoke r48.<org.quartz.impl.triggers.AbstractTrigger: java.lang.String getName()>();

        $r20 = virtualinvoke r48.<org.quartz.impl.triggers.AbstractTrigger: java.lang.String getGroup()>();

        specialinvoke $r18.<org.quartz.TriggerKey: void <init>(java.lang.String,java.lang.String)>($r19, $r20);

        virtualinvoke r48.<org.quartz.impl.triggers.AbstractTrigger: void setKey(org.quartz.TriggerKey)>($r18);

        r49 = virtualinvoke r48.<org.quartz.impl.triggers.AbstractTrigger: java.util.Date getStartTime()>();

        if r49 == null goto label11;

        $r23 = new java.util.Date;

        specialinvoke $r23.<java.util.Date: void <init>()>();

        $z3 = virtualinvoke r49.<java.util.Date: boolean before(java.util.Date)>($r23);

        if $z3 == 0 goto label12;

     label11:
        $r21 = new java.util.Date;

        specialinvoke $r21.<java.util.Date: void <init>()>();

        virtualinvoke r48.<org.quartz.impl.triggers.AbstractTrigger: void setStartTime(java.util.Date)>($r21);

     label12:
        $r50 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        $r51 = interfaceinvoke r7.<org.quartz.JobDetail: org.quartz.JobKey getKey()>();

        virtualinvoke $r50.<org.quartz.core.QuartzScheduler: boolean deleteJob(org.quartz.JobKey)>($r51);

        $r52 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        virtualinvoke $r52.<org.quartz.core.QuartzScheduler: java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)>(r7, r4);

     label13:
        goto label15;

     label14:
        $r37 := @caughtexception;

        $r38 = specialinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: java.lang.Exception newPlainException(java.lang.Exception)>($r37);

        throw $r38;

     label15:
        return;

        catch java.lang.Exception from label01 to label13 with label14;
    }

    public void scheduleJob(java.lang.String, java.lang.String, java.util.Map) throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        java.lang.String r1, r2, r5, r8, $r15, $r16, $r22, $r31;
        java.util.Map r3, $r24;
        org.quartz.JobDetail r4;
        java.lang.Class r6;
        org.quartz.Trigger r7;
        org.quartz.JobKey $r9;
        org.quartz.core.QuartzScheduler $r10, $r40;
        java.lang.Object $r11, $r12, $r20, $r21, r37;
        java.util.Set $r13;
        boolean $z0, $z1, $z2;
        org.quartz.TriggerKey $r14;
        java.util.Date $r17, $r19, r39;
        org.quartz.JobDataMap $r23;
        java.lang.IllegalArgumentException $r25, $r26;
        java.lang.StringBuilder $r27, $r28, $r29, $r30;
        java.lang.Exception $r32, $r33;
        java.util.Iterator r35;
        java.util.Map$Entry r36;
        org.quartz.impl.triggers.AbstractTrigger r38;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.Map;

     label01:
        $r9 = new org.quartz.JobKey;

        specialinvoke $r9.<org.quartz.JobKey: void <init>(java.lang.String,java.lang.String)>(r1, r2);

        $r10 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        r4 = virtualinvoke $r10.<org.quartz.core.QuartzScheduler: org.quartz.JobDetail getJobDetail(org.quartz.JobKey)>($r9);

        if r4 != null goto label02;

        $r26 = new java.lang.IllegalArgumentException;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No such job \'");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r31);

        throw $r26;

     label02:
        $r11 = interfaceinvoke r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>("triggerClass");

        r5 = (java.lang.String) $r11;

        if r5 != null goto label03;

        $r25 = new java.lang.IllegalArgumentException;

        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No triggerClass specified");

        throw $r25;

     label03:
        r6 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r5);

        $r12 = virtualinvoke r6.<java.lang.Class: java.lang.Object newInstance()>();

        r7 = (org.quartz.Trigger) $r12;

        $r13 = interfaceinvoke r3.<java.util.Map: java.util.Set entrySet()>();

        r35 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>();

     label04:
        $z0 = interfaceinvoke r35.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label06;

        $r20 = interfaceinvoke r35.<java.util.Iterator: java.lang.Object next()>();

        r36 = (java.util.Map$Entry) $r20;

        $r21 = interfaceinvoke r36.<java.util.Map$Entry: java.lang.Object getKey()>();

        r8 = (java.lang.String) $r21;

        r37 = interfaceinvoke r36.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r22 = "jobDataMap";

        $z2 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>(r8);

        if $z2 == 0 goto label05;

        $r23 = new org.quartz.JobDataMap;

        $r24 = (java.util.Map) r37;

        specialinvoke $r23.<org.quartz.JobDataMap: void <init>(java.util.Map)>($r24);

        r37 = $r23;

     label05:
        staticinvoke <org.quartz.core.QuartzSchedulerMBeanImpl: void invokeSetter(java.lang.Object,java.lang.String,java.lang.Object)>(r7, r8, r37);

        goto label04;

     label06:
        r38 = (org.quartz.impl.triggers.AbstractTrigger) r7;

        $r14 = new org.quartz.TriggerKey;

        $r15 = virtualinvoke r38.<org.quartz.impl.triggers.AbstractTrigger: java.lang.String getName()>();

        $r16 = virtualinvoke r38.<org.quartz.impl.triggers.AbstractTrigger: java.lang.String getGroup()>();

        specialinvoke $r14.<org.quartz.TriggerKey: void <init>(java.lang.String,java.lang.String)>($r15, $r16);

        virtualinvoke r38.<org.quartz.impl.triggers.AbstractTrigger: void setKey(org.quartz.TriggerKey)>($r14);

        r39 = virtualinvoke r38.<org.quartz.impl.triggers.AbstractTrigger: java.util.Date getStartTime()>();

        if r39 == null goto label07;

        $r19 = new java.util.Date;

        specialinvoke $r19.<java.util.Date: void <init>()>();

        $z1 = virtualinvoke r39.<java.util.Date: boolean before(java.util.Date)>($r19);

        if $z1 == 0 goto label08;

     label07:
        $r17 = new java.util.Date;

        specialinvoke $r17.<java.util.Date: void <init>()>();

        virtualinvoke r38.<org.quartz.impl.triggers.AbstractTrigger: void setStartTime(java.util.Date)>($r17);

     label08:
        $r40 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        virtualinvoke $r40.<org.quartz.core.QuartzScheduler: java.util.Date scheduleJob(org.quartz.Trigger)>(r7);

     label09:
        goto label11;

     label10:
        $r32 := @caughtexception;

        $r33 = specialinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: java.lang.Exception newPlainException(java.lang.Exception)>($r32);

        throw $r33;

     label11:
        return;

        catch java.lang.Exception from label01 to label09 with label10;
    }

    public void addJob(java.util.Map, boolean) throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        java.util.Map r1, $r19;
        boolean z0, $z1, $z2;
        java.lang.Class r2, r5;
        org.quartz.JobDetail r3;
        java.lang.String r4, r8, $r17, r24;
        java.util.Iterator r6;
        java.util.Map$Entry r7;
        java.lang.Object $r9, $r10, $r11, $r15, $r16, r25;
        java.util.Set $r13;
        org.quartz.core.QuartzScheduler $r14;
        org.quartz.JobDataMap $r18;
        java.lang.IllegalArgumentException $r20, $r21;
        java.lang.Exception $r22, $r23;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: java.util.Map;

        z0 := @parameter1: boolean;

     label1:
        $r9 = interfaceinvoke r1.<java.util.Map: java.lang.Object remove(java.lang.Object)>("jobDetailClass");

        r24 = (java.lang.String) $r9;

        if r24 != null goto label2;

        $r21 = new java.lang.IllegalArgumentException;

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No jobDetailClass specified");

        throw $r21;

     label2:
        r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r24);

        $r10 = virtualinvoke r2.<java.lang.Class: java.lang.Object newInstance()>();

        r3 = (org.quartz.JobDetail) $r10;

        $r11 = interfaceinvoke r1.<java.util.Map: java.lang.Object remove(java.lang.Object)>("jobClass");

        r4 = (java.lang.String) $r11;

        if r4 != null goto label3;

        $r20 = new java.lang.IllegalArgumentException;

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No jobClass specified");

        throw $r20;

     label3:
        r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r4);

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("jobClass", r5);

        $r13 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r6 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r15 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r15;

        $r16 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        r8 = (java.lang.String) $r16;

        r25 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r17 = "jobDataMap";

        $z2 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>(r8);

        if $z2 == 0 goto label5;

        $r18 = new org.quartz.JobDataMap;

        $r19 = (java.util.Map) r25;

        specialinvoke $r18.<org.quartz.JobDataMap: void <init>(java.util.Map)>($r19);

        r25 = $r18;

     label5:
        staticinvoke <org.quartz.core.QuartzSchedulerMBeanImpl: void invokeSetter(java.lang.Object,java.lang.String,java.lang.Object)>(r3, r8, r25);

        goto label4;

     label6:
        $r14 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        virtualinvoke $r14.<org.quartz.core.QuartzScheduler: void addJob(org.quartz.JobDetail,boolean)>(r3, z0);

     label7:
        goto label9;

     label8:
        $r22 := @caughtexception;

        $r23 = specialinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: java.lang.Exception newPlainException(java.lang.Exception)>($r22);

        throw $r23;

     label9:
        return;

        catch java.lang.Exception from label1 to label7 with label8;
    }

    private java.lang.Exception newPlainException(java.lang.Exception)
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        java.lang.Exception r1, $r5;
        java.lang.String r2, $r6;
        java.lang.Class $r4;
        boolean $z0, $z1;
        java.lang.StackTraceElement[] $r7;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: java.lang.Exception;

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        r2 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("java.");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("javax.");

        if $z1 == 0 goto label2;

     label1:
        return r1;

     label2:
        $r5 = new java.lang.Exception;

        $r6 = virtualinvoke r1.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r5.<java.lang.Exception: void <init>(java.lang.String)>($r6);

        $r7 = virtualinvoke r1.<java.lang.Exception: java.lang.StackTraceElement[] getStackTrace()>();

        virtualinvoke $r5.<java.lang.Exception: void setStackTrace(java.lang.StackTraceElement[])>($r7);

        return $r5;
    }

    public void deleteCalendar(java.lang.String) throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        java.lang.String r1;
        org.quartz.core.QuartzScheduler $r3;
        java.lang.Exception $r4, $r5;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: java.lang.String;

     label1:
        $r3 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        virtualinvoke $r3.<org.quartz.core.QuartzScheduler: boolean deleteCalendar(java.lang.String)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = specialinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: java.lang.Exception newPlainException(java.lang.Exception)>($r4);

        throw $r5;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public boolean deleteJob(java.lang.String, java.lang.String) throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        java.lang.String r1, r2;
        org.quartz.core.QuartzScheduler $r4;
        org.quartz.JobKey $r5;
        boolean $z0;
        java.lang.Exception $r6, $r7;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

     label1:
        $r4 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        $r5 = staticinvoke <org.quartz.JobKey: org.quartz.JobKey jobKey(java.lang.String,java.lang.String)>(r1, r2);

        $z0 = virtualinvoke $r4.<org.quartz.core.QuartzScheduler: boolean deleteJob(org.quartz.JobKey)>($r5);

     label2:
        return $z0;

     label3:
        $r6 := @caughtexception;

        $r7 = specialinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: java.lang.Exception newPlainException(java.lang.Exception)>($r6);

        throw $r7;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.util.List getCalendarNames() throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        org.quartz.core.QuartzScheduler $r2;
        java.util.List $r3;
        java.lang.Exception $r4, $r5;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

     label1:
        $r2 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        $r3 = virtualinvoke $r2.<org.quartz.core.QuartzScheduler: java.util.List getCalendarNames()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = specialinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: java.lang.Exception newPlainException(java.lang.Exception)>($r4);

        throw $r5;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public javax.management.openmbean.CompositeData getJobDetail(java.lang.String, java.lang.String) throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        java.lang.String r1, r2;
        org.quartz.core.QuartzScheduler $r3;
        org.quartz.JobKey $r4;
        javax.management.openmbean.CompositeData $r5;
        java.lang.Exception $r6, $r7;
        org.quartz.JobDetail r8;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

     label1:
        $r3 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        $r4 = staticinvoke <org.quartz.JobKey: org.quartz.JobKey jobKey(java.lang.String,java.lang.String)>(r1, r2);

        r8 = virtualinvoke $r3.<org.quartz.core.QuartzScheduler: org.quartz.JobDetail getJobDetail(org.quartz.JobKey)>($r4);

        $r5 = staticinvoke <org.quartz.core.jmx.JobDetailSupport: javax.management.openmbean.CompositeData toCompositeData(org.quartz.JobDetail)>(r8);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $r7 = specialinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: java.lang.Exception newPlainException(java.lang.Exception)>($r6);

        throw $r7;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.util.List getJobGroupNames() throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        org.quartz.core.QuartzScheduler $r2;
        java.util.List $r3;
        java.lang.Exception $r4, $r5;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

     label1:
        $r2 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        $r3 = virtualinvoke $r2.<org.quartz.core.QuartzScheduler: java.util.List getJobGroupNames()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = specialinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: java.lang.Exception newPlainException(java.lang.Exception)>($r4);

        throw $r5;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.util.List getJobNames(java.lang.String) throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        java.lang.String r1, $r9;
        java.util.Iterator r2;
        org.quartz.JobKey r3;
        java.util.ArrayList $r4;
        org.quartz.core.QuartzScheduler $r5;
        org.quartz.impl.matchers.GroupMatcher $r6;
        java.util.Set $r7;
        boolean $z0;
        java.lang.Object $r8;
        java.lang.Exception $r10, $r11;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: java.lang.String;

     label1:
        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        $r6 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher jobGroupEquals(java.lang.String)>(r1);

        $r7 = virtualinvoke $r5.<org.quartz.core.QuartzScheduler: java.util.Set getJobKeys(org.quartz.impl.matchers.GroupMatcher)>($r6);

        r2 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.quartz.JobKey) $r8;

        $r9 = virtualinvoke r3.<org.quartz.JobKey: java.lang.String getName()>();

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label2;

     label3:
        return $r4;

     label4:
        $r10 := @caughtexception;

        $r11 = specialinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: java.lang.Exception newPlainException(java.lang.Exception)>($r10);

        throw $r11;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    public java.lang.String getJobStoreClassName()
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        org.quartz.core.QuartzScheduler $r1;
        java.lang.Class $r2;
        java.lang.String $r3;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        $r1 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        $r2 = virtualinvoke $r1.<org.quartz.core.QuartzScheduler: java.lang.Class getJobStoreClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        return $r3;
    }

    public java.util.Set getPausedTriggerGroups() throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        org.quartz.core.QuartzScheduler $r2;
        java.util.Set $r3;
        java.lang.Exception $r4, $r5;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

     label1:
        $r2 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        $r3 = virtualinvoke $r2.<org.quartz.core.QuartzScheduler: java.util.Set getPausedTriggerGroups()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = specialinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: java.lang.Exception newPlainException(java.lang.Exception)>($r4);

        throw $r5;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public javax.management.openmbean.CompositeData getTrigger(java.lang.String, java.lang.String) throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        java.lang.String r1, r2;
        org.quartz.core.QuartzScheduler $r3;
        org.quartz.TriggerKey $r4;
        javax.management.openmbean.CompositeData $r5;
        java.lang.Exception $r6, $r7;
        org.quartz.Trigger r8;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

     label1:
        $r3 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        $r4 = staticinvoke <org.quartz.TriggerKey: org.quartz.TriggerKey triggerKey(java.lang.String,java.lang.String)>(r1, r2);

        r8 = virtualinvoke $r3.<org.quartz.core.QuartzScheduler: org.quartz.Trigger getTrigger(org.quartz.TriggerKey)>($r4);

        $r5 = staticinvoke <org.quartz.core.jmx.TriggerSupport: javax.management.openmbean.CompositeData toCompositeData(org.quartz.Trigger)>(r8);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $r7 = specialinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: java.lang.Exception newPlainException(java.lang.Exception)>($r6);

        throw $r7;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.util.List getTriggerGroupNames() throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        org.quartz.core.QuartzScheduler $r2;
        java.util.List $r3;
        java.lang.Exception $r4, $r5;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

     label1:
        $r2 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        $r3 = virtualinvoke $r2.<org.quartz.core.QuartzScheduler: java.util.List getTriggerGroupNames()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = specialinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: java.lang.Exception newPlainException(java.lang.Exception)>($r4);

        throw $r5;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.util.List getTriggerNames(java.lang.String) throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        java.lang.String r1, $r9;
        java.util.Iterator r2;
        org.quartz.TriggerKey r3;
        java.util.ArrayList $r4;
        org.quartz.core.QuartzScheduler $r5;
        org.quartz.impl.matchers.GroupMatcher $r6;
        java.util.Set $r7;
        boolean $z0;
        java.lang.Object $r8;
        java.lang.Exception $r10, $r11;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: java.lang.String;

     label1:
        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        $r6 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher triggerGroupEquals(java.lang.String)>(r1);

        $r7 = virtualinvoke $r5.<org.quartz.core.QuartzScheduler: java.util.Set getTriggerKeys(org.quartz.impl.matchers.GroupMatcher)>($r6);

        r2 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.quartz.TriggerKey) $r8;

        $r9 = virtualinvoke r3.<org.quartz.TriggerKey: java.lang.String getName()>();

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label2;

     label3:
        return $r4;

     label4:
        $r10 := @caughtexception;

        $r11 = specialinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: java.lang.Exception newPlainException(java.lang.Exception)>($r10);

        throw $r11;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    public java.lang.String getTriggerState(java.lang.String, java.lang.String) throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        java.lang.String r1, r2, $r5;
        org.quartz.Trigger$TriggerState r3;
        org.quartz.core.QuartzScheduler $r4;
        java.lang.Exception $r6, $r7;
        org.quartz.TriggerKey r8;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

     label1:
        r8 = staticinvoke <org.quartz.TriggerKey: org.quartz.TriggerKey triggerKey(java.lang.String,java.lang.String)>(r1, r2);

        $r4 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        r3 = virtualinvoke $r4.<org.quartz.core.QuartzScheduler: org.quartz.Trigger$TriggerState getTriggerState(org.quartz.TriggerKey)>(r8);

        $r5 = virtualinvoke r3.<org.quartz.Trigger$TriggerState: java.lang.String name()>();

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $r7 = specialinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: java.lang.Exception newPlainException(java.lang.Exception)>($r6);

        throw $r7;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.util.List getTriggersOfJob(java.lang.String, java.lang.String) throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        java.lang.String r1, r2;
        org.quartz.core.QuartzScheduler $r3;
        java.util.List $r4, $r5;
        java.lang.Exception $r6, $r7;
        org.quartz.JobKey r8;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

     label1:
        r8 = staticinvoke <org.quartz.JobKey: org.quartz.JobKey jobKey(java.lang.String,java.lang.String)>(r1, r2);

        $r3 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        $r4 = virtualinvoke $r3.<org.quartz.core.QuartzScheduler: java.util.List getTriggersOfJob(org.quartz.JobKey)>(r8);

        $r5 = staticinvoke <org.quartz.core.jmx.TriggerSupport: java.util.List toCompositeList(java.util.List)>($r4);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $r7 = specialinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: java.lang.Exception newPlainException(java.lang.Exception)>($r6);

        throw $r7;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public boolean interruptJob(java.lang.String, java.lang.String) throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        java.lang.String r1, r2;
        org.quartz.core.QuartzScheduler $r4;
        org.quartz.JobKey $r5;
        boolean $z0;
        java.lang.Exception $r6, $r7;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

     label1:
        $r4 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        $r5 = staticinvoke <org.quartz.JobKey: org.quartz.JobKey jobKey(java.lang.String,java.lang.String)>(r1, r2);

        $z0 = virtualinvoke $r4.<org.quartz.core.QuartzScheduler: boolean interrupt(org.quartz.JobKey)>($r5);

     label2:
        return $z0;

     label3:
        $r6 := @caughtexception;

        $r7 = specialinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: java.lang.Exception newPlainException(java.lang.Exception)>($r6);

        throw $r7;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public boolean interruptJob(java.lang.String) throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        java.lang.String r1;
        org.quartz.core.QuartzScheduler $r3;
        boolean $z0;
        java.lang.Exception $r4, $r5;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: java.lang.String;

     label1:
        $r3 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        $z0 = virtualinvoke $r3.<org.quartz.core.QuartzScheduler: boolean interrupt(java.lang.String)>(r1);

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        $r5 = specialinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: java.lang.Exception newPlainException(java.lang.Exception)>($r4);

        throw $r5;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.util.Date scheduleJob(java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        java.lang.String r1, r2, r3, r4, $r16, $r21;
        org.quartz.JobDetail r5;
        org.quartz.TriggerKey r6;
        org.quartz.Trigger r7;
        org.quartz.core.QuartzScheduler $r8, $r9, $r10;
        java.util.Date $r11;
        java.lang.IllegalArgumentException $r12, $r17;
        java.lang.StringBuilder $r13, $r14, $r15, $r18, $r19, $r20;
        java.lang.Exception $r22, $r23;
        org.quartz.JobKey r24;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

     label1:
        r24 = staticinvoke <org.quartz.JobKey: org.quartz.JobKey jobKey(java.lang.String,java.lang.String)>(r1, r2);

        $r8 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        r5 = virtualinvoke $r8.<org.quartz.core.QuartzScheduler: org.quartz.JobDetail getJobDetail(org.quartz.JobKey)>(r24);

        if r5 != null goto label2;

        $r17 = new java.lang.IllegalArgumentException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No such job: ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r24);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r21);

        throw $r17;

     label2:
        r6 = staticinvoke <org.quartz.TriggerKey: org.quartz.TriggerKey triggerKey(java.lang.String,java.lang.String)>(r3, r4);

        $r9 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        r7 = virtualinvoke $r9.<org.quartz.core.QuartzScheduler: org.quartz.Trigger getTrigger(org.quartz.TriggerKey)>(r6);

        if r7 != null goto label3;

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No such trigger: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r12;

     label3:
        $r10 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        $r11 = virtualinvoke $r10.<org.quartz.core.QuartzScheduler: java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)>(r5, r7);

     label4:
        return $r11;

     label5:
        $r22 := @caughtexception;

        $r23 = specialinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: java.lang.Exception newPlainException(java.lang.Exception)>($r22);

        throw $r23;

        catch java.lang.Exception from label1 to label4 with label5;
    }

    public boolean unscheduleJob(java.lang.String, java.lang.String) throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        java.lang.String r1, r2;
        org.quartz.core.QuartzScheduler $r4;
        org.quartz.TriggerKey $r5;
        boolean $z0;
        java.lang.Exception $r6, $r7;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

     label1:
        $r4 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        $r5 = staticinvoke <org.quartz.TriggerKey: org.quartz.TriggerKey triggerKey(java.lang.String,java.lang.String)>(r1, r2);

        $z0 = virtualinvoke $r4.<org.quartz.core.QuartzScheduler: boolean unscheduleJob(org.quartz.TriggerKey)>($r5);

     label2:
        return $z0;

     label3:
        $r6 := @caughtexception;

        $r7 = specialinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: java.lang.Exception newPlainException(java.lang.Exception)>($r6);

        throw $r7;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void clear() throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        org.quartz.core.QuartzScheduler $r2;
        java.lang.Exception $r3, $r4;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

     label1:
        $r2 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        virtualinvoke $r2.<org.quartz.core.QuartzScheduler: void clear()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = specialinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: java.lang.Exception newPlainException(java.lang.Exception)>($r3);

        throw $r4;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.lang.String getVersion()
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        org.quartz.core.QuartzScheduler $r1;
        java.lang.String $r2;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        $r1 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        $r2 = virtualinvoke $r1.<org.quartz.core.QuartzScheduler: java.lang.String getVersion()>();

        return $r2;
    }

    public boolean isShutdown()
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        org.quartz.core.QuartzScheduler $r1;
        boolean $z0;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        $r1 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        $z0 = virtualinvoke $r1.<org.quartz.core.QuartzScheduler: boolean isShutdown()>();

        return $z0;
    }

    public boolean isStarted()
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        org.quartz.core.QuartzScheduler $r1;
        boolean $z0;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        $r1 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        $z0 = virtualinvoke $r1.<org.quartz.core.QuartzScheduler: boolean isStarted()>();

        return $z0;
    }

    public void start() throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        org.quartz.core.QuartzScheduler $r2;
        java.lang.Exception $r3, $r4;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

     label1:
        $r2 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        virtualinvoke $r2.<org.quartz.core.QuartzScheduler: void start()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = specialinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: java.lang.Exception newPlainException(java.lang.Exception)>($r3);

        throw $r4;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void shutdown()
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        org.quartz.core.QuartzScheduler $r1;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        $r1 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        virtualinvoke $r1.<org.quartz.core.QuartzScheduler: void shutdown()>();

        return;
    }

    public void standby()
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        org.quartz.core.QuartzScheduler $r1;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        $r1 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        virtualinvoke $r1.<org.quartz.core.QuartzScheduler: void standby()>();

        return;
    }

    public boolean isStandbyMode()
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        org.quartz.core.QuartzScheduler $r1;
        boolean $z0;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        $r1 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        $z0 = virtualinvoke $r1.<org.quartz.core.QuartzScheduler: boolean isInStandbyMode()>();

        return $z0;
    }

    public java.lang.String getSchedulerName()
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        org.quartz.core.QuartzScheduler $r1;
        java.lang.String $r2;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        $r1 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        $r2 = virtualinvoke $r1.<org.quartz.core.QuartzScheduler: java.lang.String getSchedulerName()>();

        return $r2;
    }

    public java.lang.String getSchedulerInstanceId()
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        org.quartz.core.QuartzScheduler $r1;
        java.lang.String $r2;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        $r1 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        $r2 = virtualinvoke $r1.<org.quartz.core.QuartzScheduler: java.lang.String getSchedulerInstanceId()>();

        return $r2;
    }

    public java.lang.String getThreadPoolClassName()
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        org.quartz.core.QuartzScheduler $r1;
        java.lang.Class $r2;
        java.lang.String $r3;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        $r1 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        $r2 = virtualinvoke $r1.<org.quartz.core.QuartzScheduler: java.lang.Class getThreadPoolClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        return $r3;
    }

    public int getThreadPoolSize()
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        org.quartz.core.QuartzScheduler $r1;
        int $i0;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        $r1 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        $i0 = virtualinvoke $r1.<org.quartz.core.QuartzScheduler: int getThreadPoolSize()>();

        return $i0;
    }

    public void pauseJob(java.lang.String, java.lang.String) throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        java.lang.String r1, r2;
        org.quartz.core.QuartzScheduler $r4;
        org.quartz.JobKey $r5;
        java.lang.Exception $r6, $r7;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

     label1:
        $r4 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        $r5 = staticinvoke <org.quartz.JobKey: org.quartz.JobKey jobKey(java.lang.String,java.lang.String)>(r1, r2);

        virtualinvoke $r4.<org.quartz.core.QuartzScheduler: void pauseJob(org.quartz.JobKey)>($r5);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = specialinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: java.lang.Exception newPlainException(java.lang.Exception)>($r6);

        throw $r7;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void pauseJobs(org.quartz.impl.matchers.GroupMatcher) throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        org.quartz.impl.matchers.GroupMatcher r1;
        org.quartz.core.QuartzScheduler $r3;
        java.lang.Exception $r4, $r5;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: org.quartz.impl.matchers.GroupMatcher;

     label1:
        $r3 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        virtualinvoke $r3.<org.quartz.core.QuartzScheduler: void pauseJobs(org.quartz.impl.matchers.GroupMatcher)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = specialinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: java.lang.Exception newPlainException(java.lang.Exception)>($r4);

        throw $r5;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void pauseJobGroup(java.lang.String) throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        java.lang.String r1;
        org.quartz.impl.matchers.GroupMatcher $r2;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher groupEquals(java.lang.String)>(r1);

        virtualinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: void pauseJobs(org.quartz.impl.matchers.GroupMatcher)>($r2);

        return;
    }

    public void pauseJobsStartingWith(java.lang.String) throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        java.lang.String r1;
        org.quartz.impl.matchers.GroupMatcher $r2;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher groupStartsWith(java.lang.String)>(r1);

        virtualinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: void pauseJobs(org.quartz.impl.matchers.GroupMatcher)>($r2);

        return;
    }

    public void pauseJobsEndingWith(java.lang.String) throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        java.lang.String r1;
        org.quartz.impl.matchers.GroupMatcher $r2;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher groupEndsWith(java.lang.String)>(r1);

        virtualinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: void pauseJobs(org.quartz.impl.matchers.GroupMatcher)>($r2);

        return;
    }

    public void pauseJobsContaining(java.lang.String) throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        java.lang.String r1;
        org.quartz.impl.matchers.GroupMatcher $r2;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher groupContains(java.lang.String)>(r1);

        virtualinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: void pauseJobs(org.quartz.impl.matchers.GroupMatcher)>($r2);

        return;
    }

    public void pauseJobsAll() throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        org.quartz.impl.matchers.GroupMatcher $r1;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        $r1 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher anyJobGroup()>();

        virtualinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: void pauseJobs(org.quartz.impl.matchers.GroupMatcher)>($r1);

        return;
    }

    public void pauseAllTriggers() throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        org.quartz.core.QuartzScheduler $r2;
        java.lang.Exception $r3, $r4;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

     label1:
        $r2 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        virtualinvoke $r2.<org.quartz.core.QuartzScheduler: void pauseAll()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = specialinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: java.lang.Exception newPlainException(java.lang.Exception)>($r3);

        throw $r4;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private void pauseTriggers(org.quartz.impl.matchers.GroupMatcher) throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        org.quartz.impl.matchers.GroupMatcher r1;
        org.quartz.core.QuartzScheduler $r3;
        java.lang.Exception $r4, $r5;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: org.quartz.impl.matchers.GroupMatcher;

     label1:
        $r3 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        virtualinvoke $r3.<org.quartz.core.QuartzScheduler: void pauseTriggers(org.quartz.impl.matchers.GroupMatcher)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = specialinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: java.lang.Exception newPlainException(java.lang.Exception)>($r4);

        throw $r5;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void pauseTriggerGroup(java.lang.String) throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        java.lang.String r1;
        org.quartz.impl.matchers.GroupMatcher $r2;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher groupEquals(java.lang.String)>(r1);

        specialinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: void pauseTriggers(org.quartz.impl.matchers.GroupMatcher)>($r2);

        return;
    }

    public void pauseTriggersStartingWith(java.lang.String) throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        java.lang.String r1;
        org.quartz.impl.matchers.GroupMatcher $r2;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher groupStartsWith(java.lang.String)>(r1);

        specialinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: void pauseTriggers(org.quartz.impl.matchers.GroupMatcher)>($r2);

        return;
    }

    public void pauseTriggersEndingWith(java.lang.String) throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        java.lang.String r1;
        org.quartz.impl.matchers.GroupMatcher $r2;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher groupEndsWith(java.lang.String)>(r1);

        specialinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: void pauseTriggers(org.quartz.impl.matchers.GroupMatcher)>($r2);

        return;
    }

    public void pauseTriggersContaining(java.lang.String) throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        java.lang.String r1;
        org.quartz.impl.matchers.GroupMatcher $r2;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher groupContains(java.lang.String)>(r1);

        specialinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: void pauseTriggers(org.quartz.impl.matchers.GroupMatcher)>($r2);

        return;
    }

    public void pauseTriggersAll() throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        org.quartz.impl.matchers.GroupMatcher $r1;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        $r1 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher anyTriggerGroup()>();

        specialinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: void pauseTriggers(org.quartz.impl.matchers.GroupMatcher)>($r1);

        return;
    }

    public void pauseTrigger(java.lang.String, java.lang.String) throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        java.lang.String r1, r2;
        org.quartz.core.QuartzScheduler $r4;
        org.quartz.TriggerKey $r5;
        java.lang.Exception $r6, $r7;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

     label1:
        $r4 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        $r5 = staticinvoke <org.quartz.TriggerKey: org.quartz.TriggerKey triggerKey(java.lang.String,java.lang.String)>(r1, r2);

        virtualinvoke $r4.<org.quartz.core.QuartzScheduler: void pauseTrigger(org.quartz.TriggerKey)>($r5);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = specialinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: java.lang.Exception newPlainException(java.lang.Exception)>($r6);

        throw $r7;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void resumeAllTriggers() throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        org.quartz.core.QuartzScheduler $r2;
        java.lang.Exception $r3, $r4;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

     label1:
        $r2 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        virtualinvoke $r2.<org.quartz.core.QuartzScheduler: void resumeAll()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = specialinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: java.lang.Exception newPlainException(java.lang.Exception)>($r3);

        throw $r4;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void resumeJob(java.lang.String, java.lang.String) throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        java.lang.String r1, r2;
        org.quartz.core.QuartzScheduler $r4;
        org.quartz.JobKey $r5;
        java.lang.Exception $r6, $r7;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

     label1:
        $r4 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        $r5 = staticinvoke <org.quartz.JobKey: org.quartz.JobKey jobKey(java.lang.String,java.lang.String)>(r1, r2);

        virtualinvoke $r4.<org.quartz.core.QuartzScheduler: void resumeJob(org.quartz.JobKey)>($r5);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = specialinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: java.lang.Exception newPlainException(java.lang.Exception)>($r6);

        throw $r7;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void resumeJobs(org.quartz.impl.matchers.GroupMatcher) throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        org.quartz.impl.matchers.GroupMatcher r1;
        org.quartz.core.QuartzScheduler $r3;
        java.lang.Exception $r4, $r5;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: org.quartz.impl.matchers.GroupMatcher;

     label1:
        $r3 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        virtualinvoke $r3.<org.quartz.core.QuartzScheduler: void resumeJobs(org.quartz.impl.matchers.GroupMatcher)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = specialinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: java.lang.Exception newPlainException(java.lang.Exception)>($r4);

        throw $r5;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void resumeJobGroup(java.lang.String) throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        java.lang.String r1;
        org.quartz.impl.matchers.GroupMatcher $r2;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher groupEquals(java.lang.String)>(r1);

        virtualinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: void resumeJobs(org.quartz.impl.matchers.GroupMatcher)>($r2);

        return;
    }

    public void resumeJobsStartingWith(java.lang.String) throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        java.lang.String r1;
        org.quartz.impl.matchers.GroupMatcher $r2;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher groupStartsWith(java.lang.String)>(r1);

        virtualinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: void resumeJobs(org.quartz.impl.matchers.GroupMatcher)>($r2);

        return;
    }

    public void resumeJobsEndingWith(java.lang.String) throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        java.lang.String r1;
        org.quartz.impl.matchers.GroupMatcher $r2;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher groupEndsWith(java.lang.String)>(r1);

        virtualinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: void resumeJobs(org.quartz.impl.matchers.GroupMatcher)>($r2);

        return;
    }

    public void resumeJobsContaining(java.lang.String) throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        java.lang.String r1;
        org.quartz.impl.matchers.GroupMatcher $r2;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher groupContains(java.lang.String)>(r1);

        virtualinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: void resumeJobs(org.quartz.impl.matchers.GroupMatcher)>($r2);

        return;
    }

    public void resumeJobsAll() throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        org.quartz.impl.matchers.GroupMatcher $r1;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        $r1 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher anyJobGroup()>();

        virtualinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: void resumeJobs(org.quartz.impl.matchers.GroupMatcher)>($r1);

        return;
    }

    public void resumeTrigger(java.lang.String, java.lang.String) throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        java.lang.String r1, r2;
        org.quartz.core.QuartzScheduler $r4;
        org.quartz.TriggerKey $r5;
        java.lang.Exception $r6, $r7;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

     label1:
        $r4 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        $r5 = staticinvoke <org.quartz.TriggerKey: org.quartz.TriggerKey triggerKey(java.lang.String,java.lang.String)>(r1, r2);

        virtualinvoke $r4.<org.quartz.core.QuartzScheduler: void resumeTrigger(org.quartz.TriggerKey)>($r5);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = specialinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: java.lang.Exception newPlainException(java.lang.Exception)>($r6);

        throw $r7;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private void resumeTriggers(org.quartz.impl.matchers.GroupMatcher) throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        org.quartz.impl.matchers.GroupMatcher r1;
        org.quartz.core.QuartzScheduler $r3;
        java.lang.Exception $r4, $r5;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: org.quartz.impl.matchers.GroupMatcher;

     label1:
        $r3 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        virtualinvoke $r3.<org.quartz.core.QuartzScheduler: void resumeTriggers(org.quartz.impl.matchers.GroupMatcher)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = specialinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: java.lang.Exception newPlainException(java.lang.Exception)>($r4);

        throw $r5;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void resumeTriggerGroup(java.lang.String) throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        java.lang.String r1;
        org.quartz.impl.matchers.GroupMatcher $r2;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher groupEquals(java.lang.String)>(r1);

        specialinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: void resumeTriggers(org.quartz.impl.matchers.GroupMatcher)>($r2);

        return;
    }

    public void resumeTriggersStartingWith(java.lang.String) throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        java.lang.String r1;
        org.quartz.impl.matchers.GroupMatcher $r2;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher groupStartsWith(java.lang.String)>(r1);

        specialinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: void resumeTriggers(org.quartz.impl.matchers.GroupMatcher)>($r2);

        return;
    }

    public void resumeTriggersEndingWith(java.lang.String) throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        java.lang.String r1;
        org.quartz.impl.matchers.GroupMatcher $r2;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher groupEndsWith(java.lang.String)>(r1);

        specialinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: void resumeTriggers(org.quartz.impl.matchers.GroupMatcher)>($r2);

        return;
    }

    public void resumeTriggersContaining(java.lang.String) throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        java.lang.String r1;
        org.quartz.impl.matchers.GroupMatcher $r2;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher groupContains(java.lang.String)>(r1);

        specialinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: void resumeTriggers(org.quartz.impl.matchers.GroupMatcher)>($r2);

        return;
    }

    public void resumeTriggersAll() throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        org.quartz.impl.matchers.GroupMatcher $r1;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        $r1 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher anyTriggerGroup()>();

        specialinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: void resumeTriggers(org.quartz.impl.matchers.GroupMatcher)>($r1);

        return;
    }

    public void triggerJob(java.lang.String, java.lang.String, java.util.Map) throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        java.lang.String r1, r2;
        java.util.Map r3;
        org.quartz.core.QuartzScheduler $r5;
        org.quartz.JobKey $r6;
        org.quartz.JobDataMap $r7;
        java.lang.Exception $r8, $r9;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.Map;

     label1:
        $r5 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        $r6 = staticinvoke <org.quartz.JobKey: org.quartz.JobKey jobKey(java.lang.String,java.lang.String)>(r1, r2);

        $r7 = new org.quartz.JobDataMap;

        specialinvoke $r7.<org.quartz.JobDataMap: void <init>(java.util.Map)>(r3);

        virtualinvoke $r5.<org.quartz.core.QuartzScheduler: void triggerJob(org.quartz.JobKey,org.quartz.JobDataMap)>($r6, $r7);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        $r9 = specialinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: java.lang.Exception newPlainException(java.lang.Exception)>($r8);

        throw $r9;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void triggerJob(javax.management.openmbean.CompositeData) throws java.lang.Exception
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        javax.management.openmbean.CompositeData r1;
        org.quartz.core.QuartzScheduler $r3;
        org.quartz.spi.OperableTrigger $r4;
        java.lang.Exception $r5, $r6;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: javax.management.openmbean.CompositeData;

     label1:
        $r3 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        $r4 = staticinvoke <org.quartz.core.jmx.TriggerSupport: org.quartz.spi.OperableTrigger newTrigger(javax.management.openmbean.CompositeData)>(r1);

        virtualinvoke $r3.<org.quartz.core.QuartzScheduler: void triggerJob(org.quartz.spi.OperableTrigger)>($r4);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = specialinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: java.lang.Exception newPlainException(java.lang.Exception)>($r5);

        throw $r6;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void jobAdded(org.quartz.JobDetail)
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        org.quartz.JobDetail r1;
        javax.management.openmbean.CompositeData $r2;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: org.quartz.JobDetail;

        $r2 = staticinvoke <org.quartz.core.jmx.JobDetailSupport: javax.management.openmbean.CompositeData toCompositeData(org.quartz.JobDetail)>(r1);

        virtualinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: void sendNotification(java.lang.String,java.lang.Object)>("jobAdded", $r2);

        return;
    }

    public void jobDeleted(org.quartz.JobKey)
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        org.quartz.JobKey r1;
        java.util.HashMap $r3;
        java.lang.String $r4, $r6;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: org.quartz.JobKey;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        $r4 = virtualinvoke r1.<org.quartz.JobKey: java.lang.String getName()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("jobName", $r4);

        $r6 = virtualinvoke r1.<org.quartz.JobKey: java.lang.String getGroup()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("jobGroup", $r6);

        virtualinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: void sendNotification(java.lang.String,java.lang.Object)>("jobDeleted", $r3);

        return;
    }

    public void jobScheduled(org.quartz.Trigger)
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        org.quartz.Trigger r1;
        javax.management.openmbean.CompositeData $r2;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: org.quartz.Trigger;

        $r2 = staticinvoke <org.quartz.core.jmx.TriggerSupport: javax.management.openmbean.CompositeData toCompositeData(org.quartz.Trigger)>(r1);

        virtualinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: void sendNotification(java.lang.String,java.lang.Object)>("jobScheduled", $r2);

        return;
    }

    public void jobUnscheduled(org.quartz.TriggerKey)
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        org.quartz.TriggerKey r1;
        java.util.HashMap $r3;
        java.lang.String $r4, $r6;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: org.quartz.TriggerKey;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        $r4 = virtualinvoke r1.<org.quartz.TriggerKey: java.lang.String getName()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("triggerName", $r4);

        $r6 = virtualinvoke r1.<org.quartz.TriggerKey: java.lang.String getGroup()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("triggerGroup", $r6);

        virtualinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: void sendNotification(java.lang.String,java.lang.Object)>("jobUnscheduled", $r3);

        return;
    }

    public void schedulingDataCleared()
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        virtualinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: void sendNotification(java.lang.String)>("schedulingDataCleared");

        return;
    }

    public void jobPaused(org.quartz.JobKey)
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        org.quartz.JobKey r1;
        java.util.HashMap $r3;
        java.lang.String $r4, $r6;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: org.quartz.JobKey;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        $r4 = virtualinvoke r1.<org.quartz.JobKey: java.lang.String getName()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("jobName", $r4);

        $r6 = virtualinvoke r1.<org.quartz.JobKey: java.lang.String getGroup()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("jobGroup", $r6);

        virtualinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: void sendNotification(java.lang.String,java.lang.Object)>("jobsPaused", $r3);

        return;
    }

    public void jobsPaused(java.lang.String)
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        java.lang.String r1;
        java.util.HashMap $r3;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("jobName", null);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("jobGroup", r1);

        virtualinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: void sendNotification(java.lang.String,java.lang.Object)>("jobsPaused", $r3);

        return;
    }

    public void jobsResumed(java.lang.String)
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        java.lang.String r1;
        java.util.HashMap $r3;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("jobName", null);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("jobGroup", r1);

        virtualinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: void sendNotification(java.lang.String,java.lang.Object)>("jobsResumed", $r3);

        return;
    }

    public void jobResumed(org.quartz.JobKey)
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        org.quartz.JobKey r1;
        java.util.HashMap $r3;
        java.lang.String $r4, $r6;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: org.quartz.JobKey;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        $r4 = virtualinvoke r1.<org.quartz.JobKey: java.lang.String getName()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("jobName", $r4);

        $r6 = virtualinvoke r1.<org.quartz.JobKey: java.lang.String getGroup()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("jobGroup", $r6);

        virtualinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: void sendNotification(java.lang.String,java.lang.Object)>("jobsResumed", $r3);

        return;
    }

    public void schedulerError(java.lang.String, org.quartz.SchedulerException)
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        java.lang.String r1, $r3;
        org.quartz.SchedulerException r2;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.quartz.SchedulerException;

        $r3 = virtualinvoke r2.<org.quartz.SchedulerException: java.lang.String getMessage()>();

        virtualinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: void sendNotification(java.lang.String,java.lang.Object)>("schedulerError", $r3);

        return;
    }

    public void schedulerStarted()
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        virtualinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: void sendNotification(java.lang.String)>("schedulerStarted");

        return;
    }

    public void schedulerStarting()
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        return;
    }

    public void schedulerInStandbyMode()
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        virtualinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: void sendNotification(java.lang.String)>("schedulerPaused");

        return;
    }

    public void schedulerShutdown()
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        org.quartz.core.QuartzScheduler $r1, $r2;
        java.lang.String $r3;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        $r1 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        virtualinvoke $r1.<org.quartz.core.QuartzScheduler: boolean removeInternalSchedulerListener(org.quartz.SchedulerListener)>(r0);

        $r2 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        $r3 = virtualinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: java.lang.String getName()>();

        virtualinvoke $r2.<org.quartz.core.QuartzScheduler: boolean removeInternalJobListener(java.lang.String)>($r3);

        virtualinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: void sendNotification(java.lang.String)>("schedulerShutdown");

        return;
    }

    public void schedulerShuttingdown()
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        return;
    }

    public void triggerFinalized(org.quartz.Trigger)
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        org.quartz.Trigger r1;
        java.util.HashMap $r3;
        org.quartz.TriggerKey $r4, $r7;
        java.lang.String $r5, $r8;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: org.quartz.Trigger;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        $r4 = interfaceinvoke r1.<org.quartz.Trigger: org.quartz.TriggerKey getKey()>();

        $r5 = virtualinvoke $r4.<org.quartz.TriggerKey: java.lang.String getName()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("triggerName", $r5);

        $r7 = interfaceinvoke r1.<org.quartz.Trigger: org.quartz.TriggerKey getKey()>();

        $r8 = virtualinvoke $r7.<org.quartz.TriggerKey: java.lang.String getGroup()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("triggerGroup", $r8);

        virtualinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: void sendNotification(java.lang.String,java.lang.Object)>("triggerFinalized", $r3);

        return;
    }

    public void triggersPaused(java.lang.String)
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        java.lang.String r1;
        java.util.HashMap $r3;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("triggerName", null);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("triggerGroup", r1);

        virtualinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: void sendNotification(java.lang.String,java.lang.Object)>("triggersPaused", $r3);

        return;
    }

    public void triggerPaused(org.quartz.TriggerKey)
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        org.quartz.TriggerKey r1;
        java.util.HashMap $r3;
        java.lang.String $r4, $r6;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: org.quartz.TriggerKey;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        if r1 == null goto label1;

        $r4 = virtualinvoke r1.<org.quartz.TriggerKey: java.lang.String getName()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("triggerName", $r4);

        $r6 = virtualinvoke r1.<org.quartz.TriggerKey: java.lang.String getGroup()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("triggerGroup", $r6);

     label1:
        virtualinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: void sendNotification(java.lang.String,java.lang.Object)>("triggersPaused", $r3);

        return;
    }

    public void triggersResumed(java.lang.String)
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        java.lang.String r1;
        java.util.HashMap $r3;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("triggerName", null);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("triggerGroup", r1);

        virtualinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: void sendNotification(java.lang.String,java.lang.Object)>("triggersResumed", $r3);

        return;
    }

    public void triggerResumed(org.quartz.TriggerKey)
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        org.quartz.TriggerKey r1;
        java.util.HashMap $r3;
        java.lang.String $r4, $r6;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: org.quartz.TriggerKey;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        if r1 == null goto label1;

        $r4 = virtualinvoke r1.<org.quartz.TriggerKey: java.lang.String getName()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("triggerName", $r4);

        $r6 = virtualinvoke r1.<org.quartz.TriggerKey: java.lang.String getGroup()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("triggerGroup", $r6);

     label1:
        virtualinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: void sendNotification(java.lang.String,java.lang.Object)>("triggersResumed", $r3);

        return;
    }

    public java.lang.String getName()
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        return "QuartzSchedulerMBeanImpl.listener";
    }

    public void jobExecutionVetoed(org.quartz.JobExecutionContext)
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        org.quartz.JobExecutionContext r1;
        javax.management.openmbean.CompositeData $r3;
        java.lang.Exception $r4, $r6;
        java.lang.RuntimeException $r5;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: org.quartz.JobExecutionContext;

     label1:
        $r3 = staticinvoke <org.quartz.core.jmx.JobExecutionContextSupport: javax.management.openmbean.CompositeData toCompositeData(org.quartz.JobExecutionContext)>(r1);

        virtualinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: void sendNotification(java.lang.String,java.lang.Object)>("jobExecutionVetoed", $r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        $r6 = specialinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: java.lang.Exception newPlainException(java.lang.Exception)>($r4);

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r6);

        throw $r5;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void jobToBeExecuted(org.quartz.JobExecutionContext)
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        org.quartz.JobExecutionContext r1;
        javax.management.openmbean.CompositeData $r3;
        java.lang.Exception $r4, $r6;
        java.lang.RuntimeException $r5;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: org.quartz.JobExecutionContext;

     label1:
        $r3 = staticinvoke <org.quartz.core.jmx.JobExecutionContextSupport: javax.management.openmbean.CompositeData toCompositeData(org.quartz.JobExecutionContext)>(r1);

        virtualinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: void sendNotification(java.lang.String,java.lang.Object)>("jobToBeExecuted", $r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        $r6 = specialinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: java.lang.Exception newPlainException(java.lang.Exception)>($r4);

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r6);

        throw $r5;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void jobWasExecuted(org.quartz.JobExecutionContext, org.quartz.JobExecutionException)
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        org.quartz.JobExecutionContext r1;
        org.quartz.JobExecutionException r2;
        javax.management.openmbean.CompositeData $r4;
        java.lang.Exception $r5, $r7;
        java.lang.RuntimeException $r6;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: org.quartz.JobExecutionContext;

        r2 := @parameter1: org.quartz.JobExecutionException;

     label1:
        $r4 = staticinvoke <org.quartz.core.jmx.JobExecutionContextSupport: javax.management.openmbean.CompositeData toCompositeData(org.quartz.JobExecutionContext)>(r1);

        virtualinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: void sendNotification(java.lang.String,java.lang.Object)>("jobWasExecuted", $r4);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        $r7 = specialinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: java.lang.Exception newPlainException(java.lang.Exception)>($r5);

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r7);

        throw $r6;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void sendNotification(java.lang.String)
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        java.lang.String r1;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: void sendNotification(java.lang.String,java.lang.Object,java.lang.String)>(r1, null, null);

        return;
    }

    public void sendNotification(java.lang.String, java.lang.Object)
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        java.lang.String r1;
        java.lang.Object r2;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        virtualinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: void sendNotification(java.lang.String,java.lang.Object,java.lang.String)>(r1, r2, null);

        return;
    }

    public void sendNotification(java.lang.String, java.lang.Object, java.lang.String)
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        java.lang.String r1, r3;
        java.lang.Object r2;
        javax.management.Notification $r5;
        java.util.concurrent.atomic.AtomicLong $r6;
        long $l0, $l1;
        org.quartz.core.QuartzSchedulerMBeanImpl$Emitter $r7;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.String;

        $r5 = new javax.management.Notification;

        $r6 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: java.util.concurrent.atomic.AtomicLong sequenceNumber>;

        $l0 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        specialinvoke $r5.<javax.management.Notification: void <init>(java.lang.String,java.lang.Object,long,long,java.lang.String)>(r1, r0, $l0, $l1, r3);

        if r2 == null goto label1;

        virtualinvoke $r5.<javax.management.Notification: void setUserData(java.lang.Object)>(r2);

     label1:
        $r7 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzSchedulerMBeanImpl$Emitter emitter>;

        virtualinvoke $r7.<org.quartz.core.QuartzSchedulerMBeanImpl$Emitter: void sendNotification(javax.management.Notification)>($r5);

        return;
    }

    public void addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        javax.management.NotificationListener r1;
        javax.management.NotificationFilter r2;
        java.lang.Object r3;
        org.quartz.core.QuartzSchedulerMBeanImpl$Emitter $r4;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: javax.management.NotificationListener;

        r2 := @parameter1: javax.management.NotificationFilter;

        r3 := @parameter2: java.lang.Object;

        $r4 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzSchedulerMBeanImpl$Emitter emitter>;

        virtualinvoke $r4.<org.quartz.core.QuartzSchedulerMBeanImpl$Emitter: void addNotificationListener(javax.management.NotificationListener,javax.management.NotificationFilter,java.lang.Object)>(r1, r2, r3);

        return;
    }

    public javax.management.MBeanNotificationInfo[] getNotificationInfo()
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        javax.management.MBeanNotificationInfo[] $r1;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        $r1 = <org.quartz.core.QuartzSchedulerMBeanImpl: javax.management.MBeanNotificationInfo[] NOTIFICATION_INFO>;

        return $r1;
    }

    public void removeNotificationListener(javax.management.NotificationListener) throws javax.management.ListenerNotFoundException
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        javax.management.NotificationListener r1;
        org.quartz.core.QuartzSchedulerMBeanImpl$Emitter $r2;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: javax.management.NotificationListener;

        $r2 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzSchedulerMBeanImpl$Emitter emitter>;

        virtualinvoke $r2.<org.quartz.core.QuartzSchedulerMBeanImpl$Emitter: void removeNotificationListener(javax.management.NotificationListener)>(r1);

        return;
    }

    public void removeNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object) throws javax.management.ListenerNotFoundException
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        javax.management.NotificationListener r1;
        javax.management.NotificationFilter r2;
        java.lang.Object r3;
        org.quartz.core.QuartzSchedulerMBeanImpl$Emitter $r4;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        r1 := @parameter0: javax.management.NotificationListener;

        r2 := @parameter1: javax.management.NotificationFilter;

        r3 := @parameter2: java.lang.Object;

        $r4 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzSchedulerMBeanImpl$Emitter emitter>;

        virtualinvoke $r4.<org.quartz.core.QuartzSchedulerMBeanImpl$Emitter: void removeNotificationListener(javax.management.NotificationListener,javax.management.NotificationFilter,java.lang.Object)>(r1, r2, r3);

        return;
    }

    public synchronized boolean isSampledStatisticsEnabled()
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        boolean $z0;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        $z0 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: boolean sampledStatisticsEnabled>;

        return $z0;
    }

    public void setSampledStatisticsEnabled(boolean)
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        boolean z0, $z1;
        org.quartz.core.SampledStatistics $r1, $r2;
        java.lang.Boolean $r3;
        org.quartz.core.SampledStatisticsImpl $r4;
        org.quartz.core.QuartzScheduler $r5;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        z0 := @parameter0: boolean;

        $z1 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: boolean sampledStatisticsEnabled>;

        if z0 == $z1 goto label3;

        r0.<org.quartz.core.QuartzSchedulerMBeanImpl: boolean sampledStatisticsEnabled> = z0;

        if z0 == 0 goto label1;

        $r4 = new org.quartz.core.SampledStatisticsImpl;

        $r5 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.QuartzScheduler scheduler>;

        specialinvoke $r4.<org.quartz.core.SampledStatisticsImpl: void <init>(org.quartz.core.QuartzScheduler)>($r5);

        r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.SampledStatistics sampledStatistics> = $r4;

        goto label2;

     label1:
        $r1 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.SampledStatistics sampledStatistics>;

        interfaceinvoke $r1.<org.quartz.core.SampledStatistics: void shutdown()>();

        $r2 = <org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.SampledStatistics NULL_SAMPLED_STATISTICS>;

        r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.SampledStatistics sampledStatistics> = $r2;

     label2:
        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        virtualinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: void sendNotification(java.lang.String,java.lang.Object)>("sampledStatisticsEnabled", $r3);

     label3:
        return;
    }

    public long getJobsCompletedMostRecentSample()
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        org.quartz.core.SampledStatistics $r1;
        long $l0;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        $r1 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.SampledStatistics sampledStatistics>;

        $l0 = interfaceinvoke $r1.<org.quartz.core.SampledStatistics: long getJobsCompletedMostRecentSample()>();

        return $l0;
    }

    public long getJobsExecutedMostRecentSample()
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        org.quartz.core.SampledStatistics $r1;
        long $l0;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        $r1 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.SampledStatistics sampledStatistics>;

        $l0 = interfaceinvoke $r1.<org.quartz.core.SampledStatistics: long getJobsExecutingMostRecentSample()>();

        return $l0;
    }

    public long getJobsScheduledMostRecentSample()
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        org.quartz.core.SampledStatistics $r1;
        long $l0;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        $r1 = r0.<org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.SampledStatistics sampledStatistics>;

        $l0 = interfaceinvoke $r1.<org.quartz.core.SampledStatistics: long getJobsScheduledMostRecentSample()>();

        return $l0;
    }

    public java.util.Map getPerformanceMetrics()
    {
        org.quartz.core.QuartzSchedulerMBeanImpl r0;
        java.util.HashMap $r2;
        long $l0, $l1, $l2;
        java.lang.Long $r3, $r5, $r7;

        r0 := @this: org.quartz.core.QuartzSchedulerMBeanImpl;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        $l0 = virtualinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: long getJobsCompletedMostRecentSample()>();

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("JobsCompleted", $r3);

        $l1 = virtualinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: long getJobsExecutedMostRecentSample()>();

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("JobsExecuted", $r5);

        $l2 = virtualinvoke r0.<org.quartz.core.QuartzSchedulerMBeanImpl: long getJobsScheduledMostRecentSample()>();

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("JobsScheduled", $r7);

        return $r2;
    }

    static void <clinit>()
    {
        java.lang.String r1;
        org.quartz.core.NullSampledStatisticsImpl $r3;
        java.lang.String[] $r4;
        java.lang.Class $r5;
        javax.management.MBeanNotificationInfo[] $r6;
        javax.management.MBeanNotificationInfo $r7;

        $r3 = new org.quartz.core.NullSampledStatisticsImpl;

        specialinvoke $r3.<org.quartz.core.NullSampledStatisticsImpl: void <init>()>();

        <org.quartz.core.QuartzSchedulerMBeanImpl: org.quartz.core.SampledStatistics NULL_SAMPLED_STATISTICS> = $r3;

        $r4 = newarray (java.lang.String)[3];

        $r4[0] = "schedulerStarted";

        $r4[1] = "schedulerPaused";

        $r4[2] = "schedulerShutdown";

        $r5 = class "Ljavax/management/Notification;";

        r1 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r6 = newarray (javax.management.MBeanNotificationInfo)[1];

        $r7 = new javax.management.MBeanNotificationInfo;

        specialinvoke $r7.<javax.management.MBeanNotificationInfo: void <init>(java.lang.String[],java.lang.String,java.lang.String)>($r4, r1, "QuartzScheduler JMX Event");

        $r6[0] = $r7;

        <org.quartz.core.QuartzSchedulerMBeanImpl: javax.management.MBeanNotificationInfo[] NOTIFICATION_INFO> = $r6;

        return;
    }
}
