public class org.quartz.AbstractSchedulerTest$UncleanShutdownJob extends java.lang.Object implements org.quartz.Job
{

    public void <init>()
    {
        org.quartz.AbstractSchedulerTest$UncleanShutdownJob r0;

        r0 := @this: org.quartz.AbstractSchedulerTest$UncleanShutdownJob;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void execute(org.quartz.JobExecutionContext) throws org.quartz.JobExecutionException
    {
        org.quartz.AbstractSchedulerTest$UncleanShutdownJob r0;
        org.quartz.JobExecutionContext r1;
        java.util.concurrent.CyclicBarrier r2;
        org.quartz.Scheduler $r3;
        java.lang.Thread $r4;
        java.lang.Object $r6;
        java.util.concurrent.TimeUnit $r7;
        java.lang.Throwable $r8;
        java.lang.AssertionError $r9;
        java.lang.StringBuilder $r10, $r11, $r13;
        java.lang.String $r12, $r14;
        org.quartz.SchedulerContext r15;

        r0 := @this: org.quartz.AbstractSchedulerTest$UncleanShutdownJob;

        r1 := @parameter0: org.quartz.JobExecutionContext;

     label1:
        $r3 = interfaceinvoke r1.<org.quartz.JobExecutionContext: org.quartz.Scheduler getScheduler()>();

        r15 = interfaceinvoke $r3.<org.quartz.Scheduler: org.quartz.SchedulerContext getContext()>();

        $r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke r15.<org.quartz.SchedulerContext: java.lang.Object put(java.lang.String,java.lang.Object)>("JOB_THREAD", $r4);

        $r6 = virtualinvoke r15.<org.quartz.SchedulerContext: java.lang.Object get(java.lang.Object)>("BARRIER");

        r2 = (java.util.concurrent.CyclicBarrier) $r6;

        $r7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        virtualinvoke r2.<java.util.concurrent.CyclicBarrier: int await(long,java.util.concurrent.TimeUnit)>(125L, $r7);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        virtualinvoke $r8.<java.lang.Throwable: void printStackTrace()>();

        $r9 = new java.lang.AssertionError;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Await on barrier was interrupted: ");

        $r12 = virtualinvoke $r8.<java.lang.Throwable: java.lang.String toString()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.AssertionError: void <init>(java.lang.Object)>($r14);

        throw $r9;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
