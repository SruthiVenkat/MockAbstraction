public class org.quartz.impl.jdbcjobstore.JobStoreCMT extends org.quartz.impl.jdbcjobstore.JobStoreSupport
{
    protected java.lang.String nonManagedTxDsName;
    protected boolean dontSetNonManagedTXConnectionAutoCommitFalse;
    protected boolean setTxIsolationLevelReadCommitted;

    public void <init>()
    {
        org.quartz.impl.jdbcjobstore.JobStoreCMT r0;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreCMT;

        specialinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void <init>()>();

        r0.<org.quartz.impl.jdbcjobstore.JobStoreCMT: boolean dontSetNonManagedTXConnectionAutoCommitFalse> = 0;

        r0.<org.quartz.impl.jdbcjobstore.JobStoreCMT: boolean setTxIsolationLevelReadCommitted> = 0;

        return;
    }

    public void setNonManagedTXDataSource(java.lang.String)
    {
        org.quartz.impl.jdbcjobstore.JobStoreCMT r0;
        java.lang.String r1;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreCMT;

        r1 := @parameter0: java.lang.String;

        r0.<org.quartz.impl.jdbcjobstore.JobStoreCMT: java.lang.String nonManagedTxDsName> = r1;

        return;
    }

    public java.lang.String getNonManagedTXDataSource()
    {
        org.quartz.impl.jdbcjobstore.JobStoreCMT r0;
        java.lang.String $r1;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreCMT;

        $r1 = r0.<org.quartz.impl.jdbcjobstore.JobStoreCMT: java.lang.String nonManagedTxDsName>;

        return $r1;
    }

    public boolean isDontSetNonManagedTXConnectionAutoCommitFalse()
    {
        org.quartz.impl.jdbcjobstore.JobStoreCMT r0;
        boolean $z0;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreCMT;

        $z0 = r0.<org.quartz.impl.jdbcjobstore.JobStoreCMT: boolean dontSetNonManagedTXConnectionAutoCommitFalse>;

        return $z0;
    }

    public void setDontSetNonManagedTXConnectionAutoCommitFalse(boolean)
    {
        org.quartz.impl.jdbcjobstore.JobStoreCMT r0;
        boolean z0;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreCMT;

        z0 := @parameter0: boolean;

        r0.<org.quartz.impl.jdbcjobstore.JobStoreCMT: boolean dontSetNonManagedTXConnectionAutoCommitFalse> = z0;

        return;
    }

    public boolean isTxIsolationLevelReadCommitted()
    {
        org.quartz.impl.jdbcjobstore.JobStoreCMT r0;
        boolean $z0;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreCMT;

        $z0 = r0.<org.quartz.impl.jdbcjobstore.JobStoreCMT: boolean setTxIsolationLevelReadCommitted>;

        return $z0;
    }

    public void setTxIsolationLevelReadCommitted(boolean)
    {
        org.quartz.impl.jdbcjobstore.JobStoreCMT r0;
        boolean z0;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreCMT;

        z0 := @parameter0: boolean;

        r0.<org.quartz.impl.jdbcjobstore.JobStoreCMT: boolean setTxIsolationLevelReadCommitted> = z0;

        return;
    }

    public void initialize(org.quartz.spi.ClassLoadHelper, org.quartz.spi.SchedulerSignaler) throws org.quartz.SchedulerConfigException
    {
        org.quartz.impl.jdbcjobstore.JobStoreCMT r0;
        org.quartz.spi.ClassLoadHelper r1;
        org.quartz.spi.SchedulerSignaler r2;
        java.lang.String $r3;
        org.quartz.impl.jdbcjobstore.Semaphore $r4;
        org.slf4j.Logger $r5;
        org.quartz.SchedulerConfigException $r6;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreCMT;

        r1 := @parameter0: org.quartz.spi.ClassLoadHelper;

        r2 := @parameter1: org.quartz.spi.SchedulerSignaler;

        $r3 = r0.<org.quartz.impl.jdbcjobstore.JobStoreCMT: java.lang.String nonManagedTxDsName>;

        if $r3 != null goto label1;

        $r6 = new org.quartz.SchedulerConfigException;

        specialinvoke $r6.<org.quartz.SchedulerConfigException: void <init>(java.lang.String)>("Non-ManagedTX DataSource name not set!  If your \'org.quartz.jobStore.dataSource\' is XA, then set \'org.quartz.jobStore.nonManagedTXDataSource\' to a non-XA datasource (for the same DB).  Otherwise, you can set them to be the same.");

        throw $r6;

     label1:
        $r4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreCMT: org.quartz.impl.jdbcjobstore.Semaphore getLockHandler()>();

        if $r4 != null goto label2;

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreCMT: void setUseDBLocks(boolean)>(1);

     label2:
        specialinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void initialize(org.quartz.spi.ClassLoadHelper,org.quartz.spi.SchedulerSignaler)>(r1, r2);

        $r5 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreCMT: org.slf4j.Logger getLog()>();

        interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String)>("JobStoreCMT initialized.");

        return;
    }

    public void shutdown()
    {
        org.quartz.impl.jdbcjobstore.JobStoreCMT r0;
        org.quartz.utils.DBConnectionManager $r2;
        java.lang.String $r3;
        java.sql.SQLException $r4;
        org.slf4j.Logger $r5;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreCMT;

        specialinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void shutdown()>();

     label1:
        $r2 = staticinvoke <org.quartz.utils.DBConnectionManager: org.quartz.utils.DBConnectionManager getInstance()>();

        $r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreCMT: java.lang.String getNonManagedTXDataSource()>();

        virtualinvoke $r2.<org.quartz.utils.DBConnectionManager: void shutdown(java.lang.String)>($r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreCMT: org.slf4j.Logger getLog()>();

        interfaceinvoke $r5.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Database connection shutdown unsuccessful.", $r4);

     label4:
        return;

        catch java.sql.SQLException from label1 to label2 with label3;
    }

    protected java.sql.Connection getNonManagedTXConnection() throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreCMT r0;
        org.quartz.utils.DBConnectionManager $r1;
        java.lang.String $r2, $r6, $r9, $r14, $r17, $r19, $r28, $r31, $r33;
        boolean $z0, $z1;
        org.quartz.JobPersistenceException $r3, $r11, $r21, $r25;
        java.lang.StringBuilder $r4, $r5, $r7, $r8, $r12, $r13, $r15, $r16, $r18, $r26, $r27, $r29, $r30, $r32;
        java.sql.SQLException $r10, $r22;
        java.lang.Throwable $r20, $r24, $r34;
        org.slf4j.Logger $r23;
        java.sql.Connection r35, r38;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreCMT;

     label01:
        $r1 = staticinvoke <org.quartz.utils.DBConnectionManager: org.quartz.utils.DBConnectionManager getInstance()>();

        $r2 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreCMT: java.lang.String getNonManagedTXDataSource()>();

        r35 = virtualinvoke $r1.<org.quartz.utils.DBConnectionManager: java.sql.Connection getConnection(java.lang.String)>($r2);

     label02:
        goto label05;

     label03:
        $r10 := @caughtexception;

        $r11 = new org.quartz.JobPersistenceException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to obtain DB connection from data source \'");

        $r14 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreCMT: java.lang.String getNonManagedTXDataSource()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': ");

        $r17 = virtualinvoke $r10.<java.sql.SQLException: java.lang.String toString()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r19, $r10);

        throw $r11;

     label04:
        $r24 := @caughtexception;

        $r25 = new org.quartz.JobPersistenceException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to obtain DB connection from data source \'");

        $r28 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreCMT: java.lang.String getNonManagedTXDataSource()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': ");

        $r31 = virtualinvoke $r24.<java.lang.Throwable: java.lang.String toString()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r33, $r24);

        throw $r25;

     label05:
        if r35 != null goto label06;

        $r3 = new org.quartz.JobPersistenceException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not get connection from DataSource \'");

        $r6 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreCMT: java.lang.String getNonManagedTXDataSource()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.quartz.JobPersistenceException: void <init>(java.lang.String)>($r9);

        throw $r3;

     label06:
        r38 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreCMT: java.sql.Connection getAttributeRestoringConnection(java.sql.Connection)>(r35);

     label07:
        $z0 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreCMT: boolean isDontSetNonManagedTXConnectionAutoCommitFalse()>();

        if $z0 != 0 goto label08;

        interfaceinvoke r38.<java.sql.Connection: void setAutoCommit(boolean)>(0);

     label08:
        $z1 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreCMT: boolean isTxIsolationLevelReadCommitted()>();

        if $z1 == 0 goto label09;

        interfaceinvoke r38.<java.sql.Connection: void setTransactionIsolation(int)>(2);

     label09:
        goto label16;

     label10:
        $r22 := @caughtexception;

        $r23 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreCMT: org.slf4j.Logger getLog()>();

        interfaceinvoke $r23.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Failed to override connection auto commit/transaction isolation.", $r22);

        goto label16;

     label11:
        $r34 := @caughtexception;

     label12:
        interfaceinvoke r38.<java.sql.Connection: void close()>();

     label13:
        goto label15;

     label14:
        $r20 := @caughtexception;

     label15:
        $r21 = new org.quartz.JobPersistenceException;

        specialinvoke $r21.<org.quartz.JobPersistenceException: void <init>(java.lang.String,java.lang.Throwable)>("Failure setting up connection.", $r34);

        throw $r21;

     label16:
        return r38;

        catch java.sql.SQLException from label01 to label02 with label03;
        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.sql.SQLException from label07 to label09 with label10;
        catch java.lang.Throwable from label07 to label09 with label11;
        catch java.lang.Throwable from label12 to label13 with label14;
    }

    protected java.lang.Object executeInLock(java.lang.String, org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.JobStoreCMT r0;
        java.lang.String r1;
        org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback r2;
        java.lang.Object r3;
        org.quartz.impl.jdbcjobstore.Semaphore $r7, $r8;
        boolean $z0, z1;
        java.lang.Throwable $r9, $r10, $r11;
        java.sql.Connection r12;

        r0 := @this: org.quartz.impl.jdbcjobstore.JobStoreCMT;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback;

        z1 = 0;

        r12 = null;

     label01:
        if r1 == null goto label03;

        $r7 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreCMT: org.quartz.impl.jdbcjobstore.Semaphore getLockHandler()>();

        $z0 = interfaceinvoke $r7.<org.quartz.impl.jdbcjobstore.Semaphore: boolean requiresConnection()>();

        if $z0 == 0 goto label02;

        r12 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreCMT: java.sql.Connection getConnection()>();

     label02:
        $r8 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreCMT: org.quartz.impl.jdbcjobstore.Semaphore getLockHandler()>();

        z1 = interfaceinvoke $r8.<org.quartz.impl.jdbcjobstore.Semaphore: boolean obtainLock(java.sql.Connection,java.lang.String)>(r12, r1);

     label03:
        if r12 != null goto label04;

        r12 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreCMT: java.sql.Connection getConnection()>();

     label04:
        r3 = interfaceinvoke r2.<org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback: java.lang.Object execute(java.sql.Connection)>(r12);

     label05:
        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreCMT: void releaseLock(java.lang.String,boolean)>(r1, z1);

     label06:
        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreCMT: void cleanupConnection(java.sql.Connection)>(r12);

        goto label09;

     label07:
        $r9 := @caughtexception;

     label08:
        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreCMT: void cleanupConnection(java.sql.Connection)>(r12);

        throw $r9;

     label09:
        return r3;

     label10:
        $r10 := @caughtexception;

     label11:
        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreCMT: void releaseLock(java.lang.String,boolean)>(r1, z1);

     label12:
        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreCMT: void cleanupConnection(java.sql.Connection)>(r12);

        goto label15;

     label13:
        $r11 := @caughtexception;

     label14:
        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.JobStoreCMT: void cleanupConnection(java.sql.Connection)>(r12);

        throw $r11;

     label15:
        throw $r10;

        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.Throwable from label01 to label05 with label10;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
        catch java.lang.Throwable from label10 to label11 with label10;
    }
}
