public class org.quartz.simpl.PropertySettingJobFactoryTest extends junit.framework.TestCase
{
    private org.quartz.simpl.PropertySettingJobFactory factory;

    public void <init>()
    {
        org.quartz.simpl.PropertySettingJobFactoryTest r0;

        r0 := @this: org.quartz.simpl.PropertySettingJobFactoryTest;

        specialinvoke r0.<junit.framework.TestCase: void <init>()>();

        return;
    }

    protected void setUp() throws java.lang.Exception
    {
        org.quartz.simpl.PropertySettingJobFactoryTest r0;
        org.quartz.simpl.PropertySettingJobFactory $r1, $r2;

        r0 := @this: org.quartz.simpl.PropertySettingJobFactoryTest;

        $r1 = new org.quartz.simpl.PropertySettingJobFactory;

        specialinvoke $r1.<org.quartz.simpl.PropertySettingJobFactory: void <init>()>();

        r0.<org.quartz.simpl.PropertySettingJobFactoryTest: org.quartz.simpl.PropertySettingJobFactory factory> = $r1;

        $r2 = r0.<org.quartz.simpl.PropertySettingJobFactoryTest: org.quartz.simpl.PropertySettingJobFactory factory>;

        virtualinvoke $r2.<org.quartz.simpl.PropertySettingJobFactory: void setThrowIfPropertyNotFound(boolean)>(1);

        return;
    }

    public void testSetBeanPropsPrimatives() throws org.quartz.SchedulerException
    {
        org.quartz.simpl.PropertySettingJobFactoryTest r0;
        org.quartz.JobDataMap $r3;
        java.lang.Integer $r4;
        java.lang.Long $r6;
        java.lang.Float $r8;
        java.lang.Double $r10;
        java.lang.Boolean $r12;
        java.lang.Short $r14;
        java.lang.Byte $r16;
        java.util.Map $r18, $r23;
        org.quartz.simpl.PropertySettingJobFactoryTest$TestBean $r20;
        org.quartz.simpl.PropertySettingJobFactory $r21;
        int $i0;
        long $l1;
        float $f0;
        double $d0, $d1;
        boolean $z0, $z1;
        short $s2;
        char $c3;
        byte $b4;
        java.lang.String $r22;

        r0 := @this: org.quartz.simpl.PropertySettingJobFactoryTest;

        $r3 = new org.quartz.JobDataMap;

        specialinvoke $r3.<org.quartz.JobDataMap: void <init>()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke $r3.<org.quartz.JobDataMap: java.lang.Object put(java.lang.String,java.lang.Object)>("intValue", $r4);

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(2L);

        virtualinvoke $r3.<org.quartz.JobDataMap: java.lang.Object put(java.lang.String,java.lang.Object)>("longValue", $r6);

        $r8 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(3.0F);

        virtualinvoke $r3.<org.quartz.JobDataMap: java.lang.Object put(java.lang.String,java.lang.Object)>("floatValue", $r8);

        $r10 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(4.0);

        virtualinvoke $r3.<org.quartz.JobDataMap: java.lang.Object put(java.lang.String,java.lang.Object)>("doubleValue", $r10);

        $r12 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        virtualinvoke $r3.<org.quartz.JobDataMap: java.lang.Object put(java.lang.String,java.lang.Object)>("booleanValue", $r12);

        $r14 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(5);

        virtualinvoke $r3.<org.quartz.JobDataMap: java.lang.Object put(java.lang.String,java.lang.Object)>("shortValue", $r14);

        virtualinvoke $r3.<org.quartz.JobDataMap: void put(java.lang.String,char)>("charValue", 97);

        $r16 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(6);

        virtualinvoke $r3.<org.quartz.JobDataMap: java.lang.Object put(java.lang.String,java.lang.Object)>("byteValue", $r16);

        virtualinvoke $r3.<org.quartz.JobDataMap: void put(java.lang.String,java.lang.String)>("stringValue", "S1");

        $r18 = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>("A", "B");

        virtualinvoke $r3.<org.quartz.JobDataMap: java.lang.Object put(java.lang.String,java.lang.Object)>("mapValue", $r18);

        $r20 = new org.quartz.simpl.PropertySettingJobFactoryTest$TestBean;

        specialinvoke $r20.<org.quartz.simpl.PropertySettingJobFactoryTest$TestBean: void <init>(org.quartz.simpl.PropertySettingJobFactoryTest$1)>(null);

        $r21 = r0.<org.quartz.simpl.PropertySettingJobFactoryTest: org.quartz.simpl.PropertySettingJobFactory factory>;

        virtualinvoke $r21.<org.quartz.simpl.PropertySettingJobFactory: void setBeanProps(java.lang.Object,org.quartz.JobDataMap)>($r20, $r3);

        $i0 = virtualinvoke $r20.<org.quartz.simpl.PropertySettingJobFactoryTest$TestBean: int getIntValue()>();

        staticinvoke <org.quartz.simpl.PropertySettingJobFactoryTest: void assertEquals(int,int)>(1, $i0);

        $l1 = virtualinvoke $r20.<org.quartz.simpl.PropertySettingJobFactoryTest$TestBean: long getLongValue()>();

        staticinvoke <org.quartz.simpl.PropertySettingJobFactoryTest: void assertEquals(long,long)>(2L, $l1);

        $f0 = virtualinvoke $r20.<org.quartz.simpl.PropertySettingJobFactoryTest$TestBean: float getFloatValue()>();

        $d0 = (double) $f0;

        staticinvoke <org.quartz.simpl.PropertySettingJobFactoryTest: void assertEquals(double,double,double)>(3.0, $d0, 1.0E-4);

        $d1 = virtualinvoke $r20.<org.quartz.simpl.PropertySettingJobFactoryTest$TestBean: double getDoubleValue()>();

        staticinvoke <org.quartz.simpl.PropertySettingJobFactoryTest: void assertEquals(double,double,double)>(4.0, $d1, 1.0E-4);

        $z0 = virtualinvoke $r20.<org.quartz.simpl.PropertySettingJobFactoryTest$TestBean: boolean getBooleanValue()>();

        staticinvoke <org.quartz.simpl.PropertySettingJobFactoryTest: void assertTrue(boolean)>($z0);

        $s2 = virtualinvoke $r20.<org.quartz.simpl.PropertySettingJobFactoryTest$TestBean: short getShortValue()>();

        staticinvoke <org.quartz.simpl.PropertySettingJobFactoryTest: void assertEquals(int,int)>(5, $s2);

        $c3 = virtualinvoke $r20.<org.quartz.simpl.PropertySettingJobFactoryTest$TestBean: char getCharValue()>();

        staticinvoke <org.quartz.simpl.PropertySettingJobFactoryTest: void assertEquals(char,char)>(97, $c3);

        $b4 = virtualinvoke $r20.<org.quartz.simpl.PropertySettingJobFactoryTest$TestBean: byte getByteValue()>();

        staticinvoke <org.quartz.simpl.PropertySettingJobFactoryTest: void assertEquals(byte,byte)>(6, $b4);

        $r22 = virtualinvoke $r20.<org.quartz.simpl.PropertySettingJobFactoryTest$TestBean: java.lang.String getStringValue()>();

        staticinvoke <org.quartz.simpl.PropertySettingJobFactoryTest: void assertEquals(java.lang.String,java.lang.String)>("S1", $r22);

        $r23 = virtualinvoke $r20.<org.quartz.simpl.PropertySettingJobFactoryTest$TestBean: java.util.Map getMapValue()>();

        $z1 = interfaceinvoke $r23.<java.util.Map: boolean containsKey(java.lang.Object)>("A");

        staticinvoke <org.quartz.simpl.PropertySettingJobFactoryTest: void assertTrue(boolean)>($z1);

        return;
    }

    public void testSetBeanPropsUnknownProperty()
    {
        org.quartz.simpl.PropertySettingJobFactoryTest r0;
        org.quartz.JobDataMap $r3;
        java.lang.Integer $r4;
        org.quartz.simpl.PropertySettingJobFactoryTest$TestBean $r6;
        org.quartz.simpl.PropertySettingJobFactory $r7;
        org.quartz.SchedulerException $r8;

        r0 := @this: org.quartz.simpl.PropertySettingJobFactoryTest;

        $r3 = new org.quartz.JobDataMap;

        specialinvoke $r3.<org.quartz.JobDataMap: void <init>()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke $r3.<org.quartz.JobDataMap: java.lang.Object put(java.lang.String,java.lang.Object)>("bogusValue", $r4);

     label1:
        $r7 = r0.<org.quartz.simpl.PropertySettingJobFactoryTest: org.quartz.simpl.PropertySettingJobFactory factory>;

        $r6 = new org.quartz.simpl.PropertySettingJobFactoryTest$TestBean;

        specialinvoke $r6.<org.quartz.simpl.PropertySettingJobFactoryTest$TestBean: void <init>(org.quartz.simpl.PropertySettingJobFactoryTest$1)>(null);

        virtualinvoke $r7.<org.quartz.simpl.PropertySettingJobFactory: void setBeanProps(java.lang.Object,org.quartz.JobDataMap)>($r6, $r3);

        staticinvoke <org.quartz.simpl.PropertySettingJobFactoryTest: void fail()>();

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

     label4:
        return;

        catch org.quartz.SchedulerException from label1 to label2 with label3;
    }

    public void testSetBeanPropsNullPrimative()
    {
        org.quartz.simpl.PropertySettingJobFactoryTest r0;
        org.quartz.JobDataMap $r3;
        org.quartz.simpl.PropertySettingJobFactoryTest$TestBean $r4;
        org.quartz.simpl.PropertySettingJobFactory $r5;
        org.quartz.SchedulerException $r6;

        r0 := @this: org.quartz.simpl.PropertySettingJobFactoryTest;

        $r3 = new org.quartz.JobDataMap;

        specialinvoke $r3.<org.quartz.JobDataMap: void <init>()>();

        virtualinvoke $r3.<org.quartz.JobDataMap: void put(java.lang.String,java.lang.String)>("intValue", null);

     label1:
        $r5 = r0.<org.quartz.simpl.PropertySettingJobFactoryTest: org.quartz.simpl.PropertySettingJobFactory factory>;

        $r4 = new org.quartz.simpl.PropertySettingJobFactoryTest$TestBean;

        specialinvoke $r4.<org.quartz.simpl.PropertySettingJobFactoryTest$TestBean: void <init>(org.quartz.simpl.PropertySettingJobFactoryTest$1)>(null);

        virtualinvoke $r5.<org.quartz.simpl.PropertySettingJobFactory: void setBeanProps(java.lang.Object,org.quartz.JobDataMap)>($r4, $r3);

        staticinvoke <org.quartz.simpl.PropertySettingJobFactoryTest: void fail()>();

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        return;

        catch org.quartz.SchedulerException from label1 to label2 with label3;
    }

    public void testSetBeanPropsNullNonPrimative() throws org.quartz.SchedulerException
    {
        org.quartz.simpl.PropertySettingJobFactoryTest r0;
        org.quartz.JobDataMap $r3;
        org.quartz.simpl.PropertySettingJobFactoryTest$TestBean $r4;
        java.util.Map $r5, $r7;
        org.quartz.simpl.PropertySettingJobFactory $r6;

        r0 := @this: org.quartz.simpl.PropertySettingJobFactoryTest;

        $r3 = new org.quartz.JobDataMap;

        specialinvoke $r3.<org.quartz.JobDataMap: void <init>()>();

        virtualinvoke $r3.<org.quartz.JobDataMap: void put(java.lang.String,java.lang.String)>("mapValue", null);

        $r4 = new org.quartz.simpl.PropertySettingJobFactoryTest$TestBean;

        specialinvoke $r4.<org.quartz.simpl.PropertySettingJobFactoryTest$TestBean: void <init>(org.quartz.simpl.PropertySettingJobFactoryTest$1)>(null);

        $r5 = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>("A", "B");

        virtualinvoke $r4.<org.quartz.simpl.PropertySettingJobFactoryTest$TestBean: void setMapValue(java.util.Map)>($r5);

        $r6 = r0.<org.quartz.simpl.PropertySettingJobFactoryTest: org.quartz.simpl.PropertySettingJobFactory factory>;

        virtualinvoke $r6.<org.quartz.simpl.PropertySettingJobFactory: void setBeanProps(java.lang.Object,org.quartz.JobDataMap)>($r4, $r3);

        $r7 = virtualinvoke $r4.<org.quartz.simpl.PropertySettingJobFactoryTest$TestBean: java.util.Map getMapValue()>();

        staticinvoke <org.quartz.simpl.PropertySettingJobFactoryTest: void assertNull(java.lang.Object)>($r7);

        return;
    }

    public void testSetBeanPropsWrongPrimativeType()
    {
        org.quartz.simpl.PropertySettingJobFactoryTest r0;
        org.quartz.JobDataMap $r3;
        java.lang.Float $r4;
        org.quartz.simpl.PropertySettingJobFactoryTest$TestBean $r6;
        org.quartz.simpl.PropertySettingJobFactory $r7;
        org.quartz.SchedulerException $r8;

        r0 := @this: org.quartz.simpl.PropertySettingJobFactoryTest;

        $r3 = new org.quartz.JobDataMap;

        specialinvoke $r3.<org.quartz.JobDataMap: void <init>()>();

        $r4 = new java.lang.Float;

        specialinvoke $r4.<java.lang.Float: void <init>(float)>(7.0F);

        virtualinvoke $r3.<org.quartz.JobDataMap: java.lang.Object put(java.lang.String,java.lang.Object)>("intValue", $r4);

     label1:
        $r7 = r0.<org.quartz.simpl.PropertySettingJobFactoryTest: org.quartz.simpl.PropertySettingJobFactory factory>;

        $r6 = new org.quartz.simpl.PropertySettingJobFactoryTest$TestBean;

        specialinvoke $r6.<org.quartz.simpl.PropertySettingJobFactoryTest$TestBean: void <init>(org.quartz.simpl.PropertySettingJobFactoryTest$1)>(null);

        virtualinvoke $r7.<org.quartz.simpl.PropertySettingJobFactory: void setBeanProps(java.lang.Object,org.quartz.JobDataMap)>($r6, $r3);

        staticinvoke <org.quartz.simpl.PropertySettingJobFactoryTest: void fail()>();

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

     label4:
        return;

        catch org.quartz.SchedulerException from label1 to label2 with label3;
    }

    public void testSetBeanPropsWrongNonPrimativeType()
    {
        org.quartz.simpl.PropertySettingJobFactoryTest r0;
        org.quartz.JobDataMap $r3;
        java.lang.Float $r4;
        org.quartz.simpl.PropertySettingJobFactoryTest$TestBean $r6;
        org.quartz.simpl.PropertySettingJobFactory $r7;
        org.quartz.SchedulerException $r8;

        r0 := @this: org.quartz.simpl.PropertySettingJobFactoryTest;

        $r3 = new org.quartz.JobDataMap;

        specialinvoke $r3.<org.quartz.JobDataMap: void <init>()>();

        $r4 = new java.lang.Float;

        specialinvoke $r4.<java.lang.Float: void <init>(float)>(7.0F);

        virtualinvoke $r3.<org.quartz.JobDataMap: java.lang.Object put(java.lang.String,java.lang.Object)>("mapValue", $r4);

     label1:
        $r7 = r0.<org.quartz.simpl.PropertySettingJobFactoryTest: org.quartz.simpl.PropertySettingJobFactory factory>;

        $r6 = new org.quartz.simpl.PropertySettingJobFactoryTest$TestBean;

        specialinvoke $r6.<org.quartz.simpl.PropertySettingJobFactoryTest$TestBean: void <init>(org.quartz.simpl.PropertySettingJobFactoryTest$1)>(null);

        virtualinvoke $r7.<org.quartz.simpl.PropertySettingJobFactory: void setBeanProps(java.lang.Object,org.quartz.JobDataMap)>($r6, $r3);

        staticinvoke <org.quartz.simpl.PropertySettingJobFactoryTest: void fail()>();

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

     label4:
        return;

        catch org.quartz.SchedulerException from label1 to label2 with label3;
    }

    public void testSetBeanPropsCharStringTooShort()
    {
        org.quartz.simpl.PropertySettingJobFactoryTest r0;
        org.quartz.JobDataMap $r3;
        org.quartz.simpl.PropertySettingJobFactoryTest$TestBean $r4;
        org.quartz.simpl.PropertySettingJobFactory $r5;
        org.quartz.SchedulerException $r6;

        r0 := @this: org.quartz.simpl.PropertySettingJobFactoryTest;

        $r3 = new org.quartz.JobDataMap;

        specialinvoke $r3.<org.quartz.JobDataMap: void <init>()>();

        virtualinvoke $r3.<org.quartz.JobDataMap: void put(java.lang.String,java.lang.String)>("charValue", "");

     label1:
        $r5 = r0.<org.quartz.simpl.PropertySettingJobFactoryTest: org.quartz.simpl.PropertySettingJobFactory factory>;

        $r4 = new org.quartz.simpl.PropertySettingJobFactoryTest$TestBean;

        specialinvoke $r4.<org.quartz.simpl.PropertySettingJobFactoryTest$TestBean: void <init>(org.quartz.simpl.PropertySettingJobFactoryTest$1)>(null);

        virtualinvoke $r5.<org.quartz.simpl.PropertySettingJobFactory: void setBeanProps(java.lang.Object,org.quartz.JobDataMap)>($r4, $r3);

        staticinvoke <org.quartz.simpl.PropertySettingJobFactoryTest: void fail()>();

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        return;

        catch org.quartz.SchedulerException from label1 to label2 with label3;
    }

    public void testSetBeanPropsCharStringTooLong()
    {
        org.quartz.simpl.PropertySettingJobFactoryTest r0;
        org.quartz.JobDataMap $r3;
        org.quartz.simpl.PropertySettingJobFactoryTest$TestBean $r4;
        org.quartz.simpl.PropertySettingJobFactory $r5;
        org.quartz.SchedulerException $r6;

        r0 := @this: org.quartz.simpl.PropertySettingJobFactoryTest;

        $r3 = new org.quartz.JobDataMap;

        specialinvoke $r3.<org.quartz.JobDataMap: void <init>()>();

        virtualinvoke $r3.<org.quartz.JobDataMap: void put(java.lang.String,java.lang.String)>("charValue", "abba");

     label1:
        $r5 = r0.<org.quartz.simpl.PropertySettingJobFactoryTest: org.quartz.simpl.PropertySettingJobFactory factory>;

        $r4 = new org.quartz.simpl.PropertySettingJobFactoryTest$TestBean;

        specialinvoke $r4.<org.quartz.simpl.PropertySettingJobFactoryTest$TestBean: void <init>(org.quartz.simpl.PropertySettingJobFactoryTest$1)>(null);

        virtualinvoke $r5.<org.quartz.simpl.PropertySettingJobFactory: void setBeanProps(java.lang.Object,org.quartz.JobDataMap)>($r4, $r3);

        staticinvoke <org.quartz.simpl.PropertySettingJobFactoryTest: void fail()>();

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        return;

        catch org.quartz.SchedulerException from label1 to label2 with label3;
    }

    public void testSetBeanPropsFromStrings() throws org.quartz.SchedulerException
    {
        org.quartz.simpl.PropertySettingJobFactoryTest r0;
        org.quartz.JobDataMap $r3;
        org.quartz.simpl.PropertySettingJobFactoryTest$TestBean $r4;
        org.quartz.simpl.PropertySettingJobFactory $r5;
        int $i0;
        long $l1;
        float $f0;
        double $d0, $d1;
        boolean $z0;
        short $s2;
        char $c3;
        byte $b4;

        r0 := @this: org.quartz.simpl.PropertySettingJobFactoryTest;

        $r3 = new org.quartz.JobDataMap;

        specialinvoke $r3.<org.quartz.JobDataMap: void <init>()>();

        virtualinvoke $r3.<org.quartz.JobDataMap: void put(java.lang.String,java.lang.String)>("intValue", "1");

        virtualinvoke $r3.<org.quartz.JobDataMap: void put(java.lang.String,java.lang.String)>("longValue", "2");

        virtualinvoke $r3.<org.quartz.JobDataMap: void put(java.lang.String,java.lang.String)>("floatValue", "3.0");

        virtualinvoke $r3.<org.quartz.JobDataMap: void put(java.lang.String,java.lang.String)>("doubleValue", "4.0");

        virtualinvoke $r3.<org.quartz.JobDataMap: void put(java.lang.String,java.lang.String)>("booleanValue", "true");

        virtualinvoke $r3.<org.quartz.JobDataMap: void put(java.lang.String,java.lang.String)>("shortValue", "5");

        virtualinvoke $r3.<org.quartz.JobDataMap: void put(java.lang.String,java.lang.String)>("charValue", "a");

        virtualinvoke $r3.<org.quartz.JobDataMap: void put(java.lang.String,java.lang.String)>("byteValue", "6");

        $r4 = new org.quartz.simpl.PropertySettingJobFactoryTest$TestBean;

        specialinvoke $r4.<org.quartz.simpl.PropertySettingJobFactoryTest$TestBean: void <init>(org.quartz.simpl.PropertySettingJobFactoryTest$1)>(null);

        $r5 = r0.<org.quartz.simpl.PropertySettingJobFactoryTest: org.quartz.simpl.PropertySettingJobFactory factory>;

        virtualinvoke $r5.<org.quartz.simpl.PropertySettingJobFactory: void setBeanProps(java.lang.Object,org.quartz.JobDataMap)>($r4, $r3);

        $i0 = virtualinvoke $r4.<org.quartz.simpl.PropertySettingJobFactoryTest$TestBean: int getIntValue()>();

        staticinvoke <org.quartz.simpl.PropertySettingJobFactoryTest: void assertEquals(int,int)>(1, $i0);

        $l1 = virtualinvoke $r4.<org.quartz.simpl.PropertySettingJobFactoryTest$TestBean: long getLongValue()>();

        staticinvoke <org.quartz.simpl.PropertySettingJobFactoryTest: void assertEquals(long,long)>(2L, $l1);

        $f0 = virtualinvoke $r4.<org.quartz.simpl.PropertySettingJobFactoryTest$TestBean: float getFloatValue()>();

        $d0 = (double) $f0;

        staticinvoke <org.quartz.simpl.PropertySettingJobFactoryTest: void assertEquals(double,double,double)>(3.0, $d0, 1.0E-4);

        $d1 = virtualinvoke $r4.<org.quartz.simpl.PropertySettingJobFactoryTest$TestBean: double getDoubleValue()>();

        staticinvoke <org.quartz.simpl.PropertySettingJobFactoryTest: void assertEquals(double,double,double)>(4.0, $d1, 1.0E-4);

        $z0 = virtualinvoke $r4.<org.quartz.simpl.PropertySettingJobFactoryTest$TestBean: boolean getBooleanValue()>();

        staticinvoke <org.quartz.simpl.PropertySettingJobFactoryTest: void assertEquals(boolean,boolean)>(1, $z0);

        $s2 = virtualinvoke $r4.<org.quartz.simpl.PropertySettingJobFactoryTest$TestBean: short getShortValue()>();

        staticinvoke <org.quartz.simpl.PropertySettingJobFactoryTest: void assertEquals(int,int)>(5, $s2);

        $c3 = virtualinvoke $r4.<org.quartz.simpl.PropertySettingJobFactoryTest$TestBean: char getCharValue()>();

        staticinvoke <org.quartz.simpl.PropertySettingJobFactoryTest: void assertEquals(char,char)>(97, $c3);

        $b4 = virtualinvoke $r4.<org.quartz.simpl.PropertySettingJobFactoryTest$TestBean: byte getByteValue()>();

        staticinvoke <org.quartz.simpl.PropertySettingJobFactoryTest: void assertEquals(byte,byte)>(6, $b4);

        return;
    }
}
