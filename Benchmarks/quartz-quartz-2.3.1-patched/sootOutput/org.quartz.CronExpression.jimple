public final class org.quartz.CronExpression extends java.lang.Object implements java.io.Serializable, java.lang.Cloneable
{
    private static final long serialVersionUID;
    protected static final int SECOND;
    protected static final int MINUTE;
    protected static final int HOUR;
    protected static final int DAY_OF_MONTH;
    protected static final int MONTH;
    protected static final int DAY_OF_WEEK;
    protected static final int YEAR;
    protected static final int ALL_SPEC_INT;
    protected static final int NO_SPEC_INT;
    protected static final java.lang.Integer ALL_SPEC;
    protected static final java.lang.Integer NO_SPEC;
    protected static final java.util.Map monthMap;
    protected static final java.util.Map dayMap;
    private final java.lang.String cronExpression;
    private java.util.TimeZone timeZone;
    protected transient java.util.TreeSet seconds;
    protected transient java.util.TreeSet minutes;
    protected transient java.util.TreeSet hours;
    protected transient java.util.TreeSet daysOfMonth;
    protected transient java.util.TreeSet months;
    protected transient java.util.TreeSet daysOfWeek;
    protected transient java.util.TreeSet years;
    protected transient boolean lastdayOfWeek;
    protected transient int nthdayOfWeek;
    protected transient boolean lastdayOfMonth;
    protected transient boolean nearestWeekday;
    protected transient int lastdayOffset;
    protected transient boolean expressionParsed;
    public static final int MAX_YEAR;

    public void <init>(java.lang.String) throws java.text.ParseException
    {
        org.quartz.CronExpression r0;
        java.lang.String r1, $r3, $r4;
        java.util.Locale $r2;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.quartz.CronExpression;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.quartz.CronExpression: java.util.TimeZone timeZone> = null;

        r0.<org.quartz.CronExpression: boolean lastdayOfWeek> = 0;

        r0.<org.quartz.CronExpression: int nthdayOfWeek> = 0;

        r0.<org.quartz.CronExpression: boolean lastdayOfMonth> = 0;

        r0.<org.quartz.CronExpression: boolean nearestWeekday> = 0;

        r0.<org.quartz.CronExpression: int lastdayOffset> = 0;

        r0.<org.quartz.CronExpression: boolean expressionParsed> = 0;

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cronExpression cannot be null");

        throw $r5;

     label1:
        $r2 = <java.util.Locale: java.util.Locale US>;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r2);

        r0.<org.quartz.CronExpression: java.lang.String cronExpression> = $r3;

        $r4 = r0.<org.quartz.CronExpression: java.lang.String cronExpression>;

        virtualinvoke r0.<org.quartz.CronExpression: void buildExpression(java.lang.String)>($r4);

        return;
    }

    public void <init>(org.quartz.CronExpression)
    {
        org.quartz.CronExpression r0, r1;
        java.lang.String $r3, $r4;
        java.util.TimeZone $r5, $r6, $r8;
        java.lang.Object $r7;
        java.text.ParseException $r9;
        java.lang.AssertionError $r10;

        r0 := @this: org.quartz.CronExpression;

        r1 := @parameter0: org.quartz.CronExpression;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.quartz.CronExpression: java.util.TimeZone timeZone> = null;

        r0.<org.quartz.CronExpression: boolean lastdayOfWeek> = 0;

        r0.<org.quartz.CronExpression: int nthdayOfWeek> = 0;

        r0.<org.quartz.CronExpression: boolean lastdayOfMonth> = 0;

        r0.<org.quartz.CronExpression: boolean nearestWeekday> = 0;

        r0.<org.quartz.CronExpression: int lastdayOffset> = 0;

        r0.<org.quartz.CronExpression: boolean expressionParsed> = 0;

        $r3 = virtualinvoke r1.<org.quartz.CronExpression: java.lang.String getCronExpression()>();

        r0.<org.quartz.CronExpression: java.lang.String cronExpression> = $r3;

     label1:
        $r4 = r0.<org.quartz.CronExpression: java.lang.String cronExpression>;

        virtualinvoke r0.<org.quartz.CronExpression: void buildExpression(java.lang.String)>($r4);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label4:
        $r5 = virtualinvoke r1.<org.quartz.CronExpression: java.util.TimeZone getTimeZone()>();

        if $r5 == null goto label5;

        $r6 = virtualinvoke r1.<org.quartz.CronExpression: java.util.TimeZone getTimeZone()>();

        $r7 = virtualinvoke $r6.<java.util.TimeZone: java.lang.Object clone()>();

        $r8 = (java.util.TimeZone) $r7;

        virtualinvoke r0.<org.quartz.CronExpression: void setTimeZone(java.util.TimeZone)>($r8);

     label5:
        return;

        catch java.text.ParseException from label1 to label2 with label3;
    }

    public boolean isSatisfiedBy(java.util.Date)
    {
        org.quartz.CronExpression r0;
        java.util.Date r1, r3, r4, $r6;
        java.util.Calendar r2;
        java.util.TimeZone $r5;
        boolean $z0, $z1;

        r0 := @this: org.quartz.CronExpression;

        r1 := @parameter0: java.util.Date;

        $r5 = virtualinvoke r0.<org.quartz.CronExpression: java.util.TimeZone getTimeZone()>();

        r2 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>($r5);

        virtualinvoke r2.<java.util.Calendar: void setTime(java.util.Date)>(r1);

        virtualinvoke r2.<java.util.Calendar: void set(int,int)>(14, 0);

        r3 = virtualinvoke r2.<java.util.Calendar: java.util.Date getTime()>();

        virtualinvoke r2.<java.util.Calendar: void add(int,int)>(13, -1);

        $r6 = virtualinvoke r2.<java.util.Calendar: java.util.Date getTime()>();

        r4 = virtualinvoke r0.<org.quartz.CronExpression: java.util.Date getTimeAfter(java.util.Date)>($r6);

        if r4 == null goto label1;

        $z0 = virtualinvoke r4.<java.util.Date: boolean equals(java.lang.Object)>(r3);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public java.util.Date getNextValidTimeAfter(java.util.Date)
    {
        org.quartz.CronExpression r0;
        java.util.Date r1, $r2;

        r0 := @this: org.quartz.CronExpression;

        r1 := @parameter0: java.util.Date;

        $r2 = virtualinvoke r0.<org.quartz.CronExpression: java.util.Date getTimeAfter(java.util.Date)>(r1);

        return $r2;
    }

    public java.util.Date getNextInvalidTimeAfter(java.util.Date)
    {
        org.quartz.CronExpression r0;
        java.util.Date r1, r3, $r5, r6;
        java.util.Calendar r2;
        java.util.TimeZone $r4;
        long $l0, $l1, $l2, $l3, l5;
        byte $b4, $b6;

        r0 := @this: org.quartz.CronExpression;

        r1 := @parameter0: java.util.Date;

        l5 = 1000L;

        $r4 = virtualinvoke r0.<org.quartz.CronExpression: java.util.TimeZone getTimeZone()>();

        r2 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>($r4);

        virtualinvoke r2.<java.util.Calendar: void setTime(java.util.Date)>(r1);

        virtualinvoke r2.<java.util.Calendar: void set(int,int)>(14, 0);

        r6 = virtualinvoke r2.<java.util.Calendar: java.util.Date getTime()>();

     label1:
        $b6 = l5 cmp 1000L;

        if $b6 != 0 goto label3;

        r3 = virtualinvoke r0.<org.quartz.CronExpression: java.util.Date getTimeAfter(java.util.Date)>(r6);

        if r3 != null goto label2;

        goto label3;

     label2:
        $l2 = virtualinvoke r3.<java.util.Date: long getTime()>();

        $l3 = virtualinvoke r6.<java.util.Date: long getTime()>();

        l5 = $l2 - $l3;

        $b4 = l5 cmp 1000L;

        if $b4 != 0 goto label1;

        r6 = r3;

        goto label1;

     label3:
        $r5 = new java.util.Date;

        $l0 = virtualinvoke r6.<java.util.Date: long getTime()>();

        $l1 = $l0 + 1000L;

        specialinvoke $r5.<java.util.Date: void <init>(long)>($l1);

        return $r5;
    }

    public java.util.TimeZone getTimeZone()
    {
        org.quartz.CronExpression r0;
        java.util.TimeZone $r1, $r2, $r3;

        r0 := @this: org.quartz.CronExpression;

        $r1 = r0.<org.quartz.CronExpression: java.util.TimeZone timeZone>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();

        r0.<org.quartz.CronExpression: java.util.TimeZone timeZone> = $r3;

     label1:
        $r2 = r0.<org.quartz.CronExpression: java.util.TimeZone timeZone>;

        return $r2;
    }

    public void setTimeZone(java.util.TimeZone)
    {
        org.quartz.CronExpression r0;
        java.util.TimeZone r1;

        r0 := @this: org.quartz.CronExpression;

        r1 := @parameter0: java.util.TimeZone;

        r0.<org.quartz.CronExpression: java.util.TimeZone timeZone> = r1;

        return;
    }

    public java.lang.String toString()
    {
        org.quartz.CronExpression r0;
        java.lang.String $r1;

        r0 := @this: org.quartz.CronExpression;

        $r1 = r0.<org.quartz.CronExpression: java.lang.String cronExpression>;

        return $r1;
    }

    public static boolean isValidExpression(java.lang.String)
    {
        java.lang.String r0;
        org.quartz.CronExpression $r2;
        java.text.ParseException $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r2 = new org.quartz.CronExpression;

        specialinvoke $r2.<org.quartz.CronExpression: void <init>(java.lang.String)>(r0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        return 0;

     label4:
        return 1;

        catch java.text.ParseException from label1 to label2 with label3;
    }

    public static void validateExpression(java.lang.String) throws java.text.ParseException
    {
        java.lang.String r0;
        org.quartz.CronExpression $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = new org.quartz.CronExpression;

        specialinvoke $r1.<org.quartz.CronExpression: void <init>(java.lang.String)>(r0);

        return;
    }

    protected void buildExpression(java.lang.String) throws java.text.ParseException
    {
        org.quartz.CronExpression r0;
        java.lang.String r1, $r15, $r30, $r33, r35, r38;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8, $z9;
        java.util.TreeSet $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r19, $r20, $r21, $r22, $r23, $r24, $r25, r39, r40;
        java.util.StringTokenizer $r10, $r36;
        java.lang.Integer $r11, $r12;
        java.text.ParseException $r13, $r14, $r16, $r17, $r18, $r27, $r34;
        int $i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11;
        java.lang.Exception $r26;
        java.lang.StringBuilder $r28, $r29, $r31, $r32;

        r0 := @this: org.quartz.CronExpression;

        r1 := @parameter0: java.lang.String;

        r0.<org.quartz.CronExpression: boolean expressionParsed> = 1;

     label01:
        $r3 = r0.<org.quartz.CronExpression: java.util.TreeSet seconds>;

        if $r3 != null goto label02;

        $r25 = new java.util.TreeSet;

        specialinvoke $r25.<java.util.TreeSet: void <init>()>();

        r0.<org.quartz.CronExpression: java.util.TreeSet seconds> = $r25;

     label02:
        $r4 = r0.<org.quartz.CronExpression: java.util.TreeSet minutes>;

        if $r4 != null goto label03;

        $r24 = new java.util.TreeSet;

        specialinvoke $r24.<java.util.TreeSet: void <init>()>();

        r0.<org.quartz.CronExpression: java.util.TreeSet minutes> = $r24;

     label03:
        $r5 = r0.<org.quartz.CronExpression: java.util.TreeSet hours>;

        if $r5 != null goto label04;

        $r23 = new java.util.TreeSet;

        specialinvoke $r23.<java.util.TreeSet: void <init>()>();

        r0.<org.quartz.CronExpression: java.util.TreeSet hours> = $r23;

     label04:
        $r6 = r0.<org.quartz.CronExpression: java.util.TreeSet daysOfMonth>;

        if $r6 != null goto label05;

        $r22 = new java.util.TreeSet;

        specialinvoke $r22.<java.util.TreeSet: void <init>()>();

        r0.<org.quartz.CronExpression: java.util.TreeSet daysOfMonth> = $r22;

     label05:
        $r7 = r0.<org.quartz.CronExpression: java.util.TreeSet months>;

        if $r7 != null goto label06;

        $r21 = new java.util.TreeSet;

        specialinvoke $r21.<java.util.TreeSet: void <init>()>();

        r0.<org.quartz.CronExpression: java.util.TreeSet months> = $r21;

     label06:
        $r8 = r0.<org.quartz.CronExpression: java.util.TreeSet daysOfWeek>;

        if $r8 != null goto label07;

        $r20 = new java.util.TreeSet;

        specialinvoke $r20.<java.util.TreeSet: void <init>()>();

        r0.<org.quartz.CronExpression: java.util.TreeSet daysOfWeek> = $r20;

     label07:
        $r9 = r0.<org.quartz.CronExpression: java.util.TreeSet years>;

        if $r9 != null goto label08;

        $r19 = new java.util.TreeSet;

        specialinvoke $r19.<java.util.TreeSet: void <init>()>();

        r0.<org.quartz.CronExpression: java.util.TreeSet years> = $r19;

     label08:
        i11 = 0;

        $r10 = new java.util.StringTokenizer;

        specialinvoke $r10.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String,boolean)>(r1, " \t", 0);

     label09:
        $z5 = virtualinvoke $r10.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z5 == 0 goto label15;

        if i11 > 6 goto label15;

        $r15 = virtualinvoke $r10.<java.util.StringTokenizer: java.lang.String nextToken()>();

        r35 = virtualinvoke $r15.<java.lang.String: java.lang.String trim()>();

        if i11 != 3 goto label10;

        $i9 = virtualinvoke r35.<java.lang.String: int indexOf(int)>(76);

        if $i9 == -1 goto label10;

        $i10 = virtualinvoke r35.<java.lang.String: int length()>();

        if $i10 <= 1 goto label10;

        $z4 = virtualinvoke r35.<java.lang.String: boolean contains(java.lang.CharSequence)>(",");

        if $z4 == 0 goto label10;

        $r18 = new java.text.ParseException;

        specialinvoke $r18.<java.text.ParseException: void <init>(java.lang.String,int)>("Support for specifying \'L\' and \'LW\' with other days of the month is not implemented", -1);

        throw $r18;

     label10:
        if i11 != 5 goto label11;

        $i7 = virtualinvoke r35.<java.lang.String: int indexOf(int)>(76);

        if $i7 == -1 goto label11;

        $i8 = virtualinvoke r35.<java.lang.String: int length()>();

        if $i8 <= 1 goto label11;

        $z3 = virtualinvoke r35.<java.lang.String: boolean contains(java.lang.CharSequence)>(",");

        if $z3 == 0 goto label11;

        $r17 = new java.text.ParseException;

        specialinvoke $r17.<java.text.ParseException: void <init>(java.lang.String,int)>("Support for specifying \'L\' with other days of the week is not implemented", -1);

        throw $r17;

     label11:
        if i11 != 5 goto label12;

        $i3 = virtualinvoke r35.<java.lang.String: int indexOf(int)>(35);

        if $i3 == -1 goto label12;

        $i4 = virtualinvoke r35.<java.lang.String: int indexOf(int)>(35);

        $i5 = $i4 + 1;

        $i6 = virtualinvoke r35.<java.lang.String: int indexOf(int,int)>(35, $i5);

        if $i6 == -1 goto label12;

        $r16 = new java.text.ParseException;

        specialinvoke $r16.<java.text.ParseException: void <init>(java.lang.String,int)>("Support for specifying multiple \"nth\" days is not implemented.", -1);

        throw $r16;

     label12:
        $r36 = new java.util.StringTokenizer;

        specialinvoke $r36.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r35, ",");

     label13:
        $z6 = virtualinvoke $r36.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z6 == 0 goto label14;

        r38 = virtualinvoke $r36.<java.util.StringTokenizer: java.lang.String nextToken()>();

        virtualinvoke r0.<org.quartz.CronExpression: int storeExpressionVals(int,java.lang.String,int)>(0, r38, i11);

        goto label13;

     label14:
        i11 = i11 + 1;

        goto label09;

     label15:
        if i11 > 5 goto label16;

        $r14 = new java.text.ParseException;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        specialinvoke $r14.<java.text.ParseException: void <init>(java.lang.String,int)>("Unexpected end of expression.", $i1);

        throw $r14;

     label16:
        if i11 > 6 goto label17;

        virtualinvoke r0.<org.quartz.CronExpression: int storeExpressionVals(int,java.lang.String,int)>(0, "*", 6);

     label17:
        r39 = virtualinvoke r0.<org.quartz.CronExpression: java.util.TreeSet getSet(int)>(5);

        r40 = virtualinvoke r0.<org.quartz.CronExpression: java.util.TreeSet getSet(int)>(3);

        $r11 = <org.quartz.CronExpression: java.lang.Integer NO_SPEC>;

        $z1 = virtualinvoke r40.<java.util.TreeSet: boolean contains(java.lang.Object)>($r11);

        if $z1 != 0 goto label18;

        $z7 = 1;

        goto label19;

     label18:
        $z7 = 0;

     label19:
        z8 = $z7;

        $r12 = <org.quartz.CronExpression: java.lang.Integer NO_SPEC>;

        $z2 = virtualinvoke r39.<java.util.TreeSet: boolean contains(java.lang.Object)>($r12);

        if $z2 != 0 goto label20;

        $z9 = 1;

        goto label21;

     label20:
        $z9 = 0;

     label21:
        z0 = $z9;

        if z8 == 0 goto label22;

        if $z9 == 0 goto label24;

     label22:
        if z0 == 0 goto label23;

        if z8 == 0 goto label24;

     label23:
        $r13 = new java.text.ParseException;

        specialinvoke $r13.<java.text.ParseException: void <init>(java.lang.String,int)>("Support for specifying both a day-of-week AND a day-of-month parameter is not implemented.", 0);

        throw $r13;

     label24:
        goto label27;

     label25:
        $r34 := @caughtexception;

        throw $r34;

     label26:
        $r26 := @caughtexception;

        $r27 = new java.text.ParseException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal cron expression format (");

        $r30 = virtualinvoke $r26.<java.lang.Exception: java.lang.String toString()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.text.ParseException: void <init>(java.lang.String,int)>($r33, 0);

        throw $r27;

     label27:
        return;

        catch java.text.ParseException from label01 to label24 with label25;
        catch java.lang.Exception from label01 to label24 with label26;
    }

    protected int storeExpressionVals(int, java.lang.String, int) throws java.text.ParseException
    {
        org.quartz.CronExpression r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i8, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i23, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, i42, i45, i46, i49, i50, i52, i53, i54, i57, i58, i60;
        java.lang.String r1, $r8, $r9, $r20, $r26, $r27, $r34, $r40, $r46, $r52, r55, r56, r57;
        java.text.ParseException $r3, $r4, $r10, $r14, $r15, $r16, $r21, $r29, $r35, $r41, $r47, $r54, $r58;
        char $c7, $c9, $c22, $c24, $c25, c43, c47, c48, c51, c55, c56, c59;
        java.lang.StringBuilder $r5, $r6, $r7, $r17, $r18, $r19, $r22, $r23, $r24, $r25, $r30, $r31, $r32, $r33, $r36, $r37, $r38, $r39, $r42, $r43, $r44, $r45, $r48, $r49, $r50, $r51;
        boolean $z0, $z1, $z2, $z3;
        java.util.TreeSet $r11;
        java.lang.Object $r12;
        java.lang.Integer $r13;
        java.lang.Exception $r28, $r53;
        byte b41;
        org.quartz.ValueSet r59, r60;

        r0 := @this: org.quartz.CronExpression;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        b41 = 0;

        i42 = virtualinvoke r0.<org.quartz.CronExpression: int skipWhiteSpace(int,java.lang.String)>(i0, r1);

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        if i42 < $i2 goto label01;

        return i42;

     label01:
        c43 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i42);

        if c43 < 65 goto label14;

        if c43 > 90 goto label14;

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("L");

        if $z1 != 0 goto label14;

        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("LW");

        if $z2 != 0 goto label14;

        $z3 = virtualinvoke r1.<java.lang.String: boolean matches(java.lang.String)>("^L-[0-9]*[W]?");

        if $z3 != 0 goto label14;

        $i26 = i42 + 3;

        r55 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i42, $i26);

        i45 = -1;

        if i1 != 4 goto label03;

        $i35 = virtualinvoke r0.<org.quartz.CronExpression: int getMonthNumber(java.lang.String)>(r55);

        i46 = $i35 + 1;

        if i46 > 0 goto label02;

        $r47 = new java.text.ParseException;

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid Month value: \'");

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r55);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r47.<java.text.ParseException: void <init>(java.lang.String,int)>($r52, i42);

        throw $r47;

     label02:
        $i36 = virtualinvoke r1.<java.lang.String: int length()>();

        $i37 = i42 + 3;

        if $i36 <= $i37 goto label12;

        $i38 = i42 + 3;

        c47 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i38);

        if c47 != 45 goto label12;

        i42 = i42 + 4;

        $i39 = i42 + 3;

        r56 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i42, $i39);

        $i40 = virtualinvoke r0.<org.quartz.CronExpression: int getMonthNumber(java.lang.String)>(r56);

        i45 = $i40 + 1;

        if i45 > 0 goto label12;

        $r41 = new java.text.ParseException;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid Month value: \'");

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r56);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r41.<java.text.ParseException: void <init>(java.lang.String,int)>($r46, i42);

        throw $r41;

     label03:
        if i1 != 5 goto label11;

        i46 = virtualinvoke r0.<org.quartz.CronExpression: int getDayOfWeekNumber(java.lang.String)>(r55);

        if i46 >= 0 goto label04;

        $r35 = new java.text.ParseException;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid Day-of-Week value: \'");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r55);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r35.<java.text.ParseException: void <init>(java.lang.String,int)>($r40, i42);

        throw $r35;

     label04:
        $i27 = virtualinvoke r1.<java.lang.String: int length()>();

        $i28 = i42 + 3;

        if $i27 <= $i28 goto label12;

        $i30 = i42 + 3;

        c48 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i30);

        if c48 != 45 goto label05;

        i42 = i42 + 4;

        $i34 = i42 + 3;

        r57 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i42, $i34);

        i45 = virtualinvoke r0.<org.quartz.CronExpression: int getDayOfWeekNumber(java.lang.String)>(r57);

        if i45 >= 0 goto label12;

        $r29 = new java.text.ParseException;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid Day-of-Week value: \'");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r57);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<java.text.ParseException: void <init>(java.lang.String,int)>($r34, i42);

        throw $r29;

     label05:
        if c48 != 35 goto label10;

     label06:
        i42 = i42 + 4;

        $r27 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(i42);

        $i31 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r27);

        r0.<org.quartz.CronExpression: int nthdayOfWeek> = $i31;

        $i32 = r0.<org.quartz.CronExpression: int nthdayOfWeek>;

        if $i32 < 1 goto label07;

        $i33 = r0.<org.quartz.CronExpression: int nthdayOfWeek>;

        if $i33 <= 5 goto label08;

     label07:
        $r28 = new java.lang.Exception;

        specialinvoke $r28.<java.lang.Exception: void <init>()>();

        throw $r28;

     label08:
        goto label12;

     label09:
        $r53 := @caughtexception;

        $r54 = new java.text.ParseException;

        specialinvoke $r54.<java.text.ParseException: void <init>(java.lang.String,int)>("A numeric value between 1 and 5 must follow the \'#\' option", i42);

        throw $r54;

     label10:
        if c48 != 76 goto label12;

        r0.<org.quartz.CronExpression: boolean lastdayOfWeek> = 1;

        i42 = i42 + 1;

        goto label12;

     label11:
        $r21 = new java.text.ParseException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal characters for this position: \'");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r55);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.text.ParseException: void <init>(java.lang.String,int)>($r26, i42);

        throw $r21;

     label12:
        if i45 == -1 goto label13;

        b41 = 1;

     label13:
        virtualinvoke r0.<org.quartz.CronExpression: void addToSet(int,int,int,int)>(i46, i45, b41, i1);

        $i29 = i42 + 3;

        return $i29;

     label14:
        if c43 != 63 goto label18;

        i49 = i42 + 1;

        $i20 = i49 + 1;

        $i21 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i20 >= $i21 goto label15;

        $c22 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i49);

        if $c22 == 32 goto label15;

        $i23 = i49 + 1;

        $c24 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i23);

        if $c24 == 9 goto label15;

        $r16 = new java.text.ParseException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal character after \'?\': ");

        $c25 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i49);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c25);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.text.ParseException: void <init>(java.lang.String,int)>($r20, i49);

        throw $r16;

     label15:
        if i1 == 5 goto label16;

        if i1 == 3 goto label16;

        $r15 = new java.text.ParseException;

        specialinvoke $r15.<java.text.ParseException: void <init>(java.lang.String,int)>("\'?\' can only be specified for Day-of-Month or Day-of-Week.", i49);

        throw $r15;

     label16:
        if i1 != 5 goto label17;

        $z0 = r0.<org.quartz.CronExpression: boolean lastdayOfMonth>;

        if $z0 != 0 goto label17;

        $r11 = r0.<org.quartz.CronExpression: java.util.TreeSet daysOfMonth>;

        $r12 = virtualinvoke $r11.<java.util.TreeSet: java.lang.Object last()>();

        $r13 = (java.lang.Integer) $r12;

        i50 = virtualinvoke $r13.<java.lang.Integer: int intValue()>();

        if i50 != 98 goto label17;

        $r14 = new java.text.ParseException;

        specialinvoke $r14.<java.text.ParseException: void <init>(java.lang.String,int)>("\'?\' can only be specified for Day-of-Month -OR- Day-of-Week.", i49);

        throw $r14;

     label17:
        virtualinvoke r0.<org.quartz.CronExpression: void addToSet(int,int,int,int)>(98, -1, 0, i1);

        return i49;

     label18:
        if c43 == 42 goto label19;

        if c43 != 47 goto label28;

     label19:
        if c43 != 42 goto label20;

        $i10 = i42 + 1;

        $i11 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i10 < $i11 goto label20;

        virtualinvoke r0.<org.quartz.CronExpression: void addToSet(int,int,int,int)>(99, -1, 0, i1);

        $i12 = i42 + 1;

        return $i12;

     label20:
        if c43 != 47 goto label22;

        $i4 = i42 + 1;

        $i5 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i4 >= $i5 goto label21;

        $i6 = i42 + 1;

        $c7 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i6);

        if $c7 == 32 goto label21;

        $i8 = i42 + 1;

        $c9 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i8);

        if $c9 != 9 goto label22;

     label21:
        $r58 = new java.text.ParseException;

        specialinvoke $r58.<java.text.ParseException: void <init>(java.lang.String,int)>("\'/\' must be followed by an integer.", i42);

        throw $r58;

     label22:
        if c43 != 42 goto label23;

        i42 = i42 + 1;

     label23:
        c51 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i42);

        if c51 != 47 goto label26;

        i52 = i42 + 1;

        $i3 = virtualinvoke r1.<java.lang.String: int length()>();

        if i52 < $i3 goto label24;

        $r3 = new java.text.ParseException;

        specialinvoke $r3.<java.text.ParseException: void <init>(java.lang.String,int)>("Unexpected end of string.", i52);

        throw $r3;

     label24:
        i53 = virtualinvoke r0.<org.quartz.CronExpression: int getNumericValue(java.lang.String,int)>(r1, i52);

        i42 = i52 + 1;

        if i53 <= 10 goto label25;

        i42 = i42 + 1;

     label25:
        specialinvoke r0.<org.quartz.CronExpression: void checkIncrementRange(int,int,int)>(i53, i1, i42);

        goto label27;

     label26:
        i53 = 1;

     label27:
        virtualinvoke r0.<org.quartz.CronExpression: void addToSet(int,int,int,int)>(99, -1, i53, i1);

        return i42;

     label28:
        if c43 != 76 goto label34;

        i54 = i42 + 1;

        if i1 != 3 goto label29;

        r0.<org.quartz.CronExpression: boolean lastdayOfMonth> = 1;

     label29:
        if i1 != 5 goto label30;

        virtualinvoke r0.<org.quartz.CronExpression: void addToSet(int,int,int,int)>(7, 7, 0, i1);

     label30:
        if i1 != 3 goto label33;

        $i14 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i14 <= i54 goto label33;

        c55 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i54);

        if c55 != 45 goto label32;

        $i16 = i54 + 1;

        r59 = virtualinvoke r0.<org.quartz.CronExpression: org.quartz.ValueSet getValue(int,java.lang.String,int)>(0, r1, $i16);

        $i17 = r59.<org.quartz.ValueSet: int value>;

        r0.<org.quartz.CronExpression: int lastdayOffset> = $i17;

        $i18 = r0.<org.quartz.CronExpression: int lastdayOffset>;

        if $i18 <= 30 goto label31;

        $r10 = new java.text.ParseException;

        $i19 = i54 + 1;

        specialinvoke $r10.<java.text.ParseException: void <init>(java.lang.String,int)>("Offset from last day must be <= 30", $i19);

        throw $r10;

     label31:
        i54 = r59.<org.quartz.ValueSet: int pos>;

     label32:
        $i15 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i15 <= i54 goto label33;

        c56 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i54);

        if c56 != 87 goto label33;

        r0.<org.quartz.CronExpression: boolean nearestWeekday> = 1;

        i54 = i54 + 1;

     label33:
        return i54;

     label34:
        if c43 < 48 goto label38;

        if c43 > 57 goto label38;

        $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(c43);

        i57 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r9);

        i58 = i42 + 1;

        $i13 = virtualinvoke r1.<java.lang.String: int length()>();

        if i58 < $i13 goto label35;

        virtualinvoke r0.<org.quartz.CronExpression: void addToSet(int,int,int,int)>(i57, -1, -1, i1);

        goto label37;

     label35:
        c59 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i58);

        if c59 < 48 goto label36;

        if c59 > 57 goto label36;

        r60 = virtualinvoke r0.<org.quartz.CronExpression: org.quartz.ValueSet getValue(int,java.lang.String,int)>(i57, r1, i58);

        i57 = r60.<org.quartz.ValueSet: int value>;

        i58 = r60.<org.quartz.ValueSet: int pos>;

     label36:
        i60 = virtualinvoke r0.<org.quartz.CronExpression: int checkNext(int,java.lang.String,int,int)>(i58, r1, i57, i1);

        return i60;

     label37:
        goto label39;

     label38:
        $r4 = new java.text.ParseException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected character: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c43);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.text.ParseException: void <init>(java.lang.String,int)>($r8, i42);

        throw $r4;

     label39:
        return i58;

        catch java.lang.Exception from label06 to label08 with label09;
    }

    private void checkIncrementRange(int, int, int) throws java.text.ParseException
    {
        org.quartz.CronExpression r0;
        int i0, i1, i2;
        java.text.ParseException $r1, $r6, $r11, $r16, $r21;
        java.lang.StringBuilder $r2, $r3, $r4, $r7, $r8, $r9, $r12, $r13, $r14, $r17, $r18, $r19, $r22, $r23, $r24;
        java.lang.String $r5, $r10, $r15, $r20, $r25;

        r0 := @this: org.quartz.CronExpression;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        if i0 <= 59 goto label2;

        if i1 == 0 goto label1;

        if i1 != 1 goto label2;

     label1:
        $r21 = new java.text.ParseException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Increment > 60 : ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.text.ParseException: void <init>(java.lang.String,int)>($r25, i2);

        throw $r21;

     label2:
        if i0 <= 23 goto label3;

        if i1 != 2 goto label3;

        $r16 = new java.text.ParseException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Increment > 24 : ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.text.ParseException: void <init>(java.lang.String,int)>($r20, i2);

        throw $r16;

     label3:
        if i0 <= 31 goto label4;

        if i1 != 3 goto label4;

        $r11 = new java.text.ParseException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Increment > 31 : ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.text.ParseException: void <init>(java.lang.String,int)>($r15, i2);

        throw $r11;

     label4:
        if i0 <= 7 goto label5;

        if i1 != 5 goto label5;

        $r6 = new java.text.ParseException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Increment > 7 : ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.text.ParseException: void <init>(java.lang.String,int)>($r10, i2);

        throw $r6;

     label5:
        if i0 <= 12 goto label6;

        if i1 != 4 goto label6;

        $r1 = new java.text.ParseException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Increment > 12 : ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.text.ParseException: void <init>(java.lang.String,int)>($r5, i2);

        throw $r1;

     label6:
        return;
    }

    protected int checkNext(int, java.lang.String, int, int) throws java.text.ParseException
    {
        org.quartz.CronExpression r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i9, $i11, $i12, $i14, $i15, $i16, $i17, i21, i22, i23, i24, i25, i27, i28, i29, $i31, i33, i35, i36, i38, i39, i41, i42, i44, i45, i46;
        java.lang.String r1, $r2, $r8, $r9, $r10, $r11, $r19, $r25, $r33;
        char $c8, $c10, $c13, c20, c26, c30, c34, c37, c40, c43;
        java.text.ParseException $r3, $r14, $r20, $r27, $r28, $r34, $r37, $r44;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r15, $r16, $r17, $r18, $r21, $r22, $r23, $r24, $r29, $r30, $r31, $r32;
        java.lang.Exception $r12, $r36;
        java.lang.Integer $r13, $r26, $r35;
        java.util.TreeSet r38, r39, r41;
        org.quartz.ValueSet r42, r43, r45;

        r0 := @this: org.quartz.CronExpression;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $i4 = virtualinvoke r1.<java.lang.String: int length()>();

        if i0 < $i4 goto label01;

        virtualinvoke r0.<org.quartz.CronExpression: void addToSet(int,int,int,int)>(i1, -1, -1, i2);

        return i0;

     label01:
        c20 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i0);

        if c20 != 76 goto label06;

        if i2 != 5 goto label04;

        if i1 < 1 goto label02;

        if i1 <= 7 goto label03;

     label02:
        $r34 = new java.text.ParseException;

        specialinvoke $r34.<java.text.ParseException: void <init>(java.lang.String,int)>("Day-of-Week values must be between 1 and 7", -1);

        throw $r34;

     label03:
        r0.<org.quartz.CronExpression: boolean lastdayOfWeek> = 1;

        goto label05;

     label04:
        $r28 = new java.text.ParseException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'L\' option is not valid here. (pos=");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r28.<java.text.ParseException: void <init>(java.lang.String,int)>($r33, i0);

        throw $r28;

     label05:
        r38 = virtualinvoke r0.<org.quartz.CronExpression: java.util.TreeSet getSet(int)>(i2);

        $r35 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        virtualinvoke r38.<java.util.TreeSet: boolean add(java.lang.Object)>($r35);

        i21 = i0 + 1;

        return i21;

     label06:
        if c20 != 87 goto label10;

        if i2 != 3 goto label07;

        r0.<org.quartz.CronExpression: boolean nearestWeekday> = 1;

        goto label08;

     label07:
        $r20 = new java.text.ParseException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'W\' option is not valid here. (pos=");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.text.ParseException: void <init>(java.lang.String,int)>($r25, i0);

        throw $r20;

     label08:
        if i1 <= 31 goto label09;

        $r27 = new java.text.ParseException;

        specialinvoke $r27.<java.text.ParseException: void <init>(java.lang.String,int)>("The \'W\' option does not make sense with values larger than 31 (max number of days in a month)", i0);

        throw $r27;

     label09:
        r39 = virtualinvoke r0.<org.quartz.CronExpression: java.util.TreeSet getSet(int)>(i2);

        $r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        virtualinvoke r39.<java.util.TreeSet: boolean add(java.lang.Object)>($r26);

        i22 = i0 + 1;

        return i22;

     label10:
        if c20 != 35 goto label17;

        if i2 == 5 goto label11;

        $r14 = new java.text.ParseException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'#\' option is not valid here. (pos=");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.text.ParseException: void <init>(java.lang.String,int)>($r19, i0);

        throw $r14;

     label11:
        i23 = i0 + 1;

     label12:
        $r11 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(i23);

        $i15 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r11);

        r0.<org.quartz.CronExpression: int nthdayOfWeek> = $i15;

        $i16 = r0.<org.quartz.CronExpression: int nthdayOfWeek>;

        if $i16 < 1 goto label13;

        $i17 = r0.<org.quartz.CronExpression: int nthdayOfWeek>;

        if $i17 <= 5 goto label14;

     label13:
        $r12 = new java.lang.Exception;

        specialinvoke $r12.<java.lang.Exception: void <init>()>();

        throw $r12;

     label14:
        goto label16;

     label15:
        $r36 := @caughtexception;

        $r37 = new java.text.ParseException;

        specialinvoke $r37.<java.text.ParseException: void <init>(java.lang.String,int)>("A numeric value between 1 and 5 must follow the \'#\' option", i23);

        throw $r37;

     label16:
        r41 = virtualinvoke r0.<org.quartz.CronExpression: java.util.TreeSet getSet(int)>(i2);

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        virtualinvoke r41.<java.util.TreeSet: boolean add(java.lang.Object)>($r13);

        i24 = i23 + 1;

        return i24;

     label17:
        if c20 != 45 goto label23;

        i25 = i0 + 1;

        c26 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i25);

        $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(c26);

        i27 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r9);

        i28 = i27;

        i29 = i25 + 1;

        $i12 = virtualinvoke r1.<java.lang.String: int length()>();

        if i29 < $i12 goto label18;

        virtualinvoke r0.<org.quartz.CronExpression: void addToSet(int,int,int,int)>(i1, i27, 1, i2);

        return i29;

     label18:
        c30 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i29);

        if c30 < 48 goto label19;

        if c30 > 57 goto label19;

        r42 = virtualinvoke r0.<org.quartz.CronExpression: org.quartz.ValueSet getValue(int,java.lang.String,int)>(i27, r1, i29);

        i28 = r42.<org.quartz.ValueSet: int value>;

        i29 = r42.<org.quartz.ValueSet: int pos>;

     label19:
        $i31 = virtualinvoke r1.<java.lang.String: int length()>();

        if i29 >= $i31 goto label22;

        $c13 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i29);

        if $c13 != 47 goto label22;

        i33 = i29 + 1;

        c34 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i33);

        $r10 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(c34);

        i35 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r10);

        i36 = i33 + 1;

        $i14 = virtualinvoke r1.<java.lang.String: int length()>();

        if i36 < $i14 goto label20;

        virtualinvoke r0.<org.quartz.CronExpression: void addToSet(int,int,int,int)>(i1, i28, i35, i2);

        return i36;

     label20:
        c37 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i36);

        if c37 < 48 goto label21;

        if c37 > 57 goto label21;

        r43 = virtualinvoke r0.<org.quartz.CronExpression: org.quartz.ValueSet getValue(int,java.lang.String,int)>(i35, r1, i36);

        i3 = r43.<org.quartz.ValueSet: int value>;

        virtualinvoke r0.<org.quartz.CronExpression: void addToSet(int,int,int,int)>(i1, i28, i3, i2);

        i38 = r43.<org.quartz.ValueSet: int pos>;

        return i38;

     label21:
        virtualinvoke r0.<org.quartz.CronExpression: void addToSet(int,int,int,int)>(i1, i28, i35, i2);

        return i36;

     label22:
        virtualinvoke r0.<org.quartz.CronExpression: void addToSet(int,int,int,int)>(i1, i28, 1, i2);

        return i29;

     label23:
        if c20 != 47 goto label28;

        $i5 = i0 + 1;

        $i6 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i5 >= $i6 goto label24;

        $i7 = i0 + 1;

        $c8 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i7);

        if $c8 == 32 goto label24;

        $i9 = i0 + 1;

        $c10 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i9);

        if $c10 != 9 goto label25;

     label24:
        $r44 = new java.text.ParseException;

        specialinvoke $r44.<java.text.ParseException: void <init>(java.lang.String,int)>("\'/\' must be followed by an integer.", i0);

        throw $r44;

     label25:
        i39 = i0 + 1;

        c40 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i39);

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(c40);

        i41 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

        i42 = i39 + 1;

        $i11 = virtualinvoke r1.<java.lang.String: int length()>();

        if i42 < $i11 goto label26;

        specialinvoke r0.<org.quartz.CronExpression: void checkIncrementRange(int,int,int)>(i41, i2, i42);

        virtualinvoke r0.<org.quartz.CronExpression: void addToSet(int,int,int,int)>(i1, -1, i41, i2);

        return i42;

     label26:
        c43 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i42);

        if c43 < 48 goto label27;

        if c43 > 57 goto label27;

        r45 = virtualinvoke r0.<org.quartz.CronExpression: org.quartz.ValueSet getValue(int,java.lang.String,int)>(i41, r1, i42);

        i44 = r45.<org.quartz.ValueSet: int value>;

        specialinvoke r0.<org.quartz.CronExpression: void checkIncrementRange(int,int,int)>(i44, i2, i42);

        virtualinvoke r0.<org.quartz.CronExpression: void addToSet(int,int,int,int)>(i1, -1, i44, i2);

        i45 = r45.<org.quartz.ValueSet: int pos>;

        return i45;

     label27:
        $r3 = new java.text.ParseException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected character \'");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c43);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' after \'/\'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.text.ParseException: void <init>(java.lang.String,int)>($r8, i42);

        throw $r3;

     label28:
        virtualinvoke r0.<org.quartz.CronExpression: void addToSet(int,int,int,int)>(i1, -1, 0, i2);

        i46 = i0 + 1;

        return i46;

        catch java.lang.Exception from label12 to label14 with label15;
    }

    public java.lang.String getCronExpression()
    {
        org.quartz.CronExpression r0;
        java.lang.String $r1;

        r0 := @this: org.quartz.CronExpression;

        $r1 = r0.<org.quartz.CronExpression: java.lang.String cronExpression>;

        return $r1;
    }

    public java.lang.String getExpressionSummary()
    {
        org.quartz.CronExpression r0;
        java.lang.StringBuilder $r2;
        java.util.TreeSet $r4, $r9, $r14, $r19, $r24, $r29, $r46;
        java.lang.String $r5, $r10, $r15, $r20, $r25, $r30, $r47, $r50;
        boolean $z0, $z1, $z2;
        int $i0;

        r0 := @this: org.quartz.CronExpression;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("seconds: ");

        $r4 = r0.<org.quartz.CronExpression: java.util.TreeSet seconds>;

        $r5 = virtualinvoke r0.<org.quartz.CronExpression: java.lang.String getExpressionSetSummary(java.util.Set)>($r4);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("minutes: ");

        $r9 = r0.<org.quartz.CronExpression: java.util.TreeSet minutes>;

        $r10 = virtualinvoke r0.<org.quartz.CronExpression: java.lang.String getExpressionSetSummary(java.util.Set)>($r9);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("hours: ");

        $r14 = r0.<org.quartz.CronExpression: java.util.TreeSet hours>;

        $r15 = virtualinvoke r0.<org.quartz.CronExpression: java.lang.String getExpressionSetSummary(java.util.Set)>($r14);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("daysOfMonth: ");

        $r19 = r0.<org.quartz.CronExpression: java.util.TreeSet daysOfMonth>;

        $r20 = virtualinvoke r0.<org.quartz.CronExpression: java.lang.String getExpressionSetSummary(java.util.Set)>($r19);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("months: ");

        $r24 = r0.<org.quartz.CronExpression: java.util.TreeSet months>;

        $r25 = virtualinvoke r0.<org.quartz.CronExpression: java.lang.String getExpressionSetSummary(java.util.Set)>($r24);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("daysOfWeek: ");

        $r29 = r0.<org.quartz.CronExpression: java.util.TreeSet daysOfWeek>;

        $r30 = virtualinvoke r0.<org.quartz.CronExpression: java.lang.String getExpressionSetSummary(java.util.Set)>($r29);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("lastdayOfWeek: ");

        $z0 = r0.<org.quartz.CronExpression: boolean lastdayOfWeek>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("nearestWeekday: ");

        $z1 = r0.<org.quartz.CronExpression: boolean nearestWeekday>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NthDayOfWeek: ");

        $i0 = r0.<org.quartz.CronExpression: int nthdayOfWeek>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("lastdayOfMonth: ");

        $z2 = r0.<org.quartz.CronExpression: boolean lastdayOfMonth>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("years: ");

        $r46 = r0.<org.quartz.CronExpression: java.util.TreeSet years>;

        $r47 = virtualinvoke r0.<org.quartz.CronExpression: java.lang.String getExpressionSetSummary(java.util.Set)>($r46);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r47);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r50 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r50;
    }

    protected java.lang.String getExpressionSetSummary(java.util.Set)
    {
        org.quartz.CronExpression r0;
        java.util.Set r1;
        java.util.Iterator r3;
        java.lang.Integer r4, $r6, $r7;
        java.lang.String r5, $r9;
        boolean $z0, $z1, $z2, z3;
        java.lang.StringBuilder $r8;
        java.lang.Object $r10;

        r0 := @this: org.quartz.CronExpression;

        r1 := @parameter0: java.util.Set;

        $r6 = <org.quartz.CronExpression: java.lang.Integer NO_SPEC>;

        $z0 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>($r6);

        if $z0 == 0 goto label1;

        return "?";

     label1:
        $r7 = <org.quartz.CronExpression: java.lang.Integer ALL_SPEC>;

        $z1 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>($r7);

        if $z1 == 0 goto label2;

        return "*";

     label2:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        r3 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

        z3 = 1;

     label3:
        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.Integer) $r10;

        r5 = virtualinvoke r4.<java.lang.Integer: java.lang.String toString()>();

        if z3 != 0 goto label4;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label4:
        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        z3 = 0;

        goto label3;

     label5:
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    protected java.lang.String getExpressionSetSummary(java.util.ArrayList)
    {
        org.quartz.CronExpression r0;
        java.util.ArrayList r1;
        java.util.Iterator r3;
        java.lang.Integer r4, $r6, $r7;
        java.lang.String r5, $r9;
        boolean $z0, $z1, $z2, z3;
        java.lang.StringBuilder $r8;
        java.lang.Object $r10;

        r0 := @this: org.quartz.CronExpression;

        r1 := @parameter0: java.util.ArrayList;

        $r6 = <org.quartz.CronExpression: java.lang.Integer NO_SPEC>;

        $z0 = virtualinvoke r1.<java.util.ArrayList: boolean contains(java.lang.Object)>($r6);

        if $z0 == 0 goto label1;

        return "?";

     label1:
        $r7 = <org.quartz.CronExpression: java.lang.Integer ALL_SPEC>;

        $z1 = virtualinvoke r1.<java.util.ArrayList: boolean contains(java.lang.Object)>($r7);

        if $z1 == 0 goto label2;

        return "*";

     label2:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        r3 = virtualinvoke r1.<java.util.ArrayList: java.util.Iterator iterator()>();

        z3 = 1;

     label3:
        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.Integer) $r10;

        r5 = virtualinvoke r4.<java.lang.Integer: java.lang.String toString()>();

        if z3 != 0 goto label4;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label4:
        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        z3 = 0;

        goto label3;

     label5:
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    protected int skipWhiteSpace(int, java.lang.String)
    {
        org.quartz.CronExpression r0;
        java.lang.String r1;
        int $i0, i3;
        char $c1, $c2;

        r0 := @this: org.quartz.CronExpression;

        i3 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

     label1:
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if i3 >= $i0 goto label3;

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i3);

        if $c1 == 32 goto label2;

        $c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i3);

        if $c2 != 9 goto label3;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return i3;
    }

    protected int findNextWhiteSpace(int, java.lang.String)
    {
        org.quartz.CronExpression r0;
        java.lang.String r1;
        int $i0, i3;
        char $c1, $c2;

        r0 := @this: org.quartz.CronExpression;

        i3 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

     label1:
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if i3 >= $i0 goto label3;

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i3);

        if $c1 != 32 goto label2;

        $c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i3);

        if $c2 == 9 goto label3;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return i3;
    }

    protected void addToSet(int, int, int, int) throws java.text.ParseException
    {
        org.quartz.CronExpression r0;
        int i0, i1, i2, i3, i4, i5, i7, i8;
        java.util.TreeSet r1;
        java.lang.Integer $r2, $r5, $r6, $r7, $r13;
        java.lang.IllegalArgumentException $r3, $r4;
        java.text.ParseException $r8, $r9, $r10, $r11, $r12;
        byte b6;

        r0 := @this: org.quartz.CronExpression;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i3 := @parameter2: int;

        i2 := @parameter3: int;

        r1 = virtualinvoke r0.<org.quartz.CronExpression: java.util.TreeSet getSet(int)>(i2);

        if i2 == 0 goto label01;

        if i2 != 1 goto label03;

     label01:
        if i0 < 0 goto label02;

        if i0 > 59 goto label02;

        if i1 <= 59 goto label11;

     label02:
        if i0 == 99 goto label11;

        $r8 = new java.text.ParseException;

        specialinvoke $r8.<java.text.ParseException: void <init>(java.lang.String,int)>("Minute and Second values must be between 0 and 59", -1);

        throw $r8;

     label03:
        if i2 != 2 goto label05;

        if i0 < 0 goto label04;

        if i0 > 23 goto label04;

        if i1 <= 23 goto label11;

     label04:
        if i0 == 99 goto label11;

        $r12 = new java.text.ParseException;

        specialinvoke $r12.<java.text.ParseException: void <init>(java.lang.String,int)>("Hour values must be between 0 and 23", -1);

        throw $r12;

     label05:
        if i2 != 3 goto label07;

        if i0 < 1 goto label06;

        if i0 > 31 goto label06;

        if i1 <= 31 goto label11;

     label06:
        if i0 == 99 goto label11;

        if i0 == 98 goto label11;

        $r11 = new java.text.ParseException;

        specialinvoke $r11.<java.text.ParseException: void <init>(java.lang.String,int)>("Day of month values must be between 1 and 31", -1);

        throw $r11;

     label07:
        if i2 != 4 goto label09;

        if i0 < 1 goto label08;

        if i0 > 12 goto label08;

        if i1 <= 12 goto label11;

     label08:
        if i0 == 99 goto label11;

        $r10 = new java.text.ParseException;

        specialinvoke $r10.<java.text.ParseException: void <init>(java.lang.String,int)>("Month values must be between 1 and 12", -1);

        throw $r10;

     label09:
        if i2 != 5 goto label11;

        if i0 == 0 goto label10;

        if i0 > 7 goto label10;

        if i1 <= 7 goto label11;

     label10:
        if i0 == 99 goto label11;

        if i0 == 98 goto label11;

        $r9 = new java.text.ParseException;

        specialinvoke $r9.<java.text.ParseException: void <init>(java.lang.String,int)>("Day-of-Week values must be between 1 and 7", -1);

        throw $r9;

     label11:
        if i3 == 0 goto label12;

        if i3 != -1 goto label15;

     label12:
        if i0 == 99 goto label15;

        if i0 == -1 goto label13;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke r1.<java.util.TreeSet: boolean add(java.lang.Object)>($r7);

        goto label14;

     label13:
        $r6 = <org.quartz.CronExpression: java.lang.Integer NO_SPEC>;

        virtualinvoke r1.<java.util.TreeSet: boolean add(java.lang.Object)>($r6);

     label14:
        return;

     label15:
        i4 = i0;

        i5 = i1;

        if i0 != 99 goto label16;

        if i3 > 0 goto label16;

        i3 = 1;

        $r5 = <org.quartz.CronExpression: java.lang.Integer ALL_SPEC>;

        virtualinvoke r1.<java.util.TreeSet: boolean add(java.lang.Object)>($r5);

     label16:
        if i2 == 0 goto label17;

        if i2 != 1 goto label20;

     label17:
        if i1 != -1 goto label18;

        i5 = 59;

     label18:
        if i0 == -1 goto label19;

        if i0 != 99 goto label35;

     label19:
        i4 = 0;

        goto label35;

     label20:
        if i2 != 2 goto label23;

        if i1 != -1 goto label21;

        i5 = 23;

     label21:
        if i0 == -1 goto label22;

        if i0 != 99 goto label35;

     label22:
        i4 = 0;

        goto label35;

     label23:
        if i2 != 3 goto label26;

        if i1 != -1 goto label24;

        i5 = 31;

     label24:
        if i0 == -1 goto label25;

        if i0 != 99 goto label35;

     label25:
        i4 = 1;

        goto label35;

     label26:
        if i2 != 4 goto label29;

        if i1 != -1 goto label27;

        i5 = 12;

     label27:
        if i0 == -1 goto label28;

        if i0 != 99 goto label35;

     label28:
        i4 = 1;

        goto label35;

     label29:
        if i2 != 5 goto label32;

        if i1 != -1 goto label30;

        i5 = 7;

     label30:
        if i0 == -1 goto label31;

        if i0 != 99 goto label35;

     label31:
        i4 = 1;

        goto label35;

     label32:
        if i2 != 6 goto label35;

        if i1 != -1 goto label33;

        i5 = <org.quartz.CronExpression: int MAX_YEAR>;

     label33:
        if i0 == -1 goto label34;

        if i0 != 99 goto label35;

     label34:
        i4 = 1970;

     label35:
        b6 = -1;

        if i5 >= i4 goto label45;

        tableswitch(i2)
        {
            case 0: goto label36;
            case 1: goto label37;
            case 2: goto label38;
            case 3: goto label41;
            case 4: goto label39;
            case 5: goto label40;
            case 6: goto label42;
            default: goto label43;
        };

     label36:
        b6 = 60;

        goto label44;

     label37:
        b6 = 60;

        goto label44;

     label38:
        b6 = 24;

        goto label44;

     label39:
        b6 = 12;

        goto label44;

     label40:
        b6 = 7;

        goto label44;

     label41:
        b6 = 31;

        goto label44;

     label42:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Start year must be less than stop year");

        throw $r3;

     label43:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unexpected type encountered");

        throw $r4;

     label44:
        i5 = i5 + b6;

     label45:
        i7 = i4;

     label46:
        if i7 > i5 goto label51;

        if b6 != -1 goto label47;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i7);

        virtualinvoke r1.<java.util.TreeSet: boolean add(java.lang.Object)>($r2);

        goto label50;

     label47:
        i8 = i7 % b6;

        if i8 != 0 goto label49;

        if i2 == 4 goto label48;

        if i2 == 5 goto label48;

        if i2 != 3 goto label49;

     label48:
        i8 = b6;

     label49:
        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i8);

        virtualinvoke r1.<java.util.TreeSet: boolean add(java.lang.Object)>($r13);

     label50:
        i7 = i7 + i3;

        goto label46;

     label51:
        return;
    }

    java.util.TreeSet getSet(int)
    {
        org.quartz.CronExpression r0;
        int i0;
        java.util.TreeSet $r1, $r2, $r3, $r4, $r5, $r6, $r7;

        r0 := @this: org.quartz.CronExpression;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label5;
            case 5: goto label6;
            case 6: goto label7;
            default: goto label8;
        };

     label1:
        $r7 = r0.<org.quartz.CronExpression: java.util.TreeSet seconds>;

        return $r7;

     label2:
        $r6 = r0.<org.quartz.CronExpression: java.util.TreeSet minutes>;

        return $r6;

     label3:
        $r5 = r0.<org.quartz.CronExpression: java.util.TreeSet hours>;

        return $r5;

     label4:
        $r4 = r0.<org.quartz.CronExpression: java.util.TreeSet daysOfMonth>;

        return $r4;

     label5:
        $r3 = r0.<org.quartz.CronExpression: java.util.TreeSet months>;

        return $r3;

     label6:
        $r2 = r0.<org.quartz.CronExpression: java.util.TreeSet daysOfWeek>;

        return $r2;

     label7:
        $r1 = r0.<org.quartz.CronExpression: java.util.TreeSet years>;

        return $r1;

     label8:
        return null;
    }

    protected org.quartz.ValueSet getValue(int, java.lang.String, int)
    {
        org.quartz.CronExpression r0;
        int i0, $i1, $i2, i3, $i5, $i6;
        java.lang.String r1, $r5, $r6;
        java.lang.StringBuilder $r4;
        char c4;
        org.quartz.ValueSet $r9;

        r0 := @this: org.quartz.CronExpression;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        i3 := @parameter2: int;

        c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i3);

        $r4 = new java.lang.StringBuilder;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>($r5);

     label1:
        if c4 < 48 goto label3;

        if c4 > 57 goto label3;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c4);

        i3 = i3 + 1;

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        if i3 < $i2 goto label2;

        goto label3;

     label2:
        c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i3);

        goto label1;

     label3:
        $r9 = new org.quartz.ValueSet;

        specialinvoke $r9.<org.quartz.ValueSet: void <init>()>();

        $i5 = virtualinvoke r1.<java.lang.String: int length()>();

        if i3 >= $i5 goto label4;

        $i6 = i3;

        goto label5;

     label4:
        $i6 = i3 + 1;

     label5:
        $r9.<org.quartz.ValueSet: int pos> = $i6;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r6);

        $r9.<org.quartz.ValueSet: int value> = $i1;

        return $r9;
    }

    protected int getNumericValue(java.lang.String, int)
    {
        org.quartz.CronExpression r0;
        java.lang.String r1, r2;
        int i0, i1, $i2;

        r0 := @this: org.quartz.CronExpression;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 = virtualinvoke r0.<org.quartz.CronExpression: int findNextWhiteSpace(int,java.lang.String)>(i0, r1);

        r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i0, i1);

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);

        return $i2;
    }

    protected int getMonthNumber(java.lang.String)
    {
        org.quartz.CronExpression r0;
        java.lang.String r1;
        java.lang.Integer r2;
        java.util.Map $r3;
        java.lang.Object $r4;
        int $i0;

        r0 := @this: org.quartz.CronExpression;

        r1 := @parameter0: java.lang.String;

        $r3 = <org.quartz.CronExpression: java.util.Map monthMap>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (java.lang.Integer) $r4;

        if r2 != null goto label1;

        return -1;

     label1:
        $i0 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    protected int getDayOfWeekNumber(java.lang.String)
    {
        org.quartz.CronExpression r0;
        java.lang.String r1;
        java.lang.Integer r2;
        java.util.Map $r3;
        java.lang.Object $r4;
        int $i0;

        r0 := @this: org.quartz.CronExpression;

        r1 := @parameter0: java.lang.String;

        $r3 = <org.quartz.CronExpression: java.util.Map dayMap>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (java.lang.Integer) $r4;

        if r2 != null goto label1;

        return -1;

     label1:
        $i0 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    public java.util.Date getTimeAfter(java.util.Date)
    {
        org.quartz.CronExpression r0;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, z8, $z9, $z10, $z11, $z12, z13;
        java.util.GregorianCalendar $r2;
        java.util.TimeZone $r3, $r61, $r65;
        java.util.Date $r4, $r5, r72, r81, r83;
        long $l0, $l1;
        int $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, i44, i45, i46, i47, i48, i49, i50, i51, i52, i53, i54, i55, i56, i57, i58, i59, i60, i61, i62, i63, $i64, i65, i66, $i67, i68, i69, i70, i71, i72, i73, i74, i75, i76, i77, i78, i79, i80, i81, i82, $i83, i84, i85, i86, $i87, i88, i89, i91;
        java.util.TreeSet $r6, $r8, $r11, $r14, $r16, $r20, $r22, $r24, $r27, $r29, $r31, $r34, $r42, $r45, $r48, $r50, $r55, $r58, $r62, $r75;
        java.lang.Integer $r7, $r10, $r13, $r15, $r18, $r19, $r21, $r26, $r28, $r30, $r33, $r35, $r37, $r39, $r41, $r44, $r47, $r49, $r52, $r54, $r57, $r60, $r64, $r67, $r69, $r71, $r76;
        java.lang.Object $r9, $r12, $r17, $r25, $r32, $r36, $r38, $r40, $r43, $r46, $r51, $r53, $r56, $r59, $r63, $r66, $r68, $r70;
        java.lang.UnsupportedOperationException $r23;
        java.util.SortedSet r74, r77, r78, r79, r84, r85, r86;
        java.util.Calendar r80, r82;

        r0 := @this: org.quartz.CronExpression;

        r72 := @parameter0: java.util.Date;

        $r2 = new java.util.GregorianCalendar;

        $r3 = virtualinvoke r0.<org.quartz.CronExpression: java.util.TimeZone getTimeZone()>();

        specialinvoke $r2.<java.util.GregorianCalendar: void <init>(java.util.TimeZone)>($r3);

        $r4 = new java.util.Date;

        $l0 = virtualinvoke r72.<java.util.Date: long getTime()>();

        $l1 = $l0 + 1000L;

        specialinvoke $r4.<java.util.Date: void <init>(long)>($l1);

        virtualinvoke $r2.<java.util.Calendar: void setTime(java.util.Date)>($r4);

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(14, 0);

        z8 = 0;

     label01:
        if z8 != 0 goto label63;

        $i2 = virtualinvoke $r2.<java.util.Calendar: int get(int)>(1);

        if $i2 <= 2999 goto label02;

        return null;

     label02:
        i44 = virtualinvoke $r2.<java.util.Calendar: int get(int)>(13);

        i45 = virtualinvoke $r2.<java.util.Calendar: int get(int)>(12);

        $r6 = r0.<org.quartz.CronExpression: java.util.TreeSet seconds>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i44);

        r74 = virtualinvoke $r6.<java.util.TreeSet: java.util.SortedSet tailSet(java.lang.Object)>($r7);

        if r74 == null goto label03;

        $i43 = interfaceinvoke r74.<java.util.SortedSet: int size()>();

        if $i43 == 0 goto label03;

        $r70 = interfaceinvoke r74.<java.util.SortedSet: java.lang.Object first()>();

        $r71 = (java.lang.Integer) $r70;

        i46 = virtualinvoke $r71.<java.lang.Integer: int intValue()>();

        goto label04;

     label03:
        $r8 = r0.<org.quartz.CronExpression: java.util.TreeSet seconds>;

        $r9 = virtualinvoke $r8.<java.util.TreeSet: java.lang.Object first()>();

        $r10 = (java.lang.Integer) $r9;

        i46 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        i47 = i45 + 1;

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(12, i47);

     label04:
        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(13, i46);

        i48 = virtualinvoke $r2.<java.util.Calendar: int get(int)>(12);

        i49 = virtualinvoke $r2.<java.util.Calendar: int get(int)>(11);

        i50 = -1;

        $r75 = r0.<org.quartz.CronExpression: java.util.TreeSet minutes>;

        $r76 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i48);

        r77 = virtualinvoke $r75.<java.util.TreeSet: java.util.SortedSet tailSet(java.lang.Object)>($r76);

        if r77 == null goto label05;

        $i42 = interfaceinvoke r77.<java.util.SortedSet: int size()>();

        if $i42 == 0 goto label05;

        i50 = i48;

        $r68 = interfaceinvoke r77.<java.util.SortedSet: java.lang.Object first()>();

        $r69 = (java.lang.Integer) $r68;

        i51 = virtualinvoke $r69.<java.lang.Integer: int intValue()>();

        goto label06;

     label05:
        $r11 = r0.<org.quartz.CronExpression: java.util.TreeSet minutes>;

        $r12 = virtualinvoke $r11.<java.util.TreeSet: java.lang.Object first()>();

        $r13 = (java.lang.Integer) $r12;

        i51 = virtualinvoke $r13.<java.lang.Integer: int intValue()>();

        i49 = i49 + 1;

     label06:
        if i51 == i50 goto label07;

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(13, 0);

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(12, i51);

        virtualinvoke r0.<org.quartz.CronExpression: void setCalendarHour(java.util.Calendar,int)>($r2, i49);

        goto label01;

     label07:
        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(12, i51);

        i52 = virtualinvoke $r2.<java.util.Calendar: int get(int)>(11);

        i53 = virtualinvoke $r2.<java.util.Calendar: int get(int)>(5);

        i54 = -1;

        $r14 = r0.<org.quartz.CronExpression: java.util.TreeSet hours>;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i52);

        r78 = virtualinvoke $r14.<java.util.TreeSet: java.util.SortedSet tailSet(java.lang.Object)>($r15);

        if r78 == null goto label08;

        $i41 = interfaceinvoke r78.<java.util.SortedSet: int size()>();

        if $i41 == 0 goto label08;

        i54 = i52;

        $r66 = interfaceinvoke r78.<java.util.SortedSet: java.lang.Object first()>();

        $r67 = (java.lang.Integer) $r66;

        i55 = virtualinvoke $r67.<java.lang.Integer: int intValue()>();

        goto label09;

     label08:
        $r16 = r0.<org.quartz.CronExpression: java.util.TreeSet hours>;

        $r17 = virtualinvoke $r16.<java.util.TreeSet: java.lang.Object first()>();

        $r18 = (java.lang.Integer) $r17;

        i55 = virtualinvoke $r18.<java.lang.Integer: int intValue()>();

        i53 = i53 + 1;

     label09:
        if i55 == i54 goto label10;

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(13, 0);

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(12, 0);

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(5, i53);

        virtualinvoke r0.<org.quartz.CronExpression: void setCalendarHour(java.util.Calendar,int)>($r2, i55);

        goto label01;

     label10:
        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(11, i55);

        i56 = virtualinvoke $r2.<java.util.Calendar: int get(int)>(5);

        $i3 = virtualinvoke $r2.<java.util.Calendar: int get(int)>(2);

        i57 = $i3 + 1;

        i58 = -1;

        i59 = i57;

        $r20 = r0.<org.quartz.CronExpression: java.util.TreeSet daysOfMonth>;

        $r19 = <org.quartz.CronExpression: java.lang.Integer NO_SPEC>;

        $z2 = virtualinvoke $r20.<java.util.TreeSet: boolean contains(java.lang.Object)>($r19);

        if $z2 != 0 goto label11;

        $z9 = 1;

        goto label12;

     label11:
        $z9 = 0;

     label12:
        z0 = $z9;

        $r22 = r0.<org.quartz.CronExpression: java.util.TreeSet daysOfWeek>;

        $r21 = <org.quartz.CronExpression: java.lang.Integer NO_SPEC>;

        $z3 = virtualinvoke $r22.<java.util.TreeSet: boolean contains(java.lang.Object)>($r21);

        if $z3 != 0 goto label13;

        $z10 = 1;

        goto label14;

     label13:
        $z10 = 0;

     label14:
        z1 = $z10;

        if z0 == 0 goto label33;

        if $z10 != 0 goto label33;

        $r48 = r0.<org.quartz.CronExpression: java.util.TreeSet daysOfMonth>;

        $r49 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i56);

        r79 = virtualinvoke $r48.<java.util.TreeSet: java.util.SortedSet tailSet(java.lang.Object)>($r49);

        $z5 = r0.<org.quartz.CronExpression: boolean lastdayOfMonth>;

        if $z5 == 0 goto label22;

        $z7 = r0.<org.quartz.CronExpression: boolean nearestWeekday>;

        if $z7 != 0 goto label16;

        i58 = i56;

        $i39 = virtualinvoke $r2.<java.util.Calendar: int get(int)>(1);

        i60 = virtualinvoke r0.<org.quartz.CronExpression: int getLastDayOfMonth(int,int)>(i57, $i39);

        $i40 = r0.<org.quartz.CronExpression: int lastdayOffset>;

        i56 = i60 - $i40;

        if i58 <= i56 goto label31;

        i57 = i57 + 1;

        if i57 <= 12 goto label15;

        i57 = 1;

        i59 = 3333;

        virtualinvoke $r2.<java.util.Calendar: void add(int,int)>(1, 1);

     label15:
        i56 = 1;

        goto label31;

     label16:
        i58 = i56;

        $i34 = virtualinvoke $r2.<java.util.Calendar: int get(int)>(1);

        i61 = virtualinvoke r0.<org.quartz.CronExpression: int getLastDayOfMonth(int,int)>(i57, $i34);

        $i35 = r0.<org.quartz.CronExpression: int lastdayOffset>;

        i56 = i61 - $i35;

        $r65 = virtualinvoke r0.<org.quartz.CronExpression: java.util.TimeZone getTimeZone()>();

        r80 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>($r65);

        virtualinvoke r80.<java.util.Calendar: void set(int,int)>(13, 0);

        virtualinvoke r80.<java.util.Calendar: void set(int,int)>(12, 0);

        virtualinvoke r80.<java.util.Calendar: void set(int,int)>(11, 0);

        virtualinvoke r80.<java.util.Calendar: void set(int,int)>(5, i56);

        $i36 = i57 - 1;

        virtualinvoke r80.<java.util.Calendar: void set(int,int)>(2, $i36);

        $i37 = virtualinvoke $r2.<java.util.Calendar: int get(int)>(1);

        virtualinvoke r80.<java.util.Calendar: void set(int,int)>(1, $i37);

        $i38 = virtualinvoke $r2.<java.util.Calendar: int get(int)>(1);

        i62 = virtualinvoke r0.<org.quartz.CronExpression: int getLastDayOfMonth(int,int)>(i57, $i38);

        i63 = virtualinvoke r80.<java.util.Calendar: int get(int)>(7);

        if i63 != 7 goto label17;

        if i56 != 1 goto label17;

        i56 = i56 + 2;

        goto label20;

     label17:
        if i63 != 7 goto label18;

        i56 = i56 + -1;

        goto label20;

     label18:
        if i63 != 1 goto label19;

        if i56 != i62 goto label19;

        i56 = i56 + -2;

        goto label20;

     label19:
        if i63 != 1 goto label20;

        i56 = i56 + 1;

     label20:
        virtualinvoke r80.<java.util.Calendar: void set(int,int)>(13, i46);

        virtualinvoke r80.<java.util.Calendar: void set(int,int)>(12, i51);

        virtualinvoke r80.<java.util.Calendar: void set(int,int)>(11, i55);

        virtualinvoke r80.<java.util.Calendar: void set(int,int)>(5, i56);

        $i64 = i57 - 1;

        virtualinvoke r80.<java.util.Calendar: void set(int,int)>(2, $i64);

        r81 = virtualinvoke r80.<java.util.Calendar: java.util.Date getTime()>();

        $z11 = virtualinvoke r81.<java.util.Date: boolean before(java.util.Date)>($r4);

        if $z11 == 0 goto label21;

        i56 = 1;

        i57 = i57 + 1;

     label21:
        goto label31;

     label22:
        $z6 = r0.<org.quartz.CronExpression: boolean nearestWeekday>;

        if $z6 == 0 goto label28;

        i58 = i56;

        $r58 = r0.<org.quartz.CronExpression: java.util.TreeSet daysOfMonth>;

        $r59 = virtualinvoke $r58.<java.util.TreeSet: java.lang.Object first()>();

        $r60 = (java.lang.Integer) $r59;

        i56 = virtualinvoke $r60.<java.lang.Integer: int intValue()>();

        $r61 = virtualinvoke r0.<org.quartz.CronExpression: java.util.TimeZone getTimeZone()>();

        r82 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>($r61);

        virtualinvoke r82.<java.util.Calendar: void set(int,int)>(13, 0);

        virtualinvoke r82.<java.util.Calendar: void set(int,int)>(12, 0);

        virtualinvoke r82.<java.util.Calendar: void set(int,int)>(11, 0);

        virtualinvoke r82.<java.util.Calendar: void set(int,int)>(5, i56);

        $i31 = i57 - 1;

        virtualinvoke r82.<java.util.Calendar: void set(int,int)>(2, $i31);

        $i32 = virtualinvoke $r2.<java.util.Calendar: int get(int)>(1);

        virtualinvoke r82.<java.util.Calendar: void set(int,int)>(1, $i32);

        $i33 = virtualinvoke $r2.<java.util.Calendar: int get(int)>(1);

        i65 = virtualinvoke r0.<org.quartz.CronExpression: int getLastDayOfMonth(int,int)>(i57, $i33);

        i66 = virtualinvoke r82.<java.util.Calendar: int get(int)>(7);

        if i66 != 7 goto label23;

        if i56 != 1 goto label23;

        i56 = i56 + 2;

        goto label26;

     label23:
        if i66 != 7 goto label24;

        i56 = i56 + -1;

        goto label26;

     label24:
        if i66 != 1 goto label25;

        if i56 != i65 goto label25;

        i56 = i56 + -2;

        goto label26;

     label25:
        if i66 != 1 goto label26;

        i56 = i56 + 1;

     label26:
        virtualinvoke r82.<java.util.Calendar: void set(int,int)>(13, i46);

        virtualinvoke r82.<java.util.Calendar: void set(int,int)>(12, i51);

        virtualinvoke r82.<java.util.Calendar: void set(int,int)>(11, i55);

        virtualinvoke r82.<java.util.Calendar: void set(int,int)>(5, i56);

        $i67 = i57 - 1;

        virtualinvoke r82.<java.util.Calendar: void set(int,int)>(2, $i67);

        r83 = virtualinvoke r82.<java.util.Calendar: java.util.Date getTime()>();

        $z12 = virtualinvoke r83.<java.util.Date: boolean before(java.util.Date)>($r4);

        if $z12 == 0 goto label27;

        $r62 = r0.<org.quartz.CronExpression: java.util.TreeSet daysOfMonth>;

        $r63 = virtualinvoke $r62.<java.util.TreeSet: java.lang.Object first()>();

        $r64 = (java.lang.Integer) $r63;

        i56 = virtualinvoke $r64.<java.lang.Integer: int intValue()>();

        i57 = i57 + 1;

     label27:
        goto label31;

     label28:
        if r79 == null goto label30;

        $i29 = interfaceinvoke r79.<java.util.SortedSet: int size()>();

        if $i29 == 0 goto label30;

        i58 = i56;

        $r53 = interfaceinvoke r79.<java.util.SortedSet: java.lang.Object first()>();

        $r54 = (java.lang.Integer) $r53;

        i56 = virtualinvoke $r54.<java.lang.Integer: int intValue()>();

        $i30 = virtualinvoke $r2.<java.util.Calendar: int get(int)>(1);

        i68 = virtualinvoke r0.<org.quartz.CronExpression: int getLastDayOfMonth(int,int)>(i57, $i30);

        if i56 <= i68 goto label29;

        $r55 = r0.<org.quartz.CronExpression: java.util.TreeSet daysOfMonth>;

        $r56 = virtualinvoke $r55.<java.util.TreeSet: java.lang.Object first()>();

        $r57 = (java.lang.Integer) $r56;

        i56 = virtualinvoke $r57.<java.lang.Integer: int intValue()>();

        i57 = i57 + 1;

     label29:
        goto label31;

     label30:
        $r50 = r0.<org.quartz.CronExpression: java.util.TreeSet daysOfMonth>;

        $r51 = virtualinvoke $r50.<java.util.TreeSet: java.lang.Object first()>();

        $r52 = (java.lang.Integer) $r51;

        i56 = virtualinvoke $r52.<java.lang.Integer: int intValue()>();

        i57 = i57 + 1;

     label31:
        if i56 != i58 goto label32;

        if i57 == i59 goto label55;

     label32:
        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(13, 0);

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(12, 0);

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(11, 0);

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(5, i56);

        $i28 = i57 - 1;

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(2, $i28);

        goto label01;

     label33:
        if z1 == 0 goto label54;

        if z0 != 0 goto label54;

        $z4 = r0.<org.quartz.CronExpression: boolean lastdayOfWeek>;

        if $z4 == 0 goto label39;

        $r45 = r0.<org.quartz.CronExpression: java.util.TreeSet daysOfWeek>;

        $r46 = virtualinvoke $r45.<java.util.TreeSet: java.lang.Object first()>();

        $r47 = (java.lang.Integer) $r46;

        i69 = virtualinvoke $r47.<java.lang.Integer: int intValue()>();

        i70 = virtualinvoke $r2.<java.util.Calendar: int get(int)>(7);

        i71 = 0;

        if i70 >= i69 goto label34;

        i71 = i69 - i70;

     label34:
        if i70 <= i69 goto label35;

        $i27 = 7 - i70;

        i71 = i69 + $i27;

     label35:
        $i22 = virtualinvoke $r2.<java.util.Calendar: int get(int)>(1);

        i72 = virtualinvoke r0.<org.quartz.CronExpression: int getLastDayOfMonth(int,int)>(i57, $i22);

        $i23 = i56 + i71;

        if $i23 <= i72 goto label36;

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(13, 0);

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(12, 0);

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(11, 0);

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(5, 1);

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(2, i57);

        goto label01;

     label36:
        $i24 = i56 + i71;

        $i25 = $i24 + 7;

        if $i25 > i72 goto label37;

        i71 = i71 + 7;

        goto label36;

     label37:
        i56 = i56 + i71;

        if i71 <= 0 goto label38;

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(13, 0);

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(12, 0);

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(11, 0);

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(5, i56);

        $i26 = i57 - 1;

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(2, $i26);

        goto label01;

     label38:
        goto label55;

     label39:
        $i4 = r0.<org.quartz.CronExpression: int nthdayOfWeek>;

        if $i4 == 0 goto label48;

        $r42 = r0.<org.quartz.CronExpression: java.util.TreeSet daysOfWeek>;

        $r43 = virtualinvoke $r42.<java.util.TreeSet: java.lang.Object first()>();

        $r44 = (java.lang.Integer) $r43;

        i73 = virtualinvoke $r44.<java.lang.Integer: int intValue()>();

        i74 = virtualinvoke $r2.<java.util.Calendar: int get(int)>(7);

        i75 = 0;

        if i74 >= i73 goto label40;

        i75 = i73 - i74;

        goto label41;

     label40:
        if i74 <= i73 goto label41;

        $i21 = 7 - i74;

        i75 = i73 + $i21;

     label41:
        z13 = 0;

        if i75 <= 0 goto label42;

        z13 = 1;

     label42:
        i76 = i56 + i75;

        i77 = i76 / 7;

        $i15 = i76 % 7;

        if $i15 <= 0 goto label43;

        i77 = i77 + 1;

     label43:
        $i16 = r0.<org.quartz.CronExpression: int nthdayOfWeek>;

        $i17 = $i16 - i77;

        i78 = $i17 * 7;

        i56 = i76 + i78;

        if i78 < 0 goto label44;

        $i18 = virtualinvoke $r2.<java.util.Calendar: int get(int)>(1);

        $i19 = virtualinvoke r0.<org.quartz.CronExpression: int getLastDayOfMonth(int,int)>(i57, $i18);

        if i56 <= $i19 goto label45;

     label44:
        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(13, 0);

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(12, 0);

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(11, 0);

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(5, 1);

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(2, i57);

        goto label01;

     label45:
        if i78 > 0 goto label46;

        if z13 == 0 goto label47;

     label46:
        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(13, 0);

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(12, 0);

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(11, 0);

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(5, i56);

        $i20 = i57 - 1;

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(2, $i20);

        goto label01;

     label47:
        goto label55;

     label48:
        i79 = virtualinvoke $r2.<java.util.Calendar: int get(int)>(7);

        $r24 = r0.<org.quartz.CronExpression: java.util.TreeSet daysOfWeek>;

        $r25 = virtualinvoke $r24.<java.util.TreeSet: java.lang.Object first()>();

        $r26 = (java.lang.Integer) $r25;

        i80 = virtualinvoke $r26.<java.lang.Integer: int intValue()>();

        $r27 = r0.<org.quartz.CronExpression: java.util.TreeSet daysOfWeek>;

        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i79);

        r84 = virtualinvoke $r27.<java.util.TreeSet: java.util.SortedSet tailSet(java.lang.Object)>($r28);

        if r84 == null goto label49;

        $i14 = interfaceinvoke r84.<java.util.SortedSet: int size()>();

        if $i14 <= 0 goto label49;

        $r40 = interfaceinvoke r84.<java.util.SortedSet: java.lang.Object first()>();

        $r41 = (java.lang.Integer) $r40;

        i80 = virtualinvoke $r41.<java.lang.Integer: int intValue()>();

     label49:
        i81 = 0;

        if i79 >= i80 goto label50;

        i81 = i80 - i79;

     label50:
        if i79 <= i80 goto label51;

        $i13 = 7 - i79;

        i81 = i80 + $i13;

     label51:
        $i5 = virtualinvoke $r2.<java.util.Calendar: int get(int)>(1);

        i82 = virtualinvoke r0.<org.quartz.CronExpression: int getLastDayOfMonth(int,int)>(i57, $i5);

        $i6 = i56 + i81;

        if $i6 <= i82 goto label52;

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(13, 0);

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(12, 0);

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(11, 0);

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(5, 1);

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(2, i57);

        goto label01;

     label52:
        if i81 <= 0 goto label53;

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(13, 0);

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(12, 0);

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(11, 0);

        $i11 = i56 + i81;

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(5, $i11);

        $i12 = i57 - 1;

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(2, $i12);

        goto label01;

     label53:
        goto label55;

     label54:
        $r23 = new java.lang.UnsupportedOperationException;

        specialinvoke $r23.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Support for specifying both a day-of-week AND a day-of-month parameter is not implemented.");

        throw $r23;

     label55:
        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(5, i56);

        $i83 = virtualinvoke $r2.<java.util.Calendar: int get(int)>(2);

        i84 = $i83 + 1;

        i85 = virtualinvoke $r2.<java.util.Calendar: int get(int)>(1);

        i86 = -1;

        $i87 = <org.quartz.CronExpression: int MAX_YEAR>;

        if i85 <= $i87 goto label56;

        return null;

     label56:
        $r29 = r0.<org.quartz.CronExpression: java.util.TreeSet months>;

        $r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i84);

        r85 = virtualinvoke $r29.<java.util.TreeSet: java.util.SortedSet tailSet(java.lang.Object)>($r30);

        if r85 == null goto label57;

        $i10 = interfaceinvoke r85.<java.util.SortedSet: int size()>();

        if $i10 == 0 goto label57;

        i86 = i84;

        $r38 = interfaceinvoke r85.<java.util.SortedSet: java.lang.Object first()>();

        $r39 = (java.lang.Integer) $r38;

        i88 = virtualinvoke $r39.<java.lang.Integer: int intValue()>();

        goto label58;

     label57:
        $r31 = r0.<org.quartz.CronExpression: java.util.TreeSet months>;

        $r32 = virtualinvoke $r31.<java.util.TreeSet: java.lang.Object first()>();

        $r33 = (java.lang.Integer) $r32;

        i88 = virtualinvoke $r33.<java.lang.Integer: int intValue()>();

        i85 = i85 + 1;

     label58:
        if i88 == i86 goto label59;

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(13, 0);

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(12, 0);

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(11, 0);

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(5, 1);

        $i9 = i88 - 1;

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(2, $i9);

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(1, i85);

        goto label01;

     label59:
        $i7 = i88 - 1;

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(2, $i7);

        i89 = virtualinvoke $r2.<java.util.Calendar: int get(int)>(1);

        $r34 = r0.<org.quartz.CronExpression: java.util.TreeSet years>;

        $r35 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i89);

        r86 = virtualinvoke $r34.<java.util.TreeSet: java.util.SortedSet tailSet(java.lang.Object)>($r35);

        if r86 == null goto label60;

        $i8 = interfaceinvoke r86.<java.util.SortedSet: int size()>();

        if $i8 == 0 goto label60;

        $r36 = interfaceinvoke r86.<java.util.SortedSet: java.lang.Object first()>();

        $r37 = (java.lang.Integer) $r36;

        i91 = virtualinvoke $r37.<java.lang.Integer: int intValue()>();

        goto label61;

     label60:
        return null;

     label61:
        if i91 == i89 goto label62;

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(13, 0);

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(12, 0);

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(11, 0);

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(5, 1);

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(2, 0);

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(1, i91);

        goto label01;

     label62:
        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(1, i91);

        z8 = 1;

        goto label01;

     label63:
        $r5 = virtualinvoke $r2.<java.util.Calendar: java.util.Date getTime()>();

        return $r5;
    }

    protected void setCalendarHour(java.util.Calendar, int)
    {
        org.quartz.CronExpression r0;
        java.util.Calendar r1;
        int i0, $i1, $i2;

        r0 := @this: org.quartz.CronExpression;

        r1 := @parameter0: java.util.Calendar;

        i0 := @parameter1: int;

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(11, i0);

        $i1 = virtualinvoke r1.<java.util.Calendar: int get(int)>(11);

        if $i1 == i0 goto label1;

        if i0 == 24 goto label1;

        $i2 = i0 + 1;

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(11, $i2);

     label1:
        return;
    }

    public java.util.Date getTimeBefore(java.util.Date)
    {
        org.quartz.CronExpression r0;
        java.util.Date r1;

        r0 := @this: org.quartz.CronExpression;

        r1 := @parameter0: java.util.Date;

        return null;
    }

    public java.util.Date getFinalFireTime()
    {
        org.quartz.CronExpression r0;

        r0 := @this: org.quartz.CronExpression;

        return null;
    }

    protected boolean isLeapYear(int)
    {
        org.quartz.CronExpression r0;
        int i0, $i1, $i2, $i3;
        boolean $z0;

        r0 := @this: org.quartz.CronExpression;

        i0 := @parameter0: int;

        $i1 = i0 % 4;

        if $i1 != 0 goto label1;

        $i3 = i0 % 100;

        if $i3 != 0 goto label2;

     label1:
        $i2 = i0 % 400;

        if $i2 != 0 goto label3;

     label2:
        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    protected int getLastDayOfMonth(int, int)
    {
        org.quartz.CronExpression r0;
        int i0, i1;
        boolean $z0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        byte $b2;

        r0 := @this: org.quartz.CronExpression;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        tableswitch(i0)
        {
            case 1: goto label01;
            case 2: goto label02;
            case 3: goto label05;
            case 4: goto label06;
            case 5: goto label07;
            case 6: goto label08;
            case 7: goto label09;
            case 8: goto label10;
            case 9: goto label11;
            case 10: goto label12;
            case 11: goto label13;
            case 12: goto label14;
            default: goto label15;
        };

     label01:
        return 31;

     label02:
        $z0 = virtualinvoke r0.<org.quartz.CronExpression: boolean isLeapYear(int)>(i1);

        if $z0 == 0 goto label03;

        $b2 = 29;

        goto label04;

     label03:
        $b2 = 28;

     label04:
        return $b2;

     label05:
        return 31;

     label06:
        return 30;

     label07:
        return 31;

     label08:
        return 30;

     label09:
        return 31;

     label10:
        return 31;

     label11:
        return 30;

     label12:
        return 31;

     label13:
        return 30;

     label14:
        return 31;

     label15:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal month number: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.quartz.CronExpression r0;
        java.io.ObjectInputStream r1;
        java.lang.String $r3;
        java.lang.Exception $r4;

        r0 := @this: org.quartz.CronExpression;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

     label1:
        $r3 = r0.<org.quartz.CronExpression: java.lang.String cronExpression>;

        virtualinvoke r0.<org.quartz.CronExpression: void buildExpression(java.lang.String)>($r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.lang.Object clone()
    {
        org.quartz.CronExpression r0, $r1;

        r0 := @this: org.quartz.CronExpression;

        $r1 = new org.quartz.CronExpression;

        specialinvoke $r1.<org.quartz.CronExpression: void <init>(org.quartz.CronExpression)>(r0);

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Integer $r0, $r1, $r5, $r8, $r11, $r14, $r17, $r20, $r23, $r26, $r29, $r32, $r35, $r38, $r41, $r44, $r47, $r50, $r53, $r56, $r59;
        java.util.HashMap $r2, $r3;
        java.util.Map $r4, $r7, $r10, $r13, $r16, $r19, $r22, $r25, $r28, $r31, $r34, $r37, $r40, $r43, $r46, $r49, $r52, $r55, $r58;
        java.util.Calendar $r61;
        int $i0, $i1;

        <org.quartz.CronExpression: int NO_SPEC_INT> = 98;

        <org.quartz.CronExpression: int ALL_SPEC_INT> = 99;

        <org.quartz.CronExpression: int YEAR> = 6;

        <org.quartz.CronExpression: int DAY_OF_WEEK> = 5;

        <org.quartz.CronExpression: int MONTH> = 4;

        <org.quartz.CronExpression: int DAY_OF_MONTH> = 3;

        <org.quartz.CronExpression: int HOUR> = 2;

        <org.quartz.CronExpression: int MINUTE> = 1;

        <org.quartz.CronExpression: int SECOND> = 0;

        <org.quartz.CronExpression: long serialVersionUID> = 12423409423L;

        $r0 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(99);

        <org.quartz.CronExpression: java.lang.Integer ALL_SPEC> = $r0;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(98);

        <org.quartz.CronExpression: java.lang.Integer NO_SPEC> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>(int)>(20);

        <org.quartz.CronExpression: java.util.Map monthMap> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>(int)>(60);

        <org.quartz.CronExpression: java.util.Map dayMap> = $r3;

        $r4 = <org.quartz.CronExpression: java.util.Map monthMap>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("JAN", $r5);

        $r7 = <org.quartz.CronExpression: java.util.Map monthMap>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("FEB", $r8);

        $r10 = <org.quartz.CronExpression: java.util.Map monthMap>;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("MAR", $r11);

        $r13 = <org.quartz.CronExpression: java.util.Map monthMap>;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("APR", $r14);

        $r16 = <org.quartz.CronExpression: java.util.Map monthMap>;

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("MAY", $r17);

        $r19 = <org.quartz.CronExpression: java.util.Map monthMap>;

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("JUN", $r20);

        $r22 = <org.quartz.CronExpression: java.util.Map monthMap>;

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        interfaceinvoke $r22.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("JUL", $r23);

        $r25 = <org.quartz.CronExpression: java.util.Map monthMap>;

        $r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(7);

        interfaceinvoke $r25.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("AUG", $r26);

        $r28 = <org.quartz.CronExpression: java.util.Map monthMap>;

        $r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8);

        interfaceinvoke $r28.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("SEP", $r29);

        $r31 = <org.quartz.CronExpression: java.util.Map monthMap>;

        $r32 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9);

        interfaceinvoke $r31.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("OCT", $r32);

        $r34 = <org.quartz.CronExpression: java.util.Map monthMap>;

        $r35 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        interfaceinvoke $r34.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("NOV", $r35);

        $r37 = <org.quartz.CronExpression: java.util.Map monthMap>;

        $r38 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(11);

        interfaceinvoke $r37.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("DEC", $r38);

        $r40 = <org.quartz.CronExpression: java.util.Map dayMap>;

        $r41 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke $r40.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("SUN", $r41);

        $r43 = <org.quartz.CronExpression: java.util.Map dayMap>;

        $r44 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        interfaceinvoke $r43.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("MON", $r44);

        $r46 = <org.quartz.CronExpression: java.util.Map dayMap>;

        $r47 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke $r46.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("TUE", $r47);

        $r49 = <org.quartz.CronExpression: java.util.Map dayMap>;

        $r50 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        interfaceinvoke $r49.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("WED", $r50);

        $r52 = <org.quartz.CronExpression: java.util.Map dayMap>;

        $r53 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        interfaceinvoke $r52.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("THU", $r53);

        $r55 = <org.quartz.CronExpression: java.util.Map dayMap>;

        $r56 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        interfaceinvoke $r55.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("FRI", $r56);

        $r58 = <org.quartz.CronExpression: java.util.Map dayMap>;

        $r59 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(7);

        interfaceinvoke $r58.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("SAT", $r59);

        $r61 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $i0 = virtualinvoke $r61.<java.util.Calendar: int get(int)>(1);

        $i1 = $i0 + 100;

        <org.quartz.CronExpression: int MAX_YEAR> = $i1;

        return;
    }
}
