public class org.quartz.simpl.SimpleThreadPool extends java.lang.Object implements org.quartz.spi.ThreadPool
{
    private int count;
    private int prio;
    private boolean isShutdown;
    private boolean handoffPending;
    private boolean inheritLoader;
    private boolean inheritGroup;
    private boolean makeThreadsDaemons;
    private java.lang.ThreadGroup threadGroup;
    private final java.lang.Object nextRunnableLock;
    private java.util.List workers;
    private java.util.LinkedList availWorkers;
    private java.util.LinkedList busyWorkers;
    private java.lang.String threadNamePrefix;
    private final org.slf4j.Logger log;
    private java.lang.String schedulerInstanceName;

    public void <init>()
    {
        org.quartz.simpl.SimpleThreadPool r0;
        java.lang.Object $r1;
        java.util.LinkedList $r2, $r3;
        java.lang.Class $r4;
        org.slf4j.Logger $r5;

        r0 := @this: org.quartz.simpl.SimpleThreadPool;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.quartz.simpl.SimpleThreadPool: int count> = -1;

        r0.<org.quartz.simpl.SimpleThreadPool: int prio> = 5;

        r0.<org.quartz.simpl.SimpleThreadPool: boolean isShutdown> = 0;

        r0.<org.quartz.simpl.SimpleThreadPool: boolean handoffPending> = 0;

        r0.<org.quartz.simpl.SimpleThreadPool: boolean inheritLoader> = 0;

        r0.<org.quartz.simpl.SimpleThreadPool: boolean inheritGroup> = 1;

        r0.<org.quartz.simpl.SimpleThreadPool: boolean makeThreadsDaemons> = 0;

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<org.quartz.simpl.SimpleThreadPool: java.lang.Object nextRunnableLock> = $r1;

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        r0.<org.quartz.simpl.SimpleThreadPool: java.util.LinkedList availWorkers> = $r2;

        $r3 = new java.util.LinkedList;

        specialinvoke $r3.<java.util.LinkedList: void <init>()>();

        r0.<org.quartz.simpl.SimpleThreadPool: java.util.LinkedList busyWorkers> = $r3;

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>($r4);

        r0.<org.quartz.simpl.SimpleThreadPool: org.slf4j.Logger log> = $r5;

        return;
    }

    public void <init>(int, int)
    {
        org.quartz.simpl.SimpleThreadPool r0;
        int i0, i1;
        java.lang.Object $r1;
        java.util.LinkedList $r2, $r3;
        java.lang.Class $r4;
        org.slf4j.Logger $r5;

        r0 := @this: org.quartz.simpl.SimpleThreadPool;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.quartz.simpl.SimpleThreadPool: int count> = -1;

        r0.<org.quartz.simpl.SimpleThreadPool: int prio> = 5;

        r0.<org.quartz.simpl.SimpleThreadPool: boolean isShutdown> = 0;

        r0.<org.quartz.simpl.SimpleThreadPool: boolean handoffPending> = 0;

        r0.<org.quartz.simpl.SimpleThreadPool: boolean inheritLoader> = 0;

        r0.<org.quartz.simpl.SimpleThreadPool: boolean inheritGroup> = 1;

        r0.<org.quartz.simpl.SimpleThreadPool: boolean makeThreadsDaemons> = 0;

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<org.quartz.simpl.SimpleThreadPool: java.lang.Object nextRunnableLock> = $r1;

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        r0.<org.quartz.simpl.SimpleThreadPool: java.util.LinkedList availWorkers> = $r2;

        $r3 = new java.util.LinkedList;

        specialinvoke $r3.<java.util.LinkedList: void <init>()>();

        r0.<org.quartz.simpl.SimpleThreadPool: java.util.LinkedList busyWorkers> = $r3;

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>($r4);

        r0.<org.quartz.simpl.SimpleThreadPool: org.slf4j.Logger log> = $r5;

        virtualinvoke r0.<org.quartz.simpl.SimpleThreadPool: void setThreadCount(int)>(i0);

        virtualinvoke r0.<org.quartz.simpl.SimpleThreadPool: void setThreadPriority(int)>(i1);

        return;
    }

    public org.slf4j.Logger getLog()
    {
        org.quartz.simpl.SimpleThreadPool r0;
        org.slf4j.Logger $r1;

        r0 := @this: org.quartz.simpl.SimpleThreadPool;

        $r1 = r0.<org.quartz.simpl.SimpleThreadPool: org.slf4j.Logger log>;

        return $r1;
    }

    public int getPoolSize()
    {
        org.quartz.simpl.SimpleThreadPool r0;
        int $i0;

        r0 := @this: org.quartz.simpl.SimpleThreadPool;

        $i0 = virtualinvoke r0.<org.quartz.simpl.SimpleThreadPool: int getThreadCount()>();

        return $i0;
    }

    public void setThreadCount(int)
    {
        org.quartz.simpl.SimpleThreadPool r0;
        int i0;

        r0 := @this: org.quartz.simpl.SimpleThreadPool;

        i0 := @parameter0: int;

        r0.<org.quartz.simpl.SimpleThreadPool: int count> = i0;

        return;
    }

    public int getThreadCount()
    {
        org.quartz.simpl.SimpleThreadPool r0;
        int $i0;

        r0 := @this: org.quartz.simpl.SimpleThreadPool;

        $i0 = r0.<org.quartz.simpl.SimpleThreadPool: int count>;

        return $i0;
    }

    public void setThreadPriority(int)
    {
        org.quartz.simpl.SimpleThreadPool r0;
        int i0;

        r0 := @this: org.quartz.simpl.SimpleThreadPool;

        i0 := @parameter0: int;

        r0.<org.quartz.simpl.SimpleThreadPool: int prio> = i0;

        return;
    }

    public int getThreadPriority()
    {
        org.quartz.simpl.SimpleThreadPool r0;
        int $i0;

        r0 := @this: org.quartz.simpl.SimpleThreadPool;

        $i0 = r0.<org.quartz.simpl.SimpleThreadPool: int prio>;

        return $i0;
    }

    public void setThreadNamePrefix(java.lang.String)
    {
        org.quartz.simpl.SimpleThreadPool r0;
        java.lang.String r1;

        r0 := @this: org.quartz.simpl.SimpleThreadPool;

        r1 := @parameter0: java.lang.String;

        r0.<org.quartz.simpl.SimpleThreadPool: java.lang.String threadNamePrefix> = r1;

        return;
    }

    public java.lang.String getThreadNamePrefix()
    {
        org.quartz.simpl.SimpleThreadPool r0;
        java.lang.String $r1;

        r0 := @this: org.quartz.simpl.SimpleThreadPool;

        $r1 = r0.<org.quartz.simpl.SimpleThreadPool: java.lang.String threadNamePrefix>;

        return $r1;
    }

    public boolean isThreadsInheritContextClassLoaderOfInitializingThread()
    {
        org.quartz.simpl.SimpleThreadPool r0;
        boolean $z0;

        r0 := @this: org.quartz.simpl.SimpleThreadPool;

        $z0 = r0.<org.quartz.simpl.SimpleThreadPool: boolean inheritLoader>;

        return $z0;
    }

    public void setThreadsInheritContextClassLoaderOfInitializingThread(boolean)
    {
        org.quartz.simpl.SimpleThreadPool r0;
        boolean z0;

        r0 := @this: org.quartz.simpl.SimpleThreadPool;

        z0 := @parameter0: boolean;

        r0.<org.quartz.simpl.SimpleThreadPool: boolean inheritLoader> = z0;

        return;
    }

    public boolean isThreadsInheritGroupOfInitializingThread()
    {
        org.quartz.simpl.SimpleThreadPool r0;
        boolean $z0;

        r0 := @this: org.quartz.simpl.SimpleThreadPool;

        $z0 = r0.<org.quartz.simpl.SimpleThreadPool: boolean inheritGroup>;

        return $z0;
    }

    public void setThreadsInheritGroupOfInitializingThread(boolean)
    {
        org.quartz.simpl.SimpleThreadPool r0;
        boolean z0;

        r0 := @this: org.quartz.simpl.SimpleThreadPool;

        z0 := @parameter0: boolean;

        r0.<org.quartz.simpl.SimpleThreadPool: boolean inheritGroup> = z0;

        return;
    }

    public boolean isMakeThreadsDaemons()
    {
        org.quartz.simpl.SimpleThreadPool r0;
        boolean $z0;

        r0 := @this: org.quartz.simpl.SimpleThreadPool;

        $z0 = r0.<org.quartz.simpl.SimpleThreadPool: boolean makeThreadsDaemons>;

        return $z0;
    }

    public void setMakeThreadsDaemons(boolean)
    {
        org.quartz.simpl.SimpleThreadPool r0;
        boolean z0;

        r0 := @this: org.quartz.simpl.SimpleThreadPool;

        z0 := @parameter0: boolean;

        r0.<org.quartz.simpl.SimpleThreadPool: boolean makeThreadsDaemons> = z0;

        return;
    }

    public void setInstanceId(java.lang.String)
    {
        org.quartz.simpl.SimpleThreadPool r0;
        java.lang.String r1;

        r0 := @this: org.quartz.simpl.SimpleThreadPool;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void setInstanceName(java.lang.String)
    {
        org.quartz.simpl.SimpleThreadPool r0;
        java.lang.String r1;

        r0 := @this: org.quartz.simpl.SimpleThreadPool;

        r1 := @parameter0: java.lang.String;

        r0.<org.quartz.simpl.SimpleThreadPool: java.lang.String schedulerInstanceName> = r1;

        return;
    }

    public void initialize() throws org.quartz.SchedulerConfigException
    {
        org.quartz.simpl.SimpleThreadPool r0;
        org.quartz.simpl.SimpleThreadPool$WorkerThread r1;
        java.util.List $r2, $r13, $r28;
        int $i0, $i1, $i2, $i3, $i4;
        org.quartz.SchedulerConfigException $r3, $r27;
        boolean $z0, $z1, $z2, $z4, $z5;
        java.lang.Thread $r4, $r19, $r25;
        java.lang.ThreadGroup $r5, $r7, $r23, $r24, $r26, r29;
        java.lang.String $r6, $r9, $r12, $r20, $r22;
        java.lang.StringBuilder $r8, $r10, $r11, $r17, $r18, $r21;
        java.lang.Object $r14;
        java.util.LinkedList $r15;
        org.slf4j.Logger $r16;
        java.util.Iterator r30;

        r0 := @this: org.quartz.simpl.SimpleThreadPool;

        $r2 = r0.<org.quartz.simpl.SimpleThreadPool: java.util.List workers>;

        if $r2 == null goto label01;

        $r28 = r0.<org.quartz.simpl.SimpleThreadPool: java.util.List workers>;

        $i4 = interfaceinvoke $r28.<java.util.List: int size()>();

        if $i4 <= 0 goto label01;

        return;

     label01:
        $i0 = r0.<org.quartz.simpl.SimpleThreadPool: int count>;

        if $i0 > 0 goto label02;

        $r27 = new org.quartz.SchedulerConfigException;

        specialinvoke $r27.<org.quartz.SchedulerConfigException: void <init>(java.lang.String)>("Thread count must be > 0");

        throw $r27;

     label02:
        $i1 = r0.<org.quartz.simpl.SimpleThreadPool: int prio>;

        if $i1 <= 0 goto label03;

        $i2 = r0.<org.quartz.simpl.SimpleThreadPool: int prio>;

        if $i2 <= 9 goto label04;

     label03:
        $r3 = new org.quartz.SchedulerConfigException;

        specialinvoke $r3.<org.quartz.SchedulerConfigException: void <init>(java.lang.String)>("Thread priority must be > 0 and <= 9");

        throw $r3;

     label04:
        $z0 = virtualinvoke r0.<org.quartz.simpl.SimpleThreadPool: boolean isThreadsInheritGroupOfInitializingThread()>();

        if $z0 == 0 goto label05;

        $r25 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r26 = virtualinvoke $r25.<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>();

        r0.<org.quartz.simpl.SimpleThreadPool: java.lang.ThreadGroup threadGroup> = $r26;

        goto label08;

     label05:
        $r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r5 = virtualinvoke $r4.<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>();

        r0.<org.quartz.simpl.SimpleThreadPool: java.lang.ThreadGroup threadGroup> = $r5;

        r29 = r0.<org.quartz.simpl.SimpleThreadPool: java.lang.ThreadGroup threadGroup>;

     label06:
        $r6 = virtualinvoke r29.<java.lang.ThreadGroup: java.lang.String getName()>();

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("main");

        if $z1 != 0 goto label07;

        r0.<org.quartz.simpl.SimpleThreadPool: java.lang.ThreadGroup threadGroup> = r29;

        $r24 = r0.<org.quartz.simpl.SimpleThreadPool: java.lang.ThreadGroup threadGroup>;

        r29 = virtualinvoke $r24.<java.lang.ThreadGroup: java.lang.ThreadGroup getParent()>();

        goto label06;

     label07:
        $r7 = new java.lang.ThreadGroup;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = r0.<org.quartz.simpl.SimpleThreadPool: java.lang.String schedulerInstanceName>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-SimpleThreadPool");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>(r29, $r12);

        r0.<org.quartz.simpl.SimpleThreadPool: java.lang.ThreadGroup threadGroup> = $r7;

        $z2 = virtualinvoke r0.<org.quartz.simpl.SimpleThreadPool: boolean isMakeThreadsDaemons()>();

        if $z2 == 0 goto label08;

        $r23 = r0.<org.quartz.simpl.SimpleThreadPool: java.lang.ThreadGroup threadGroup>;

        virtualinvoke $r23.<java.lang.ThreadGroup: void setDaemon(boolean)>(1);

     label08:
        $z4 = virtualinvoke r0.<org.quartz.simpl.SimpleThreadPool: boolean isThreadsInheritContextClassLoaderOfInitializingThread()>();

        if $z4 == 0 goto label09;

        $r16 = virtualinvoke r0.<org.quartz.simpl.SimpleThreadPool: org.slf4j.Logger getLog()>();

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Job execution threads will use class loader of thread: ");

        $r19 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r20 = virtualinvoke $r19.<java.lang.Thread: java.lang.String getName()>();

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r16.<org.slf4j.Logger: void info(java.lang.String)>($r22);

     label09:
        $i3 = r0.<org.quartz.simpl.SimpleThreadPool: int count>;

        $r13 = virtualinvoke r0.<org.quartz.simpl.SimpleThreadPool: java.util.List createWorkerThreads(int)>($i3);

        r30 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();

     label10:
        $z5 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label11;

        $r14 = interfaceinvoke r30.<java.util.Iterator: java.lang.Object next()>();

        r1 = (org.quartz.simpl.SimpleThreadPool$WorkerThread) $r14;

        virtualinvoke r1.<org.quartz.simpl.SimpleThreadPool$WorkerThread: void start()>();

        $r15 = r0.<org.quartz.simpl.SimpleThreadPool: java.util.LinkedList availWorkers>;

        virtualinvoke $r15.<java.util.LinkedList: boolean add(java.lang.Object)>(r1);

        goto label10;

     label11:
        return;
    }

    protected java.util.List createWorkerThreads(int)
    {
        org.quartz.simpl.SimpleThreadPool r0;
        int i0, $i1, i2;
        java.util.LinkedList $r2;
        java.util.List $r3, $r11;
        org.quartz.simpl.SimpleThreadPool$WorkerThread $r4;
        java.lang.StringBuilder $r5, $r7, $r8, $r9, $r14, $r16, $r17;
        java.lang.ThreadGroup $r6;
        java.lang.String $r10, $r15, r18;
        boolean $z0, $z1;
        java.lang.Thread $r12;
        java.lang.ClassLoader $r13;

        r0 := @this: org.quartz.simpl.SimpleThreadPool;

        i0 := @parameter0: int;

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        r0.<org.quartz.simpl.SimpleThreadPool: java.util.List workers> = $r2;

        i2 = 1;

     label1:
        if i2 > i0 goto label4;

        r18 = virtualinvoke r0.<org.quartz.simpl.SimpleThreadPool: java.lang.String getThreadNamePrefix()>();

        if r18 != null goto label2;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = r0.<org.quartz.simpl.SimpleThreadPool: java.lang.String schedulerInstanceName>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_Worker");

        r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        $r4 = new org.quartz.simpl.SimpleThreadPool$WorkerThread;

        $r6 = r0.<org.quartz.simpl.SimpleThreadPool: java.lang.ThreadGroup threadGroup>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r18);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = virtualinvoke r0.<org.quartz.simpl.SimpleThreadPool: int getThreadPriority()>();

        $z0 = virtualinvoke r0.<org.quartz.simpl.SimpleThreadPool: boolean isMakeThreadsDaemons()>();

        specialinvoke $r4.<org.quartz.simpl.SimpleThreadPool$WorkerThread: void <init>(org.quartz.simpl.SimpleThreadPool,org.quartz.simpl.SimpleThreadPool,java.lang.ThreadGroup,java.lang.String,int,boolean)>(r0, r0, $r6, $r10, $i1, $z0);

        $z1 = virtualinvoke r0.<org.quartz.simpl.SimpleThreadPool: boolean isThreadsInheritContextClassLoaderOfInitializingThread()>();

        if $z1 == 0 goto label3;

        $r12 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r13 = virtualinvoke $r12.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        virtualinvoke $r4.<org.quartz.simpl.SimpleThreadPool$WorkerThread: void setContextClassLoader(java.lang.ClassLoader)>($r13);

     label3:
        $r11 = r0.<org.quartz.simpl.SimpleThreadPool: java.util.List workers>;

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r4);

        i2 = i2 + 1;

        goto label1;

     label4:
        $r3 = r0.<org.quartz.simpl.SimpleThreadPool: java.util.List workers>;

        return $r3;
    }

    public void shutdown()
    {
        org.quartz.simpl.SimpleThreadPool r0;

        r0 := @this: org.quartz.simpl.SimpleThreadPool;

        virtualinvoke r0.<org.quartz.simpl.SimpleThreadPool: void shutdown(boolean)>(1);

        return;
    }

    public void shutdown(boolean)
    {
        org.quartz.simpl.SimpleThreadPool r0;
        boolean z0, $z1, $z2, z4, $z5;
        java.lang.Object $r4, $r8, $r13, $r15, $r23, $r24, $r25;
        org.slf4j.Logger $r5, $r11, $r16, $r41;
        java.util.List $r6, $r7, $r10;
        java.util.LinkedList $r9, $r14, $r26;
        int $i0;
        java.lang.Thread $r12, $r28;
        java.lang.StringBuilder $r17, $r18, $r20, $r21;
        java.lang.String $r19, $r22;
        java.lang.Throwable $r27, $r30;
        java.lang.InterruptedException $r29, $r31, $r32;
        java.util.Iterator r33, r38;
        org.quartz.simpl.SimpleThreadPool$WorkerThread r34, r36, r39;

        r0 := @this: org.quartz.simpl.SimpleThreadPool;

        z0 := @parameter0: boolean;

        $r4 = r0.<org.quartz.simpl.SimpleThreadPool: java.lang.Object nextRunnableLock>;

        entermonitor $r4;

     label01:
        $r5 = virtualinvoke r0.<org.quartz.simpl.SimpleThreadPool: org.slf4j.Logger getLog()>();

        interfaceinvoke $r5.<org.slf4j.Logger: void debug(java.lang.String)>("Shutting down threadpool...");

        r0.<org.quartz.simpl.SimpleThreadPool: boolean isShutdown> = 1;

        $r6 = r0.<org.quartz.simpl.SimpleThreadPool: java.util.List workers>;

        if $r6 != null goto label03;

        exitmonitor $r4;

     label02:
        return;

     label03:
        $r7 = r0.<org.quartz.simpl.SimpleThreadPool: java.util.List workers>;

        r33 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z1 = interfaceinvoke r33.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label05;

        $r25 = interfaceinvoke r33.<java.util.Iterator: java.lang.Object next()>();

        r34 = (org.quartz.simpl.SimpleThreadPool$WorkerThread) $r25;

        virtualinvoke r34.<org.quartz.simpl.SimpleThreadPool$WorkerThread: void shutdown()>();

        $r26 = r0.<org.quartz.simpl.SimpleThreadPool: java.util.LinkedList availWorkers>;

        virtualinvoke $r26.<java.util.LinkedList: boolean remove(java.lang.Object)>(r34);

        goto label04;

     label05:
        $r8 = r0.<org.quartz.simpl.SimpleThreadPool: java.lang.Object nextRunnableLock>;

        virtualinvoke $r8.<java.lang.Object: void notifyAll()>();

        if z0 != 1 goto label26;

        z4 = 0;

     label06:
        $z5 = r0.<org.quartz.simpl.SimpleThreadPool: boolean handoffPending>;

        if $z5 == 0 goto label10;

     label07:
        $r24 = r0.<org.quartz.simpl.SimpleThreadPool: java.lang.Object nextRunnableLock>;

        virtualinvoke $r24.<java.lang.Object: void wait(long)>(100L);

     label08:
        goto label06;

     label09:
        $r31 := @caughtexception;

        z4 = 1;

        goto label06;

     label10:
        $r9 = r0.<org.quartz.simpl.SimpleThreadPool: java.util.LinkedList busyWorkers>;

        $i0 = virtualinvoke $r9.<java.util.LinkedList: int size()>();

        if $i0 <= 0 goto label15;

        $r14 = r0.<org.quartz.simpl.SimpleThreadPool: java.util.LinkedList busyWorkers>;

        $r15 = virtualinvoke $r14.<java.util.LinkedList: java.lang.Object getFirst()>();

        r36 = (org.quartz.simpl.SimpleThreadPool$WorkerThread) $r15;

     label11:
        $r16 = virtualinvoke r0.<org.quartz.simpl.SimpleThreadPool: org.slf4j.Logger getLog()>();

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Waiting for thread ");

        $r19 = virtualinvoke r36.<org.quartz.simpl.SimpleThreadPool$WorkerThread: java.lang.String getName()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to shut down");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r16.<org.slf4j.Logger: void debug(java.lang.String)>($r22);

        $r23 = r0.<org.quartz.simpl.SimpleThreadPool: java.lang.Object nextRunnableLock>;

        virtualinvoke $r23.<java.lang.Object: void wait(long)>(2000L);

     label12:
        goto label14;

     label13:
        $r29 := @caughtexception;

        z4 = 1;

     label14:
        goto label10;

     label15:
        $r10 = r0.<org.quartz.simpl.SimpleThreadPool: java.util.List workers>;

        r38 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label16:
        $z2 = interfaceinvoke r38.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label21;

        $r13 = interfaceinvoke r38.<java.util.Iterator: java.lang.Object next()>();

        r39 = (org.quartz.simpl.SimpleThreadPool$WorkerThread) $r13;

     label17:
        virtualinvoke r39.<org.quartz.simpl.SimpleThreadPool$WorkerThread: void join()>();

        interfaceinvoke r38.<java.util.Iterator: void remove()>();

     label18:
        goto label20;

     label19:
        $r32 := @caughtexception;

        z4 = 1;

     label20:
        goto label16;

     label21:
        if z4 == 0 goto label25;

        $r12 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r12.<java.lang.Thread: void interrupt()>();

        goto label25;

     label22:
        $r27 := @caughtexception;

     label23:
        if z4 == 0 goto label24;

        $r28 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r28.<java.lang.Thread: void interrupt()>();

     label24:
        throw $r27;

     label25:
        $r11 = virtualinvoke r0.<org.quartz.simpl.SimpleThreadPool: org.slf4j.Logger getLog()>();

        interfaceinvoke $r11.<org.slf4j.Logger: void debug(java.lang.String)>("No executing jobs remaining, all threads stopped.");

     label26:
        $r41 = virtualinvoke r0.<org.quartz.simpl.SimpleThreadPool: org.slf4j.Logger getLog()>();

        interfaceinvoke $r41.<org.slf4j.Logger: void debug(java.lang.String)>("Shutdown of threadpool complete.");

        exitmonitor $r4;

     label27:
        goto label30;

     label28:
        $r30 := @caughtexception;

        exitmonitor $r4;

     label29:
        throw $r30;

     label30:
        return;

        catch java.lang.InterruptedException from label07 to label08 with label09;
        catch java.lang.InterruptedException from label11 to label12 with label13;
        catch java.lang.InterruptedException from label17 to label18 with label19;
        catch java.lang.Throwable from label06 to label21 with label22;
        catch java.lang.Throwable from label22 to label23 with label22;
        catch java.lang.Throwable from label01 to label02 with label28;
        catch java.lang.Throwable from label03 to label27 with label28;
        catch java.lang.Throwable from label28 to label29 with label28;
    }

    public boolean runInThread(java.lang.Runnable)
    {
        org.quartz.simpl.SimpleThreadPool r0;
        java.lang.Runnable r1;
        java.lang.Object $r4, $r9, $r11, $r13;
        boolean $z0, $z1, $z5;
        org.quartz.simpl.SimpleThreadPool$WorkerThread $r5, r18;
        java.lang.ThreadGroup $r6;
        int $i0, $i1;
        java.util.LinkedList $r7, $r10, $r12, $r16;
        java.util.List $r8;
        java.lang.InterruptedException $r14;
        java.lang.Throwable $r15;

        r0 := @this: org.quartz.simpl.SimpleThreadPool;

        r1 := @parameter0: java.lang.Runnable;

        if r1 != null goto label01;

        return 0;

     label01:
        $r4 = r0.<org.quartz.simpl.SimpleThreadPool: java.lang.Object nextRunnableLock>;

        entermonitor $r4;

     label02:
        r0.<org.quartz.simpl.SimpleThreadPool: boolean handoffPending> = 1;

     label03:
        $r16 = r0.<org.quartz.simpl.SimpleThreadPool: java.util.LinkedList availWorkers>;

        $i1 = virtualinvoke $r16.<java.util.LinkedList: int size()>();

        if $i1 >= 1 goto label07;

        $z5 = r0.<org.quartz.simpl.SimpleThreadPool: boolean isShutdown>;

        if $z5 != 0 goto label07;

     label04:
        $r13 = r0.<org.quartz.simpl.SimpleThreadPool: java.lang.Object nextRunnableLock>;

        virtualinvoke $r13.<java.lang.Object: void wait(long)>(500L);

     label05:
        goto label03;

     label06:
        $r14 := @caughtexception;

        goto label03;

     label07:
        $z0 = r0.<org.quartz.simpl.SimpleThreadPool: boolean isShutdown>;

        if $z0 != 0 goto label08;

        $r10 = r0.<org.quartz.simpl.SimpleThreadPool: java.util.LinkedList availWorkers>;

        $r11 = virtualinvoke $r10.<java.util.LinkedList: java.lang.Object removeFirst()>();

        r18 = (org.quartz.simpl.SimpleThreadPool$WorkerThread) $r11;

        $r12 = r0.<org.quartz.simpl.SimpleThreadPool: java.util.LinkedList busyWorkers>;

        virtualinvoke $r12.<java.util.LinkedList: boolean add(java.lang.Object)>(r18);

        virtualinvoke r18.<org.quartz.simpl.SimpleThreadPool$WorkerThread: void run(java.lang.Runnable)>(r1);

        goto label09;

     label08:
        $r5 = new org.quartz.simpl.SimpleThreadPool$WorkerThread;

        $r6 = r0.<org.quartz.simpl.SimpleThreadPool: java.lang.ThreadGroup threadGroup>;

        $i0 = r0.<org.quartz.simpl.SimpleThreadPool: int prio>;

        $z1 = virtualinvoke r0.<org.quartz.simpl.SimpleThreadPool: boolean isMakeThreadsDaemons()>();

        specialinvoke $r5.<org.quartz.simpl.SimpleThreadPool$WorkerThread: void <init>(org.quartz.simpl.SimpleThreadPool,org.quartz.simpl.SimpleThreadPool,java.lang.ThreadGroup,java.lang.String,int,boolean,java.lang.Runnable)>(r0, r0, $r6, "WorkerThread-LastJob", $i0, $z1, r1);

        $r7 = r0.<org.quartz.simpl.SimpleThreadPool: java.util.LinkedList busyWorkers>;

        virtualinvoke $r7.<java.util.LinkedList: boolean add(java.lang.Object)>($r5);

        $r8 = r0.<org.quartz.simpl.SimpleThreadPool: java.util.List workers>;

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r5);

        virtualinvoke $r5.<org.quartz.simpl.SimpleThreadPool$WorkerThread: void start()>();

     label09:
        $r9 = r0.<org.quartz.simpl.SimpleThreadPool: java.lang.Object nextRunnableLock>;

        virtualinvoke $r9.<java.lang.Object: void notifyAll()>();

        r0.<org.quartz.simpl.SimpleThreadPool: boolean handoffPending> = 0;

        exitmonitor $r4;

     label10:
        goto label13;

     label11:
        $r15 := @caughtexception;

        exitmonitor $r4;

     label12:
        throw $r15;

     label13:
        return 1;

        catch java.lang.InterruptedException from label04 to label05 with label06;
        catch java.lang.Throwable from label02 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public int blockForAvailableThreads()
    {
        org.quartz.simpl.SimpleThreadPool r0;
        java.lang.Object $r4, $r6;
        boolean $z0, $z1;
        java.util.LinkedList $r5, $r9;
        int $i0, $i1;
        java.lang.InterruptedException $r7;
        java.lang.Throwable $r8;

        r0 := @this: org.quartz.simpl.SimpleThreadPool;

        $r4 = r0.<org.quartz.simpl.SimpleThreadPool: java.lang.Object nextRunnableLock>;

        entermonitor $r4;

     label1:
        $r9 = r0.<org.quartz.simpl.SimpleThreadPool: java.util.LinkedList availWorkers>;

        $i1 = virtualinvoke $r9.<java.util.LinkedList: int size()>();

        if $i1 < 1 goto label2;

        $z1 = r0.<org.quartz.simpl.SimpleThreadPool: boolean handoffPending>;

        if $z1 == 0 goto label6;

     label2:
        $z0 = r0.<org.quartz.simpl.SimpleThreadPool: boolean isShutdown>;

        if $z0 != 0 goto label6;

     label3:
        $r6 = r0.<org.quartz.simpl.SimpleThreadPool: java.lang.Object nextRunnableLock>;

        virtualinvoke $r6.<java.lang.Object: void wait(long)>(500L);

     label4:
        goto label1;

     label5:
        $r7 := @caughtexception;

        goto label1;

     label6:
        $r5 = r0.<org.quartz.simpl.SimpleThreadPool: java.util.LinkedList availWorkers>;

        $i0 = virtualinvoke $r5.<java.util.LinkedList: int size()>();

        exitmonitor $r4;

     label7:
        return $i0;

     label8:
        $r8 := @caughtexception;

        exitmonitor $r4;

     label9:
        throw $r8;

        catch java.lang.InterruptedException from label3 to label4 with label5;
        catch java.lang.Throwable from label1 to label7 with label8;
        catch java.lang.Throwable from label8 to label9 with label8;
    }

    protected void makeAvailable(org.quartz.simpl.SimpleThreadPool$WorkerThread)
    {
        org.quartz.simpl.SimpleThreadPool r0;
        org.quartz.simpl.SimpleThreadPool$WorkerThread r1;
        java.lang.Object $r4, $r6;
        boolean $z0;
        java.util.LinkedList $r5, $r7;
        java.lang.Throwable $r8;

        r0 := @this: org.quartz.simpl.SimpleThreadPool;

        r1 := @parameter0: org.quartz.simpl.SimpleThreadPool$WorkerThread;

        $r4 = r0.<org.quartz.simpl.SimpleThreadPool: java.lang.Object nextRunnableLock>;

        entermonitor $r4;

     label1:
        $z0 = r0.<org.quartz.simpl.SimpleThreadPool: boolean isShutdown>;

        if $z0 != 0 goto label2;

        $r7 = r0.<org.quartz.simpl.SimpleThreadPool: java.util.LinkedList availWorkers>;

        virtualinvoke $r7.<java.util.LinkedList: boolean add(java.lang.Object)>(r1);

     label2:
        $r5 = r0.<org.quartz.simpl.SimpleThreadPool: java.util.LinkedList busyWorkers>;

        virtualinvoke $r5.<java.util.LinkedList: boolean remove(java.lang.Object)>(r1);

        $r6 = r0.<org.quartz.simpl.SimpleThreadPool: java.lang.Object nextRunnableLock>;

        virtualinvoke $r6.<java.lang.Object: void notifyAll()>();

        exitmonitor $r4;

     label3:
        goto label6;

     label4:
        $r8 := @caughtexception;

        exitmonitor $r4;

     label5:
        throw $r8;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    protected void clearFromBusyWorkersList(org.quartz.simpl.SimpleThreadPool$WorkerThread)
    {
        org.quartz.simpl.SimpleThreadPool r0;
        org.quartz.simpl.SimpleThreadPool$WorkerThread r1;
        java.lang.Object $r4, $r6;
        java.util.LinkedList $r5;
        java.lang.Throwable $r7;

        r0 := @this: org.quartz.simpl.SimpleThreadPool;

        r1 := @parameter0: org.quartz.simpl.SimpleThreadPool$WorkerThread;

        $r4 = r0.<org.quartz.simpl.SimpleThreadPool: java.lang.Object nextRunnableLock>;

        entermonitor $r4;

     label1:
        $r5 = r0.<org.quartz.simpl.SimpleThreadPool: java.util.LinkedList busyWorkers>;

        virtualinvoke $r5.<java.util.LinkedList: boolean remove(java.lang.Object)>(r1);

        $r6 = r0.<org.quartz.simpl.SimpleThreadPool: java.lang.Object nextRunnableLock>;

        virtualinvoke $r6.<java.lang.Object: void notifyAll()>();

        exitmonitor $r4;

     label2:
        goto label5;

     label3:
        $r7 := @caughtexception;

        exitmonitor $r4;

     label4:
        throw $r7;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
}
