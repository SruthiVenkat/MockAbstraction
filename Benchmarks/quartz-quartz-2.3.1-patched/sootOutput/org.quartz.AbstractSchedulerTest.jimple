public abstract class org.quartz.AbstractSchedulerTest extends java.lang.Object
{
    private static final java.lang.String BARRIER;
    private static final java.lang.String DATE_STAMPS;
    private static final java.lang.String JOB_THREAD;
    public static final long TEST_TIMEOUT_SECONDS;

    public void <init>()
    {
        org.quartz.AbstractSchedulerTest r0;

        r0 := @this: org.quartz.AbstractSchedulerTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected abstract org.quartz.Scheduler createScheduler(java.lang.String, int) throws org.quartz.SchedulerException;

    public void testBasicStorageFunctions() throws java.lang.Exception
    {
        org.quartz.AbstractSchedulerTest r0;
        org.quartz.Scheduler r1;
        java.util.List r2, r3;
        org.quartz.JobBuilder $r4, $r5, $r6, $r7, $r25, $r26, $r27, $r37, $r38, $r39, $r69, $r70, $r71;
        org.quartz.JobKey $r8, $r9, $r10, $r11, $r23;
        boolean $z0, $z1, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27;
        org.quartz.TriggerBuilder $r12, $r13, $r14, $r15, $r19, $r28, $r29, $r30, $r31, $r35, $r40, $r41, $r42, $r43, $r47, $r72, $r73, $r74, $r75, $r79;
        org.quartz.SimpleScheduleBuilder $r16, $r17, $r18, $r32, $r33, $r34, $r44, $r45, $r46, $r76, $r77, $r78;
        org.quartz.TriggerKey $r20, $r22, $r24, $r59, $r61, $r62, $r64, $r65, $r82, $r84, $r87, $r89, $r92, $r93, $r98;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        org.quartz.impl.matchers.GroupMatcher $r51, $r52, $r55, $r56, $r68, $r86, $r94, $r95, $r99, $r100;
        org.quartz.Trigger$TriggerState $r60, $r63, $r66, $r83, $r85, $r88, $r90, r116, r117, r118, r123, r124, r125, r126;
        org.quartz.JobDetail r103, r104, r106, r108, r110, r120;
        org.quartz.Trigger r105, r107, r109, r111, r121;
        java.util.Set r112, r113, r114, r115, r119, r122, r127, r128, r129, r130, r131;

        r0 := @this: org.quartz.AbstractSchedulerTest;

        r1 = virtualinvoke r0.<org.quartz.AbstractSchedulerTest: org.quartz.Scheduler createScheduler(java.lang.String,int)>("testBasicStorageFunctions", 2);

        $r4 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob()>();

        $r5 = virtualinvoke $r4.<org.quartz.JobBuilder: org.quartz.JobBuilder ofType(java.lang.Class)>(class "Lorg/quartz/AbstractSchedulerTest$TestJob;");

        $r6 = virtualinvoke $r5.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String)>("j1");

        $r7 = virtualinvoke $r6.<org.quartz.JobBuilder: org.quartz.JobBuilder storeDurably()>();

        r103 = virtualinvoke $r7.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        $r8 = staticinvoke <org.quartz.JobKey: org.quartz.JobKey jobKey(java.lang.String)>("j1");

        $z0 = interfaceinvoke r1.<org.quartz.Scheduler: boolean checkExists(org.quartz.JobKey)>($r8);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("Unexpected existence of job named \'j1\'.", $z0);

        interfaceinvoke r1.<org.quartz.Scheduler: void addJob(org.quartz.JobDetail,boolean)>(r103, 0);

        $r9 = staticinvoke <org.quartz.JobKey: org.quartz.JobKey jobKey(java.lang.String)>("j1");

        $z1 = interfaceinvoke r1.<org.quartz.Scheduler: boolean checkExists(org.quartz.JobKey)>($r9);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Expected existence of job named \'j1\' but checkExists return false.", $z1);

        $r10 = staticinvoke <org.quartz.JobKey: org.quartz.JobKey jobKey(java.lang.String)>("j1");

        r104 = interfaceinvoke r1.<org.quartz.Scheduler: org.quartz.JobDetail getJobDetail(org.quartz.JobKey)>($r10);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.String,java.lang.Object)>("Stored job not found!", r104);

        $r11 = staticinvoke <org.quartz.JobKey: org.quartz.JobKey jobKey(java.lang.String)>("j1");

        interfaceinvoke r1.<org.quartz.Scheduler: boolean deleteJob(org.quartz.JobKey)>($r11);

        $r12 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r13 = virtualinvoke $r12.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String)>("t1");

        $r14 = virtualinvoke $r13.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder forJob(org.quartz.JobDetail)>(r104);

        $r15 = virtualinvoke $r14.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder startNow()>();

        $r16 = staticinvoke <org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder simpleSchedule()>();

        $r17 = virtualinvoke $r16.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder repeatForever()>();

        $r18 = virtualinvoke $r17.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder withIntervalInSeconds(int)>(5);

        $r19 = virtualinvoke $r15.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>($r18);

        r105 = virtualinvoke $r19.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        $r20 = staticinvoke <org.quartz.TriggerKey: org.quartz.TriggerKey triggerKey(java.lang.String)>("t1");

        $z3 = interfaceinvoke r1.<org.quartz.Scheduler: boolean checkExists(org.quartz.TriggerKey)>($r20);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("Unexpected existence of trigger named \'11\'.", $z3);

        interfaceinvoke r1.<org.quartz.Scheduler: java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)>(r104, r105);

        $r22 = staticinvoke <org.quartz.TriggerKey: org.quartz.TriggerKey triggerKey(java.lang.String)>("t1");

        $z4 = interfaceinvoke r1.<org.quartz.Scheduler: boolean checkExists(org.quartz.TriggerKey)>($r22);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Expected existence of trigger named \'t1\' but checkExists return false.", $z4);

        $r23 = staticinvoke <org.quartz.JobKey: org.quartz.JobKey jobKey(java.lang.String)>("j1");

        r106 = interfaceinvoke r1.<org.quartz.Scheduler: org.quartz.JobDetail getJobDetail(org.quartz.JobKey)>($r23);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.String,java.lang.Object)>("Stored job not found!", r106);

        $r24 = staticinvoke <org.quartz.TriggerKey: org.quartz.TriggerKey triggerKey(java.lang.String)>("t1");

        r107 = interfaceinvoke r1.<org.quartz.Scheduler: org.quartz.Trigger getTrigger(org.quartz.TriggerKey)>($r24);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.String,java.lang.Object)>("Stored trigger not found!", r107);

        $r25 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob()>();

        $r26 = virtualinvoke $r25.<org.quartz.JobBuilder: org.quartz.JobBuilder ofType(java.lang.Class)>(class "Lorg/quartz/AbstractSchedulerTest$TestJob;");

        $r27 = virtualinvoke $r26.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String,java.lang.String)>("j2", "g1");

        r108 = virtualinvoke $r27.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        $r28 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r29 = virtualinvoke $r28.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String,java.lang.String)>("t2", "g1");

        $r30 = virtualinvoke $r29.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder forJob(org.quartz.JobDetail)>(r108);

        $r31 = virtualinvoke $r30.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder startNow()>();

        $r32 = staticinvoke <org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder simpleSchedule()>();

        $r33 = virtualinvoke $r32.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder repeatForever()>();

        $r34 = virtualinvoke $r33.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder withIntervalInSeconds(int)>(5);

        $r35 = virtualinvoke $r31.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>($r34);

        r109 = virtualinvoke $r35.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        interfaceinvoke r1.<org.quartz.Scheduler: java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)>(r108, r109);

        $r37 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob()>();

        $r38 = virtualinvoke $r37.<org.quartz.JobBuilder: org.quartz.JobBuilder ofType(java.lang.Class)>(class "Lorg/quartz/AbstractSchedulerTest$TestJob;");

        $r39 = virtualinvoke $r38.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String,java.lang.String)>("j3", "g1");

        r110 = virtualinvoke $r39.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        $r40 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r41 = virtualinvoke $r40.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String,java.lang.String)>("t3", "g1");

        $r42 = virtualinvoke $r41.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder forJob(org.quartz.JobDetail)>(r110);

        $r43 = virtualinvoke $r42.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder startNow()>();

        $r44 = staticinvoke <org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder simpleSchedule()>();

        $r45 = virtualinvoke $r44.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder repeatForever()>();

        $r46 = virtualinvoke $r45.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder withIntervalInSeconds(int)>(5);

        $r47 = virtualinvoke $r43.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>($r46);

        r111 = virtualinvoke $r47.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        interfaceinvoke r1.<org.quartz.Scheduler: java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)>(r110, r111);

        r2 = interfaceinvoke r1.<org.quartz.Scheduler: java.util.List getJobGroupNames()>();

        r3 = interfaceinvoke r1.<org.quartz.Scheduler: java.util.List getTriggerGroupNames()>();

        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i0 != 2 goto label01;

        $z15 = 1;

        goto label02;

     label01:
        $z15 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Job group list size expected to be = 2 ", $z15);

        $i1 = interfaceinvoke r3.<java.util.List: int size()>();

        if $i1 != 2 goto label03;

        $z16 = 1;

        goto label04;

     label03:
        $z16 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Trigger group list size expected to be = 2 ", $z16);

        $r51 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher jobGroupEquals(java.lang.String)>("DEFAULT");

        r112 = interfaceinvoke r1.<org.quartz.Scheduler: java.util.Set getJobKeys(org.quartz.impl.matchers.GroupMatcher)>($r51);

        $r52 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher triggerGroupEquals(java.lang.String)>("DEFAULT");

        r113 = interfaceinvoke r1.<org.quartz.Scheduler: java.util.Set getTriggerKeys(org.quartz.impl.matchers.GroupMatcher)>($r52);

        $i2 = interfaceinvoke r112.<java.util.Set: int size()>();

        if $i2 != 1 goto label05;

        $z17 = 1;

        goto label06;

     label05:
        $z17 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Number of jobs expected in default group was 1 ", $z17);

        $i3 = interfaceinvoke r113.<java.util.Set: int size()>();

        if $i3 != 1 goto label07;

        $z18 = 1;

        goto label08;

     label07:
        $z18 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Number of triggers expected in default group was 1 ", $z18);

        $r55 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher jobGroupEquals(java.lang.String)>("g1");

        r114 = interfaceinvoke r1.<org.quartz.Scheduler: java.util.Set getJobKeys(org.quartz.impl.matchers.GroupMatcher)>($r55);

        $r56 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher triggerGroupEquals(java.lang.String)>("g1");

        r115 = interfaceinvoke r1.<org.quartz.Scheduler: java.util.Set getTriggerKeys(org.quartz.impl.matchers.GroupMatcher)>($r56);

        $i4 = interfaceinvoke r114.<java.util.Set: int size()>();

        if $i4 != 2 goto label09;

        $z19 = 1;

        goto label10;

     label09:
        $z19 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Number of jobs expected in \'g1\' group was 2 ", $z19);

        $i5 = interfaceinvoke r115.<java.util.Set: int size()>();

        if $i5 != 2 goto label11;

        $z20 = 1;

        goto label12;

     label11:
        $z20 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Number of triggers expected in \'g1\' group was 2 ", $z20);

        $r59 = staticinvoke <org.quartz.TriggerKey: org.quartz.TriggerKey triggerKey(java.lang.String,java.lang.String)>("t2", "g1");

        r116 = interfaceinvoke r1.<org.quartz.Scheduler: org.quartz.Trigger$TriggerState getTriggerState(org.quartz.TriggerKey)>($r59);

        $r60 = <org.quartz.Trigger$TriggerState: org.quartz.Trigger$TriggerState NORMAL>;

        $z5 = virtualinvoke r116.<org.quartz.Trigger$TriggerState: boolean equals(java.lang.Object)>($r60);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("State of trigger t2 expected to be NORMAL ", $z5);

        $r61 = staticinvoke <org.quartz.TriggerKey: org.quartz.TriggerKey triggerKey(java.lang.String,java.lang.String)>("t2", "g1");

        interfaceinvoke r1.<org.quartz.Scheduler: void pauseTrigger(org.quartz.TriggerKey)>($r61);

        $r62 = staticinvoke <org.quartz.TriggerKey: org.quartz.TriggerKey triggerKey(java.lang.String,java.lang.String)>("t2", "g1");

        r117 = interfaceinvoke r1.<org.quartz.Scheduler: org.quartz.Trigger$TriggerState getTriggerState(org.quartz.TriggerKey)>($r62);

        $r63 = <org.quartz.Trigger$TriggerState: org.quartz.Trigger$TriggerState PAUSED>;

        $z6 = virtualinvoke r117.<org.quartz.Trigger$TriggerState: boolean equals(java.lang.Object)>($r63);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("State of trigger t2 expected to be PAUSED ", $z6);

        $r64 = staticinvoke <org.quartz.TriggerKey: org.quartz.TriggerKey triggerKey(java.lang.String,java.lang.String)>("t2", "g1");

        interfaceinvoke r1.<org.quartz.Scheduler: void resumeTrigger(org.quartz.TriggerKey)>($r64);

        $r65 = staticinvoke <org.quartz.TriggerKey: org.quartz.TriggerKey triggerKey(java.lang.String,java.lang.String)>("t2", "g1");

        r118 = interfaceinvoke r1.<org.quartz.Scheduler: org.quartz.Trigger$TriggerState getTriggerState(org.quartz.TriggerKey)>($r65);

        $r66 = <org.quartz.Trigger$TriggerState: org.quartz.Trigger$TriggerState NORMAL>;

        $z7 = virtualinvoke r118.<org.quartz.Trigger$TriggerState: boolean equals(java.lang.Object)>($r66);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("State of trigger t2 expected to be NORMAL ", $z7);

        r119 = interfaceinvoke r1.<org.quartz.Scheduler: java.util.Set getPausedTriggerGroups()>();

        $i6 = interfaceinvoke r119.<java.util.Set: int size()>();

        if $i6 != 0 goto label13;

        $z21 = 1;

        goto label14;

     label13:
        $z21 = 0;

     label14:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Size of paused trigger groups list expected to be 0 ", $z21);

        $r68 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher triggerGroupEquals(java.lang.String)>("g1");

        interfaceinvoke r1.<org.quartz.Scheduler: void pauseTriggers(org.quartz.impl.matchers.GroupMatcher)>($r68);

        $r69 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob()>();

        $r70 = virtualinvoke $r69.<org.quartz.JobBuilder: org.quartz.JobBuilder ofType(java.lang.Class)>(class "Lorg/quartz/AbstractSchedulerTest$TestJob;");

        $r71 = virtualinvoke $r70.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String,java.lang.String)>("j4", "g1");

        r120 = virtualinvoke $r71.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        $r72 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r73 = virtualinvoke $r72.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String,java.lang.String)>("t4", "g1");

        $r74 = virtualinvoke $r73.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder forJob(org.quartz.JobDetail)>(r120);

        $r75 = virtualinvoke $r74.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder startNow()>();

        $r76 = staticinvoke <org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder simpleSchedule()>();

        $r77 = virtualinvoke $r76.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder repeatForever()>();

        $r78 = virtualinvoke $r77.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder withIntervalInSeconds(int)>(5);

        $r79 = virtualinvoke $r75.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>($r78);

        r121 = virtualinvoke $r79.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        interfaceinvoke r1.<org.quartz.Scheduler: java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)>(r120, r121);

        r122 = interfaceinvoke r1.<org.quartz.Scheduler: java.util.Set getPausedTriggerGroups()>();

        $i7 = interfaceinvoke r122.<java.util.Set: int size()>();

        if $i7 != 1 goto label15;

        $z22 = 1;

        goto label16;

     label15:
        $z22 = 0;

     label16:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Size of paused trigger groups list expected to be 1 ", $z22);

        $r82 = staticinvoke <org.quartz.TriggerKey: org.quartz.TriggerKey triggerKey(java.lang.String,java.lang.String)>("t2", "g1");

        r123 = interfaceinvoke r1.<org.quartz.Scheduler: org.quartz.Trigger$TriggerState getTriggerState(org.quartz.TriggerKey)>($r82);

        $r83 = <org.quartz.Trigger$TriggerState: org.quartz.Trigger$TriggerState PAUSED>;

        $z8 = virtualinvoke r123.<org.quartz.Trigger$TriggerState: boolean equals(java.lang.Object)>($r83);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("State of trigger t2 expected to be PAUSED ", $z8);

        $r84 = staticinvoke <org.quartz.TriggerKey: org.quartz.TriggerKey triggerKey(java.lang.String,java.lang.String)>("t4", "g1");

        r124 = interfaceinvoke r1.<org.quartz.Scheduler: org.quartz.Trigger$TriggerState getTriggerState(org.quartz.TriggerKey)>($r84);

        $r85 = <org.quartz.Trigger$TriggerState: org.quartz.Trigger$TriggerState PAUSED>;

        $z9 = virtualinvoke r124.<org.quartz.Trigger$TriggerState: boolean equals(java.lang.Object)>($r85);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("State of trigger t4 expected to be PAUSED ", $z9);

        $r86 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher triggerGroupEquals(java.lang.String)>("g1");

        interfaceinvoke r1.<org.quartz.Scheduler: void resumeTriggers(org.quartz.impl.matchers.GroupMatcher)>($r86);

        $r87 = staticinvoke <org.quartz.TriggerKey: org.quartz.TriggerKey triggerKey(java.lang.String,java.lang.String)>("t2", "g1");

        r125 = interfaceinvoke r1.<org.quartz.Scheduler: org.quartz.Trigger$TriggerState getTriggerState(org.quartz.TriggerKey)>($r87);

        $r88 = <org.quartz.Trigger$TriggerState: org.quartz.Trigger$TriggerState NORMAL>;

        $z10 = virtualinvoke r125.<org.quartz.Trigger$TriggerState: boolean equals(java.lang.Object)>($r88);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("State of trigger t2 expected to be NORMAL ", $z10);

        $r89 = staticinvoke <org.quartz.TriggerKey: org.quartz.TriggerKey triggerKey(java.lang.String,java.lang.String)>("t4", "g1");

        r126 = interfaceinvoke r1.<org.quartz.Scheduler: org.quartz.Trigger$TriggerState getTriggerState(org.quartz.TriggerKey)>($r89);

        $r90 = <org.quartz.Trigger$TriggerState: org.quartz.Trigger$TriggerState NORMAL>;

        $z11 = virtualinvoke r126.<org.quartz.Trigger$TriggerState: boolean equals(java.lang.Object)>($r90);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("State of trigger t4 expected to be NORMAL ", $z11);

        r127 = interfaceinvoke r1.<org.quartz.Scheduler: java.util.Set getPausedTriggerGroups()>();

        $i8 = interfaceinvoke r127.<java.util.Set: int size()>();

        if $i8 != 0 goto label17;

        $z23 = 1;

        goto label18;

     label17:
        $z23 = 0;

     label18:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Size of paused trigger groups list expected to be 0 ", $z23);

        $r92 = staticinvoke <org.quartz.TriggerKey: org.quartz.TriggerKey triggerKey(java.lang.String)>("foasldfksajdflk");

        $z12 = interfaceinvoke r1.<org.quartz.Scheduler: boolean unscheduleJob(org.quartz.TriggerKey)>($r92);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("Scheduler should have returned \'false\' from attempt to unschedule non-existing trigger. ", $z12);

        $r93 = staticinvoke <org.quartz.TriggerKey: org.quartz.TriggerKey triggerKey(java.lang.String,java.lang.String)>("t3", "g1");

        $z13 = interfaceinvoke r1.<org.quartz.Scheduler: boolean unscheduleJob(org.quartz.TriggerKey)>($r93);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Scheduler should have returned \'true\' from attempt to unschedule existing trigger. ", $z13);

        $r94 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher jobGroupEquals(java.lang.String)>("g1");

        r128 = interfaceinvoke r1.<org.quartz.Scheduler: java.util.Set getJobKeys(org.quartz.impl.matchers.GroupMatcher)>($r94);

        $r95 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher triggerGroupEquals(java.lang.String)>("g1");

        r129 = interfaceinvoke r1.<org.quartz.Scheduler: java.util.Set getTriggerKeys(org.quartz.impl.matchers.GroupMatcher)>($r95);

        $i9 = interfaceinvoke r128.<java.util.Set: int size()>();

        if $i9 != 2 goto label19;

        $z24 = 1;

        goto label20;

     label19:
        $z24 = 0;

     label20:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Number of jobs expected in \'g1\' group was 1 ", $z24);

        $i10 = interfaceinvoke r129.<java.util.Set: int size()>();

        if $i10 != 2 goto label21;

        $z25 = 1;

        goto label22;

     label21:
        $z25 = 0;

     label22:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Number of triggers expected in \'g1\' group was 1 ", $z25);

        $r98 = staticinvoke <org.quartz.TriggerKey: org.quartz.TriggerKey triggerKey(java.lang.String)>("t1");

        $z14 = interfaceinvoke r1.<org.quartz.Scheduler: boolean unscheduleJob(org.quartz.TriggerKey)>($r98);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Scheduler should have returned \'true\' from attempt to unschedule existing trigger. ", $z14);

        $r99 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher jobGroupEquals(java.lang.String)>("DEFAULT");

        r130 = interfaceinvoke r1.<org.quartz.Scheduler: java.util.Set getJobKeys(org.quartz.impl.matchers.GroupMatcher)>($r99);

        $r100 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher triggerGroupEquals(java.lang.String)>("DEFAULT");

        r131 = interfaceinvoke r1.<org.quartz.Scheduler: java.util.Set getTriggerKeys(org.quartz.impl.matchers.GroupMatcher)>($r100);

        $i11 = interfaceinvoke r130.<java.util.Set: int size()>();

        if $i11 != 1 goto label23;

        $z26 = 1;

        goto label24;

     label23:
        $z26 = 0;

     label24:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Number of jobs expected in default group was 1 ", $z26);

        $i12 = interfaceinvoke r131.<java.util.Set: int size()>();

        if $i12 != 0 goto label25;

        $z27 = 1;

        goto label26;

     label25:
        $z27 = 0;

     label26:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Number of triggers expected in default group was 0 ", $z27);

        interfaceinvoke r1.<org.quartz.Scheduler: void shutdown(boolean)>(1);

        return;
    }

    public void testDurableStorageFunctions() throws java.lang.Exception
    {
        org.quartz.AbstractSchedulerTest r0;
        org.quartz.Scheduler r1;
        org.quartz.JobDetail r2, r3;
        org.quartz.JobBuilder $r6, $r7, $r8, $r9, $r12, $r13, $r14;
        org.quartz.JobKey $r10, $r11, $r15, $r18;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Throwable $r16;
        org.quartz.SchedulerException $r17;

        r0 := @this: org.quartz.AbstractSchedulerTest;

        r1 = virtualinvoke r0.<org.quartz.AbstractSchedulerTest: org.quartz.Scheduler createScheduler(java.lang.String,int)>("testDurableStorageFunctions", 2);

     label1:
        $r6 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob()>();

        $r7 = virtualinvoke $r6.<org.quartz.JobBuilder: org.quartz.JobBuilder ofType(java.lang.Class)>(class "Lorg/quartz/AbstractSchedulerTest$TestJob;");

        $r8 = virtualinvoke $r7.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String)>("j1");

        $r9 = virtualinvoke $r8.<org.quartz.JobBuilder: org.quartz.JobBuilder storeDurably()>();

        r2 = virtualinvoke $r9.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        $r10 = staticinvoke <org.quartz.JobKey: org.quartz.JobKey jobKey(java.lang.String)>("j1");

        $z0 = interfaceinvoke r1.<org.quartz.Scheduler: boolean checkExists(org.quartz.JobKey)>($r10);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("Unexpected existence of job named \'j1\'.", $z0);

        interfaceinvoke r1.<org.quartz.Scheduler: void addJob(org.quartz.JobDetail,boolean)>(r2, 0);

        $r11 = staticinvoke <org.quartz.JobKey: org.quartz.JobKey jobKey(java.lang.String)>("j1");

        $z1 = interfaceinvoke r1.<org.quartz.Scheduler: boolean checkExists(org.quartz.JobKey)>($r11);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Unexpected non-existence of job named \'j1\'.", $z1);

        $r12 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob()>();

        $r13 = virtualinvoke $r12.<org.quartz.JobBuilder: org.quartz.JobBuilder ofType(java.lang.Class)>(class "Lorg/quartz/AbstractSchedulerTest$TestJob;");

        $r14 = virtualinvoke $r13.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String)>("j2");

        r3 = virtualinvoke $r14.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

     label2:
        interfaceinvoke r1.<org.quartz.Scheduler: void addJob(org.quartz.JobDetail,boolean)>(r3, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Storage of non-durable job should not have succeeded.");

     label3:
        goto label5;

     label4:
        $r17 := @caughtexception;

        $r18 = staticinvoke <org.quartz.JobKey: org.quartz.JobKey jobKey(java.lang.String)>("j2");

        $z3 = interfaceinvoke r1.<org.quartz.Scheduler: boolean checkExists(org.quartz.JobKey)>($r18);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("Unexpected existence of job named \'j2\'.", $z3);

     label5:
        interfaceinvoke r1.<org.quartz.Scheduler: void addJob(org.quartz.JobDetail,boolean,boolean)>(r3, 0, 1);

        $r15 = staticinvoke <org.quartz.JobKey: org.quartz.JobKey jobKey(java.lang.String)>("j2");

        $z2 = interfaceinvoke r1.<org.quartz.Scheduler: boolean checkExists(org.quartz.JobKey)>($r15);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Unexpected non-existence of job named \'j2\'.", $z2);

     label6:
        interfaceinvoke r1.<org.quartz.Scheduler: void shutdown(boolean)>(1);

        goto label9;

     label7:
        $r16 := @caughtexception;

     label8:
        interfaceinvoke r1.<org.quartz.Scheduler: void shutdown(boolean)>(1);

        throw $r16;

     label9:
        return;

        catch org.quartz.SchedulerException from label2 to label3 with label4;
        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public void testShutdownWithSleepReturnsAfterAllThreadsAreStopped() throws java.lang.Exception
    {
        org.quartz.AbstractSchedulerTest r0;
        java.util.Map r1, r3, r4;
        org.quartz.Scheduler r2;
        java.util.HashSet $r6;
        java.util.Set $r7, $r8, $r10, $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        int $i1, $i2;
        java.lang.Object $r12, $r32, $r53, $r64;
        java.lang.StringBuilder $r13, $r14, $r16, $r17, $r20, $r22, $r25, $r26, $r31, $r33, $r35, $r37, $r38, $r41, $r42, $r45, $r46, $r51, $r78, $r81;
        java.lang.String $r15, $r19, $r24, $r36, $r40, $r44, $r52, $r54, $r56, $r59, $r62, $r74, $r79, $r80, $r82;
        java.lang.Class $r18, $r39;
        java.lang.ThreadGroup $r21, $r23, $r27, $r28, $r29, $r30, $r43, $r47, $r48, $r49, $r50, $r55, $r58, $r61, $r70, $r71;
        java.io.PrintStream $r34, $r77;
        java.util.Iterator r66, r68, r72, r75;
        java.lang.Thread r67, r69, r73, r76;

        r0 := @this: org.quartz.AbstractSchedulerTest;

        r1 = staticinvoke <java.lang.Thread: java.util.Map getAllStackTraces()>();

        r2 = virtualinvoke r0.<org.quartz.AbstractSchedulerTest: org.quartz.Scheduler createScheduler(java.lang.String,int)>("testShutdownWithSleepReturnsAfterAllThreadsAreStopped", 5);

        staticinvoke <java.lang.Thread: void sleep(long)>(500L);

        r3 = staticinvoke <java.lang.Thread: java.util.Map getAllStackTraces()>();

        interfaceinvoke r2.<org.quartz.Scheduler: void shutdown(boolean)>(1);

        staticinvoke <java.lang.Thread: void sleep(long)>(200L);

        r4 = staticinvoke <java.lang.Thread: java.util.Map getAllStackTraces()>();

        $r6 = new java.util.HashSet;

        $r7 = interfaceinvoke r4.<java.util.Map: java.util.Set keySet()>();

        specialinvoke $r6.<java.util.HashSet: void <init>(java.util.Collection)>($r7);

        $r8 = interfaceinvoke r1.<java.util.Map: java.util.Set keySet()>();

        r66 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r66.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label02;

        $r64 = interfaceinvoke r66.<java.util.Iterator: java.lang.Object next()>();

        r67 = (java.lang.Thread) $r64;

        interfaceinvoke r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r67);

        goto label01;

     label02:
        r68 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label03:
        $z1 = interfaceinvoke r68.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label07;

        $r53 = interfaceinvoke r68.<java.util.Iterator: java.lang.Object next()>();

        r69 = (java.lang.Thread) $r53;

        $r54 = virtualinvoke r69.<java.lang.Thread: java.lang.String getName()>();

        $z4 = virtualinvoke $r54.<java.lang.String: boolean contains(java.lang.CharSequence)>("derby");

        if $z4 == 0 goto label04;

        $r61 = virtualinvoke r69.<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>();

        $r62 = virtualinvoke $r61.<java.lang.ThreadGroup: java.lang.String getName()>();

        $z7 = virtualinvoke $r62.<java.lang.String: boolean contains(java.lang.CharSequence)>("derby");

        if $z7 == 0 goto label04;

        interfaceinvoke r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r69);

     label04:
        $r70 = virtualinvoke r69.<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>();

        if $r70 == null goto label05;

        $r58 = virtualinvoke r69.<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>();

        $r59 = virtualinvoke $r58.<java.lang.ThreadGroup: java.lang.String getName()>();

        $z6 = virtualinvoke $r59.<java.lang.String: boolean equals(java.lang.Object)>("system");

        if $z6 == 0 goto label05;

        interfaceinvoke r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r69);

     label05:
        $r71 = virtualinvoke r69.<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>();

        if $r71 == null goto label06;

        $r55 = virtualinvoke r69.<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>();

        $r56 = virtualinvoke $r55.<java.lang.ThreadGroup: java.lang.String getName()>();

        $z5 = virtualinvoke $r56.<java.lang.String: boolean equals(java.lang.Object)>("main");

        if $z5 == 0 goto label06;

        interfaceinvoke r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r69);

     label06:
        goto label03;

     label07:
        $i1 = interfaceinvoke r4.<java.util.Map: int size()>();

        if $i1 <= 0 goto label17;

        $r10 = interfaceinvoke r4.<java.util.Map: java.util.Set keySet()>();

        r72 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label08:
        $z2 = interfaceinvoke r72.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label11;

        $r32 = interfaceinvoke r72.<java.util.Iterator: java.lang.Object next()>();

        r73 = (java.lang.Thread) $r32;

        $r34 = <java.lang.System: java.io.PrintStream out>;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("*** Found additional thread: ");

        $r36 = virtualinvoke r73.<java.lang.Thread: java.lang.String getName()>();

        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (of type ");

        $r39 = virtualinvoke r73.<java.lang.Object: java.lang.Class getClass()>();

        $r40 = virtualinvoke $r39.<java.lang.Class: java.lang.String getName()>();

        $r41 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")  in group: ");

        $r43 = virtualinvoke r73.<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>();

        $r44 = virtualinvoke $r43.<java.lang.ThreadGroup: java.lang.String getName()>();

        $r45 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r44);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with parent group: ");

        $r47 = virtualinvoke r73.<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>();

        $r48 = virtualinvoke $r47.<java.lang.ThreadGroup: java.lang.ThreadGroup getParent()>();

        if $r48 != null goto label09;

        $r74 = "-none-";

        goto label10;

     label09:
        $r49 = virtualinvoke r73.<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>();

        $r50 = virtualinvoke $r49.<java.lang.ThreadGroup: java.lang.ThreadGroup getParent()>();

        $r74 = virtualinvoke $r50.<java.lang.ThreadGroup: java.lang.String getName()>();

     label10:
        $r51 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r74);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r34.<java.io.PrintStream: void println(java.lang.String)>($r52);

        goto label08;

     label11:
        $r11 = interfaceinvoke r3.<java.util.Map: java.util.Set keySet()>();

        r75 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

     label12:
        $z3 = interfaceinvoke r75.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label17;

        $r12 = interfaceinvoke r75.<java.util.Iterator: java.lang.Object next()>();

        r76 = (java.lang.Thread) $r12;

        $r77 = <java.lang.System: java.io.PrintStream out>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("- Test runtime thread: ");

        $r15 = virtualinvoke r76.<java.lang.Thread: java.lang.String getName()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (of type ");

        $r18 = virtualinvoke r76.<java.lang.Object: java.lang.Class getClass()>();

        $r19 = virtualinvoke $r18.<java.lang.Class: java.lang.String getName()>();

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r78 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")  in group: ");

        $r21 = virtualinvoke r76.<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>();

        if $r21 != null goto label13;

        $r79 = "-none-";

        goto label16;

     label13:
        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke r76.<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>();

        $r24 = virtualinvoke $r23.<java.lang.ThreadGroup: java.lang.String getName()>();

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with parent group: ");

        $r27 = virtualinvoke r76.<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>();

        $r28 = virtualinvoke $r27.<java.lang.ThreadGroup: java.lang.ThreadGroup getParent()>();

        if $r28 != null goto label14;

        $r80 = "-none-";

        goto label15;

     label14:
        $r29 = virtualinvoke r76.<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>();

        $r30 = virtualinvoke $r29.<java.lang.ThreadGroup: java.lang.ThreadGroup getParent()>();

        $r80 = virtualinvoke $r30.<java.lang.ThreadGroup: java.lang.String getName()>();

     label15:
        $r31 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r80);

        $r79 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

     label16:
        $r81 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r79);

        $r82 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r77.<java.io.PrintStream: void println(java.lang.String)>($r82);

        goto label12;

     label17:
        $i2 = interfaceinvoke r4.<java.util.Map: int size()>();

        if $i2 != 0 goto label18;

        $z8 = 1;

        goto label19;

     label18:
        $z8 = 0;

     label19:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Found unexpected new threads (see console output for listing)", $z8);

        return;
    }

    public void testAbilityToFireImmediatelyWhenStartedBefore() throws java.lang.Exception
    {
        org.quartz.AbstractSchedulerTest r0;
        java.util.List r1;
        org.quartz.Scheduler r3;
        org.quartz.JobDetail r4;
        org.quartz.Trigger r5;
        long l0, l1, $l3;
        java.util.ArrayList $r6;
        java.util.concurrent.CyclicBarrier $r7;
        org.quartz.SchedulerContext $r8, $r10;
        org.quartz.JobBuilder $r12, $r13;
        org.quartz.TriggerBuilder $r14, $r15;
        java.util.concurrent.TimeUnit $r17;
        java.lang.Object $r18;
        java.lang.Long $r19;
        byte $b4;
        boolean $z0;

        r0 := @this: org.quartz.AbstractSchedulerTest;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r1 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>($r6);

        $r7 = new java.util.concurrent.CyclicBarrier;

        specialinvoke $r7.<java.util.concurrent.CyclicBarrier: void <init>(int)>(2);

        r3 = virtualinvoke r0.<org.quartz.AbstractSchedulerTest: org.quartz.Scheduler createScheduler(java.lang.String,int)>("testAbilityToFireImmediatelyWhenStartedBefore", 5);

        $r8 = interfaceinvoke r3.<org.quartz.Scheduler: org.quartz.SchedulerContext getContext()>();

        virtualinvoke $r8.<org.quartz.SchedulerContext: java.lang.Object put(java.lang.String,java.lang.Object)>("BARRIER", $r7);

        $r10 = interfaceinvoke r3.<org.quartz.Scheduler: org.quartz.SchedulerContext getContext()>();

        virtualinvoke $r10.<org.quartz.SchedulerContext: java.lang.Object put(java.lang.String,java.lang.Object)>("DATE_STAMPS", r1);

        interfaceinvoke r3.<org.quartz.Scheduler: void start()>();

        staticinvoke <java.lang.Thread: void yield()>();

        $r12 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob(java.lang.Class)>(class "Lorg/quartz/AbstractSchedulerTest$TestJobWithSync;");

        $r13 = virtualinvoke $r12.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String)>("job1");

        r4 = virtualinvoke $r13.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        $r14 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r15 = virtualinvoke $r14.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder forJob(org.quartz.JobDetail)>(r4);

        r5 = virtualinvoke $r15.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        interfaceinvoke r3.<org.quartz.Scheduler: java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)>(r4, r5);

        $r17 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        virtualinvoke $r7.<java.util.concurrent.CyclicBarrier: int await(long,java.util.concurrent.TimeUnit)>(125L, $r17);

        interfaceinvoke r3.<org.quartz.Scheduler: void shutdown(boolean)>(1);

        $r18 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        $r19 = (java.lang.Long) $r18;

        l1 = virtualinvoke $r19.<java.lang.Long: long longValue()>();

        $l3 = l1 - l0;

        $b4 = $l3 cmp 7000L;

        if $b4 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Immediate trigger did not fire within a reasonable amount of time.", $z0);

        return;
    }

    public void testAbilityToFireImmediatelyWhenStartedBeforeWithTriggerJob() throws java.lang.Exception
    {
        org.quartz.AbstractSchedulerTest r0;
        java.util.List r1;
        org.quartz.Scheduler r3;
        org.quartz.JobDetail r4;
        long l0, l1, $l3;
        java.util.ArrayList $r5;
        java.util.concurrent.CyclicBarrier $r6;
        org.quartz.SchedulerContext $r7, $r9;
        org.quartz.JobBuilder $r11, $r12, $r13;
        org.quartz.JobKey $r14;
        java.util.concurrent.TimeUnit $r15;
        java.lang.Object $r16;
        java.lang.Long $r17;
        byte $b4;
        boolean $z0;

        r0 := @this: org.quartz.AbstractSchedulerTest;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r1 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>($r5);

        $r6 = new java.util.concurrent.CyclicBarrier;

        specialinvoke $r6.<java.util.concurrent.CyclicBarrier: void <init>(int)>(2);

        r3 = virtualinvoke r0.<org.quartz.AbstractSchedulerTest: org.quartz.Scheduler createScheduler(java.lang.String,int)>("testAbilityToFireImmediatelyWhenStartedBeforeWithTriggerJob", 5);

        $r7 = interfaceinvoke r3.<org.quartz.Scheduler: org.quartz.SchedulerContext getContext()>();

        virtualinvoke $r7.<org.quartz.SchedulerContext: java.lang.Object put(java.lang.String,java.lang.Object)>("BARRIER", $r6);

        $r9 = interfaceinvoke r3.<org.quartz.Scheduler: org.quartz.SchedulerContext getContext()>();

        virtualinvoke $r9.<org.quartz.SchedulerContext: java.lang.Object put(java.lang.String,java.lang.Object)>("DATE_STAMPS", r1);

        interfaceinvoke r3.<org.quartz.Scheduler: void start()>();

        staticinvoke <java.lang.Thread: void yield()>();

        $r11 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob(java.lang.Class)>(class "Lorg/quartz/AbstractSchedulerTest$TestJobWithSync;");

        $r12 = virtualinvoke $r11.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String)>("job1");

        $r13 = virtualinvoke $r12.<org.quartz.JobBuilder: org.quartz.JobBuilder storeDurably()>();

        r4 = virtualinvoke $r13.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        interfaceinvoke r3.<org.quartz.Scheduler: void addJob(org.quartz.JobDetail,boolean)>(r4, 0);

        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r14 = interfaceinvoke r4.<org.quartz.JobDetail: org.quartz.JobKey getKey()>();

        interfaceinvoke r3.<org.quartz.Scheduler: void triggerJob(org.quartz.JobKey)>($r14);

        $r15 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        virtualinvoke $r6.<java.util.concurrent.CyclicBarrier: int await(long,java.util.concurrent.TimeUnit)>(125L, $r15);

        interfaceinvoke r3.<org.quartz.Scheduler: void shutdown(boolean)>(1);

        $r16 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        $r17 = (java.lang.Long) $r16;

        l1 = virtualinvoke $r17.<java.lang.Long: long longValue()>();

        $l3 = l1 - l0;

        $b4 = $l3 cmp 7000L;

        if $b4 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Immediate trigger did not fire within a reasonable amount of time.", $z0);

        return;
    }

    public void testAbilityToFireImmediatelyWhenStartedAfter() throws java.lang.Exception
    {
        org.quartz.AbstractSchedulerTest r0;
        java.util.List r1;
        org.quartz.Scheduler r3;
        org.quartz.JobDetail r4;
        org.quartz.Trigger r5;
        long l0, l1, $l3;
        java.util.ArrayList $r6;
        java.util.concurrent.CyclicBarrier $r7;
        org.quartz.SchedulerContext $r8, $r10;
        org.quartz.JobBuilder $r12, $r13;
        org.quartz.TriggerBuilder $r14, $r15;
        java.util.concurrent.TimeUnit $r17;
        java.lang.Object $r18;
        java.lang.Long $r19;
        byte $b4;
        boolean $z0;

        r0 := @this: org.quartz.AbstractSchedulerTest;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r1 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>($r6);

        $r7 = new java.util.concurrent.CyclicBarrier;

        specialinvoke $r7.<java.util.concurrent.CyclicBarrier: void <init>(int)>(2);

        r3 = virtualinvoke r0.<org.quartz.AbstractSchedulerTest: org.quartz.Scheduler createScheduler(java.lang.String,int)>("testAbilityToFireImmediatelyWhenStartedAfter", 5);

        $r8 = interfaceinvoke r3.<org.quartz.Scheduler: org.quartz.SchedulerContext getContext()>();

        virtualinvoke $r8.<org.quartz.SchedulerContext: java.lang.Object put(java.lang.String,java.lang.Object)>("BARRIER", $r7);

        $r10 = interfaceinvoke r3.<org.quartz.Scheduler: org.quartz.SchedulerContext getContext()>();

        virtualinvoke $r10.<org.quartz.SchedulerContext: java.lang.Object put(java.lang.String,java.lang.Object)>("DATE_STAMPS", r1);

        $r12 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob(java.lang.Class)>(class "Lorg/quartz/AbstractSchedulerTest$TestJobWithSync;");

        $r13 = virtualinvoke $r12.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String)>("job1");

        r4 = virtualinvoke $r13.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        $r14 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r15 = virtualinvoke $r14.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder forJob(org.quartz.JobDetail)>(r4);

        r5 = virtualinvoke $r15.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        interfaceinvoke r3.<org.quartz.Scheduler: java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)>(r4, r5);

        interfaceinvoke r3.<org.quartz.Scheduler: void start()>();

        $r17 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        virtualinvoke $r7.<java.util.concurrent.CyclicBarrier: int await(long,java.util.concurrent.TimeUnit)>(125L, $r17);

        interfaceinvoke r3.<org.quartz.Scheduler: void shutdown(boolean)>(1);

        $r18 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        $r19 = (java.lang.Long) $r18;

        l1 = virtualinvoke $r19.<java.lang.Long: long longValue()>();

        $l3 = l1 - l0;

        $b4 = $l3 cmp 7000L;

        if $b4 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Immediate trigger did not fire within a reasonable amount of time.", $z0);

        return;
    }

    public void testScheduleMultipleTriggersForAJob() throws org.quartz.SchedulerException
    {
        org.quartz.AbstractSchedulerTest r0;
        org.quartz.JobDetail r1;
        org.quartz.Trigger r2, r3;
        org.quartz.Scheduler r5;
        java.util.List r6;
        org.quartz.JobBuilder $r7, $r8;
        org.quartz.TriggerBuilder $r9, $r10, $r11, $r15, $r16, $r17, $r18, $r22;
        org.quartz.SimpleScheduleBuilder $r12, $r13, $r14, $r19, $r20, $r21;
        java.util.HashSet $r23;
        org.quartz.JobKey $r24;
        int $i0;
        long $l1;
        boolean $z2, $z3;

        r0 := @this: org.quartz.AbstractSchedulerTest;

        $r7 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob(java.lang.Class)>(class "Lorg/quartz/AbstractSchedulerTest$TestJob;");

        $r8 = virtualinvoke $r7.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String,java.lang.String)>("job1", "group1");

        r1 = virtualinvoke $r8.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        $r9 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r10 = virtualinvoke $r9.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String,java.lang.String)>("trigger1", "group1");

        $r11 = virtualinvoke $r10.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder startNow()>();

        $r12 = staticinvoke <org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder simpleSchedule()>();

        $r13 = virtualinvoke $r12.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder withIntervalInSeconds(int)>(1);

        $r14 = virtualinvoke $r13.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder repeatForever()>();

        $r15 = virtualinvoke $r11.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>($r14);

        r2 = virtualinvoke $r15.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        $r16 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r17 = virtualinvoke $r16.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String,java.lang.String)>("trigger2", "group1");

        $r18 = virtualinvoke $r17.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder startNow()>();

        $r19 = staticinvoke <org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder simpleSchedule()>();

        $r20 = virtualinvoke $r19.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder withIntervalInSeconds(int)>(1);

        $r21 = virtualinvoke $r20.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder repeatForever()>();

        $r22 = virtualinvoke $r18.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>($r21);

        r3 = virtualinvoke $r22.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        $r23 = new java.util.HashSet;

        specialinvoke $r23.<java.util.HashSet: void <init>()>();

        interfaceinvoke $r23.<java.util.Set: boolean add(java.lang.Object)>(r2);

        interfaceinvoke $r23.<java.util.Set: boolean add(java.lang.Object)>(r3);

        r5 = virtualinvoke r0.<org.quartz.AbstractSchedulerTest: org.quartz.Scheduler createScheduler(java.lang.String,int)>("testScheduleMultipleTriggersForAJob", 5);

        interfaceinvoke r5.<org.quartz.Scheduler: void scheduleJob(org.quartz.JobDetail,java.util.Set,boolean)>(r1, $r23, 1);

        $r24 = interfaceinvoke r1.<org.quartz.JobDetail: org.quartz.JobKey getKey()>();

        r6 = interfaceinvoke r5.<org.quartz.Scheduler: java.util.List getTriggersOfJob(org.quartz.JobKey)>($r24);

        $i0 = interfaceinvoke r6.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l1);

        $z2 = interfaceinvoke r6.<java.util.List: boolean contains(java.lang.Object)>(r2);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $z3 = interfaceinvoke r6.<java.util.List: boolean contains(java.lang.Object)>(r3);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        interfaceinvoke r5.<org.quartz.Scheduler: void shutdown(boolean)>(1);

        return;
    }

    public void testShutdownWithoutWaitIsUnclean() throws java.lang.Exception
    {
        org.quartz.AbstractSchedulerTest r0;
        org.quartz.Scheduler r2;
        java.util.concurrent.CyclicBarrier $r3;
        org.quartz.SchedulerContext $r4, $r18;
        org.quartz.JobBuilder $r6, $r7, $r8, $r9;
        org.quartz.JobDetail $r10;
        org.quartz.TriggerBuilder $r11, $r12, $r13;
        org.quartz.Trigger $r14;
        java.util.List $r16;
        boolean $z0;
        java.util.concurrent.TimeUnit $r17, $r20;
        java.lang.Object $r19;
        long $l1;
        java.lang.Throwable $r21;
        java.lang.Thread r23;

        r0 := @this: org.quartz.AbstractSchedulerTest;

        $r3 = new java.util.concurrent.CyclicBarrier;

        specialinvoke $r3.<java.util.concurrent.CyclicBarrier: void <init>(int)>(2);

        r2 = virtualinvoke r0.<org.quartz.AbstractSchedulerTest: org.quartz.Scheduler createScheduler(java.lang.String,int)>("testShutdownWithoutWaitIsUnclean", 8);

     label1:
        $r4 = interfaceinvoke r2.<org.quartz.Scheduler: org.quartz.SchedulerContext getContext()>();

        virtualinvoke $r4.<org.quartz.SchedulerContext: java.lang.Object put(java.lang.String,java.lang.Object)>("BARRIER", $r3);

        interfaceinvoke r2.<org.quartz.Scheduler: void start()>();

        $r6 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob()>();

        $r7 = virtualinvoke $r6.<org.quartz.JobBuilder: org.quartz.JobBuilder ofType(java.lang.Class)>(class "Lorg/quartz/AbstractSchedulerTest$UncleanShutdownJob;");

        $r8 = virtualinvoke $r7.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String)>("job");

        $r9 = virtualinvoke $r8.<org.quartz.JobBuilder: org.quartz.JobBuilder storeDurably()>();

        $r10 = virtualinvoke $r9.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        interfaceinvoke r2.<org.quartz.Scheduler: void addJob(org.quartz.JobDetail,boolean)>($r10, 0);

        $r11 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r12 = virtualinvoke $r11.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder forJob(java.lang.String)>("job");

        $r13 = virtualinvoke $r12.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder startNow()>();

        $r14 = virtualinvoke $r13.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        interfaceinvoke r2.<org.quartz.Scheduler: java.util.Date scheduleJob(org.quartz.Trigger)>($r14);

     label2:
        $r16 = interfaceinvoke r2.<org.quartz.Scheduler: java.util.List getCurrentlyExecutingJobs()>();

        $z0 = interfaceinvoke $r16.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label3;

        staticinvoke <java.lang.Thread: void sleep(long)>(50L);

        goto label2;

     label3:
        interfaceinvoke r2.<org.quartz.Scheduler: void shutdown(boolean)>(0);

        goto label5;

     label4:
        $r21 := @caughtexception;

        interfaceinvoke r2.<org.quartz.Scheduler: void shutdown(boolean)>(0);

        throw $r21;

     label5:
        $r17 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        virtualinvoke $r3.<java.util.concurrent.CyclicBarrier: int await(long,java.util.concurrent.TimeUnit)>(125L, $r17);

        $r18 = interfaceinvoke r2.<org.quartz.Scheduler: org.quartz.SchedulerContext getContext()>();

        $r19 = virtualinvoke $r18.<org.quartz.SchedulerContext: java.lang.Object get(java.lang.Object)>("JOB_THREAD");

        r23 = (java.lang.Thread) $r19;

        $r20 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $l1 = virtualinvoke $r20.<java.util.concurrent.TimeUnit: long toMillis(long)>(125L);

        virtualinvoke r23.<java.lang.Thread: void join(long)>($l1);

        return;

        catch java.lang.Throwable from label1 to label3 with label4;
    }

    public void testShutdownWithWaitIsClean() throws java.lang.Exception
    {
        org.quartz.AbstractSchedulerTest r0;
        java.util.List r2, $r25;
        org.quartz.Scheduler r4;
        java.util.concurrent.atomic.AtomicBoolean $r8;
        java.util.ArrayList $r9;
        java.util.concurrent.CyclicBarrier $r10;
        org.quartz.SchedulerContext $r11, $r13;
        org.quartz.JobBuilder $r15, $r16, $r17, $r18;
        org.quartz.JobDetail $r19;
        org.quartz.TriggerBuilder $r20, $r21, $r22;
        org.quartz.Trigger $r23;
        boolean $z0, $z1, $z2;
        org.quartz.AbstractSchedulerTest$1 $r26, $r29;
        java.util.concurrent.TimeUnit $r27, $r30;
        java.lang.Throwable $r28;

        r0 := @this: org.quartz.AbstractSchedulerTest;

        $r8 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r8.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r2 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>($r9);

        $r10 = new java.util.concurrent.CyclicBarrier;

        specialinvoke $r10.<java.util.concurrent.CyclicBarrier: void <init>(int)>(2);

        r4 = virtualinvoke r0.<org.quartz.AbstractSchedulerTest: org.quartz.Scheduler createScheduler(java.lang.String,int)>("testShutdownWithWaitIsClean", 8);

     label1:
        $r11 = interfaceinvoke r4.<org.quartz.Scheduler: org.quartz.SchedulerContext getContext()>();

        virtualinvoke $r11.<org.quartz.SchedulerContext: java.lang.Object put(java.lang.String,java.lang.Object)>("BARRIER", $r10);

        $r13 = interfaceinvoke r4.<org.quartz.Scheduler: org.quartz.SchedulerContext getContext()>();

        virtualinvoke $r13.<org.quartz.SchedulerContext: java.lang.Object put(java.lang.String,java.lang.Object)>("DATE_STAMPS", r2);

        interfaceinvoke r4.<org.quartz.Scheduler: void start()>();

        $r15 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob()>();

        $r16 = virtualinvoke $r15.<org.quartz.JobBuilder: org.quartz.JobBuilder ofType(java.lang.Class)>(class "Lorg/quartz/AbstractSchedulerTest$TestJobWithSync;");

        $r17 = virtualinvoke $r16.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String)>("job");

        $r18 = virtualinvoke $r17.<org.quartz.JobBuilder: org.quartz.JobBuilder storeDurably()>();

        $r19 = virtualinvoke $r18.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        interfaceinvoke r4.<org.quartz.Scheduler: void addJob(org.quartz.JobDetail,boolean)>($r19, 0);

        $r20 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r21 = virtualinvoke $r20.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder forJob(java.lang.String)>("job");

        $r22 = virtualinvoke $r21.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder startNow()>();

        $r23 = virtualinvoke $r22.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        interfaceinvoke r4.<org.quartz.Scheduler: java.util.Date scheduleJob(org.quartz.Trigger)>($r23);

     label2:
        $r25 = interfaceinvoke r4.<org.quartz.Scheduler: java.util.List getCurrentlyExecutingJobs()>();

        $z0 = interfaceinvoke $r25.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label3;

        staticinvoke <java.lang.Thread: void sleep(long)>(50L);

        goto label2;

     label3:
        $r26 = new org.quartz.AbstractSchedulerTest$1;

        specialinvoke $r26.<org.quartz.AbstractSchedulerTest$1: void <init>(org.quartz.AbstractSchedulerTest,org.quartz.Scheduler,java.util.concurrent.atomic.AtomicBoolean)>(r0, r4, $r8);

        virtualinvoke $r26.<java.lang.Thread: void start()>();

        staticinvoke <java.lang.Thread: void sleep(long)>(1000L);

        $z1 = virtualinvoke $r8.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z1);

        $r27 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        virtualinvoke $r10.<java.util.concurrent.CyclicBarrier: int await(long,java.util.concurrent.TimeUnit)>(125L, $r27);

        virtualinvoke $r26.<java.lang.Thread: void join()>();

        goto label6;

     label4:
        $r28 := @caughtexception;

     label5:
        $r29 = new org.quartz.AbstractSchedulerTest$1;

        specialinvoke $r29.<org.quartz.AbstractSchedulerTest$1: void <init>(org.quartz.AbstractSchedulerTest,org.quartz.Scheduler,java.util.concurrent.atomic.AtomicBoolean)>(r0, r4, $r8);

        virtualinvoke $r29.<java.lang.Thread: void start()>();

        staticinvoke <java.lang.Thread: void sleep(long)>(1000L);

        $z2 = virtualinvoke $r8.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z2);

        $r30 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        virtualinvoke $r10.<java.util.concurrent.CyclicBarrier: int await(long,java.util.concurrent.TimeUnit)>(125L, $r30);

        virtualinvoke $r29.<java.lang.Thread: void join()>();

        throw $r28;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public static void <clinit>()
    {
        <org.quartz.AbstractSchedulerTest: long TEST_TIMEOUT_SECONDS> = 125L;

        <org.quartz.AbstractSchedulerTest: java.lang.String JOB_THREAD> = "JOB_THREAD";

        <org.quartz.AbstractSchedulerTest: java.lang.String DATE_STAMPS> = "DATE_STAMPS";

        <org.quartz.AbstractSchedulerTest: java.lang.String BARRIER> = "BARRIER";

        return;
    }
}
