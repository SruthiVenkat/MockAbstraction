public class org.quartz.utils.counter.CounterManagerImpl extends java.lang.Object implements org.quartz.utils.counter.CounterManager
{
    private java.util.Timer timer;
    private boolean shutdown;
    private java.util.List counters;

    public void <init>(java.util.Timer)
    {
        org.quartz.utils.counter.CounterManagerImpl r0;
        java.util.Timer r1;
        java.util.ArrayList $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.quartz.utils.counter.CounterManagerImpl;

        r1 := @parameter0: java.util.Timer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.quartz.utils.counter.CounterManagerImpl: java.util.List counters> = $r2;

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Timer cannot be null");

        throw $r3;

     label1:
        r0.<org.quartz.utils.counter.CounterManagerImpl: java.util.Timer timer> = r1;

        return;
    }

    public synchronized void shutdown(boolean)
    {
        org.quartz.utils.counter.CounterManagerImpl r0;
        boolean z0, $z1, $z2, $z3;
        java.util.Iterator r1;
        org.quartz.utils.counter.Counter r2;
        java.util.List $r4;
        java.util.Timer $r5;
        java.lang.Object $r6;
        org.quartz.utils.counter.sampled.SampledCounter $r7;
        java.lang.Throwable $r8;

        r0 := @this: org.quartz.utils.counter.CounterManagerImpl;

        z0 := @parameter0: boolean;

        $z1 = r0.<org.quartz.utils.counter.CounterManagerImpl: boolean shutdown>;

        if $z1 == 0 goto label1;

        return;

     label1:
        $r4 = r0.<org.quartz.utils.counter.CounterManagerImpl: java.util.List counters>;

        r1 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.quartz.utils.counter.Counter) $r6;

        $z3 = r2 instanceof org.quartz.utils.counter.sampled.SampledCounter;

        if $z3 == 0 goto label3;

        $r7 = (org.quartz.utils.counter.sampled.SampledCounter) r2;

        interfaceinvoke $r7.<org.quartz.utils.counter.sampled.SampledCounter: void shutdown()>();

     label3:
        goto label2;

     label4:
        if z0 == 0 goto label5;

        $r5 = r0.<org.quartz.utils.counter.CounterManagerImpl: java.util.Timer timer>;

        virtualinvoke $r5.<java.util.Timer: void cancel()>();

     label5:
        r0.<org.quartz.utils.counter.CounterManagerImpl: boolean shutdown> = 1;

        goto label8;

     label6:
        $r8 := @caughtexception;

     label7:
        r0.<org.quartz.utils.counter.CounterManagerImpl: boolean shutdown> = 1;

        throw $r8;

     label8:
        return;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public synchronized org.quartz.utils.counter.Counter createCounter(org.quartz.utils.counter.CounterConfig)
    {
        org.quartz.utils.counter.CounterManagerImpl r0;
        org.quartz.utils.counter.CounterConfig r1;
        org.quartz.utils.counter.Counter r2;
        org.quartz.utils.counter.sampled.SampledCounterImpl r3;
        boolean $z0, $z1;
        java.util.List $r4;
        java.util.Timer $r5;
        java.util.TimerTask $r6;
        long $l0, $l1;
        java.lang.NullPointerException $r7;
        java.lang.IllegalStateException $r8;

        r0 := @this: org.quartz.utils.counter.CounterManagerImpl;

        r1 := @parameter0: org.quartz.utils.counter.CounterConfig;

        $z0 = r0.<org.quartz.utils.counter.CounterManagerImpl: boolean shutdown>;

        if $z0 == 0 goto label1;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("counter manager is shutdown");

        throw $r8;

     label1:
        if r1 != null goto label2;

        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("config cannot be null");

        throw $r7;

     label2:
        r2 = virtualinvoke r1.<org.quartz.utils.counter.CounterConfig: org.quartz.utils.counter.Counter createCounter()>();

        $z1 = r2 instanceof org.quartz.utils.counter.sampled.SampledCounterImpl;

        if $z1 == 0 goto label3;

        r3 = (org.quartz.utils.counter.sampled.SampledCounterImpl) r2;

        $r5 = r0.<org.quartz.utils.counter.CounterManagerImpl: java.util.Timer timer>;

        $r6 = virtualinvoke r3.<org.quartz.utils.counter.sampled.SampledCounterImpl: java.util.TimerTask getTimerTask()>();

        $l0 = virtualinvoke r3.<org.quartz.utils.counter.sampled.SampledCounterImpl: long getIntervalMillis()>();

        $l1 = virtualinvoke r3.<org.quartz.utils.counter.sampled.SampledCounterImpl: long getIntervalMillis()>();

        virtualinvoke $r5.<java.util.Timer: void schedule(java.util.TimerTask,long,long)>($r6, $l0, $l1);

     label3:
        $r4 = r0.<org.quartz.utils.counter.CounterManagerImpl: java.util.List counters>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r2);

        return r2;
    }

    public void shutdownCounter(org.quartz.utils.counter.Counter)
    {
        org.quartz.utils.counter.CounterManagerImpl r0;
        org.quartz.utils.counter.Counter r1;
        org.quartz.utils.counter.sampled.SampledCounter r2;
        boolean $z0;

        r0 := @this: org.quartz.utils.counter.CounterManagerImpl;

        r1 := @parameter0: org.quartz.utils.counter.Counter;

        $z0 = r1 instanceof org.quartz.utils.counter.sampled.SampledCounter;

        if $z0 == 0 goto label1;

        r2 = (org.quartz.utils.counter.sampled.SampledCounter) r1;

        interfaceinvoke r2.<org.quartz.utils.counter.sampled.SampledCounter: void shutdown()>();

     label1:
        return;
    }
}
