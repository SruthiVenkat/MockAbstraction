public class org.quartz.impl.jdbcjobstore.JdbcJobStoreTest extends org.quartz.AbstractJobStoreTest
{
    private java.util.HashMap stores;

    public void <init>()
    {
        org.quartz.impl.jdbcjobstore.JdbcJobStoreTest r0;
        java.util.HashMap $r1;

        r0 := @this: org.quartz.impl.jdbcjobstore.JdbcJobStoreTest;

        specialinvoke r0.<org.quartz.AbstractJobStoreTest: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.quartz.impl.jdbcjobstore.JdbcJobStoreTest: java.util.HashMap stores> = $r1;

        return;
    }

    public void testNothing()
    {
        org.quartz.impl.jdbcjobstore.JdbcJobStoreTest r0;

        r0 := @this: org.quartz.impl.jdbcjobstore.JdbcJobStoreTest;

        return;
    }

    protected org.quartz.spi.JobStore createJobStore(java.lang.String)
    {
        org.quartz.impl.jdbcjobstore.JdbcJobStoreTest r0;
        java.lang.String r1;
        org.quartz.impl.jdbcjobstore.JobStoreTX $r2;
        java.util.HashMap $r3;
        java.sql.SQLException $r5;
        java.lang.AssertionError $r6;

        r0 := @this: org.quartz.impl.jdbcjobstore.JdbcJobStoreTest;

        r1 := @parameter0: java.lang.String;

     label1:
        staticinvoke <org.quartz.impl.jdbcjobstore.JdbcQuartzTestUtilities: void createDatabase(java.lang.String)>(r1);

        $r2 = new org.quartz.impl.jdbcjobstore.JobStoreTX;

        specialinvoke $r2.<org.quartz.impl.jdbcjobstore.JobStoreTX: void <init>()>();

        virtualinvoke $r2.<org.quartz.impl.jdbcjobstore.JobStoreTX: void setDataSource(java.lang.String)>(r1);

        virtualinvoke $r2.<org.quartz.impl.jdbcjobstore.JobStoreTX: void setTablePrefix(java.lang.String)>("QRTZ_");

        virtualinvoke $r2.<org.quartz.impl.jdbcjobstore.JobStoreTX: void setInstanceId(java.lang.String)>("SINGLE_NODE_TEST");

        virtualinvoke $r2.<org.quartz.impl.jdbcjobstore.JobStoreTX: void setInstanceName(java.lang.String)>(r1);

        virtualinvoke $r2.<org.quartz.impl.jdbcjobstore.JobStoreTX: void setUseDBLocks(boolean)>(1);

        $r3 = r0.<org.quartz.impl.jdbcjobstore.JdbcJobStoreTest: java.util.HashMap stores>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2);

     label2:
        return $r2;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>($r5);

        throw $r6;

        catch java.sql.SQLException from label1 to label2 with label3;
    }

    protected void destroyJobStore(java.lang.String)
    {
        org.quartz.impl.jdbcjobstore.JdbcJobStoreTest r0;
        java.lang.String r1;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        java.sql.SQLException $r4;
        java.lang.AssertionError $r5;
        org.quartz.impl.jdbcjobstore.JobStoreSupport r6;

        r0 := @this: org.quartz.impl.jdbcjobstore.JdbcJobStoreTest;

        r1 := @parameter0: java.lang.String;

     label1:
        $r2 = r0.<org.quartz.impl.jdbcjobstore.JdbcJobStoreTest: java.util.HashMap stores>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

        r6 = (org.quartz.impl.jdbcjobstore.JobStoreSupport) $r3;

        virtualinvoke r6.<org.quartz.impl.jdbcjobstore.JobStoreSupport: void shutdown()>();

        staticinvoke <org.quartz.impl.jdbcjobstore.JdbcQuartzTestUtilities: void destroyDatabase(java.lang.String)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>($r4);

        throw $r5;

     label4:
        return;

        catch java.sql.SQLException from label1 to label2 with label3;
    }
}
