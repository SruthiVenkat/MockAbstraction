public class org.quartz.JobBuilderTest extends junit.framework.TestCase
{

    public void <init>()
    {
        org.quartz.JobBuilderTest r0;

        r0 := @this: org.quartz.JobBuilderTest;

        specialinvoke r0.<junit.framework.TestCase: void <init>()>();

        return;
    }

    protected void setUp() throws java.lang.Exception
    {
        org.quartz.JobBuilderTest r0;

        r0 := @this: org.quartz.JobBuilderTest;

        return;
    }

    public void testJobBuilder() throws java.lang.Exception
    {
        org.quartz.JobBuilderTest r0;
        org.quartz.JobBuilder $r1, $r2, $r3, $r4, $r40, $r41, $r42, $r43, $r44, $r45, $r52, $r53, $r54, $r55;
        java.lang.StringBuilder $r5, $r6, $r9, $r13, $r14, $r17, $r21, $r22, $r24, $r28, $r29, $r31, $r34, $r35, $r37, $r46, $r47, $r49, $r56, $r57, $r60;
        org.quartz.JobKey $r7, $r11, $r15, $r19, $r23, $r26, $r27, $r58, $r62;
        java.lang.String $r8, $r10, $r12, $r16, $r18, $r20, $r25, $r30, $r32, $r33, $r38, $r48, $r50, $r51, $r59, $r61, $r63;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18;
        java.lang.Class $r36, $r39;
        org.quartz.JobDetail r64, r65, r66;

        r0 := @this: org.quartz.JobBuilderTest;

        $r1 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob()>();

        $r2 = virtualinvoke $r1.<org.quartz.JobBuilder: org.quartz.JobBuilder ofType(java.lang.Class)>(class "Lorg/quartz/JobBuilderTest$TestJob;");

        $r3 = virtualinvoke $r2.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String)>("j1");

        $r4 = virtualinvoke $r3.<org.quartz.JobBuilder: org.quartz.JobBuilder storeDurably()>();

        r64 = virtualinvoke $r4.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected job name: ");

        $r7 = interfaceinvoke r64.<org.quartz.JobDetail: org.quartz.JobKey getKey()>();

        $r8 = virtualinvoke $r7.<org.quartz.JobKey: java.lang.String getName()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = interfaceinvoke r64.<org.quartz.JobDetail: org.quartz.JobKey getKey()>();

        $r12 = virtualinvoke $r11.<org.quartz.JobKey: java.lang.String getName()>();

        $z0 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>("j1");

        staticinvoke <org.quartz.JobBuilderTest: void assertTrue(java.lang.String,boolean)>($r10, $z0);

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected job group: ");

        $r15 = interfaceinvoke r64.<org.quartz.JobDetail: org.quartz.JobKey getKey()>();

        $r16 = virtualinvoke $r15.<org.quartz.JobKey: java.lang.String getGroup()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        $r19 = interfaceinvoke r64.<org.quartz.JobDetail: org.quartz.JobKey getKey()>();

        $r20 = virtualinvoke $r19.<org.quartz.JobKey: java.lang.String getGroup()>();

        $z1 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>("DEFAULT");

        staticinvoke <org.quartz.JobBuilderTest: void assertTrue(java.lang.String,boolean)>($r18, $z1);

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected job key: ");

        $r23 = interfaceinvoke r64.<org.quartz.JobDetail: org.quartz.JobKey getKey()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        $r26 = interfaceinvoke r64.<org.quartz.JobDetail: org.quartz.JobKey getKey()>();

        $r27 = staticinvoke <org.quartz.JobKey: org.quartz.JobKey jobKey(java.lang.String)>("j1");

        $z2 = virtualinvoke $r26.<org.quartz.JobKey: boolean equals(java.lang.Object)>($r27);

        staticinvoke <org.quartz.JobBuilderTest: void assertTrue(java.lang.String,boolean)>($r25, $z2);

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected job description: ");

        $r30 = interfaceinvoke r64.<org.quartz.JobDetail: java.lang.String getDescription()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        $r33 = interfaceinvoke r64.<org.quartz.JobDetail: java.lang.String getDescription()>();

        if $r33 != null goto label1;

        $z18 = 1;

        goto label2;

     label1:
        $z18 = 0;

     label2:
        staticinvoke <org.quartz.JobBuilderTest: void assertTrue(java.lang.String,boolean)>($r32, $z18);

        $z3 = interfaceinvoke r64.<org.quartz.JobDetail: boolean isDurable()>();

        staticinvoke <org.quartz.JobBuilderTest: void assertTrue(java.lang.String,boolean)>("Expected isDurable == true ", $z3);

        $z4 = interfaceinvoke r64.<org.quartz.JobDetail: boolean requestsRecovery()>();

        staticinvoke <org.quartz.JobBuilderTest: void assertFalse(java.lang.String,boolean)>("Expected requestsRecovery == false ", $z4);

        $z5 = interfaceinvoke r64.<org.quartz.JobDetail: boolean isConcurrentExectionDisallowed()>();

        staticinvoke <org.quartz.JobBuilderTest: void assertFalse(java.lang.String,boolean)>("Expected isConcurrentExectionDisallowed == false ", $z5);

        $z6 = interfaceinvoke r64.<org.quartz.JobDetail: boolean isPersistJobDataAfterExecution()>();

        staticinvoke <org.quartz.JobBuilderTest: void assertFalse(java.lang.String,boolean)>("Expected isPersistJobDataAfterExecution == false ", $z6);

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected job class: ");

        $r36 = interfaceinvoke r64.<org.quartz.JobDetail: java.lang.Class getJobClass()>();

        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        $r39 = interfaceinvoke r64.<org.quartz.JobDetail: java.lang.Class getJobClass()>();

        $z7 = virtualinvoke $r39.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lorg/quartz/JobBuilderTest$TestJob;");

        staticinvoke <org.quartz.JobBuilderTest: void assertTrue(java.lang.String,boolean)>($r38, $z7);

        $r40 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob()>();

        $r41 = virtualinvoke $r40.<org.quartz.JobBuilder: org.quartz.JobBuilder ofType(java.lang.Class)>(class "Lorg/quartz/JobBuilderTest$TestAnnotatedJob;");

        $r42 = virtualinvoke $r41.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String)>("j1");

        $r43 = virtualinvoke $r42.<org.quartz.JobBuilder: org.quartz.JobBuilder withDescription(java.lang.String)>("my description");

        $r44 = virtualinvoke $r43.<org.quartz.JobBuilder: org.quartz.JobBuilder storeDurably(boolean)>(1);

        $r45 = virtualinvoke $r44.<org.quartz.JobBuilder: org.quartz.JobBuilder requestRecovery()>();

        r65 = virtualinvoke $r45.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected job description: ");

        $r48 = interfaceinvoke r65.<org.quartz.JobDetail: java.lang.String getDescription()>();

        $r49 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r48);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        $r51 = interfaceinvoke r65.<org.quartz.JobDetail: java.lang.String getDescription()>();

        $z8 = virtualinvoke $r51.<java.lang.String: boolean equals(java.lang.Object)>("my description");

        staticinvoke <org.quartz.JobBuilderTest: void assertTrue(java.lang.String,boolean)>($r50, $z8);

        $z9 = interfaceinvoke r65.<org.quartz.JobDetail: boolean isDurable()>();

        staticinvoke <org.quartz.JobBuilderTest: void assertTrue(java.lang.String,boolean)>("Expected isDurable == true ", $z9);

        $z10 = interfaceinvoke r65.<org.quartz.JobDetail: boolean requestsRecovery()>();

        staticinvoke <org.quartz.JobBuilderTest: void assertTrue(java.lang.String,boolean)>("Expected requestsRecovery == true ", $z10);

        $z11 = interfaceinvoke r65.<org.quartz.JobDetail: boolean isConcurrentExectionDisallowed()>();

        staticinvoke <org.quartz.JobBuilderTest: void assertTrue(java.lang.String,boolean)>("Expected isConcurrentExectionDisallowed == true ", $z11);

        $z12 = interfaceinvoke r65.<org.quartz.JobDetail: boolean isPersistJobDataAfterExecution()>();

        staticinvoke <org.quartz.JobBuilderTest: void assertTrue(java.lang.String,boolean)>("Expected isPersistJobDataAfterExecution == true ", $z12);

        $r52 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob()>();

        $r53 = virtualinvoke $r52.<org.quartz.JobBuilder: org.quartz.JobBuilder ofType(java.lang.Class)>(class "Lorg/quartz/JobBuilderTest$TestStatefulJob;");

        $r54 = virtualinvoke $r53.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String,java.lang.String)>("j1", "g1");

        $r55 = virtualinvoke $r54.<org.quartz.JobBuilder: org.quartz.JobBuilder requestRecovery(boolean)>(0);

        r66 = virtualinvoke $r55.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected job group: ");

        $r58 = interfaceinvoke r66.<org.quartz.JobDetail: org.quartz.JobKey getKey()>();

        $r59 = virtualinvoke $r58.<org.quartz.JobKey: java.lang.String getName()>();

        $r60 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r59);

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>();

        $r62 = interfaceinvoke r66.<org.quartz.JobDetail: org.quartz.JobKey getKey()>();

        $r63 = virtualinvoke $r62.<org.quartz.JobKey: java.lang.String getGroup()>();

        $z13 = virtualinvoke $r63.<java.lang.String: boolean equals(java.lang.Object)>("g1");

        staticinvoke <org.quartz.JobBuilderTest: void assertTrue(java.lang.String,boolean)>($r61, $z13);

        $z14 = interfaceinvoke r66.<org.quartz.JobDetail: boolean isDurable()>();

        staticinvoke <org.quartz.JobBuilderTest: void assertFalse(java.lang.String,boolean)>("Expected isDurable == false ", $z14);

        $z15 = interfaceinvoke r66.<org.quartz.JobDetail: boolean requestsRecovery()>();

        staticinvoke <org.quartz.JobBuilderTest: void assertFalse(java.lang.String,boolean)>("Expected requestsRecovery == false ", $z15);

        $z16 = interfaceinvoke r66.<org.quartz.JobDetail: boolean isConcurrentExectionDisallowed()>();

        staticinvoke <org.quartz.JobBuilderTest: void assertTrue(java.lang.String,boolean)>("Expected isConcurrentExectionDisallowed == true ", $z16);

        $z17 = interfaceinvoke r66.<org.quartz.JobDetail: boolean isPersistJobDataAfterExecution()>();

        staticinvoke <org.quartz.JobBuilderTest: void assertTrue(java.lang.String,boolean)>("Expected isPersistJobDataAfterExecution == true ", $z17);

        return;
    }
}
