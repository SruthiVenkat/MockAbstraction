public class org.quartz.integrations.tests.QuartzMemoryCronTriggerTest extends org.quartz.integrations.tests.QuartzMemoryTestSupport
{

    public void <init>()
    {
        org.quartz.integrations.tests.QuartzMemoryCronTriggerTest r0;

        r0 := @this: org.quartz.integrations.tests.QuartzMemoryCronTriggerTest;

        specialinvoke r0.<org.quartz.integrations.tests.QuartzMemoryTestSupport: void <init>()>();

        return;
    }

    public void testCronRepeatCount() throws java.lang.Exception
    {
        org.quartz.integrations.tests.QuartzMemoryCronTriggerTest r0;
        org.quartz.CronTrigger r1;
        java.util.List r2;
        org.quartz.JobDetail r3;
        long l0, $l2, $l3, $l4, $l5;
        org.quartz.TriggerBuilder $r4, $r5, $r7;
        org.quartz.CronScheduleBuilder $r6;
        org.quartz.Trigger $r8;
        java.util.LinkedList $r9;
        org.quartz.Scheduler $r10, $r16;
        org.quartz.SchedulerContext $r11;
        java.lang.String $r12;
        org.quartz.JobBuilder $r14, $r15;
        java.lang.Integer $r18;
        org.hamcrest.Matcher $r19, $r20, $r26, $r30;
        int $i1, $i6, i7, i8, $i9;
        java.lang.Long[] $r21, r31;
        java.lang.Object[] $r22;
        java.lang.Long $r23, $r24, $r25, $r28, $r29;
        java.util.concurrent.TimeUnit $r27;

        r0 := @this: org.quartz.integrations.tests.QuartzMemoryCronTriggerTest;

        $r4 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r5 = virtualinvoke $r4.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String)>("test");

        $r6 = staticinvoke <org.quartz.CronScheduleBuilder: org.quartz.CronScheduleBuilder cronSchedule(java.lang.String)>("* * * * * ?");

        $r7 = virtualinvoke $r5.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>($r6);

        $r8 = virtualinvoke $r7.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        r1 = (org.quartz.CronTrigger) $r8;

        $r9 = new java.util.LinkedList;

        specialinvoke $r9.<java.util.LinkedList: void <init>()>();

        r2 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>($r9);

        $r10 = r0.<org.quartz.integrations.tests.QuartzMemoryCronTriggerTest: org.quartz.Scheduler scheduler>;

        $r11 = interfaceinvoke $r10.<org.quartz.Scheduler: org.quartz.SchedulerContext getContext()>();

        $r12 = <org.quartz.integrations.tests.TrackingJob: java.lang.String SCHEDULED_TIMES_KEY>;

        virtualinvoke $r11.<org.quartz.SchedulerContext: java.lang.Object put(java.lang.String,java.lang.Object)>($r12, r2);

        $r14 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob(java.lang.Class)>(class "Lorg/quartz/integrations/tests/TrackingJob;");

        $r15 = virtualinvoke $r14.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String)>("test");

        r3 = virtualinvoke $r15.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        $r16 = r0.<org.quartz.integrations.tests.QuartzMemoryCronTriggerTest: org.quartz.Scheduler scheduler>;

        interfaceinvoke $r16.<org.quartz.Scheduler: java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)>(r3, r1);

        i7 = 0;

     label1:
        if i7 >= 20 goto label2;

        $i6 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i6 >= 3 goto label2;

        staticinvoke <java.lang.Thread: void sleep(long)>(500L);

        i7 = i7 + 1;

        goto label1;

     label2:
        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r19 = staticinvoke <org.hamcrest.number.OrderingComparison: org.hamcrest.Matcher greaterThanOrEqualTo(java.lang.Comparable)>($r18);

        $r20 = staticinvoke <org.hamcrest.collection.IsCollectionWithSize: org.hamcrest.Matcher hasSize(org.hamcrest.Matcher)>($r19);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r2, $r20);

        $i1 = interfaceinvoke r2.<java.util.List: int size()>();

        $r21 = newarray (java.lang.Long)[$i1];

        $r22 = interfaceinvoke r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r21);

        r31 = (java.lang.Long[]) $r22;

        $r23 = r31[0];

        l0 = virtualinvoke $r23.<java.lang.Long: long longValue()>();

        $l2 = l0 % 1000L;

        $r24 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $r25 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(0L);

        $r26 = staticinvoke <org.hamcrest.core.Is: org.hamcrest.Matcher is(java.lang.Object)>($r25);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r24, $r26);

        i8 = 1;

     label3:
        $i9 = lengthof r31;

        if i8 >= $i9 goto label4;

        $r28 = r31[i8];

        $r27 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $l3 = (long) i8;

        $l4 = virtualinvoke $r27.<java.util.concurrent.TimeUnit: long toMillis(long)>($l3);

        $l5 = l0 + $l4;

        $r29 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l5);

        $r30 = staticinvoke <org.hamcrest.core.Is: org.hamcrest.Matcher is(java.lang.Object)>($r29);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r28, $r30);

        i8 = i8 + 1;

        goto label3;

     label4:
        return;
    }
}
