public class org.quartz.SimpleTriggerTest extends org.quartz.SerializationTestSupport
{
    private static final java.lang.String[] VERSIONS;
    private static final java.util.TimeZone EST_TIME_ZONE;
    private static final java.util.Calendar START_TIME;
    private static final java.util.Calendar END_TIME;

    public void <init>()
    {
        org.quartz.SimpleTriggerTest r0;

        r0 := @this: org.quartz.SimpleTriggerTest;

        specialinvoke r0.<org.quartz.SerializationTestSupport: void <init>()>();

        return;
    }

    protected java.lang.Object getTargetObject()
    {
        org.quartz.SimpleTriggerTest r0;
        org.quartz.JobDataMap $r3;
        org.quartz.impl.triggers.SimpleTriggerImpl $r4;
        java.util.Calendar $r5, $r7;
        java.util.Date $r6, $r8;

        r0 := @this: org.quartz.SimpleTriggerTest;

        $r3 = new org.quartz.JobDataMap;

        specialinvoke $r3.<org.quartz.JobDataMap: void <init>()>();

        virtualinvoke $r3.<org.quartz.JobDataMap: void put(java.lang.String,java.lang.String)>("A", "B");

        $r4 = new org.quartz.impl.triggers.SimpleTriggerImpl;

        $r5 = <org.quartz.SimpleTriggerTest: java.util.Calendar START_TIME>;

        $r6 = virtualinvoke $r5.<java.util.Calendar: java.util.Date getTime()>();

        $r7 = <org.quartz.SimpleTriggerTest: java.util.Calendar END_TIME>;

        $r8 = virtualinvoke $r7.<java.util.Calendar: java.util.Date getTime()>();

        specialinvoke $r4.<org.quartz.impl.triggers.SimpleTriggerImpl: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Date,java.util.Date,int,long)>("SimpleTrigger", "SimpleGroup", "JobName", "JobGroup", $r6, $r8, 5, 1000L);

        virtualinvoke $r4.<org.quartz.impl.triggers.SimpleTriggerImpl: void setCalendarName(java.lang.String)>("MyCalendar");

        virtualinvoke $r4.<org.quartz.impl.triggers.SimpleTriggerImpl: void setDescription(java.lang.String)>("SimpleTriggerDesc");

        virtualinvoke $r4.<org.quartz.impl.triggers.SimpleTriggerImpl: void setJobDataMap(org.quartz.JobDataMap)>($r3);

        virtualinvoke $r4.<org.quartz.impl.triggers.SimpleTriggerImpl: void setMisfireInstruction(int)>(4);

        return $r4;
    }

    protected java.lang.String[] getVersions()
    {
        org.quartz.SimpleTriggerTest r0;
        java.lang.String[] $r1;

        r0 := @this: org.quartz.SimpleTriggerTest;

        $r1 = <org.quartz.SimpleTriggerTest: java.lang.String[] VERSIONS>;

        return $r1;
    }

    protected void verifyMatch(java.lang.Object, java.lang.Object)
    {
        org.quartz.SimpleTriggerTest r0;
        java.lang.Object r1, r2;
        org.quartz.impl.triggers.SimpleTriggerImpl r3, r4;
        java.lang.String $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r17, $r18, $r19, $r20;
        java.util.Date $r13, $r14, $r15, $r16;
        int $i0, $i1, $i4, $i5;
        long $l2, $l3;
        org.quartz.JobDataMap $r21, $r22;

        r0 := @this: org.quartz.SimpleTriggerTest;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 = (org.quartz.impl.triggers.SimpleTriggerImpl) r1;

        r4 = (org.quartz.impl.triggers.SimpleTriggerImpl) r2;

        staticinvoke <org.quartz.SimpleTriggerTest: void assertNotNull(java.lang.Object)>(r4);

        $r5 = virtualinvoke r3.<org.quartz.impl.triggers.SimpleTriggerImpl: java.lang.String getName()>();

        $r6 = virtualinvoke r4.<org.quartz.impl.triggers.SimpleTriggerImpl: java.lang.String getName()>();

        staticinvoke <org.quartz.SimpleTriggerTest: void assertEquals(java.lang.String,java.lang.String)>($r5, $r6);

        $r7 = virtualinvoke r3.<org.quartz.impl.triggers.SimpleTriggerImpl: java.lang.String getGroup()>();

        $r8 = virtualinvoke r4.<org.quartz.impl.triggers.SimpleTriggerImpl: java.lang.String getGroup()>();

        staticinvoke <org.quartz.SimpleTriggerTest: void assertEquals(java.lang.String,java.lang.String)>($r7, $r8);

        $r9 = virtualinvoke r3.<org.quartz.impl.triggers.SimpleTriggerImpl: java.lang.String getJobName()>();

        $r10 = virtualinvoke r4.<org.quartz.impl.triggers.SimpleTriggerImpl: java.lang.String getJobName()>();

        staticinvoke <org.quartz.SimpleTriggerTest: void assertEquals(java.lang.String,java.lang.String)>($r9, $r10);

        $r11 = virtualinvoke r3.<org.quartz.impl.triggers.SimpleTriggerImpl: java.lang.String getJobGroup()>();

        $r12 = virtualinvoke r4.<org.quartz.impl.triggers.SimpleTriggerImpl: java.lang.String getJobGroup()>();

        staticinvoke <org.quartz.SimpleTriggerTest: void assertEquals(java.lang.String,java.lang.String)>($r11, $r12);

        $r13 = virtualinvoke r3.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date getStartTime()>();

        $r14 = virtualinvoke r4.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date getStartTime()>();

        staticinvoke <org.quartz.SimpleTriggerTest: void assertEquals(java.lang.Object,java.lang.Object)>($r13, $r14);

        $r15 = virtualinvoke r3.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date getEndTime()>();

        $r16 = virtualinvoke r4.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date getEndTime()>();

        staticinvoke <org.quartz.SimpleTriggerTest: void assertEquals(java.lang.Object,java.lang.Object)>($r15, $r16);

        $i0 = virtualinvoke r3.<org.quartz.impl.triggers.SimpleTriggerImpl: int getRepeatCount()>();

        $i1 = virtualinvoke r4.<org.quartz.impl.triggers.SimpleTriggerImpl: int getRepeatCount()>();

        staticinvoke <org.quartz.SimpleTriggerTest: void assertEquals(int,int)>($i0, $i1);

        $l2 = virtualinvoke r3.<org.quartz.impl.triggers.SimpleTriggerImpl: long getRepeatInterval()>();

        $l3 = virtualinvoke r4.<org.quartz.impl.triggers.SimpleTriggerImpl: long getRepeatInterval()>();

        staticinvoke <org.quartz.SimpleTriggerTest: void assertEquals(long,long)>($l2, $l3);

        $r17 = virtualinvoke r3.<org.quartz.impl.triggers.SimpleTriggerImpl: java.lang.String getCalendarName()>();

        $r18 = virtualinvoke r4.<org.quartz.impl.triggers.SimpleTriggerImpl: java.lang.String getCalendarName()>();

        staticinvoke <org.quartz.SimpleTriggerTest: void assertEquals(java.lang.String,java.lang.String)>($r17, $r18);

        $r19 = virtualinvoke r3.<org.quartz.impl.triggers.SimpleTriggerImpl: java.lang.String getDescription()>();

        $r20 = virtualinvoke r4.<org.quartz.impl.triggers.SimpleTriggerImpl: java.lang.String getDescription()>();

        staticinvoke <org.quartz.SimpleTriggerTest: void assertEquals(java.lang.String,java.lang.String)>($r19, $r20);

        $r21 = virtualinvoke r3.<org.quartz.impl.triggers.SimpleTriggerImpl: org.quartz.JobDataMap getJobDataMap()>();

        $r22 = virtualinvoke r4.<org.quartz.impl.triggers.SimpleTriggerImpl: org.quartz.JobDataMap getJobDataMap()>();

        staticinvoke <org.quartz.SimpleTriggerTest: void assertEquals(java.lang.Object,java.lang.Object)>($r21, $r22);

        $i4 = virtualinvoke r3.<org.quartz.impl.triggers.SimpleTriggerImpl: int getMisfireInstruction()>();

        $i5 = virtualinvoke r4.<org.quartz.impl.triggers.SimpleTriggerImpl: int getMisfireInstruction()>();

        staticinvoke <org.quartz.SimpleTriggerTest: void assertEquals(int,int)>($i4, $i5);

        return;
    }

    public void testUpdateAfterMisfire()
    {
        org.quartz.SimpleTriggerTest r0;
        java.util.Calendar r1, r2;
        org.quartz.impl.triggers.SimpleTriggerImpl $r4;
        java.util.Date $r5, $r6, $r7, $r8, $r9, $r10, $r11;

        r0 := @this: org.quartz.SimpleTriggerTest;

        r1 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r1.<java.util.Calendar: void set(int,int,int,int,int,int)>(2005, 6, 5, 9, 0, 0);

        r2 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r2.<java.util.Calendar: void set(int,int,int,int,int,int)>(2005, 6, 5, 10, 0, 0);

        $r4 = new org.quartz.impl.triggers.SimpleTriggerImpl;

        specialinvoke $r4.<org.quartz.impl.triggers.SimpleTriggerImpl: void <init>()>();

        virtualinvoke $r4.<org.quartz.impl.triggers.SimpleTriggerImpl: void setMisfireInstruction(int)>(2);

        virtualinvoke $r4.<org.quartz.impl.triggers.SimpleTriggerImpl: void setRepeatCount(int)>(5);

        $r5 = virtualinvoke r1.<java.util.Calendar: java.util.Date getTime()>();

        virtualinvoke $r4.<org.quartz.impl.triggers.SimpleTriggerImpl: void setStartTime(java.util.Date)>($r5);

        $r6 = virtualinvoke r2.<java.util.Calendar: java.util.Date getTime()>();

        virtualinvoke $r4.<org.quartz.impl.triggers.SimpleTriggerImpl: void setEndTime(java.util.Date)>($r6);

        virtualinvoke $r4.<org.quartz.impl.triggers.SimpleTriggerImpl: void updateAfterMisfire(org.quartz.Calendar)>(null);

        $r7 = virtualinvoke r1.<java.util.Calendar: java.util.Date getTime()>();

        $r8 = virtualinvoke $r4.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date getStartTime()>();

        staticinvoke <org.quartz.SimpleTriggerTest: void assertEquals(java.lang.Object,java.lang.Object)>($r7, $r8);

        $r9 = virtualinvoke r2.<java.util.Calendar: java.util.Date getTime()>();

        $r10 = virtualinvoke $r4.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date getEndTime()>();

        staticinvoke <org.quartz.SimpleTriggerTest: void assertEquals(java.lang.Object,java.lang.Object)>($r9, $r10);

        $r11 = virtualinvoke $r4.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date getNextFireTime()>();

        staticinvoke <org.quartz.SimpleTriggerTest: void assertNull(java.lang.Object)>($r11);

        return;
    }

    public void testGetFireTimeAfter()
    {
        org.quartz.SimpleTriggerTest r0;
        java.util.Date r2, $r4, $r5;
        org.quartz.impl.triggers.SimpleTriggerImpl $r3;
        long $l0;

        r0 := @this: org.quartz.SimpleTriggerTest;

        $r3 = new org.quartz.impl.triggers.SimpleTriggerImpl;

        specialinvoke $r3.<org.quartz.impl.triggers.SimpleTriggerImpl: void <init>()>();

        $r4 = new java.util.Date;

        specialinvoke $r4.<java.util.Date: void <init>(long)>(0L);

        virtualinvoke $r3.<org.quartz.impl.triggers.SimpleTriggerImpl: void setStartTime(java.util.Date)>($r4);

        virtualinvoke $r3.<org.quartz.impl.triggers.SimpleTriggerImpl: void setRepeatInterval(long)>(10L);

        virtualinvoke $r3.<org.quartz.impl.triggers.SimpleTriggerImpl: void setRepeatCount(int)>(4);

        $r5 = new java.util.Date;

        specialinvoke $r5.<java.util.Date: void <init>(long)>(34L);

        r2 = virtualinvoke $r3.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>($r5);

        $l0 = virtualinvoke r2.<java.util.Date: long getTime()>();

        staticinvoke <org.quartz.SimpleTriggerTest: void assertEquals(long,long)>(40L, $l0);

        return;
    }

    public void testClone()
    {
        org.quartz.SimpleTriggerTest r0;
        org.quartz.impl.triggers.SimpleTriggerImpl $r2;
        java.lang.Object $r3, $r7, $r10, $r12, $r18, $r20;
        org.quartz.JobDataMap $r4, $r5, $r6, $r8, $r9, $r11, $r13, $r15, $r16, $r17, $r19;
        int $i0, $i1, $i2, $i3;
        org.quartz.Trigger r21, r22;

        r0 := @this: org.quartz.SimpleTriggerTest;

        $r2 = new org.quartz.impl.triggers.SimpleTriggerImpl;

        specialinvoke $r2.<org.quartz.impl.triggers.SimpleTriggerImpl: void <init>()>();

        $r3 = virtualinvoke $r2.<org.quartz.impl.triggers.SimpleTriggerImpl: java.lang.Object clone()>();

        r21 = (org.quartz.Trigger) $r3;

        $r4 = interfaceinvoke r21.<org.quartz.Trigger: org.quartz.JobDataMap getJobDataMap()>();

        $i0 = virtualinvoke $r4.<org.quartz.JobDataMap: int size()>();

        staticinvoke <org.quartz.SimpleTriggerTest: void assertEquals(int,int)>(0, $i0);

        $r5 = virtualinvoke $r2.<org.quartz.impl.triggers.SimpleTriggerImpl: org.quartz.JobDataMap getJobDataMap()>();

        virtualinvoke $r5.<org.quartz.JobDataMap: void put(java.lang.String,java.lang.String)>("K1", "V1");

        $r6 = virtualinvoke $r2.<org.quartz.impl.triggers.SimpleTriggerImpl: org.quartz.JobDataMap getJobDataMap()>();

        virtualinvoke $r6.<org.quartz.JobDataMap: void put(java.lang.String,java.lang.String)>("K2", "V2");

        $r7 = virtualinvoke $r2.<org.quartz.impl.triggers.SimpleTriggerImpl: java.lang.Object clone()>();

        r22 = (org.quartz.Trigger) $r7;

        $r8 = interfaceinvoke r22.<org.quartz.Trigger: org.quartz.JobDataMap getJobDataMap()>();

        $i1 = virtualinvoke $r8.<org.quartz.JobDataMap: int size()>();

        staticinvoke <org.quartz.SimpleTriggerTest: void assertEquals(int,int)>(2, $i1);

        $r9 = interfaceinvoke r22.<org.quartz.Trigger: org.quartz.JobDataMap getJobDataMap()>();

        $r10 = virtualinvoke $r9.<org.quartz.JobDataMap: java.lang.Object get(java.lang.Object)>("K1");

        staticinvoke <org.quartz.SimpleTriggerTest: void assertEquals(java.lang.Object,java.lang.Object)>("V1", $r10);

        $r11 = interfaceinvoke r22.<org.quartz.Trigger: org.quartz.JobDataMap getJobDataMap()>();

        $r12 = virtualinvoke $r11.<org.quartz.JobDataMap: java.lang.Object get(java.lang.Object)>("K2");

        staticinvoke <org.quartz.SimpleTriggerTest: void assertEquals(java.lang.Object,java.lang.Object)>("V2", $r12);

        $r13 = interfaceinvoke r22.<org.quartz.Trigger: org.quartz.JobDataMap getJobDataMap()>();

        virtualinvoke $r13.<org.quartz.JobDataMap: java.lang.Object remove(java.lang.Object)>("K1");

        $r15 = interfaceinvoke r22.<org.quartz.Trigger: org.quartz.JobDataMap getJobDataMap()>();

        $i2 = virtualinvoke $r15.<org.quartz.JobDataMap: int size()>();

        staticinvoke <org.quartz.SimpleTriggerTest: void assertEquals(int,int)>(1, $i2);

        $r16 = virtualinvoke $r2.<org.quartz.impl.triggers.SimpleTriggerImpl: org.quartz.JobDataMap getJobDataMap()>();

        $i3 = virtualinvoke $r16.<org.quartz.JobDataMap: int size()>();

        staticinvoke <org.quartz.SimpleTriggerTest: void assertEquals(int,int)>(2, $i3);

        $r17 = virtualinvoke $r2.<org.quartz.impl.triggers.SimpleTriggerImpl: org.quartz.JobDataMap getJobDataMap()>();

        $r18 = virtualinvoke $r17.<org.quartz.JobDataMap: java.lang.Object get(java.lang.Object)>("K1");

        staticinvoke <org.quartz.SimpleTriggerTest: void assertEquals(java.lang.Object,java.lang.Object)>("V1", $r18);

        $r19 = virtualinvoke $r2.<org.quartz.impl.triggers.SimpleTriggerImpl: org.quartz.JobDataMap getJobDataMap()>();

        $r20 = virtualinvoke $r19.<org.quartz.JobDataMap: java.lang.Object get(java.lang.Object)>("K2");

        staticinvoke <org.quartz.SimpleTriggerTest: void assertEquals(java.lang.Object,java.lang.Object)>("V2", $r20);

        return;
    }

    public void testQuartz665()
    {
        org.quartz.SimpleTriggerTest r0;
        org.quartz.impl.triggers.SimpleTriggerImpl $r1, $r2;

        r0 := @this: org.quartz.SimpleTriggerTest;

        $r1 = new org.quartz.impl.triggers.SimpleTriggerImpl;

        specialinvoke $r1.<org.quartz.impl.triggers.SimpleTriggerImpl: void <init>()>();

        $r2 = new org.quartz.impl.triggers.SimpleTriggerImpl;

        specialinvoke $r2.<org.quartz.impl.triggers.SimpleTriggerImpl: void <init>()>();

        virtualinvoke $r1.<org.quartz.impl.triggers.SimpleTriggerImpl: boolean equals(java.lang.Object)>($r2);

        return;
    }

    public void testMisfireInstructionValidity() throws java.text.ParseException
    {
        org.quartz.SimpleTriggerTest r0;
        org.quartz.impl.triggers.SimpleTriggerImpl $r2;
        java.lang.Exception $r3, $r4;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.lang.String $r7, $r9;

        r0 := @this: org.quartz.SimpleTriggerTest;

        $r2 = new org.quartz.impl.triggers.SimpleTriggerImpl;

        specialinvoke $r2.<org.quartz.impl.triggers.SimpleTriggerImpl: void <init>()>();

     label1:
        virtualinvoke $r2.<org.quartz.impl.triggers.SimpleTriggerImpl: void setMisfireInstruction(int)>(-1);

        virtualinvoke $r2.<org.quartz.impl.triggers.SimpleTriggerImpl: void setMisfireInstruction(int)>(0);

        virtualinvoke $r2.<org.quartz.impl.triggers.SimpleTriggerImpl: void setMisfireInstruction(int)>(1);

        virtualinvoke $r2.<org.quartz.impl.triggers.SimpleTriggerImpl: void setMisfireInstruction(int)>(5);

        virtualinvoke $r2.<org.quartz.impl.triggers.SimpleTriggerImpl: void setMisfireInstruction(int)>(4);

        virtualinvoke $r2.<org.quartz.impl.triggers.SimpleTriggerImpl: void setMisfireInstruction(int)>(2);

        virtualinvoke $r2.<org.quartz.impl.triggers.SimpleTriggerImpl: void setMisfireInstruction(int)>(3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected exception while setting misfire instruction: ");

        $r7 = virtualinvoke $r4.<java.lang.Exception: java.lang.String getMessage()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.quartz.SimpleTriggerTest: void fail(java.lang.String)>($r9);

     label4:
        virtualinvoke $r2.<org.quartz.impl.triggers.SimpleTriggerImpl: void setMisfireInstruction(int)>(6);

        staticinvoke <org.quartz.SimpleTriggerTest: void fail(java.lang.String)>("Expected exception while setting invalid misfire instruction but did not get it.");

     label5:
        goto label7;

     label6:
        $r3 := @caughtexception;

     label7:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Exception from label4 to label5 with label6;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        java.lang.String[] r0;
        org.quartz.SimpleTriggerTest $r1;

        r0 := @parameter0: java.lang.String[];

        $r1 = new org.quartz.SimpleTriggerTest;

        specialinvoke $r1.<org.quartz.SimpleTriggerTest: void <init>()>();

        virtualinvoke $r1.<org.quartz.SimpleTriggerTest: void writeJobDataFile(java.lang.String)>("2.0");

        return;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;
        java.util.TimeZone $r1, $r6, $r10;
        java.util.Calendar $r2, $r3, $r4, $r5, $r7, $r8, $r9, $r11;

        $r0 = newarray (java.lang.String)[1];

        $r0[0] = "2.0";

        <org.quartz.SimpleTriggerTest: java.lang.String[] VERSIONS> = $r0;

        $r1 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("US/Eastern");

        <org.quartz.SimpleTriggerTest: java.util.TimeZone EST_TIME_ZONE> = $r1;

        $r2 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        <org.quartz.SimpleTriggerTest: java.util.Calendar START_TIME> = $r2;

        $r3 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        <org.quartz.SimpleTriggerTest: java.util.Calendar END_TIME> = $r3;

        $r4 = <org.quartz.SimpleTriggerTest: java.util.Calendar START_TIME>;

        virtualinvoke $r4.<java.util.Calendar: void clear()>();

        $r5 = <org.quartz.SimpleTriggerTest: java.util.Calendar START_TIME>;

        virtualinvoke $r5.<java.util.Calendar: void set(int,int,int,int,int,int)>(2006, 5, 1, 10, 5, 15);

        $r7 = <org.quartz.SimpleTriggerTest: java.util.Calendar START_TIME>;

        $r6 = <org.quartz.SimpleTriggerTest: java.util.TimeZone EST_TIME_ZONE>;

        virtualinvoke $r7.<java.util.Calendar: void setTimeZone(java.util.TimeZone)>($r6);

        $r8 = <org.quartz.SimpleTriggerTest: java.util.Calendar END_TIME>;

        virtualinvoke $r8.<java.util.Calendar: void clear()>();

        $r9 = <org.quartz.SimpleTriggerTest: java.util.Calendar END_TIME>;

        virtualinvoke $r9.<java.util.Calendar: void set(int,int,int,int,int,int)>(2008, 4, 2, 20, 15, 30);

        $r11 = <org.quartz.SimpleTriggerTest: java.util.Calendar END_TIME>;

        $r10 = <org.quartz.SimpleTriggerTest: java.util.TimeZone EST_TIME_ZONE>;

        virtualinvoke $r11.<java.util.Calendar: void setTimeZone(java.util.TimeZone)>($r10);

        return;
    }
}
