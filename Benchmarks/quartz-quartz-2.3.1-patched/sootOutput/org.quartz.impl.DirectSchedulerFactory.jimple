public class org.quartz.impl.DirectSchedulerFactory extends java.lang.Object implements org.quartz.SchedulerFactory
{
    public static final java.lang.String DEFAULT_INSTANCE_ID;
    public static final java.lang.String DEFAULT_SCHEDULER_NAME;
    private static final boolean DEFAULT_JMX_EXPORT;
    private static final java.lang.String DEFAULT_JMX_OBJECTNAME;
    private static final org.quartz.impl.DefaultThreadExecutor DEFAULT_THREAD_EXECUTOR;
    private static final int DEFAULT_BATCH_MAX_SIZE;
    private static final long DEFAULT_BATCH_TIME_WINDOW;
    private boolean initialized;
    private static org.quartz.impl.DirectSchedulerFactory instance;
    private final org.slf4j.Logger log;

    protected org.slf4j.Logger getLog()
    {
        org.quartz.impl.DirectSchedulerFactory r0;
        org.slf4j.Logger $r1;

        r0 := @this: org.quartz.impl.DirectSchedulerFactory;

        $r1 = r0.<org.quartz.impl.DirectSchedulerFactory: org.slf4j.Logger log>;

        return $r1;
    }

    protected void <init>()
    {
        org.quartz.impl.DirectSchedulerFactory r0;
        java.lang.Class $r1;
        org.slf4j.Logger $r2;

        r0 := @this: org.quartz.impl.DirectSchedulerFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.quartz.impl.DirectSchedulerFactory: boolean initialized> = 0;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>($r1);

        r0.<org.quartz.impl.DirectSchedulerFactory: org.slf4j.Logger log> = $r2;

        return;
    }

    public static org.quartz.impl.DirectSchedulerFactory getInstance()
    {
        org.quartz.impl.DirectSchedulerFactory $r0;

        $r0 = <org.quartz.impl.DirectSchedulerFactory: org.quartz.impl.DirectSchedulerFactory instance>;

        return $r0;
    }

    public void createVolatileScheduler(int) throws org.quartz.SchedulerException
    {
        org.quartz.impl.DirectSchedulerFactory r0;
        int i0;
        org.quartz.simpl.SimpleThreadPool $r3;
        org.quartz.simpl.RAMJobStore $r4;

        r0 := @this: org.quartz.impl.DirectSchedulerFactory;

        i0 := @parameter0: int;

        $r3 = new org.quartz.simpl.SimpleThreadPool;

        specialinvoke $r3.<org.quartz.simpl.SimpleThreadPool: void <init>(int,int)>(i0, 5);

        $r4 = new org.quartz.simpl.RAMJobStore;

        specialinvoke $r4.<org.quartz.simpl.RAMJobStore: void <init>()>();

        virtualinvoke r0.<org.quartz.impl.DirectSchedulerFactory: void createScheduler(org.quartz.spi.ThreadPool,org.quartz.spi.JobStore)>($r3, $r4);

        return;
    }

    public void createRemoteScheduler(java.lang.String, int) throws org.quartz.SchedulerException
    {
        org.quartz.impl.DirectSchedulerFactory r0;
        java.lang.String r1;
        int i0;

        r0 := @this: org.quartz.impl.DirectSchedulerFactory;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        virtualinvoke r0.<org.quartz.impl.DirectSchedulerFactory: void createRemoteScheduler(java.lang.String,java.lang.String,java.lang.String,int)>("SimpleQuartzScheduler", "SIMPLE_NON_CLUSTERED", r1, i0);

        return;
    }

    public void createRemoteScheduler(java.lang.String, java.lang.String, java.lang.String, int) throws org.quartz.SchedulerException
    {
        org.quartz.impl.DirectSchedulerFactory r0;
        java.lang.String r1, r2, r3;
        int i0;

        r0 := @this: org.quartz.impl.DirectSchedulerFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        virtualinvoke r0.<org.quartz.impl.DirectSchedulerFactory: void createRemoteScheduler(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int)>(r1, r2, null, r3, i0);

        return;
    }

    public void createRemoteScheduler(java.lang.String, java.lang.String, java.lang.String, java.lang.String, int) throws org.quartz.SchedulerException
    {
        org.quartz.impl.DirectSchedulerFactory r0;
        java.lang.String r1, r2, r3, r4, $r9;
        int i0;
        org.quartz.impl.SchedulerRepository r7;
        org.quartz.impl.RemoteScheduler $r8;

        r0 := @this: org.quartz.impl.DirectSchedulerFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        i0 := @parameter4: int;

        if r3 == null goto label1;

        $r9 = r3;

        goto label2;

     label1:
        $r9 = staticinvoke <org.quartz.core.QuartzSchedulerResources: java.lang.String getUniqueIdentifier(java.lang.String,java.lang.String)>(r1, r2);

     label2:
        $r8 = new org.quartz.impl.RemoteScheduler;

        specialinvoke $r8.<org.quartz.impl.RemoteScheduler: void <init>(java.lang.String,java.lang.String,int)>($r9, r4, i0);

        r7 = staticinvoke <org.quartz.impl.SchedulerRepository: org.quartz.impl.SchedulerRepository getInstance()>();

        virtualinvoke r7.<org.quartz.impl.SchedulerRepository: void bind(org.quartz.Scheduler)>($r8);

        r0.<org.quartz.impl.DirectSchedulerFactory: boolean initialized> = 1;

        return;
    }

    public void createScheduler(org.quartz.spi.ThreadPool, org.quartz.spi.JobStore) throws org.quartz.SchedulerException
    {
        org.quartz.impl.DirectSchedulerFactory r0;
        org.quartz.spi.ThreadPool r1;
        org.quartz.spi.JobStore r2;

        r0 := @this: org.quartz.impl.DirectSchedulerFactory;

        r1 := @parameter0: org.quartz.spi.ThreadPool;

        r2 := @parameter1: org.quartz.spi.JobStore;

        virtualinvoke r0.<org.quartz.impl.DirectSchedulerFactory: void createScheduler(java.lang.String,java.lang.String,org.quartz.spi.ThreadPool,org.quartz.spi.JobStore)>("SimpleQuartzScheduler", "SIMPLE_NON_CLUSTERED", r1, r2);

        return;
    }

    public void createScheduler(java.lang.String, java.lang.String, org.quartz.spi.ThreadPool, org.quartz.spi.JobStore) throws org.quartz.SchedulerException
    {
        org.quartz.impl.DirectSchedulerFactory r0;
        java.lang.String r1, r2;
        org.quartz.spi.ThreadPool r3;
        org.quartz.spi.JobStore r4;

        r0 := @this: org.quartz.impl.DirectSchedulerFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.quartz.spi.ThreadPool;

        r4 := @parameter3: org.quartz.spi.JobStore;

        virtualinvoke r0.<org.quartz.impl.DirectSchedulerFactory: void createScheduler(java.lang.String,java.lang.String,org.quartz.spi.ThreadPool,org.quartz.spi.JobStore,java.lang.String,int,long,long)>(r1, r2, r3, r4, null, 0, -1L, -1L);

        return;
    }

    public void createScheduler(java.lang.String, java.lang.String, org.quartz.spi.ThreadPool, org.quartz.spi.JobStore, java.lang.String, int, long, long) throws org.quartz.SchedulerException
    {
        org.quartz.impl.DirectSchedulerFactory r0;
        java.lang.String r1, r2, r5, $r6;
        org.quartz.spi.ThreadPool r3;
        org.quartz.spi.JobStore r4;
        int i0;
        long l1, l2;

        r0 := @this: org.quartz.impl.DirectSchedulerFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.quartz.spi.ThreadPool;

        r4 := @parameter3: org.quartz.spi.JobStore;

        r5 := @parameter4: java.lang.String;

        i0 := @parameter5: int;

        l1 := @parameter6: long;

        l2 := @parameter7: long;

        $r6 = <org.quartz.impl.DirectSchedulerFactory: java.lang.String DEFAULT_JMX_OBJECTNAME>;

        virtualinvoke r0.<org.quartz.impl.DirectSchedulerFactory: void createScheduler(java.lang.String,java.lang.String,org.quartz.spi.ThreadPool,org.quartz.spi.JobStore,java.util.Map,java.lang.String,int,long,long,boolean,java.lang.String)>(r1, r2, r3, r4, null, r5, i0, l1, l2, 0, $r6);

        return;
    }

    public void createScheduler(java.lang.String, java.lang.String, org.quartz.spi.ThreadPool, org.quartz.spi.JobStore, java.util.Map, java.lang.String, int, long, long, boolean, java.lang.String) throws org.quartz.SchedulerException
    {
        org.quartz.impl.DirectSchedulerFactory r0;
        java.lang.String r1, r2, r6, r7;
        org.quartz.spi.ThreadPool r3;
        org.quartz.spi.JobStore r4;
        java.util.Map r5;
        int i0;
        long l1, l2;
        boolean z0;
        org.quartz.impl.DefaultThreadExecutor $r8;

        r0 := @this: org.quartz.impl.DirectSchedulerFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.quartz.spi.ThreadPool;

        r4 := @parameter3: org.quartz.spi.JobStore;

        r5 := @parameter4: java.util.Map;

        r6 := @parameter5: java.lang.String;

        i0 := @parameter6: int;

        l1 := @parameter7: long;

        l2 := @parameter8: long;

        z0 := @parameter9: boolean;

        r7 := @parameter10: java.lang.String;

        $r8 = <org.quartz.impl.DirectSchedulerFactory: org.quartz.impl.DefaultThreadExecutor DEFAULT_THREAD_EXECUTOR>;

        virtualinvoke r0.<org.quartz.impl.DirectSchedulerFactory: void createScheduler(java.lang.String,java.lang.String,org.quartz.spi.ThreadPool,org.quartz.spi.ThreadExecutor,org.quartz.spi.JobStore,java.util.Map,java.lang.String,int,long,long,boolean,java.lang.String)>(r1, r2, r3, $r8, r4, r5, r6, i0, l1, l2, z0, r7);

        return;
    }

    public void createScheduler(java.lang.String, java.lang.String, org.quartz.spi.ThreadPool, org.quartz.spi.ThreadExecutor, org.quartz.spi.JobStore, java.util.Map, java.lang.String, int, long, long, boolean, java.lang.String) throws org.quartz.SchedulerException
    {
        org.quartz.impl.DirectSchedulerFactory r0;
        java.lang.String r1, r2, r7, r8;
        org.quartz.spi.ThreadPool r3;
        org.quartz.spi.ThreadExecutor r4;
        org.quartz.spi.JobStore r5;
        java.util.Map r6;
        int i0;
        long l1, l2;
        boolean z0;
        org.quartz.impl.DefaultThreadExecutor $r9;

        r0 := @this: org.quartz.impl.DirectSchedulerFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.quartz.spi.ThreadPool;

        r4 := @parameter3: org.quartz.spi.ThreadExecutor;

        r5 := @parameter4: org.quartz.spi.JobStore;

        r6 := @parameter5: java.util.Map;

        r7 := @parameter6: java.lang.String;

        i0 := @parameter7: int;

        l1 := @parameter8: long;

        l2 := @parameter9: long;

        z0 := @parameter10: boolean;

        r8 := @parameter11: java.lang.String;

        $r9 = <org.quartz.impl.DirectSchedulerFactory: org.quartz.impl.DefaultThreadExecutor DEFAULT_THREAD_EXECUTOR>;

        virtualinvoke r0.<org.quartz.impl.DirectSchedulerFactory: void createScheduler(java.lang.String,java.lang.String,org.quartz.spi.ThreadPool,org.quartz.spi.ThreadExecutor,org.quartz.spi.JobStore,java.util.Map,java.lang.String,int,long,long,boolean,java.lang.String,int,long)>(r1, r2, r3, $r9, r5, r6, r7, i0, l1, l2, z0, r8, 1, 0L);

        return;
    }

    public void createScheduler(java.lang.String, java.lang.String, org.quartz.spi.ThreadPool, org.quartz.spi.ThreadExecutor, org.quartz.spi.JobStore, java.util.Map, java.lang.String, int, long, long, boolean, java.lang.String, int, long) throws org.quartz.SchedulerException
    {
        org.quartz.impl.DirectSchedulerFactory r0;
        java.lang.String r1, r2, r7, r8, $r23, $r25, $r29, $r31, $r37;
        org.quartz.spi.ThreadPool r3;
        org.quartz.spi.ThreadExecutor r4;
        org.quartz.spi.JobStore r5;
        java.util.Map r6;
        int i0, i3;
        long l1, l2, l4;
        boolean z0, $z1, $z2;
        java.util.Map$Entry r13;
        org.quartz.impl.StdJobRunShellFactory $r14;
        org.quartz.core.QuartzSchedulerResources $r15;
        org.quartz.core.QuartzScheduler $r16;
        org.quartz.simpl.CascadingClassLoadHelper $r17;
        org.quartz.spi.SchedulerSignaler $r18;
        org.quartz.impl.StdScheduler $r19;
        org.slf4j.Logger $r20, $r26;
        java.lang.StringBuilder $r21, $r22, $r24, $r27, $r28, $r30;
        java.util.Set $r32;
        java.lang.Object $r33, $r34, $r36, $r39;
        org.quartz.spi.SchedulerPlugin $r35, $r40;
        java.util.Collection $r38;
        java.util.Iterator r41, r43;
        org.quartz.impl.SchedulerRepository r44;

        r0 := @this: org.quartz.impl.DirectSchedulerFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.quartz.spi.ThreadPool;

        r4 := @parameter3: org.quartz.spi.ThreadExecutor;

        r5 := @parameter4: org.quartz.spi.JobStore;

        r6 := @parameter5: java.util.Map;

        r7 := @parameter6: java.lang.String;

        i0 := @parameter7: int;

        l1 := @parameter8: long;

        l2 := @parameter9: long;

        z0 := @parameter10: boolean;

        r8 := @parameter11: java.lang.String;

        i3 := @parameter12: int;

        l4 := @parameter13: long;

        $r14 = new org.quartz.impl.StdJobRunShellFactory;

        specialinvoke $r14.<org.quartz.impl.StdJobRunShellFactory: void <init>()>();

        interfaceinvoke r3.<org.quartz.spi.ThreadPool: void setInstanceName(java.lang.String)>(r1);

        interfaceinvoke r3.<org.quartz.spi.ThreadPool: void initialize()>();

        $r15 = new org.quartz.core.QuartzSchedulerResources;

        specialinvoke $r15.<org.quartz.core.QuartzSchedulerResources: void <init>()>();

        virtualinvoke $r15.<org.quartz.core.QuartzSchedulerResources: void setName(java.lang.String)>(r1);

        virtualinvoke $r15.<org.quartz.core.QuartzSchedulerResources: void setInstanceId(java.lang.String)>(r2);

        staticinvoke <org.quartz.impl.SchedulerDetailsSetter: void setDetails(java.lang.Object,java.lang.String,java.lang.String)>(r3, r1, r2);

        virtualinvoke $r15.<org.quartz.core.QuartzSchedulerResources: void setJobRunShellFactory(org.quartz.core.JobRunShellFactory)>($r14);

        virtualinvoke $r15.<org.quartz.core.QuartzSchedulerResources: void setThreadPool(org.quartz.spi.ThreadPool)>(r3);

        virtualinvoke $r15.<org.quartz.core.QuartzSchedulerResources: void setThreadExecutor(org.quartz.spi.ThreadExecutor)>(r4);

        virtualinvoke $r15.<org.quartz.core.QuartzSchedulerResources: void setJobStore(org.quartz.spi.JobStore)>(r5);

        virtualinvoke $r15.<org.quartz.core.QuartzSchedulerResources: void setMaxBatchSize(int)>(i3);

        virtualinvoke $r15.<org.quartz.core.QuartzSchedulerResources: void setBatchTimeWindow(long)>(l4);

        virtualinvoke $r15.<org.quartz.core.QuartzSchedulerResources: void setRMIRegistryHost(java.lang.String)>(r7);

        virtualinvoke $r15.<org.quartz.core.QuartzSchedulerResources: void setRMIRegistryPort(int)>(i0);

        virtualinvoke $r15.<org.quartz.core.QuartzSchedulerResources: void setJMXExport(boolean)>(z0);

        if r8 == null goto label1;

        virtualinvoke $r15.<org.quartz.core.QuartzSchedulerResources: void setJMXObjectName(java.lang.String)>(r8);

     label1:
        if r6 == null goto label3;

        $r38 = interfaceinvoke r6.<java.util.Map: java.util.Collection values()>();

        r41 = interfaceinvoke $r38.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke r41.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r39 = interfaceinvoke r41.<java.util.Iterator: java.lang.Object next()>();

        $r40 = (org.quartz.spi.SchedulerPlugin) $r39;

        virtualinvoke $r15.<org.quartz.core.QuartzSchedulerResources: void addSchedulerPlugin(org.quartz.spi.SchedulerPlugin)>($r40);

        goto label2;

     label3:
        $r16 = new org.quartz.core.QuartzScheduler;

        specialinvoke $r16.<org.quartz.core.QuartzScheduler: void <init>(org.quartz.core.QuartzSchedulerResources,long,long)>($r15, l1, l2);

        $r17 = new org.quartz.simpl.CascadingClassLoadHelper;

        specialinvoke $r17.<org.quartz.simpl.CascadingClassLoadHelper: void <init>()>();

        interfaceinvoke $r17.<org.quartz.spi.ClassLoadHelper: void initialize()>();

        staticinvoke <org.quartz.impl.SchedulerDetailsSetter: void setDetails(java.lang.Object,java.lang.String,java.lang.String)>(r5, r1, r2);

        $r18 = virtualinvoke $r16.<org.quartz.core.QuartzScheduler: org.quartz.spi.SchedulerSignaler getSchedulerSignaler()>();

        interfaceinvoke r5.<org.quartz.spi.JobStore: void initialize(org.quartz.spi.ClassLoadHelper,org.quartz.spi.SchedulerSignaler)>($r17, $r18);

        $r19 = new org.quartz.impl.StdScheduler;

        specialinvoke $r19.<org.quartz.impl.StdScheduler: void <init>(org.quartz.core.QuartzScheduler)>($r16);

        interfaceinvoke $r14.<org.quartz.core.JobRunShellFactory: void initialize(org.quartz.Scheduler)>($r19);

        virtualinvoke $r16.<org.quartz.core.QuartzScheduler: void initialize()>();

        if r6 == null goto label5;

        $r32 = interfaceinvoke r6.<java.util.Map: java.util.Set entrySet()>();

        r43 = interfaceinvoke $r32.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r43.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r33 = interfaceinvoke r43.<java.util.Iterator: java.lang.Object next()>();

        r13 = (java.util.Map$Entry) $r33;

        $r34 = interfaceinvoke r13.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r35 = (org.quartz.spi.SchedulerPlugin) $r34;

        $r36 = interfaceinvoke r13.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r37 = (java.lang.String) $r36;

        interfaceinvoke $r35.<org.quartz.spi.SchedulerPlugin: void initialize(java.lang.String,org.quartz.Scheduler,org.quartz.spi.ClassLoadHelper)>($r37, $r19, $r17);

        goto label4;

     label5:
        $r20 = virtualinvoke r0.<org.quartz.impl.DirectSchedulerFactory: org.slf4j.Logger getLog()>();

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Quartz scheduler \'");

        $r23 = interfaceinvoke $r19.<org.quartz.Scheduler: java.lang.String getSchedulerName()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r20.<org.slf4j.Logger: void info(java.lang.String)>($r25);

        $r26 = virtualinvoke r0.<org.quartz.impl.DirectSchedulerFactory: org.slf4j.Logger getLog()>();

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Quartz scheduler version: ");

        $r29 = virtualinvoke $r16.<org.quartz.core.QuartzScheduler: java.lang.String getVersion()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r26.<org.slf4j.Logger: void info(java.lang.String)>($r31);

        r44 = staticinvoke <org.quartz.impl.SchedulerRepository: org.quartz.impl.SchedulerRepository getInstance()>();

        virtualinvoke $r16.<org.quartz.core.QuartzScheduler: void addNoGCObject(java.lang.Object)>(r44);

        virtualinvoke r44.<org.quartz.impl.SchedulerRepository: void bind(org.quartz.Scheduler)>($r19);

        r0.<org.quartz.impl.DirectSchedulerFactory: boolean initialized> = 1;

        return;
    }

    public org.quartz.Scheduler getScheduler() throws org.quartz.SchedulerException
    {
        org.quartz.impl.DirectSchedulerFactory r0;
        boolean $z0;
        org.quartz.Scheduler $r1;
        org.quartz.SchedulerException $r2;

        r0 := @this: org.quartz.impl.DirectSchedulerFactory;

        $z0 = r0.<org.quartz.impl.DirectSchedulerFactory: boolean initialized>;

        if $z0 != 0 goto label1;

        $r2 = new org.quartz.SchedulerException;

        specialinvoke $r2.<org.quartz.SchedulerException: void <init>(java.lang.String)>("you must call createRemoteScheduler or createScheduler methods before calling getScheduler()");

        throw $r2;

     label1:
        $r1 = virtualinvoke r0.<org.quartz.impl.DirectSchedulerFactory: org.quartz.Scheduler getScheduler(java.lang.String)>("SimpleQuartzScheduler");

        return $r1;
    }

    public org.quartz.Scheduler getScheduler(java.lang.String) throws org.quartz.SchedulerException
    {
        org.quartz.impl.DirectSchedulerFactory r0;
        java.lang.String r1;
        org.quartz.impl.SchedulerRepository r2;
        org.quartz.Scheduler $r3;

        r0 := @this: org.quartz.impl.DirectSchedulerFactory;

        r1 := @parameter0: java.lang.String;

        r2 = staticinvoke <org.quartz.impl.SchedulerRepository: org.quartz.impl.SchedulerRepository getInstance()>();

        $r3 = virtualinvoke r2.<org.quartz.impl.SchedulerRepository: org.quartz.Scheduler lookup(java.lang.String)>(r1);

        return $r3;
    }

    public java.util.Collection getAllSchedulers() throws org.quartz.SchedulerException
    {
        org.quartz.impl.DirectSchedulerFactory r0;
        org.quartz.impl.SchedulerRepository $r1;
        java.util.Collection $r2;

        r0 := @this: org.quartz.impl.DirectSchedulerFactory;

        $r1 = staticinvoke <org.quartz.impl.SchedulerRepository: org.quartz.impl.SchedulerRepository getInstance()>();

        $r2 = virtualinvoke $r1.<org.quartz.impl.SchedulerRepository: java.util.Collection lookupAll()>();

        return $r2;
    }

    static void <clinit>()
    {
        org.quartz.impl.DefaultThreadExecutor $r0;
        org.quartz.impl.DirectSchedulerFactory $r1;

        <org.quartz.impl.DirectSchedulerFactory: long DEFAULT_BATCH_TIME_WINDOW> = 0L;

        <org.quartz.impl.DirectSchedulerFactory: int DEFAULT_BATCH_MAX_SIZE> = 1;

        <org.quartz.impl.DirectSchedulerFactory: boolean DEFAULT_JMX_EXPORT> = 0;

        <org.quartz.impl.DirectSchedulerFactory: java.lang.String DEFAULT_SCHEDULER_NAME> = "SimpleQuartzScheduler";

        <org.quartz.impl.DirectSchedulerFactory: java.lang.String DEFAULT_INSTANCE_ID> = "SIMPLE_NON_CLUSTERED";

        <org.quartz.impl.DirectSchedulerFactory: java.lang.String DEFAULT_JMX_OBJECTNAME> = null;

        $r0 = new org.quartz.impl.DefaultThreadExecutor;

        specialinvoke $r0.<org.quartz.impl.DefaultThreadExecutor: void <init>()>();

        <org.quartz.impl.DirectSchedulerFactory: org.quartz.impl.DefaultThreadExecutor DEFAULT_THREAD_EXECUTOR> = $r0;

        $r1 = new org.quartz.impl.DirectSchedulerFactory;

        specialinvoke $r1.<org.quartz.impl.DirectSchedulerFactory: void <init>()>();

        <org.quartz.impl.DirectSchedulerFactory: org.quartz.impl.DirectSchedulerFactory instance> = $r1;

        return;
    }
}
