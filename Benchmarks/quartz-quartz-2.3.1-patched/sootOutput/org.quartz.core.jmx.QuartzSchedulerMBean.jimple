public interface  org.quartz.core.jmx.QuartzSchedulerMBean extends java.lang.Object
{
    public static final java.lang.String SCHEDULER_STARTED;
    public static final java.lang.String SCHEDULER_PAUSED;
    public static final java.lang.String SCHEDULER_SHUTDOWN;
    public static final java.lang.String SCHEDULER_ERROR;
    public static final java.lang.String JOB_ADDED;
    public static final java.lang.String JOB_DELETED;
    public static final java.lang.String JOB_SCHEDULED;
    public static final java.lang.String JOB_UNSCHEDULED;
    public static final java.lang.String JOBS_PAUSED;
    public static final java.lang.String JOBS_RESUMED;
    public static final java.lang.String JOB_EXECUTION_VETOED;
    public static final java.lang.String JOB_TO_BE_EXECUTED;
    public static final java.lang.String JOB_WAS_EXECUTED;
    public static final java.lang.String TRIGGER_FINALIZED;
    public static final java.lang.String TRIGGERS_PAUSED;
    public static final java.lang.String TRIGGERS_RESUMED;
    public static final java.lang.String SCHEDULING_DATA_CLEARED;
    public static final java.lang.String SAMPLED_STATISTICS_ENABLED;
    public static final java.lang.String SAMPLED_STATISTICS_RESET;

    public abstract java.lang.String getSchedulerName();

    public abstract java.lang.String getSchedulerInstanceId();

    public abstract boolean isStandbyMode();

    public abstract boolean isShutdown();

    public abstract java.lang.String getVersion();

    public abstract java.lang.String getJobStoreClassName();

    public abstract java.lang.String getThreadPoolClassName();

    public abstract int getThreadPoolSize();

    public abstract long getJobsScheduledMostRecentSample();

    public abstract long getJobsExecutedMostRecentSample();

    public abstract long getJobsCompletedMostRecentSample();

    public abstract java.util.Map getPerformanceMetrics();

    public abstract javax.management.openmbean.TabularData getCurrentlyExecutingJobs() throws java.lang.Exception;

    public abstract javax.management.openmbean.TabularData getAllJobDetails() throws java.lang.Exception;

    public abstract java.util.List getAllTriggers() throws java.lang.Exception;

    public abstract java.util.List getJobGroupNames() throws java.lang.Exception;

    public abstract java.util.List getJobNames(java.lang.String) throws java.lang.Exception;

    public abstract javax.management.openmbean.CompositeData getJobDetail(java.lang.String, java.lang.String) throws java.lang.Exception;

    public abstract boolean isStarted();

    public abstract void start() throws java.lang.Exception;

    public abstract void shutdown();

    public abstract void standby();

    public abstract void clear() throws java.lang.Exception;

    public abstract java.util.Date scheduleJob(java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.lang.Exception;

    public abstract void scheduleBasicJob(java.util.Map, java.util.Map) throws java.lang.Exception;

    public abstract void scheduleJob(java.util.Map, java.util.Map) throws java.lang.Exception;

    public abstract void scheduleJob(java.lang.String, java.lang.String, java.util.Map) throws java.lang.Exception;

    public abstract boolean unscheduleJob(java.lang.String, java.lang.String) throws java.lang.Exception;

    public abstract boolean interruptJob(java.lang.String, java.lang.String) throws java.lang.Exception;

    public abstract boolean interruptJob(java.lang.String) throws java.lang.Exception;

    public abstract void triggerJob(java.lang.String, java.lang.String, java.util.Map) throws java.lang.Exception;

    public abstract boolean deleteJob(java.lang.String, java.lang.String) throws java.lang.Exception;

    public abstract void addJob(javax.management.openmbean.CompositeData, boolean) throws java.lang.Exception;

    public abstract void addJob(java.util.Map, boolean) throws java.lang.Exception;

    public abstract void pauseJobGroup(java.lang.String) throws java.lang.Exception;

    public abstract void pauseJobsStartingWith(java.lang.String) throws java.lang.Exception;

    public abstract void pauseJobsEndingWith(java.lang.String) throws java.lang.Exception;

    public abstract void pauseJobsContaining(java.lang.String) throws java.lang.Exception;

    public abstract void pauseJobsAll() throws java.lang.Exception;

    public abstract void resumeJobGroup(java.lang.String) throws java.lang.Exception;

    public abstract void resumeJobsStartingWith(java.lang.String) throws java.lang.Exception;

    public abstract void resumeJobsEndingWith(java.lang.String) throws java.lang.Exception;

    public abstract void resumeJobsContaining(java.lang.String) throws java.lang.Exception;

    public abstract void resumeJobsAll() throws java.lang.Exception;

    public abstract void pauseJob(java.lang.String, java.lang.String) throws java.lang.Exception;

    public abstract void resumeJob(java.lang.String, java.lang.String) throws java.lang.Exception;

    public abstract java.util.List getTriggerGroupNames() throws java.lang.Exception;

    public abstract java.util.List getTriggerNames(java.lang.String) throws java.lang.Exception;

    public abstract javax.management.openmbean.CompositeData getTrigger(java.lang.String, java.lang.String) throws java.lang.Exception;

    public abstract java.lang.String getTriggerState(java.lang.String, java.lang.String) throws java.lang.Exception;

    public abstract java.util.List getTriggersOfJob(java.lang.String, java.lang.String) throws java.lang.Exception;

    public abstract java.util.Set getPausedTriggerGroups() throws java.lang.Exception;

    public abstract void pauseAllTriggers() throws java.lang.Exception;

    public abstract void resumeAllTriggers() throws java.lang.Exception;

    public abstract void pauseTriggerGroup(java.lang.String) throws java.lang.Exception;

    public abstract void pauseTriggersStartingWith(java.lang.String) throws java.lang.Exception;

    public abstract void pauseTriggersEndingWith(java.lang.String) throws java.lang.Exception;

    public abstract void pauseTriggersContaining(java.lang.String) throws java.lang.Exception;

    public abstract void pauseTriggersAll() throws java.lang.Exception;

    public abstract void resumeTriggerGroup(java.lang.String) throws java.lang.Exception;

    public abstract void resumeTriggersStartingWith(java.lang.String) throws java.lang.Exception;

    public abstract void resumeTriggersEndingWith(java.lang.String) throws java.lang.Exception;

    public abstract void resumeTriggersContaining(java.lang.String) throws java.lang.Exception;

    public abstract void resumeTriggersAll() throws java.lang.Exception;

    public abstract void pauseTrigger(java.lang.String, java.lang.String) throws java.lang.Exception;

    public abstract void resumeTrigger(java.lang.String, java.lang.String) throws java.lang.Exception;

    public abstract java.util.List getCalendarNames() throws java.lang.Exception;

    public abstract void deleteCalendar(java.lang.String) throws java.lang.Exception;

    public abstract void setSampledStatisticsEnabled(boolean);

    public abstract boolean isSampledStatisticsEnabled();

    public static void <clinit>()
    {
        <org.quartz.core.jmx.QuartzSchedulerMBean: java.lang.String SAMPLED_STATISTICS_RESET> = "sampledStatisticsReset";

        <org.quartz.core.jmx.QuartzSchedulerMBean: java.lang.String SAMPLED_STATISTICS_ENABLED> = "sampledStatisticsEnabled";

        <org.quartz.core.jmx.QuartzSchedulerMBean: java.lang.String SCHEDULING_DATA_CLEARED> = "schedulingDataCleared";

        <org.quartz.core.jmx.QuartzSchedulerMBean: java.lang.String TRIGGERS_RESUMED> = "triggersResumed";

        <org.quartz.core.jmx.QuartzSchedulerMBean: java.lang.String TRIGGERS_PAUSED> = "triggersPaused";

        <org.quartz.core.jmx.QuartzSchedulerMBean: java.lang.String TRIGGER_FINALIZED> = "triggerFinalized";

        <org.quartz.core.jmx.QuartzSchedulerMBean: java.lang.String JOB_WAS_EXECUTED> = "jobWasExecuted";

        <org.quartz.core.jmx.QuartzSchedulerMBean: java.lang.String JOB_TO_BE_EXECUTED> = "jobToBeExecuted";

        <org.quartz.core.jmx.QuartzSchedulerMBean: java.lang.String JOB_EXECUTION_VETOED> = "jobExecutionVetoed";

        <org.quartz.core.jmx.QuartzSchedulerMBean: java.lang.String JOBS_RESUMED> = "jobsResumed";

        <org.quartz.core.jmx.QuartzSchedulerMBean: java.lang.String JOBS_PAUSED> = "jobsPaused";

        <org.quartz.core.jmx.QuartzSchedulerMBean: java.lang.String JOB_UNSCHEDULED> = "jobUnscheduled";

        <org.quartz.core.jmx.QuartzSchedulerMBean: java.lang.String JOB_SCHEDULED> = "jobScheduled";

        <org.quartz.core.jmx.QuartzSchedulerMBean: java.lang.String JOB_DELETED> = "jobDeleted";

        <org.quartz.core.jmx.QuartzSchedulerMBean: java.lang.String JOB_ADDED> = "jobAdded";

        <org.quartz.core.jmx.QuartzSchedulerMBean: java.lang.String SCHEDULER_ERROR> = "schedulerError";

        <org.quartz.core.jmx.QuartzSchedulerMBean: java.lang.String SCHEDULER_SHUTDOWN> = "schedulerShutdown";

        <org.quartz.core.jmx.QuartzSchedulerMBean: java.lang.String SCHEDULER_PAUSED> = "schedulerPaused";

        <org.quartz.core.jmx.QuartzSchedulerMBean: java.lang.String SCHEDULER_STARTED> = "schedulerStarted";

        return;
    }
}
