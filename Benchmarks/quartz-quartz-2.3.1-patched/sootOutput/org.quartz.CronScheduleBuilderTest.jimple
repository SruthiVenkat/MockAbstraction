public class org.quartz.CronScheduleBuilderTest extends junit.framework.TestCase
{

    public void <init>()
    {
        org.quartz.CronScheduleBuilderTest r0;

        r0 := @this: org.quartz.CronScheduleBuilderTest;

        specialinvoke r0.<junit.framework.TestCase: void <init>()>();

        return;
    }

    public void testAtHourAndMinuteOnGivenDaysOfWeek()
    {
        org.quartz.CronScheduleBuilderTest r0;
        org.quartz.TriggerBuilder $r1, $r2, $r8, $r11, $r12, $r16;
        java.lang.Integer[] $r3, $r13;
        java.lang.Integer $r4, $r5, $r6, $r14;
        org.quartz.CronScheduleBuilder $r7, $r15;
        org.quartz.Trigger $r9, $r17;
        java.lang.String $r10, $r18;
        org.quartz.CronTrigger r19, r20;

        r0 := @this: org.quartz.CronScheduleBuilderTest;

        $r1 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r2 = virtualinvoke $r1.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String)>("test");

        $r3 = newarray (java.lang.Integer)[3];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r3[1] = $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        $r3[2] = $r6;

        $r7 = staticinvoke <org.quartz.CronScheduleBuilder: org.quartz.CronScheduleBuilder atHourAndMinuteOnGivenDaysOfWeek(int,int,java.lang.Integer[])>(10, 0, $r3);

        $r8 = virtualinvoke $r2.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>($r7);

        $r9 = virtualinvoke $r8.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        r19 = (org.quartz.CronTrigger) $r9;

        $r10 = interfaceinvoke r19.<org.quartz.CronTrigger: java.lang.String getCronExpression()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.String)>("0 0 10 ? * 2,5,6", $r10);

        $r11 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r12 = virtualinvoke $r11.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String)>("test");

        $r13 = newarray (java.lang.Integer)[1];

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r13[0] = $r14;

        $r15 = staticinvoke <org.quartz.CronScheduleBuilder: org.quartz.CronScheduleBuilder atHourAndMinuteOnGivenDaysOfWeek(int,int,java.lang.Integer[])>(10, 0, $r13);

        $r16 = virtualinvoke $r12.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>($r15);

        $r17 = virtualinvoke $r16.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        r20 = (org.quartz.CronTrigger) $r17;

        $r18 = interfaceinvoke r20.<org.quartz.CronTrigger: java.lang.String getCronExpression()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.String)>("0 0 10 ? * 4", $r18);

        return;
    }
}
