public class org.quartz.impl.jdbcjobstore.StdJDBCDelegate extends java.lang.Object implements org.quartz.impl.jdbcjobstore.DriverDelegate, org.quartz.impl.jdbcjobstore.StdJDBCConstants
{
    protected org.slf4j.Logger logger;
    protected java.lang.String tablePrefix;
    protected java.lang.String instanceId;
    protected java.lang.String schedName;
    protected boolean useProperties;
    protected org.quartz.spi.ClassLoadHelper classLoadHelper;
    protected java.util.List triggerPersistenceDelegates;
    private java.lang.String schedNameLiteral;

    public void <init>()
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.util.LinkedList $r1;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: org.slf4j.Logger logger> = null;

        r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String tablePrefix> = "QRTZ_";

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.util.List triggerPersistenceDelegates> = $r1;

        r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String schedNameLiteral> = null;

        return;
    }

    public void initialize(org.slf4j.Logger, java.lang.String, java.lang.String, java.lang.String, org.quartz.spi.ClassLoadHelper, boolean, java.lang.String) throws org.quartz.impl.jdbcjobstore.NoSuchDelegateException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        org.slf4j.Logger r1;
        java.lang.String r2, r3, r4, r6, r9, r11, r14, $r15, $r16, $r22, $r23, $r31;
        org.quartz.spi.ClassLoadHelper r5;
        boolean z0, $z1, $z2;
        java.lang.String[] r7, r10, r12;
        int i0, i1, $i2, i3, i4;
        org.quartz.impl.jdbcjobstore.NoSuchDelegateException $r17, $r27;
        java.lang.StringBuilder $r18, $r19, $r20, $r21, $r28, $r29, $r30;
        java.lang.Object $r24;
        org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate $r25;
        java.lang.Exception $r26;
        java.lang.Class r32;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: org.slf4j.Logger;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: org.quartz.spi.ClassLoadHelper;

        z0 := @parameter5: boolean;

        r6 := @parameter6: java.lang.String;

        r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: org.slf4j.Logger logger> = r1;

        r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String tablePrefix> = r2;

        r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String schedName> = r3;

        r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String instanceId> = r4;

        r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: boolean useProperties> = z0;

        r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: org.quartz.spi.ClassLoadHelper classLoadHelper> = r5;

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void addDefaultTriggerPersistenceDelegates()>();

        if r6 != null goto label01;

        return;

     label01:
        r7 = virtualinvoke r6.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\|");

        i0 = lengthof r7;

        i3 = 0;

     label02:
        if i3 >= i0 goto label12;

        r9 = r7[i3];

        r10 = virtualinvoke r9.<java.lang.String: java.lang.String[] split(java.lang.String)>("=");

        r11 = r10[0];

        $i2 = lengthof r10;

        if $i2 == 1 goto label11;

        $r15 = r10[1];

        if $r15 == null goto label11;

        $r16 = r10[1];

        $z1 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z1 == 0 goto label03;

        goto label11;

     label03:
        $z2 = virtualinvoke r11.<java.lang.String: boolean equals(java.lang.Object)>("triggerPersistenceDelegateClasses");

        if $z2 == 0 goto label10;

        $r23 = r10[1];

        r12 = virtualinvoke $r23.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        i1 = lengthof r12;

        i4 = 0;

     label04:
        if i4 >= i1 goto label09;

        r14 = r12[i4];

     label05:
        r32 = interfaceinvoke r5.<org.quartz.spi.ClassLoadHelper: java.lang.Class loadClass(java.lang.String)>(r14);

        $r24 = virtualinvoke r32.<java.lang.Class: java.lang.Object newInstance()>();

        $r25 = (org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate) $r24;

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void addTriggerPersistenceDelegate(org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate)>($r25);

     label06:
        goto label08;

     label07:
        $r26 := @caughtexception;

        $r27 = new org.quartz.impl.jdbcjobstore.NoSuchDelegateException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error instantiating TriggerPersistenceDelegate of type: ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<org.quartz.impl.jdbcjobstore.NoSuchDelegateException: void <init>(java.lang.String,java.lang.Throwable)>($r31, $r26);

        throw $r27;

     label08:
        i4 = i4 + 1;

        goto label04;

     label09:
        goto label11;

     label10:
        $r17 = new org.quartz.impl.jdbcjobstore.NoSuchDelegateException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown setting: \'");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<org.quartz.impl.jdbcjobstore.NoSuchDelegateException: void <init>(java.lang.String)>($r22);

        throw $r17;

     label11:
        i3 = i3 + 1;

        goto label02;

     label12:
        return;

        catch java.lang.Exception from label05 to label06 with label07;
    }

    protected void addDefaultTriggerPersistenceDelegates()
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        org.quartz.impl.jdbcjobstore.SimpleTriggerPersistenceDelegate $r1;
        org.quartz.impl.jdbcjobstore.CronTriggerPersistenceDelegate $r2;
        org.quartz.impl.jdbcjobstore.CalendarIntervalTriggerPersistenceDelegate $r3;
        org.quartz.impl.jdbcjobstore.DailyTimeIntervalTriggerPersistenceDelegate $r4;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        $r1 = new org.quartz.impl.jdbcjobstore.SimpleTriggerPersistenceDelegate;

        specialinvoke $r1.<org.quartz.impl.jdbcjobstore.SimpleTriggerPersistenceDelegate: void <init>()>();

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void addTriggerPersistenceDelegate(org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate)>($r1);

        $r2 = new org.quartz.impl.jdbcjobstore.CronTriggerPersistenceDelegate;

        specialinvoke $r2.<org.quartz.impl.jdbcjobstore.CronTriggerPersistenceDelegate: void <init>()>();

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void addTriggerPersistenceDelegate(org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate)>($r2);

        $r3 = new org.quartz.impl.jdbcjobstore.CalendarIntervalTriggerPersistenceDelegate;

        specialinvoke $r3.<org.quartz.impl.jdbcjobstore.CalendarIntervalTriggerPersistenceDelegate: void <init>()>();

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void addTriggerPersistenceDelegate(org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate)>($r3);

        $r4 = new org.quartz.impl.jdbcjobstore.DailyTimeIntervalTriggerPersistenceDelegate;

        specialinvoke $r4.<org.quartz.impl.jdbcjobstore.DailyTimeIntervalTriggerPersistenceDelegate: void <init>()>();

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void addTriggerPersistenceDelegate(org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate)>($r4);

        return;
    }

    protected boolean canUseProperties()
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        boolean $z0;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        $z0 = r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: boolean useProperties>;

        return $z0;
    }

    public void addTriggerPersistenceDelegate(org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate)
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate r1;
        java.lang.StringBuilder $r2, $r4, $r7;
        org.slf4j.Logger $r3;
        java.lang.Class $r5;
        java.lang.String $r6, $r8, $r9, $r10;
        java.util.List $r11;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate;

        $r3 = r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: org.slf4j.Logger logger>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Adding TriggerPersistenceDelegate of type: ");

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r3.<org.slf4j.Logger: void debug(java.lang.String)>($r8);

        $r10 = r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String tablePrefix>;

        $r9 = r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String schedName>;

        interfaceinvoke r1.<org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate: void initialize(java.lang.String,java.lang.String)>($r10, $r9);

        $r11 = r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.util.List triggerPersistenceDelegates>;

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate findTriggerPersistenceDelegate(org.quartz.spi.OperableTrigger)
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        org.quartz.spi.OperableTrigger r1;
        java.util.Iterator r2;
        org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate r3;
        java.util.List $r4;
        boolean $z0, $z1;
        java.lang.Object $r5;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: org.quartz.spi.OperableTrigger;

        $r4 = r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.util.List triggerPersistenceDelegates>;

        r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate) $r5;

        $z1 = interfaceinvoke r3.<org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate: boolean canHandleTriggerType(org.quartz.spi.OperableTrigger)>(r1);

        if $z1 == 0 goto label2;

        return r3;

     label2:
        goto label1;

     label3:
        return null;
    }

    public org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate findTriggerPersistenceDelegate(java.lang.String)
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.lang.String r1, $r6;
        java.util.Iterator r2;
        org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate r3;
        java.util.List $r4;
        boolean $z0, $z1;
        java.lang.Object $r5;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.util.List triggerPersistenceDelegates>;

        r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate) $r5;

        $r6 = interfaceinvoke r3.<org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate: java.lang.String getHandledTriggerTypeDiscriminator()>();

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        return r3;

     label2:
        goto label1;

     label3:
        return null;
    }

    public int updateTriggerStatesFromOtherStates(java.sql.Connection, java.lang.String, java.lang.String, java.lang.String) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        java.lang.String r2, r3, r4, $r6;
        int i0;
        java.lang.Throwable $r7;
        java.sql.PreparedStatement r8;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r8 = null;

     label1:
        $r6 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("UPDATE {0}TRIGGERS SET TRIGGER_STATE = ? WHERE SCHED_NAME = {1} AND (TRIGGER_STATE = ? OR TRIGGER_STATE = ?)");

        r8 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r6);

        interfaceinvoke r8.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, r2);

        interfaceinvoke r8.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(2, r3);

        interfaceinvoke r8.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(3, r4);

        i0 = interfaceinvoke r8.<java.sql.PreparedStatement: int executeUpdate()>();

     label2:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r8);

        return i0;

     label3:
        $r7 := @caughtexception;

     label4:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r8);

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.util.List selectMisfiredTriggers(java.sql.Connection, long) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        long l0;
        java.lang.String r3, $r5, $r7, r13;
        java.math.BigDecimal $r6;
        java.util.LinkedList $r8;
        boolean $z0;
        org.quartz.TriggerKey $r9;
        java.lang.Throwable $r10;
        java.sql.PreparedStatement r11;
        java.sql.ResultSet r12;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        l0 := @parameter1: long;

        r11 = null;

        r12 = null;

     label1:
        $r5 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("SELECT * FROM {0}TRIGGERS WHERE SCHED_NAME = {1} AND NOT (MISFIRE_INSTR = -1) AND NEXT_FIRE_TIME < ? ORDER BY NEXT_FIRE_TIME ASC, PRIORITY DESC");

        r11 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r5);

        $r6 = new java.math.BigDecimal;

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l0);

        specialinvoke $r6.<java.math.BigDecimal: void <init>(java.lang.String)>($r7);

        interfaceinvoke r11.<java.sql.PreparedStatement: void setBigDecimal(int,java.math.BigDecimal)>(1, $r6);

        r12 = interfaceinvoke r11.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

        $r8 = new java.util.LinkedList;

        specialinvoke $r8.<java.util.LinkedList: void <init>()>();

     label2:
        $z0 = interfaceinvoke r12.<java.sql.ResultSet: boolean next()>();

        if $z0 == 0 goto label3;

        r13 = interfaceinvoke r12.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("TRIGGER_NAME");

        r3 = interfaceinvoke r12.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("TRIGGER_GROUP");

        $r9 = staticinvoke <org.quartz.TriggerKey: org.quartz.TriggerKey triggerKey(java.lang.String,java.lang.String)>(r13, r3);

        virtualinvoke $r8.<java.util.LinkedList: boolean add(java.lang.Object)>($r9);

        goto label2;

     label3:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r12);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r11);

        return $r8;

     label4:
        $r10 := @caughtexception;

     label5:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r12);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r11);

        throw $r10;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.util.List selectTriggersInState(java.sql.Connection, java.lang.String) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        java.lang.String r2, $r6, $r8, $r9;
        java.util.LinkedList $r7;
        boolean $z0;
        org.quartz.TriggerKey $r10;
        java.lang.Throwable $r11;
        java.sql.PreparedStatement r12;
        java.sql.ResultSet r13;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: java.lang.String;

        r12 = null;

        r13 = null;

     label1:
        $r6 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("SELECT TRIGGER_NAME, TRIGGER_GROUP FROM {0}TRIGGERS WHERE SCHED_NAME = {1} AND TRIGGER_STATE = ?");

        r12 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r6);

        interfaceinvoke r12.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, r2);

        r13 = interfaceinvoke r12.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

        $r7 = new java.util.LinkedList;

        specialinvoke $r7.<java.util.LinkedList: void <init>()>();

     label2:
        $z0 = interfaceinvoke r13.<java.sql.ResultSet: boolean next()>();

        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke r13.<java.sql.ResultSet: java.lang.String getString(int)>(1);

        $r9 = interfaceinvoke r13.<java.sql.ResultSet: java.lang.String getString(int)>(2);

        $r10 = staticinvoke <org.quartz.TriggerKey: org.quartz.TriggerKey triggerKey(java.lang.String,java.lang.String)>($r8, $r9);

        virtualinvoke $r7.<java.util.LinkedList: boolean add(java.lang.Object)>($r10);

        goto label2;

     label3:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r13);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r12);

        return $r7;

     label4:
        $r11 := @caughtexception;

     label5:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r13);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r12);

        throw $r11;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.util.List selectMisfiredTriggersInState(java.sql.Connection, java.lang.String, long) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        java.lang.String r2, r4, $r6, $r8, r14;
        long l0;
        java.math.BigDecimal $r7;
        java.util.LinkedList $r9;
        boolean $z0;
        org.quartz.TriggerKey $r10;
        java.lang.Throwable $r11;
        java.sql.PreparedStatement r12;
        java.sql.ResultSet r13;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        r12 = null;

        r13 = null;

     label1:
        $r6 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("SELECT TRIGGER_NAME, TRIGGER_GROUP FROM {0}TRIGGERS WHERE SCHED_NAME = {1} AND NOT (MISFIRE_INSTR = -1) AND NEXT_FIRE_TIME < ? AND TRIGGER_STATE = ? ORDER BY NEXT_FIRE_TIME ASC, PRIORITY DESC");

        r12 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r6);

        $r7 = new java.math.BigDecimal;

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l0);

        specialinvoke $r7.<java.math.BigDecimal: void <init>(java.lang.String)>($r8);

        interfaceinvoke r12.<java.sql.PreparedStatement: void setBigDecimal(int,java.math.BigDecimal)>(1, $r7);

        interfaceinvoke r12.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(2, r2);

        r13 = interfaceinvoke r12.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

        $r9 = new java.util.LinkedList;

        specialinvoke $r9.<java.util.LinkedList: void <init>()>();

     label2:
        $z0 = interfaceinvoke r13.<java.sql.ResultSet: boolean next()>();

        if $z0 == 0 goto label3;

        r14 = interfaceinvoke r13.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("TRIGGER_NAME");

        r4 = interfaceinvoke r13.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("TRIGGER_GROUP");

        $r10 = staticinvoke <org.quartz.TriggerKey: org.quartz.TriggerKey triggerKey(java.lang.String,java.lang.String)>(r14, r4);

        virtualinvoke $r9.<java.util.LinkedList: boolean add(java.lang.Object)>($r10);

        goto label2;

     label3:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r13);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r12);

        return $r9;

     label4:
        $r11 := @caughtexception;

     label5:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r13);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r12);

        throw $r11;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean hasMisfiredTriggersInState(java.sql.Connection, java.lang.String, long, int, java.util.List) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        java.lang.String r2, r4, $r6, $r8, r13;
        long l0;
        int i1, $i2;
        java.util.List r3;
        java.math.BigDecimal $r7;
        org.quartz.TriggerKey $r9;
        java.lang.Throwable $r10;
        java.sql.PreparedStatement r11;
        java.sql.ResultSet r12;
        boolean z1, $z2;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        i1 := @parameter3: int;

        r3 := @parameter4: java.util.List;

        r11 = null;

        r12 = null;

     label1:
        $r6 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("SELECT TRIGGER_NAME, TRIGGER_GROUP FROM {0}TRIGGERS WHERE SCHED_NAME = {1} AND NOT (MISFIRE_INSTR = -1) AND NEXT_FIRE_TIME < ? AND TRIGGER_STATE = ? ORDER BY NEXT_FIRE_TIME ASC, PRIORITY DESC");

        r11 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r6);

        $r7 = new java.math.BigDecimal;

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l0);

        specialinvoke $r7.<java.math.BigDecimal: void <init>(java.lang.String)>($r8);

        interfaceinvoke r11.<java.sql.PreparedStatement: void setBigDecimal(int,java.math.BigDecimal)>(1, $r7);

        interfaceinvoke r11.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(2, r2);

        r12 = interfaceinvoke r11.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

        z1 = 0;

     label2:
        $z2 = interfaceinvoke r12.<java.sql.ResultSet: boolean next()>();

        if $z2 == 0 goto label4;

        if z1 != 0 goto label4;

        $i2 = interfaceinvoke r3.<java.util.List: int size()>();

        if $i2 != i1 goto label3;

        z1 = 1;

        goto label2;

     label3:
        r13 = interfaceinvoke r12.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("TRIGGER_NAME");

        r4 = interfaceinvoke r12.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("TRIGGER_GROUP");

        $r9 = staticinvoke <org.quartz.TriggerKey: org.quartz.TriggerKey triggerKey(java.lang.String,java.lang.String)>(r13, r4);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label2;

     label4:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r12);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r11);

        return z1;

     label5:
        $r10 := @caughtexception;

     label6:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r12);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r11);

        throw $r10;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public int countMisfiredTriggersInState(java.sql.Connection, java.lang.String, long) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        java.lang.String r2, $r4, $r6;
        long l0;
        int i1;
        java.math.BigDecimal $r5;
        boolean $z0;
        java.sql.SQLException $r7;
        java.lang.Throwable $r8;
        java.sql.PreparedStatement r9;
        java.sql.ResultSet r10;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        r9 = null;

        r10 = null;

     label1:
        $r4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("SELECT COUNT(TRIGGER_NAME) FROM {0}TRIGGERS WHERE SCHED_NAME = {1} AND NOT (MISFIRE_INSTR = -1) AND NEXT_FIRE_TIME < ? AND TRIGGER_STATE = ?");

        r9 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r4);

        $r5 = new java.math.BigDecimal;

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l0);

        specialinvoke $r5.<java.math.BigDecimal: void <init>(java.lang.String)>($r6);

        interfaceinvoke r9.<java.sql.PreparedStatement: void setBigDecimal(int,java.math.BigDecimal)>(1, $r5);

        interfaceinvoke r9.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(2, r2);

        r10 = interfaceinvoke r9.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

        $z0 = interfaceinvoke r10.<java.sql.ResultSet: boolean next()>();

        if $z0 == 0 goto label3;

        i1 = interfaceinvoke r10.<java.sql.ResultSet: int getInt(int)>(1);

     label2:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r10);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r9);

        return i1;

     label3:
        $r7 = new java.sql.SQLException;

        specialinvoke $r7.<java.sql.SQLException: void <init>(java.lang.String)>("No misfired trigger count returned.");

        throw $r7;

     label4:
        $r8 := @caughtexception;

     label5:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r10);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r9);

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label5 with label4;
    }

    public java.util.List selectMisfiredTriggersInGroupInState(java.sql.Connection, java.lang.String, java.lang.String, long) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        java.lang.String r2, r3, $r6, $r8, r14;
        long l0;
        java.math.BigDecimal $r7;
        java.util.LinkedList $r9;
        boolean $z0;
        org.quartz.TriggerKey $r10;
        java.lang.Throwable $r11;
        java.sql.PreparedStatement r12;
        java.sql.ResultSet r13;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        l0 := @parameter3: long;

        r12 = null;

        r13 = null;

     label1:
        $r6 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("SELECT TRIGGER_NAME FROM {0}TRIGGERS WHERE SCHED_NAME = {1} AND NOT (MISFIRE_INSTR = -1) AND NEXT_FIRE_TIME < ? AND TRIGGER_GROUP = ? AND TRIGGER_STATE = ? ORDER BY NEXT_FIRE_TIME ASC, PRIORITY DESC");

        r12 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r6);

        $r7 = new java.math.BigDecimal;

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l0);

        specialinvoke $r7.<java.math.BigDecimal: void <init>(java.lang.String)>($r8);

        interfaceinvoke r12.<java.sql.PreparedStatement: void setBigDecimal(int,java.math.BigDecimal)>(1, $r7);

        interfaceinvoke r12.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(2, r2);

        interfaceinvoke r12.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(3, r3);

        r13 = interfaceinvoke r12.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

        $r9 = new java.util.LinkedList;

        specialinvoke $r9.<java.util.LinkedList: void <init>()>();

     label2:
        $z0 = interfaceinvoke r13.<java.sql.ResultSet: boolean next()>();

        if $z0 == 0 goto label3;

        r14 = interfaceinvoke r13.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("TRIGGER_NAME");

        $r10 = staticinvoke <org.quartz.TriggerKey: org.quartz.TriggerKey triggerKey(java.lang.String,java.lang.String)>(r14, r2);

        virtualinvoke $r9.<java.util.LinkedList: boolean add(java.lang.Object)>($r10);

        goto label2;

     label3:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r13);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r12);

        return $r9;

     label4:
        $r11 := @caughtexception;

     label5:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r13);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r12);

        throw $r11;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.util.List selectTriggersForRecoveringJobs(java.sql.Connection) throws java.sql.SQLException, java.io.IOException, java.lang.ClassNotFoundException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        java.lang.String r3, r4, r5, $r9, $r10, $r15, $r18, $r20, $r22, $r23, r27;
        long l0, l1, $l3, l4;
        int i2;
        org.quartz.JobDataMap r7;
        java.util.LinkedList $r11;
        boolean $z0;
        org.quartz.impl.triggers.SimpleTriggerImpl $r12;
        java.lang.StringBuilder $r13, $r14, $r16, $r17, $r19;
        java.util.Date $r21;
        java.lang.Throwable $r24;
        java.sql.PreparedStatement r25;
        java.sql.ResultSet r26;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r25 = null;

        r26 = null;

     label1:
        $r9 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("SELECT * FROM {0}FIRED_TRIGGERS WHERE SCHED_NAME = {1} AND INSTANCE_NAME = ? AND REQUESTS_RECOVERY = ?");

        r25 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r9);

        $r10 = r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String instanceId>;

        interfaceinvoke r25.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, $r10);

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void setBoolean(java.sql.PreparedStatement,int,boolean)>(r25, 2, 1);

        r26 = interfaceinvoke r25.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

        l4 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r11 = new java.util.LinkedList;

        specialinvoke $r11.<java.util.LinkedList: void <init>()>();

     label2:
        $z0 = interfaceinvoke r26.<java.sql.ResultSet: boolean next()>();

        if $z0 == 0 goto label3;

        r27 = interfaceinvoke r26.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("JOB_NAME");

        r3 = interfaceinvoke r26.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("JOB_GROUP");

        r4 = interfaceinvoke r26.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("TRIGGER_NAME");

        r5 = interfaceinvoke r26.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("TRIGGER_GROUP");

        l0 = interfaceinvoke r26.<java.sql.ResultSet: long getLong(java.lang.String)>("FIRED_TIME");

        l1 = interfaceinvoke r26.<java.sql.ResultSet: long getLong(java.lang.String)>("SCHED_TIME");

        i2 = interfaceinvoke r26.<java.sql.ResultSet: int getInt(java.lang.String)>("PRIORITY");

        $r12 = new org.quartz.impl.triggers.SimpleTriggerImpl;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("recover_");

        $r15 = r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String instanceId>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        $l3 = l4;

        l4 = l4 + 1L;

        $r18 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l3);

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $r21 = new java.util.Date;

        specialinvoke $r21.<java.util.Date: void <init>(long)>(l1);

        specialinvoke $r12.<org.quartz.impl.triggers.SimpleTriggerImpl: void <init>(java.lang.String,java.lang.String,java.util.Date)>($r20, "RECOVERING_JOBS", $r21);

        virtualinvoke $r12.<org.quartz.impl.triggers.SimpleTriggerImpl: void setJobName(java.lang.String)>(r27);

        virtualinvoke $r12.<org.quartz.impl.triggers.SimpleTriggerImpl: void setJobGroup(java.lang.String)>(r3);

        virtualinvoke $r12.<org.quartz.impl.triggers.SimpleTriggerImpl: void setPriority(int)>(i2);

        virtualinvoke $r12.<org.quartz.impl.triggers.SimpleTriggerImpl: void setMisfireInstruction(int)>(-1);

        r7 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: org.quartz.JobDataMap selectTriggerJobDataMap(java.sql.Connection,java.lang.String,java.lang.String)>(r1, r4, r5);

        virtualinvoke r7.<org.quartz.JobDataMap: void put(java.lang.String,java.lang.String)>("QRTZ_FAILED_JOB_ORIG_TRIGGER_NAME", r4);

        virtualinvoke r7.<org.quartz.JobDataMap: void put(java.lang.String,java.lang.String)>("QRTZ_FAILED_JOB_ORIG_TRIGGER_GROUP", r5);

        $r22 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l0);

        virtualinvoke r7.<org.quartz.JobDataMap: void put(java.lang.String,java.lang.String)>("QRTZ_FAILED_JOB_ORIG_TRIGGER_FIRETIME_IN_MILLISECONDS_AS_STRING", $r22);

        $r23 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l1);

        virtualinvoke r7.<org.quartz.JobDataMap: void put(java.lang.String,java.lang.String)>("QRTZ_FAILED_JOB_ORIG_TRIGGER_SCHEDULED_FIRETIME_IN_MILLISECONDS_AS_STRING", $r23);

        virtualinvoke $r12.<org.quartz.impl.triggers.SimpleTriggerImpl: void setJobDataMap(org.quartz.JobDataMap)>(r7);

        virtualinvoke $r11.<java.util.LinkedList: boolean add(java.lang.Object)>($r12);

        goto label2;

     label3:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r26);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r25);

        return $r11;

     label4:
        $r24 := @caughtexception;

     label5:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r26);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r25);

        throw $r24;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public int deleteFiredTriggers(java.sql.Connection) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        int i0;
        java.lang.String $r3;
        java.lang.Throwable $r4;
        java.sql.PreparedStatement r5;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r5 = null;

     label1:
        $r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("DELETE FROM {0}FIRED_TRIGGERS WHERE SCHED_NAME = {1}");

        r5 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r3);

        i0 = interfaceinvoke r5.<java.sql.PreparedStatement: int executeUpdate()>();

     label2:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r5);

        return i0;

     label3:
        $r4 := @caughtexception;

     label4:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r5);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int deleteFiredTriggers(java.sql.Connection, java.lang.String) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        java.lang.String r2, $r4;
        int i0;
        java.lang.Throwable $r5;
        java.sql.PreparedStatement r6;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: java.lang.String;

        r6 = null;

     label1:
        $r4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("DELETE FROM {0}FIRED_TRIGGERS WHERE SCHED_NAME = {1} AND INSTANCE_NAME = ?");

        r6 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r4);

        interfaceinvoke r6.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, r2);

        i0 = interfaceinvoke r6.<java.sql.PreparedStatement: int executeUpdate()>();

     label2:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r6);

        return i0;

     label3:
        $r5 := @caughtexception;

     label4:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r6);

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void clearData(java.sql.Connection) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        java.lang.String $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        java.lang.Throwable $r11;
        java.sql.PreparedStatement r12;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r12 = null;

     label1:
        $r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("DELETE FROM {0}SIMPLE_TRIGGERS  WHERE SCHED_NAME = {1}");

        r12 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r3);

        interfaceinvoke r12.<java.sql.PreparedStatement: int executeUpdate()>();

        interfaceinvoke r12.<java.sql.PreparedStatement: void close()>();

        $r4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("DELETE FROM {0}SIMPROP_TRIGGERS  WHERE SCHED_NAME = {1}");

        r12 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r4);

        interfaceinvoke r12.<java.sql.PreparedStatement: int executeUpdate()>();

        interfaceinvoke r12.<java.sql.PreparedStatement: void close()>();

        $r5 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("DELETE FROM {0}CRON_TRIGGERS WHERE SCHED_NAME = {1}");

        r12 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r5);

        interfaceinvoke r12.<java.sql.PreparedStatement: int executeUpdate()>();

        interfaceinvoke r12.<java.sql.PreparedStatement: void close()>();

        $r6 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("DELETE FROM {0}BLOB_TRIGGERS WHERE SCHED_NAME = {1}");

        r12 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r6);

        interfaceinvoke r12.<java.sql.PreparedStatement: int executeUpdate()>();

        interfaceinvoke r12.<java.sql.PreparedStatement: void close()>();

        $r7 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("DELETE FROM {0}TRIGGERS WHERE SCHED_NAME = {1}");

        r12 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r7);

        interfaceinvoke r12.<java.sql.PreparedStatement: int executeUpdate()>();

        interfaceinvoke r12.<java.sql.PreparedStatement: void close()>();

        $r8 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("DELETE FROM {0}JOB_DETAILS WHERE SCHED_NAME = {1}");

        r12 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r8);

        interfaceinvoke r12.<java.sql.PreparedStatement: int executeUpdate()>();

        interfaceinvoke r12.<java.sql.PreparedStatement: void close()>();

        $r9 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("DELETE FROM {0}CALENDARS WHERE SCHED_NAME = {1}");

        r12 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r9);

        interfaceinvoke r12.<java.sql.PreparedStatement: int executeUpdate()>();

        interfaceinvoke r12.<java.sql.PreparedStatement: void close()>();

        $r10 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("DELETE FROM {0}PAUSED_TRIGGER_GRPS WHERE SCHED_NAME = {1}");

        r12 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r10);

        interfaceinvoke r12.<java.sql.PreparedStatement: int executeUpdate()>();

     label2:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r12);

        goto label4;

     label3:
        $r11 := @caughtexception;

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r12);

        throw $r11;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public int insertJobDetail(java.sql.Connection, org.quartz.JobDetail) throws java.io.IOException, java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        org.quartz.JobDetail r2;
        java.io.ByteArrayOutputStream r3;
        org.quartz.JobDataMap $r5;
        java.lang.String $r6, $r8, $r10, $r11, $r13;
        org.quartz.JobKey $r7, $r9;
        java.lang.Class $r12;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Throwable $r14;
        java.sql.PreparedStatement r15;
        int i0;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.JobDetail;

        $r5 = interfaceinvoke r2.<org.quartz.JobDetail: org.quartz.JobDataMap getJobDataMap()>();

        r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.io.ByteArrayOutputStream serializeJobData(org.quartz.JobDataMap)>($r5);

        r15 = null;

     label1:
        $r6 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("INSERT INTO {0}JOB_DETAILS (SCHED_NAME, JOB_NAME, JOB_GROUP, DESCRIPTION, JOB_CLASS_NAME, IS_DURABLE, IS_NONCONCURRENT, IS_UPDATE_DATA, REQUESTS_RECOVERY, JOB_DATA)  VALUES({1}, ?, ?, ?, ?, ?, ?, ?, ?, ?)");

        r15 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r6);

        $r7 = interfaceinvoke r2.<org.quartz.JobDetail: org.quartz.JobKey getKey()>();

        $r8 = virtualinvoke $r7.<org.quartz.JobKey: java.lang.String getName()>();

        interfaceinvoke r15.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, $r8);

        $r9 = interfaceinvoke r2.<org.quartz.JobDetail: org.quartz.JobKey getKey()>();

        $r10 = virtualinvoke $r9.<org.quartz.JobKey: java.lang.String getGroup()>();

        interfaceinvoke r15.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(2, $r10);

        $r11 = interfaceinvoke r2.<org.quartz.JobDetail: java.lang.String getDescription()>();

        interfaceinvoke r15.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(3, $r11);

        $r12 = interfaceinvoke r2.<org.quartz.JobDetail: java.lang.Class getJobClass()>();

        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.String getName()>();

        interfaceinvoke r15.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(4, $r13);

        $z0 = interfaceinvoke r2.<org.quartz.JobDetail: boolean isDurable()>();

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void setBoolean(java.sql.PreparedStatement,int,boolean)>(r15, 5, $z0);

        $z1 = interfaceinvoke r2.<org.quartz.JobDetail: boolean isConcurrentExectionDisallowed()>();

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void setBoolean(java.sql.PreparedStatement,int,boolean)>(r15, 6, $z1);

        $z2 = interfaceinvoke r2.<org.quartz.JobDetail: boolean isPersistJobDataAfterExecution()>();

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void setBoolean(java.sql.PreparedStatement,int,boolean)>(r15, 7, $z2);

        $z3 = interfaceinvoke r2.<org.quartz.JobDetail: boolean requestsRecovery()>();

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void setBoolean(java.sql.PreparedStatement,int,boolean)>(r15, 8, $z3);

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void setBytes(java.sql.PreparedStatement,int,java.io.ByteArrayOutputStream)>(r15, 9, r3);

        i0 = interfaceinvoke r15.<java.sql.PreparedStatement: int executeUpdate()>();

     label2:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r15);

        goto label5;

     label3:
        $r14 := @caughtexception;

     label4:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r15);

        throw $r14;

     label5:
        return i0;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int updateJobDetail(java.sql.Connection, org.quartz.JobDetail) throws java.io.IOException, java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        org.quartz.JobDetail r2;
        java.io.ByteArrayOutputStream r3;
        org.quartz.JobDataMap $r5;
        java.lang.String $r6, $r7, $r9, $r11, $r13;
        java.lang.Class $r8;
        boolean $z0, $z1, $z2, $z3;
        org.quartz.JobKey $r10, $r12;
        java.lang.Throwable $r14;
        java.sql.PreparedStatement r15;
        int i0;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.JobDetail;

        $r5 = interfaceinvoke r2.<org.quartz.JobDetail: org.quartz.JobDataMap getJobDataMap()>();

        r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.io.ByteArrayOutputStream serializeJobData(org.quartz.JobDataMap)>($r5);

        r15 = null;

     label1:
        $r6 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("UPDATE {0}JOB_DETAILS SET DESCRIPTION = ?, JOB_CLASS_NAME = ?, IS_DURABLE = ?, IS_NONCONCURRENT = ?, IS_UPDATE_DATA = ?, REQUESTS_RECOVERY = ?, JOB_DATA = ?  WHERE SCHED_NAME = {1} AND JOB_NAME = ? AND JOB_GROUP = ?");

        r15 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r6);

        $r7 = interfaceinvoke r2.<org.quartz.JobDetail: java.lang.String getDescription()>();

        interfaceinvoke r15.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, $r7);

        $r8 = interfaceinvoke r2.<org.quartz.JobDetail: java.lang.Class getJobClass()>();

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        interfaceinvoke r15.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(2, $r9);

        $z0 = interfaceinvoke r2.<org.quartz.JobDetail: boolean isDurable()>();

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void setBoolean(java.sql.PreparedStatement,int,boolean)>(r15, 3, $z0);

        $z1 = interfaceinvoke r2.<org.quartz.JobDetail: boolean isConcurrentExectionDisallowed()>();

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void setBoolean(java.sql.PreparedStatement,int,boolean)>(r15, 4, $z1);

        $z2 = interfaceinvoke r2.<org.quartz.JobDetail: boolean isPersistJobDataAfterExecution()>();

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void setBoolean(java.sql.PreparedStatement,int,boolean)>(r15, 5, $z2);

        $z3 = interfaceinvoke r2.<org.quartz.JobDetail: boolean requestsRecovery()>();

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void setBoolean(java.sql.PreparedStatement,int,boolean)>(r15, 6, $z3);

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void setBytes(java.sql.PreparedStatement,int,java.io.ByteArrayOutputStream)>(r15, 7, r3);

        $r10 = interfaceinvoke r2.<org.quartz.JobDetail: org.quartz.JobKey getKey()>();

        $r11 = virtualinvoke $r10.<org.quartz.JobKey: java.lang.String getName()>();

        interfaceinvoke r15.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(8, $r11);

        $r12 = interfaceinvoke r2.<org.quartz.JobDetail: org.quartz.JobKey getKey()>();

        $r13 = virtualinvoke $r12.<org.quartz.JobKey: java.lang.String getGroup()>();

        interfaceinvoke r15.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(9, $r13);

        i0 = interfaceinvoke r15.<java.sql.PreparedStatement: int executeUpdate()>();

     label2:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r15);

        goto label5;

     label3:
        $r14 := @caughtexception;

     label4:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r15);

        throw $r14;

     label5:
        return i0;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.util.List selectTriggerKeysForJob(java.sql.Connection, org.quartz.JobKey) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        org.quartz.JobKey r2;
        java.lang.String r4, $r6, $r7, $r8, r14;
        java.util.LinkedList $r9;
        boolean $z0;
        org.quartz.TriggerKey $r10;
        java.lang.Throwable $r11;
        java.sql.PreparedStatement r12;
        java.sql.ResultSet r13;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.JobKey;

        r12 = null;

        r13 = null;

     label1:
        $r6 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("SELECT TRIGGER_NAME, TRIGGER_GROUP FROM {0}TRIGGERS WHERE SCHED_NAME = {1} AND JOB_NAME = ? AND JOB_GROUP = ?");

        r12 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r6);

        $r7 = virtualinvoke r2.<org.quartz.JobKey: java.lang.String getName()>();

        interfaceinvoke r12.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, $r7);

        $r8 = virtualinvoke r2.<org.quartz.JobKey: java.lang.String getGroup()>();

        interfaceinvoke r12.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(2, $r8);

        r13 = interfaceinvoke r12.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

        $r9 = new java.util.LinkedList;

        specialinvoke $r9.<java.util.LinkedList: void <init>()>();

     label2:
        $z0 = interfaceinvoke r13.<java.sql.ResultSet: boolean next()>();

        if $z0 == 0 goto label3;

        r14 = interfaceinvoke r13.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("TRIGGER_NAME");

        r4 = interfaceinvoke r13.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("TRIGGER_GROUP");

        $r10 = staticinvoke <org.quartz.TriggerKey: org.quartz.TriggerKey triggerKey(java.lang.String,java.lang.String)>(r14, r4);

        virtualinvoke $r9.<java.util.LinkedList: boolean add(java.lang.Object)>($r10);

        goto label2;

     label3:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r13);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r12);

        return $r9;

     label4:
        $r11 := @caughtexception;

     label5:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r13);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r12);

        throw $r11;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public int deleteJobDetail(java.sql.Connection, org.quartz.JobKey) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        org.quartz.JobKey r2;
        int i0;
        org.slf4j.Logger $r4, $r9;
        boolean $z0;
        java.lang.String $r5, $r6, $r7, $r12;
        java.lang.StringBuilder $r8, $r10, $r11;
        java.lang.Throwable $r13;
        java.sql.PreparedStatement r14;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.JobKey;

        r14 = null;

     label1:
        $r4 = r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: org.slf4j.Logger logger>;

        $z0 = interfaceinvoke $r4.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label2;

        $r9 = r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: org.slf4j.Logger logger>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Deleting job: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<org.slf4j.Logger: void debug(java.lang.String)>($r12);

     label2:
        $r5 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("DELETE FROM {0}JOB_DETAILS WHERE SCHED_NAME = {1} AND JOB_NAME = ? AND JOB_GROUP = ?");

        r14 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r5);

        $r6 = virtualinvoke r2.<org.quartz.JobKey: java.lang.String getName()>();

        interfaceinvoke r14.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, $r6);

        $r7 = virtualinvoke r2.<org.quartz.JobKey: java.lang.String getGroup()>();

        interfaceinvoke r14.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(2, $r7);

        i0 = interfaceinvoke r14.<java.sql.PreparedStatement: int executeUpdate()>();

     label3:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r14);

        return i0;

     label4:
        $r13 := @caughtexception;

     label5:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r14);

        throw $r13;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean isJobNonConcurrent(java.sql.Connection, org.quartz.JobKey) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        org.quartz.JobKey r2;
        java.lang.String $r4, $r5, $r6;
        boolean $z0, z2;
        java.lang.Throwable $r7;
        java.sql.PreparedStatement r8;
        java.sql.ResultSet r9;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.JobKey;

        r8 = null;

        r9 = null;

     label1:
        $r4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("SELECT IS_NONCONCURRENT FROM {0}JOB_DETAILS WHERE SCHED_NAME = {1} AND JOB_NAME = ? AND JOB_GROUP = ?");

        r8 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r4);

        $r5 = virtualinvoke r2.<org.quartz.JobKey: java.lang.String getName()>();

        interfaceinvoke r8.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, $r5);

        $r6 = virtualinvoke r2.<org.quartz.JobKey: java.lang.String getGroup()>();

        interfaceinvoke r8.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(2, $r6);

        r9 = interfaceinvoke r8.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

        $z0 = interfaceinvoke r9.<java.sql.ResultSet: boolean next()>();

        if $z0 != 0 goto label3;

     label2:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r9);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r8);

        return 0;

     label3:
        z2 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: boolean getBoolean(java.sql.ResultSet,java.lang.String)>(r9, "IS_NONCONCURRENT");

     label4:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r9);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r8);

        return z2;

     label5:
        $r7 := @caughtexception;

     label6:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r9);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r8);

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public boolean jobExists(java.sql.Connection, org.quartz.JobKey) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        org.quartz.JobKey r2;
        java.lang.String $r4, $r5, $r6;
        boolean $z0;
        java.lang.Throwable $r7;
        java.sql.PreparedStatement r8;
        java.sql.ResultSet r9;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.JobKey;

        r8 = null;

        r9 = null;

     label1:
        $r4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("SELECT JOB_NAME FROM {0}JOB_DETAILS WHERE SCHED_NAME = {1} AND JOB_NAME = ? AND JOB_GROUP = ?");

        r8 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r4);

        $r5 = virtualinvoke r2.<org.quartz.JobKey: java.lang.String getName()>();

        interfaceinvoke r8.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, $r5);

        $r6 = virtualinvoke r2.<org.quartz.JobKey: java.lang.String getGroup()>();

        interfaceinvoke r8.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(2, $r6);

        r9 = interfaceinvoke r8.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

        $z0 = interfaceinvoke r9.<java.sql.ResultSet: boolean next()>();

        if $z0 == 0 goto label3;

     label2:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r9);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r8);

        return 1;

     label3:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r9);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r8);

        return 0;

     label4:
        $r7 := @caughtexception;

     label5:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r9);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r8);

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public int updateJobData(java.sql.Connection, org.quartz.JobDetail) throws java.io.IOException, java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        org.quartz.JobDetail r2;
        java.io.ByteArrayOutputStream r3;
        int i0;
        org.quartz.JobDataMap $r5;
        java.lang.String $r6, $r8, $r10;
        org.quartz.JobKey $r7, $r9;
        java.lang.Throwable $r11;
        java.sql.PreparedStatement r12;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.JobDetail;

        $r5 = interfaceinvoke r2.<org.quartz.JobDetail: org.quartz.JobDataMap getJobDataMap()>();

        r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.io.ByteArrayOutputStream serializeJobData(org.quartz.JobDataMap)>($r5);

        r12 = null;

     label1:
        $r6 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("UPDATE {0}JOB_DETAILS SET JOB_DATA = ?  WHERE SCHED_NAME = {1} AND JOB_NAME = ? AND JOB_GROUP = ?");

        r12 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r6);

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void setBytes(java.sql.PreparedStatement,int,java.io.ByteArrayOutputStream)>(r12, 1, r3);

        $r7 = interfaceinvoke r2.<org.quartz.JobDetail: org.quartz.JobKey getKey()>();

        $r8 = virtualinvoke $r7.<org.quartz.JobKey: java.lang.String getName()>();

        interfaceinvoke r12.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(2, $r8);

        $r9 = interfaceinvoke r2.<org.quartz.JobDetail: org.quartz.JobKey getKey()>();

        $r10 = virtualinvoke $r9.<org.quartz.JobKey: java.lang.String getGroup()>();

        interfaceinvoke r12.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(3, $r10);

        i0 = interfaceinvoke r12.<java.sql.PreparedStatement: int executeUpdate()>();

     label2:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r12);

        return i0;

     label3:
        $r11 := @caughtexception;

     label4:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r12);

        throw $r11;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public org.quartz.JobDetail selectJobDetail(java.sql.Connection, org.quartz.JobKey, org.quartz.spi.ClassLoadHelper) throws java.lang.ClassNotFoundException, java.io.IOException, java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        org.quartz.JobKey r2;
        org.quartz.spi.ClassLoadHelper r3;
        java.lang.String $r5, $r6, $r7, $r9, $r10, $r11, $r12;
        boolean $z0, $z1, $z2, $z3;
        org.quartz.impl.JobDetailImpl $r8, r19;
        java.lang.Class $r13;
        java.lang.Object $r14;
        org.quartz.JobDataMap $r15;
        java.lang.Throwable $r16;
        java.sql.PreparedStatement r17;
        java.sql.ResultSet r18;
        java.util.Map r20;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.JobKey;

        r3 := @parameter2: org.quartz.spi.ClassLoadHelper;

        r17 = null;

        r18 = null;

     label1:
        $r5 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("SELECT * FROM {0}JOB_DETAILS WHERE SCHED_NAME = {1} AND JOB_NAME = ? AND JOB_GROUP = ?");

        r17 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r5);

        $r6 = virtualinvoke r2.<org.quartz.JobKey: java.lang.String getName()>();

        interfaceinvoke r17.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, $r6);

        $r7 = virtualinvoke r2.<org.quartz.JobKey: java.lang.String getGroup()>();

        interfaceinvoke r17.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(2, $r7);

        r18 = interfaceinvoke r17.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

        r19 = null;

        $z0 = interfaceinvoke r18.<java.sql.ResultSet: boolean next()>();

        if $z0 == 0 goto label4;

        $r8 = new org.quartz.impl.JobDetailImpl;

        specialinvoke $r8.<org.quartz.impl.JobDetailImpl: void <init>()>();

        r19 = $r8;

        $r9 = interfaceinvoke r18.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("JOB_NAME");

        virtualinvoke $r8.<org.quartz.impl.JobDetailImpl: void setName(java.lang.String)>($r9);

        $r10 = interfaceinvoke r18.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("JOB_GROUP");

        virtualinvoke $r8.<org.quartz.impl.JobDetailImpl: void setGroup(java.lang.String)>($r10);

        $r11 = interfaceinvoke r18.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("DESCRIPTION");

        virtualinvoke $r8.<org.quartz.impl.JobDetailImpl: void setDescription(java.lang.String)>($r11);

        $r12 = interfaceinvoke r18.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("JOB_CLASS_NAME");

        $r13 = interfaceinvoke r3.<org.quartz.spi.ClassLoadHelper: java.lang.Class loadClass(java.lang.String,java.lang.Class)>($r12, class "Lorg/quartz/Job;");

        virtualinvoke $r8.<org.quartz.impl.JobDetailImpl: void setJobClass(java.lang.Class)>($r13);

        $z1 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: boolean getBoolean(java.sql.ResultSet,java.lang.String)>(r18, "IS_DURABLE");

        virtualinvoke $r8.<org.quartz.impl.JobDetailImpl: void setDurability(boolean)>($z1);

        $z2 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: boolean getBoolean(java.sql.ResultSet,java.lang.String)>(r18, "REQUESTS_RECOVERY");

        virtualinvoke $r8.<org.quartz.impl.JobDetailImpl: void setRequestsRecovery(boolean)>($z2);

        $z3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: boolean canUseProperties()>();

        if $z3 == 0 goto label2;

        r20 = specialinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.util.Map getMapFromProperties(java.sql.ResultSet)>(r18);

        goto label3;

     label2:
        $r14 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.Object getObjectFromBlob(java.sql.ResultSet,java.lang.String)>(r18, "JOB_DATA");

        r20 = (java.util.Map) $r14;

     label3:
        if null == r20 goto label4;

        $r15 = new org.quartz.JobDataMap;

        specialinvoke $r15.<org.quartz.JobDataMap: void <init>(java.util.Map)>(r20);

        virtualinvoke $r8.<org.quartz.impl.JobDetailImpl: void setJobDataMap(org.quartz.JobDataMap)>($r15);

     label4:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r18);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r17);

        return r19;

     label5:
        $r16 := @caughtexception;

     label6:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r18);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r17);

        throw $r16;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private java.util.Map getMapFromProperties(java.sql.ResultSet) throws java.lang.ClassNotFoundException, java.io.IOException, java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.ResultSet r1;
        java.util.Map r2;
        java.io.InputStream r3;
        java.lang.Object $r6;
        java.util.Properties $r7;
        java.lang.Throwable $r8;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.ResultSet;

        $r6 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.Object getJobDataFromBlob(java.sql.ResultSet,java.lang.String)>(r1, "JOB_DATA");

        r3 = (java.io.InputStream) $r6;

        if r3 != null goto label1;

        return null;

     label1:
        $r7 = new java.util.Properties;

        specialinvoke $r7.<java.util.Properties: void <init>()>();

        if r3 == null goto label6;

     label2:
        virtualinvoke $r7.<java.util.Properties: void load(java.io.InputStream)>(r3);

     label3:
        virtualinvoke r3.<java.io.InputStream: void close()>();

        goto label6;

     label4:
        $r8 := @caughtexception;

     label5:
        virtualinvoke r3.<java.io.InputStream: void close()>();

        throw $r8;

     label6:
        r2 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.util.Map convertFromProperty(java.util.Properties)>($r7);

        return r2;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public int selectNumJobs(java.sql.Connection) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        java.lang.String $r3;
        boolean $z0;
        java.lang.Throwable $r4;
        java.sql.PreparedStatement r5;
        java.sql.ResultSet r6;
        int i1;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r5 = null;

        r6 = null;

     label1:
        i1 = 0;

        $r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("SELECT COUNT(JOB_NAME)  FROM {0}JOB_DETAILS WHERE SCHED_NAME = {1}");

        r5 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r3);

        r6 = interfaceinvoke r5.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

        $z0 = interfaceinvoke r6.<java.sql.ResultSet: boolean next()>();

        if $z0 == 0 goto label2;

        i1 = interfaceinvoke r6.<java.sql.ResultSet: int getInt(int)>(1);

     label2:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r6);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r5);

        return i1;

     label3:
        $r4 := @caughtexception;

     label4:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r6);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r5);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.util.List selectJobGroups(java.sql.Connection) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        java.lang.String $r5, $r7;
        java.util.LinkedList $r6;
        boolean $z0;
        java.lang.Throwable $r8;
        java.sql.PreparedStatement r9;
        java.sql.ResultSet r10;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r9 = null;

        r10 = null;

     label1:
        $r5 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("SELECT DISTINCT(JOB_GROUP) FROM {0}JOB_DETAILS WHERE SCHED_NAME = {1}");

        r9 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r5);

        r10 = interfaceinvoke r9.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

        $r6 = new java.util.LinkedList;

        specialinvoke $r6.<java.util.LinkedList: void <init>()>();

     label2:
        $z0 = interfaceinvoke r10.<java.sql.ResultSet: boolean next()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r10.<java.sql.ResultSet: java.lang.String getString(int)>(1);

        virtualinvoke $r6.<java.util.LinkedList: boolean add(java.lang.Object)>($r7);

        goto label2;

     label3:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r10);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r9);

        return $r6;

     label4:
        $r8 := @caughtexception;

     label5:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r10);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r9);

        throw $r8;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.util.Set selectJobsInGroup(java.sql.Connection, org.quartz.impl.matchers.GroupMatcher) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        org.quartz.impl.matchers.GroupMatcher r2;
        boolean $z0, $z2;
        java.lang.String $r6, $r7, $r10, $r11, $r13, $r14;
        java.util.LinkedList $r8;
        java.util.HashSet $r9;
        org.quartz.JobKey $r12;
        java.lang.Throwable $r15;
        java.sql.PreparedStatement r16;
        java.sql.ResultSet r17;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.impl.matchers.GroupMatcher;

        r16 = null;

        r17 = null;

     label1:
        $z0 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: boolean isMatcherEquals(org.quartz.impl.matchers.GroupMatcher)>(r2);

        if $z0 == 0 goto label2;

        $r13 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("SELECT JOB_NAME, JOB_GROUP FROM {0}JOB_DETAILS WHERE SCHED_NAME = {1} AND JOB_GROUP = ?");

        r16 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r13);

        $r14 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String toSqlEqualsClause(org.quartz.impl.matchers.GroupMatcher)>(r2);

        interfaceinvoke r16.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, $r14);

        goto label3;

     label2:
        $r6 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("SELECT JOB_NAME, JOB_GROUP FROM {0}JOB_DETAILS WHERE SCHED_NAME = {1} AND JOB_GROUP LIKE ?");

        r16 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r6);

        $r7 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String toSqlLikeClause(org.quartz.impl.matchers.GroupMatcher)>(r2);

        interfaceinvoke r16.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, $r7);

     label3:
        r17 = interfaceinvoke r16.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

        $r8 = new java.util.LinkedList;

        specialinvoke $r8.<java.util.LinkedList: void <init>()>();

     label4:
        $z2 = interfaceinvoke r17.<java.sql.ResultSet: boolean next()>();

        if $z2 == 0 goto label5;

        $r10 = interfaceinvoke r17.<java.sql.ResultSet: java.lang.String getString(int)>(1);

        $r11 = interfaceinvoke r17.<java.sql.ResultSet: java.lang.String getString(int)>(2);

        $r12 = staticinvoke <org.quartz.JobKey: org.quartz.JobKey jobKey(java.lang.String,java.lang.String)>($r10, $r11);

        virtualinvoke $r8.<java.util.LinkedList: boolean add(java.lang.Object)>($r12);

        goto label4;

     label5:
        $r9 = new java.util.HashSet;

        specialinvoke $r9.<java.util.HashSet: void <init>(java.util.Collection)>($r8);

     label6:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r17);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r16);

        return $r9;

     label7:
        $r15 := @caughtexception;

     label8:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r17);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r16);

        throw $r15;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    protected boolean isMatcherEquals(org.quartz.impl.matchers.GroupMatcher)
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        org.quartz.impl.matchers.GroupMatcher r1;
        org.quartz.impl.matchers.StringMatcher$StringOperatorName $r2, $r3;
        boolean $z0;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: org.quartz.impl.matchers.GroupMatcher;

        $r2 = virtualinvoke r1.<org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.StringMatcher$StringOperatorName getCompareWithOperator()>();

        $r3 = <org.quartz.impl.matchers.StringMatcher$StringOperatorName: org.quartz.impl.matchers.StringMatcher$StringOperatorName EQUALS>;

        $z0 = virtualinvoke $r2.<org.quartz.impl.matchers.StringMatcher$StringOperatorName: boolean equals(java.lang.Object)>($r3);

        return $z0;
    }

    protected java.lang.String toSqlEqualsClause(org.quartz.impl.matchers.GroupMatcher)
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        org.quartz.impl.matchers.GroupMatcher r1;
        java.lang.String $r2;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: org.quartz.impl.matchers.GroupMatcher;

        $r2 = virtualinvoke r1.<org.quartz.impl.matchers.GroupMatcher: java.lang.String getCompareToValue()>();

        return $r2;
    }

    protected java.lang.String toSqlLikeClause(org.quartz.impl.matchers.GroupMatcher)
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        org.quartz.impl.matchers.GroupMatcher r1;
        int[] $r2;
        org.quartz.impl.matchers.StringMatcher$StringOperatorName $r3, $r20;
        int $i0, $i1;
        java.lang.StringBuilder $r4, $r6, $r7, $r8, $r9, $r11, $r12, $r13, $r15, $r16, $r18, $r19, $r21, $r22;
        java.lang.String $r5, $r10, $r14, $r23, r24;
        java.lang.UnsupportedOperationException $r17;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: org.quartz.impl.matchers.GroupMatcher;

        $r2 = <org.quartz.impl.jdbcjobstore.StdJDBCDelegate$1: int[] $SwitchMap$org$quartz$impl$matchers$StringMatcher$StringOperatorName>;

        $r3 = virtualinvoke r1.<org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.StringMatcher$StringOperatorName getCompareWithOperator()>();

        $i0 = virtualinvoke $r3.<org.quartz.impl.matchers.StringMatcher$StringOperatorName: int ordinal()>();

        $i1 = $r2[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            case 5: goto label5;
            default: goto label6;
        };

     label1:
        r24 = virtualinvoke r1.<org.quartz.impl.matchers.GroupMatcher: java.lang.String getCompareToValue()>();

        goto label7;

     label2:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%");

        $r14 = virtualinvoke r1.<org.quartz.impl.matchers.GroupMatcher: java.lang.String getCompareToValue()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%");

        r24 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label7;

     label3:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%");

        $r10 = virtualinvoke r1.<org.quartz.impl.matchers.GroupMatcher: java.lang.String getCompareToValue()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        r24 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label7;

     label4:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r1.<org.quartz.impl.matchers.GroupMatcher: java.lang.String getCompareToValue()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%");

        r24 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label7;

     label5:
        r24 = "%";

        goto label7;

     label6:
        $r17 = new java.lang.UnsupportedOperationException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Don\'t know how to translate ");

        $r20 = virtualinvoke r1.<org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.StringMatcher$StringOperatorName getCompareWithOperator()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" into SQL");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r23);

        throw $r17;

     label7:
        return r24;
    }

    public int insertTrigger(java.sql.Connection, org.quartz.spi.OperableTrigger, java.lang.String, org.quartz.JobDetail) throws java.sql.SQLException, java.io.IOException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        org.quartz.spi.OperableTrigger r2;
        java.lang.String r3, $r8, $r10, $r12, $r14, $r16, $r17, $r21, $r24, $r27, $r28, $r33, r38;
        org.quartz.JobDetail r4;
        org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate r5;
        org.quartz.JobDataMap $r7, $r34;
        int $i0, $i2, $i3, i9;
        org.quartz.TriggerKey $r9, $r11;
        org.quartz.JobKey $r13, $r15;
        java.util.Date $r18, $r19, $r23, $r25, $r29, $r30, $r32;
        java.math.BigDecimal $r20, $r22, $r26, $r31;
        long $l1, $l6, l7, l8;
        java.lang.Throwable $r35;
        java.io.ByteArrayOutputStream r36;
        java.sql.PreparedStatement r37;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.spi.OperableTrigger;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: org.quartz.JobDetail;

        r36 = null;

        $r7 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: org.quartz.JobDataMap getJobDataMap()>();

        $i0 = virtualinvoke $r7.<org.quartz.JobDataMap: int size()>();

        if $i0 <= 0 goto label01;

        $r34 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: org.quartz.JobDataMap getJobDataMap()>();

        r36 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.io.ByteArrayOutputStream serializeJobData(org.quartz.JobDataMap)>($r34);

     label01:
        r37 = null;

     label02:
        $r8 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("INSERT INTO {0}TRIGGERS (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP, JOB_NAME, JOB_GROUP, DESCRIPTION, NEXT_FIRE_TIME, PREV_FIRE_TIME, TRIGGER_STATE, TRIGGER_TYPE, START_TIME, END_TIME, CALENDAR_NAME, MISFIRE_INSTR, JOB_DATA, PRIORITY)  VALUES({1}, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");

        r37 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r8);

        $r9 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        $r10 = virtualinvoke $r9.<org.quartz.TriggerKey: java.lang.String getName()>();

        interfaceinvoke r37.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, $r10);

        $r11 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        $r12 = virtualinvoke $r11.<org.quartz.TriggerKey: java.lang.String getGroup()>();

        interfaceinvoke r37.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(2, $r12);

        $r13 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: org.quartz.JobKey getJobKey()>();

        $r14 = virtualinvoke $r13.<org.quartz.JobKey: java.lang.String getName()>();

        interfaceinvoke r37.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(3, $r14);

        $r15 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: org.quartz.JobKey getJobKey()>();

        $r16 = virtualinvoke $r15.<org.quartz.JobKey: java.lang.String getGroup()>();

        interfaceinvoke r37.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(4, $r16);

        $r17 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: java.lang.String getDescription()>();

        interfaceinvoke r37.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(5, $r17);

        $r18 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: java.util.Date getNextFireTime()>();

        if $r18 == null goto label03;

        $r31 = new java.math.BigDecimal;

        $r32 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: java.util.Date getNextFireTime()>();

        $l6 = virtualinvoke $r32.<java.util.Date: long getTime()>();

        $r33 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l6);

        specialinvoke $r31.<java.math.BigDecimal: void <init>(java.lang.String)>($r33);

        interfaceinvoke r37.<java.sql.PreparedStatement: void setBigDecimal(int,java.math.BigDecimal)>(6, $r31);

        goto label04;

     label03:
        interfaceinvoke r37.<java.sql.PreparedStatement: void setBigDecimal(int,java.math.BigDecimal)>(6, null);

     label04:
        l7 = -1L;

        $r19 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: java.util.Date getPreviousFireTime()>();

        if $r19 == null goto label05;

        $r30 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: java.util.Date getPreviousFireTime()>();

        l7 = virtualinvoke $r30.<java.util.Date: long getTime()>();

     label05:
        $r20 = new java.math.BigDecimal;

        $r21 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l7);

        specialinvoke $r20.<java.math.BigDecimal: void <init>(java.lang.String)>($r21);

        interfaceinvoke r37.<java.sql.PreparedStatement: void setBigDecimal(int,java.math.BigDecimal)>(7, $r20);

        interfaceinvoke r37.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(8, r3);

        r5 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate findTriggerPersistenceDelegate(org.quartz.spi.OperableTrigger)>(r2);

        r38 = "BLOB";

        if r5 == null goto label06;

        r38 = interfaceinvoke r5.<org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate: java.lang.String getHandledTriggerTypeDiscriminator()>();

     label06:
        interfaceinvoke r37.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(9, r38);

        $r22 = new java.math.BigDecimal;

        $r23 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: java.util.Date getStartTime()>();

        $l1 = virtualinvoke $r23.<java.util.Date: long getTime()>();

        $r24 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l1);

        specialinvoke $r22.<java.math.BigDecimal: void <init>(java.lang.String)>($r24);

        interfaceinvoke r37.<java.sql.PreparedStatement: void setBigDecimal(int,java.math.BigDecimal)>(10, $r22);

        l8 = 0L;

        $r25 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: java.util.Date getEndTime()>();

        if $r25 == null goto label07;

        $r29 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: java.util.Date getEndTime()>();

        l8 = virtualinvoke $r29.<java.util.Date: long getTime()>();

     label07:
        $r26 = new java.math.BigDecimal;

        $r27 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l8);

        specialinvoke $r26.<java.math.BigDecimal: void <init>(java.lang.String)>($r27);

        interfaceinvoke r37.<java.sql.PreparedStatement: void setBigDecimal(int,java.math.BigDecimal)>(11, $r26);

        $r28 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: java.lang.String getCalendarName()>();

        interfaceinvoke r37.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(12, $r28);

        $i2 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: int getMisfireInstruction()>();

        interfaceinvoke r37.<java.sql.PreparedStatement: void setInt(int,int)>(13, $i2);

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void setBytes(java.sql.PreparedStatement,int,java.io.ByteArrayOutputStream)>(r37, 14, r36);

        $i3 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: int getPriority()>();

        interfaceinvoke r37.<java.sql.PreparedStatement: void setInt(int,int)>(15, $i3);

        i9 = interfaceinvoke r37.<java.sql.PreparedStatement: int executeUpdate()>();

        if r5 != null goto label08;

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: int insertBlobTrigger(java.sql.Connection,org.quartz.spi.OperableTrigger)>(r1, r2);

        goto label09;

     label08:
        interfaceinvoke r5.<org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate: int insertExtendedTriggerProperties(java.sql.Connection,org.quartz.spi.OperableTrigger,java.lang.String,org.quartz.JobDetail)>(r1, r2, r3, r4);

     label09:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r37);

        goto label12;

     label10:
        $r35 := @caughtexception;

     label11:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r37);

        throw $r35;

     label12:
        return i9;

        catch java.lang.Throwable from label02 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public int insertBlobTrigger(java.sql.Connection, org.quartz.spi.OperableTrigger) throws java.sql.SQLException, java.io.IOException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        org.quartz.spi.OperableTrigger r2;
        byte[] r4;
        int i0, $i1;
        java.io.ByteArrayOutputStream $r7;
        java.io.ObjectOutputStream $r8;
        java.io.ByteArrayInputStream $r9;
        java.lang.String $r10, $r12, $r14;
        org.quartz.TriggerKey $r11, $r13;
        java.lang.Throwable $r15;
        java.sql.PreparedStatement r16;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.spi.OperableTrigger;

        r16 = null;

     label1:
        $r7 = new java.io.ByteArrayOutputStream;

        specialinvoke $r7.<java.io.ByteArrayOutputStream: void <init>()>();

        $r8 = new java.io.ObjectOutputStream;

        specialinvoke $r8.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>($r7);

        virtualinvoke $r8.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(r2);

        virtualinvoke $r8.<java.io.ObjectOutputStream: void close()>();

        r4 = virtualinvoke $r7.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r9 = new java.io.ByteArrayInputStream;

        specialinvoke $r9.<java.io.ByteArrayInputStream: void <init>(byte[])>(r4);

        $r10 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("INSERT INTO {0}BLOB_TRIGGERS (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP, BLOB_DATA)  VALUES({1}, ?, ?, ?)");

        r16 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r10);

        $r11 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        $r12 = virtualinvoke $r11.<org.quartz.TriggerKey: java.lang.String getName()>();

        interfaceinvoke r16.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, $r12);

        $r13 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        $r14 = virtualinvoke $r13.<org.quartz.TriggerKey: java.lang.String getGroup()>();

        interfaceinvoke r16.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(2, $r14);

        $i1 = lengthof r4;

        interfaceinvoke r16.<java.sql.PreparedStatement: void setBinaryStream(int,java.io.InputStream,int)>(3, $r9, $i1);

        i0 = interfaceinvoke r16.<java.sql.PreparedStatement: int executeUpdate()>();

     label2:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r16);

        return i0;

     label3:
        $r15 := @caughtexception;

     label4:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r16);

        throw $r15;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int updateTrigger(java.sql.Connection, org.quartz.spi.OperableTrigger, java.lang.String, org.quartz.JobDetail) throws java.sql.SQLException, java.io.IOException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        org.quartz.spi.OperableTrigger r2;
        java.lang.String r3, $r8, $r10, $r12, $r13, $r16, $r19, $r22, $r25, $r26, $r28, $r30, $r32, $r34, $r38, r43;
        org.quartz.JobDetail r4;
        boolean z0;
        org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate r5;
        org.quartz.JobDataMap $r7, $r39;
        org.quartz.JobKey $r9, $r11;
        java.util.Date $r14, $r17, $r21, $r23, $r35, $r36, $r37;
        java.math.BigDecimal $r15, $r18, $r20, $r24;
        long $l0, l5, l6, l7;
        int $i1, $i2, i8;
        org.quartz.TriggerKey $r27, $r29, $r31, $r33;
        java.lang.Throwable $r40;
        java.io.ByteArrayOutputStream r41;
        java.sql.PreparedStatement r42;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.spi.OperableTrigger;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: org.quartz.JobDetail;

        $r7 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: org.quartz.JobDataMap getJobDataMap()>();

        z0 = virtualinvoke $r7.<org.quartz.JobDataMap: boolean isDirty()>();

        r41 = null;

        if z0 == 0 goto label01;

        $r39 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: org.quartz.JobDataMap getJobDataMap()>();

        r41 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.io.ByteArrayOutputStream serializeJobData(org.quartz.JobDataMap)>($r39);

     label01:
        r42 = null;

     label02:
        if z0 == 0 goto label03;

        $r38 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("UPDATE {0}TRIGGERS SET JOB_NAME = ?, JOB_GROUP = ?, DESCRIPTION = ?, NEXT_FIRE_TIME = ?, PREV_FIRE_TIME = ?, TRIGGER_STATE = ?, TRIGGER_TYPE = ?, START_TIME = ?, END_TIME = ?, CALENDAR_NAME = ?, MISFIRE_INSTR = ?, PRIORITY = ?, JOB_DATA = ? WHERE SCHED_NAME = {1} AND TRIGGER_NAME = ? AND TRIGGER_GROUP = ?");

        r42 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r38);

        goto label04;

     label03:
        $r8 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("UPDATE {0}TRIGGERS SET JOB_NAME = ?, JOB_GROUP = ?, DESCRIPTION = ?, NEXT_FIRE_TIME = ?, PREV_FIRE_TIME = ?, TRIGGER_STATE = ?, TRIGGER_TYPE = ?, START_TIME = ?, END_TIME = ?, CALENDAR_NAME = ?, MISFIRE_INSTR = ?, PRIORITY = ? WHERE SCHED_NAME = {1} AND TRIGGER_NAME = ? AND TRIGGER_GROUP = ?");

        r42 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r8);

     label04:
        $r9 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: org.quartz.JobKey getJobKey()>();

        $r10 = virtualinvoke $r9.<org.quartz.JobKey: java.lang.String getName()>();

        interfaceinvoke r42.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, $r10);

        $r11 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: org.quartz.JobKey getJobKey()>();

        $r12 = virtualinvoke $r11.<org.quartz.JobKey: java.lang.String getGroup()>();

        interfaceinvoke r42.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(2, $r12);

        $r13 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: java.lang.String getDescription()>();

        interfaceinvoke r42.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(3, $r13);

        l5 = -1L;

        $r14 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: java.util.Date getNextFireTime()>();

        if $r14 == null goto label05;

        $r37 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: java.util.Date getNextFireTime()>();

        l5 = virtualinvoke $r37.<java.util.Date: long getTime()>();

     label05:
        $r15 = new java.math.BigDecimal;

        $r16 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l5);

        specialinvoke $r15.<java.math.BigDecimal: void <init>(java.lang.String)>($r16);

        interfaceinvoke r42.<java.sql.PreparedStatement: void setBigDecimal(int,java.math.BigDecimal)>(4, $r15);

        l6 = -1L;

        $r17 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: java.util.Date getPreviousFireTime()>();

        if $r17 == null goto label06;

        $r36 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: java.util.Date getPreviousFireTime()>();

        l6 = virtualinvoke $r36.<java.util.Date: long getTime()>();

     label06:
        $r18 = new java.math.BigDecimal;

        $r19 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l6);

        specialinvoke $r18.<java.math.BigDecimal: void <init>(java.lang.String)>($r19);

        interfaceinvoke r42.<java.sql.PreparedStatement: void setBigDecimal(int,java.math.BigDecimal)>(5, $r18);

        interfaceinvoke r42.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(6, r3);

        r5 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate findTriggerPersistenceDelegate(org.quartz.spi.OperableTrigger)>(r2);

        r43 = "BLOB";

        if r5 == null goto label07;

        r43 = interfaceinvoke r5.<org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate: java.lang.String getHandledTriggerTypeDiscriminator()>();

     label07:
        interfaceinvoke r42.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(7, r43);

        $r20 = new java.math.BigDecimal;

        $r21 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: java.util.Date getStartTime()>();

        $l0 = virtualinvoke $r21.<java.util.Date: long getTime()>();

        $r22 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l0);

        specialinvoke $r20.<java.math.BigDecimal: void <init>(java.lang.String)>($r22);

        interfaceinvoke r42.<java.sql.PreparedStatement: void setBigDecimal(int,java.math.BigDecimal)>(8, $r20);

        l7 = 0L;

        $r23 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: java.util.Date getEndTime()>();

        if $r23 == null goto label08;

        $r35 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: java.util.Date getEndTime()>();

        l7 = virtualinvoke $r35.<java.util.Date: long getTime()>();

     label08:
        $r24 = new java.math.BigDecimal;

        $r25 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l7);

        specialinvoke $r24.<java.math.BigDecimal: void <init>(java.lang.String)>($r25);

        interfaceinvoke r42.<java.sql.PreparedStatement: void setBigDecimal(int,java.math.BigDecimal)>(9, $r24);

        $r26 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: java.lang.String getCalendarName()>();

        interfaceinvoke r42.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(10, $r26);

        $i1 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: int getMisfireInstruction()>();

        interfaceinvoke r42.<java.sql.PreparedStatement: void setInt(int,int)>(11, $i1);

        $i2 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: int getPriority()>();

        interfaceinvoke r42.<java.sql.PreparedStatement: void setInt(int,int)>(12, $i2);

        if z0 == 0 goto label09;

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void setBytes(java.sql.PreparedStatement,int,java.io.ByteArrayOutputStream)>(r42, 13, r41);

        $r31 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        $r32 = virtualinvoke $r31.<org.quartz.TriggerKey: java.lang.String getName()>();

        interfaceinvoke r42.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(14, $r32);

        $r33 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        $r34 = virtualinvoke $r33.<org.quartz.TriggerKey: java.lang.String getGroup()>();

        interfaceinvoke r42.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(15, $r34);

        goto label10;

     label09:
        $r27 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        $r28 = virtualinvoke $r27.<org.quartz.TriggerKey: java.lang.String getName()>();

        interfaceinvoke r42.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(13, $r28);

        $r29 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        $r30 = virtualinvoke $r29.<org.quartz.TriggerKey: java.lang.String getGroup()>();

        interfaceinvoke r42.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(14, $r30);

     label10:
        i8 = interfaceinvoke r42.<java.sql.PreparedStatement: int executeUpdate()>();

        if r5 != null goto label11;

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: int updateBlobTrigger(java.sql.Connection,org.quartz.spi.OperableTrigger)>(r1, r2);

        goto label12;

     label11:
        interfaceinvoke r5.<org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate: int updateExtendedTriggerProperties(java.sql.Connection,org.quartz.spi.OperableTrigger,java.lang.String,org.quartz.JobDetail)>(r1, r2, r3, r4);

     label12:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r42);

        goto label15;

     label13:
        $r40 := @caughtexception;

     label14:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r42);

        throw $r40;

     label15:
        return i8;

        catch java.lang.Throwable from label02 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public int updateBlobTrigger(java.sql.Connection, org.quartz.spi.OperableTrigger) throws java.sql.SQLException, java.io.IOException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        org.quartz.spi.OperableTrigger r2;
        byte[] r4;
        int i0, $i1;
        java.io.ByteArrayOutputStream $r7, r17;
        java.io.ObjectOutputStream $r8;
        java.io.ByteArrayInputStream $r9;
        java.lang.String $r10, $r12, $r14;
        org.quartz.TriggerKey $r11, $r13;
        java.lang.Throwable $r15;
        java.sql.PreparedStatement r16;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.spi.OperableTrigger;

        r16 = null;

        r17 = null;

     label1:
        $r7 = new java.io.ByteArrayOutputStream;

        specialinvoke $r7.<java.io.ByteArrayOutputStream: void <init>()>();

        r17 = $r7;

        $r8 = new java.io.ObjectOutputStream;

        specialinvoke $r8.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>($r7);

        virtualinvoke $r8.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(r2);

        virtualinvoke $r8.<java.io.ObjectOutputStream: void close()>();

        r4 = virtualinvoke $r7.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r9 = new java.io.ByteArrayInputStream;

        specialinvoke $r9.<java.io.ByteArrayInputStream: void <init>(byte[])>(r4);

        $r10 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("UPDATE {0}BLOB_TRIGGERS SET BLOB_DATA = ? WHERE SCHED_NAME = {1} AND TRIGGER_NAME = ? AND TRIGGER_GROUP = ?");

        r16 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r10);

        $i1 = lengthof r4;

        interfaceinvoke r16.<java.sql.PreparedStatement: void setBinaryStream(int,java.io.InputStream,int)>(1, $r9, $i1);

        $r11 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        $r12 = virtualinvoke $r11.<org.quartz.TriggerKey: java.lang.String getName()>();

        interfaceinvoke r16.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(2, $r12);

        $r13 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        $r14 = virtualinvoke $r13.<org.quartz.TriggerKey: java.lang.String getGroup()>();

        interfaceinvoke r16.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(3, $r14);

        i0 = interfaceinvoke r16.<java.sql.PreparedStatement: int executeUpdate()>();

     label2:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r16);

        if $r7 == null goto label3;

        virtualinvoke $r7.<java.io.ByteArrayOutputStream: void close()>();

     label3:
        return i0;

     label4:
        $r15 := @caughtexception;

     label5:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r16);

        if r17 == null goto label6;

        virtualinvoke r17.<java.io.ByteArrayOutputStream: void close()>();

     label6:
        throw $r15;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean triggerExists(java.sql.Connection, org.quartz.TriggerKey) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        org.quartz.TriggerKey r2;
        java.lang.String $r4, $r5, $r6;
        boolean $z0;
        java.lang.Throwable $r7;
        java.sql.PreparedStatement r8;
        java.sql.ResultSet r9;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.TriggerKey;

        r8 = null;

        r9 = null;

     label1:
        $r4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("SELECT TRIGGER_NAME FROM {0}TRIGGERS WHERE SCHED_NAME = {1} AND TRIGGER_NAME = ? AND TRIGGER_GROUP = ?");

        r8 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r4);

        $r5 = virtualinvoke r2.<org.quartz.TriggerKey: java.lang.String getName()>();

        interfaceinvoke r8.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, $r5);

        $r6 = virtualinvoke r2.<org.quartz.TriggerKey: java.lang.String getGroup()>();

        interfaceinvoke r8.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(2, $r6);

        r9 = interfaceinvoke r8.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

        $z0 = interfaceinvoke r9.<java.sql.ResultSet: boolean next()>();

        if $z0 == 0 goto label3;

     label2:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r9);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r8);

        return 1;

     label3:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r9);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r8);

        return 0;

     label4:
        $r7 := @caughtexception;

     label5:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r9);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r8);

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public int updateTriggerState(java.sql.Connection, org.quartz.TriggerKey, java.lang.String) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        org.quartz.TriggerKey r2;
        java.lang.String r3, $r5, $r6, $r7;
        int i0;
        java.lang.Throwable $r8;
        java.sql.PreparedStatement r9;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.TriggerKey;

        r3 := @parameter2: java.lang.String;

        r9 = null;

     label1:
        $r5 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("UPDATE {0}TRIGGERS SET TRIGGER_STATE = ? WHERE SCHED_NAME = {1} AND TRIGGER_NAME = ? AND TRIGGER_GROUP = ?");

        r9 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r5);

        interfaceinvoke r9.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, r3);

        $r6 = virtualinvoke r2.<org.quartz.TriggerKey: java.lang.String getName()>();

        interfaceinvoke r9.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(2, $r6);

        $r7 = virtualinvoke r2.<org.quartz.TriggerKey: java.lang.String getGroup()>();

        interfaceinvoke r9.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(3, $r7);

        i0 = interfaceinvoke r9.<java.sql.PreparedStatement: int executeUpdate()>();

     label2:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r9);

        return i0;

     label3:
        $r8 := @caughtexception;

     label4:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r9);

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int updateTriggerStateFromOtherStates(java.sql.Connection, org.quartz.TriggerKey, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        org.quartz.TriggerKey r2;
        java.lang.String r3, r4, r5, r6, $r8, $r9, $r10;
        int i0;
        java.lang.Throwable $r11;
        java.sql.PreparedStatement r12;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.TriggerKey;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        r6 := @parameter5: java.lang.String;

        r12 = null;

     label1:
        $r8 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("UPDATE {0}TRIGGERS SET TRIGGER_STATE = ? WHERE SCHED_NAME = {1} AND TRIGGER_NAME = ? AND TRIGGER_GROUP = ? AND (TRIGGER_STATE = ? OR TRIGGER_STATE = ? OR TRIGGER_STATE = ?)");

        r12 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r8);

        interfaceinvoke r12.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, r3);

        $r9 = virtualinvoke r2.<org.quartz.TriggerKey: java.lang.String getName()>();

        interfaceinvoke r12.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(2, $r9);

        $r10 = virtualinvoke r2.<org.quartz.TriggerKey: java.lang.String getGroup()>();

        interfaceinvoke r12.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(3, $r10);

        interfaceinvoke r12.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(4, r4);

        interfaceinvoke r12.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(5, r5);

        interfaceinvoke r12.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(6, r6);

        i0 = interfaceinvoke r12.<java.sql.PreparedStatement: int executeUpdate()>();

     label2:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r12);

        return i0;

     label3:
        $r11 := @caughtexception;

     label4:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r12);

        throw $r11;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int updateTriggerGroupStateFromOtherStates(java.sql.Connection, org.quartz.impl.matchers.GroupMatcher, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        org.quartz.impl.matchers.GroupMatcher r2;
        java.lang.String r3, r4, r5, r6, $r8, $r9;
        int i0;
        java.lang.Throwable $r10;
        java.sql.PreparedStatement r11;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.impl.matchers.GroupMatcher;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        r6 := @parameter5: java.lang.String;

        r11 = null;

     label1:
        $r8 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("UPDATE {0}TRIGGERS SET TRIGGER_STATE = ? WHERE SCHED_NAME = {1} AND TRIGGER_GROUP LIKE ? AND (TRIGGER_STATE = ? OR TRIGGER_STATE = ? OR TRIGGER_STATE = ?)");

        r11 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r8);

        interfaceinvoke r11.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, r3);

        $r9 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String toSqlLikeClause(org.quartz.impl.matchers.GroupMatcher)>(r2);

        interfaceinvoke r11.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(2, $r9);

        interfaceinvoke r11.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(3, r4);

        interfaceinvoke r11.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(4, r5);

        interfaceinvoke r11.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(5, r6);

        i0 = interfaceinvoke r11.<java.sql.PreparedStatement: int executeUpdate()>();

     label2:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r11);

        return i0;

     label3:
        $r10 := @caughtexception;

     label4:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r11);

        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int updateTriggerStateFromOtherState(java.sql.Connection, org.quartz.TriggerKey, java.lang.String, java.lang.String) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        org.quartz.TriggerKey r2;
        java.lang.String r3, r4, $r6, $r7, $r8;
        int i0;
        java.lang.Throwable $r9;
        java.sql.PreparedStatement r10;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.TriggerKey;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r10 = null;

     label1:
        $r6 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("UPDATE {0}TRIGGERS SET TRIGGER_STATE = ? WHERE SCHED_NAME = {1} AND TRIGGER_NAME = ? AND TRIGGER_GROUP = ? AND TRIGGER_STATE = ?");

        r10 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r6);

        interfaceinvoke r10.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, r3);

        $r7 = virtualinvoke r2.<org.quartz.TriggerKey: java.lang.String getName()>();

        interfaceinvoke r10.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(2, $r7);

        $r8 = virtualinvoke r2.<org.quartz.TriggerKey: java.lang.String getGroup()>();

        interfaceinvoke r10.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(3, $r8);

        interfaceinvoke r10.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(4, r4);

        i0 = interfaceinvoke r10.<java.sql.PreparedStatement: int executeUpdate()>();

     label2:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r10);

        return i0;

     label3:
        $r9 := @caughtexception;

     label4:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r10);

        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int updateTriggerGroupStateFromOtherState(java.sql.Connection, org.quartz.impl.matchers.GroupMatcher, java.lang.String, java.lang.String) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        org.quartz.impl.matchers.GroupMatcher r2;
        java.lang.String r3, r4, $r6, $r7;
        int i0;
        java.lang.Throwable $r8;
        java.sql.PreparedStatement r9;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.impl.matchers.GroupMatcher;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r9 = null;

     label1:
        $r6 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("UPDATE {0}TRIGGERS SET TRIGGER_STATE = ? WHERE SCHED_NAME = {1} AND TRIGGER_GROUP LIKE ? AND TRIGGER_STATE = ?");

        r9 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r6);

        interfaceinvoke r9.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, r3);

        $r7 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String toSqlLikeClause(org.quartz.impl.matchers.GroupMatcher)>(r2);

        interfaceinvoke r9.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(2, $r7);

        interfaceinvoke r9.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(3, r4);

        i0 = interfaceinvoke r9.<java.sql.PreparedStatement: int executeUpdate()>();

     label2:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r9);

        return i0;

     label3:
        $r8 := @caughtexception;

     label4:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r9);

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int updateTriggerStatesForJob(java.sql.Connection, org.quartz.JobKey, java.lang.String) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        org.quartz.JobKey r2;
        java.lang.String r3, $r5, $r6, $r7;
        int i0;
        java.lang.Throwable $r8;
        java.sql.PreparedStatement r9;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.JobKey;

        r3 := @parameter2: java.lang.String;

        r9 = null;

     label1:
        $r5 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("UPDATE {0}TRIGGERS SET TRIGGER_STATE = ? WHERE SCHED_NAME = {1} AND JOB_NAME = ? AND JOB_GROUP = ?");

        r9 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r5);

        interfaceinvoke r9.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, r3);

        $r6 = virtualinvoke r2.<org.quartz.JobKey: java.lang.String getName()>();

        interfaceinvoke r9.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(2, $r6);

        $r7 = virtualinvoke r2.<org.quartz.JobKey: java.lang.String getGroup()>();

        interfaceinvoke r9.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(3, $r7);

        i0 = interfaceinvoke r9.<java.sql.PreparedStatement: int executeUpdate()>();

     label2:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r9);

        return i0;

     label3:
        $r8 := @caughtexception;

     label4:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r9);

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int updateTriggerStatesForJobFromOtherState(java.sql.Connection, org.quartz.JobKey, java.lang.String, java.lang.String) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        org.quartz.JobKey r2;
        java.lang.String r3, r4, $r6, $r7, $r8;
        int i0;
        java.lang.Throwable $r9;
        java.sql.PreparedStatement r10;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.JobKey;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r10 = null;

     label1:
        $r6 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("UPDATE {0}TRIGGERS SET TRIGGER_STATE = ? WHERE SCHED_NAME = {1} AND JOB_NAME = ? AND JOB_GROUP = ? AND TRIGGER_STATE = ?");

        r10 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r6);

        interfaceinvoke r10.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, r3);

        $r7 = virtualinvoke r2.<org.quartz.JobKey: java.lang.String getName()>();

        interfaceinvoke r10.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(2, $r7);

        $r8 = virtualinvoke r2.<org.quartz.JobKey: java.lang.String getGroup()>();

        interfaceinvoke r10.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(3, $r8);

        interfaceinvoke r10.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(4, r4);

        i0 = interfaceinvoke r10.<java.sql.PreparedStatement: int executeUpdate()>();

     label2:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r10);

        return i0;

     label3:
        $r9 := @caughtexception;

     label4:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r10);

        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int deleteBlobTrigger(java.sql.Connection, org.quartz.TriggerKey) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        org.quartz.TriggerKey r2;
        int i0;
        java.lang.String $r4, $r5, $r6;
        java.lang.Throwable $r7;
        java.sql.PreparedStatement r8;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.TriggerKey;

        r8 = null;

     label1:
        $r4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("DELETE FROM {0}BLOB_TRIGGERS WHERE SCHED_NAME = {1} AND TRIGGER_NAME = ? AND TRIGGER_GROUP = ?");

        r8 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r4);

        $r5 = virtualinvoke r2.<org.quartz.TriggerKey: java.lang.String getName()>();

        interfaceinvoke r8.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, $r5);

        $r6 = virtualinvoke r2.<org.quartz.TriggerKey: java.lang.String getGroup()>();

        interfaceinvoke r8.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(2, $r6);

        i0 = interfaceinvoke r8.<java.sql.PreparedStatement: int executeUpdate()>();

     label2:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r8);

        return i0;

     label3:
        $r7 := @caughtexception;

     label4:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r8);

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int deleteTrigger(java.sql.Connection, org.quartz.TriggerKey) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        org.quartz.TriggerKey r2;
        int i0;
        java.lang.String $r4, $r5, $r6;
        java.lang.Throwable $r7;
        java.sql.PreparedStatement r8;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.TriggerKey;

        r8 = null;

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void deleteTriggerExtension(java.sql.Connection,org.quartz.TriggerKey)>(r1, r2);

     label1:
        $r4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("DELETE FROM {0}TRIGGERS WHERE SCHED_NAME = {1} AND TRIGGER_NAME = ? AND TRIGGER_GROUP = ?");

        r8 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r4);

        $r5 = virtualinvoke r2.<org.quartz.TriggerKey: java.lang.String getName()>();

        interfaceinvoke r8.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, $r5);

        $r6 = virtualinvoke r2.<org.quartz.TriggerKey: java.lang.String getGroup()>();

        interfaceinvoke r8.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(2, $r6);

        i0 = interfaceinvoke r8.<java.sql.PreparedStatement: int executeUpdate()>();

     label2:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r8);

        return i0;

     label3:
        $r7 := @caughtexception;

     label4:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r8);

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected void deleteTriggerExtension(java.sql.Connection, org.quartz.TriggerKey) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        org.quartz.TriggerKey r2;
        java.util.Iterator r3;
        org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate r4;
        java.util.List $r5;
        boolean $z0;
        java.lang.Object $r6;
        int $i1;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.TriggerKey;

        $r5 = r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.util.List triggerPersistenceDelegates>;

        r3 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate) $r6;

        $i1 = interfaceinvoke r4.<org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate: int deleteExtendedTriggerProperties(java.sql.Connection,org.quartz.TriggerKey)>(r1, r2);

        if $i1 <= 0 goto label2;

        return;

     label2:
        goto label1;

     label3:
        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: int deleteBlobTrigger(java.sql.Connection,org.quartz.TriggerKey)>(r1, r2);

        return;
    }

    public int selectNumTriggersForJob(java.sql.Connection, org.quartz.JobKey) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        org.quartz.JobKey r2;
        java.lang.String $r4, $r5, $r6;
        boolean $z0;
        java.lang.Throwable $r7;
        java.sql.PreparedStatement r8;
        java.sql.ResultSet r9;
        int i0;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.JobKey;

        r8 = null;

        r9 = null;

     label1:
        $r4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("SELECT COUNT(TRIGGER_NAME) FROM {0}TRIGGERS WHERE SCHED_NAME = {1} AND JOB_NAME = ? AND JOB_GROUP = ?");

        r8 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r4);

        $r5 = virtualinvoke r2.<org.quartz.JobKey: java.lang.String getName()>();

        interfaceinvoke r8.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, $r5);

        $r6 = virtualinvoke r2.<org.quartz.JobKey: java.lang.String getGroup()>();

        interfaceinvoke r8.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(2, $r6);

        r9 = interfaceinvoke r8.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

        $z0 = interfaceinvoke r9.<java.sql.ResultSet: boolean next()>();

        if $z0 == 0 goto label3;

        i0 = interfaceinvoke r9.<java.sql.ResultSet: int getInt(int)>(1);

     label2:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r9);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r8);

        return i0;

     label3:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r9);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r8);

        return 0;

     label4:
        $r7 := @caughtexception;

     label5:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r9);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r8);

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public org.quartz.JobDetail selectJobForTrigger(java.sql.Connection, org.quartz.spi.ClassLoadHelper, org.quartz.TriggerKey) throws java.lang.ClassNotFoundException, java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        org.quartz.spi.ClassLoadHelper r2;
        org.quartz.TriggerKey r3;
        org.quartz.JobDetail $r4;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.spi.ClassLoadHelper;

        r3 := @parameter2: org.quartz.TriggerKey;

        $r4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: org.quartz.JobDetail selectJobForTrigger(java.sql.Connection,org.quartz.spi.ClassLoadHelper,org.quartz.TriggerKey,boolean)>(r1, r2, r3, 1);

        return $r4;
    }

    public org.quartz.JobDetail selectJobForTrigger(java.sql.Connection, org.quartz.spi.ClassLoadHelper, org.quartz.TriggerKey, boolean) throws java.lang.ClassNotFoundException, java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        org.quartz.spi.ClassLoadHelper r2;
        org.quartz.TriggerKey r3;
        boolean z0, $z1, $z2, $z3, $z4;
        java.lang.String $r6, $r7, $r8, $r15, $r17, $r18, $r19;
        org.slf4j.Logger $r9, $r11;
        java.lang.StringBuilder $r10, $r12, $r13, $r14;
        org.quartz.impl.JobDetailImpl $r16;
        java.lang.Class $r20;
        java.lang.Throwable $r21;
        java.sql.PreparedStatement r22;
        java.sql.ResultSet r23;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.spi.ClassLoadHelper;

        r3 := @parameter2: org.quartz.TriggerKey;

        z0 := @parameter3: boolean;

        r22 = null;

        r23 = null;

     label1:
        $r6 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("SELECT J.JOB_NAME, J.JOB_GROUP, J.IS_DURABLE, J.JOB_CLASS_NAME, J.REQUESTS_RECOVERY FROM {0}TRIGGERS T, {0}JOB_DETAILS J WHERE T.SCHED_NAME = {1} AND J.SCHED_NAME = {1} AND T.TRIGGER_NAME = ? AND T.TRIGGER_GROUP = ? AND T.JOB_NAME = J.JOB_NAME AND T.JOB_GROUP = J.JOB_GROUP");

        r22 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r6);

        $r7 = virtualinvoke r3.<org.quartz.TriggerKey: java.lang.String getName()>();

        interfaceinvoke r22.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, $r7);

        $r8 = virtualinvoke r3.<org.quartz.TriggerKey: java.lang.String getGroup()>();

        interfaceinvoke r22.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(2, $r8);

        r23 = interfaceinvoke r22.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

        $z1 = interfaceinvoke r23.<java.sql.ResultSet: boolean next()>();

        if $z1 == 0 goto label4;

        $r16 = new org.quartz.impl.JobDetailImpl;

        specialinvoke $r16.<org.quartz.impl.JobDetailImpl: void <init>()>();

        $r17 = interfaceinvoke r23.<java.sql.ResultSet: java.lang.String getString(int)>(1);

        virtualinvoke $r16.<org.quartz.impl.JobDetailImpl: void setName(java.lang.String)>($r17);

        $r18 = interfaceinvoke r23.<java.sql.ResultSet: java.lang.String getString(int)>(2);

        virtualinvoke $r16.<org.quartz.impl.JobDetailImpl: void setGroup(java.lang.String)>($r18);

        $z3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: boolean getBoolean(java.sql.ResultSet,int)>(r23, 3);

        virtualinvoke $r16.<org.quartz.impl.JobDetailImpl: void setDurability(boolean)>($z3);

        if z0 == 0 goto label2;

        $r19 = interfaceinvoke r23.<java.sql.ResultSet: java.lang.String getString(int)>(4);

        $r20 = interfaceinvoke r2.<org.quartz.spi.ClassLoadHelper: java.lang.Class loadClass(java.lang.String,java.lang.Class)>($r19, class "Lorg/quartz/Job;");

        virtualinvoke $r16.<org.quartz.impl.JobDetailImpl: void setJobClass(java.lang.Class)>($r20);

     label2:
        $z4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: boolean getBoolean(java.sql.ResultSet,int)>(r23, 5);

        virtualinvoke $r16.<org.quartz.impl.JobDetailImpl: void setRequestsRecovery(boolean)>($z4);

     label3:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r23);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r22);

        return $r16;

     label4:
        $r9 = r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: org.slf4j.Logger logger>;

        $z2 = interfaceinvoke $r9.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z2 == 0 goto label5;

        $r11 = r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: org.slf4j.Logger logger>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No job for trigger \'");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r11.<org.slf4j.Logger: void debug(java.lang.String)>($r15);

     label5:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r23);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r22);

        return null;

     label6:
        $r21 := @caughtexception;

     label7:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r23);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r22);

        throw $r21;

        catch java.lang.Throwable from label1 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public java.util.List selectTriggersForJob(java.sql.Connection, org.quartz.JobKey) throws java.sql.SQLException, java.lang.ClassNotFoundException, java.io.IOException, org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        org.quartz.JobKey r2;
        org.quartz.spi.OperableTrigger r4;
        java.util.LinkedList $r6;
        java.lang.String $r7, $r8, $r9, $r10, $r11;
        boolean $z0;
        org.quartz.TriggerKey $r12;
        java.lang.Throwable $r13;
        java.sql.PreparedStatement r14;
        java.sql.ResultSet r15;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.JobKey;

        $r6 = new java.util.LinkedList;

        specialinvoke $r6.<java.util.LinkedList: void <init>()>();

        r14 = null;

        r15 = null;

     label1:
        $r7 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("SELECT TRIGGER_NAME, TRIGGER_GROUP FROM {0}TRIGGERS WHERE SCHED_NAME = {1} AND JOB_NAME = ? AND JOB_GROUP = ?");

        r14 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r7);

        $r8 = virtualinvoke r2.<org.quartz.JobKey: java.lang.String getName()>();

        interfaceinvoke r14.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, $r8);

        $r9 = virtualinvoke r2.<org.quartz.JobKey: java.lang.String getGroup()>();

        interfaceinvoke r14.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(2, $r9);

        r15 = interfaceinvoke r14.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

     label2:
        $z0 = interfaceinvoke r15.<java.sql.ResultSet: boolean next()>();

        if $z0 == 0 goto label4;

        $r10 = interfaceinvoke r15.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("TRIGGER_NAME");

        $r11 = interfaceinvoke r15.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("TRIGGER_GROUP");

        $r12 = staticinvoke <org.quartz.TriggerKey: org.quartz.TriggerKey triggerKey(java.lang.String,java.lang.String)>($r10, $r11);

        r4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: org.quartz.spi.OperableTrigger selectTrigger(java.sql.Connection,org.quartz.TriggerKey)>(r1, $r12);

        if r4 == null goto label3;

        virtualinvoke $r6.<java.util.LinkedList: boolean add(java.lang.Object)>(r4);

     label3:
        goto label2;

     label4:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r15);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r14);

        goto label7;

     label5:
        $r13 := @caughtexception;

     label6:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r15);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r14);

        throw $r13;

     label7:
        return $r6;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public java.util.List selectTriggersForCalendar(java.sql.Connection, java.lang.String) throws java.sql.SQLException, java.lang.ClassNotFoundException, java.io.IOException, org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        java.lang.String r2, $r6, $r7, $r8;
        java.util.LinkedList $r5;
        boolean $z0;
        org.quartz.TriggerKey $r9;
        org.quartz.spi.OperableTrigger $r10;
        java.lang.Throwable $r11;
        java.sql.PreparedStatement r12;
        java.sql.ResultSet r13;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: java.lang.String;

        $r5 = new java.util.LinkedList;

        specialinvoke $r5.<java.util.LinkedList: void <init>()>();

        r12 = null;

        r13 = null;

     label1:
        $r6 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("SELECT TRIGGER_NAME, TRIGGER_GROUP FROM {0}TRIGGERS WHERE SCHED_NAME = {1} AND CALENDAR_NAME = ?");

        r12 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r6);

        interfaceinvoke r12.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, r2);

        r13 = interfaceinvoke r12.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

     label2:
        $z0 = interfaceinvoke r13.<java.sql.ResultSet: boolean next()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r13.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("TRIGGER_NAME");

        $r8 = interfaceinvoke r13.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("TRIGGER_GROUP");

        $r9 = staticinvoke <org.quartz.TriggerKey: org.quartz.TriggerKey triggerKey(java.lang.String,java.lang.String)>($r7, $r8);

        $r10 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: org.quartz.spi.OperableTrigger selectTrigger(java.sql.Connection,org.quartz.TriggerKey)>(r1, $r9);

        virtualinvoke $r5.<java.util.LinkedList: boolean add(java.lang.Object)>($r10);

        goto label2;

     label3:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r13);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r12);

        goto label6;

     label4:
        $r11 := @caughtexception;

     label5:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r13);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r12);

        throw $r11;

     label6:
        return $r5;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public org.quartz.spi.OperableTrigger selectTrigger(java.sql.Connection, org.quartz.TriggerKey) throws java.sql.SQLException, java.lang.ClassNotFoundException, java.io.IOException, org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        org.quartz.TriggerKey r2;
        java.lang.String r3, r4, r5, r6, $r10, $r11, $r12, $r31, $r32, $r33, $r34, r44;
        long l0, l1, l2, l3;
        int i4, i5;
        org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate r8;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Object $r13, $r35;
        byte $b6, $b7, $b8;
        java.util.Date $r14, $r36, $r37, $r38, r46, r47, r48;
        org.quartz.TriggerBuilder $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r23, r51;
        org.quartz.ScheduleBuilder $r22;
        org.quartz.JobKey $r24;
        org.quartz.Trigger $r25;
        org.quartz.JobDataMap $r26;
        org.quartz.JobPersistenceException $r27;
        java.lang.StringBuilder $r28, $r29, $r30;
        java.lang.Throwable $r39;
        java.lang.IllegalStateException $r40;
        java.sql.PreparedStatement r41;
        java.sql.ResultSet r42;
        org.quartz.spi.OperableTrigger r43;
        java.util.Map r45;
        org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate$TriggerPropertyBundle r49;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.TriggerKey;

        r41 = null;

        r42 = null;

     label01:
        r43 = null;

        $r10 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("SELECT * FROM {0}TRIGGERS WHERE SCHED_NAME = {1} AND TRIGGER_NAME = ? AND TRIGGER_GROUP = ?");

        r41 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r10);

        $r11 = virtualinvoke r2.<org.quartz.TriggerKey: java.lang.String getName()>();

        interfaceinvoke r41.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, $r11);

        $r12 = virtualinvoke r2.<org.quartz.TriggerKey: java.lang.String getGroup()>();

        interfaceinvoke r41.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(2, $r12);

        r42 = interfaceinvoke r41.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

        $z0 = interfaceinvoke r42.<java.sql.ResultSet: boolean next()>();

        if $z0 == 0 goto label14;

        r44 = interfaceinvoke r42.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("JOB_NAME");

        r3 = interfaceinvoke r42.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("JOB_GROUP");

        r4 = interfaceinvoke r42.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("DESCRIPTION");

        l0 = interfaceinvoke r42.<java.sql.ResultSet: long getLong(java.lang.String)>("NEXT_FIRE_TIME");

        l1 = interfaceinvoke r42.<java.sql.ResultSet: long getLong(java.lang.String)>("PREV_FIRE_TIME");

        r5 = interfaceinvoke r42.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("TRIGGER_TYPE");

        l2 = interfaceinvoke r42.<java.sql.ResultSet: long getLong(java.lang.String)>("START_TIME");

        l3 = interfaceinvoke r42.<java.sql.ResultSet: long getLong(java.lang.String)>("END_TIME");

        r6 = interfaceinvoke r42.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("CALENDAR_NAME");

        i4 = interfaceinvoke r42.<java.sql.ResultSet: int getInt(java.lang.String)>("MISFIRE_INSTR");

        i5 = interfaceinvoke r42.<java.sql.ResultSet: int getInt(java.lang.String)>("PRIORITY");

        $z1 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: boolean canUseProperties()>();

        if $z1 == 0 goto label02;

        r45 = specialinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.util.Map getMapFromProperties(java.sql.ResultSet)>(r42);

        goto label03;

     label02:
        $r13 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.Object getObjectFromBlob(java.sql.ResultSet,java.lang.String)>(r42, "JOB_DATA");

        r45 = (java.util.Map) $r13;

     label03:
        r46 = null;

        $b6 = l0 cmp 0L;

        if $b6 <= 0 goto label04;

        $r38 = new java.util.Date;

        specialinvoke $r38.<java.util.Date: void <init>(long)>(l0);

        r46 = $r38;

     label04:
        r47 = null;

        $b7 = l1 cmp 0L;

        if $b7 <= 0 goto label05;

        $r37 = new java.util.Date;

        specialinvoke $r37.<java.util.Date: void <init>(long)>(l1);

        r47 = $r37;

     label05:
        $r14 = new java.util.Date;

        specialinvoke $r14.<java.util.Date: void <init>(long)>(l2);

        r48 = null;

        $b8 = l3 cmp 0L;

        if $b8 <= 0 goto label06;

        $r36 = new java.util.Date;

        specialinvoke $r36.<java.util.Date: void <init>(long)>(l3);

        r48 = $r36;

     label06:
        $z2 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("BLOB");

        if $z2 == 0 goto label07;

        interfaceinvoke r42.<java.sql.ResultSet: void close()>();

        r42 = null;

        interfaceinvoke r41.<java.sql.PreparedStatement: void close()>();

        r41 = null;

        $r32 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("SELECT * FROM {0}BLOB_TRIGGERS WHERE SCHED_NAME = {1} AND TRIGGER_NAME = ? AND TRIGGER_GROUP = ?");

        r41 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r32);

        $r33 = virtualinvoke r2.<org.quartz.TriggerKey: java.lang.String getName()>();

        interfaceinvoke r41.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, $r33);

        $r34 = virtualinvoke r2.<org.quartz.TriggerKey: java.lang.String getGroup()>();

        interfaceinvoke r41.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(2, $r34);

        r42 = interfaceinvoke r41.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

        $z3 = interfaceinvoke r42.<java.sql.ResultSet: boolean next()>();

        if $z3 == 0 goto label14;

        $r35 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.Object getObjectFromBlob(java.sql.ResultSet,java.lang.String)>(r42, "BLOB_DATA");

        r43 = (org.quartz.spi.OperableTrigger) $r35;

        goto label14;

     label07:
        r8 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate findTriggerPersistenceDelegate(java.lang.String)>(r5);

        if r8 != null goto label08;

        $r27 = new org.quartz.JobPersistenceException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No TriggerPersistenceDelegate for trigger discriminator type: ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<org.quartz.JobPersistenceException: void <init>(java.lang.String)>($r31);

        throw $r27;

     label08:
        r49 = interfaceinvoke r8.<org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate: org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate$TriggerPropertyBundle loadExtendedTriggerProperties(java.sql.Connection,org.quartz.TriggerKey)>(r1, r2);

     label09:
        goto label12;

     label10:
        $r40 := @caughtexception;

        $z4 = specialinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: boolean isTriggerStillPresent(java.sql.PreparedStatement)>(r41);

        if $z4 == 0 goto label11;

        throw $r40;

     label11:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r42);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r41);

        return null;

     label12:
        $r15 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r16 = virtualinvoke $r15.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withDescription(java.lang.String)>(r4);

        $r17 = virtualinvoke $r16.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withPriority(int)>(i5);

        $r18 = virtualinvoke $r17.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder startAt(java.util.Date)>($r14);

        $r19 = virtualinvoke $r18.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder endAt(java.util.Date)>(r48);

        $r20 = virtualinvoke $r19.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(org.quartz.TriggerKey)>(r2);

        $r21 = virtualinvoke $r20.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder modifiedByCalendar(java.lang.String)>(r6);

        $r22 = virtualinvoke r49.<org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate$TriggerPropertyBundle: org.quartz.ScheduleBuilder getScheduleBuilder()>();

        $r23 = virtualinvoke $r21.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>($r22);

        $r24 = staticinvoke <org.quartz.JobKey: org.quartz.JobKey jobKey(java.lang.String,java.lang.String)>(r44, r3);

        r51 = virtualinvoke $r23.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder forJob(org.quartz.JobKey)>($r24);

        if null == r45 goto label13;

        $r26 = new org.quartz.JobDataMap;

        specialinvoke $r26.<org.quartz.JobDataMap: void <init>(java.util.Map)>(r45);

        virtualinvoke r51.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder usingJobData(org.quartz.JobDataMap)>($r26);

     label13:
        $r25 = virtualinvoke r51.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        r43 = (org.quartz.spi.OperableTrigger) $r25;

        interfaceinvoke r43.<org.quartz.spi.OperableTrigger: void setMisfireInstruction(int)>(i4);

        interfaceinvoke r43.<org.quartz.spi.OperableTrigger: void setNextFireTime(java.util.Date)>(r46);

        interfaceinvoke r43.<org.quartz.spi.OperableTrigger: void setPreviousFireTime(java.util.Date)>(r47);

        specialinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void setTriggerStateProperties(org.quartz.spi.OperableTrigger,org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate$TriggerPropertyBundle)>(r43, r49);

     label14:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r42);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r41);

        return r43;

     label15:
        $r39 := @caughtexception;

     label16:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r42);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r41);

        throw $r39;

        catch java.lang.IllegalStateException from label08 to label09 with label10;
        catch java.lang.Throwable from label01 to label11 with label15;
        catch java.lang.Throwable from label12 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    private boolean isTriggerStillPresent(java.sql.PreparedStatement) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.PreparedStatement r1;
        boolean z0;
        java.lang.Throwable $r3;
        java.sql.ResultSet r4;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.PreparedStatement;

        r4 = null;

     label1:
        r4 = interfaceinvoke r1.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

        z0 = interfaceinvoke r4.<java.sql.ResultSet: boolean next()>();

     label2:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r4);

        return z0;

     label3:
        $r3 := @caughtexception;

     label4:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r4);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void setTriggerStateProperties(org.quartz.spi.OperableTrigger, org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate$TriggerPropertyBundle) throws org.quartz.JobPersistenceException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        org.quartz.spi.OperableTrigger r1;
        org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate$TriggerPropertyBundle r2;
        java.lang.String[] $r3, $r4;
        java.lang.Object[] $r5;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: org.quartz.spi.OperableTrigger;

        r2 := @parameter1: org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate$TriggerPropertyBundle;

        $r3 = virtualinvoke r2.<org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate$TriggerPropertyBundle: java.lang.String[] getStatePropertyNames()>();

        if $r3 != null goto label1;

        return;

     label1:
        $r4 = virtualinvoke r2.<org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate$TriggerPropertyBundle: java.lang.String[] getStatePropertyNames()>();

        $r5 = virtualinvoke r2.<org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate$TriggerPropertyBundle: java.lang.Object[] getStatePropertyValues()>();

        staticinvoke <org.quartz.impl.jdbcjobstore.Util: void setBeanProps(java.lang.Object,java.lang.String[],java.lang.Object[])>(r1, $r4, $r5);

        return;
    }

    public org.quartz.JobDataMap selectTriggerJobDataMap(java.sql.Connection, java.lang.String, java.lang.String) throws java.sql.SQLException, java.lang.ClassNotFoundException, java.io.IOException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        java.lang.String r2, r3, $r6;
        boolean $z0, $z1;
        org.quartz.JobDataMap $r7, $r9;
        java.lang.Object $r8;
        java.lang.Throwable $r10;
        java.sql.PreparedStatement r11;
        java.sql.ResultSet r12;
        java.util.Map r13;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r11 = null;

        r12 = null;

     label1:
        $r6 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("SELECT JOB_DATA FROM {0}TRIGGERS WHERE SCHED_NAME = {1} AND TRIGGER_NAME = ? AND TRIGGER_GROUP = ?");

        r11 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r6);

        interfaceinvoke r11.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, r2);

        interfaceinvoke r11.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(2, r3);

        r12 = interfaceinvoke r11.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

        $z0 = interfaceinvoke r12.<java.sql.ResultSet: boolean next()>();

        if $z0 == 0 goto label5;

        $z1 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: boolean canUseProperties()>();

        if $z1 == 0 goto label2;

        r13 = specialinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.util.Map getMapFromProperties(java.sql.ResultSet)>(r12);

        goto label3;

     label2:
        $r8 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.Object getObjectFromBlob(java.sql.ResultSet,java.lang.String)>(r12, "JOB_DATA");

        r13 = (java.util.Map) $r8;

     label3:
        interfaceinvoke r12.<java.sql.ResultSet: void close()>();

        interfaceinvoke r11.<java.sql.PreparedStatement: void close()>();

        if null == r13 goto label5;

        $r9 = new org.quartz.JobDataMap;

        specialinvoke $r9.<org.quartz.JobDataMap: void <init>(java.util.Map)>(r13);

     label4:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r12);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r11);

        return $r9;

     label5:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r12);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r11);

        goto label8;

     label6:
        $r10 := @caughtexception;

     label7:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r12);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r11);

        throw $r10;

     label8:
        $r7 = new org.quartz.JobDataMap;

        specialinvoke $r7.<org.quartz.JobDataMap: void <init>()>();

        return $r7;

        catch java.lang.Throwable from label1 to label4 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public java.lang.String selectTriggerState(java.sql.Connection, org.quartz.TriggerKey) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        org.quartz.TriggerKey r2;
        java.lang.String r3, $r5, $r6, $r7, r11;
        boolean $z0;
        java.lang.Throwable $r8;
        java.sql.PreparedStatement r9;
        java.sql.ResultSet r10;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.TriggerKey;

        r9 = null;

        r10 = null;

     label1:
        $r5 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("SELECT TRIGGER_STATE FROM {0}TRIGGERS WHERE SCHED_NAME = {1} AND TRIGGER_NAME = ? AND TRIGGER_GROUP = ?");

        r9 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r5);

        $r6 = virtualinvoke r2.<org.quartz.TriggerKey: java.lang.String getName()>();

        interfaceinvoke r9.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, $r6);

        $r7 = virtualinvoke r2.<org.quartz.TriggerKey: java.lang.String getGroup()>();

        interfaceinvoke r9.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(2, $r7);

        r10 = interfaceinvoke r9.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

        $z0 = interfaceinvoke r10.<java.sql.ResultSet: boolean next()>();

        if $z0 == 0 goto label2;

        r11 = interfaceinvoke r10.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("TRIGGER_STATE");

        goto label3;

     label2:
        r11 = "DELETED";

     label3:
        r3 = virtualinvoke r11.<java.lang.String: java.lang.String intern()>();

     label4:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r10);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r9);

        return r3;

     label5:
        $r8 := @caughtexception;

     label6:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r10);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r9);

        throw $r8;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public org.quartz.impl.jdbcjobstore.TriggerStatus selectTriggerStatus(java.sql.Connection, org.quartz.TriggerKey) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        org.quartz.TriggerKey r2;
        long l0;
        java.lang.String r3, r4, $r6, $r7, $r8, r16;
        boolean $z0;
        byte $b1;
        org.quartz.impl.jdbcjobstore.TriggerStatus $r9, r15;
        org.quartz.JobKey $r10;
        java.util.Date $r11, r17;
        java.lang.Throwable $r12;
        java.sql.PreparedStatement r13;
        java.sql.ResultSet r14;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.TriggerKey;

        r13 = null;

        r14 = null;

     label1:
        r15 = null;

        $r6 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("SELECT TRIGGER_STATE, NEXT_FIRE_TIME, JOB_NAME, JOB_GROUP FROM {0}TRIGGERS WHERE SCHED_NAME = {1} AND TRIGGER_NAME = ? AND TRIGGER_GROUP = ?");

        r13 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r6);

        $r7 = virtualinvoke r2.<org.quartz.TriggerKey: java.lang.String getName()>();

        interfaceinvoke r13.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, $r7);

        $r8 = virtualinvoke r2.<org.quartz.TriggerKey: java.lang.String getGroup()>();

        interfaceinvoke r13.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(2, $r8);

        r14 = interfaceinvoke r13.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

        $z0 = interfaceinvoke r14.<java.sql.ResultSet: boolean next()>();

        if $z0 == 0 goto label3;

        r16 = interfaceinvoke r14.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("TRIGGER_STATE");

        l0 = interfaceinvoke r14.<java.sql.ResultSet: long getLong(java.lang.String)>("NEXT_FIRE_TIME");

        r3 = interfaceinvoke r14.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("JOB_NAME");

        r4 = interfaceinvoke r14.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("JOB_GROUP");

        r17 = null;

        $b1 = l0 cmp 0L;

        if $b1 <= 0 goto label2;

        $r11 = new java.util.Date;

        specialinvoke $r11.<java.util.Date: void <init>(long)>(l0);

        r17 = $r11;

     label2:
        $r9 = new org.quartz.impl.jdbcjobstore.TriggerStatus;

        specialinvoke $r9.<org.quartz.impl.jdbcjobstore.TriggerStatus: void <init>(java.lang.String,java.util.Date)>(r16, r17);

        r15 = $r9;

        virtualinvoke $r9.<org.quartz.impl.jdbcjobstore.TriggerStatus: void setKey(org.quartz.TriggerKey)>(r2);

        $r10 = staticinvoke <org.quartz.JobKey: org.quartz.JobKey jobKey(java.lang.String,java.lang.String)>(r3, r4);

        virtualinvoke $r9.<org.quartz.impl.jdbcjobstore.TriggerStatus: void setJobKey(org.quartz.JobKey)>($r10);

     label3:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r14);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r13);

        return r15;

     label4:
        $r12 := @caughtexception;

     label5:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r14);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r13);

        throw $r12;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public int selectNumTriggers(java.sql.Connection) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        java.lang.String $r3;
        boolean $z0;
        java.lang.Throwable $r4;
        java.sql.PreparedStatement r5;
        java.sql.ResultSet r6;
        int i1;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r5 = null;

        r6 = null;

     label1:
        i1 = 0;

        $r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("SELECT COUNT(TRIGGER_NAME)  FROM {0}TRIGGERS WHERE SCHED_NAME = {1}");

        r5 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r3);

        r6 = interfaceinvoke r5.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

        $z0 = interfaceinvoke r6.<java.sql.ResultSet: boolean next()>();

        if $z0 == 0 goto label2;

        i1 = interfaceinvoke r6.<java.sql.ResultSet: int getInt(int)>(1);

     label2:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r6);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r5);

        return i1;

     label3:
        $r4 := @caughtexception;

     label4:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r6);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r5);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.util.List selectTriggerGroups(java.sql.Connection) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        java.lang.String $r5, $r7;
        java.util.LinkedList $r6;
        boolean $z0;
        java.lang.Throwable $r8;
        java.sql.PreparedStatement r9;
        java.sql.ResultSet r10;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r9 = null;

        r10 = null;

     label1:
        $r5 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("SELECT DISTINCT(TRIGGER_GROUP) FROM {0}TRIGGERS WHERE SCHED_NAME = {1}");

        r9 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r5);

        r10 = interfaceinvoke r9.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

        $r6 = new java.util.LinkedList;

        specialinvoke $r6.<java.util.LinkedList: void <init>()>();

     label2:
        $z0 = interfaceinvoke r10.<java.sql.ResultSet: boolean next()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r10.<java.sql.ResultSet: java.lang.String getString(int)>(1);

        virtualinvoke $r6.<java.util.LinkedList: boolean add(java.lang.Object)>($r7);

        goto label2;

     label3:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r10);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r9);

        return $r6;

     label4:
        $r8 := @caughtexception;

     label5:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r10);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r9);

        throw $r8;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.util.List selectTriggerGroups(java.sql.Connection, org.quartz.impl.matchers.GroupMatcher) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        org.quartz.impl.matchers.GroupMatcher r2;
        java.lang.String $r6, $r7, $r9;
        java.util.LinkedList $r8;
        boolean $z0;
        java.lang.Throwable $r10;
        java.sql.PreparedStatement r11;
        java.sql.ResultSet r12;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.impl.matchers.GroupMatcher;

        r11 = null;

        r12 = null;

     label1:
        $r6 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("SELECT DISTINCT(TRIGGER_GROUP) FROM {0}TRIGGERS WHERE SCHED_NAME = {1} AND TRIGGER_GROUP LIKE ?");

        r11 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r6);

        $r7 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String toSqlLikeClause(org.quartz.impl.matchers.GroupMatcher)>(r2);

        interfaceinvoke r11.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, $r7);

        r12 = interfaceinvoke r11.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

        $r8 = new java.util.LinkedList;

        specialinvoke $r8.<java.util.LinkedList: void <init>()>();

     label2:
        $z0 = interfaceinvoke r12.<java.sql.ResultSet: boolean next()>();

        if $z0 == 0 goto label3;

        $r9 = interfaceinvoke r12.<java.sql.ResultSet: java.lang.String getString(int)>(1);

        virtualinvoke $r8.<java.util.LinkedList: boolean add(java.lang.Object)>($r9);

        goto label2;

     label3:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r12);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r11);

        return $r8;

     label4:
        $r10 := @caughtexception;

     label5:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r12);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r11);

        throw $r10;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.util.Set selectTriggersInGroup(java.sql.Connection, org.quartz.impl.matchers.GroupMatcher) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        org.quartz.impl.matchers.GroupMatcher r2;
        boolean $z0, $z2;
        java.lang.String $r6, $r7, $r9, $r10, $r12, $r13;
        java.util.HashSet $r8;
        org.quartz.TriggerKey $r11;
        java.lang.Throwable $r14;
        java.sql.PreparedStatement r15;
        java.sql.ResultSet r16;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.impl.matchers.GroupMatcher;

        r15 = null;

        r16 = null;

     label1:
        $z0 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: boolean isMatcherEquals(org.quartz.impl.matchers.GroupMatcher)>(r2);

        if $z0 == 0 goto label2;

        $r12 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("SELECT TRIGGER_NAME, TRIGGER_GROUP FROM {0}TRIGGERS WHERE SCHED_NAME = {1} AND TRIGGER_GROUP = ?");

        r15 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r12);

        $r13 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String toSqlEqualsClause(org.quartz.impl.matchers.GroupMatcher)>(r2);

        interfaceinvoke r15.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, $r13);

        goto label3;

     label2:
        $r6 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("SELECT TRIGGER_NAME, TRIGGER_GROUP FROM {0}TRIGGERS WHERE SCHED_NAME = {1} AND TRIGGER_GROUP LIKE ?");

        r15 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r6);

        $r7 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String toSqlLikeClause(org.quartz.impl.matchers.GroupMatcher)>(r2);

        interfaceinvoke r15.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, $r7);

     label3:
        r16 = interfaceinvoke r15.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

        $r8 = new java.util.HashSet;

        specialinvoke $r8.<java.util.HashSet: void <init>()>();

     label4:
        $z2 = interfaceinvoke r16.<java.sql.ResultSet: boolean next()>();

        if $z2 == 0 goto label5;

        $r9 = interfaceinvoke r16.<java.sql.ResultSet: java.lang.String getString(int)>(1);

        $r10 = interfaceinvoke r16.<java.sql.ResultSet: java.lang.String getString(int)>(2);

        $r11 = staticinvoke <org.quartz.TriggerKey: org.quartz.TriggerKey triggerKey(java.lang.String,java.lang.String)>($r9, $r10);

        interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>($r11);

        goto label4;

     label5:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r16);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r15);

        return $r8;

     label6:
        $r14 := @caughtexception;

     label7:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r16);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r15);

        throw $r14;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public int insertPausedTriggerGroup(java.sql.Connection, java.lang.String) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        java.lang.String r2, $r4;
        int i0;
        java.lang.Throwable $r5;
        java.sql.PreparedStatement r6;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: java.lang.String;

        r6 = null;

     label1:
        $r4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("INSERT INTO {0}PAUSED_TRIGGER_GRPS (SCHED_NAME, TRIGGER_GROUP) VALUES({1}, ?)");

        r6 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r4);

        interfaceinvoke r6.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, r2);

        i0 = interfaceinvoke r6.<java.sql.PreparedStatement: int executeUpdate()>();

     label2:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r6);

        return i0;

     label3:
        $r5 := @caughtexception;

     label4:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r6);

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int deletePausedTriggerGroup(java.sql.Connection, java.lang.String) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        java.lang.String r2, $r4;
        int i0;
        java.lang.Throwable $r5;
        java.sql.PreparedStatement r6;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: java.lang.String;

        r6 = null;

     label1:
        $r4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("DELETE FROM {0}PAUSED_TRIGGER_GRPS WHERE SCHED_NAME = {1} AND TRIGGER_GROUP LIKE ?");

        r6 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r4);

        interfaceinvoke r6.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, r2);

        i0 = interfaceinvoke r6.<java.sql.PreparedStatement: int executeUpdate()>();

     label2:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r6);

        return i0;

     label3:
        $r5 := @caughtexception;

     label4:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r6);

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int deletePausedTriggerGroup(java.sql.Connection, org.quartz.impl.matchers.GroupMatcher) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        org.quartz.impl.matchers.GroupMatcher r2;
        int i0;
        java.lang.String $r4, $r5;
        java.lang.Throwable $r6;
        java.sql.PreparedStatement r7;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.impl.matchers.GroupMatcher;

        r7 = null;

     label1:
        $r4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("DELETE FROM {0}PAUSED_TRIGGER_GRPS WHERE SCHED_NAME = {1} AND TRIGGER_GROUP LIKE ?");

        r7 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r4);

        $r5 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String toSqlLikeClause(org.quartz.impl.matchers.GroupMatcher)>(r2);

        interfaceinvoke r7.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, $r5);

        i0 = interfaceinvoke r7.<java.sql.PreparedStatement: int executeUpdate()>();

     label2:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r7);

        return i0;

     label3:
        $r6 := @caughtexception;

     label4:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r7);

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int deleteAllPausedTriggerGroups(java.sql.Connection) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        int i0;
        java.lang.String $r3;
        java.lang.Throwable $r4;
        java.sql.PreparedStatement r5;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r5 = null;

     label1:
        $r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("DELETE FROM {0}PAUSED_TRIGGER_GRPS WHERE SCHED_NAME = {1}");

        r5 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r3);

        i0 = interfaceinvoke r5.<java.sql.PreparedStatement: int executeUpdate()>();

     label2:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r5);

        return i0;

     label3:
        $r4 := @caughtexception;

     label4:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r5);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean isTriggerGroupPaused(java.sql.Connection, java.lang.String) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        java.lang.String r2, $r4;
        boolean z0;
        java.lang.Throwable $r5;
        java.sql.PreparedStatement r6;
        java.sql.ResultSet r7;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: java.lang.String;

        r6 = null;

        r7 = null;

     label1:
        $r4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("SELECT TRIGGER_GROUP FROM {0}PAUSED_TRIGGER_GRPS WHERE SCHED_NAME = {1} AND TRIGGER_GROUP = ?");

        r6 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r4);

        interfaceinvoke r6.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, r2);

        r7 = interfaceinvoke r6.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

        z0 = interfaceinvoke r7.<java.sql.ResultSet: boolean next()>();

     label2:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r7);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r6);

        return z0;

     label3:
        $r5 := @caughtexception;

     label4:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r7);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r6);

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean isExistingTriggerGroup(java.sql.Connection, java.lang.String) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        java.lang.String r2, $r4;
        boolean $z0, $z2;
        int $i0;
        java.lang.Throwable $r5;
        java.sql.PreparedStatement r6;
        java.sql.ResultSet r7;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: java.lang.String;

        r6 = null;

        r7 = null;

     label1:
        $r4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("SELECT COUNT(TRIGGER_NAME)  FROM {0}TRIGGERS WHERE SCHED_NAME = {1} AND TRIGGER_GROUP = ?");

        r6 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r4);

        interfaceinvoke r6.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, r2);

        r7 = interfaceinvoke r6.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

        $z0 = interfaceinvoke r7.<java.sql.ResultSet: boolean next()>();

        if $z0 != 0 goto label3;

     label2:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r7);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r6);

        return 0;

     label3:
        $i0 = interfaceinvoke r7.<java.sql.ResultSet: int getInt(int)>(1);

        if $i0 <= 0 goto label4;

        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r7);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r6);

        return $z2;

     label6:
        $r5 := @caughtexception;

     label7:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r7);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r6);

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public int insertCalendar(java.sql.Connection, java.lang.String, org.quartz.Calendar) throws java.io.IOException, java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        java.lang.String r2, $r6;
        org.quartz.Calendar r3;
        java.io.ByteArrayOutputStream r4;
        int i0;
        java.lang.Throwable $r7;
        java.sql.PreparedStatement r8;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.quartz.Calendar;

        r4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.io.ByteArrayOutputStream serializeObject(java.lang.Object)>(r3);

        r8 = null;

     label1:
        $r6 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("INSERT INTO {0}CALENDARS (SCHED_NAME, CALENDAR_NAME, CALENDAR)  VALUES({1}, ?, ?)");

        r8 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r6);

        interfaceinvoke r8.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, r2);

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void setBytes(java.sql.PreparedStatement,int,java.io.ByteArrayOutputStream)>(r8, 2, r4);

        i0 = interfaceinvoke r8.<java.sql.PreparedStatement: int executeUpdate()>();

     label2:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r8);

        return i0;

     label3:
        $r7 := @caughtexception;

     label4:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r8);

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int updateCalendar(java.sql.Connection, java.lang.String, org.quartz.Calendar) throws java.io.IOException, java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        java.lang.String r2, $r6;
        org.quartz.Calendar r3;
        java.io.ByteArrayOutputStream r4;
        int i0;
        java.lang.Throwable $r7;
        java.sql.PreparedStatement r8;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.quartz.Calendar;

        r4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.io.ByteArrayOutputStream serializeObject(java.lang.Object)>(r3);

        r8 = null;

     label1:
        $r6 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("UPDATE {0}CALENDARS SET CALENDAR = ?  WHERE SCHED_NAME = {1} AND CALENDAR_NAME = ?");

        r8 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r6);

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void setBytes(java.sql.PreparedStatement,int,java.io.ByteArrayOutputStream)>(r8, 1, r4);

        interfaceinvoke r8.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(2, r2);

        i0 = interfaceinvoke r8.<java.sql.PreparedStatement: int executeUpdate()>();

     label2:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r8);

        return i0;

     label3:
        $r7 := @caughtexception;

     label4:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r8);

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean calendarExists(java.sql.Connection, java.lang.String) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        java.lang.String r2, $r4;
        boolean $z0;
        java.lang.Throwable $r5;
        java.sql.PreparedStatement r6;
        java.sql.ResultSet r7;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: java.lang.String;

        r6 = null;

        r7 = null;

     label1:
        $r4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("SELECT CALENDAR_NAME FROM {0}CALENDARS WHERE SCHED_NAME = {1} AND CALENDAR_NAME = ?");

        r6 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r4);

        interfaceinvoke r6.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, r2);

        r7 = interfaceinvoke r6.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

        $z0 = interfaceinvoke r7.<java.sql.ResultSet: boolean next()>();

        if $z0 == 0 goto label3;

     label2:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r7);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r6);

        return 1;

     label3:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r7);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r6);

        return 0;

     label4:
        $r5 := @caughtexception;

     label5:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r7);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r6);

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public org.quartz.Calendar selectCalendar(java.sql.Connection, java.lang.String) throws java.lang.ClassNotFoundException, java.io.IOException, java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        java.lang.String r2, r3, $r11;
        boolean $z0;
        java.lang.StringBuilder $r6, $r8, $r9, $r10;
        org.slf4j.Logger $r7;
        java.lang.Object $r12;
        java.lang.Throwable $r13;
        java.sql.PreparedStatement r14;
        java.sql.ResultSet r15;
        org.quartz.Calendar r16;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: java.lang.String;

        r14 = null;

        r15 = null;

     label1:
        r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("SELECT * FROM {0}CALENDARS WHERE SCHED_NAME = {1} AND CALENDAR_NAME = ?");

        r14 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>(r3);

        interfaceinvoke r14.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, r2);

        r15 = interfaceinvoke r14.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

        r16 = null;

        $z0 = interfaceinvoke r15.<java.sql.ResultSet: boolean next()>();

        if $z0 == 0 goto label2;

        $r12 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.Object getObjectFromBlob(java.sql.ResultSet,java.lang.String)>(r15, "CALENDAR");

        r16 = (org.quartz.Calendar) $r12;

     label2:
        if null != r16 goto label3;

        $r7 = r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: org.slf4j.Logger logger>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t find calendar with name \'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<org.slf4j.Logger: void warn(java.lang.String)>($r11);

     label3:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r15);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r14);

        return r16;

     label4:
        $r13 := @caughtexception;

     label5:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r15);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r14);

        throw $r13;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean calendarIsReferenced(java.sql.Connection, java.lang.String) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        java.lang.String r2, $r4;
        boolean $z0;
        java.lang.Throwable $r5;
        java.sql.PreparedStatement r6;
        java.sql.ResultSet r7;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: java.lang.String;

        r6 = null;

        r7 = null;

     label1:
        $r4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("SELECT CALENDAR_NAME FROM {0}TRIGGERS WHERE SCHED_NAME = {1} AND CALENDAR_NAME = ?");

        r6 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r4);

        interfaceinvoke r6.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, r2);

        r7 = interfaceinvoke r6.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

        $z0 = interfaceinvoke r7.<java.sql.ResultSet: boolean next()>();

        if $z0 == 0 goto label3;

     label2:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r7);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r6);

        return 1;

     label3:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r7);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r6);

        return 0;

     label4:
        $r5 := @caughtexception;

     label5:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r7);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r6);

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public int deleteCalendar(java.sql.Connection, java.lang.String) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        java.lang.String r2, $r4;
        int i0;
        java.lang.Throwable $r5;
        java.sql.PreparedStatement r6;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: java.lang.String;

        r6 = null;

     label1:
        $r4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("DELETE FROM {0}CALENDARS WHERE SCHED_NAME = {1} AND CALENDAR_NAME = ?");

        r6 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r4);

        interfaceinvoke r6.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, r2);

        i0 = interfaceinvoke r6.<java.sql.PreparedStatement: int executeUpdate()>();

     label2:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r6);

        return i0;

     label3:
        $r5 := @caughtexception;

     label4:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r6);

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int selectNumCalendars(java.sql.Connection) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        java.lang.String $r3;
        boolean $z0;
        java.lang.Throwable $r4;
        java.sql.PreparedStatement r5;
        java.sql.ResultSet r6;
        int i1;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r5 = null;

        r6 = null;

     label1:
        i1 = 0;

        $r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("SELECT COUNT(CALENDAR_NAME)  FROM {0}CALENDARS WHERE SCHED_NAME = {1}");

        r5 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r3);

        r6 = interfaceinvoke r5.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

        $z0 = interfaceinvoke r6.<java.sql.ResultSet: boolean next()>();

        if $z0 == 0 goto label2;

        i1 = interfaceinvoke r6.<java.sql.ResultSet: int getInt(int)>(1);

     label2:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r6);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r5);

        return i1;

     label3:
        $r4 := @caughtexception;

     label4:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r6);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r5);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.util.List selectCalendars(java.sql.Connection) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        java.lang.String $r5, $r7;
        java.util.LinkedList $r6;
        boolean $z0;
        java.lang.Throwable $r8;
        java.sql.PreparedStatement r9;
        java.sql.ResultSet r10;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r9 = null;

        r10 = null;

     label1:
        $r5 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("SELECT CALENDAR_NAME FROM {0}CALENDARS WHERE SCHED_NAME = {1}");

        r9 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r5);

        r10 = interfaceinvoke r9.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

        $r6 = new java.util.LinkedList;

        specialinvoke $r6.<java.util.LinkedList: void <init>()>();

     label2:
        $z0 = interfaceinvoke r10.<java.sql.ResultSet: boolean next()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r10.<java.sql.ResultSet: java.lang.String getString(int)>(1);

        virtualinvoke $r6.<java.util.LinkedList: boolean add(java.lang.Object)>($r7);

        goto label2;

     label3:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r10);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r9);

        return $r6;

     label4:
        $r8 := @caughtexception;

     label5:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r10);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r9);

        throw $r8;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public long selectNextFireTime(java.sql.Connection) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        java.lang.String $r3;
        boolean $z0;
        java.lang.Throwable $r4;
        java.sql.PreparedStatement r5;
        java.sql.ResultSet r6;
        long l0;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r5 = null;

        r6 = null;

     label1:
        $r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("SELECT MIN(NEXT_FIRE_TIME) AS ALIAS_NXT_FR_TM FROM {0}TRIGGERS WHERE SCHED_NAME = {1} AND TRIGGER_STATE = ? AND NEXT_FIRE_TIME >= 0");

        r5 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r3);

        interfaceinvoke r5.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, "WAITING");

        r6 = interfaceinvoke r5.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

        $z0 = interfaceinvoke r6.<java.sql.ResultSet: boolean next()>();

        if $z0 == 0 goto label3;

        l0 = interfaceinvoke r6.<java.sql.ResultSet: long getLong(java.lang.String)>("ALIAS_NXT_FR_TM");

     label2:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r6);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r5);

        return l0;

     label3:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r6);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r5);

        return 0L;

     label4:
        $r4 := @caughtexception;

     label5:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r6);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r5);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public org.quartz.TriggerKey selectTriggerForFireTime(java.sql.Connection, long) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        long l0;
        java.lang.String $r3, $r5, $r7, $r8;
        java.math.BigDecimal $r4;
        boolean $z0;
        org.quartz.TriggerKey $r6;
        java.lang.Throwable $r9;
        java.sql.PreparedStatement r10;
        java.sql.ResultSet r11;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        l0 := @parameter1: long;

        r10 = null;

        r11 = null;

     label1:
        $r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("SELECT TRIGGER_NAME, TRIGGER_GROUP FROM {0}TRIGGERS WHERE SCHED_NAME = {1} AND TRIGGER_STATE = ? AND NEXT_FIRE_TIME = ?");

        r10 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r3);

        interfaceinvoke r10.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, "WAITING");

        $r4 = new java.math.BigDecimal;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l0);

        specialinvoke $r4.<java.math.BigDecimal: void <init>(java.lang.String)>($r5);

        interfaceinvoke r10.<java.sql.PreparedStatement: void setBigDecimal(int,java.math.BigDecimal)>(2, $r4);

        r11 = interfaceinvoke r10.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

        $z0 = interfaceinvoke r11.<java.sql.ResultSet: boolean next()>();

        if $z0 == 0 goto label3;

        $r6 = new org.quartz.TriggerKey;

        $r7 = interfaceinvoke r11.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("TRIGGER_NAME");

        $r8 = interfaceinvoke r11.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("TRIGGER_GROUP");

        specialinvoke $r6.<org.quartz.TriggerKey: void <init>(java.lang.String,java.lang.String)>($r7, $r8);

     label2:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r11);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r10);

        return $r6;

     label3:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r11);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r10);

        return null;

     label4:
        $r9 := @caughtexception;

     label5:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r11);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r10);

        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.util.List selectTriggerToAcquire(java.sql.Connection, long, long) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        long l0, l1;
        java.util.List $r2;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        $r2 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.util.List selectTriggerToAcquire(java.sql.Connection,long,long,int)>(r1, l0, l1, 1);

        return $r2;
    }

    public java.util.List selectTriggerToAcquire(java.sql.Connection, long, long, int) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        long l0, l1;
        java.util.LinkedList $r5;
        java.lang.String $r6, $r8, $r10, $r11, $r12;
        java.math.BigDecimal $r7, $r9;
        int $i2, i3;
        org.quartz.TriggerKey $r13;
        java.lang.Throwable $r14;
        java.sql.PreparedStatement r15;
        java.sql.ResultSet r16;
        boolean $z1;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        i3 := @parameter3: int;

        r15 = null;

        r16 = null;

        $r5 = new java.util.LinkedList;

        specialinvoke $r5.<java.util.LinkedList: void <init>()>();

     label1:
        $r6 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("SELECT TRIGGER_NAME, TRIGGER_GROUP, NEXT_FIRE_TIME, PRIORITY FROM {0}TRIGGERS WHERE SCHED_NAME = {1} AND TRIGGER_STATE = ? AND NEXT_FIRE_TIME <= ? AND (MISFIRE_INSTR = -1 OR (MISFIRE_INSTR != -1 AND NEXT_FIRE_TIME >= ?)) ORDER BY NEXT_FIRE_TIME ASC, PRIORITY DESC");

        r15 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r6);

        if i3 >= 1 goto label2;

        i3 = 1;

     label2:
        interfaceinvoke r15.<java.sql.PreparedStatement: void setMaxRows(int)>(i3);

        interfaceinvoke r15.<java.sql.PreparedStatement: void setFetchSize(int)>(i3);

        interfaceinvoke r15.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, "WAITING");

        $r7 = new java.math.BigDecimal;

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l0);

        specialinvoke $r7.<java.math.BigDecimal: void <init>(java.lang.String)>($r8);

        interfaceinvoke r15.<java.sql.PreparedStatement: void setBigDecimal(int,java.math.BigDecimal)>(2, $r7);

        $r9 = new java.math.BigDecimal;

        $r10 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l1);

        specialinvoke $r9.<java.math.BigDecimal: void <init>(java.lang.String)>($r10);

        interfaceinvoke r15.<java.sql.PreparedStatement: void setBigDecimal(int,java.math.BigDecimal)>(3, $r9);

        r16 = interfaceinvoke r15.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

     label3:
        $z1 = interfaceinvoke r16.<java.sql.ResultSet: boolean next()>();

        if $z1 == 0 goto label4;

        $i2 = interfaceinvoke $r5.<java.util.List: int size()>();

        if $i2 > i3 goto label4;

        $r11 = interfaceinvoke r16.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("TRIGGER_NAME");

        $r12 = interfaceinvoke r16.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("TRIGGER_GROUP");

        $r13 = staticinvoke <org.quartz.TriggerKey: org.quartz.TriggerKey triggerKey(java.lang.String,java.lang.String)>($r11, $r12);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r13);

        goto label3;

     label4:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r16);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r15);

        return $r5;

     label5:
        $r14 := @caughtexception;

     label6:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r16);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r15);

        throw $r14;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public int insertFiredTrigger(java.sql.Connection, org.quartz.spi.OperableTrigger, java.lang.String, org.quartz.JobDetail) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        org.quartz.spi.OperableTrigger r2;
        java.lang.String r3, $r6, $r7, $r9, $r11, $r12, $r14, $r17, $r19, $r21;
        org.quartz.JobDetail r4;
        int i0, $i3;
        org.quartz.TriggerKey $r8, $r10;
        java.math.BigDecimal $r13, $r15;
        long $l1, $l2;
        java.util.Date $r16;
        org.quartz.JobKey $r18, $r20;
        boolean $z0, $z1;
        java.lang.Throwable $r22;
        java.sql.PreparedStatement r23;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.spi.OperableTrigger;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: org.quartz.JobDetail;

        r23 = null;

     label1:
        $r6 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("INSERT INTO {0}FIRED_TRIGGERS (SCHED_NAME, ENTRY_ID, TRIGGER_NAME, TRIGGER_GROUP, INSTANCE_NAME, FIRED_TIME, SCHED_TIME, STATE, JOB_NAME, JOB_GROUP, IS_NONCONCURRENT, REQUESTS_RECOVERY, PRIORITY) VALUES({1}, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");

        r23 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r6);

        $r7 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: java.lang.String getFireInstanceId()>();

        interfaceinvoke r23.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, $r7);

        $r8 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        $r9 = virtualinvoke $r8.<org.quartz.TriggerKey: java.lang.String getName()>();

        interfaceinvoke r23.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(2, $r9);

        $r10 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        $r11 = virtualinvoke $r10.<org.quartz.TriggerKey: java.lang.String getGroup()>();

        interfaceinvoke r23.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(3, $r11);

        $r12 = r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String instanceId>;

        interfaceinvoke r23.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(4, $r12);

        $r13 = new java.math.BigDecimal;

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r14 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l1);

        specialinvoke $r13.<java.math.BigDecimal: void <init>(java.lang.String)>($r14);

        interfaceinvoke r23.<java.sql.PreparedStatement: void setBigDecimal(int,java.math.BigDecimal)>(5, $r13);

        $r15 = new java.math.BigDecimal;

        $r16 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: java.util.Date getNextFireTime()>();

        $l2 = virtualinvoke $r16.<java.util.Date: long getTime()>();

        $r17 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l2);

        specialinvoke $r15.<java.math.BigDecimal: void <init>(java.lang.String)>($r17);

        interfaceinvoke r23.<java.sql.PreparedStatement: void setBigDecimal(int,java.math.BigDecimal)>(6, $r15);

        interfaceinvoke r23.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(7, r3);

        if r4 == null goto label2;

        $r18 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: org.quartz.JobKey getJobKey()>();

        $r19 = virtualinvoke $r18.<org.quartz.JobKey: java.lang.String getName()>();

        interfaceinvoke r23.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(8, $r19);

        $r20 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: org.quartz.JobKey getJobKey()>();

        $r21 = virtualinvoke $r20.<org.quartz.JobKey: java.lang.String getGroup()>();

        interfaceinvoke r23.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(9, $r21);

        $z0 = interfaceinvoke r4.<org.quartz.JobDetail: boolean isConcurrentExectionDisallowed()>();

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void setBoolean(java.sql.PreparedStatement,int,boolean)>(r23, 10, $z0);

        $z1 = interfaceinvoke r4.<org.quartz.JobDetail: boolean requestsRecovery()>();

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void setBoolean(java.sql.PreparedStatement,int,boolean)>(r23, 11, $z1);

        goto label3;

     label2:
        interfaceinvoke r23.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(8, null);

        interfaceinvoke r23.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(9, null);

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void setBoolean(java.sql.PreparedStatement,int,boolean)>(r23, 10, 0);

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void setBoolean(java.sql.PreparedStatement,int,boolean)>(r23, 11, 0);

     label3:
        $i3 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: int getPriority()>();

        interfaceinvoke r23.<java.sql.PreparedStatement: void setInt(int,int)>(12, $i3);

        i0 = interfaceinvoke r23.<java.sql.PreparedStatement: int executeUpdate()>();

     label4:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r23);

        return i0;

     label5:
        $r22 := @caughtexception;

     label6:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r23);

        throw $r22;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public int updateFiredTrigger(java.sql.Connection, org.quartz.spi.OperableTrigger, java.lang.String, org.quartz.JobDetail) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        org.quartz.spi.OperableTrigger r2;
        java.lang.String r3, $r6, $r7, $r9, $r12, $r13, $r15, $r17;
        org.quartz.JobDetail r4;
        int i0;
        java.math.BigDecimal $r8, $r10;
        long $l1, $l2;
        java.util.Date $r11;
        org.quartz.JobKey $r14, $r16;
        boolean $z0, $z1;
        java.lang.Throwable $r18;
        java.sql.PreparedStatement r19;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.spi.OperableTrigger;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: org.quartz.JobDetail;

        r19 = null;

     label1:
        $r6 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("UPDATE {0}FIRED_TRIGGERS SET INSTANCE_NAME = ?, FIRED_TIME = ?, SCHED_TIME = ?, STATE = ?, JOB_NAME = ?, JOB_GROUP = ?, IS_NONCONCURRENT = ?, REQUESTS_RECOVERY = ? WHERE SCHED_NAME = {1} AND ENTRY_ID = ?");

        r19 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r6);

        $r7 = r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String instanceId>;

        interfaceinvoke r19.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, $r7);

        $r8 = new java.math.BigDecimal;

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l1);

        specialinvoke $r8.<java.math.BigDecimal: void <init>(java.lang.String)>($r9);

        interfaceinvoke r19.<java.sql.PreparedStatement: void setBigDecimal(int,java.math.BigDecimal)>(2, $r8);

        $r10 = new java.math.BigDecimal;

        $r11 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: java.util.Date getNextFireTime()>();

        $l2 = virtualinvoke $r11.<java.util.Date: long getTime()>();

        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l2);

        specialinvoke $r10.<java.math.BigDecimal: void <init>(java.lang.String)>($r12);

        interfaceinvoke r19.<java.sql.PreparedStatement: void setBigDecimal(int,java.math.BigDecimal)>(3, $r10);

        interfaceinvoke r19.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(4, r3);

        if r4 == null goto label2;

        $r14 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: org.quartz.JobKey getJobKey()>();

        $r15 = virtualinvoke $r14.<org.quartz.JobKey: java.lang.String getName()>();

        interfaceinvoke r19.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(5, $r15);

        $r16 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: org.quartz.JobKey getJobKey()>();

        $r17 = virtualinvoke $r16.<org.quartz.JobKey: java.lang.String getGroup()>();

        interfaceinvoke r19.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(6, $r17);

        $z0 = interfaceinvoke r4.<org.quartz.JobDetail: boolean isConcurrentExectionDisallowed()>();

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void setBoolean(java.sql.PreparedStatement,int,boolean)>(r19, 7, $z0);

        $z1 = interfaceinvoke r4.<org.quartz.JobDetail: boolean requestsRecovery()>();

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void setBoolean(java.sql.PreparedStatement,int,boolean)>(r19, 8, $z1);

        goto label3;

     label2:
        interfaceinvoke r19.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(5, null);

        interfaceinvoke r19.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(6, null);

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void setBoolean(java.sql.PreparedStatement,int,boolean)>(r19, 7, 0);

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void setBoolean(java.sql.PreparedStatement,int,boolean)>(r19, 8, 0);

     label3:
        $r13 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: java.lang.String getFireInstanceId()>();

        interfaceinvoke r19.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(9, $r13);

        i0 = interfaceinvoke r19.<java.sql.PreparedStatement: int executeUpdate()>();

     label4:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r19);

        return i0;

     label5:
        $r18 := @caughtexception;

     label6:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r19);

        throw $r18;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public java.util.List selectFiredTriggerRecords(java.sql.Connection, java.lang.String, java.lang.String) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        java.lang.String r2, r3, $r7, $r9, $r10, $r11, $r12, $r13, $r15, $r16, $r17, $r19;
        java.util.LinkedList $r6;
        org.quartz.impl.jdbcjobstore.FiredTriggerRecord $r8;
        long $l0, $l1;
        int $i2;
        org.quartz.TriggerKey $r14;
        boolean $z0, $z2, $z3, $z4;
        org.quartz.JobKey $r18;
        java.lang.Throwable $r20;
        java.sql.PreparedStatement r21;
        java.sql.ResultSet r22;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r21 = null;

        r22 = null;

     label1:
        $r6 = new java.util.LinkedList;

        specialinvoke $r6.<java.util.LinkedList: void <init>()>();

        if r2 == null goto label2;

        $r19 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("SELECT * FROM {0}FIRED_TRIGGERS WHERE SCHED_NAME = {1} AND TRIGGER_NAME = ? AND TRIGGER_GROUP = ?");

        r21 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r19);

        interfaceinvoke r21.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, r2);

        interfaceinvoke r21.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(2, r3);

        goto label3;

     label2:
        $r7 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("SELECT * FROM {0}FIRED_TRIGGERS WHERE SCHED_NAME = {1} AND TRIGGER_GROUP = ?");

        r21 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r7);

        interfaceinvoke r21.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, r3);

     label3:
        r22 = interfaceinvoke r21.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

     label4:
        $z4 = interfaceinvoke r22.<java.sql.ResultSet: boolean next()>();

        if $z4 == 0 goto label6;

        $r8 = new org.quartz.impl.jdbcjobstore.FiredTriggerRecord;

        specialinvoke $r8.<org.quartz.impl.jdbcjobstore.FiredTriggerRecord: void <init>()>();

        $r9 = interfaceinvoke r22.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("ENTRY_ID");

        virtualinvoke $r8.<org.quartz.impl.jdbcjobstore.FiredTriggerRecord: void setFireInstanceId(java.lang.String)>($r9);

        $r10 = interfaceinvoke r22.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("STATE");

        virtualinvoke $r8.<org.quartz.impl.jdbcjobstore.FiredTriggerRecord: void setFireInstanceState(java.lang.String)>($r10);

        $l0 = interfaceinvoke r22.<java.sql.ResultSet: long getLong(java.lang.String)>("FIRED_TIME");

        virtualinvoke $r8.<org.quartz.impl.jdbcjobstore.FiredTriggerRecord: void setFireTimestamp(long)>($l0);

        $l1 = interfaceinvoke r22.<java.sql.ResultSet: long getLong(java.lang.String)>("SCHED_TIME");

        virtualinvoke $r8.<org.quartz.impl.jdbcjobstore.FiredTriggerRecord: void setScheduleTimestamp(long)>($l1);

        $i2 = interfaceinvoke r22.<java.sql.ResultSet: int getInt(java.lang.String)>("PRIORITY");

        virtualinvoke $r8.<org.quartz.impl.jdbcjobstore.FiredTriggerRecord: void setPriority(int)>($i2);

        $r11 = interfaceinvoke r22.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("INSTANCE_NAME");

        virtualinvoke $r8.<org.quartz.impl.jdbcjobstore.FiredTriggerRecord: void setSchedulerInstanceId(java.lang.String)>($r11);

        $r12 = interfaceinvoke r22.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("TRIGGER_NAME");

        $r13 = interfaceinvoke r22.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("TRIGGER_GROUP");

        $r14 = staticinvoke <org.quartz.TriggerKey: org.quartz.TriggerKey triggerKey(java.lang.String,java.lang.String)>($r12, $r13);

        virtualinvoke $r8.<org.quartz.impl.jdbcjobstore.FiredTriggerRecord: void setTriggerKey(org.quartz.TriggerKey)>($r14);

        $r15 = virtualinvoke $r8.<org.quartz.impl.jdbcjobstore.FiredTriggerRecord: java.lang.String getFireInstanceState()>();

        $z0 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>("ACQUIRED");

        if $z0 != 0 goto label5;

        $z2 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: boolean getBoolean(java.sql.ResultSet,java.lang.String)>(r22, "IS_NONCONCURRENT");

        virtualinvoke $r8.<org.quartz.impl.jdbcjobstore.FiredTriggerRecord: void setJobDisallowsConcurrentExecution(boolean)>($z2);

        $z3 = interfaceinvoke r22.<java.sql.ResultSet: boolean getBoolean(java.lang.String)>("REQUESTS_RECOVERY");

        virtualinvoke $r8.<org.quartz.impl.jdbcjobstore.FiredTriggerRecord: void setJobRequestsRecovery(boolean)>($z3);

        $r16 = interfaceinvoke r22.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("JOB_NAME");

        $r17 = interfaceinvoke r22.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("JOB_GROUP");

        $r18 = staticinvoke <org.quartz.JobKey: org.quartz.JobKey jobKey(java.lang.String,java.lang.String)>($r16, $r17);

        virtualinvoke $r8.<org.quartz.impl.jdbcjobstore.FiredTriggerRecord: void setJobKey(org.quartz.JobKey)>($r18);

     label5:
        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label4;

     label6:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r22);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r21);

        return $r6;

     label7:
        $r20 := @caughtexception;

     label8:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r22);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r21);

        throw $r20;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public java.util.List selectFiredTriggerRecordsByJob(java.sql.Connection, java.lang.String, java.lang.String) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        java.lang.String r2, r3, $r7, $r9, $r10, $r11, $r12, $r13, $r15, $r16, $r17, $r19;
        java.util.LinkedList $r6;
        org.quartz.impl.jdbcjobstore.FiredTriggerRecord $r8;
        long $l0, $l1;
        int $i2;
        org.quartz.TriggerKey $r14;
        boolean $z0, $z2, $z3, $z4;
        org.quartz.JobKey $r18;
        java.lang.Throwable $r20;
        java.sql.PreparedStatement r21;
        java.sql.ResultSet r22;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r21 = null;

        r22 = null;

     label1:
        $r6 = new java.util.LinkedList;

        specialinvoke $r6.<java.util.LinkedList: void <init>()>();

        if r2 == null goto label2;

        $r19 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("SELECT * FROM {0}FIRED_TRIGGERS WHERE SCHED_NAME = {1} AND JOB_NAME = ? AND JOB_GROUP = ?");

        r21 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r19);

        interfaceinvoke r21.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, r2);

        interfaceinvoke r21.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(2, r3);

        goto label3;

     label2:
        $r7 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("SELECT * FROM {0}FIRED_TRIGGERS WHERE SCHED_NAME = {1} AND JOB_GROUP = ?");

        r21 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r7);

        interfaceinvoke r21.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, r3);

     label3:
        r22 = interfaceinvoke r21.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

     label4:
        $z4 = interfaceinvoke r22.<java.sql.ResultSet: boolean next()>();

        if $z4 == 0 goto label6;

        $r8 = new org.quartz.impl.jdbcjobstore.FiredTriggerRecord;

        specialinvoke $r8.<org.quartz.impl.jdbcjobstore.FiredTriggerRecord: void <init>()>();

        $r9 = interfaceinvoke r22.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("ENTRY_ID");

        virtualinvoke $r8.<org.quartz.impl.jdbcjobstore.FiredTriggerRecord: void setFireInstanceId(java.lang.String)>($r9);

        $r10 = interfaceinvoke r22.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("STATE");

        virtualinvoke $r8.<org.quartz.impl.jdbcjobstore.FiredTriggerRecord: void setFireInstanceState(java.lang.String)>($r10);

        $l0 = interfaceinvoke r22.<java.sql.ResultSet: long getLong(java.lang.String)>("FIRED_TIME");

        virtualinvoke $r8.<org.quartz.impl.jdbcjobstore.FiredTriggerRecord: void setFireTimestamp(long)>($l0);

        $l1 = interfaceinvoke r22.<java.sql.ResultSet: long getLong(java.lang.String)>("SCHED_TIME");

        virtualinvoke $r8.<org.quartz.impl.jdbcjobstore.FiredTriggerRecord: void setScheduleTimestamp(long)>($l1);

        $i2 = interfaceinvoke r22.<java.sql.ResultSet: int getInt(java.lang.String)>("PRIORITY");

        virtualinvoke $r8.<org.quartz.impl.jdbcjobstore.FiredTriggerRecord: void setPriority(int)>($i2);

        $r11 = interfaceinvoke r22.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("INSTANCE_NAME");

        virtualinvoke $r8.<org.quartz.impl.jdbcjobstore.FiredTriggerRecord: void setSchedulerInstanceId(java.lang.String)>($r11);

        $r12 = interfaceinvoke r22.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("TRIGGER_NAME");

        $r13 = interfaceinvoke r22.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("TRIGGER_GROUP");

        $r14 = staticinvoke <org.quartz.TriggerKey: org.quartz.TriggerKey triggerKey(java.lang.String,java.lang.String)>($r12, $r13);

        virtualinvoke $r8.<org.quartz.impl.jdbcjobstore.FiredTriggerRecord: void setTriggerKey(org.quartz.TriggerKey)>($r14);

        $r15 = virtualinvoke $r8.<org.quartz.impl.jdbcjobstore.FiredTriggerRecord: java.lang.String getFireInstanceState()>();

        $z0 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>("ACQUIRED");

        if $z0 != 0 goto label5;

        $z2 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: boolean getBoolean(java.sql.ResultSet,java.lang.String)>(r22, "IS_NONCONCURRENT");

        virtualinvoke $r8.<org.quartz.impl.jdbcjobstore.FiredTriggerRecord: void setJobDisallowsConcurrentExecution(boolean)>($z2);

        $z3 = interfaceinvoke r22.<java.sql.ResultSet: boolean getBoolean(java.lang.String)>("REQUESTS_RECOVERY");

        virtualinvoke $r8.<org.quartz.impl.jdbcjobstore.FiredTriggerRecord: void setJobRequestsRecovery(boolean)>($z3);

        $r16 = interfaceinvoke r22.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("JOB_NAME");

        $r17 = interfaceinvoke r22.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("JOB_GROUP");

        $r18 = staticinvoke <org.quartz.JobKey: org.quartz.JobKey jobKey(java.lang.String,java.lang.String)>($r16, $r17);

        virtualinvoke $r8.<org.quartz.impl.jdbcjobstore.FiredTriggerRecord: void setJobKey(org.quartz.JobKey)>($r18);

     label5:
        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label4;

     label6:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r22);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r21);

        return $r6;

     label7:
        $r20 := @caughtexception;

     label8:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r22);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r21);

        throw $r20;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public java.util.List selectInstancesFiredTriggerRecords(java.sql.Connection, java.lang.String) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        java.lang.String r2, $r6, $r8, $r9, $r10, $r11, $r12, $r14, $r15, $r16;
        java.util.LinkedList $r5;
        boolean $z0, $z1, $z3, $z4;
        org.quartz.impl.jdbcjobstore.FiredTriggerRecord $r7;
        long $l0, $l1;
        org.quartz.TriggerKey $r13;
        int $i2;
        org.quartz.JobKey $r17;
        java.lang.Throwable $r18;
        java.sql.PreparedStatement r19;
        java.sql.ResultSet r20;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: java.lang.String;

        r19 = null;

        r20 = null;

     label1:
        $r5 = new java.util.LinkedList;

        specialinvoke $r5.<java.util.LinkedList: void <init>()>();

        $r6 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("SELECT * FROM {0}FIRED_TRIGGERS WHERE SCHED_NAME = {1} AND INSTANCE_NAME = ?");

        r19 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r6);

        interfaceinvoke r19.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, r2);

        r20 = interfaceinvoke r19.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

     label2:
        $z0 = interfaceinvoke r20.<java.sql.ResultSet: boolean next()>();

        if $z0 == 0 goto label4;

        $r7 = new org.quartz.impl.jdbcjobstore.FiredTriggerRecord;

        specialinvoke $r7.<org.quartz.impl.jdbcjobstore.FiredTriggerRecord: void <init>()>();

        $r8 = interfaceinvoke r20.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("ENTRY_ID");

        virtualinvoke $r7.<org.quartz.impl.jdbcjobstore.FiredTriggerRecord: void setFireInstanceId(java.lang.String)>($r8);

        $r9 = interfaceinvoke r20.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("STATE");

        virtualinvoke $r7.<org.quartz.impl.jdbcjobstore.FiredTriggerRecord: void setFireInstanceState(java.lang.String)>($r9);

        $l0 = interfaceinvoke r20.<java.sql.ResultSet: long getLong(java.lang.String)>("FIRED_TIME");

        virtualinvoke $r7.<org.quartz.impl.jdbcjobstore.FiredTriggerRecord: void setFireTimestamp(long)>($l0);

        $l1 = interfaceinvoke r20.<java.sql.ResultSet: long getLong(java.lang.String)>("SCHED_TIME");

        virtualinvoke $r7.<org.quartz.impl.jdbcjobstore.FiredTriggerRecord: void setScheduleTimestamp(long)>($l1);

        $r10 = interfaceinvoke r20.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("INSTANCE_NAME");

        virtualinvoke $r7.<org.quartz.impl.jdbcjobstore.FiredTriggerRecord: void setSchedulerInstanceId(java.lang.String)>($r10);

        $r11 = interfaceinvoke r20.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("TRIGGER_NAME");

        $r12 = interfaceinvoke r20.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("TRIGGER_GROUP");

        $r13 = staticinvoke <org.quartz.TriggerKey: org.quartz.TriggerKey triggerKey(java.lang.String,java.lang.String)>($r11, $r12);

        virtualinvoke $r7.<org.quartz.impl.jdbcjobstore.FiredTriggerRecord: void setTriggerKey(org.quartz.TriggerKey)>($r13);

        $r14 = virtualinvoke $r7.<org.quartz.impl.jdbcjobstore.FiredTriggerRecord: java.lang.String getFireInstanceState()>();

        $z1 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>("ACQUIRED");

        if $z1 != 0 goto label3;

        $z3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: boolean getBoolean(java.sql.ResultSet,java.lang.String)>(r20, "IS_NONCONCURRENT");

        virtualinvoke $r7.<org.quartz.impl.jdbcjobstore.FiredTriggerRecord: void setJobDisallowsConcurrentExecution(boolean)>($z3);

        $z4 = interfaceinvoke r20.<java.sql.ResultSet: boolean getBoolean(java.lang.String)>("REQUESTS_RECOVERY");

        virtualinvoke $r7.<org.quartz.impl.jdbcjobstore.FiredTriggerRecord: void setJobRequestsRecovery(boolean)>($z4);

        $r15 = interfaceinvoke r20.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("JOB_NAME");

        $r16 = interfaceinvoke r20.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("JOB_GROUP");

        $r17 = staticinvoke <org.quartz.JobKey: org.quartz.JobKey jobKey(java.lang.String,java.lang.String)>($r15, $r16);

        virtualinvoke $r7.<org.quartz.impl.jdbcjobstore.FiredTriggerRecord: void setJobKey(org.quartz.JobKey)>($r17);

     label3:
        $i2 = interfaceinvoke r20.<java.sql.ResultSet: int getInt(java.lang.String)>("PRIORITY");

        virtualinvoke $r7.<org.quartz.impl.jdbcjobstore.FiredTriggerRecord: void setPriority(int)>($i2);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label2;

     label4:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r20);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r19);

        return $r5;

     label5:
        $r18 := @caughtexception;

     label6:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r20);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r19);

        throw $r18;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public java.util.Set selectFiredTriggerInstanceNames(java.sql.Connection) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        java.util.HashSet $r5;
        java.lang.String $r6, $r7;
        boolean $z0;
        java.lang.Throwable $r8;
        java.sql.PreparedStatement r9;
        java.sql.ResultSet r10;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r9 = null;

        r10 = null;

     label1:
        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>()>();

        $r6 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("SELECT DISTINCT INSTANCE_NAME FROM {0}FIRED_TRIGGERS WHERE SCHED_NAME = {1}");

        r9 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r6);

        r10 = interfaceinvoke r9.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

     label2:
        $z0 = interfaceinvoke r10.<java.sql.ResultSet: boolean next()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r10.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("INSTANCE_NAME");

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>($r7);

        goto label2;

     label3:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r10);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r9);

        return $r5;

     label4:
        $r8 := @caughtexception;

     label5:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r10);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r9);

        throw $r8;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public int deleteFiredTrigger(java.sql.Connection, java.lang.String) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        java.lang.String r2, $r4;
        int i0;
        java.lang.Throwable $r5;
        java.sql.PreparedStatement r6;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: java.lang.String;

        r6 = null;

     label1:
        $r4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("DELETE FROM {0}FIRED_TRIGGERS WHERE SCHED_NAME = {1} AND ENTRY_ID = ?");

        r6 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r4);

        interfaceinvoke r6.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, r2);

        i0 = interfaceinvoke r6.<java.sql.PreparedStatement: int executeUpdate()>();

     label2:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r6);

        return i0;

     label3:
        $r5 := @caughtexception;

     label4:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r6);

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int selectJobExecutionCount(java.sql.Connection, org.quartz.JobKey) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        org.quartz.JobKey r2;
        java.lang.String $r4, $r5, $r6;
        boolean $z0;
        java.lang.Throwable $r7;
        java.sql.PreparedStatement r8;
        java.sql.ResultSet r9;
        int $i1;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.JobKey;

        r8 = null;

        r9 = null;

     label1:
        $r4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("SELECT COUNT(TRIGGER_NAME) FROM {0}FIRED_TRIGGERS WHERE SCHED_NAME = {1} AND JOB_NAME = ? AND JOB_GROUP = ?");

        r8 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r4);

        $r5 = virtualinvoke r2.<org.quartz.JobKey: java.lang.String getName()>();

        interfaceinvoke r8.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, $r5);

        $r6 = virtualinvoke r2.<org.quartz.JobKey: java.lang.String getGroup()>();

        interfaceinvoke r8.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(2, $r6);

        r9 = interfaceinvoke r8.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

        $z0 = interfaceinvoke r9.<java.sql.ResultSet: boolean next()>();

        if $z0 == 0 goto label2;

        $i1 = interfaceinvoke r9.<java.sql.ResultSet: int getInt(int)>(1);

        goto label3;

     label2:
        $i1 = 0;

     label3:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r9);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r8);

        return $i1;

     label4:
        $r7 := @caughtexception;

     label5:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r9);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r8);

        throw $r7;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public int insertSchedulerState(java.sql.Connection, java.lang.String, long, long) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        java.lang.String r2, $r4;
        long l0, l1;
        int i2;
        java.lang.Throwable $r5;
        java.sql.PreparedStatement r6;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        l1 := @parameter3: long;

        r6 = null;

     label1:
        $r4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("INSERT INTO {0}SCHEDULER_STATE (SCHED_NAME, INSTANCE_NAME, LAST_CHECKIN_TIME, CHECKIN_INTERVAL) VALUES({1}, ?, ?, ?)");

        r6 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r4);

        interfaceinvoke r6.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, r2);

        interfaceinvoke r6.<java.sql.PreparedStatement: void setLong(int,long)>(2, l0);

        interfaceinvoke r6.<java.sql.PreparedStatement: void setLong(int,long)>(3, l1);

        i2 = interfaceinvoke r6.<java.sql.PreparedStatement: int executeUpdate()>();

     label2:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r6);

        return i2;

     label3:
        $r5 := @caughtexception;

     label4:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r6);

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int deleteSchedulerState(java.sql.Connection, java.lang.String) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        java.lang.String r2, $r4;
        int i0;
        java.lang.Throwable $r5;
        java.sql.PreparedStatement r6;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: java.lang.String;

        r6 = null;

     label1:
        $r4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("DELETE FROM {0}SCHEDULER_STATE WHERE SCHED_NAME = {1} AND INSTANCE_NAME = ?");

        r6 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r4);

        interfaceinvoke r6.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, r2);

        i0 = interfaceinvoke r6.<java.sql.PreparedStatement: int executeUpdate()>();

     label2:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r6);

        return i0;

     label3:
        $r5 := @caughtexception;

     label4:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r6);

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int updateSchedulerState(java.sql.Connection, java.lang.String, long) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        java.lang.String r2, $r4;
        long l0;
        int i1;
        java.lang.Throwable $r5;
        java.sql.PreparedStatement r6;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        r6 = null;

     label1:
        $r4 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("UPDATE {0}SCHEDULER_STATE SET LAST_CHECKIN_TIME = ? WHERE SCHED_NAME = {1} AND INSTANCE_NAME = ?");

        r6 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r4);

        interfaceinvoke r6.<java.sql.PreparedStatement: void setLong(int,long)>(1, l0);

        interfaceinvoke r6.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(2, r2);

        i1 = interfaceinvoke r6.<java.sql.PreparedStatement: int executeUpdate()>();

     label2:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r6);

        return i1;

     label3:
        $r5 := @caughtexception;

     label4:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r6);

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.util.List selectSchedulerStateRecords(java.sql.Connection, java.lang.String) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        java.lang.String r2, $r6, $r8, $r9;
        java.util.LinkedList $r5;
        org.quartz.impl.jdbcjobstore.SchedulerStateRecord $r7;
        long $l0, $l1;
        java.lang.Throwable $r10;
        java.sql.PreparedStatement r11;
        java.sql.ResultSet r12;
        boolean $z1;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: java.lang.String;

        r11 = null;

        r12 = null;

     label1:
        $r5 = new java.util.LinkedList;

        specialinvoke $r5.<java.util.LinkedList: void <init>()>();

        if r2 == null goto label2;

        $r9 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("SELECT * FROM {0}SCHEDULER_STATE WHERE SCHED_NAME = {1} AND INSTANCE_NAME = ?");

        r11 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r9);

        interfaceinvoke r11.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, r2);

        goto label3;

     label2:
        $r6 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("SELECT * FROM {0}SCHEDULER_STATE WHERE SCHED_NAME = {1}");

        r11 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r6);

     label3:
        r12 = interfaceinvoke r11.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

     label4:
        $z1 = interfaceinvoke r12.<java.sql.ResultSet: boolean next()>();

        if $z1 == 0 goto label5;

        $r7 = new org.quartz.impl.jdbcjobstore.SchedulerStateRecord;

        specialinvoke $r7.<org.quartz.impl.jdbcjobstore.SchedulerStateRecord: void <init>()>();

        $r8 = interfaceinvoke r12.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("INSTANCE_NAME");

        virtualinvoke $r7.<org.quartz.impl.jdbcjobstore.SchedulerStateRecord: void setSchedulerInstanceId(java.lang.String)>($r8);

        $l0 = interfaceinvoke r12.<java.sql.ResultSet: long getLong(java.lang.String)>("LAST_CHECKIN_TIME");

        virtualinvoke $r7.<org.quartz.impl.jdbcjobstore.SchedulerStateRecord: void setCheckinTimestamp(long)>($l0);

        $l1 = interfaceinvoke r12.<java.sql.ResultSet: long getLong(java.lang.String)>("CHECKIN_INTERVAL");

        virtualinvoke $r7.<org.quartz.impl.jdbcjobstore.SchedulerStateRecord: void setCheckinInterval(long)>($l1);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label4;

     label5:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r12);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r11);

        return $r5;

     label6:
        $r10 := @caughtexception;

     label7:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r12);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r11);

        throw $r10;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    protected final java.lang.String rtp(java.lang.String)
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.lang.String r1, $r2, $r3, $r4;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String tablePrefix>;

        $r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String getSchedulerNameLiteral()>();

        $r4 = staticinvoke <org.quartz.impl.jdbcjobstore.Util: java.lang.String rtp(java.lang.String,java.lang.String,java.lang.String)>(r1, $r2, $r3);

        return $r4;
    }

    protected java.lang.String getSchedulerNameLiteral()
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.lang.String $r1, $r2, $r5, $r8;
        java.lang.StringBuilder $r3, $r4, $r6, $r7;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        $r1 = r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String schedNameLiteral>;

        if $r1 != null goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r5 = r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String schedName>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String schedNameLiteral> = $r8;

     label1:
        $r2 = r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String schedNameLiteral>;

        return $r2;
    }

    protected java.io.ByteArrayOutputStream serializeObject(java.lang.Object) throws java.io.IOException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.lang.Object r1;
        java.io.ByteArrayOutputStream $r4;
        java.io.ObjectOutputStream $r5;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.lang.Object;

        $r4 = new java.io.ByteArrayOutputStream;

        specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>()>();

        if null == r1 goto label1;

        $r5 = new java.io.ObjectOutputStream;

        specialinvoke $r5.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>($r4);

        virtualinvoke $r5.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(r1);

        virtualinvoke $r5.<java.io.ObjectOutputStream: void flush()>();

     label1:
        return $r4;
    }

    protected java.io.ByteArrayOutputStream serializeJobData(org.quartz.JobDataMap) throws java.io.IOException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        org.quartz.JobDataMap r1;
        boolean $z0;
        java.io.ByteArrayOutputStream $r3, $r4;
        java.io.NotSerializableException $r5, $r6;
        java.lang.StringBuilder $r7, $r8, $r10, $r11, $r13;
        java.lang.Object $r9;
        java.lang.String $r12, $r14;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: org.quartz.JobDataMap;

        $z0 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: boolean canUseProperties()>();

        if $z0 == 0 goto label1;

        $r4 = specialinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.io.ByteArrayOutputStream serializeProperties(org.quartz.JobDataMap)>(r1);

        return $r4;

     label1:
        $r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.io.ByteArrayOutputStream serializeObject(java.lang.Object)>(r1);

     label2:
        return $r3;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.io.NotSerializableException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to serialize JobDataMap for insertion into database because the value of property \'");

        $r9 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.Object getKeyOfNonSerializableValue(java.util.Map)>(r1);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not serializable: ");

        $r12 = virtualinvoke $r5.<java.io.NotSerializableException: java.lang.String getMessage()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.NotSerializableException: void <init>(java.lang.String)>($r14);

        throw $r6;

        catch java.io.NotSerializableException from label1 to label2 with label3;
    }

    protected java.lang.Object getKeyOfNonSerializableValue(java.util.Map)
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.util.Map r1;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.lang.Object r4, $r7, $r8;
        java.util.Set $r6;
        boolean $z0;
        java.io.IOException $r9, $r10;
        java.lang.Throwable $r11;
        java.io.ByteArrayOutputStream r14;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.util.Map;

        $r6 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label14;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r7;

     label02:
        $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        r14 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.io.ByteArrayOutputStream serializeObject(java.lang.Object)>($r8);

     label03:
        if r14 == null goto label13;

     label04:
        virtualinvoke r14.<java.io.ByteArrayOutputStream: void close()>();

     label05:
        goto label13;

     label06:
        $r10 := @caughtexception;

        goto label13;

     label07:
        $r9 := @caughtexception;

        r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

     label08:
        goto label09;

     label09:
        return r4;

     label10:
        $r11 := @caughtexception;

     label11:
        goto label12;

     label12:
        throw $r11;

     label13:
        goto label01;

     label14:
        return null;

        catch java.io.IOException from label04 to label05 with label06;
        catch java.io.IOException from label02 to label03 with label07;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    private java.io.ByteArrayOutputStream serializeProperties(org.quartz.JobDataMap) throws java.io.IOException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        org.quartz.JobDataMap r1;
        java.util.Properties r3;
        java.io.ByteArrayOutputStream $r4;
        java.util.Map $r5;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: org.quartz.JobDataMap;

        $r4 = new java.io.ByteArrayOutputStream;

        specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>()>();

        if null == r1 goto label1;

        $r5 = virtualinvoke r1.<org.quartz.JobDataMap: java.util.Map getWrappedMap()>();

        r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.util.Properties convertToProperty(java.util.Map)>($r5);

        virtualinvoke r3.<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>($r4, "");

     label1:
        return $r4;
    }

    protected java.util.Map convertFromProperty(java.util.Properties) throws java.io.IOException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.util.Properties r1;
        java.util.HashMap $r2;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.util.Properties;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>(java.util.Map)>(r1);

        return $r2;
    }

    protected java.util.Properties convertToProperty(java.util.Map) throws java.io.IOException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.util.Map r1;
        java.util.Iterator r3;
        java.util.Map$Entry r4;
        java.lang.Object r5, $r9, $r10, $r22;
        java.util.Properties $r7;
        java.util.Set $r8;
        boolean $z0, $z1, $z2;
        java.io.IOException $r12, $r17;
        java.lang.StringBuilder $r13, $r14, $r15, $r18, $r19, $r20;
        java.lang.String $r16, $r21;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.util.Map;

        $r7 = new java.util.Properties;

        specialinvoke $r7.<java.util.Properties: void <init>()>();

        $r8 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r9;

        r5 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r10 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        if $r10 != null goto label2;

        $r22 = "";

        goto label3;

     label2:
        $r22 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

     label3:
        $z1 = r5 instanceof java.lang.String;

        if $z1 != 0 goto label4;

        $r17 = new java.io.IOException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("JobDataMap keys/values must be Strings when the \'useProperties\' property is set.  offending Key: ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.io.IOException: void <init>(java.lang.String)>($r21);

        throw $r17;

     label4:
        $z2 = $r22 instanceof java.lang.String;

        if $z2 != 0 goto label5;

        $r12 = new java.io.IOException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("JobDataMap values must be Strings when the \'useProperties\' property is set.  Key of offending value: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>($r16);

        throw $r12;

     label5:
        virtualinvoke $r7.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, $r22);

        goto label1;

     label6:
        return $r7;
    }

    protected java.lang.Object getObjectFromBlob(java.sql.ResultSet, java.lang.String) throws java.lang.ClassNotFoundException, java.io.IOException, java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.ResultSet r1;
        java.lang.String r2;
        java.sql.Blob r3;
        java.io.InputStream r4;
        long $l0;
        byte $b1;
        boolean $z0;
        java.io.ObjectInputStream $r7;
        java.io.ByteArrayInputStream $r8;
        int $i2;
        java.lang.Throwable $r9;
        java.lang.Object r10;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.ResultSet;

        r2 := @parameter1: java.lang.String;

        r10 = null;

        r3 = interfaceinvoke r1.<java.sql.ResultSet: java.sql.Blob getBlob(java.lang.String)>(r2);

        if r3 == null goto label6;

        $l0 = interfaceinvoke r3.<java.sql.Blob: long length()>();

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label6;

        r4 = interfaceinvoke r3.<java.sql.Blob: java.io.InputStream getBinaryStream()>();

        if null == r4 goto label6;

        $z0 = r4 instanceof java.io.ByteArrayInputStream;

        if $z0 == 0 goto label1;

        $r8 = (java.io.ByteArrayInputStream) r4;

        $i2 = virtualinvoke $r8.<java.io.ByteArrayInputStream: int available()>();

        if $i2 != 0 goto label1;

        goto label6;

     label1:
        $r7 = new java.io.ObjectInputStream;

        specialinvoke $r7.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>(r4);

     label2:
        r10 = virtualinvoke $r7.<java.io.ObjectInputStream: java.lang.Object readObject()>();

     label3:
        virtualinvoke $r7.<java.io.ObjectInputStream: void close()>();

        goto label6;

     label4:
        $r9 := @caughtexception;

     label5:
        virtualinvoke $r7.<java.io.ObjectInputStream: void close()>();

        throw $r9;

     label6:
        return r10;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    protected java.lang.Object getJobDataFromBlob(java.sql.ResultSet, java.lang.String) throws java.lang.ClassNotFoundException, java.io.IOException, java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.ResultSet r1;
        java.lang.String r2;
        java.sql.Blob r3;
        java.io.InputStream r4;
        boolean $z0;
        java.lang.Object $r5;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.ResultSet;

        r2 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: boolean canUseProperties()>();

        if $z0 == 0 goto label2;

        r3 = interfaceinvoke r1.<java.sql.ResultSet: java.sql.Blob getBlob(java.lang.String)>(r2);

        if r3 == null goto label1;

        r4 = interfaceinvoke r3.<java.sql.Blob: java.io.InputStream getBinaryStream()>();

        return r4;

     label1:
        return null;

     label2:
        $r5 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.Object getObjectFromBlob(java.sql.ResultSet,java.lang.String)>(r1, r2);

        return $r5;
    }

    public java.util.Set selectPausedTriggerGroups(java.sql.Connection) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        java.util.HashSet $r4;
        java.lang.String $r5, r9;
        boolean $z0;
        java.lang.Throwable $r6;
        java.sql.PreparedStatement r7;
        java.sql.ResultSet r8;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        r7 = null;

        r8 = null;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

     label1:
        $r5 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String rtp(java.lang.String)>("SELECT TRIGGER_GROUP FROM {0}PAUSED_TRIGGER_GRPS WHERE SCHED_NAME = {1}");

        r7 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r5);

        r8 = interfaceinvoke r7.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

     label2:
        $z0 = interfaceinvoke r8.<java.sql.ResultSet: boolean next()>();

        if $z0 == 0 goto label3;

        r9 = interfaceinvoke r8.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("TRIGGER_GROUP");

        virtualinvoke $r4.<java.util.HashSet: boolean add(java.lang.Object)>(r9);

        goto label2;

     label3:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r8);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r7);

        return $r4;

     label4:
        $r6 := @caughtexception;

     label5:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)>(r8);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)>(r7);

        throw $r6;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    protected static void closeResultSet(java.sql.ResultSet)
    {
        java.sql.ResultSet r0;
        java.sql.SQLException $r2;

        r0 := @parameter0: java.sql.ResultSet;

        if null == r0 goto label4;

     label1:
        interfaceinvoke r0.<java.sql.ResultSet: void close()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        return;

        catch java.sql.SQLException from label1 to label2 with label3;
    }

    protected static void closeStatement(java.sql.Statement)
    {
        java.sql.Statement r0;
        java.sql.SQLException $r2;

        r0 := @parameter0: java.sql.Statement;

        if null == r0 goto label4;

     label1:
        interfaceinvoke r0.<java.sql.Statement: void close()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        return;

        catch java.sql.SQLException from label1 to label2 with label3;
    }

    protected void setBoolean(java.sql.PreparedStatement, int, boolean) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.PreparedStatement r1;
        int i0;
        boolean z0;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.PreparedStatement;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        interfaceinvoke r1.<java.sql.PreparedStatement: void setBoolean(int,boolean)>(i0, z0);

        return;
    }

    protected boolean getBoolean(java.sql.ResultSet, java.lang.String) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.ResultSet r1;
        java.lang.String r2;
        boolean $z0;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.ResultSet;

        r2 := @parameter1: java.lang.String;

        $z0 = interfaceinvoke r1.<java.sql.ResultSet: boolean getBoolean(java.lang.String)>(r2);

        return $z0;
    }

    protected boolean getBoolean(java.sql.ResultSet, int) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.ResultSet r1;
        int i0;
        boolean $z0;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.ResultSet;

        i0 := @parameter1: int;

        $z0 = interfaceinvoke r1.<java.sql.ResultSet: boolean getBoolean(int)>(i0);

        return $z0;
    }

    protected void setBytes(java.sql.PreparedStatement, int, java.io.ByteArrayOutputStream) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.PreparedStatement r1;
        int i0;
        java.io.ByteArrayOutputStream r2;
        byte[] $r4;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.PreparedStatement;

        i0 := @parameter1: int;

        r2 := @parameter2: java.io.ByteArrayOutputStream;

        if r2 != null goto label1;

        $r4 = newarray (byte)[0];

        goto label2;

     label1:
        $r4 = virtualinvoke r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label2:
        interfaceinvoke r1.<java.sql.PreparedStatement: void setBytes(int,byte[])>(i0, $r4);

        return;
    }

    public volatile org.quartz.utils.Key selectTriggerForFireTime(java.sql.Connection, long) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate r0;
        java.sql.Connection r1;
        long l0;
        org.quartz.TriggerKey $r2;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        r1 := @parameter0: java.sql.Connection;

        l0 := @parameter1: long;

        $r2 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: org.quartz.TriggerKey selectTriggerForFireTime(java.sql.Connection,long)>(r1, l0);

        return $r2;
    }
}
