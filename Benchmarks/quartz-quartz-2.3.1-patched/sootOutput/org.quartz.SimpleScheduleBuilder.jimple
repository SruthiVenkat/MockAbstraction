public class org.quartz.SimpleScheduleBuilder extends org.quartz.ScheduleBuilder
{
    private long interval;
    private int repeatCount;
    private int misfireInstruction;

    protected void <init>()
    {
        org.quartz.SimpleScheduleBuilder r0;

        r0 := @this: org.quartz.SimpleScheduleBuilder;

        specialinvoke r0.<org.quartz.ScheduleBuilder: void <init>()>();

        r0.<org.quartz.SimpleScheduleBuilder: long interval> = 0L;

        r0.<org.quartz.SimpleScheduleBuilder: int repeatCount> = 0;

        r0.<org.quartz.SimpleScheduleBuilder: int misfireInstruction> = 0;

        return;
    }

    public static org.quartz.SimpleScheduleBuilder simpleSchedule()
    {
        org.quartz.SimpleScheduleBuilder $r0;

        $r0 = new org.quartz.SimpleScheduleBuilder;

        specialinvoke $r0.<org.quartz.SimpleScheduleBuilder: void <init>()>();

        return $r0;
    }

    public static org.quartz.SimpleScheduleBuilder repeatMinutelyForever()
    {
        org.quartz.SimpleScheduleBuilder $r0, $r1, $r2;

        $r0 = staticinvoke <org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder simpleSchedule()>();

        $r1 = virtualinvoke $r0.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder withIntervalInMinutes(int)>(1);

        $r2 = virtualinvoke $r1.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder repeatForever()>();

        return $r2;
    }

    public static org.quartz.SimpleScheduleBuilder repeatMinutelyForever(int)
    {
        int i0;
        org.quartz.SimpleScheduleBuilder $r0, $r1, $r2;

        i0 := @parameter0: int;

        $r0 = staticinvoke <org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder simpleSchedule()>();

        $r1 = virtualinvoke $r0.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder withIntervalInMinutes(int)>(i0);

        $r2 = virtualinvoke $r1.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder repeatForever()>();

        return $r2;
    }

    public static org.quartz.SimpleScheduleBuilder repeatSecondlyForever()
    {
        org.quartz.SimpleScheduleBuilder $r0, $r1, $r2;

        $r0 = staticinvoke <org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder simpleSchedule()>();

        $r1 = virtualinvoke $r0.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder withIntervalInSeconds(int)>(1);

        $r2 = virtualinvoke $r1.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder repeatForever()>();

        return $r2;
    }

    public static org.quartz.SimpleScheduleBuilder repeatSecondlyForever(int)
    {
        int i0;
        org.quartz.SimpleScheduleBuilder $r0, $r1, $r2;

        i0 := @parameter0: int;

        $r0 = staticinvoke <org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder simpleSchedule()>();

        $r1 = virtualinvoke $r0.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder withIntervalInSeconds(int)>(i0);

        $r2 = virtualinvoke $r1.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder repeatForever()>();

        return $r2;
    }

    public static org.quartz.SimpleScheduleBuilder repeatHourlyForever()
    {
        org.quartz.SimpleScheduleBuilder $r0, $r1, $r2;

        $r0 = staticinvoke <org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder simpleSchedule()>();

        $r1 = virtualinvoke $r0.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder withIntervalInHours(int)>(1);

        $r2 = virtualinvoke $r1.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder repeatForever()>();

        return $r2;
    }

    public static org.quartz.SimpleScheduleBuilder repeatHourlyForever(int)
    {
        int i0;
        org.quartz.SimpleScheduleBuilder $r0, $r1, $r2;

        i0 := @parameter0: int;

        $r0 = staticinvoke <org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder simpleSchedule()>();

        $r1 = virtualinvoke $r0.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder withIntervalInHours(int)>(i0);

        $r2 = virtualinvoke $r1.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder repeatForever()>();

        return $r2;
    }

    public static org.quartz.SimpleScheduleBuilder repeatMinutelyForTotalCount(int)
    {
        int i0, $i1;
        org.quartz.SimpleScheduleBuilder $r0, $r1, $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;

        i0 := @parameter0: int;

        if i0 >= 1 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Total count of firings must be at least one! Given count: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label1:
        $r0 = staticinvoke <org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder simpleSchedule()>();

        $r1 = virtualinvoke $r0.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder withIntervalInMinutes(int)>(1);

        $i1 = i0 - 1;

        $r2 = virtualinvoke $r1.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder withRepeatCount(int)>($i1);

        return $r2;
    }

    public static org.quartz.SimpleScheduleBuilder repeatMinutelyForTotalCount(int, int)
    {
        int i0, i1, $i2;
        org.quartz.SimpleScheduleBuilder $r0, $r1, $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 >= 1 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Total count of firings must be at least one! Given count: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label1:
        $r0 = staticinvoke <org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder simpleSchedule()>();

        $r1 = virtualinvoke $r0.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder withIntervalInMinutes(int)>(i1);

        $i2 = i0 - 1;

        $r2 = virtualinvoke $r1.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder withRepeatCount(int)>($i2);

        return $r2;
    }

    public static org.quartz.SimpleScheduleBuilder repeatSecondlyForTotalCount(int)
    {
        int i0, $i1;
        org.quartz.SimpleScheduleBuilder $r0, $r1, $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;

        i0 := @parameter0: int;

        if i0 >= 1 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Total count of firings must be at least one! Given count: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label1:
        $r0 = staticinvoke <org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder simpleSchedule()>();

        $r1 = virtualinvoke $r0.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder withIntervalInSeconds(int)>(1);

        $i1 = i0 - 1;

        $r2 = virtualinvoke $r1.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder withRepeatCount(int)>($i1);

        return $r2;
    }

    public static org.quartz.SimpleScheduleBuilder repeatSecondlyForTotalCount(int, int)
    {
        int i0, i1, $i2;
        org.quartz.SimpleScheduleBuilder $r0, $r1, $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 >= 1 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Total count of firings must be at least one! Given count: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label1:
        $r0 = staticinvoke <org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder simpleSchedule()>();

        $r1 = virtualinvoke $r0.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder withIntervalInSeconds(int)>(i1);

        $i2 = i0 - 1;

        $r2 = virtualinvoke $r1.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder withRepeatCount(int)>($i2);

        return $r2;
    }

    public static org.quartz.SimpleScheduleBuilder repeatHourlyForTotalCount(int)
    {
        int i0, $i1;
        org.quartz.SimpleScheduleBuilder $r0, $r1, $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;

        i0 := @parameter0: int;

        if i0 >= 1 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Total count of firings must be at least one! Given count: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label1:
        $r0 = staticinvoke <org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder simpleSchedule()>();

        $r1 = virtualinvoke $r0.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder withIntervalInHours(int)>(1);

        $i1 = i0 - 1;

        $r2 = virtualinvoke $r1.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder withRepeatCount(int)>($i1);

        return $r2;
    }

    public static org.quartz.SimpleScheduleBuilder repeatHourlyForTotalCount(int, int)
    {
        int i0, i1, $i2;
        org.quartz.SimpleScheduleBuilder $r0, $r1, $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 >= 1 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Total count of firings must be at least one! Given count: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label1:
        $r0 = staticinvoke <org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder simpleSchedule()>();

        $r1 = virtualinvoke $r0.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder withIntervalInHours(int)>(i1);

        $i2 = i0 - 1;

        $r2 = virtualinvoke $r1.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder withRepeatCount(int)>($i2);

        return $r2;
    }

    public org.quartz.spi.MutableTrigger build()
    {
        org.quartz.SimpleScheduleBuilder r0;
        org.quartz.impl.triggers.SimpleTriggerImpl $r2;
        long $l0;
        int $i1, $i2;

        r0 := @this: org.quartz.SimpleScheduleBuilder;

        $r2 = new org.quartz.impl.triggers.SimpleTriggerImpl;

        specialinvoke $r2.<org.quartz.impl.triggers.SimpleTriggerImpl: void <init>()>();

        $l0 = r0.<org.quartz.SimpleScheduleBuilder: long interval>;

        virtualinvoke $r2.<org.quartz.impl.triggers.SimpleTriggerImpl: void setRepeatInterval(long)>($l0);

        $i1 = r0.<org.quartz.SimpleScheduleBuilder: int repeatCount>;

        virtualinvoke $r2.<org.quartz.impl.triggers.SimpleTriggerImpl: void setRepeatCount(int)>($i1);

        $i2 = r0.<org.quartz.SimpleScheduleBuilder: int misfireInstruction>;

        virtualinvoke $r2.<org.quartz.impl.triggers.SimpleTriggerImpl: void setMisfireInstruction(int)>($i2);

        return $r2;
    }

    public org.quartz.SimpleScheduleBuilder withIntervalInMilliseconds(long)
    {
        org.quartz.SimpleScheduleBuilder r0;
        long l0;

        r0 := @this: org.quartz.SimpleScheduleBuilder;

        l0 := @parameter0: long;

        r0.<org.quartz.SimpleScheduleBuilder: long interval> = l0;

        return r0;
    }

    public org.quartz.SimpleScheduleBuilder withIntervalInSeconds(int)
    {
        org.quartz.SimpleScheduleBuilder r0;
        int i0;
        long $l1, $l2;

        r0 := @this: org.quartz.SimpleScheduleBuilder;

        i0 := @parameter0: int;

        $l1 = (long) i0;

        $l2 = $l1 * 1000L;

        r0.<org.quartz.SimpleScheduleBuilder: long interval> = $l2;

        return r0;
    }

    public org.quartz.SimpleScheduleBuilder withIntervalInMinutes(int)
    {
        org.quartz.SimpleScheduleBuilder r0;
        int i0;
        long $l1, $l2;

        r0 := @this: org.quartz.SimpleScheduleBuilder;

        i0 := @parameter0: int;

        $l1 = (long) i0;

        $l2 = $l1 * 60000L;

        r0.<org.quartz.SimpleScheduleBuilder: long interval> = $l2;

        return r0;
    }

    public org.quartz.SimpleScheduleBuilder withIntervalInHours(int)
    {
        org.quartz.SimpleScheduleBuilder r0;
        int i0;
        long $l1, $l2;

        r0 := @this: org.quartz.SimpleScheduleBuilder;

        i0 := @parameter0: int;

        $l1 = (long) i0;

        $l2 = $l1 * 3600000L;

        r0.<org.quartz.SimpleScheduleBuilder: long interval> = $l2;

        return r0;
    }

    public org.quartz.SimpleScheduleBuilder withRepeatCount(int)
    {
        org.quartz.SimpleScheduleBuilder r0;
        int i0;

        r0 := @this: org.quartz.SimpleScheduleBuilder;

        i0 := @parameter0: int;

        r0.<org.quartz.SimpleScheduleBuilder: int repeatCount> = i0;

        return r0;
    }

    public org.quartz.SimpleScheduleBuilder repeatForever()
    {
        org.quartz.SimpleScheduleBuilder r0;

        r0 := @this: org.quartz.SimpleScheduleBuilder;

        r0.<org.quartz.SimpleScheduleBuilder: int repeatCount> = -1;

        return r0;
    }

    public org.quartz.SimpleScheduleBuilder withMisfireHandlingInstructionIgnoreMisfires()
    {
        org.quartz.SimpleScheduleBuilder r0;

        r0 := @this: org.quartz.SimpleScheduleBuilder;

        r0.<org.quartz.SimpleScheduleBuilder: int misfireInstruction> = -1;

        return r0;
    }

    public org.quartz.SimpleScheduleBuilder withMisfireHandlingInstructionFireNow()
    {
        org.quartz.SimpleScheduleBuilder r0;

        r0 := @this: org.quartz.SimpleScheduleBuilder;

        r0.<org.quartz.SimpleScheduleBuilder: int misfireInstruction> = 1;

        return r0;
    }

    public org.quartz.SimpleScheduleBuilder withMisfireHandlingInstructionNextWithExistingCount()
    {
        org.quartz.SimpleScheduleBuilder r0;

        r0 := @this: org.quartz.SimpleScheduleBuilder;

        r0.<org.quartz.SimpleScheduleBuilder: int misfireInstruction> = 5;

        return r0;
    }

    public org.quartz.SimpleScheduleBuilder withMisfireHandlingInstructionNextWithRemainingCount()
    {
        org.quartz.SimpleScheduleBuilder r0;

        r0 := @this: org.quartz.SimpleScheduleBuilder;

        r0.<org.quartz.SimpleScheduleBuilder: int misfireInstruction> = 4;

        return r0;
    }

    public org.quartz.SimpleScheduleBuilder withMisfireHandlingInstructionNowWithExistingCount()
    {
        org.quartz.SimpleScheduleBuilder r0;

        r0 := @this: org.quartz.SimpleScheduleBuilder;

        r0.<org.quartz.SimpleScheduleBuilder: int misfireInstruction> = 2;

        return r0;
    }

    public org.quartz.SimpleScheduleBuilder withMisfireHandlingInstructionNowWithRemainingCount()
    {
        org.quartz.SimpleScheduleBuilder r0;

        r0 := @this: org.quartz.SimpleScheduleBuilder;

        r0.<org.quartz.SimpleScheduleBuilder: int misfireInstruction> = 3;

        return r0;
    }
}
