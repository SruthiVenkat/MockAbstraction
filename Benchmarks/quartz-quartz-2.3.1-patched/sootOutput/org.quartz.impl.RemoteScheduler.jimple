public class org.quartz.impl.RemoteScheduler extends java.lang.Object implements org.quartz.Scheduler
{
    private org.quartz.core.RemotableQuartzScheduler rsched;
    private java.lang.String schedId;
    private java.lang.String rmiHost;
    private int rmiPort;

    public void <init>(java.lang.String, java.lang.String, int)
    {
        org.quartz.impl.RemoteScheduler r0;
        java.lang.String r1, r2;
        int i0;

        r0 := @this: org.quartz.impl.RemoteScheduler;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.quartz.impl.RemoteScheduler: java.lang.String schedId> = r1;

        r0.<org.quartz.impl.RemoteScheduler: java.lang.String rmiHost> = r2;

        r0.<org.quartz.impl.RemoteScheduler: int rmiPort> = i0;

        return;
    }

    protected org.quartz.core.RemotableQuartzScheduler getRemoteScheduler() throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        org.quartz.core.RemotableQuartzScheduler $r2, $r6, $r7, $r8;
        int $i0;
        java.lang.String $r3, $r4, $r13, $r15;
        java.rmi.Remote $r5;
        java.lang.Exception $r9;
        org.quartz.SchedulerException $r10;
        java.lang.StringBuilder $r11, $r12, $r14;
        java.rmi.registry.Registry r16;

        r0 := @this: org.quartz.impl.RemoteScheduler;

        $r2 = r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler rsched>;

        if $r2 == null goto label1;

        $r8 = r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler rsched>;

        return $r8;

     label1:
        $r3 = r0.<org.quartz.impl.RemoteScheduler: java.lang.String rmiHost>;

        $i0 = r0.<org.quartz.impl.RemoteScheduler: int rmiPort>;

        r16 = staticinvoke <java.rmi.registry.LocateRegistry: java.rmi.registry.Registry getRegistry(java.lang.String,int)>($r3, $i0);

        $r4 = r0.<org.quartz.impl.RemoteScheduler: java.lang.String schedId>;

        $r5 = interfaceinvoke r16.<java.rmi.registry.Registry: java.rmi.Remote lookup(java.lang.String)>($r4);

        $r6 = (org.quartz.core.RemotableQuartzScheduler) $r5;

        r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler rsched> = $r6;

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        $r10 = new org.quartz.SchedulerException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not get handle to remote scheduler: ");

        $r13 = virtualinvoke $r9.<java.lang.Exception: java.lang.String getMessage()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<org.quartz.SchedulerException: void <init>(java.lang.String,java.lang.Throwable)>($r15, $r9);

        throw $r10;

     label4:
        $r7 = r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler rsched>;

        return $r7;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String, java.lang.Exception)
    {
        org.quartz.impl.RemoteScheduler r0;
        java.lang.String r1;
        java.lang.Exception r2;
        org.quartz.SchedulerException $r4;

        r0 := @this: org.quartz.impl.RemoteScheduler;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Exception;

        r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler rsched> = null;

        $r4 = new org.quartz.SchedulerException;

        specialinvoke $r4.<org.quartz.SchedulerException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return $r4;
    }

    public java.lang.String getSchedulerName() throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        org.quartz.core.RemotableQuartzScheduler $r2;
        java.lang.String $r3;
        java.rmi.RemoteException $r4;
        org.quartz.SchedulerException $r5;

        r0 := @this: org.quartz.impl.RemoteScheduler;

     label1:
        $r2 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        $r3 = interfaceinvoke $r2.<org.quartz.core.RemotableQuartzScheduler: java.lang.String getSchedulerName()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r4);

        throw $r5;

        catch java.rmi.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getSchedulerInstanceId() throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        org.quartz.core.RemotableQuartzScheduler $r2;
        java.lang.String $r3;
        java.rmi.RemoteException $r4;
        org.quartz.SchedulerException $r5;

        r0 := @this: org.quartz.impl.RemoteScheduler;

     label1:
        $r2 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        $r3 = interfaceinvoke $r2.<org.quartz.core.RemotableQuartzScheduler: java.lang.String getSchedulerInstanceId()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r4);

        throw $r5;

        catch java.rmi.RemoteException from label1 to label2 with label3;
    }

    public org.quartz.SchedulerMetaData getMetaData() throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        org.quartz.SchedulerMetaData $r1;
        java.lang.String $r2, $r3, $r8;
        java.lang.Class $r4, $r6, $r7;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Date $r5;
        int $i0, $i1;
        java.rmi.RemoteException $r9;
        org.quartz.SchedulerException $r10;
        org.quartz.core.RemotableQuartzScheduler r11;

        r0 := @this: org.quartz.impl.RemoteScheduler;

     label1:
        r11 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        $r1 = new org.quartz.SchedulerMetaData;

        $r2 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: java.lang.String getSchedulerName()>();

        $r3 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: java.lang.String getSchedulerInstanceId()>();

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: boolean isStarted()>();

        $z1 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: boolean isInStandbyMode()>();

        $z2 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: boolean isShutdown()>();

        $r5 = interfaceinvoke r11.<org.quartz.core.RemotableQuartzScheduler: java.util.Date runningSince()>();

        $i0 = interfaceinvoke r11.<org.quartz.core.RemotableQuartzScheduler: int numJobsExecuted()>();

        $r6 = interfaceinvoke r11.<org.quartz.core.RemotableQuartzScheduler: java.lang.Class getJobStoreClass()>();

        $z3 = interfaceinvoke r11.<org.quartz.core.RemotableQuartzScheduler: boolean supportsPersistence()>();

        $z4 = interfaceinvoke r11.<org.quartz.core.RemotableQuartzScheduler: boolean isClustered()>();

        $r7 = interfaceinvoke r11.<org.quartz.core.RemotableQuartzScheduler: java.lang.Class getThreadPoolClass()>();

        $i1 = interfaceinvoke r11.<org.quartz.core.RemotableQuartzScheduler: int getThreadPoolSize()>();

        $r8 = interfaceinvoke r11.<org.quartz.core.RemotableQuartzScheduler: java.lang.String getVersion()>();

        specialinvoke $r1.<org.quartz.SchedulerMetaData: void <init>(java.lang.String,java.lang.String,java.lang.Class,boolean,boolean,boolean,boolean,java.util.Date,int,java.lang.Class,boolean,boolean,java.lang.Class,int,java.lang.String)>($r2, $r3, $r4, 1, $z0, $z1, $z2, $r5, $i0, $r6, $z3, $z4, $r7, $i1, $r8);

     label2:
        return $r1;

     label3:
        $r9 := @caughtexception;

        $r10 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r9);

        throw $r10;

        catch java.rmi.RemoteException from label1 to label2 with label3;
    }

    public org.quartz.SchedulerContext getContext() throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        org.quartz.core.RemotableQuartzScheduler $r2;
        org.quartz.SchedulerContext $r3;
        java.rmi.RemoteException $r4;
        org.quartz.SchedulerException $r5;

        r0 := @this: org.quartz.impl.RemoteScheduler;

     label1:
        $r2 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        $r3 = interfaceinvoke $r2.<org.quartz.core.RemotableQuartzScheduler: org.quartz.SchedulerContext getSchedulerContext()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r4);

        throw $r5;

        catch java.rmi.RemoteException from label1 to label2 with label3;
    }

    public void start() throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        org.quartz.core.RemotableQuartzScheduler $r2;
        java.rmi.RemoteException $r3;
        org.quartz.SchedulerException $r4;

        r0 := @this: org.quartz.impl.RemoteScheduler;

     label1:
        $r2 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        interfaceinvoke $r2.<org.quartz.core.RemotableQuartzScheduler: void start()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r3);

        throw $r4;

     label4:
        return;

        catch java.rmi.RemoteException from label1 to label2 with label3;
    }

    public void startDelayed(int) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        int i0;
        org.quartz.core.RemotableQuartzScheduler $r2;
        java.rmi.RemoteException $r3;
        org.quartz.SchedulerException $r4;

        r0 := @this: org.quartz.impl.RemoteScheduler;

        i0 := @parameter0: int;

     label1:
        $r2 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        interfaceinvoke $r2.<org.quartz.core.RemotableQuartzScheduler: void startDelayed(int)>(i0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r3);

        throw $r4;

     label4:
        return;

        catch java.rmi.RemoteException from label1 to label2 with label3;
    }

    public void standby() throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        org.quartz.core.RemotableQuartzScheduler $r2;
        java.rmi.RemoteException $r3;
        org.quartz.SchedulerException $r4;

        r0 := @this: org.quartz.impl.RemoteScheduler;

     label1:
        $r2 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        interfaceinvoke $r2.<org.quartz.core.RemotableQuartzScheduler: void standby()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r3);

        throw $r4;

     label4:
        return;

        catch java.rmi.RemoteException from label1 to label2 with label3;
    }

    public boolean isStarted() throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        org.quartz.core.RemotableQuartzScheduler $r2;
        java.util.Date $r3;
        java.rmi.RemoteException $r4;
        org.quartz.SchedulerException $r5;
        boolean $z0;

        r0 := @this: org.quartz.impl.RemoteScheduler;

     label1:
        $r2 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        $r3 = interfaceinvoke $r2.<org.quartz.core.RemotableQuartzScheduler: java.util.Date runningSince()>();

        if $r3 == null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;

     label4:
        $r4 := @caughtexception;

        $r5 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r4);

        throw $r5;

        catch java.rmi.RemoteException from label1 to label3 with label4;
    }

    public boolean isInStandbyMode() throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        org.quartz.core.RemotableQuartzScheduler $r2;
        boolean $z0;
        java.rmi.RemoteException $r3;
        org.quartz.SchedulerException $r4;

        r0 := @this: org.quartz.impl.RemoteScheduler;

     label1:
        $r2 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        $z0 = interfaceinvoke $r2.<org.quartz.core.RemotableQuartzScheduler: boolean isInStandbyMode()>();

     label2:
        return $z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r3);

        throw $r4;

        catch java.rmi.RemoteException from label1 to label2 with label3;
    }

    public void shutdown() throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        org.quartz.core.RemotableQuartzScheduler $r1;
        org.quartz.impl.SchedulerRepository $r2;
        java.rmi.RemoteException $r3;
        org.quartz.SchedulerException $r4;
        java.lang.String r5;

        r0 := @this: org.quartz.impl.RemoteScheduler;

     label1:
        r5 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: java.lang.String getSchedulerName()>();

        $r1 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        interfaceinvoke $r1.<org.quartz.core.RemotableQuartzScheduler: void shutdown()>();

        $r2 = staticinvoke <org.quartz.impl.SchedulerRepository: org.quartz.impl.SchedulerRepository getInstance()>();

        virtualinvoke $r2.<org.quartz.impl.SchedulerRepository: boolean remove(java.lang.String)>(r5);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r3);

        throw $r4;

     label4:
        return;

        catch java.rmi.RemoteException from label1 to label2 with label3;
    }

    public void shutdown(boolean) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        boolean z0;
        org.quartz.core.RemotableQuartzScheduler $r1;
        org.quartz.impl.SchedulerRepository $r2;
        java.rmi.RemoteException $r3;
        org.quartz.SchedulerException $r4;
        java.lang.String r5;

        r0 := @this: org.quartz.impl.RemoteScheduler;

        z0 := @parameter0: boolean;

     label1:
        r5 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: java.lang.String getSchedulerName()>();

        $r1 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        interfaceinvoke $r1.<org.quartz.core.RemotableQuartzScheduler: void shutdown(boolean)>(z0);

        $r2 = staticinvoke <org.quartz.impl.SchedulerRepository: org.quartz.impl.SchedulerRepository getInstance()>();

        virtualinvoke $r2.<org.quartz.impl.SchedulerRepository: boolean remove(java.lang.String)>(r5);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r3);

        throw $r4;

     label4:
        return;

        catch java.rmi.RemoteException from label1 to label2 with label3;
    }

    public boolean isShutdown() throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        org.quartz.core.RemotableQuartzScheduler $r2;
        boolean $z0;
        java.rmi.RemoteException $r3;
        org.quartz.SchedulerException $r4;

        r0 := @this: org.quartz.impl.RemoteScheduler;

     label1:
        $r2 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        $z0 = interfaceinvoke $r2.<org.quartz.core.RemotableQuartzScheduler: boolean isShutdown()>();

     label2:
        return $z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r3);

        throw $r4;

        catch java.rmi.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getCurrentlyExecutingJobs() throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        org.quartz.core.RemotableQuartzScheduler $r2;
        java.util.List $r3;
        java.rmi.RemoteException $r4;
        org.quartz.SchedulerException $r5;

        r0 := @this: org.quartz.impl.RemoteScheduler;

     label1:
        $r2 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        $r3 = interfaceinvoke $r2.<org.quartz.core.RemotableQuartzScheduler: java.util.List getCurrentlyExecutingJobs()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r4);

        throw $r5;

        catch java.rmi.RemoteException from label1 to label2 with label3;
    }

    public java.util.Date scheduleJob(org.quartz.JobDetail, org.quartz.Trigger) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        org.quartz.JobDetail r1;
        org.quartz.Trigger r2;
        org.quartz.core.RemotableQuartzScheduler $r4;
        java.util.Date $r5;
        java.rmi.RemoteException $r6;
        org.quartz.SchedulerException $r7;

        r0 := @this: org.quartz.impl.RemoteScheduler;

        r1 := @parameter0: org.quartz.JobDetail;

        r2 := @parameter1: org.quartz.Trigger;

     label1:
        $r4 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        $r5 = interfaceinvoke $r4.<org.quartz.core.RemotableQuartzScheduler: java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)>(r1, r2);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $r7 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r6);

        throw $r7;

        catch java.rmi.RemoteException from label1 to label2 with label3;
    }

    public java.util.Date scheduleJob(org.quartz.Trigger) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        org.quartz.Trigger r1;
        org.quartz.core.RemotableQuartzScheduler $r3;
        java.util.Date $r4;
        java.rmi.RemoteException $r5;
        org.quartz.SchedulerException $r6;

        r0 := @this: org.quartz.impl.RemoteScheduler;

        r1 := @parameter0: org.quartz.Trigger;

     label1:
        $r3 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        $r4 = interfaceinvoke $r3.<org.quartz.core.RemotableQuartzScheduler: java.util.Date scheduleJob(org.quartz.Trigger)>(r1);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r5);

        throw $r6;

        catch java.rmi.RemoteException from label1 to label2 with label3;
    }

    public void addJob(org.quartz.JobDetail, boolean) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        org.quartz.JobDetail r1;
        boolean z0;
        org.quartz.core.RemotableQuartzScheduler $r3;
        java.rmi.RemoteException $r4;
        org.quartz.SchedulerException $r5;

        r0 := @this: org.quartz.impl.RemoteScheduler;

        r1 := @parameter0: org.quartz.JobDetail;

        z0 := @parameter1: boolean;

     label1:
        $r3 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        interfaceinvoke $r3.<org.quartz.core.RemotableQuartzScheduler: void addJob(org.quartz.JobDetail,boolean)>(r1, z0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r4);

        throw $r5;

     label4:
        return;

        catch java.rmi.RemoteException from label1 to label2 with label3;
    }

    public void addJob(org.quartz.JobDetail, boolean, boolean) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        org.quartz.JobDetail r1;
        boolean z0, z1;
        org.quartz.core.RemotableQuartzScheduler $r3;
        java.rmi.RemoteException $r4;
        org.quartz.SchedulerException $r5;

        r0 := @this: org.quartz.impl.RemoteScheduler;

        r1 := @parameter0: org.quartz.JobDetail;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

     label1:
        $r3 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        interfaceinvoke $r3.<org.quartz.core.RemotableQuartzScheduler: void addJob(org.quartz.JobDetail,boolean,boolean)>(r1, z0, z1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r4);

        throw $r5;

     label4:
        return;

        catch java.rmi.RemoteException from label1 to label2 with label3;
    }

    public boolean deleteJobs(java.util.List) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        java.util.List r1;
        org.quartz.core.RemotableQuartzScheduler $r3;
        boolean $z0;
        java.rmi.RemoteException $r4;
        org.quartz.SchedulerException $r5;

        r0 := @this: org.quartz.impl.RemoteScheduler;

        r1 := @parameter0: java.util.List;

     label1:
        $r3 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        $z0 = interfaceinvoke $r3.<org.quartz.core.RemotableQuartzScheduler: boolean deleteJobs(java.util.List)>(r1);

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r4);

        throw $r5;

        catch java.rmi.RemoteException from label1 to label2 with label3;
    }

    public void scheduleJobs(java.util.Map, boolean) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        java.util.Map r1;
        boolean z0;
        org.quartz.core.RemotableQuartzScheduler $r3;
        java.rmi.RemoteException $r4;
        org.quartz.SchedulerException $r5;

        r0 := @this: org.quartz.impl.RemoteScheduler;

        r1 := @parameter0: java.util.Map;

        z0 := @parameter1: boolean;

     label1:
        $r3 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        interfaceinvoke $r3.<org.quartz.core.RemotableQuartzScheduler: void scheduleJobs(java.util.Map,boolean)>(r1, z0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r4);

        throw $r5;

     label4:
        return;

        catch java.rmi.RemoteException from label1 to label2 with label3;
    }

    public void scheduleJob(org.quartz.JobDetail, java.util.Set, boolean) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        org.quartz.JobDetail r1;
        java.util.Set r2;
        boolean z0;
        org.quartz.core.RemotableQuartzScheduler $r4;
        java.rmi.RemoteException $r5;
        org.quartz.SchedulerException $r6;

        r0 := @this: org.quartz.impl.RemoteScheduler;

        r1 := @parameter0: org.quartz.JobDetail;

        r2 := @parameter1: java.util.Set;

        z0 := @parameter2: boolean;

     label1:
        $r4 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        interfaceinvoke $r4.<org.quartz.core.RemotableQuartzScheduler: void scheduleJob(org.quartz.JobDetail,java.util.Set,boolean)>(r1, r2, z0);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r5);

        throw $r6;

     label4:
        return;

        catch java.rmi.RemoteException from label1 to label2 with label3;
    }

    public boolean unscheduleJobs(java.util.List) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        java.util.List r1;
        org.quartz.core.RemotableQuartzScheduler $r3;
        boolean $z0;
        java.rmi.RemoteException $r4;
        org.quartz.SchedulerException $r5;

        r0 := @this: org.quartz.impl.RemoteScheduler;

        r1 := @parameter0: java.util.List;

     label1:
        $r3 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        $z0 = interfaceinvoke $r3.<org.quartz.core.RemotableQuartzScheduler: boolean unscheduleJobs(java.util.List)>(r1);

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r4);

        throw $r5;

        catch java.rmi.RemoteException from label1 to label2 with label3;
    }

    public boolean deleteJob(org.quartz.JobKey) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        org.quartz.JobKey r1;
        org.quartz.core.RemotableQuartzScheduler $r3;
        boolean $z0;
        java.rmi.RemoteException $r4;
        org.quartz.SchedulerException $r5;

        r0 := @this: org.quartz.impl.RemoteScheduler;

        r1 := @parameter0: org.quartz.JobKey;

     label1:
        $r3 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        $z0 = interfaceinvoke $r3.<org.quartz.core.RemotableQuartzScheduler: boolean deleteJob(org.quartz.JobKey)>(r1);

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r4);

        throw $r5;

        catch java.rmi.RemoteException from label1 to label2 with label3;
    }

    public boolean unscheduleJob(org.quartz.TriggerKey) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        org.quartz.TriggerKey r1;
        org.quartz.core.RemotableQuartzScheduler $r3;
        boolean $z0;
        java.rmi.RemoteException $r4;
        org.quartz.SchedulerException $r5;

        r0 := @this: org.quartz.impl.RemoteScheduler;

        r1 := @parameter0: org.quartz.TriggerKey;

     label1:
        $r3 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        $z0 = interfaceinvoke $r3.<org.quartz.core.RemotableQuartzScheduler: boolean unscheduleJob(org.quartz.TriggerKey)>(r1);

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r4);

        throw $r5;

        catch java.rmi.RemoteException from label1 to label2 with label3;
    }

    public java.util.Date rescheduleJob(org.quartz.TriggerKey, org.quartz.Trigger) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        org.quartz.TriggerKey r1;
        org.quartz.Trigger r2;
        org.quartz.core.RemotableQuartzScheduler $r4;
        java.util.Date $r5;
        java.rmi.RemoteException $r6;
        org.quartz.SchedulerException $r7;

        r0 := @this: org.quartz.impl.RemoteScheduler;

        r1 := @parameter0: org.quartz.TriggerKey;

        r2 := @parameter1: org.quartz.Trigger;

     label1:
        $r4 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        $r5 = interfaceinvoke $r4.<org.quartz.core.RemotableQuartzScheduler: java.util.Date rescheduleJob(org.quartz.TriggerKey,org.quartz.Trigger)>(r1, r2);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $r7 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r6);

        throw $r7;

        catch java.rmi.RemoteException from label1 to label2 with label3;
    }

    public void triggerJob(org.quartz.JobKey) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        org.quartz.JobKey r1;

        r0 := @this: org.quartz.impl.RemoteScheduler;

        r1 := @parameter0: org.quartz.JobKey;

        virtualinvoke r0.<org.quartz.impl.RemoteScheduler: void triggerJob(org.quartz.JobKey,org.quartz.JobDataMap)>(r1, null);

        return;
    }

    public void triggerJob(org.quartz.JobKey, org.quartz.JobDataMap) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        org.quartz.JobKey r1;
        org.quartz.JobDataMap r2;
        org.quartz.core.RemotableQuartzScheduler $r4;
        java.rmi.RemoteException $r5;
        org.quartz.SchedulerException $r6;

        r0 := @this: org.quartz.impl.RemoteScheduler;

        r1 := @parameter0: org.quartz.JobKey;

        r2 := @parameter1: org.quartz.JobDataMap;

     label1:
        $r4 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        interfaceinvoke $r4.<org.quartz.core.RemotableQuartzScheduler: void triggerJob(org.quartz.JobKey,org.quartz.JobDataMap)>(r1, r2);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r5);

        throw $r6;

     label4:
        return;

        catch java.rmi.RemoteException from label1 to label2 with label3;
    }

    public void pauseTrigger(org.quartz.TriggerKey) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        org.quartz.TriggerKey r1;
        org.quartz.core.RemotableQuartzScheduler $r3;
        java.rmi.RemoteException $r4;
        org.quartz.SchedulerException $r5;

        r0 := @this: org.quartz.impl.RemoteScheduler;

        r1 := @parameter0: org.quartz.TriggerKey;

     label1:
        $r3 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        interfaceinvoke $r3.<org.quartz.core.RemotableQuartzScheduler: void pauseTrigger(org.quartz.TriggerKey)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r4);

        throw $r5;

     label4:
        return;

        catch java.rmi.RemoteException from label1 to label2 with label3;
    }

    public void pauseTriggers(org.quartz.impl.matchers.GroupMatcher) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        org.quartz.impl.matchers.GroupMatcher r1;
        org.quartz.core.RemotableQuartzScheduler $r3;
        java.rmi.RemoteException $r4;
        org.quartz.SchedulerException $r5;

        r0 := @this: org.quartz.impl.RemoteScheduler;

        r1 := @parameter0: org.quartz.impl.matchers.GroupMatcher;

     label1:
        $r3 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        interfaceinvoke $r3.<org.quartz.core.RemotableQuartzScheduler: void pauseTriggers(org.quartz.impl.matchers.GroupMatcher)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r4);

        throw $r5;

     label4:
        return;

        catch java.rmi.RemoteException from label1 to label2 with label3;
    }

    public void pauseJob(org.quartz.JobKey) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        org.quartz.JobKey r1;
        org.quartz.core.RemotableQuartzScheduler $r3;
        java.rmi.RemoteException $r4;
        org.quartz.SchedulerException $r5;

        r0 := @this: org.quartz.impl.RemoteScheduler;

        r1 := @parameter0: org.quartz.JobKey;

     label1:
        $r3 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        interfaceinvoke $r3.<org.quartz.core.RemotableQuartzScheduler: void pauseJob(org.quartz.JobKey)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r4);

        throw $r5;

     label4:
        return;

        catch java.rmi.RemoteException from label1 to label2 with label3;
    }

    public void pauseJobs(org.quartz.impl.matchers.GroupMatcher) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        org.quartz.impl.matchers.GroupMatcher r1;
        org.quartz.core.RemotableQuartzScheduler $r3;
        java.rmi.RemoteException $r4;
        org.quartz.SchedulerException $r5;

        r0 := @this: org.quartz.impl.RemoteScheduler;

        r1 := @parameter0: org.quartz.impl.matchers.GroupMatcher;

     label1:
        $r3 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        interfaceinvoke $r3.<org.quartz.core.RemotableQuartzScheduler: void pauseJobs(org.quartz.impl.matchers.GroupMatcher)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r4);

        throw $r5;

     label4:
        return;

        catch java.rmi.RemoteException from label1 to label2 with label3;
    }

    public void resumeTrigger(org.quartz.TriggerKey) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        org.quartz.TriggerKey r1;
        org.quartz.core.RemotableQuartzScheduler $r3;
        java.rmi.RemoteException $r4;
        org.quartz.SchedulerException $r5;

        r0 := @this: org.quartz.impl.RemoteScheduler;

        r1 := @parameter0: org.quartz.TriggerKey;

     label1:
        $r3 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        interfaceinvoke $r3.<org.quartz.core.RemotableQuartzScheduler: void resumeTrigger(org.quartz.TriggerKey)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r4);

        throw $r5;

     label4:
        return;

        catch java.rmi.RemoteException from label1 to label2 with label3;
    }

    public void resumeTriggers(org.quartz.impl.matchers.GroupMatcher) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        org.quartz.impl.matchers.GroupMatcher r1;
        org.quartz.core.RemotableQuartzScheduler $r3;
        java.rmi.RemoteException $r4;
        org.quartz.SchedulerException $r5;

        r0 := @this: org.quartz.impl.RemoteScheduler;

        r1 := @parameter0: org.quartz.impl.matchers.GroupMatcher;

     label1:
        $r3 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        interfaceinvoke $r3.<org.quartz.core.RemotableQuartzScheduler: void resumeTriggers(org.quartz.impl.matchers.GroupMatcher)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r4);

        throw $r5;

     label4:
        return;

        catch java.rmi.RemoteException from label1 to label2 with label3;
    }

    public void resumeJob(org.quartz.JobKey) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        org.quartz.JobKey r1;
        org.quartz.core.RemotableQuartzScheduler $r3;
        java.rmi.RemoteException $r4;
        org.quartz.SchedulerException $r5;

        r0 := @this: org.quartz.impl.RemoteScheduler;

        r1 := @parameter0: org.quartz.JobKey;

     label1:
        $r3 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        interfaceinvoke $r3.<org.quartz.core.RemotableQuartzScheduler: void resumeJob(org.quartz.JobKey)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r4);

        throw $r5;

     label4:
        return;

        catch java.rmi.RemoteException from label1 to label2 with label3;
    }

    public void resumeJobs(org.quartz.impl.matchers.GroupMatcher) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        org.quartz.impl.matchers.GroupMatcher r1;
        org.quartz.core.RemotableQuartzScheduler $r3;
        java.rmi.RemoteException $r4;
        org.quartz.SchedulerException $r5;

        r0 := @this: org.quartz.impl.RemoteScheduler;

        r1 := @parameter0: org.quartz.impl.matchers.GroupMatcher;

     label1:
        $r3 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        interfaceinvoke $r3.<org.quartz.core.RemotableQuartzScheduler: void resumeJobs(org.quartz.impl.matchers.GroupMatcher)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r4);

        throw $r5;

     label4:
        return;

        catch java.rmi.RemoteException from label1 to label2 with label3;
    }

    public void pauseAll() throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        org.quartz.core.RemotableQuartzScheduler $r2;
        java.rmi.RemoteException $r3;
        org.quartz.SchedulerException $r4;

        r0 := @this: org.quartz.impl.RemoteScheduler;

     label1:
        $r2 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        interfaceinvoke $r2.<org.quartz.core.RemotableQuartzScheduler: void pauseAll()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r3);

        throw $r4;

     label4:
        return;

        catch java.rmi.RemoteException from label1 to label2 with label3;
    }

    public void resumeAll() throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        org.quartz.core.RemotableQuartzScheduler $r2;
        java.rmi.RemoteException $r3;
        org.quartz.SchedulerException $r4;

        r0 := @this: org.quartz.impl.RemoteScheduler;

     label1:
        $r2 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        interfaceinvoke $r2.<org.quartz.core.RemotableQuartzScheduler: void resumeAll()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r3);

        throw $r4;

     label4:
        return;

        catch java.rmi.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getJobGroupNames() throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        org.quartz.core.RemotableQuartzScheduler $r2;
        java.util.List $r3;
        java.rmi.RemoteException $r4;
        org.quartz.SchedulerException $r5;

        r0 := @this: org.quartz.impl.RemoteScheduler;

     label1:
        $r2 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        $r3 = interfaceinvoke $r2.<org.quartz.core.RemotableQuartzScheduler: java.util.List getJobGroupNames()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r4);

        throw $r5;

        catch java.rmi.RemoteException from label1 to label2 with label3;
    }

    public java.util.Set getJobKeys(org.quartz.impl.matchers.GroupMatcher) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        org.quartz.impl.matchers.GroupMatcher r1;
        org.quartz.core.RemotableQuartzScheduler $r3;
        java.util.Set $r4;
        java.rmi.RemoteException $r5;
        org.quartz.SchedulerException $r6;

        r0 := @this: org.quartz.impl.RemoteScheduler;

        r1 := @parameter0: org.quartz.impl.matchers.GroupMatcher;

     label1:
        $r3 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        $r4 = interfaceinvoke $r3.<org.quartz.core.RemotableQuartzScheduler: java.util.Set getJobKeys(org.quartz.impl.matchers.GroupMatcher)>(r1);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r5);

        throw $r6;

        catch java.rmi.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getTriggersOfJob(org.quartz.JobKey) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        org.quartz.JobKey r1;
        org.quartz.core.RemotableQuartzScheduler $r3;
        java.util.List $r4;
        java.rmi.RemoteException $r5;
        org.quartz.SchedulerException $r6;

        r0 := @this: org.quartz.impl.RemoteScheduler;

        r1 := @parameter0: org.quartz.JobKey;

     label1:
        $r3 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        $r4 = interfaceinvoke $r3.<org.quartz.core.RemotableQuartzScheduler: java.util.List getTriggersOfJob(org.quartz.JobKey)>(r1);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r5);

        throw $r6;

        catch java.rmi.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getTriggerGroupNames() throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        org.quartz.core.RemotableQuartzScheduler $r2;
        java.util.List $r3;
        java.rmi.RemoteException $r4;
        org.quartz.SchedulerException $r5;

        r0 := @this: org.quartz.impl.RemoteScheduler;

     label1:
        $r2 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        $r3 = interfaceinvoke $r2.<org.quartz.core.RemotableQuartzScheduler: java.util.List getTriggerGroupNames()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r4);

        throw $r5;

        catch java.rmi.RemoteException from label1 to label2 with label3;
    }

    public java.util.Set getTriggerKeys(org.quartz.impl.matchers.GroupMatcher) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        org.quartz.impl.matchers.GroupMatcher r1;
        org.quartz.core.RemotableQuartzScheduler $r3;
        java.util.Set $r4;
        java.rmi.RemoteException $r5;
        org.quartz.SchedulerException $r6;

        r0 := @this: org.quartz.impl.RemoteScheduler;

        r1 := @parameter0: org.quartz.impl.matchers.GroupMatcher;

     label1:
        $r3 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        $r4 = interfaceinvoke $r3.<org.quartz.core.RemotableQuartzScheduler: java.util.Set getTriggerKeys(org.quartz.impl.matchers.GroupMatcher)>(r1);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r5);

        throw $r6;

        catch java.rmi.RemoteException from label1 to label2 with label3;
    }

    public org.quartz.JobDetail getJobDetail(org.quartz.JobKey) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        org.quartz.JobKey r1;
        org.quartz.core.RemotableQuartzScheduler $r3;
        org.quartz.JobDetail $r4;
        java.rmi.RemoteException $r5;
        org.quartz.SchedulerException $r6;

        r0 := @this: org.quartz.impl.RemoteScheduler;

        r1 := @parameter0: org.quartz.JobKey;

     label1:
        $r3 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        $r4 = interfaceinvoke $r3.<org.quartz.core.RemotableQuartzScheduler: org.quartz.JobDetail getJobDetail(org.quartz.JobKey)>(r1);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r5);

        throw $r6;

        catch java.rmi.RemoteException from label1 to label2 with label3;
    }

    public boolean checkExists(org.quartz.JobKey) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        org.quartz.JobKey r1;
        org.quartz.core.RemotableQuartzScheduler $r3;
        boolean $z0;
        java.rmi.RemoteException $r4;
        org.quartz.SchedulerException $r5;

        r0 := @this: org.quartz.impl.RemoteScheduler;

        r1 := @parameter0: org.quartz.JobKey;

     label1:
        $r3 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        $z0 = interfaceinvoke $r3.<org.quartz.core.RemotableQuartzScheduler: boolean checkExists(org.quartz.JobKey)>(r1);

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r4);

        throw $r5;

        catch java.rmi.RemoteException from label1 to label2 with label3;
    }

    public boolean checkExists(org.quartz.TriggerKey) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        org.quartz.TriggerKey r1;
        org.quartz.core.RemotableQuartzScheduler $r3;
        boolean $z0;
        java.rmi.RemoteException $r4;
        org.quartz.SchedulerException $r5;

        r0 := @this: org.quartz.impl.RemoteScheduler;

        r1 := @parameter0: org.quartz.TriggerKey;

     label1:
        $r3 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        $z0 = interfaceinvoke $r3.<org.quartz.core.RemotableQuartzScheduler: boolean checkExists(org.quartz.TriggerKey)>(r1);

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r4);

        throw $r5;

        catch java.rmi.RemoteException from label1 to label2 with label3;
    }

    public void clear() throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        org.quartz.core.RemotableQuartzScheduler $r2;
        java.rmi.RemoteException $r3;
        org.quartz.SchedulerException $r4;

        r0 := @this: org.quartz.impl.RemoteScheduler;

     label1:
        $r2 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        interfaceinvoke $r2.<org.quartz.core.RemotableQuartzScheduler: void clear()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r3);

        throw $r4;

     label4:
        return;

        catch java.rmi.RemoteException from label1 to label2 with label3;
    }

    public org.quartz.Trigger getTrigger(org.quartz.TriggerKey) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        org.quartz.TriggerKey r1;
        org.quartz.core.RemotableQuartzScheduler $r3;
        org.quartz.Trigger $r4;
        java.rmi.RemoteException $r5;
        org.quartz.SchedulerException $r6;

        r0 := @this: org.quartz.impl.RemoteScheduler;

        r1 := @parameter0: org.quartz.TriggerKey;

     label1:
        $r3 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        $r4 = interfaceinvoke $r3.<org.quartz.core.RemotableQuartzScheduler: org.quartz.Trigger getTrigger(org.quartz.TriggerKey)>(r1);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r5);

        throw $r6;

        catch java.rmi.RemoteException from label1 to label2 with label3;
    }

    public org.quartz.Trigger$TriggerState getTriggerState(org.quartz.TriggerKey) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        org.quartz.TriggerKey r1;
        org.quartz.core.RemotableQuartzScheduler $r3;
        org.quartz.Trigger$TriggerState $r4;
        java.rmi.RemoteException $r5;
        org.quartz.SchedulerException $r6;

        r0 := @this: org.quartz.impl.RemoteScheduler;

        r1 := @parameter0: org.quartz.TriggerKey;

     label1:
        $r3 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        $r4 = interfaceinvoke $r3.<org.quartz.core.RemotableQuartzScheduler: org.quartz.Trigger$TriggerState getTriggerState(org.quartz.TriggerKey)>(r1);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r5);

        throw $r6;

        catch java.rmi.RemoteException from label1 to label2 with label3;
    }

    public void resetTriggerFromErrorState(org.quartz.TriggerKey) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        org.quartz.TriggerKey r1;
        org.quartz.core.RemotableQuartzScheduler $r3;
        java.rmi.RemoteException $r4;
        org.quartz.SchedulerException $r5;

        r0 := @this: org.quartz.impl.RemoteScheduler;

        r1 := @parameter0: org.quartz.TriggerKey;

     label1:
        $r3 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        interfaceinvoke $r3.<org.quartz.core.RemotableQuartzScheduler: void resetTriggerFromErrorState(org.quartz.TriggerKey)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r4);

        throw $r5;

     label4:
        return;

        catch java.rmi.RemoteException from label1 to label2 with label3;
    }

    public void addCalendar(java.lang.String, org.quartz.Calendar, boolean, boolean) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        java.lang.String r1;
        org.quartz.Calendar r2;
        boolean z0, z1;
        org.quartz.core.RemotableQuartzScheduler $r4;
        java.rmi.RemoteException $r5;
        org.quartz.SchedulerException $r6;

        r0 := @this: org.quartz.impl.RemoteScheduler;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.quartz.Calendar;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

     label1:
        $r4 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        interfaceinvoke $r4.<org.quartz.core.RemotableQuartzScheduler: void addCalendar(java.lang.String,org.quartz.Calendar,boolean,boolean)>(r1, r2, z0, z1);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r5);

        throw $r6;

     label4:
        return;

        catch java.rmi.RemoteException from label1 to label2 with label3;
    }

    public boolean deleteCalendar(java.lang.String) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        java.lang.String r1;
        org.quartz.core.RemotableQuartzScheduler $r3;
        boolean $z0;
        java.rmi.RemoteException $r4;
        org.quartz.SchedulerException $r5;

        r0 := @this: org.quartz.impl.RemoteScheduler;

        r1 := @parameter0: java.lang.String;

     label1:
        $r3 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        $z0 = interfaceinvoke $r3.<org.quartz.core.RemotableQuartzScheduler: boolean deleteCalendar(java.lang.String)>(r1);

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r4);

        throw $r5;

        catch java.rmi.RemoteException from label1 to label2 with label3;
    }

    public org.quartz.Calendar getCalendar(java.lang.String) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        java.lang.String r1;
        org.quartz.core.RemotableQuartzScheduler $r3;
        org.quartz.Calendar $r4;
        java.rmi.RemoteException $r5;
        org.quartz.SchedulerException $r6;

        r0 := @this: org.quartz.impl.RemoteScheduler;

        r1 := @parameter0: java.lang.String;

     label1:
        $r3 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        $r4 = interfaceinvoke $r3.<org.quartz.core.RemotableQuartzScheduler: org.quartz.Calendar getCalendar(java.lang.String)>(r1);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r5);

        throw $r6;

        catch java.rmi.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getCalendarNames() throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        org.quartz.core.RemotableQuartzScheduler $r2;
        java.util.List $r3;
        java.rmi.RemoteException $r4;
        org.quartz.SchedulerException $r5;

        r0 := @this: org.quartz.impl.RemoteScheduler;

     label1:
        $r2 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        $r3 = interfaceinvoke $r2.<org.quartz.core.RemotableQuartzScheduler: java.util.List getCalendarNames()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r4);

        throw $r5;

        catch java.rmi.RemoteException from label1 to label2 with label3;
    }

    public java.util.Set getPausedTriggerGroups() throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        org.quartz.core.RemotableQuartzScheduler $r2;
        java.util.Set $r3;
        java.rmi.RemoteException $r4;
        org.quartz.SchedulerException $r5;

        r0 := @this: org.quartz.impl.RemoteScheduler;

     label1:
        $r2 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        $r3 = interfaceinvoke $r2.<org.quartz.core.RemotableQuartzScheduler: java.util.Set getPausedTriggerGroups()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r4);

        throw $r5;

        catch java.rmi.RemoteException from label1 to label2 with label3;
    }

    public org.quartz.ListenerManager getListenerManager() throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        org.quartz.SchedulerException $r1;

        r0 := @this: org.quartz.impl.RemoteScheduler;

        $r1 = new org.quartz.SchedulerException;

        specialinvoke $r1.<org.quartz.SchedulerException: void <init>(java.lang.String)>("Operation not supported for remote schedulers.");

        throw $r1;
    }

    public boolean interrupt(org.quartz.JobKey) throws org.quartz.UnableToInterruptJobException
    {
        org.quartz.impl.RemoteScheduler r0;
        org.quartz.JobKey r1;
        org.quartz.core.RemotableQuartzScheduler $r2;
        boolean $z0;
        org.quartz.SchedulerException $r3, $r7;
        org.quartz.UnableToInterruptJobException $r4, $r6;
        java.rmi.RemoteException $r5;

        r0 := @this: org.quartz.impl.RemoteScheduler;

        r1 := @parameter0: org.quartz.JobKey;

     label1:
        $r2 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        $z0 = interfaceinvoke $r2.<org.quartz.core.RemotableQuartzScheduler: boolean interrupt(org.quartz.JobKey)>(r1);

     label2:
        return $z0;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.quartz.UnableToInterruptJobException;

        $r7 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r5);

        specialinvoke $r6.<org.quartz.UnableToInterruptJobException: void <init>(java.lang.Throwable)>($r7);

        throw $r6;

     label4:
        $r3 := @caughtexception;

        $r4 = new org.quartz.UnableToInterruptJobException;

        specialinvoke $r4.<org.quartz.UnableToInterruptJobException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch java.rmi.RemoteException from label1 to label2 with label3;
        catch org.quartz.SchedulerException from label1 to label2 with label4;
    }

    public boolean interrupt(java.lang.String) throws org.quartz.UnableToInterruptJobException
    {
        org.quartz.impl.RemoteScheduler r0;
        java.lang.String r1;
        org.quartz.core.RemotableQuartzScheduler $r2;
        boolean $z0;
        org.quartz.SchedulerException $r3, $r7;
        org.quartz.UnableToInterruptJobException $r4, $r6;
        java.rmi.RemoteException $r5;

        r0 := @this: org.quartz.impl.RemoteScheduler;

        r1 := @parameter0: java.lang.String;

     label1:
        $r2 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.core.RemotableQuartzScheduler getRemoteScheduler()>();

        $z0 = interfaceinvoke $r2.<org.quartz.core.RemotableQuartzScheduler: boolean interrupt(java.lang.String)>(r1);

     label2:
        return $z0;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.quartz.UnableToInterruptJobException;

        $r7 = virtualinvoke r0.<org.quartz.impl.RemoteScheduler: org.quartz.SchedulerException invalidateHandleCreateException(java.lang.String,java.lang.Exception)>("Error communicating with remote scheduler.", $r5);

        specialinvoke $r6.<org.quartz.UnableToInterruptJobException: void <init>(java.lang.Throwable)>($r7);

        throw $r6;

     label4:
        $r3 := @caughtexception;

        $r4 = new org.quartz.UnableToInterruptJobException;

        specialinvoke $r4.<org.quartz.UnableToInterruptJobException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch java.rmi.RemoteException from label1 to label2 with label3;
        catch org.quartz.SchedulerException from label1 to label2 with label4;
    }

    public void setJobFactory(org.quartz.spi.JobFactory) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteScheduler r0;
        org.quartz.spi.JobFactory r1;
        org.quartz.SchedulerException $r2;

        r0 := @this: org.quartz.impl.RemoteScheduler;

        r1 := @parameter0: org.quartz.spi.JobFactory;

        $r2 = new org.quartz.SchedulerException;

        specialinvoke $r2.<org.quartz.SchedulerException: void <init>(java.lang.String)>("Operation not supported for remote schedulers.");

        throw $r2;
    }
}
