public class org.quartz.simpl.SimpleClassLoadHelper extends java.lang.Object implements org.quartz.spi.ClassLoadHelper
{

    public void <init>()
    {
        org.quartz.simpl.SimpleClassLoadHelper r0;

        r0 := @this: org.quartz.simpl.SimpleClassLoadHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void initialize()
    {
        org.quartz.simpl.SimpleClassLoadHelper r0;

        r0 := @this: org.quartz.simpl.SimpleClassLoadHelper;

        return;
    }

    public java.lang.Class loadClass(java.lang.String) throws java.lang.ClassNotFoundException
    {
        org.quartz.simpl.SimpleClassLoadHelper r0;
        java.lang.String r1;
        java.lang.Class $r2;

        r0 := @this: org.quartz.simpl.SimpleClassLoadHelper;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r1);

        return $r2;
    }

    public java.lang.Class loadClass(java.lang.String, java.lang.Class) throws java.lang.ClassNotFoundException
    {
        org.quartz.simpl.SimpleClassLoadHelper r0;
        java.lang.String r1;
        java.lang.Class r2, $r3;

        r0 := @this: org.quartz.simpl.SimpleClassLoadHelper;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class;

        $r3 = virtualinvoke r0.<org.quartz.simpl.SimpleClassLoadHelper: java.lang.Class loadClass(java.lang.String)>(r1);

        return $r3;
    }

    public java.net.URL getResource(java.lang.String)
    {
        org.quartz.simpl.SimpleClassLoadHelper r0;
        java.lang.String r1;
        java.lang.ClassLoader $r2;
        java.net.URL $r3;

        r0 := @this: org.quartz.simpl.SimpleClassLoadHelper;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.quartz.simpl.SimpleClassLoadHelper: java.lang.ClassLoader getClassLoader()>();

        $r3 = virtualinvoke $r2.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r1);

        return $r3;
    }

    public java.io.InputStream getResourceAsStream(java.lang.String)
    {
        org.quartz.simpl.SimpleClassLoadHelper r0;
        java.lang.String r1;
        java.lang.ClassLoader $r2;
        java.io.InputStream $r3;

        r0 := @this: org.quartz.simpl.SimpleClassLoadHelper;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.quartz.simpl.SimpleClassLoadHelper: java.lang.ClassLoader getClassLoader()>();

        $r3 = virtualinvoke $r2.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>(r1);

        return $r3;
    }

    public java.lang.ClassLoader getClassLoader()
    {
        org.quartz.simpl.SimpleClassLoadHelper r0;
        java.lang.reflect.Method r1;
        java.lang.Class $r2, $r4, $r10;
        java.lang.Class[] $r3;
        java.lang.reflect.AccessibleObject[] $r5;
        java.lang.Object[] $r6;
        java.lang.Object $r7;
        java.lang.ClassLoader $r8, $r11, r12;
        java.lang.Throwable $r9;

        r0 := @this: org.quartz.simpl.SimpleClassLoadHelper;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r12 = virtualinvoke $r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r4 = class "Ljava/lang/ClassLoader;";

        $r3 = newarray (java.lang.Class)[0];

        r1 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("getCallerClassLoader", $r3);

        $r5 = newarray (java.lang.reflect.AccessibleObject)[1];

        $r5[0] = r1;

        staticinvoke <java.lang.reflect.AccessibleObject: void setAccessible(java.lang.reflect.AccessibleObject[],boolean)>($r5, 1);

        $r6 = newarray (java.lang.Object)[0];

        $r7 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r12, $r6);

        $r8 = (java.lang.ClassLoader) $r7;

     label2:
        return $r8;

     label3:
        $r9 := @caughtexception;

        $r10 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        return $r11;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
