public class org.quartz.impl.jdbcjobstore.StdRowLockSemaphore extends org.quartz.impl.jdbcjobstore.DBSemaphore
{
    public static final java.lang.String SELECT_FOR_LOCK;
    public static final java.lang.String INSERT_LOCK;
    private int maxRetry;
    private long retryPeriod;

    public void <init>()
    {
        org.quartz.impl.jdbcjobstore.StdRowLockSemaphore r0;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdRowLockSemaphore;

        specialinvoke r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("QRTZ_", null, "SELECT * FROM {0}LOCKS WHERE SCHED_NAME = {1} AND LOCK_NAME = ? FOR UPDATE", "INSERT INTO {0}LOCKS(SCHED_NAME, LOCK_NAME) VALUES ({1}, ?)");

        r0.<org.quartz.impl.jdbcjobstore.StdRowLockSemaphore: int maxRetry> = 3;

        r0.<org.quartz.impl.jdbcjobstore.StdRowLockSemaphore: long retryPeriod> = 1000L;

        return;
    }

    public void <init>(java.lang.String, java.lang.String, java.lang.String)
    {
        org.quartz.impl.jdbcjobstore.StdRowLockSemaphore r0;
        java.lang.String r1, r2, r3, $r7;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdRowLockSemaphore;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        if r3 == null goto label1;

        $r7 = r3;

        goto label2;

     label1:
        $r7 = "SELECT * FROM {0}LOCKS WHERE SCHED_NAME = {1} AND LOCK_NAME = ? FOR UPDATE";

     label2:
        specialinvoke r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, $r7, "INSERT INTO {0}LOCKS(SCHED_NAME, LOCK_NAME) VALUES ({1}, ?)");

        r0.<org.quartz.impl.jdbcjobstore.StdRowLockSemaphore: int maxRetry> = 3;

        r0.<org.quartz.impl.jdbcjobstore.StdRowLockSemaphore: long retryPeriod> = 1000L;

        return;
    }

    public void setMaxRetry(int)
    {
        org.quartz.impl.jdbcjobstore.StdRowLockSemaphore r0;
        int i0;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdRowLockSemaphore;

        i0 := @parameter0: int;

        r0.<org.quartz.impl.jdbcjobstore.StdRowLockSemaphore: int maxRetry> = i0;

        return;
    }

    public void setRetryPeriod(long)
    {
        org.quartz.impl.jdbcjobstore.StdRowLockSemaphore r0;
        long l0;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdRowLockSemaphore;

        l0 := @parameter0: long;

        r0.<org.quartz.impl.jdbcjobstore.StdRowLockSemaphore: long retryPeriod> = l0;

        return;
    }

    public int getMaxRetry()
    {
        org.quartz.impl.jdbcjobstore.StdRowLockSemaphore r0;
        int $i0;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdRowLockSemaphore;

        $i0 = r0.<org.quartz.impl.jdbcjobstore.StdRowLockSemaphore: int maxRetry>;

        return $i0;
    }

    public long getRetryPeriod()
    {
        org.quartz.impl.jdbcjobstore.StdRowLockSemaphore r0;
        long $l0;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdRowLockSemaphore;

        $l0 = r0.<org.quartz.impl.jdbcjobstore.StdRowLockSemaphore: long retryPeriod>;

        return $l0;
    }

    protected void executeSQL(java.sql.Connection, java.lang.String, java.lang.String, java.lang.String) throws org.quartz.impl.jdbcjobstore.LockException
    {
        org.quartz.impl.jdbcjobstore.StdRowLockSemaphore r0;
        java.sql.Connection r1;
        java.lang.String r2, r3, r4, $r13, $r15, $r20, $r21, $r22, $r23, $r31, $r33, $r39, $r41, $r48, $r51, $r74;
        int i0, i2, i3, $i4;
        long l1;
        org.slf4j.Logger $r6, $r7, $r25, $r35, $r42;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r14, $r17, $r18, $r19, $r26, $r27, $r28, $r29, $r32, $r37, $r38, $r40, $r43, $r44, $r45, $r46, $r49, $r50;
        java.lang.Thread $r12, $r30, $r47, $r57, $r59;
        java.sql.SQLException $r16, $r34, r67;
        org.quartz.impl.jdbcjobstore.LockException $r24, $r36;
        java.lang.Exception $r52, $r53, $r55, $r61, $r62, $r63, $r64;
        java.lang.Throwable $r54;
        java.lang.InterruptedException $r56, $r58;
        java.sql.PreparedStatement r65;
        java.sql.ResultSet r66;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdRowLockSemaphore;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r65 = null;

        r66 = null;

        r67 = null;

        i2 = 0;

        i0 = r0.<org.quartz.impl.jdbcjobstore.StdRowLockSemaphore: int maxRetry>;

        l1 = r0.<org.quartz.impl.jdbcjobstore.StdRowLockSemaphore: long retryPeriod>;

     label01:
        i2 = i2 + 1;

     label02:
        r65 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>(r3);

        interfaceinvoke r65.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, r2);

        $r6 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdRowLockSemaphore: org.slf4j.Logger getLog()>();

        $z0 = interfaceinvoke $r6.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label03;

        $r25 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdRowLockSemaphore: org.slf4j.Logger getLog()>();

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Lock \'");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is being obtained: ");

        $r30 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r31 = virtualinvoke $r30.<java.lang.Thread: java.lang.String getName()>();

        $r32 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r25.<org.slf4j.Logger: void debug(java.lang.String)>($r33);

     label03:
        r66 = interfaceinvoke r65.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

        $z1 = interfaceinvoke r66.<java.sql.ResultSet: boolean next()>();

        if $z1 != 0 goto label13;

        $r7 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdRowLockSemaphore: org.slf4j.Logger getLog()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Inserting new lock row for lock: \'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' being obtained by thread: ");

        $r12 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r13 = virtualinvoke $r12.<java.lang.Thread: java.lang.String getName()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<org.slf4j.Logger: void debug(java.lang.String)>($r15);

        interfaceinvoke r66.<java.sql.ResultSet: void close()>();

        r66 = null;

        interfaceinvoke r65.<java.sql.PreparedStatement: void close()>();

        r65 = null;

        r65 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>(r4);

        interfaceinvoke r65.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, r2);

        i3 = interfaceinvoke r65.<java.sql.PreparedStatement: int executeUpdate()>();

        if i3 == 1 goto label13;

        if i2 >= i0 goto label12;

     label04:
        staticinvoke <java.lang.Thread: void sleep(long)>(l1);

     label05:
        goto label07;

     label06:
        $r56 := @caughtexception;

        $r57 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r57.<java.lang.Thread: void interrupt()>();

     label07:
        goto label08;

     label08:
        if r65 == null goto label49;

     label09:
        interfaceinvoke r65.<java.sql.PreparedStatement: void close()>();

     label10:
        goto label49;

     label11:
        $r52 := @caughtexception;

        goto label49;

     label12:
        $r16 = new java.sql.SQLException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No row exists, and one could not be inserted in table {0}LOCKS for lock named: ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $r21 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdRowLockSemaphore: java.lang.String getTablePrefix()>();

        $r22 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdRowLockSemaphore: java.lang.String getSchedulerNameLiteral()>();

        $r23 = staticinvoke <org.quartz.impl.jdbcjobstore.Util: java.lang.String rtp(java.lang.String,java.lang.String,java.lang.String)>($r20, $r21, $r22);

        specialinvoke $r16.<java.sql.SQLException: void <init>(java.lang.String)>($r23);

        throw $r16;

     label13:
        if r66 == null goto label17;

     label14:
        interfaceinvoke r66.<java.sql.ResultSet: void close()>();

     label15:
        goto label17;

     label16:
        $r53 := @caughtexception;

     label17:
        if r65 == null goto label21;

     label18:
        interfaceinvoke r65.<java.sql.PreparedStatement: void close()>();

     label19:
        goto label21;

     label20:
        $r61 := @caughtexception;

     label21:
        return;

     label22:
        $r34 := @caughtexception;

        if r67 != null goto label23;

        r67 = $r34;

     label23:
        $r35 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdRowLockSemaphore: org.slf4j.Logger getLog()>();

        $z2 = interfaceinvoke $r35.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z2 == 0 goto label26;

        $r42 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdRowLockSemaphore: org.slf4j.Logger getLog()>();

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Lock \'");

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' was not obtained by: ");

        $r47 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r48 = virtualinvoke $r47.<java.lang.Thread: java.lang.String getName()>();

        $r49 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r48);

        if i2 >= i0 goto label24;

        $r74 = " - will try again.";

        goto label25;

     label24:
        $r74 = "";

     label25:
        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r74);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r42.<org.slf4j.Logger: void debug(java.lang.String)>($r51);

     label26:
        if i2 >= i0 goto label38;

     label27:
        staticinvoke <java.lang.Thread: void sleep(long)>(l1);

     label28:
        goto label30;

     label29:
        $r58 := @caughtexception;

        $r59 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r59.<java.lang.Thread: void interrupt()>();

     label30:
        if r66 == null goto label34;

     label31:
        interfaceinvoke r66.<java.sql.ResultSet: void close()>();

     label32:
        goto label34;

     label33:
        $r64 := @caughtexception;

     label34:
        if r65 == null goto label49;

     label35:
        interfaceinvoke r65.<java.sql.PreparedStatement: void close()>();

     label36:
        goto label49;

     label37:
        $r55 := @caughtexception;

        goto label49;

     label38:
        $r36 = new org.quartz.impl.jdbcjobstore.LockException;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failure obtaining db row lock: ");

        $r39 = virtualinvoke $r34.<java.sql.SQLException: java.lang.String getMessage()>();

        $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r36.<org.quartz.impl.jdbcjobstore.LockException: void <init>(java.lang.String,java.lang.Throwable)>($r41, $r34);

        throw $r36;

     label39:
        $r54 := @caughtexception;

     label40:
        if r66 == null goto label44;

     label41:
        interfaceinvoke r66.<java.sql.ResultSet: void close()>();

     label42:
        goto label44;

     label43:
        $r63 := @caughtexception;

     label44:
        if r65 == null goto label48;

     label45:
        interfaceinvoke r65.<java.sql.PreparedStatement: void close()>();

     label46:
        goto label48;

     label47:
        $r62 := @caughtexception;

     label48:
        throw $r54;

     label49:
        $i4 = i0 + 1;

        if i2 < $i4 goto label01;

        $r24 = new org.quartz.impl.jdbcjobstore.LockException;

        specialinvoke $r24.<org.quartz.impl.jdbcjobstore.LockException: void <init>(java.lang.String,java.lang.Throwable)>("Failure obtaining db row lock, reached maximum number of attempts. Initial exception (if any) attached as root cause.", r67);

        throw $r24;

        catch java.lang.InterruptedException from label04 to label05 with label06;
        catch java.lang.Exception from label09 to label10 with label11;
        catch java.lang.Exception from label14 to label15 with label16;
        catch java.lang.Exception from label18 to label19 with label20;
        catch java.sql.SQLException from label02 to label07 with label22;
        catch java.sql.SQLException from label12 to label13 with label22;
        catch java.lang.InterruptedException from label27 to label28 with label29;
        catch java.lang.Exception from label31 to label32 with label33;
        catch java.lang.Exception from label35 to label36 with label37;
        catch java.lang.Throwable from label02 to label07 with label39;
        catch java.lang.Throwable from label12 to label13 with label39;
        catch java.lang.Throwable from label22 to label30 with label39;
        catch java.lang.Exception from label41 to label42 with label43;
        catch java.lang.Exception from label45 to label46 with label47;
        catch java.lang.Throwable from label38 to label40 with label39;
    }

    protected java.lang.String getSelectWithLockSQL()
    {
        org.quartz.impl.jdbcjobstore.StdRowLockSemaphore r0;
        java.lang.String $r1;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdRowLockSemaphore;

        $r1 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdRowLockSemaphore: java.lang.String getSQL()>();

        return $r1;
    }

    public void setSelectWithLockSQL(java.lang.String)
    {
        org.quartz.impl.jdbcjobstore.StdRowLockSemaphore r0;
        java.lang.String r1;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdRowLockSemaphore;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.StdRowLockSemaphore: void setSQL(java.lang.String)>(r1);

        return;
    }

    public static void <clinit>()
    {
        <org.quartz.impl.jdbcjobstore.StdRowLockSemaphore: java.lang.String INSERT_LOCK> = "INSERT INTO {0}LOCKS(SCHED_NAME, LOCK_NAME) VALUES ({1}, ?)";

        <org.quartz.impl.jdbcjobstore.StdRowLockSemaphore: java.lang.String SELECT_FOR_LOCK> = "SELECT * FROM {0}LOCKS WHERE SCHED_NAME = {1} AND LOCK_NAME = ? FOR UPDATE";

        return;
    }
}
