public class org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl extends org.quartz.impl.triggers.AbstractTrigger implements org.quartz.DailyTimeIntervalTrigger, org.quartz.impl.triggers.CoreTrigger
{
    private static final long serialVersionUID;
    private static final int YEAR_TO_GIVEUP_SCHEDULING_AT;
    private java.util.Date startTime;
    private java.util.Date endTime;
    private java.util.Date nextFireTime;
    private java.util.Date previousFireTime;
    private int repeatCount;
    private int repeatInterval;
    private org.quartz.DateBuilder$IntervalUnit repeatIntervalUnit;
    private java.util.Set daysOfWeek;
    private org.quartz.TimeOfDay startTimeOfDay;
    private org.quartz.TimeOfDay endTimeOfDay;
    private int timesTriggered;
    private boolean complete;

    public void <init>()
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl r0;
        org.quartz.DateBuilder$IntervalUnit $r1;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        specialinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: void <init>()>();

        r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date startTime> = null;

        r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date endTime> = null;

        r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date nextFireTime> = null;

        r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date previousFireTime> = null;

        r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: int repeatCount> = -1;

        r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: int repeatInterval> = 1;

        $r1 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit MINUTE>;

        r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: org.quartz.DateBuilder$IntervalUnit repeatIntervalUnit> = $r1;

        r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: int timesTriggered> = 0;

        r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: boolean complete> = 0;

        return;
    }

    public void <init>(java.lang.String, org.quartz.TimeOfDay, org.quartz.TimeOfDay, org.quartz.DateBuilder$IntervalUnit, int)
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl r0;
        java.lang.String r1;
        org.quartz.TimeOfDay r2, r3;
        org.quartz.DateBuilder$IntervalUnit r4;
        int i0;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.quartz.TimeOfDay;

        r3 := @parameter2: org.quartz.TimeOfDay;

        r4 := @parameter3: org.quartz.DateBuilder$IntervalUnit;

        i0 := @parameter4: int;

        specialinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void <init>(java.lang.String,java.lang.String,org.quartz.TimeOfDay,org.quartz.TimeOfDay,org.quartz.DateBuilder$IntervalUnit,int)>(r1, null, r2, r3, r4, i0);

        return;
    }

    public void <init>(java.lang.String, java.lang.String, org.quartz.TimeOfDay, org.quartz.TimeOfDay, org.quartz.DateBuilder$IntervalUnit, int)
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl r0;
        java.lang.String r1, r2;
        org.quartz.TimeOfDay r3, r4;
        org.quartz.DateBuilder$IntervalUnit r5;
        int i0;
        java.util.Date $r6;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.quartz.TimeOfDay;

        r4 := @parameter3: org.quartz.TimeOfDay;

        r5 := @parameter4: org.quartz.DateBuilder$IntervalUnit;

        i0 := @parameter5: int;

        $r6 = new java.util.Date;

        specialinvoke $r6.<java.util.Date: void <init>()>();

        specialinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void <init>(java.lang.String,java.lang.String,java.util.Date,java.util.Date,org.quartz.TimeOfDay,org.quartz.TimeOfDay,org.quartz.DateBuilder$IntervalUnit,int)>(r1, r2, $r6, null, r3, r4, r5, i0);

        return;
    }

    public void <init>(java.lang.String, java.util.Date, java.util.Date, org.quartz.TimeOfDay, org.quartz.TimeOfDay, org.quartz.DateBuilder$IntervalUnit, int)
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl r0;
        java.lang.String r1;
        java.util.Date r2, r3;
        org.quartz.TimeOfDay r4, r5;
        org.quartz.DateBuilder$IntervalUnit r6;
        int i0;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Date;

        r3 := @parameter2: java.util.Date;

        r4 := @parameter3: org.quartz.TimeOfDay;

        r5 := @parameter4: org.quartz.TimeOfDay;

        r6 := @parameter5: org.quartz.DateBuilder$IntervalUnit;

        i0 := @parameter6: int;

        specialinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void <init>(java.lang.String,java.lang.String,java.util.Date,java.util.Date,org.quartz.TimeOfDay,org.quartz.TimeOfDay,org.quartz.DateBuilder$IntervalUnit,int)>(r1, null, r2, r3, r4, r5, r6, i0);

        return;
    }

    public void <init>(java.lang.String, java.lang.String, java.util.Date, java.util.Date, org.quartz.TimeOfDay, org.quartz.TimeOfDay, org.quartz.DateBuilder$IntervalUnit, int)
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl r0;
        java.lang.String r1, r2;
        java.util.Date r3, r4;
        org.quartz.TimeOfDay r5, r6;
        org.quartz.DateBuilder$IntervalUnit r7, $r8;
        int i0;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.Date;

        r4 := @parameter3: java.util.Date;

        r5 := @parameter4: org.quartz.TimeOfDay;

        r6 := @parameter5: org.quartz.TimeOfDay;

        r7 := @parameter6: org.quartz.DateBuilder$IntervalUnit;

        i0 := @parameter7: int;

        specialinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: void <init>(java.lang.String,java.lang.String)>(r1, r2);

        r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date startTime> = null;

        r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date endTime> = null;

        r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date nextFireTime> = null;

        r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date previousFireTime> = null;

        r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: int repeatCount> = -1;

        r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: int repeatInterval> = 1;

        $r8 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit MINUTE>;

        r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: org.quartz.DateBuilder$IntervalUnit repeatIntervalUnit> = $r8;

        r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: int timesTriggered> = 0;

        r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: boolean complete> = 0;

        virtualinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setStartTime(java.util.Date)>(r3);

        virtualinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setEndTime(java.util.Date)>(r4);

        virtualinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)>(r7);

        virtualinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatInterval(int)>(i0);

        virtualinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setStartTimeOfDay(org.quartz.TimeOfDay)>(r5);

        virtualinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setEndTimeOfDay(org.quartz.TimeOfDay)>(r6);

        return;
    }

    public void <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.util.Date, java.util.Date, org.quartz.TimeOfDay, org.quartz.TimeOfDay, org.quartz.DateBuilder$IntervalUnit, int)
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl r0;
        java.lang.String r1, r2, r3, r4;
        java.util.Date r5, r6;
        org.quartz.TimeOfDay r7, r8;
        org.quartz.DateBuilder$IntervalUnit r9, $r10;
        int i0;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.util.Date;

        r6 := @parameter5: java.util.Date;

        r7 := @parameter6: org.quartz.TimeOfDay;

        r8 := @parameter7: org.quartz.TimeOfDay;

        r9 := @parameter8: org.quartz.DateBuilder$IntervalUnit;

        i0 := @parameter9: int;

        specialinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3, r4);

        r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date startTime> = null;

        r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date endTime> = null;

        r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date nextFireTime> = null;

        r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date previousFireTime> = null;

        r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: int repeatCount> = -1;

        r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: int repeatInterval> = 1;

        $r10 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit MINUTE>;

        r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: org.quartz.DateBuilder$IntervalUnit repeatIntervalUnit> = $r10;

        r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: int timesTriggered> = 0;

        r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: boolean complete> = 0;

        virtualinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setStartTime(java.util.Date)>(r5);

        virtualinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setEndTime(java.util.Date)>(r6);

        virtualinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)>(r9);

        virtualinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatInterval(int)>(i0);

        virtualinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setStartTimeOfDay(org.quartz.TimeOfDay)>(r7);

        virtualinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setEndTimeOfDay(org.quartz.TimeOfDay)>(r8);

        return;
    }

    public java.util.Date getStartTime()
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl r0;
        java.util.Date $r1, $r2, $r3;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        $r1 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date startTime>;

        if $r1 != null goto label1;

        $r3 = new java.util.Date;

        specialinvoke $r3.<java.util.Date: void <init>()>();

        r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date startTime> = $r3;

     label1:
        $r2 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date startTime>;

        return $r2;
    }

    public void setStartTime(java.util.Date)
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl r0;
        java.util.Date r1, r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3, $r4;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        r1 := @parameter0: java.util.Date;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Start time cannot be null");

        throw $r4;

     label1:
        r2 = virtualinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date getEndTime()>();

        if r2 == null goto label2;

        $z0 = virtualinvoke r2.<java.util.Date: boolean before(java.util.Date)>(r1);

        if $z0 == 0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("End time cannot be before start time");

        throw $r3;

     label2:
        r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date startTime> = r1;

        return;
    }

    public java.util.Date getEndTime()
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl r0;
        java.util.Date $r1;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        $r1 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date endTime>;

        return $r1;
    }

    public void setEndTime(java.util.Date)
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl r0;
        java.util.Date r1, r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        r1 := @parameter0: java.util.Date;

        r2 = virtualinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date getStartTime()>();

        if r2 == null goto label1;

        if r1 == null goto label1;

        $z0 = virtualinvoke r2.<java.util.Date: boolean after(java.util.Date)>(r1);

        if $z0 == 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("End time cannot be before start time");

        throw $r3;

     label1:
        r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date endTime> = r1;

        return;
    }

    public org.quartz.DateBuilder$IntervalUnit getRepeatIntervalUnit()
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl r0;
        org.quartz.DateBuilder$IntervalUnit $r1;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        $r1 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: org.quartz.DateBuilder$IntervalUnit repeatIntervalUnit>;

        return $r1;
    }

    public void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl r0;
        org.quartz.DateBuilder$IntervalUnit r1, $r2, $r4, $r5, $r6, $r7, $r8, $r9;
        java.lang.IllegalArgumentException $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        r1 := @parameter0: org.quartz.DateBuilder$IntervalUnit;

        $r2 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: org.quartz.DateBuilder$IntervalUnit repeatIntervalUnit>;

        if $r2 == null goto label1;

        $r5 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: org.quartz.DateBuilder$IntervalUnit repeatIntervalUnit>;

        $r4 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit SECOND>;

        $z0 = virtualinvoke $r5.<org.quartz.DateBuilder$IntervalUnit: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label2;

        $r7 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: org.quartz.DateBuilder$IntervalUnit repeatIntervalUnit>;

        $r6 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit MINUTE>;

        $z1 = virtualinvoke $r7.<org.quartz.DateBuilder$IntervalUnit: boolean equals(java.lang.Object)>($r6);

        if $z1 != 0 goto label2;

        $r9 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: org.quartz.DateBuilder$IntervalUnit repeatIntervalUnit>;

        $r8 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit HOUR>;

        $z2 = virtualinvoke $r9.<org.quartz.DateBuilder$IntervalUnit: boolean equals(java.lang.Object)>($r8);

        if $z2 != 0 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid repeat IntervalUnit (must be SECOND, MINUTE or HOUR).");

        throw $r3;

     label2:
        r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: org.quartz.DateBuilder$IntervalUnit repeatIntervalUnit> = r1;

        return;
    }

    public int getRepeatInterval()
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl r0;
        int $i0;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        $i0 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: int repeatInterval>;

        return $i0;
    }

    public void setRepeatInterval(int)
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl r0;
        int i0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Repeat interval must be >= 1");

        throw $r1;

     label1:
        r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: int repeatInterval> = i0;

        return;
    }

    public int getTimesTriggered()
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl r0;
        int $i0;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        $i0 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: int timesTriggered>;

        return $i0;
    }

    public void setTimesTriggered(int)
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl r0;
        int i0;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        i0 := @parameter0: int;

        r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: int timesTriggered> = i0;

        return;
    }

    protected boolean validateMisfireInstruction(int)
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl r0;
        int i0;
        boolean $z0;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        i0 := @parameter0: int;

        if i0 < -1 goto label1;

        if i0 > 2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void updateAfterMisfire(org.quartz.Calendar)
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl r0;
        org.quartz.Calendar r1;
        java.util.Date $r2, $r3, r4;
        long $l0;
        boolean $z0;
        int i1;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        r1 := @parameter0: org.quartz.Calendar;

        i1 = virtualinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: int getMisfireInstruction()>();

        if i1 != -1 goto label1;

        return;

     label1:
        if i1 != 0 goto label2;

        i1 = 1;

     label2:
        if i1 != 2 goto label5;

        $r3 = new java.util.Date;

        specialinvoke $r3.<java.util.Date: void <init>()>();

        r4 = virtualinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>($r3);

     label3:
        if r4 == null goto label4;

        if r1 == null goto label4;

        $l0 = virtualinvoke r4.<java.util.Date: long getTime()>();

        $z0 = interfaceinvoke r1.<org.quartz.Calendar: boolean isTimeIncluded(long)>($l0);

        if $z0 != 0 goto label4;

        r4 = virtualinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>(r4);

        goto label3;

     label4:
        virtualinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setNextFireTime(java.util.Date)>(r4);

        goto label6;

     label5:
        if i1 != 1 goto label6;

        $r2 = new java.util.Date;

        specialinvoke $r2.<java.util.Date: void <init>()>();

        virtualinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setNextFireTime(java.util.Date)>($r2);

     label6:
        return;
    }

    public void triggered(org.quartz.Calendar)
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl r0;
        org.quartz.Calendar r1;
        java.util.Calendar r2;
        int $i0, $i1, $i3, $i4;
        java.util.Date $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        long $l2;
        boolean $z0;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        r1 := @parameter0: org.quartz.Calendar;

        $i0 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: int timesTriggered>;

        $i1 = $i0 + 1;

        r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: int timesTriggered> = $i1;

        $r3 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date nextFireTime>;

        r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date previousFireTime> = $r3;

        $r4 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date nextFireTime>;

        $r5 = virtualinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>($r4);

        r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date nextFireTime> = $r5;

     label1:
        $r6 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date nextFireTime>;

        if $r6 == null goto label4;

        if r1 == null goto label4;

        $r7 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date nextFireTime>;

        $l2 = virtualinvoke $r7.<java.util.Date: long getTime()>();

        $z0 = interfaceinvoke r1.<org.quartz.Calendar: boolean isTimeIncluded(long)>($l2);

        if $z0 != 0 goto label4;

        $r8 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date nextFireTime>;

        $r9 = virtualinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>($r8);

        r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date nextFireTime> = $r9;

        $r10 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date nextFireTime>;

        if $r10 != null goto label2;

        goto label4;

     label2:
        r2 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $r11 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date nextFireTime>;

        virtualinvoke r2.<java.util.Calendar: void setTime(java.util.Date)>($r11);

        $i3 = virtualinvoke r2.<java.util.Calendar: int get(int)>(1);

        $i4 = <org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: int YEAR_TO_GIVEUP_SCHEDULING_AT>;

        if $i3 <= $i4 goto label3;

        r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date nextFireTime> = null;

     label3:
        goto label1;

     label4:
        $r12 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date nextFireTime>;

        if $r12 != null goto label5;

        r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: boolean complete> = 1;

     label5:
        return;
    }

    public void updateWithNewCalendar(org.quartz.Calendar, long)
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl r0;
        org.quartz.Calendar r1;
        long l0, l1, $l2, $l5, $l6;
        java.util.Calendar r3;
        java.util.Date $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18;
        boolean $z0, $z1;
        int $i3, $i4;
        byte $b7;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        r1 := @parameter0: org.quartz.Calendar;

        l0 := @parameter1: long;

        $r4 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date previousFireTime>;

        $r5 = virtualinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>($r4);

        r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date nextFireTime> = $r5;

        $r6 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date nextFireTime>;

        if $r6 == null goto label1;

        if r1 != null goto label2;

     label1:
        return;

     label2:
        $r7 = new java.util.Date;

        specialinvoke $r7.<java.util.Date: void <init>()>();

     label3:
        $r8 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date nextFireTime>;

        if $r8 == null goto label7;

        $r9 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date nextFireTime>;

        $l2 = virtualinvoke $r9.<java.util.Date: long getTime()>();

        $z0 = interfaceinvoke r1.<org.quartz.Calendar: boolean isTimeIncluded(long)>($l2);

        if $z0 != 0 goto label7;

        $r10 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date nextFireTime>;

        $r11 = virtualinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>($r10);

        r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date nextFireTime> = $r11;

        $r12 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date nextFireTime>;

        if $r12 != null goto label4;

        goto label7;

     label4:
        r3 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $r13 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date nextFireTime>;

        virtualinvoke r3.<java.util.Calendar: void setTime(java.util.Date)>($r13);

        $i3 = virtualinvoke r3.<java.util.Calendar: int get(int)>(1);

        $i4 = <org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: int YEAR_TO_GIVEUP_SCHEDULING_AT>;

        if $i3 <= $i4 goto label5;

        r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date nextFireTime> = null;

     label5:
        $r14 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date nextFireTime>;

        if $r14 == null goto label6;

        $r15 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date nextFireTime>;

        $z1 = virtualinvoke $r15.<java.util.Date: boolean before(java.util.Date)>($r7);

        if $z1 == 0 goto label6;

        $l5 = virtualinvoke $r7.<java.util.Date: long getTime()>();

        $r16 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date nextFireTime>;

        $l6 = virtualinvoke $r16.<java.util.Date: long getTime()>();

        l1 = $l5 - $l6;

        $b7 = l1 cmp l0;

        if $b7 < 0 goto label6;

        $r17 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date nextFireTime>;

        $r18 = virtualinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>($r17);

        r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date nextFireTime> = $r18;

     label6:
        goto label3;

     label7:
        return;
    }

    public java.util.Date computeFirstFireTime(org.quartz.Calendar)
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl r0;
        org.quartz.Calendar r1;
        java.util.Calendar r2;
        java.util.Date $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        long $l0, $l1, $l2;
        boolean $z0;
        int $i3, $i4;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        r1 := @parameter0: org.quartz.Calendar;

        $r3 = new java.util.Date;

        $r4 = virtualinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date getStartTime()>();

        $l0 = virtualinvoke $r4.<java.util.Date: long getTime()>();

        $l1 = $l0 - 1000L;

        specialinvoke $r3.<java.util.Date: void <init>(long)>($l1);

        $r5 = virtualinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>($r3);

        r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date nextFireTime> = $r5;

     label1:
        $r6 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date nextFireTime>;

        if $r6 == null goto label4;

        if r1 == null goto label4;

        $r7 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date nextFireTime>;

        $l2 = virtualinvoke $r7.<java.util.Date: long getTime()>();

        $z0 = interfaceinvoke r1.<org.quartz.Calendar: boolean isTimeIncluded(long)>($l2);

        if $z0 != 0 goto label4;

        $r8 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date nextFireTime>;

        $r9 = virtualinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>($r8);

        r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date nextFireTime> = $r9;

        $r10 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date nextFireTime>;

        if $r10 != null goto label2;

        goto label4;

     label2:
        r2 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $r11 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date nextFireTime>;

        virtualinvoke r2.<java.util.Calendar: void setTime(java.util.Date)>($r11);

        $i3 = virtualinvoke r2.<java.util.Calendar: int get(int)>(1);

        $i4 = <org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: int YEAR_TO_GIVEUP_SCHEDULING_AT>;

        if $i3 <= $i4 goto label3;

        return null;

     label3:
        goto label1;

     label4:
        $r12 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date nextFireTime>;

        return $r12;
    }

    private java.util.Calendar createCalendarTime(java.util.Date)
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl r0;
        java.util.Date r1;
        java.util.Calendar r2;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        r1 := @parameter0: java.util.Date;

        r2 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r2.<java.util.Calendar: void setTime(java.util.Date)>(r1);

        return r2;
    }

    public java.util.Date getNextFireTime()
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl r0;
        java.util.Date $r1;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        $r1 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date nextFireTime>;

        return $r1;
    }

    public java.util.Date getPreviousFireTime()
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl r0;
        java.util.Date $r1;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        $r1 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date previousFireTime>;

        return $r1;
    }

    public void setNextFireTime(java.util.Date)
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl r0;
        java.util.Date r1;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        r1 := @parameter0: java.util.Date;

        r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date nextFireTime> = r1;

        return;
    }

    public void setPreviousFireTime(java.util.Date)
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl r0;
        java.util.Date r1;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        r1 := @parameter0: java.util.Date;

        r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date previousFireTime> = r1;

        return;
    }

    public java.util.Date getFireTimeAfter(java.util.Date)
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl r0;
        java.util.Date r1, $r4, $r5, $r16, $r17, r18, r19, r20, r21, r22;
        long l0, l1, l2, l3, $l5, $l6, $l7, $l9, $l10, $l11, $l12, $l13, $l18, $l19, $l20, $l25, $l30, $l31, $l33, $l34, l37, l38, l39;
        java.util.Calendar r2;
        org.quartz.DateBuilder$IntervalUnit r3, $r10, $r11, $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, z7, $z8, $z9;
        int $i4, $i8, $i15, $i16, $i17, $i22, $i23, $i24, $i27, $i28, $i29, $i35, $i36;
        org.quartz.TimeOfDay $r6, $r7, $r8, $r9, $r13, $r14, $r15;
        byte $b14, $b21, $b26, $b32;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        r18 := @parameter0: java.util.Date;

        $z0 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: boolean complete>;

        if $z0 == 0 goto label01;

        return null;

     label01:
        $i4 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: int repeatCount>;

        if $i4 == -1 goto label02;

        $i36 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: int timesTriggered>;

        $i35 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: int repeatCount>;

        if $i36 <= $i35 goto label02;

        return null;

     label02:
        if r18 != null goto label03;

        $r17 = new java.util.Date;

        $l33 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l34 = $l33 + 1000L;

        specialinvoke $r17.<java.util.Date: void <init>(long)>($l34);

        r19 = $r17;

        goto label04;

     label03:
        $r4 = new java.util.Date;

        $l5 = virtualinvoke r18.<java.util.Date: long getTime()>();

        $l6 = $l5 + 1000L;

        specialinvoke $r4.<java.util.Date: void <init>(long)>($l6);

        r19 = $r4;

     label04:
        $r5 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date startTime>;

        $z1 = virtualinvoke r19.<java.util.Date: boolean before(java.util.Date)>($r5);

        if $z1 == 0 goto label05;

        r19 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date startTime>;

     label05:
        z7 = 0;

        $r6 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: org.quartz.TimeOfDay endTimeOfDay>;

        if $r6 == null goto label08;

        $l30 = virtualinvoke r19.<java.util.Date: long getTime()>();

        $r15 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: org.quartz.TimeOfDay endTimeOfDay>;

        $r16 = virtualinvoke $r15.<org.quartz.TimeOfDay: java.util.Date getTimeOfDayForDate(java.util.Date)>(r19);

        $l31 = virtualinvoke $r16.<java.util.Date: long getTime()>();

        $b32 = $l30 cmp $l31;

        if $b32 <= 0 goto label06;

        $z8 = 1;

        goto label07;

     label06:
        $z8 = 0;

     label07:
        z7 = $z8;

     label08:
        r20 = specialinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date advanceToNextDayOfWeekIfNecessary(java.util.Date,boolean)>(r19, z7);

        if r20 != null goto label09;

        return null;

     label09:
        $r7 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: org.quartz.TimeOfDay endTimeOfDay>;

        if $r7 != null goto label10;

        $r14 = new org.quartz.TimeOfDay;

        specialinvoke $r14.<org.quartz.TimeOfDay: void <init>(int,int,int)>(23, 59, 59);

        r21 = virtualinvoke $r14.<org.quartz.TimeOfDay: java.util.Date getTimeOfDayForDate(java.util.Date)>(r20);

        goto label11;

     label10:
        $r8 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: org.quartz.TimeOfDay endTimeOfDay>;

        r21 = virtualinvoke $r8.<org.quartz.TimeOfDay: java.util.Date getTimeOfDayForDate(java.util.Date)>(r20);

     label11:
        $r9 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: org.quartz.TimeOfDay startTimeOfDay>;

        r1 = virtualinvoke $r9.<org.quartz.TimeOfDay: java.util.Date getTimeOfDayForDate(java.util.Date)>(r20);

        $z2 = virtualinvoke r20.<java.util.Date: boolean before(java.util.Date)>(r1);

        if $z2 == 0 goto label12;

        return r1;

     label12:
        l0 = virtualinvoke r20.<java.util.Date: long getTime()>();

        l1 = virtualinvoke r1.<java.util.Date: long getTime()>();

        $l7 = l0 - l1;

        l2 = $l7 / 1000L;

        $i8 = virtualinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: int getRepeatInterval()>();

        l3 = (long) $i8;

        r2 = specialinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Calendar createCalendarTime(java.util.Date)>(r1);

        r3 = virtualinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: org.quartz.DateBuilder$IntervalUnit getRepeatIntervalUnit()>();

        $r10 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit SECOND>;

        $z3 = virtualinvoke r3.<org.quartz.DateBuilder$IntervalUnit: boolean equals(java.lang.Object)>($r10);

        if $z3 == 0 goto label14;

        l37 = l2 / l3;

        $l25 = l2 % l3;

        $b26 = $l25 cmp 0L;

        if $b26 == 0 goto label13;

        l37 = l37 + 1L;

     label13:
        $i27 = virtualinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: int getRepeatInterval()>();

        $i28 = (int) l37;

        $i29 = $i27 * $i28;

        virtualinvoke r2.<java.util.Calendar: void add(int,int)>(13, $i29);

        r20 = virtualinvoke r2.<java.util.Calendar: java.util.Date getTime()>();

        goto label18;

     label14:
        $r11 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit MINUTE>;

        $z4 = virtualinvoke r3.<org.quartz.DateBuilder$IntervalUnit: boolean equals(java.lang.Object)>($r11);

        if $z4 == 0 goto label16;

        $l18 = l3 * 60L;

        l38 = l2 / $l18;

        $l19 = l3 * 60L;

        $l20 = l2 % $l19;

        $b21 = $l20 cmp 0L;

        if $b21 == 0 goto label15;

        l38 = l38 + 1L;

     label15:
        $i22 = virtualinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: int getRepeatInterval()>();

        $i23 = (int) l38;

        $i24 = $i22 * $i23;

        virtualinvoke r2.<java.util.Calendar: void add(int,int)>(12, $i24);

        r20 = virtualinvoke r2.<java.util.Calendar: java.util.Date getTime()>();

        goto label18;

     label16:
        $r12 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit HOUR>;

        $z5 = virtualinvoke r3.<org.quartz.DateBuilder$IntervalUnit: boolean equals(java.lang.Object)>($r12);

        if $z5 == 0 goto label18;

        $l9 = l3 * 60L;

        $l10 = $l9 * 60L;

        l39 = l2 / $l10;

        $l11 = l3 * 60L;

        $l12 = $l11 * 60L;

        $l13 = l2 % $l12;

        $b14 = $l13 cmp 0L;

        if $b14 == 0 goto label17;

        l39 = l39 + 1L;

     label17:
        $i15 = virtualinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: int getRepeatInterval()>();

        $i16 = (int) l39;

        $i17 = $i15 * $i16;

        virtualinvoke r2.<java.util.Calendar: void add(int,int)>(11, $i17);

        r20 = virtualinvoke r2.<java.util.Calendar: java.util.Date getTime()>();

     label18:
        $z9 = virtualinvoke r20.<java.util.Date: boolean after(java.util.Date)>(r21);

        if $z9 == 0 goto label19;

        $z6 = specialinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: boolean isSameDay(java.util.Date,java.util.Date)>(r20, r21);

        r22 = specialinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date advanceToNextDayOfWeekIfNecessary(java.util.Date,boolean)>(r20, $z6);

        $r13 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: org.quartz.TimeOfDay startTimeOfDay>;

        r20 = virtualinvoke $r13.<org.quartz.TimeOfDay: java.util.Date getTimeOfDayForDate(java.util.Date)>(r22);

     label19:
        return r20;
    }

    private boolean isSameDay(java.util.Date, java.util.Date)
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl r0;
        java.util.Date r1, r2;
        java.util.Calendar r3, r4;
        int $i0, $i1, $i2, $i3;
        boolean $z0;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        r1 := @parameter0: java.util.Date;

        r2 := @parameter1: java.util.Date;

        r3 = specialinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Calendar createCalendarTime(java.util.Date)>(r1);

        r4 = specialinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Calendar createCalendarTime(java.util.Date)>(r2);

        $i0 = virtualinvoke r3.<java.util.Calendar: int get(int)>(1);

        $i1 = virtualinvoke r4.<java.util.Calendar: int get(int)>(1);

        if $i0 != $i1 goto label1;

        $i2 = virtualinvoke r3.<java.util.Calendar: int get(int)>(6);

        $i3 = virtualinvoke r4.<java.util.Calendar: int get(int)>(6);

        if $i2 != $i3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private java.util.Date advanceToNextDayOfWeekIfNecessary(java.util.Date, boolean)
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl r0;
        boolean z0, $z1, $z2;
        org.quartz.TimeOfDay r1;
        java.util.Date r2, r7, r8;
        java.util.Calendar r3;
        java.util.Set r4;
        long $l0, $l1;
        byte $b2;
        java.lang.Integer $r5, $r6;
        int i3, i4, i5;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        r7 := @parameter0: java.util.Date;

        z0 := @parameter1: boolean;

        r1 = virtualinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: org.quartz.TimeOfDay getStartTimeOfDay()>();

        r2 = virtualinvoke r1.<org.quartz.TimeOfDay: java.util.Date getTimeOfDayForDate(java.util.Date)>(r7);

        r3 = specialinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Calendar createCalendarTime(java.util.Date)>(r2);

        i3 = virtualinvoke r3.<java.util.Calendar: int get(int)>(7);

        r4 = virtualinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Set getDaysOfWeek()>();

        if z0 != 0 goto label1;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $z2 = interfaceinvoke r4.<java.util.Set: boolean contains(java.lang.Object)>($r6);

        if $z2 != 0 goto label4;

     label1:
        i4 = 1;

     label2:
        if i4 > 7 goto label4;

        virtualinvoke r3.<java.util.Calendar: void add(int,int)>(5, 1);

        i5 = virtualinvoke r3.<java.util.Calendar: int get(int)>(7);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i5);

        $z1 = interfaceinvoke r4.<java.util.Set: boolean contains(java.lang.Object)>($r5);

        if $z1 == 0 goto label3;

        r7 = virtualinvoke r3.<java.util.Calendar: java.util.Date getTime()>();

        goto label4;

     label3:
        i4 = i4 + 1;

        goto label2;

     label4:
        r8 = virtualinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date getEndTime()>();

        if r8 == null goto label5;

        $l0 = virtualinvoke r7.<java.util.Date: long getTime()>();

        $l1 = virtualinvoke r8.<java.util.Date: long getTime()>();

        $b2 = $l0 cmp $l1;

        if $b2 <= 0 goto label5;

        return null;

     label5:
        return r7;
    }

    public java.util.Date getFinalFireTime()
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl r0;
        java.util.Date r1, $r2, r5;
        boolean $z0;
        org.quartz.TimeOfDay $r3, $r4;
        long $l0, $l1;
        byte $b2;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        $z0 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: boolean complete>;

        if $z0 != 0 goto label1;

        $r2 = virtualinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date getEndTime()>();

        if $r2 != null goto label2;

     label1:
        return null;

     label2:
        r5 = virtualinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date getEndTime()>();

        $r3 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: org.quartz.TimeOfDay endTimeOfDay>;

        if $r3 == null goto label3;

        $r4 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: org.quartz.TimeOfDay endTimeOfDay>;

        r1 = virtualinvoke $r4.<org.quartz.TimeOfDay: java.util.Date getTimeOfDayForDate(java.util.Date)>(r5);

        $l0 = virtualinvoke r5.<java.util.Date: long getTime()>();

        $l1 = virtualinvoke r1.<java.util.Date: long getTime()>();

        $b2 = $l0 cmp $l1;

        if $b2 >= 0 goto label3;

        r5 = r1;

     label3:
        return r5;
    }

    public boolean mayFireAgain()
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl r0;
        java.util.Date $r1;
        boolean $z0;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        $r1 = virtualinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date getNextFireTime()>();

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void validate() throws org.quartz.SchedulerException
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl r0;
        org.quartz.DateBuilder$IntervalUnit $r1, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r46, $r47, $r48, $r49;
        org.quartz.SchedulerException $r2, $r16, $r25, $r31, $r38, $r45;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.quartz.TimeOfDay $r11, $r12, $r13, $r14, $r15, $r19, $r22;
        java.lang.StringBuilder $r17, $r18, $r20, $r21, $r23, $r26, $r27, $r28, $r29, $r32, $r33, $r34, $r35, $r36, $r39, $r40, $r41, $r42, $r43;
        java.lang.String $r24, $r30, $r37, $r44;
        int $i1, $i2, $i3, $i8, $i9, $i12, $i13;
        long $l4, $l5, $l7, $l10;
        byte $b6, $b11;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        specialinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: void validate()>();

        $r1 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: org.quartz.DateBuilder$IntervalUnit repeatIntervalUnit>;

        if $r1 == null goto label1;

        $r4 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: org.quartz.DateBuilder$IntervalUnit repeatIntervalUnit>;

        $r3 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit SECOND>;

        $z0 = virtualinvoke $r4.<org.quartz.DateBuilder$IntervalUnit: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label2;

        $r47 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: org.quartz.DateBuilder$IntervalUnit repeatIntervalUnit>;

        $r46 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit MINUTE>;

        $z3 = virtualinvoke $r47.<org.quartz.DateBuilder$IntervalUnit: boolean equals(java.lang.Object)>($r46);

        if $z3 != 0 goto label2;

        $r49 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: org.quartz.DateBuilder$IntervalUnit repeatIntervalUnit>;

        $r48 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit HOUR>;

        $z4 = virtualinvoke $r49.<org.quartz.DateBuilder$IntervalUnit: boolean equals(java.lang.Object)>($r48);

        if $z4 != 0 goto label2;

     label1:
        $r2 = new org.quartz.SchedulerException;

        specialinvoke $r2.<org.quartz.SchedulerException: void <init>(java.lang.String)>("Invalid repeat IntervalUnit (must be SECOND, MINUTE or HOUR).");

        throw $r2;

     label2:
        $i13 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: int repeatInterval>;

        if $i13 >= 1 goto label3;

        $r45 = new org.quartz.SchedulerException;

        specialinvoke $r45.<org.quartz.SchedulerException: void <init>(java.lang.String)>("Repeat Interval cannot be zero.");

        throw $r45;

     label3:
        $r6 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: org.quartz.DateBuilder$IntervalUnit repeatIntervalUnit>;

        $r5 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit SECOND>;

        if $r6 != $r5 goto label4;

        $i9 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: int repeatInterval>;

        $l10 = (long) $i9;

        $b11 = $l10 cmp 86400L;

        if $b11 <= 0 goto label4;

        $r38 = new org.quartz.SchedulerException;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("repeatInterval can not exceed 24 hours (");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(86400L);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" seconds). Given ");

        $i12 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: int repeatInterval>;

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r38.<org.quartz.SchedulerException: void <init>(java.lang.String)>($r44);

        throw $r38;

     label4:
        $r8 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: org.quartz.DateBuilder$IntervalUnit repeatIntervalUnit>;

        $r7 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit MINUTE>;

        if $r8 != $r7 goto label5;

        $i3 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: int repeatInterval>;

        $l5 = (long) $i3;

        $l4 = 86400L / 60L;

        $b6 = $l5 cmp $l4;

        if $b6 <= 0 goto label5;

        $r31 = new org.quartz.SchedulerException;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("repeatInterval can not exceed 24 hours (");

        $l7 = 86400L / 60L;

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l7);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" minutes). Given ");

        $i8 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: int repeatInterval>;

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r31.<org.quartz.SchedulerException: void <init>(java.lang.String)>($r37);

        throw $r31;

     label5:
        $r10 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: org.quartz.DateBuilder$IntervalUnit repeatIntervalUnit>;

        $r9 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit HOUR>;

        if $r10 != $r9 goto label6;

        $i1 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: int repeatInterval>;

        if $i1 <= 24 goto label6;

        $r25 = new org.quartz.SchedulerException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("repeatInterval can not exceed 24 hours. Given ");

        $i2 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: int repeatInterval>;

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" hours.");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<org.quartz.SchedulerException: void <init>(java.lang.String)>($r30);

        throw $r25;

     label6:
        $r11 = virtualinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: org.quartz.TimeOfDay getEndTimeOfDay()>();

        if $r11 == null goto label7;

        $r12 = virtualinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: org.quartz.TimeOfDay getStartTimeOfDay()>();

        $r13 = virtualinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: org.quartz.TimeOfDay getEndTimeOfDay()>();

        $z1 = virtualinvoke $r12.<org.quartz.TimeOfDay: boolean equals(java.lang.Object)>($r13);

        if $z1 != 0 goto label7;

        $r14 = virtualinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: org.quartz.TimeOfDay getStartTimeOfDay()>();

        $r15 = virtualinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: org.quartz.TimeOfDay getEndTimeOfDay()>();

        $z2 = virtualinvoke $r14.<org.quartz.TimeOfDay: boolean before(org.quartz.TimeOfDay)>($r15);

        if $z2 != 0 goto label7;

        $r16 = new org.quartz.SchedulerException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("StartTimeOfDay ");

        $r19 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: org.quartz.TimeOfDay startTimeOfDay>;

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should not come after endTimeOfDay ");

        $r22 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: org.quartz.TimeOfDay endTimeOfDay>;

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<org.quartz.SchedulerException: void <init>(java.lang.String)>($r24);

        throw $r16;

     label7:
        return;
    }

    public java.util.Set getDaysOfWeek()
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl r0;
        java.util.Set $r1, $r2, $r3;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        $r1 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Set daysOfWeek>;

        if $r1 != null goto label1;

        $r3 = <org.quartz.DailyTimeIntervalScheduleBuilder: java.util.Set ALL_DAYS_OF_THE_WEEK>;

        r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Set daysOfWeek> = $r3;

     label1:
        $r2 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Set daysOfWeek>;

        return $r2;
    }

    public void setDaysOfWeek(java.util.Set)
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl r0;
        java.util.Set r1;
        java.lang.IllegalArgumentException $r2, $r3;
        int $i0, $i1;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        r1 := @parameter0: java.util.Set;

        if r1 == null goto label1;

        $i0 = interfaceinvoke r1.<java.util.Set: int size()>();

        if $i0 != 0 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("DaysOfWeek set must be a set that contains at least one day.");

        throw $r2;

     label2:
        $i1 = interfaceinvoke r1.<java.util.Set: int size()>();

        if $i1 != 0 goto label3;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("DaysOfWeek set must contain at least one day.");

        throw $r3;

     label3:
        r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Set daysOfWeek> = r1;

        return;
    }

    public org.quartz.TimeOfDay getStartTimeOfDay()
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl r0;
        org.quartz.TimeOfDay $r1, $r2, $r3;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        $r1 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: org.quartz.TimeOfDay startTimeOfDay>;

        if $r1 != null goto label1;

        $r3 = new org.quartz.TimeOfDay;

        specialinvoke $r3.<org.quartz.TimeOfDay: void <init>(int,int,int)>(0, 0, 0);

        r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: org.quartz.TimeOfDay startTimeOfDay> = $r3;

     label1:
        $r2 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: org.quartz.TimeOfDay startTimeOfDay>;

        return $r2;
    }

    public void setStartTimeOfDay(org.quartz.TimeOfDay)
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl r0;
        org.quartz.TimeOfDay r1, r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3, $r4;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        r1 := @parameter0: org.quartz.TimeOfDay;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Start time of day cannot be null");

        throw $r4;

     label1:
        r2 = virtualinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: org.quartz.TimeOfDay getEndTimeOfDay()>();

        if r2 == null goto label2;

        $z0 = virtualinvoke r2.<org.quartz.TimeOfDay: boolean before(org.quartz.TimeOfDay)>(r1);

        if $z0 == 0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("End time of day cannot be before start time of day");

        throw $r3;

     label2:
        r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: org.quartz.TimeOfDay startTimeOfDay> = r1;

        return;
    }

    public org.quartz.TimeOfDay getEndTimeOfDay()
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl r0;
        org.quartz.TimeOfDay $r1;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        $r1 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: org.quartz.TimeOfDay endTimeOfDay>;

        return $r1;
    }

    public void setEndTimeOfDay(org.quartz.TimeOfDay)
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl r0;
        org.quartz.TimeOfDay r1, r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3, $r4;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        r1 := @parameter0: org.quartz.TimeOfDay;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("End time of day cannot be null");

        throw $r4;

     label1:
        r2 = virtualinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: org.quartz.TimeOfDay getStartTimeOfDay()>();

        if r2 == null goto label2;

        $z0 = virtualinvoke r1.<org.quartz.TimeOfDay: boolean before(org.quartz.TimeOfDay)>(r1);

        if $z0 == 0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("End time of day cannot be before start time of day");

        throw $r3;

     label2:
        r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: org.quartz.TimeOfDay endTimeOfDay> = r1;

        return;
    }

    public org.quartz.ScheduleBuilder getScheduleBuilder()
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl r0;
        org.quartz.DailyTimeIntervalScheduleBuilder r1, $r2, $r4, $r6, $r8;
        int $i0, $i1;
        org.quartz.DateBuilder$IntervalUnit $r3;
        java.util.Set $r5;
        org.quartz.TimeOfDay $r7, $r9;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        $r2 = staticinvoke <org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DailyTimeIntervalScheduleBuilder dailyTimeIntervalSchedule()>();

        $i0 = virtualinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: int getRepeatInterval()>();

        $r3 = virtualinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: org.quartz.DateBuilder$IntervalUnit getRepeatIntervalUnit()>();

        $r4 = virtualinvoke $r2.<org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DailyTimeIntervalScheduleBuilder withInterval(int,org.quartz.DateBuilder$IntervalUnit)>($i0, $r3);

        $r5 = virtualinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Set getDaysOfWeek()>();

        $r6 = virtualinvoke $r4.<org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DailyTimeIntervalScheduleBuilder onDaysOfTheWeek(java.util.Set)>($r5);

        $r7 = virtualinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: org.quartz.TimeOfDay getStartTimeOfDay()>();

        $r8 = virtualinvoke $r6.<org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DailyTimeIntervalScheduleBuilder startingDailyAt(org.quartz.TimeOfDay)>($r7);

        $r9 = virtualinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: org.quartz.TimeOfDay getEndTimeOfDay()>();

        r1 = virtualinvoke $r8.<org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DailyTimeIntervalScheduleBuilder endingDailyAt(org.quartz.TimeOfDay)>($r9);

        $i1 = virtualinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: int getMisfireInstruction()>();

        lookupswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label1;
            default: goto label3;
        };

     label1:
        virtualinvoke r1.<org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DailyTimeIntervalScheduleBuilder withMisfireHandlingInstructionDoNothing()>();

        goto label3;

     label2:
        virtualinvoke r1.<org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DailyTimeIntervalScheduleBuilder withMisfireHandlingInstructionFireAndProceed()>();

     label3:
        return r1;
    }

    public boolean hasAdditionalProperties()
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl r0;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        return 0;
    }

    public int getRepeatCount()
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl r0;
        int $i0;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        $i0 = r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: int repeatCount>;

        return $i0;
    }

    public void setRepeatCount(int)
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl r0;
        int i0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        if i0 == -1 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Repeat count must be >= 0, use the constant REPEAT_INDEFINITELY for infinite.");

        throw $r1;

     label1:
        r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: int repeatCount> = i0;

        return;
    }

    static void <clinit>()
    {
        java.util.Calendar $r0;
        int $i0, $i1;

        <org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: long serialVersionUID> = -632667786771388749L;

        $r0 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $i0 = virtualinvoke $r0.<java.util.Calendar: int get(int)>(1);

        $i1 = $i0 + 100;

        <org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: int YEAR_TO_GIVEUP_SCHEDULING_AT> = $i1;

        return;
    }
}
