public class org.quartz.impl.jdbcjobstore.UpdateLockRowSemaphoreTest extends java.lang.Object
{
    private static final java.sql.PreparedStatement GOOD_STATEMENT;
    private static final java.sql.PreparedStatement FAIL_STATEMENT;
    private static final java.sql.PreparedStatement BAD_STATEMENT;

    public void <init>()
    {
        org.quartz.impl.jdbcjobstore.UpdateLockRowSemaphoreTest r0;

        r0 := @this: org.quartz.impl.jdbcjobstore.UpdateLockRowSemaphoreTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testSingleSuccessUsingUpdate() throws org.quartz.impl.jdbcjobstore.LockException, java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.UpdateLockRowSemaphoreTest r0;
        java.sql.Connection r2;
        org.quartz.impl.jdbcjobstore.UpdateLockRowSemaphore $r3;
        java.lang.Object $r4;
        java.lang.String $r5;
        java.sql.PreparedStatement $r6, $r8;
        org.mockito.stubbing.OngoingStubbing $r7, $r9;
        java.lang.Class[] $r10;
        boolean $z0;

        r0 := @this: org.quartz.impl.jdbcjobstore.UpdateLockRowSemaphoreTest;

        $r3 = new org.quartz.impl.jdbcjobstore.UpdateLockRowSemaphore;

        specialinvoke $r3.<org.quartz.impl.jdbcjobstore.UpdateLockRowSemaphore: void <init>()>();

        virtualinvoke $r3.<org.quartz.impl.jdbcjobstore.UpdateLockRowSemaphore: void setSchedName(java.lang.String)>("test");

        $r4 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Ljava/sql/Connection;");

        r2 = (java.sql.Connection) $r4;

        $r5 = staticinvoke <org.mockito.Mockito: java.lang.String startsWith(java.lang.String)>("UPDATE");

        $r6 = interfaceinvoke r2.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r5);

        $r7 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r6);

        $r8 = <org.quartz.impl.jdbcjobstore.UpdateLockRowSemaphoreTest: java.sql.PreparedStatement GOOD_STATEMENT>;

        $r9 = interfaceinvoke $r7.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r8);

        $r10 = newarray (java.lang.Class)[1];

        $r10[0] = class "Ljava/lang/AssertionError;";

        interfaceinvoke $r9.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenThrow(java.lang.Class[])>($r10);

        $z0 = virtualinvoke $r3.<org.quartz.impl.jdbcjobstore.UpdateLockRowSemaphore: boolean obtainLock(java.sql.Connection,java.lang.String)>(r2, "test");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testSingleFailureFollowedBySuccessUsingUpdate() throws org.quartz.impl.jdbcjobstore.LockException, java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.UpdateLockRowSemaphoreTest r0;
        java.sql.Connection r2;
        org.quartz.impl.jdbcjobstore.UpdateLockRowSemaphore $r3;
        java.lang.Object $r4;
        java.lang.String $r5;
        java.sql.PreparedStatement $r6, $r8, $r10;
        org.mockito.stubbing.OngoingStubbing $r7, $r9, $r11;
        java.lang.Class[] $r12;
        boolean $z0;

        r0 := @this: org.quartz.impl.jdbcjobstore.UpdateLockRowSemaphoreTest;

        $r3 = new org.quartz.impl.jdbcjobstore.UpdateLockRowSemaphore;

        specialinvoke $r3.<org.quartz.impl.jdbcjobstore.UpdateLockRowSemaphore: void <init>()>();

        virtualinvoke $r3.<org.quartz.impl.jdbcjobstore.UpdateLockRowSemaphore: void setSchedName(java.lang.String)>("test");

        $r4 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Ljava/sql/Connection;");

        r2 = (java.sql.Connection) $r4;

        $r5 = staticinvoke <org.mockito.Mockito: java.lang.String startsWith(java.lang.String)>("UPDATE");

        $r6 = interfaceinvoke r2.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r5);

        $r7 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r6);

        $r8 = <org.quartz.impl.jdbcjobstore.UpdateLockRowSemaphoreTest: java.sql.PreparedStatement BAD_STATEMENT>;

        $r9 = interfaceinvoke $r7.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r8);

        $r10 = <org.quartz.impl.jdbcjobstore.UpdateLockRowSemaphoreTest: java.sql.PreparedStatement GOOD_STATEMENT>;

        $r11 = interfaceinvoke $r9.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r10);

        $r12 = newarray (java.lang.Class)[1];

        $r12[0] = class "Ljava/lang/AssertionError;";

        interfaceinvoke $r11.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenThrow(java.lang.Class[])>($r12);

        $z0 = virtualinvoke $r3.<org.quartz.impl.jdbcjobstore.UpdateLockRowSemaphore: boolean obtainLock(java.sql.Connection,java.lang.String)>(r2, "test");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testDoubleFailureFollowedBySuccessUsingUpdate() throws org.quartz.impl.jdbcjobstore.LockException, java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.UpdateLockRowSemaphoreTest r0;
        java.sql.Connection r2;
        org.quartz.impl.jdbcjobstore.UpdateLockRowSemaphore $r4;
        java.lang.Object $r5;
        java.lang.String $r6;
        java.sql.PreparedStatement $r7, $r10, $r11;
        org.mockito.stubbing.OngoingStubbing $r8, $r12;
        java.sql.PreparedStatement[] $r9;
        java.lang.Class[] $r13;
        org.quartz.impl.jdbcjobstore.LockException $r15;

        r0 := @this: org.quartz.impl.jdbcjobstore.UpdateLockRowSemaphoreTest;

        $r4 = new org.quartz.impl.jdbcjobstore.UpdateLockRowSemaphore;

        specialinvoke $r4.<org.quartz.impl.jdbcjobstore.UpdateLockRowSemaphore: void <init>()>();

        virtualinvoke $r4.<org.quartz.impl.jdbcjobstore.UpdateLockRowSemaphore: void setSchedName(java.lang.String)>("test");

        $r5 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Ljava/sql/Connection;");

        r2 = (java.sql.Connection) $r5;

        $r6 = staticinvoke <org.mockito.Mockito: java.lang.String startsWith(java.lang.String)>("UPDATE");

        $r7 = interfaceinvoke r2.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r6);

        $r8 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r7);

        $r11 = <org.quartz.impl.jdbcjobstore.UpdateLockRowSemaphoreTest: java.sql.PreparedStatement BAD_STATEMENT>;

        $r9 = newarray (java.sql.PreparedStatement)[1];

        $r10 = <org.quartz.impl.jdbcjobstore.UpdateLockRowSemaphoreTest: java.sql.PreparedStatement BAD_STATEMENT>;

        $r9[0] = $r10;

        $r12 = interfaceinvoke $r8.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object,java.lang.Object[])>($r11, $r9);

        $r13 = newarray (java.lang.Class)[1];

        $r13[0] = class "Ljava/lang/AssertionError;";

        interfaceinvoke $r12.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenThrow(java.lang.Class[])>($r13);

     label1:
        virtualinvoke $r4.<org.quartz.impl.jdbcjobstore.UpdateLockRowSemaphore: boolean obtainLock(java.sql.Connection,java.lang.String)>(r2, "test");

        staticinvoke <org.junit.Assert: void fail()>();

     label2:
        goto label4;

     label3:
        $r15 := @caughtexception;

     label4:
        return;

        catch org.quartz.impl.jdbcjobstore.LockException from label1 to label2 with label3;
    }

    public void testFallThroughToInsert() throws java.sql.SQLException, org.quartz.impl.jdbcjobstore.LockException
    {
        org.quartz.impl.jdbcjobstore.UpdateLockRowSemaphoreTest r0;
        java.sql.Connection r2;
        org.quartz.impl.jdbcjobstore.UpdateLockRowSemaphore $r3;
        java.lang.Object $r4;
        java.lang.String $r5, $r12;
        java.sql.PreparedStatement $r6, $r8, $r13, $r15;
        org.mockito.stubbing.OngoingStubbing $r7, $r9, $r14, $r16;
        java.lang.Class[] $r10, $r17;
        boolean $z0;

        r0 := @this: org.quartz.impl.jdbcjobstore.UpdateLockRowSemaphoreTest;

        $r3 = new org.quartz.impl.jdbcjobstore.UpdateLockRowSemaphore;

        specialinvoke $r3.<org.quartz.impl.jdbcjobstore.UpdateLockRowSemaphore: void <init>()>();

        virtualinvoke $r3.<org.quartz.impl.jdbcjobstore.UpdateLockRowSemaphore: void setSchedName(java.lang.String)>("test");

        $r4 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Ljava/sql/Connection;");

        r2 = (java.sql.Connection) $r4;

        $r5 = staticinvoke <org.mockito.Mockito: java.lang.String startsWith(java.lang.String)>("UPDATE");

        $r6 = interfaceinvoke r2.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r5);

        $r7 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r6);

        $r8 = <org.quartz.impl.jdbcjobstore.UpdateLockRowSemaphoreTest: java.sql.PreparedStatement FAIL_STATEMENT>;

        $r9 = interfaceinvoke $r7.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r8);

        $r10 = newarray (java.lang.Class)[1];

        $r10[0] = class "Ljava/lang/AssertionError;";

        interfaceinvoke $r9.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenThrow(java.lang.Class[])>($r10);

        $r12 = staticinvoke <org.mockito.Mockito: java.lang.String startsWith(java.lang.String)>("INSERT");

        $r13 = interfaceinvoke r2.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r12);

        $r14 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r13);

        $r15 = <org.quartz.impl.jdbcjobstore.UpdateLockRowSemaphoreTest: java.sql.PreparedStatement GOOD_STATEMENT>;

        $r16 = interfaceinvoke $r14.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r15);

        $r17 = newarray (java.lang.Class)[1];

        $r17[0] = class "Ljava/lang/AssertionError;";

        interfaceinvoke $r16.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenThrow(java.lang.Class[])>($r17);

        $z0 = virtualinvoke $r3.<org.quartz.impl.jdbcjobstore.UpdateLockRowSemaphore: boolean obtainLock(java.sql.Connection,java.lang.String)>(r2, "test");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    static void <clinit>()
    {
        java.lang.Object $r1, $r3, $r5;
        java.sql.PreparedStatement $r2, $r4, $r6, $r7, $r12, $r17;
        int $i0, $i1, $i2;
        java.lang.Integer $r8, $r10, $r13, $r15, $r18;
        org.mockito.stubbing.OngoingStubbing $r9, $r14, $r19;
        java.lang.Class[] $r20;
        java.sql.SQLException $r22;
        java.lang.AssertionError $r23;

        $r1 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Ljava/sql/PreparedStatement;");

        $r2 = (java.sql.PreparedStatement) $r1;

        <org.quartz.impl.jdbcjobstore.UpdateLockRowSemaphoreTest: java.sql.PreparedStatement GOOD_STATEMENT> = $r2;

        $r3 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Ljava/sql/PreparedStatement;");

        $r4 = (java.sql.PreparedStatement) $r3;

        <org.quartz.impl.jdbcjobstore.UpdateLockRowSemaphoreTest: java.sql.PreparedStatement FAIL_STATEMENT> = $r4;

        $r5 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Ljava/sql/PreparedStatement;");

        $r6 = (java.sql.PreparedStatement) $r5;

        <org.quartz.impl.jdbcjobstore.UpdateLockRowSemaphoreTest: java.sql.PreparedStatement BAD_STATEMENT> = $r6;

     label1:
        $r7 = <org.quartz.impl.jdbcjobstore.UpdateLockRowSemaphoreTest: java.sql.PreparedStatement GOOD_STATEMENT>;

        $i0 = interfaceinvoke $r7.<java.sql.PreparedStatement: int executeUpdate()>();

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r9 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r8);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke $r9.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r10);

        $r12 = <org.quartz.impl.jdbcjobstore.UpdateLockRowSemaphoreTest: java.sql.PreparedStatement FAIL_STATEMENT>;

        $i1 = interfaceinvoke $r12.<java.sql.PreparedStatement: int executeUpdate()>();

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r14 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r13);

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        interfaceinvoke $r14.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r15);

        $r17 = <org.quartz.impl.jdbcjobstore.UpdateLockRowSemaphoreTest: java.sql.PreparedStatement BAD_STATEMENT>;

        $i2 = interfaceinvoke $r17.<java.sql.PreparedStatement: int executeUpdate()>();

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r19 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r18);

        $r20 = newarray (java.lang.Class)[1];

        $r20[0] = class "Ljava/sql/SQLException;";

        interfaceinvoke $r19.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenThrow(java.lang.Class[])>($r20);

     label2:
        goto label4;

     label3:
        $r22 := @caughtexception;

        $r23 = new java.lang.AssertionError;

        specialinvoke $r23.<java.lang.AssertionError: void <init>(java.lang.Object)>($r22);

        throw $r23;

     label4:
        return;

        catch java.sql.SQLException from label1 to label2 with label3;
    }
}
