public class org.quartz.utils.counter.sampled.SampledCounterImpl extends org.quartz.utils.counter.CounterImpl implements org.quartz.utils.counter.sampled.SampledCounter
{
    private static final long serialVersionUID;
    private static final int MILLIS_PER_SEC;
    protected final org.quartz.utils.CircularLossyQueue history;
    protected final boolean resetOnSample;
    private final java.util.TimerTask samplerTask;
    private final long intervalMillis;

    public void <init>(org.quartz.utils.counter.sampled.SampledCounterConfig)
    {
        org.quartz.utils.counter.sampled.SampledCounterImpl r0;
        org.quartz.utils.counter.sampled.SampledCounterConfig r1;
        long $l0, $l3;
        int $i1, $i2, $i4;
        org.quartz.utils.CircularLossyQueue $r2;
        boolean $z0;
        org.quartz.utils.counter.sampled.SampledCounterImpl$1 $r3;

        r0 := @this: org.quartz.utils.counter.sampled.SampledCounterImpl;

        r1 := @parameter0: org.quartz.utils.counter.sampled.SampledCounterConfig;

        $l0 = virtualinvoke r1.<org.quartz.utils.counter.sampled.SampledCounterConfig: long getInitialValue()>();

        specialinvoke r0.<org.quartz.utils.counter.CounterImpl: void <init>(long)>($l0);

        $i1 = virtualinvoke r1.<org.quartz.utils.counter.sampled.SampledCounterConfig: int getIntervalSecs()>();

        $i2 = $i1 * 1000;

        $l3 = (long) $i2;

        r0.<org.quartz.utils.counter.sampled.SampledCounterImpl: long intervalMillis> = $l3;

        $r2 = new org.quartz.utils.CircularLossyQueue;

        $i4 = virtualinvoke r1.<org.quartz.utils.counter.sampled.SampledCounterConfig: int getHistorySize()>();

        specialinvoke $r2.<org.quartz.utils.CircularLossyQueue: void <init>(int)>($i4);

        r0.<org.quartz.utils.counter.sampled.SampledCounterImpl: org.quartz.utils.CircularLossyQueue history> = $r2;

        $z0 = virtualinvoke r1.<org.quartz.utils.counter.sampled.SampledCounterConfig: boolean isResetOnSample()>();

        r0.<org.quartz.utils.counter.sampled.SampledCounterImpl: boolean resetOnSample> = $z0;

        $r3 = new org.quartz.utils.counter.sampled.SampledCounterImpl$1;

        specialinvoke $r3.<org.quartz.utils.counter.sampled.SampledCounterImpl$1: void <init>(org.quartz.utils.counter.sampled.SampledCounterImpl)>(r0);

        r0.<org.quartz.utils.counter.sampled.SampledCounterImpl: java.util.TimerTask samplerTask> = $r3;

        virtualinvoke r0.<org.quartz.utils.counter.sampled.SampledCounterImpl: void recordSample()>();

        return;
    }

    public org.quartz.utils.counter.sampled.TimeStampedCounterValue getMostRecentSample()
    {
        org.quartz.utils.counter.sampled.SampledCounterImpl r0;
        org.quartz.utils.CircularLossyQueue $r1;
        java.lang.Object $r2;
        org.quartz.utils.counter.sampled.TimeStampedCounterValue $r3;

        r0 := @this: org.quartz.utils.counter.sampled.SampledCounterImpl;

        $r1 = r0.<org.quartz.utils.counter.sampled.SampledCounterImpl: org.quartz.utils.CircularLossyQueue history>;

        $r2 = virtualinvoke $r1.<org.quartz.utils.CircularLossyQueue: java.lang.Object peek()>();

        $r3 = (org.quartz.utils.counter.sampled.TimeStampedCounterValue) $r2;

        return $r3;
    }

    public org.quartz.utils.counter.sampled.TimeStampedCounterValue[] getAllSampleValues()
    {
        org.quartz.utils.counter.sampled.SampledCounterImpl r0;
        org.quartz.utils.CircularLossyQueue $r1, $r2;
        int $i0;
        org.quartz.utils.counter.sampled.TimeStampedCounterValue[] $r3, $r5;
        java.lang.Object[] $r4;

        r0 := @this: org.quartz.utils.counter.sampled.SampledCounterImpl;

        $r2 = r0.<org.quartz.utils.counter.sampled.SampledCounterImpl: org.quartz.utils.CircularLossyQueue history>;

        $r1 = r0.<org.quartz.utils.counter.sampled.SampledCounterImpl: org.quartz.utils.CircularLossyQueue history>;

        $i0 = virtualinvoke $r1.<org.quartz.utils.CircularLossyQueue: int depth()>();

        $r3 = newarray (org.quartz.utils.counter.sampled.TimeStampedCounterValue)[$i0];

        $r4 = virtualinvoke $r2.<org.quartz.utils.CircularLossyQueue: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (org.quartz.utils.counter.sampled.TimeStampedCounterValue[]) $r4;

        return $r5;
    }

    public void shutdown()
    {
        org.quartz.utils.counter.sampled.SampledCounterImpl r0;
        java.util.TimerTask $r1, $r2;

        r0 := @this: org.quartz.utils.counter.sampled.SampledCounterImpl;

        $r1 = r0.<org.quartz.utils.counter.sampled.SampledCounterImpl: java.util.TimerTask samplerTask>;

        if $r1 == null goto label1;

        $r2 = r0.<org.quartz.utils.counter.sampled.SampledCounterImpl: java.util.TimerTask samplerTask>;

        virtualinvoke $r2.<java.util.TimerTask: boolean cancel()>();

     label1:
        return;
    }

    public java.util.TimerTask getTimerTask()
    {
        org.quartz.utils.counter.sampled.SampledCounterImpl r0;
        java.util.TimerTask $r1;

        r0 := @this: org.quartz.utils.counter.sampled.SampledCounterImpl;

        $r1 = r0.<org.quartz.utils.counter.sampled.SampledCounterImpl: java.util.TimerTask samplerTask>;

        return $r1;
    }

    public long getIntervalMillis()
    {
        org.quartz.utils.counter.sampled.SampledCounterImpl r0;
        long $l0;

        r0 := @this: org.quartz.utils.counter.sampled.SampledCounterImpl;

        $l0 = r0.<org.quartz.utils.counter.sampled.SampledCounterImpl: long intervalMillis>;

        return $l0;
    }

    void recordSample()
    {
        org.quartz.utils.counter.sampled.SampledCounterImpl r0;
        long l0, l1;
        boolean $z0;
        org.quartz.utils.counter.sampled.TimeStampedCounterValue $r2;
        org.quartz.utils.CircularLossyQueue $r3;

        r0 := @this: org.quartz.utils.counter.sampled.SampledCounterImpl;

        $z0 = r0.<org.quartz.utils.counter.sampled.SampledCounterImpl: boolean resetOnSample>;

        if $z0 == 0 goto label1;

        l1 = virtualinvoke r0.<org.quartz.utils.counter.sampled.SampledCounterImpl: long getAndReset()>();

        goto label2;

     label1:
        l1 = virtualinvoke r0.<org.quartz.utils.counter.sampled.SampledCounterImpl: long getValue()>();

     label2:
        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r2 = new org.quartz.utils.counter.sampled.TimeStampedCounterValue;

        specialinvoke $r2.<org.quartz.utils.counter.sampled.TimeStampedCounterValue: void <init>(long,long)>(l0, l1);

        $r3 = r0.<org.quartz.utils.counter.sampled.SampledCounterImpl: org.quartz.utils.CircularLossyQueue history>;

        virtualinvoke $r3.<org.quartz.utils.CircularLossyQueue: void push(java.lang.Object)>($r2);

        return;
    }

    public long getAndReset()
    {
        org.quartz.utils.counter.sampled.SampledCounterImpl r0;
        long $l0;

        r0 := @this: org.quartz.utils.counter.sampled.SampledCounterImpl;

        $l0 = virtualinvoke r0.<org.quartz.utils.counter.sampled.SampledCounterImpl: long getAndSet(long)>(0L);

        return $l0;
    }

    public static void <clinit>()
    {
        <org.quartz.utils.counter.sampled.SampledCounterImpl: int MILLIS_PER_SEC> = 1000;

        <org.quartz.utils.counter.sampled.SampledCounterImpl: long serialVersionUID> = -3605369302464131521L;

        return;
    }
}
