public class org.quartz.utils.HikariCpPoolingConnectionProvider extends java.lang.Object implements org.quartz.utils.PoolingConnectionProvider
{
    public static final java.lang.String POOLING_PROVIDER_NAME;
    private static final java.lang.String DB_DISCARD_IDLE_CONNECTIONS_SECONDS;
    private com.zaxxer.hikari.HikariDataSource datasource;

    public void <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.String, int, java.lang.String) throws java.sql.SQLException, org.quartz.SchedulerException
    {
        org.quartz.utils.HikariCpPoolingConnectionProvider r0;
        java.lang.String r1, r2, r3, r4, r5;
        int i0;

        r0 := @this: org.quartz.utils.HikariCpPoolingConnectionProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        i0 := @parameter4: int;

        r5 := @parameter5: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        specialinvoke r0.<org.quartz.utils.HikariCpPoolingConnectionProvider: void initialize(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,int)>(r1, r2, r3, r4, i0, r5, 0);

        return;
    }

    public void <init>(java.util.Properties) throws org.quartz.SchedulerException, java.sql.SQLException
    {
        org.quartz.utils.HikariCpPoolingConnectionProvider r0;
        java.util.Properties r1;
        org.quartz.utils.PropertiesParser $r3;
        java.lang.String $r4, $r5, $r6, $r7, $r8;
        int $i0, $i1;

        r0 := @this: org.quartz.utils.HikariCpPoolingConnectionProvider;

        r1 := @parameter0: java.util.Properties;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new org.quartz.utils.PropertiesParser;

        specialinvoke $r3.<org.quartz.utils.PropertiesParser: void <init>(java.util.Properties)>(r1);

        $r4 = virtualinvoke $r3.<org.quartz.utils.PropertiesParser: java.lang.String getStringProperty(java.lang.String)>("driver");

        $r5 = virtualinvoke $r3.<org.quartz.utils.PropertiesParser: java.lang.String getStringProperty(java.lang.String)>("URL");

        $r6 = virtualinvoke $r3.<org.quartz.utils.PropertiesParser: java.lang.String getStringProperty(java.lang.String,java.lang.String)>("user", "");

        $r7 = virtualinvoke $r3.<org.quartz.utils.PropertiesParser: java.lang.String getStringProperty(java.lang.String,java.lang.String)>("password", "");

        $i0 = virtualinvoke $r3.<org.quartz.utils.PropertiesParser: int getIntProperty(java.lang.String,int)>("maxConnections", 10);

        $r8 = virtualinvoke $r3.<org.quartz.utils.PropertiesParser: java.lang.String getStringProperty(java.lang.String)>("validationQuery");

        $i1 = virtualinvoke $r3.<org.quartz.utils.PropertiesParser: int getIntProperty(java.lang.String,int)>("discardIdleConnectionsSeconds", 0);

        specialinvoke r0.<org.quartz.utils.HikariCpPoolingConnectionProvider: void initialize(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,int)>($r4, $r5, $r6, $r7, $i0, $r8, $i1);

        return;
    }

    private void initialize(java.lang.String, java.lang.String, java.lang.String, java.lang.String, int, java.lang.String, int) throws java.sql.SQLException, org.quartz.SchedulerException
    {
        org.quartz.utils.HikariCpPoolingConnectionProvider r0;
        java.lang.String r1, r2, r3, r4, r5, $r19, $r25;
        int i0, i1;
        com.zaxxer.hikari.HikariDataSource $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        long $l2;
        java.sql.SQLException $r14, $r20, $r26;
        java.lang.StringBuilder $r15, $r16, $r17, $r18, $r21, $r22, $r23, $r24;

        r0 := @this: org.quartz.utils.HikariCpPoolingConnectionProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        i0 := @parameter4: int;

        r5 := @parameter5: java.lang.String;

        i1 := @parameter6: int;

        if r2 != null goto label1;

        $r26 = new java.sql.SQLException;

        specialinvoke $r26.<java.sql.SQLException: void <init>(java.lang.String)>("DBPool could not be created: DB URL cannot be null");

        throw $r26;

     label1:
        if r1 != null goto label2;

        $r20 = new java.sql.SQLException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DBPool \'");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' could not be created: DB driver class name cannot be null!");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.sql.SQLException: void <init>(java.lang.String)>($r25);

        throw $r20;

     label2:
        if i0 >= 0 goto label3;

        $r14 = new java.sql.SQLException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DBPool \'");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' could not be created: Max connections must be greater than zero!");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.sql.SQLException: void <init>(java.lang.String)>($r19);

        throw $r14;

     label3:
        $r6 = new com.zaxxer.hikari.HikariDataSource;

        specialinvoke $r6.<com.zaxxer.hikari.HikariDataSource: void <init>()>();

        r0.<org.quartz.utils.HikariCpPoolingConnectionProvider: com.zaxxer.hikari.HikariDataSource datasource> = $r6;

        $r7 = r0.<org.quartz.utils.HikariCpPoolingConnectionProvider: com.zaxxer.hikari.HikariDataSource datasource>;

        virtualinvoke $r7.<com.zaxxer.hikari.HikariDataSource: void setDriverClassName(java.lang.String)>(r1);

        $r8 = r0.<org.quartz.utils.HikariCpPoolingConnectionProvider: com.zaxxer.hikari.HikariDataSource datasource>;

        virtualinvoke $r8.<com.zaxxer.hikari.HikariDataSource: void setJdbcUrl(java.lang.String)>(r2);

        $r9 = r0.<org.quartz.utils.HikariCpPoolingConnectionProvider: com.zaxxer.hikari.HikariDataSource datasource>;

        virtualinvoke $r9.<com.zaxxer.hikari.HikariDataSource: void setUsername(java.lang.String)>(r3);

        $r10 = r0.<org.quartz.utils.HikariCpPoolingConnectionProvider: com.zaxxer.hikari.HikariDataSource datasource>;

        virtualinvoke $r10.<com.zaxxer.hikari.HikariDataSource: void setPassword(java.lang.String)>(r4);

        $r11 = r0.<org.quartz.utils.HikariCpPoolingConnectionProvider: com.zaxxer.hikari.HikariDataSource datasource>;

        virtualinvoke $r11.<com.zaxxer.hikari.HikariDataSource: void setMaximumPoolSize(int)>(i0);

        $r12 = r0.<org.quartz.utils.HikariCpPoolingConnectionProvider: com.zaxxer.hikari.HikariDataSource datasource>;

        $l2 = (long) i1;

        virtualinvoke $r12.<com.zaxxer.hikari.HikariDataSource: void setIdleTimeout(long)>($l2);

        if r5 == null goto label4;

        $r13 = r0.<org.quartz.utils.HikariCpPoolingConnectionProvider: com.zaxxer.hikari.HikariDataSource datasource>;

        virtualinvoke $r13.<com.zaxxer.hikari.HikariDataSource: void setConnectionTestQuery(java.lang.String)>(r5);

     label4:
        return;
    }

    public com.zaxxer.hikari.HikariDataSource getDataSource()
    {
        org.quartz.utils.HikariCpPoolingConnectionProvider r0;
        com.zaxxer.hikari.HikariDataSource $r1;

        r0 := @this: org.quartz.utils.HikariCpPoolingConnectionProvider;

        $r1 = r0.<org.quartz.utils.HikariCpPoolingConnectionProvider: com.zaxxer.hikari.HikariDataSource datasource>;

        return $r1;
    }

    public java.sql.Connection getConnection() throws java.sql.SQLException
    {
        org.quartz.utils.HikariCpPoolingConnectionProvider r0;
        com.zaxxer.hikari.HikariDataSource $r1;
        java.sql.Connection $r2;

        r0 := @this: org.quartz.utils.HikariCpPoolingConnectionProvider;

        $r1 = r0.<org.quartz.utils.HikariCpPoolingConnectionProvider: com.zaxxer.hikari.HikariDataSource datasource>;

        $r2 = virtualinvoke $r1.<com.zaxxer.hikari.HikariDataSource: java.sql.Connection getConnection()>();

        return $r2;
    }

    public void shutdown() throws java.sql.SQLException
    {
        org.quartz.utils.HikariCpPoolingConnectionProvider r0;
        com.zaxxer.hikari.HikariDataSource $r1;

        r0 := @this: org.quartz.utils.HikariCpPoolingConnectionProvider;

        $r1 = r0.<org.quartz.utils.HikariCpPoolingConnectionProvider: com.zaxxer.hikari.HikariDataSource datasource>;

        virtualinvoke $r1.<com.zaxxer.hikari.HikariDataSource: void close()>();

        return;
    }

    public void initialize() throws java.sql.SQLException
    {
        org.quartz.utils.HikariCpPoolingConnectionProvider r0;

        r0 := @this: org.quartz.utils.HikariCpPoolingConnectionProvider;

        return;
    }

    public volatile javax.sql.DataSource getDataSource()
    {
        org.quartz.utils.HikariCpPoolingConnectionProvider r0;
        com.zaxxer.hikari.HikariDataSource $r1;

        r0 := @this: org.quartz.utils.HikariCpPoolingConnectionProvider;

        $r1 = virtualinvoke r0.<org.quartz.utils.HikariCpPoolingConnectionProvider: com.zaxxer.hikari.HikariDataSource getDataSource()>();

        return $r1;
    }

    public static void <clinit>()
    {
        <org.quartz.utils.HikariCpPoolingConnectionProvider: java.lang.String DB_DISCARD_IDLE_CONNECTIONS_SECONDS> = "discardIdleConnectionsSeconds";

        <org.quartz.utils.HikariCpPoolingConnectionProvider: java.lang.String POOLING_PROVIDER_NAME> = "hikaricp";

        return;
    }
}
