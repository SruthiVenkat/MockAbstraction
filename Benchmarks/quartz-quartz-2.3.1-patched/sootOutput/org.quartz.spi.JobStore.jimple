public interface  org.quartz.spi.JobStore extends java.lang.Object
{

    public abstract void initialize(org.quartz.spi.ClassLoadHelper, org.quartz.spi.SchedulerSignaler) throws org.quartz.SchedulerConfigException;

    public abstract void schedulerStarted() throws org.quartz.SchedulerException;

    public abstract void schedulerPaused();

    public abstract void schedulerResumed();

    public abstract void shutdown();

    public abstract boolean supportsPersistence();

    public abstract long getEstimatedTimeToReleaseAndAcquireTrigger();

    public abstract boolean isClustered();

    public abstract void storeJobAndTrigger(org.quartz.JobDetail, org.quartz.spi.OperableTrigger) throws org.quartz.ObjectAlreadyExistsException, org.quartz.JobPersistenceException;

    public abstract void storeJob(org.quartz.JobDetail, boolean) throws org.quartz.ObjectAlreadyExistsException, org.quartz.JobPersistenceException;

    public abstract void storeJobsAndTriggers(java.util.Map, boolean) throws org.quartz.ObjectAlreadyExistsException, org.quartz.JobPersistenceException;

    public abstract boolean removeJob(org.quartz.JobKey) throws org.quartz.JobPersistenceException;

    public abstract boolean removeJobs(java.util.List) throws org.quartz.JobPersistenceException;

    public abstract org.quartz.JobDetail retrieveJob(org.quartz.JobKey) throws org.quartz.JobPersistenceException;

    public abstract void storeTrigger(org.quartz.spi.OperableTrigger, boolean) throws org.quartz.ObjectAlreadyExistsException, org.quartz.JobPersistenceException;

    public abstract boolean removeTrigger(org.quartz.TriggerKey) throws org.quartz.JobPersistenceException;

    public abstract boolean removeTriggers(java.util.List) throws org.quartz.JobPersistenceException;

    public abstract boolean replaceTrigger(org.quartz.TriggerKey, org.quartz.spi.OperableTrigger) throws org.quartz.JobPersistenceException;

    public abstract org.quartz.spi.OperableTrigger retrieveTrigger(org.quartz.TriggerKey) throws org.quartz.JobPersistenceException;

    public abstract boolean checkExists(org.quartz.JobKey) throws org.quartz.JobPersistenceException;

    public abstract boolean checkExists(org.quartz.TriggerKey) throws org.quartz.JobPersistenceException;

    public abstract void clearAllSchedulingData() throws org.quartz.JobPersistenceException;

    public abstract void storeCalendar(java.lang.String, org.quartz.Calendar, boolean, boolean) throws org.quartz.ObjectAlreadyExistsException, org.quartz.JobPersistenceException;

    public abstract boolean removeCalendar(java.lang.String) throws org.quartz.JobPersistenceException;

    public abstract org.quartz.Calendar retrieveCalendar(java.lang.String) throws org.quartz.JobPersistenceException;

    public abstract int getNumberOfJobs() throws org.quartz.JobPersistenceException;

    public abstract int getNumberOfTriggers() throws org.quartz.JobPersistenceException;

    public abstract int getNumberOfCalendars() throws org.quartz.JobPersistenceException;

    public abstract java.util.Set getJobKeys(org.quartz.impl.matchers.GroupMatcher) throws org.quartz.JobPersistenceException;

    public abstract java.util.Set getTriggerKeys(org.quartz.impl.matchers.GroupMatcher) throws org.quartz.JobPersistenceException;

    public abstract java.util.List getJobGroupNames() throws org.quartz.JobPersistenceException;

    public abstract java.util.List getTriggerGroupNames() throws org.quartz.JobPersistenceException;

    public abstract java.util.List getCalendarNames() throws org.quartz.JobPersistenceException;

    public abstract java.util.List getTriggersForJob(org.quartz.JobKey) throws org.quartz.JobPersistenceException;

    public abstract org.quartz.Trigger$TriggerState getTriggerState(org.quartz.TriggerKey) throws org.quartz.JobPersistenceException;

    public abstract void resetTriggerFromErrorState(org.quartz.TriggerKey) throws org.quartz.JobPersistenceException;

    public abstract void pauseTrigger(org.quartz.TriggerKey) throws org.quartz.JobPersistenceException;

    public abstract java.util.Collection pauseTriggers(org.quartz.impl.matchers.GroupMatcher) throws org.quartz.JobPersistenceException;

    public abstract void pauseJob(org.quartz.JobKey) throws org.quartz.JobPersistenceException;

    public abstract java.util.Collection pauseJobs(org.quartz.impl.matchers.GroupMatcher) throws org.quartz.JobPersistenceException;

    public abstract void resumeTrigger(org.quartz.TriggerKey) throws org.quartz.JobPersistenceException;

    public abstract java.util.Collection resumeTriggers(org.quartz.impl.matchers.GroupMatcher) throws org.quartz.JobPersistenceException;

    public abstract java.util.Set getPausedTriggerGroups() throws org.quartz.JobPersistenceException;

    public abstract void resumeJob(org.quartz.JobKey) throws org.quartz.JobPersistenceException;

    public abstract java.util.Collection resumeJobs(org.quartz.impl.matchers.GroupMatcher) throws org.quartz.JobPersistenceException;

    public abstract void pauseAll() throws org.quartz.JobPersistenceException;

    public abstract void resumeAll() throws org.quartz.JobPersistenceException;

    public abstract java.util.List acquireNextTriggers(long, int, long) throws org.quartz.JobPersistenceException;

    public abstract void releaseAcquiredTrigger(org.quartz.spi.OperableTrigger);

    public abstract java.util.List triggersFired(java.util.List) throws org.quartz.JobPersistenceException;

    public abstract void triggeredJobComplete(org.quartz.spi.OperableTrigger, org.quartz.JobDetail, org.quartz.Trigger$CompletedExecutionInstruction);

    public abstract void setInstanceId(java.lang.String);

    public abstract void setInstanceName(java.lang.String);

    public abstract void setThreadPoolSize(int);

    public abstract long getAcquireRetryDelay(int);
}
