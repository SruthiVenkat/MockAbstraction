public class org.quartz.impl.jdbcjobstore.SimpleTriggerPersistenceDelegate extends java.lang.Object implements org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate, org.quartz.impl.jdbcjobstore.StdJDBCConstants
{
    protected java.lang.String tablePrefix;
    protected java.lang.String schedNameLiteral;

    public void <init>()
    {
        org.quartz.impl.jdbcjobstore.SimpleTriggerPersistenceDelegate r0;

        r0 := @this: org.quartz.impl.jdbcjobstore.SimpleTriggerPersistenceDelegate;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void initialize(java.lang.String, java.lang.String)
    {
        org.quartz.impl.jdbcjobstore.SimpleTriggerPersistenceDelegate r0;
        java.lang.String r1, r2, $r7;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;

        r0 := @this: org.quartz.impl.jdbcjobstore.SimpleTriggerPersistenceDelegate;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r0.<org.quartz.impl.jdbcjobstore.SimpleTriggerPersistenceDelegate: java.lang.String tablePrefix> = r1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<org.quartz.impl.jdbcjobstore.SimpleTriggerPersistenceDelegate: java.lang.String schedNameLiteral> = $r7;

        return;
    }

    public java.lang.String getHandledTriggerTypeDiscriminator()
    {
        org.quartz.impl.jdbcjobstore.SimpleTriggerPersistenceDelegate r0;

        r0 := @this: org.quartz.impl.jdbcjobstore.SimpleTriggerPersistenceDelegate;

        return "SIMPLE";
    }

    public boolean canHandleTriggerType(org.quartz.spi.OperableTrigger)
    {
        org.quartz.impl.jdbcjobstore.SimpleTriggerPersistenceDelegate r0;
        org.quartz.spi.OperableTrigger r1;
        boolean $z0, $z1, $z2;
        org.quartz.impl.triggers.SimpleTriggerImpl $r2;

        r0 := @this: org.quartz.impl.jdbcjobstore.SimpleTriggerPersistenceDelegate;

        r1 := @parameter0: org.quartz.spi.OperableTrigger;

        $z0 = r1 instanceof org.quartz.impl.triggers.SimpleTriggerImpl;

        if $z0 == 0 goto label1;

        $r2 = (org.quartz.impl.triggers.SimpleTriggerImpl) r1;

        $z1 = virtualinvoke $r2.<org.quartz.impl.triggers.SimpleTriggerImpl: boolean hasAdditionalProperties()>();

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public int deleteExtendedTriggerProperties(java.sql.Connection, org.quartz.TriggerKey) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.SimpleTriggerPersistenceDelegate r0;
        java.sql.Connection r1;
        org.quartz.TriggerKey r2;
        int i0;
        java.lang.String $r4, $r5, $r6, $r7, $r8;
        java.lang.Throwable $r9;
        java.sql.PreparedStatement r10;

        r0 := @this: org.quartz.impl.jdbcjobstore.SimpleTriggerPersistenceDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.TriggerKey;

        r10 = null;

     label1:
        $r5 = r0.<org.quartz.impl.jdbcjobstore.SimpleTriggerPersistenceDelegate: java.lang.String tablePrefix>;

        $r4 = r0.<org.quartz.impl.jdbcjobstore.SimpleTriggerPersistenceDelegate: java.lang.String schedNameLiteral>;

        $r6 = staticinvoke <org.quartz.impl.jdbcjobstore.Util: java.lang.String rtp(java.lang.String,java.lang.String,java.lang.String)>("DELETE FROM {0}SIMPLE_TRIGGERS WHERE SCHED_NAME = {1} AND TRIGGER_NAME = ? AND TRIGGER_GROUP = ?", $r5, $r4);

        r10 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r6);

        $r7 = virtualinvoke r2.<org.quartz.TriggerKey: java.lang.String getName()>();

        interfaceinvoke r10.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, $r7);

        $r8 = virtualinvoke r2.<org.quartz.TriggerKey: java.lang.String getGroup()>();

        interfaceinvoke r10.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(2, $r8);

        i0 = interfaceinvoke r10.<java.sql.PreparedStatement: int executeUpdate()>();

     label2:
        staticinvoke <org.quartz.impl.jdbcjobstore.Util: void closeStatement(java.sql.Statement)>(r10);

        return i0;

     label3:
        $r9 := @caughtexception;

     label4:
        staticinvoke <org.quartz.impl.jdbcjobstore.Util: void closeStatement(java.sql.Statement)>(r10);

        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int insertExtendedTriggerProperties(java.sql.Connection, org.quartz.spi.OperableTrigger, java.lang.String, org.quartz.JobDetail) throws java.sql.SQLException, java.io.IOException
    {
        org.quartz.impl.jdbcjobstore.SimpleTriggerPersistenceDelegate r0;
        java.sql.Connection r1;
        org.quartz.spi.OperableTrigger r2;
        java.lang.String r3, $r7, $r8, $r9, $r11, $r13, $r15;
        org.quartz.JobDetail r4;
        org.quartz.SimpleTrigger r5;
        int i0, $i1, $i3;
        org.quartz.TriggerKey $r10, $r12;
        java.math.BigDecimal $r14;
        long $l2;
        java.lang.Throwable $r16;
        java.sql.PreparedStatement r17;

        r0 := @this: org.quartz.impl.jdbcjobstore.SimpleTriggerPersistenceDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.spi.OperableTrigger;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: org.quartz.JobDetail;

        r5 = (org.quartz.SimpleTrigger) r2;

        r17 = null;

     label1:
        $r8 = r0.<org.quartz.impl.jdbcjobstore.SimpleTriggerPersistenceDelegate: java.lang.String tablePrefix>;

        $r7 = r0.<org.quartz.impl.jdbcjobstore.SimpleTriggerPersistenceDelegate: java.lang.String schedNameLiteral>;

        $r9 = staticinvoke <org.quartz.impl.jdbcjobstore.Util: java.lang.String rtp(java.lang.String,java.lang.String,java.lang.String)>("INSERT INTO {0}SIMPLE_TRIGGERS (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP, REPEAT_COUNT, REPEAT_INTERVAL, TIMES_TRIGGERED)  VALUES({1}, ?, ?, ?, ?, ?)", $r8, $r7);

        r17 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r9);

        $r10 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        $r11 = virtualinvoke $r10.<org.quartz.TriggerKey: java.lang.String getName()>();

        interfaceinvoke r17.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, $r11);

        $r12 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        $r13 = virtualinvoke $r12.<org.quartz.TriggerKey: java.lang.String getGroup()>();

        interfaceinvoke r17.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(2, $r13);

        $i1 = interfaceinvoke r5.<org.quartz.SimpleTrigger: int getRepeatCount()>();

        interfaceinvoke r17.<java.sql.PreparedStatement: void setInt(int,int)>(3, $i1);

        $r14 = new java.math.BigDecimal;

        $l2 = interfaceinvoke r5.<org.quartz.SimpleTrigger: long getRepeatInterval()>();

        $r15 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l2);

        specialinvoke $r14.<java.math.BigDecimal: void <init>(java.lang.String)>($r15);

        interfaceinvoke r17.<java.sql.PreparedStatement: void setBigDecimal(int,java.math.BigDecimal)>(4, $r14);

        $i3 = interfaceinvoke r5.<org.quartz.SimpleTrigger: int getTimesTriggered()>();

        interfaceinvoke r17.<java.sql.PreparedStatement: void setInt(int,int)>(5, $i3);

        i0 = interfaceinvoke r17.<java.sql.PreparedStatement: int executeUpdate()>();

     label2:
        staticinvoke <org.quartz.impl.jdbcjobstore.Util: void closeStatement(java.sql.Statement)>(r17);

        return i0;

     label3:
        $r16 := @caughtexception;

     label4:
        staticinvoke <org.quartz.impl.jdbcjobstore.Util: void closeStatement(java.sql.Statement)>(r17);

        throw $r16;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate$TriggerPropertyBundle loadExtendedTriggerProperties(java.sql.Connection, org.quartz.TriggerKey) throws java.sql.SQLException
    {
        org.quartz.impl.jdbcjobstore.SimpleTriggerPersistenceDelegate r0;
        java.sql.Connection r1;
        org.quartz.TriggerKey r2;
        int i0, i2;
        long l1;
        org.quartz.SimpleScheduleBuilder r3, $r23, $r24;
        java.lang.String $r8, $r9, $r10, $r11, $r12, $r18, $r19, $r20, $r22;
        boolean $z0;
        java.lang.IllegalStateException $r13;
        java.lang.StringBuilder $r14, $r15, $r16, $r17, $r21;
        java.lang.String[] $r25;
        java.lang.Object[] $r26;
        java.lang.Integer $r27;
        org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate$TriggerPropertyBundle $r28;
        java.lang.Throwable $r29;
        java.sql.PreparedStatement r30;
        java.sql.ResultSet r31;

        r0 := @this: org.quartz.impl.jdbcjobstore.SimpleTriggerPersistenceDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.TriggerKey;

        r30 = null;

        r31 = null;

     label1:
        $r9 = r0.<org.quartz.impl.jdbcjobstore.SimpleTriggerPersistenceDelegate: java.lang.String tablePrefix>;

        $r8 = r0.<org.quartz.impl.jdbcjobstore.SimpleTriggerPersistenceDelegate: java.lang.String schedNameLiteral>;

        $r10 = staticinvoke <org.quartz.impl.jdbcjobstore.Util: java.lang.String rtp(java.lang.String,java.lang.String,java.lang.String)>("SELECT * FROM {0}SIMPLE_TRIGGERS WHERE SCHED_NAME = {1} AND TRIGGER_NAME = ? AND TRIGGER_GROUP = ?", $r9, $r8);

        r30 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r10);

        $r11 = virtualinvoke r2.<org.quartz.TriggerKey: java.lang.String getName()>();

        interfaceinvoke r30.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, $r11);

        $r12 = virtualinvoke r2.<org.quartz.TriggerKey: java.lang.String getGroup()>();

        interfaceinvoke r30.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(2, $r12);

        r31 = interfaceinvoke r30.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

        $z0 = interfaceinvoke r31.<java.sql.ResultSet: boolean next()>();

        if $z0 == 0 goto label3;

        i0 = interfaceinvoke r31.<java.sql.ResultSet: int getInt(java.lang.String)>("REPEAT_COUNT");

        l1 = interfaceinvoke r31.<java.sql.ResultSet: long getLong(java.lang.String)>("REPEAT_INTERVAL");

        i2 = interfaceinvoke r31.<java.sql.ResultSet: int getInt(java.lang.String)>("TIMES_TRIGGERED");

        $r23 = staticinvoke <org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder simpleSchedule()>();

        $r24 = virtualinvoke $r23.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder withRepeatCount(int)>(i0);

        r3 = virtualinvoke $r24.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder withIntervalInMilliseconds(long)>(l1);

        $r25 = newarray (java.lang.String)[1];

        $r25[0] = "timesTriggered";

        $r26 = newarray (java.lang.Object)[1];

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r26[0] = $r27;

        $r28 = new org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate$TriggerPropertyBundle;

        specialinvoke $r28.<org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate$TriggerPropertyBundle: void <init>(org.quartz.ScheduleBuilder,java.lang.String[],java.lang.Object[])>(r3, $r25, $r26);

     label2:
        staticinvoke <org.quartz.impl.jdbcjobstore.Util: void closeResultSet(java.sql.ResultSet)>(r31);

        staticinvoke <org.quartz.impl.jdbcjobstore.Util: void closeStatement(java.sql.Statement)>(r30);

        return $r28;

     label3:
        $r13 = new java.lang.IllegalStateException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No record found for selection of Trigger with key: \'");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' and statement: ");

        $r19 = r0.<org.quartz.impl.jdbcjobstore.SimpleTriggerPersistenceDelegate: java.lang.String tablePrefix>;

        $r18 = r0.<org.quartz.impl.jdbcjobstore.SimpleTriggerPersistenceDelegate: java.lang.String schedNameLiteral>;

        $r20 = staticinvoke <org.quartz.impl.jdbcjobstore.Util: java.lang.String rtp(java.lang.String,java.lang.String,java.lang.String)>("SELECT * FROM {0}SIMPLE_TRIGGERS WHERE SCHED_NAME = {1} AND TRIGGER_NAME = ? AND TRIGGER_GROUP = ?", $r19, $r18);

        $r21 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r22);

        throw $r13;

     label4:
        $r29 := @caughtexception;

     label5:
        staticinvoke <org.quartz.impl.jdbcjobstore.Util: void closeResultSet(java.sql.ResultSet)>(r31);

        staticinvoke <org.quartz.impl.jdbcjobstore.Util: void closeStatement(java.sql.Statement)>(r30);

        throw $r29;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label5 with label4;
    }

    public int updateExtendedTriggerProperties(java.sql.Connection, org.quartz.spi.OperableTrigger, java.lang.String, org.quartz.JobDetail) throws java.sql.SQLException, java.io.IOException
    {
        org.quartz.impl.jdbcjobstore.SimpleTriggerPersistenceDelegate r0;
        java.sql.Connection r1;
        org.quartz.spi.OperableTrigger r2;
        java.lang.String r3, $r7, $r8, $r9, $r11, $r13, $r15;
        org.quartz.JobDetail r4;
        org.quartz.SimpleTrigger r5;
        int i0, $i1, $i3;
        java.math.BigDecimal $r10;
        long $l2;
        org.quartz.TriggerKey $r12, $r14;
        java.lang.Throwable $r16;
        java.sql.PreparedStatement r17;

        r0 := @this: org.quartz.impl.jdbcjobstore.SimpleTriggerPersistenceDelegate;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: org.quartz.spi.OperableTrigger;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: org.quartz.JobDetail;

        r5 = (org.quartz.SimpleTrigger) r2;

        r17 = null;

     label1:
        $r8 = r0.<org.quartz.impl.jdbcjobstore.SimpleTriggerPersistenceDelegate: java.lang.String tablePrefix>;

        $r7 = r0.<org.quartz.impl.jdbcjobstore.SimpleTriggerPersistenceDelegate: java.lang.String schedNameLiteral>;

        $r9 = staticinvoke <org.quartz.impl.jdbcjobstore.Util: java.lang.String rtp(java.lang.String,java.lang.String,java.lang.String)>("UPDATE {0}SIMPLE_TRIGGERS SET REPEAT_COUNT = ?, REPEAT_INTERVAL = ?, TIMES_TRIGGERED = ? WHERE SCHED_NAME = {1} AND TRIGGER_NAME = ? AND TRIGGER_GROUP = ?", $r8, $r7);

        r17 = interfaceinvoke r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r9);

        $i1 = interfaceinvoke r5.<org.quartz.SimpleTrigger: int getRepeatCount()>();

        interfaceinvoke r17.<java.sql.PreparedStatement: void setInt(int,int)>(1, $i1);

        $r10 = new java.math.BigDecimal;

        $l2 = interfaceinvoke r5.<org.quartz.SimpleTrigger: long getRepeatInterval()>();

        $r11 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l2);

        specialinvoke $r10.<java.math.BigDecimal: void <init>(java.lang.String)>($r11);

        interfaceinvoke r17.<java.sql.PreparedStatement: void setBigDecimal(int,java.math.BigDecimal)>(2, $r10);

        $i3 = interfaceinvoke r5.<org.quartz.SimpleTrigger: int getTimesTriggered()>();

        interfaceinvoke r17.<java.sql.PreparedStatement: void setInt(int,int)>(3, $i3);

        $r12 = interfaceinvoke r5.<org.quartz.SimpleTrigger: org.quartz.TriggerKey getKey()>();

        $r13 = virtualinvoke $r12.<org.quartz.TriggerKey: java.lang.String getName()>();

        interfaceinvoke r17.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(4, $r13);

        $r14 = interfaceinvoke r5.<org.quartz.SimpleTrigger: org.quartz.TriggerKey getKey()>();

        $r15 = virtualinvoke $r14.<org.quartz.TriggerKey: java.lang.String getGroup()>();

        interfaceinvoke r17.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(5, $r15);

        i0 = interfaceinvoke r17.<java.sql.PreparedStatement: int executeUpdate()>();

     label2:
        staticinvoke <org.quartz.impl.jdbcjobstore.Util: void closeStatement(java.sql.Statement)>(r17);

        return i0;

     label3:
        $r16 := @caughtexception;

     label4:
        staticinvoke <org.quartz.impl.jdbcjobstore.Util: void closeStatement(java.sql.Statement)>(r17);

        throw $r16;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
}
