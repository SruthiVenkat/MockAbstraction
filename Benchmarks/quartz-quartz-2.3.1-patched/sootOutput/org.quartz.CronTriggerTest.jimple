public class org.quartz.CronTriggerTest extends org.quartz.SerializationTestSupport
{
    private static final java.lang.String[] VERSIONS;

    public void <init>()
    {
        org.quartz.CronTriggerTest r0;

        r0 := @this: org.quartz.CronTriggerTest;

        specialinvoke r0.<org.quartz.SerializationTestSupport: void <init>()>();

        return;
    }

    protected java.lang.String[] getVersions()
    {
        org.quartz.CronTriggerTest r0;
        java.lang.String[] $r1;

        r0 := @this: org.quartz.CronTriggerTest;

        $r1 = <org.quartz.CronTriggerTest: java.lang.String[] VERSIONS>;

        return $r1;
    }

    protected java.lang.Object getTargetObject() throws java.lang.Exception
    {
        org.quartz.CronTriggerTest r0;
        org.quartz.JobDataMap $r3;
        org.quartz.impl.triggers.CronTriggerImpl $r4;

        r0 := @this: org.quartz.CronTriggerTest;

        $r3 = new org.quartz.JobDataMap;

        specialinvoke $r3.<org.quartz.JobDataMap: void <init>()>();

        virtualinvoke $r3.<org.quartz.JobDataMap: void put(java.lang.String,java.lang.String)>("A", "B");

        $r4 = new org.quartz.impl.triggers.CronTriggerImpl;

        specialinvoke $r4.<org.quartz.impl.triggers.CronTriggerImpl: void <init>()>();

        virtualinvoke $r4.<org.quartz.impl.triggers.CronTriggerImpl: void setName(java.lang.String)>("test");

        virtualinvoke $r4.<org.quartz.impl.triggers.CronTriggerImpl: void setGroup(java.lang.String)>("testGroup");

        virtualinvoke $r4.<org.quartz.impl.triggers.CronTriggerImpl: void setCronExpression(java.lang.String)>("0 0 12 * * ?");

        virtualinvoke $r4.<org.quartz.impl.triggers.CronTriggerImpl: void setCalendarName(java.lang.String)>("MyCalendar");

        virtualinvoke $r4.<org.quartz.impl.triggers.CronTriggerImpl: void setDescription(java.lang.String)>("CronTriggerDesc");

        virtualinvoke $r4.<org.quartz.impl.triggers.CronTriggerImpl: void setJobDataMap(org.quartz.JobDataMap)>($r3);

        return $r4;
    }

    protected void verifyMatch(java.lang.Object, java.lang.Object)
    {
        org.quartz.CronTriggerTest r0;
        java.lang.Object r1, r2;
        org.quartz.impl.triggers.CronTriggerImpl r3, r4;
        java.lang.String $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r15, $r16, $r17, $r18, $r21, $r22;
        java.util.Date $r13, $r14;
        org.quartz.JobDataMap $r19, $r20;

        r0 := @this: org.quartz.CronTriggerTest;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 = (org.quartz.impl.triggers.CronTriggerImpl) r1;

        r4 = (org.quartz.impl.triggers.CronTriggerImpl) r2;

        staticinvoke <org.quartz.CronTriggerTest: void assertNotNull(java.lang.Object)>(r4);

        $r5 = virtualinvoke r3.<org.quartz.impl.triggers.CronTriggerImpl: java.lang.String getName()>();

        $r6 = virtualinvoke r4.<org.quartz.impl.triggers.CronTriggerImpl: java.lang.String getName()>();

        staticinvoke <org.quartz.CronTriggerTest: void assertEquals(java.lang.String,java.lang.String)>($r5, $r6);

        $r7 = virtualinvoke r3.<org.quartz.impl.triggers.CronTriggerImpl: java.lang.String getGroup()>();

        $r8 = virtualinvoke r4.<org.quartz.impl.triggers.CronTriggerImpl: java.lang.String getGroup()>();

        staticinvoke <org.quartz.CronTriggerTest: void assertEquals(java.lang.String,java.lang.String)>($r7, $r8);

        $r9 = virtualinvoke r3.<org.quartz.impl.triggers.CronTriggerImpl: java.lang.String getJobName()>();

        $r10 = virtualinvoke r4.<org.quartz.impl.triggers.CronTriggerImpl: java.lang.String getJobName()>();

        staticinvoke <org.quartz.CronTriggerTest: void assertEquals(java.lang.String,java.lang.String)>($r9, $r10);

        $r11 = virtualinvoke r3.<org.quartz.impl.triggers.CronTriggerImpl: java.lang.String getJobGroup()>();

        $r12 = virtualinvoke r4.<org.quartz.impl.triggers.CronTriggerImpl: java.lang.String getJobGroup()>();

        staticinvoke <org.quartz.CronTriggerTest: void assertEquals(java.lang.String,java.lang.String)>($r11, $r12);

        $r13 = virtualinvoke r3.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date getEndTime()>();

        $r14 = virtualinvoke r4.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date getEndTime()>();

        staticinvoke <org.quartz.CronTriggerTest: void assertEquals(java.lang.Object,java.lang.Object)>($r13, $r14);

        $r15 = virtualinvoke r3.<org.quartz.impl.triggers.CronTriggerImpl: java.lang.String getCalendarName()>();

        $r16 = virtualinvoke r4.<org.quartz.impl.triggers.CronTriggerImpl: java.lang.String getCalendarName()>();

        staticinvoke <org.quartz.CronTriggerTest: void assertEquals(java.lang.String,java.lang.String)>($r15, $r16);

        $r17 = virtualinvoke r3.<org.quartz.impl.triggers.CronTriggerImpl: java.lang.String getDescription()>();

        $r18 = virtualinvoke r4.<org.quartz.impl.triggers.CronTriggerImpl: java.lang.String getDescription()>();

        staticinvoke <org.quartz.CronTriggerTest: void assertEquals(java.lang.String,java.lang.String)>($r17, $r18);

        $r19 = virtualinvoke r3.<org.quartz.impl.triggers.CronTriggerImpl: org.quartz.JobDataMap getJobDataMap()>();

        $r20 = virtualinvoke r4.<org.quartz.impl.triggers.CronTriggerImpl: org.quartz.JobDataMap getJobDataMap()>();

        staticinvoke <org.quartz.CronTriggerTest: void assertEquals(java.lang.Object,java.lang.Object)>($r19, $r20);

        $r21 = virtualinvoke r3.<org.quartz.impl.triggers.CronTriggerImpl: java.lang.String getCronExpression()>();

        $r22 = virtualinvoke r4.<org.quartz.impl.triggers.CronTriggerImpl: java.lang.String getCronExpression()>();

        staticinvoke <org.quartz.CronTriggerTest: void assertEquals(java.lang.String,java.lang.String)>($r21, $r22);

        return;
    }

    public void testClone() throws java.text.ParseException
    {
        org.quartz.CronTriggerTest r0;
        org.quartz.CronTrigger r2;
        org.quartz.impl.triggers.CronTriggerImpl $r3;
        java.lang.Object $r4;
        java.lang.String $r5;

        r0 := @this: org.quartz.CronTriggerTest;

        $r3 = new org.quartz.impl.triggers.CronTriggerImpl;

        specialinvoke $r3.<org.quartz.impl.triggers.CronTriggerImpl: void <init>()>();

        virtualinvoke $r3.<org.quartz.impl.triggers.CronTriggerImpl: void setName(java.lang.String)>("test");

        virtualinvoke $r3.<org.quartz.impl.triggers.CronTriggerImpl: void setGroup(java.lang.String)>("testGroup");

        virtualinvoke $r3.<org.quartz.impl.triggers.CronTriggerImpl: void setCronExpression(java.lang.String)>("0 0 12 * * ?");

        $r4 = virtualinvoke $r3.<org.quartz.impl.triggers.CronTriggerImpl: java.lang.Object clone()>();

        r2 = (org.quartz.CronTrigger) $r4;

        staticinvoke <org.quartz.CronTriggerTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Cloning failed", $r3, r2);

        $r5 = interfaceinvoke r2.<org.quartz.CronTrigger: java.lang.String getCronExpression()>();

        staticinvoke <org.quartz.CronTriggerTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("Cloning failed for the cron expression", "0 0 12 * * ?", $r5);

        return;
    }

    public void testQuartz558() throws java.text.ParseException
    {
        org.quartz.CronTriggerTest r0;
        org.quartz.CronTrigger r2;
        org.quartz.impl.triggers.CronTriggerImpl $r3;
        java.lang.Object $r4;

        r0 := @this: org.quartz.CronTriggerTest;

        $r3 = new org.quartz.impl.triggers.CronTriggerImpl;

        specialinvoke $r3.<org.quartz.impl.triggers.CronTriggerImpl: void <init>()>();

        virtualinvoke $r3.<org.quartz.impl.triggers.CronTriggerImpl: void setName(java.lang.String)>("test");

        virtualinvoke $r3.<org.quartz.impl.triggers.CronTriggerImpl: void setGroup(java.lang.String)>("testGroup");

        $r4 = virtualinvoke $r3.<org.quartz.impl.triggers.CronTriggerImpl: java.lang.Object clone()>();

        r2 = (org.quartz.CronTrigger) $r4;

        staticinvoke <org.quartz.CronTriggerTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Cloning failed", $r3, r2);

        return;
    }

    public void testMisfireInstructionValidity() throws java.text.ParseException
    {
        org.quartz.CronTriggerTest r0;
        org.quartz.impl.triggers.CronTriggerImpl $r2;
        java.lang.Exception $r3, $r4;

        r0 := @this: org.quartz.CronTriggerTest;

        $r2 = new org.quartz.impl.triggers.CronTriggerImpl;

        specialinvoke $r2.<org.quartz.impl.triggers.CronTriggerImpl: void <init>()>();

     label1:
        virtualinvoke $r2.<org.quartz.impl.triggers.CronTriggerImpl: void setMisfireInstruction(int)>(-1);

        virtualinvoke $r2.<org.quartz.impl.triggers.CronTriggerImpl: void setMisfireInstruction(int)>(0);

        virtualinvoke $r2.<org.quartz.impl.triggers.CronTriggerImpl: void setMisfireInstruction(int)>(2);

        virtualinvoke $r2.<org.quartz.impl.triggers.CronTriggerImpl: void setMisfireInstruction(int)>(1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        staticinvoke <org.quartz.CronTriggerTest: void fail(java.lang.String)>("Unexpected exception while setting misfire instruction.");

     label4:
        virtualinvoke $r2.<org.quartz.impl.triggers.CronTriggerImpl: void setMisfireInstruction(int)>(3);

        staticinvoke <org.quartz.CronTriggerTest: void fail(java.lang.String)>("Expected exception while setting invalid misfire instruction but did not get it.");

     label5:
        goto label7;

     label6:
        $r3 := @caughtexception;

     label7:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Exception from label4 to label5 with label6;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        java.lang.String[] r0;
        org.quartz.CronTriggerTest $r1;

        r0 := @parameter0: java.lang.String[];

        $r1 = new org.quartz.CronTriggerTest;

        specialinvoke $r1.<org.quartz.CronTriggerTest: void <init>()>();

        virtualinvoke $r1.<org.quartz.CronTriggerTest: void writeJobDataFile(java.lang.String)>("2.0");

        return;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;

        $r0 = newarray (java.lang.String)[1];

        $r0[0] = "2.0";

        <org.quartz.CronTriggerTest: java.lang.String[] VERSIONS> = $r0;

        return;
    }
}
