public interface  org.quartz.Scheduler extends java.lang.Object
{
    public static final java.lang.String DEFAULT_GROUP;
    public static final java.lang.String DEFAULT_RECOVERY_GROUP;
    public static final java.lang.String DEFAULT_FAIL_OVER_GROUP;
    public static final java.lang.String FAILED_JOB_ORIGINAL_TRIGGER_NAME;
    public static final java.lang.String FAILED_JOB_ORIGINAL_TRIGGER_GROUP;
    public static final java.lang.String FAILED_JOB_ORIGINAL_TRIGGER_FIRETIME_IN_MILLISECONDS;
    public static final java.lang.String FAILED_JOB_ORIGINAL_TRIGGER_SCHEDULED_FIRETIME_IN_MILLISECONDS;

    public abstract java.lang.String getSchedulerName() throws org.quartz.SchedulerException;

    public abstract java.lang.String getSchedulerInstanceId() throws org.quartz.SchedulerException;

    public abstract org.quartz.SchedulerContext getContext() throws org.quartz.SchedulerException;

    public abstract void start() throws org.quartz.SchedulerException;

    public abstract void startDelayed(int) throws org.quartz.SchedulerException;

    public abstract boolean isStarted() throws org.quartz.SchedulerException;

    public abstract void standby() throws org.quartz.SchedulerException;

    public abstract boolean isInStandbyMode() throws org.quartz.SchedulerException;

    public abstract void shutdown() throws org.quartz.SchedulerException;

    public abstract void shutdown(boolean) throws org.quartz.SchedulerException;

    public abstract boolean isShutdown() throws org.quartz.SchedulerException;

    public abstract org.quartz.SchedulerMetaData getMetaData() throws org.quartz.SchedulerException;

    public abstract java.util.List getCurrentlyExecutingJobs() throws org.quartz.SchedulerException;

    public abstract void setJobFactory(org.quartz.spi.JobFactory) throws org.quartz.SchedulerException;

    public abstract org.quartz.ListenerManager getListenerManager() throws org.quartz.SchedulerException;

    public abstract java.util.Date scheduleJob(org.quartz.JobDetail, org.quartz.Trigger) throws org.quartz.SchedulerException;

    public abstract java.util.Date scheduleJob(org.quartz.Trigger) throws org.quartz.SchedulerException;

    public abstract void scheduleJobs(java.util.Map, boolean) throws org.quartz.SchedulerException;

    public abstract void scheduleJob(org.quartz.JobDetail, java.util.Set, boolean) throws org.quartz.SchedulerException;

    public abstract boolean unscheduleJob(org.quartz.TriggerKey) throws org.quartz.SchedulerException;

    public abstract boolean unscheduleJobs(java.util.List) throws org.quartz.SchedulerException;

    public abstract java.util.Date rescheduleJob(org.quartz.TriggerKey, org.quartz.Trigger) throws org.quartz.SchedulerException;

    public abstract void addJob(org.quartz.JobDetail, boolean) throws org.quartz.SchedulerException;

    public abstract void addJob(org.quartz.JobDetail, boolean, boolean) throws org.quartz.SchedulerException;

    public abstract boolean deleteJob(org.quartz.JobKey) throws org.quartz.SchedulerException;

    public abstract boolean deleteJobs(java.util.List) throws org.quartz.SchedulerException;

    public abstract void triggerJob(org.quartz.JobKey) throws org.quartz.SchedulerException;

    public abstract void triggerJob(org.quartz.JobKey, org.quartz.JobDataMap) throws org.quartz.SchedulerException;

    public abstract void pauseJob(org.quartz.JobKey) throws org.quartz.SchedulerException;

    public abstract void pauseJobs(org.quartz.impl.matchers.GroupMatcher) throws org.quartz.SchedulerException;

    public abstract void pauseTrigger(org.quartz.TriggerKey) throws org.quartz.SchedulerException;

    public abstract void pauseTriggers(org.quartz.impl.matchers.GroupMatcher) throws org.quartz.SchedulerException;

    public abstract void resumeJob(org.quartz.JobKey) throws org.quartz.SchedulerException;

    public abstract void resumeJobs(org.quartz.impl.matchers.GroupMatcher) throws org.quartz.SchedulerException;

    public abstract void resumeTrigger(org.quartz.TriggerKey) throws org.quartz.SchedulerException;

    public abstract void resumeTriggers(org.quartz.impl.matchers.GroupMatcher) throws org.quartz.SchedulerException;

    public abstract void pauseAll() throws org.quartz.SchedulerException;

    public abstract void resumeAll() throws org.quartz.SchedulerException;

    public abstract java.util.List getJobGroupNames() throws org.quartz.SchedulerException;

    public abstract java.util.Set getJobKeys(org.quartz.impl.matchers.GroupMatcher) throws org.quartz.SchedulerException;

    public abstract java.util.List getTriggersOfJob(org.quartz.JobKey) throws org.quartz.SchedulerException;

    public abstract java.util.List getTriggerGroupNames() throws org.quartz.SchedulerException;

    public abstract java.util.Set getTriggerKeys(org.quartz.impl.matchers.GroupMatcher) throws org.quartz.SchedulerException;

    public abstract java.util.Set getPausedTriggerGroups() throws org.quartz.SchedulerException;

    public abstract org.quartz.JobDetail getJobDetail(org.quartz.JobKey) throws org.quartz.SchedulerException;

    public abstract org.quartz.Trigger getTrigger(org.quartz.TriggerKey) throws org.quartz.SchedulerException;

    public abstract org.quartz.Trigger$TriggerState getTriggerState(org.quartz.TriggerKey) throws org.quartz.SchedulerException;

    public abstract void resetTriggerFromErrorState(org.quartz.TriggerKey) throws org.quartz.SchedulerException;

    public abstract void addCalendar(java.lang.String, org.quartz.Calendar, boolean, boolean) throws org.quartz.SchedulerException;

    public abstract boolean deleteCalendar(java.lang.String) throws org.quartz.SchedulerException;

    public abstract org.quartz.Calendar getCalendar(java.lang.String) throws org.quartz.SchedulerException;

    public abstract java.util.List getCalendarNames() throws org.quartz.SchedulerException;

    public abstract boolean interrupt(org.quartz.JobKey) throws org.quartz.UnableToInterruptJobException;

    public abstract boolean interrupt(java.lang.String) throws org.quartz.UnableToInterruptJobException;

    public abstract boolean checkExists(org.quartz.JobKey) throws org.quartz.SchedulerException;

    public abstract boolean checkExists(org.quartz.TriggerKey) throws org.quartz.SchedulerException;

    public abstract void clear() throws org.quartz.SchedulerException;

    public static void <clinit>()
    {
        <org.quartz.Scheduler: java.lang.String FAILED_JOB_ORIGINAL_TRIGGER_SCHEDULED_FIRETIME_IN_MILLISECONDS> = "QRTZ_FAILED_JOB_ORIG_TRIGGER_SCHEDULED_FIRETIME_IN_MILLISECONDS_AS_STRING";

        <org.quartz.Scheduler: java.lang.String FAILED_JOB_ORIGINAL_TRIGGER_FIRETIME_IN_MILLISECONDS> = "QRTZ_FAILED_JOB_ORIG_TRIGGER_FIRETIME_IN_MILLISECONDS_AS_STRING";

        <org.quartz.Scheduler: java.lang.String FAILED_JOB_ORIGINAL_TRIGGER_GROUP> = "QRTZ_FAILED_JOB_ORIG_TRIGGER_GROUP";

        <org.quartz.Scheduler: java.lang.String FAILED_JOB_ORIGINAL_TRIGGER_NAME> = "QRTZ_FAILED_JOB_ORIG_TRIGGER_NAME";

        <org.quartz.Scheduler: java.lang.String DEFAULT_FAIL_OVER_GROUP> = "FAILED_OVER_JOBS";

        <org.quartz.Scheduler: java.lang.String DEFAULT_RECOVERY_GROUP> = "RECOVERING_JOBS";

        <org.quartz.Scheduler: java.lang.String DEFAULT_GROUP> = "DEFAULT";

        return;
    }
}
