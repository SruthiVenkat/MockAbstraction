public class org.quartz.utils.counter.sampled.SampledRateCounterConfig extends org.quartz.utils.counter.sampled.SampledCounterConfig
{
    private final long initialNumeratorValue;
    private final long initialDenominatorValue;

    public void <init>(int, int, boolean)
    {
        org.quartz.utils.counter.sampled.SampledRateCounterConfig r0;
        int i0, i1;
        boolean z0;

        r0 := @this: org.quartz.utils.counter.sampled.SampledRateCounterConfig;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<org.quartz.utils.counter.sampled.SampledRateCounterConfig: void <init>(int,int,boolean,long,long)>(i0, i1, z0, 0L, 0L);

        return;
    }

    public void <init>(int, int, boolean, long, long)
    {
        org.quartz.utils.counter.sampled.SampledRateCounterConfig r0;
        int i0, i1;
        boolean z0;
        long l2, l3;

        r0 := @this: org.quartz.utils.counter.sampled.SampledRateCounterConfig;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        l2 := @parameter3: long;

        l3 := @parameter4: long;

        specialinvoke r0.<org.quartz.utils.counter.sampled.SampledCounterConfig: void <init>(int,int,boolean,long)>(i0, i1, z0, 0L);

        r0.<org.quartz.utils.counter.sampled.SampledRateCounterConfig: long initialNumeratorValue> = l2;

        r0.<org.quartz.utils.counter.sampled.SampledRateCounterConfig: long initialDenominatorValue> = l3;

        return;
    }

    public org.quartz.utils.counter.Counter createCounter()
    {
        org.quartz.utils.counter.sampled.SampledRateCounterConfig r0;
        org.quartz.utils.counter.sampled.SampledRateCounterImpl $r2;
        long $l0, $l1;

        r0 := @this: org.quartz.utils.counter.sampled.SampledRateCounterConfig;

        $r2 = new org.quartz.utils.counter.sampled.SampledRateCounterImpl;

        specialinvoke $r2.<org.quartz.utils.counter.sampled.SampledRateCounterImpl: void <init>(org.quartz.utils.counter.sampled.SampledRateCounterConfig)>(r0);

        $l1 = r0.<org.quartz.utils.counter.sampled.SampledRateCounterConfig: long initialNumeratorValue>;

        $l0 = r0.<org.quartz.utils.counter.sampled.SampledRateCounterConfig: long initialDenominatorValue>;

        virtualinvoke $r2.<org.quartz.utils.counter.sampled.SampledRateCounterImpl: void setValue(long,long)>($l1, $l0);

        return $r2;
    }
}
