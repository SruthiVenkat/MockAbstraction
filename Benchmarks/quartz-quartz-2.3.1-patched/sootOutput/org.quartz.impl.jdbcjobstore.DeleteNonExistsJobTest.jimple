public class org.quartz.impl.jdbcjobstore.DeleteNonExistsJobTest extends java.lang.Object
{
    private static org.slf4j.Logger LOG;
    private static java.lang.String DB_NAME;
    private static java.lang.String SCHEDULER_NAME;
    private static org.quartz.Scheduler scheduler;

    public void <init>()
    {
        org.quartz.impl.jdbcjobstore.DeleteNonExistsJobTest r0;

        r0 := @this: org.quartz.impl.jdbcjobstore.DeleteNonExistsJobTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void beforeClass() throws java.lang.Exception
    {
        java.lang.String $r0;

        $r0 = <org.quartz.impl.jdbcjobstore.DeleteNonExistsJobTest: java.lang.String DB_NAME>;

        staticinvoke <org.quartz.impl.jdbcjobstore.JdbcQuartzTestUtilities: void createDatabase(java.lang.String)>($r0);

        return;
    }

    public void beforeTest() throws java.lang.Exception
    {
        org.quartz.impl.jdbcjobstore.DeleteNonExistsJobTest r0;
        org.quartz.impl.jdbcjobstore.JobStoreTX $r2;
        java.lang.String $r3, $r6, $r8;
        org.quartz.impl.DirectSchedulerFactory $r4;
        org.quartz.simpl.SimpleThreadPool $r5;
        org.quartz.impl.SchedulerRepository $r7;
        org.quartz.Scheduler $r9;

        r0 := @this: org.quartz.impl.jdbcjobstore.DeleteNonExistsJobTest;

        specialinvoke r0.<org.quartz.impl.jdbcjobstore.DeleteNonExistsJobTest: void resetDatabaseData()>();

        $r2 = new org.quartz.impl.jdbcjobstore.JobStoreTX;

        specialinvoke $r2.<org.quartz.impl.jdbcjobstore.JobStoreTX: void <init>()>();

        $r3 = <org.quartz.impl.jdbcjobstore.DeleteNonExistsJobTest: java.lang.String DB_NAME>;

        virtualinvoke $r2.<org.quartz.impl.jdbcjobstore.JobStoreTX: void setDataSource(java.lang.String)>($r3);

        virtualinvoke $r2.<org.quartz.impl.jdbcjobstore.JobStoreTX: void setTablePrefix(java.lang.String)>("QRTZ_");

        virtualinvoke $r2.<org.quartz.impl.jdbcjobstore.JobStoreTX: void setInstanceId(java.lang.String)>("AUTO");

        $r4 = staticinvoke <org.quartz.impl.DirectSchedulerFactory: org.quartz.impl.DirectSchedulerFactory getInstance()>();

        $r6 = <org.quartz.impl.jdbcjobstore.DeleteNonExistsJobTest: java.lang.String SCHEDULER_NAME>;

        $r5 = new org.quartz.simpl.SimpleThreadPool;

        specialinvoke $r5.<org.quartz.simpl.SimpleThreadPool: void <init>(int,int)>(4, 5);

        virtualinvoke $r4.<org.quartz.impl.DirectSchedulerFactory: void createScheduler(java.lang.String,java.lang.String,org.quartz.spi.ThreadPool,org.quartz.spi.JobStore)>($r6, "AUTO", $r5, $r2);

        $r7 = staticinvoke <org.quartz.impl.SchedulerRepository: org.quartz.impl.SchedulerRepository getInstance()>();

        $r8 = <org.quartz.impl.jdbcjobstore.DeleteNonExistsJobTest: java.lang.String SCHEDULER_NAME>;

        $r9 = virtualinvoke $r7.<org.quartz.impl.SchedulerRepository: org.quartz.Scheduler lookup(java.lang.String)>($r8);

        <org.quartz.impl.jdbcjobstore.DeleteNonExistsJobTest: org.quartz.Scheduler scheduler> = $r9;

        return;
    }

    private void resetDatabaseData() throws java.lang.Exception
    {
        org.quartz.impl.jdbcjobstore.DeleteNonExistsJobTest r0;
        java.sql.Connection r1;
        java.sql.Statement r2;
        org.quartz.utils.DBConnectionManager $r3;
        java.lang.String $r4;

        r0 := @this: org.quartz.impl.jdbcjobstore.DeleteNonExistsJobTest;

        $r3 = staticinvoke <org.quartz.utils.DBConnectionManager: org.quartz.utils.DBConnectionManager getInstance()>();

        $r4 = <org.quartz.impl.jdbcjobstore.DeleteNonExistsJobTest: java.lang.String DB_NAME>;

        r1 = virtualinvoke $r3.<org.quartz.utils.DBConnectionManager: java.sql.Connection getConnection(java.lang.String)>($r4);

        r2 = interfaceinvoke r1.<java.sql.Connection: java.sql.Statement createStatement()>();

        interfaceinvoke r2.<java.sql.Statement: void addBatch(java.lang.String)>("delete from qrtz_fired_triggers");

        interfaceinvoke r2.<java.sql.Statement: void addBatch(java.lang.String)>("delete from qrtz_paused_trigger_grps");

        interfaceinvoke r2.<java.sql.Statement: void addBatch(java.lang.String)>("delete from qrtz_scheduler_state");

        interfaceinvoke r2.<java.sql.Statement: void addBatch(java.lang.String)>("delete from qrtz_locks");

        interfaceinvoke r2.<java.sql.Statement: void addBatch(java.lang.String)>("delete from qrtz_simple_triggers");

        interfaceinvoke r2.<java.sql.Statement: void addBatch(java.lang.String)>("delete from qrtz_simprop_triggers");

        interfaceinvoke r2.<java.sql.Statement: void addBatch(java.lang.String)>("delete from qrtz_blob_triggers");

        interfaceinvoke r2.<java.sql.Statement: void addBatch(java.lang.String)>("delete from qrtz_cron_triggers");

        interfaceinvoke r2.<java.sql.Statement: void addBatch(java.lang.String)>("delete from qrtz_triggers");

        interfaceinvoke r2.<java.sql.Statement: void addBatch(java.lang.String)>("delete from qrtz_job_details");

        interfaceinvoke r2.<java.sql.Statement: void addBatch(java.lang.String)>("delete from qrtz_calendars");

        interfaceinvoke r2.<java.sql.Statement: int[] executeBatch()>();

        interfaceinvoke r2.<java.sql.Statement: void close()>();

        interfaceinvoke r1.<java.sql.Connection: void close()>();

        return;
    }

    public void afterTest() throws java.lang.Exception
    {
        org.quartz.impl.jdbcjobstore.DeleteNonExistsJobTest r0;
        org.quartz.Scheduler $r1;

        r0 := @this: org.quartz.impl.jdbcjobstore.DeleteNonExistsJobTest;

        $r1 = <org.quartz.impl.jdbcjobstore.DeleteNonExistsJobTest: org.quartz.Scheduler scheduler>;

        interfaceinvoke $r1.<org.quartz.Scheduler: void shutdown(boolean)>(1);

        return;
    }

    public void deleteJobDetailOnly() throws java.lang.Exception
    {
        org.quartz.impl.jdbcjobstore.DeleteNonExistsJobTest r0;
        org.quartz.JobDetail r1;
        org.quartz.JobBuilder $r2, $r3, $r4;
        org.quartz.Scheduler $r5, $r6;
        org.quartz.JobKey $r7;

        r0 := @this: org.quartz.impl.jdbcjobstore.DeleteNonExistsJobTest;

        $r2 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob(java.lang.Class)>(class "Lorg/quartz/impl/jdbcjobstore/DeleteNonExistsJobTest$TestJob;");

        $r3 = virtualinvoke $r2.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String)>("testjob");

        $r4 = virtualinvoke $r3.<org.quartz.JobBuilder: org.quartz.JobBuilder storeDurably()>();

        r1 = virtualinvoke $r4.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        $r5 = <org.quartz.impl.jdbcjobstore.DeleteNonExistsJobTest: org.quartz.Scheduler scheduler>;

        interfaceinvoke $r5.<org.quartz.Scheduler: void addJob(org.quartz.JobDetail,boolean)>(r1, 1);

        specialinvoke r0.<org.quartz.impl.jdbcjobstore.DeleteNonExistsJobTest: void modifyStoredJobClassName()>();

        $r6 = <org.quartz.impl.jdbcjobstore.DeleteNonExistsJobTest: org.quartz.Scheduler scheduler>;

        $r7 = interfaceinvoke r1.<org.quartz.JobDetail: org.quartz.JobKey getKey()>();

        interfaceinvoke $r6.<org.quartz.Scheduler: boolean deleteJob(org.quartz.JobKey)>($r7);

        return;
    }

    public void deleteJobDetailWithTrigger() throws java.lang.Exception
    {
        org.quartz.impl.jdbcjobstore.DeleteNonExistsJobTest r0;
        org.quartz.JobDetail r1;
        org.quartz.Trigger r2;
        org.quartz.JobBuilder $r3, $r4, $r5;
        org.quartz.TriggerBuilder $r6, $r7, $r9;
        org.quartz.CronScheduleBuilder $r8;
        org.quartz.Scheduler $r10, $r12;
        org.quartz.JobKey $r13;

        r0 := @this: org.quartz.impl.jdbcjobstore.DeleteNonExistsJobTest;

        $r3 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob(java.lang.Class)>(class "Lorg/quartz/impl/jdbcjobstore/DeleteNonExistsJobTest$TestJob;");

        $r4 = virtualinvoke $r3.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String)>("testjob2");

        $r5 = virtualinvoke $r4.<org.quartz.JobBuilder: org.quartz.JobBuilder storeDurably()>();

        r1 = virtualinvoke $r5.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        $r6 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r7 = virtualinvoke $r6.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String)>("testjob2");

        $r8 = staticinvoke <org.quartz.CronScheduleBuilder: org.quartz.CronScheduleBuilder cronSchedule(java.lang.String)>("* * * * * ?");

        $r9 = virtualinvoke $r7.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>($r8);

        r2 = virtualinvoke $r9.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        $r10 = <org.quartz.impl.jdbcjobstore.DeleteNonExistsJobTest: org.quartz.Scheduler scheduler>;

        interfaceinvoke $r10.<org.quartz.Scheduler: java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)>(r1, r2);

        specialinvoke r0.<org.quartz.impl.jdbcjobstore.DeleteNonExistsJobTest: void modifyStoredJobClassName()>();

        $r12 = <org.quartz.impl.jdbcjobstore.DeleteNonExistsJobTest: org.quartz.Scheduler scheduler>;

        $r13 = interfaceinvoke r1.<org.quartz.JobDetail: org.quartz.JobKey getKey()>();

        interfaceinvoke $r12.<org.quartz.Scheduler: boolean deleteJob(org.quartz.JobKey)>($r13);

        return;
    }

    public void deleteTrigger() throws java.lang.Exception
    {
        org.quartz.impl.jdbcjobstore.DeleteNonExistsJobTest r0;
        org.quartz.JobDetail r1;
        org.quartz.Trigger r2;
        org.quartz.JobBuilder $r3, $r4, $r5;
        org.quartz.TriggerBuilder $r6, $r7, $r9;
        org.quartz.CronScheduleBuilder $r8;
        org.quartz.Scheduler $r10, $r12;
        org.quartz.TriggerKey $r13;

        r0 := @this: org.quartz.impl.jdbcjobstore.DeleteNonExistsJobTest;

        $r3 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob(java.lang.Class)>(class "Lorg/quartz/impl/jdbcjobstore/DeleteNonExistsJobTest$TestJob;");

        $r4 = virtualinvoke $r3.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String)>("testjob3");

        $r5 = virtualinvoke $r4.<org.quartz.JobBuilder: org.quartz.JobBuilder storeDurably()>();

        r1 = virtualinvoke $r5.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        $r6 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r7 = virtualinvoke $r6.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String)>("testjob3");

        $r8 = staticinvoke <org.quartz.CronScheduleBuilder: org.quartz.CronScheduleBuilder cronSchedule(java.lang.String)>("* * * * * ?");

        $r9 = virtualinvoke $r7.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>($r8);

        r2 = virtualinvoke $r9.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        $r10 = <org.quartz.impl.jdbcjobstore.DeleteNonExistsJobTest: org.quartz.Scheduler scheduler>;

        interfaceinvoke $r10.<org.quartz.Scheduler: java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)>(r1, r2);

        specialinvoke r0.<org.quartz.impl.jdbcjobstore.DeleteNonExistsJobTest: void modifyStoredJobClassName()>();

        $r12 = <org.quartz.impl.jdbcjobstore.DeleteNonExistsJobTest: org.quartz.Scheduler scheduler>;

        $r13 = interfaceinvoke r2.<org.quartz.Trigger: org.quartz.TriggerKey getKey()>();

        interfaceinvoke $r12.<org.quartz.Scheduler: boolean unscheduleJob(org.quartz.TriggerKey)>($r13);

        return;
    }

    public void replaceJobDetail() throws java.lang.Exception
    {
        org.quartz.impl.jdbcjobstore.DeleteNonExistsJobTest r0;
        org.quartz.Trigger r1;
        org.quartz.JobBuilder $r2, $r3, $r4, $r11, $r12, $r13;
        org.quartz.TriggerBuilder $r5, $r6, $r8;
        org.quartz.CronScheduleBuilder $r7;
        org.quartz.Scheduler $r9, $r14;
        org.quartz.JobDetail r15, r16;

        r0 := @this: org.quartz.impl.jdbcjobstore.DeleteNonExistsJobTest;

        $r2 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob(java.lang.Class)>(class "Lorg/quartz/impl/jdbcjobstore/DeleteNonExistsJobTest$TestJob;");

        $r3 = virtualinvoke $r2.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String)>("testjob3");

        $r4 = virtualinvoke $r3.<org.quartz.JobBuilder: org.quartz.JobBuilder storeDurably()>();

        r15 = virtualinvoke $r4.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        $r5 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r6 = virtualinvoke $r5.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String)>("testjob3");

        $r7 = staticinvoke <org.quartz.CronScheduleBuilder: org.quartz.CronScheduleBuilder cronSchedule(java.lang.String)>("* * * * * ?");

        $r8 = virtualinvoke $r6.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>($r7);

        r1 = virtualinvoke $r8.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        $r9 = <org.quartz.impl.jdbcjobstore.DeleteNonExistsJobTest: org.quartz.Scheduler scheduler>;

        interfaceinvoke $r9.<org.quartz.Scheduler: java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)>(r15, r1);

        specialinvoke r0.<org.quartz.impl.jdbcjobstore.DeleteNonExistsJobTest: void modifyStoredJobClassName()>();

        $r11 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob(java.lang.Class)>(class "Lorg/quartz/impl/jdbcjobstore/DeleteNonExistsJobTest$TestJob;");

        $r12 = virtualinvoke $r11.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String)>("testjob3");

        $r13 = virtualinvoke $r12.<org.quartz.JobBuilder: org.quartz.JobBuilder storeDurably()>();

        r16 = virtualinvoke $r13.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        $r14 = <org.quartz.impl.jdbcjobstore.DeleteNonExistsJobTest: org.quartz.Scheduler scheduler>;

        interfaceinvoke $r14.<org.quartz.Scheduler: void addJob(org.quartz.JobDetail,boolean)>(r16, 1);

        return;
    }

    private void modifyStoredJobClassName() throws java.lang.Exception
    {
        org.quartz.impl.jdbcjobstore.DeleteNonExistsJobTest r0;
        java.sql.Connection r1;
        java.sql.Statement r2;
        org.quartz.utils.DBConnectionManager $r3;
        java.lang.String $r4;

        r0 := @this: org.quartz.impl.jdbcjobstore.DeleteNonExistsJobTest;

        $r3 = staticinvoke <org.quartz.utils.DBConnectionManager: org.quartz.utils.DBConnectionManager getInstance()>();

        $r4 = <org.quartz.impl.jdbcjobstore.DeleteNonExistsJobTest: java.lang.String DB_NAME>;

        r1 = virtualinvoke $r3.<org.quartz.utils.DBConnectionManager: java.sql.Connection getConnection(java.lang.String)>($r4);

        r2 = interfaceinvoke r1.<java.sql.Connection: java.sql.Statement createStatement()>();

        interfaceinvoke r2.<java.sql.Statement: int executeUpdate(java.lang.String)>("update qrtz_job_details set job_class_name=\'com.FakeNonExistsJob\'");

        interfaceinvoke r2.<java.sql.Statement: void close()>();

        interfaceinvoke r1.<java.sql.Connection: void close()>();

        return;
    }

    static org.slf4j.Logger access$000()
    {
        org.slf4j.Logger $r0;

        $r0 = <org.quartz.impl.jdbcjobstore.DeleteNonExistsJobTest: org.slf4j.Logger LOG>;

        return $r0;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/quartz/impl/jdbcjobstore/DeleteNonExistsJobTest;");

        <org.quartz.impl.jdbcjobstore.DeleteNonExistsJobTest: org.slf4j.Logger LOG> = $r0;

        <org.quartz.impl.jdbcjobstore.DeleteNonExistsJobTest: java.lang.String DB_NAME> = "DeleteNonExistsJobTestDatasase";

        <org.quartz.impl.jdbcjobstore.DeleteNonExistsJobTest: java.lang.String SCHEDULER_NAME> = "DeleteNonExistsJobTestScheduler";

        return;
    }
}
