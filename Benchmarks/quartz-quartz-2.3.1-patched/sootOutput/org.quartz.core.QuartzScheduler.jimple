public class org.quartz.core.QuartzScheduler extends java.lang.Object implements org.quartz.core.RemotableQuartzScheduler
{
    private static java.lang.String VERSION_MAJOR;
    private static java.lang.String VERSION_MINOR;
    private static java.lang.String VERSION_ITERATION;
    private org.quartz.core.QuartzSchedulerResources resources;
    private org.quartz.core.QuartzSchedulerThread schedThread;
    private java.lang.ThreadGroup threadGroup;
    private org.quartz.SchedulerContext context;
    private org.quartz.ListenerManager listenerManager;
    private java.util.HashMap internalJobListeners;
    private java.util.HashMap internalTriggerListeners;
    private java.util.ArrayList internalSchedulerListeners;
    private org.quartz.spi.JobFactory jobFactory;
    org.quartz.core.ExecutingJobsManager jobMgr;
    org.quartz.core.ErrorLogger errLogger;
    private org.quartz.spi.SchedulerSignaler signaler;
    private java.util.Random random;
    private java.util.ArrayList holdToPreventGC;
    private boolean signalOnSchedulingChange;
    private volatile boolean closed;
    private volatile boolean shuttingDown;
    private boolean boundRemotely;
    private org.quartz.core.jmx.QuartzSchedulerMBean jmxBean;
    private java.util.Date initialStart;
    private final org.slf4j.Logger log;

    public void <init>(org.quartz.core.QuartzSchedulerResources, long, long) throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.core.QuartzSchedulerResources r1;
        long l0, l1;
        org.quartz.spi.ThreadExecutor r2;
        org.quartz.SchedulerContext $r3;
        org.quartz.core.ListenerManagerImpl $r4;
        java.util.HashMap $r5, $r6;
        java.util.ArrayList $r7, $r10;
        org.quartz.simpl.PropertySettingJobFactory $r8;
        java.util.Random $r9;
        java.lang.Class $r11;
        org.slf4j.Logger $r12, $r22;
        org.quartz.spi.JobStore $r13, $r30;
        boolean $z0;
        org.quartz.core.QuartzSchedulerThread $r14, $r15, $r21, $r29;
        byte $b2;
        org.quartz.core.ExecutingJobsManager $r16, $r17;
        org.quartz.core.ErrorLogger $r18, $r19;
        org.quartz.core.SchedulerSignalerImpl $r20;
        java.lang.StringBuilder $r23, $r24, $r26, $r27;
        java.lang.String $r25, $r28;
        org.quartz.JobListener $r31;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: org.quartz.core.QuartzSchedulerResources;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new org.quartz.SchedulerContext;

        specialinvoke $r3.<org.quartz.SchedulerContext: void <init>()>();

        r0.<org.quartz.core.QuartzScheduler: org.quartz.SchedulerContext context> = $r3;

        $r4 = new org.quartz.core.ListenerManagerImpl;

        specialinvoke $r4.<org.quartz.core.ListenerManagerImpl: void <init>()>();

        r0.<org.quartz.core.QuartzScheduler: org.quartz.ListenerManager listenerManager> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>(int)>(10);

        r0.<org.quartz.core.QuartzScheduler: java.util.HashMap internalJobListeners> = $r5;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>(int)>(10);

        r0.<org.quartz.core.QuartzScheduler: java.util.HashMap internalTriggerListeners> = $r6;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>(int)>(10);

        r0.<org.quartz.core.QuartzScheduler: java.util.ArrayList internalSchedulerListeners> = $r7;

        $r8 = new org.quartz.simpl.PropertySettingJobFactory;

        specialinvoke $r8.<org.quartz.simpl.PropertySettingJobFactory: void <init>()>();

        r0.<org.quartz.core.QuartzScheduler: org.quartz.spi.JobFactory jobFactory> = $r8;

        r0.<org.quartz.core.QuartzScheduler: org.quartz.core.ExecutingJobsManager jobMgr> = null;

        r0.<org.quartz.core.QuartzScheduler: org.quartz.core.ErrorLogger errLogger> = null;

        $r9 = new java.util.Random;

        specialinvoke $r9.<java.util.Random: void <init>()>();

        r0.<org.quartz.core.QuartzScheduler: java.util.Random random> = $r9;

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>(int)>(5);

        r0.<org.quartz.core.QuartzScheduler: java.util.ArrayList holdToPreventGC> = $r10;

        r0.<org.quartz.core.QuartzScheduler: boolean signalOnSchedulingChange> = 1;

        r0.<org.quartz.core.QuartzScheduler: boolean closed> = 0;

        r0.<org.quartz.core.QuartzScheduler: boolean shuttingDown> = 0;

        r0.<org.quartz.core.QuartzScheduler: boolean boundRemotely> = 0;

        r0.<org.quartz.core.QuartzScheduler: org.quartz.core.jmx.QuartzSchedulerMBean jmxBean> = null;

        r0.<org.quartz.core.QuartzScheduler: java.util.Date initialStart> = null;

        $r11 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>($r11);

        r0.<org.quartz.core.QuartzScheduler: org.slf4j.Logger log> = $r12;

        r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources> = r1;

        $r13 = virtualinvoke r1.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        $z0 = $r13 instanceof org.quartz.JobListener;

        if $z0 == 0 goto label1;

        $r30 = virtualinvoke r1.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        $r31 = (org.quartz.JobListener) $r30;

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void addInternalJobListener(org.quartz.JobListener)>($r31);

     label1:
        $r14 = new org.quartz.core.QuartzSchedulerThread;

        specialinvoke $r14.<org.quartz.core.QuartzSchedulerThread: void <init>(org.quartz.core.QuartzScheduler,org.quartz.core.QuartzSchedulerResources)>(r0, r1);

        r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerThread schedThread> = $r14;

        r2 = virtualinvoke r1.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.ThreadExecutor getThreadExecutor()>();

        $r15 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerThread schedThread>;

        interfaceinvoke r2.<org.quartz.spi.ThreadExecutor: void execute(java.lang.Thread)>($r15);

        $b2 = l0 cmp 0L;

        if $b2 <= 0 goto label2;

        $r29 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerThread schedThread>;

        virtualinvoke $r29.<org.quartz.core.QuartzSchedulerThread: void setIdleWaitTime(long)>(l0);

     label2:
        $r16 = new org.quartz.core.ExecutingJobsManager;

        specialinvoke $r16.<org.quartz.core.ExecutingJobsManager: void <init>()>();

        r0.<org.quartz.core.QuartzScheduler: org.quartz.core.ExecutingJobsManager jobMgr> = $r16;

        $r17 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.ExecutingJobsManager jobMgr>;

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void addInternalJobListener(org.quartz.JobListener)>($r17);

        $r18 = new org.quartz.core.ErrorLogger;

        specialinvoke $r18.<org.quartz.core.ErrorLogger: void <init>()>();

        r0.<org.quartz.core.QuartzScheduler: org.quartz.core.ErrorLogger errLogger> = $r18;

        $r19 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.ErrorLogger errLogger>;

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void addInternalSchedulerListener(org.quartz.SchedulerListener)>($r19);

        $r20 = new org.quartz.core.SchedulerSignalerImpl;

        $r21 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerThread schedThread>;

        specialinvoke $r20.<org.quartz.core.SchedulerSignalerImpl: void <init>(org.quartz.core.QuartzScheduler,org.quartz.core.QuartzSchedulerThread)>(r0, $r21);

        r0.<org.quartz.core.QuartzScheduler: org.quartz.spi.SchedulerSignaler signaler> = $r20;

        $r22 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: org.slf4j.Logger getLog()>();

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Quartz Scheduler v.");

        $r25 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: java.lang.String getVersion()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" created.");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r22.<org.slf4j.Logger: void info(java.lang.String)>($r28);

        return;
    }

    public void initialize() throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.core.QuartzSchedulerResources $r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.slf4j.Logger $r2;
        java.lang.StringBuilder $r3, $r4, $r15;
        org.quartz.SchedulerMetaData $r5;
        java.lang.String $r6, $r7, $r13, $r14, $r16;
        java.lang.Class $r8, $r11, $r12;
        java.util.Date $r9, $r10;
        int $i0, $i1;
        java.lang.Exception $r17, $r19;
        org.quartz.SchedulerException $r18, $r20;

        r0 := @this: org.quartz.core.QuartzScheduler;

     label01:
        specialinvoke r0.<org.quartz.core.QuartzScheduler: void bind()>();

     label02:
        goto label04;

     label03:
        $r19 := @caughtexception;

        $r20 = new org.quartz.SchedulerException;

        specialinvoke $r20.<org.quartz.SchedulerException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to bind scheduler to RMI Registry.", $r19);

        throw $r20;

     label04:
        $r1 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $z0 = virtualinvoke $r1.<org.quartz.core.QuartzSchedulerResources: boolean getJMXExport()>();

        if $z0 == 0 goto label08;

     label05:
        specialinvoke r0.<org.quartz.core.QuartzScheduler: void registerJMX()>();

     label06:
        goto label08;

     label07:
        $r17 := @caughtexception;

        $r18 = new org.quartz.SchedulerException;

        specialinvoke $r18.<org.quartz.SchedulerException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to register scheduler with MBeanServer.", $r17);

        throw $r18;

     label08:
        $r2 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: org.slf4j.Logger getLog()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Scheduler meta-data: ");

        $r5 = new org.quartz.SchedulerMetaData;

        $r6 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: java.lang.String getSchedulerName()>();

        $r7 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: java.lang.String getSchedulerInstanceId()>();

        $r8 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = r0.<org.quartz.core.QuartzScheduler: boolean boundRemotely>;

        $r9 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: java.util.Date runningSince()>();

        if $r9 == null goto label09;

        $z6 = 1;

        goto label10;

     label09:
        $z6 = 0;

     label10:
        $z2 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: boolean isInStandbyMode()>();

        $z3 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: boolean isShutdown()>();

        $r10 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: java.util.Date runningSince()>();

        $i0 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: int numJobsExecuted()>();

        $r11 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: java.lang.Class getJobStoreClass()>();

        $z4 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: boolean supportsPersistence()>();

        $z5 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: boolean isClustered()>();

        $r12 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: java.lang.Class getThreadPoolClass()>();

        $i1 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: int getThreadPoolSize()>();

        $r13 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: java.lang.String getVersion()>();

        specialinvoke $r5.<org.quartz.SchedulerMetaData: void <init>(java.lang.String,java.lang.String,java.lang.Class,boolean,boolean,boolean,boolean,java.util.Date,int,java.lang.Class,boolean,boolean,java.lang.Class,int,java.lang.String)>($r6, $r7, $r8, $z1, $z6, $z2, $z3, $r10, $i0, $r11, $z4, $z5, $r12, $i1, $r13);

        $r14 = virtualinvoke $r5.<org.quartz.SchedulerMetaData: java.lang.String toString()>();

        $r15 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String)>($r16);

        return;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.Exception from label05 to label06 with label07;
    }

    public java.lang.String getVersion()
    {
        org.quartz.core.QuartzScheduler r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r6, $r7, $r9;
        java.lang.String $r2, $r5, $r8, $r10;

        r0 := @this: org.quartz.core.QuartzScheduler;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = staticinvoke <org.quartz.core.QuartzScheduler: java.lang.String getVersionMajor()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r5 = staticinvoke <org.quartz.core.QuartzScheduler: java.lang.String getVersionMinor()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r8 = staticinvoke <org.quartz.core.QuartzScheduler: java.lang.String getVersionIteration()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    public static java.lang.String getVersionMajor()
    {
        java.lang.String $r0;

        $r0 = <org.quartz.core.QuartzScheduler: java.lang.String VERSION_MAJOR>;

        return $r0;
    }

    public static java.lang.String getVersionMinor()
    {
        java.lang.String $r0;

        $r0 = <org.quartz.core.QuartzScheduler: java.lang.String VERSION_MINOR>;

        return $r0;
    }

    public static java.lang.String getVersionIteration()
    {
        java.lang.String $r0;

        $r0 = <org.quartz.core.QuartzScheduler: java.lang.String VERSION_ITERATION>;

        return $r0;
    }

    public org.quartz.spi.SchedulerSignaler getSchedulerSignaler()
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.spi.SchedulerSignaler $r1;

        r0 := @this: org.quartz.core.QuartzScheduler;

        $r1 = r0.<org.quartz.core.QuartzScheduler: org.quartz.spi.SchedulerSignaler signaler>;

        return $r1;
    }

    public org.slf4j.Logger getLog()
    {
        org.quartz.core.QuartzScheduler r0;
        org.slf4j.Logger $r1;

        r0 := @this: org.quartz.core.QuartzScheduler;

        $r1 = r0.<org.quartz.core.QuartzScheduler: org.slf4j.Logger log>;

        return $r1;
    }

    private void registerJMX() throws java.lang.Exception
    {
        org.quartz.core.QuartzScheduler r0;
        java.lang.String r1;
        javax.management.MBeanServer r2;
        org.quartz.core.QuartzSchedulerResources $r3;
        org.quartz.core.QuartzSchedulerMBeanImpl $r4;
        javax.management.ObjectName $r5;
        org.quartz.core.jmx.QuartzSchedulerMBean $r6;

        r0 := @this: org.quartz.core.QuartzScheduler;

        $r3 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        r1 = virtualinvoke $r3.<org.quartz.core.QuartzSchedulerResources: java.lang.String getJMXObjectName()>();

        r2 = staticinvoke <java.lang.management.ManagementFactory: javax.management.MBeanServer getPlatformMBeanServer()>();

        $r4 = new org.quartz.core.QuartzSchedulerMBeanImpl;

        specialinvoke $r4.<org.quartz.core.QuartzSchedulerMBeanImpl: void <init>(org.quartz.core.QuartzScheduler)>(r0);

        r0.<org.quartz.core.QuartzScheduler: org.quartz.core.jmx.QuartzSchedulerMBean jmxBean> = $r4;

        $r6 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.jmx.QuartzSchedulerMBean jmxBean>;

        $r5 = new javax.management.ObjectName;

        specialinvoke $r5.<javax.management.ObjectName: void <init>(java.lang.String)>(r1);

        interfaceinvoke r2.<javax.management.MBeanServer: javax.management.ObjectInstance registerMBean(java.lang.Object,javax.management.ObjectName)>($r6, $r5);

        return;
    }

    private void unregisterJMX() throws java.lang.Exception
    {
        org.quartz.core.QuartzScheduler r0;
        java.lang.String r1, $r11;
        javax.management.MBeanServer r2;
        org.quartz.core.QuartzSchedulerResources $r3;
        javax.management.ObjectName $r4;
        org.quartz.core.jmx.QuartzSchedulerMBean $r5;
        org.slf4j.Logger $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;

        r0 := @this: org.quartz.core.QuartzScheduler;

        $r3 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        r1 = virtualinvoke $r3.<org.quartz.core.QuartzSchedulerResources: java.lang.String getJMXObjectName()>();

        r2 = staticinvoke <java.lang.management.ManagementFactory: javax.management.MBeanServer getPlatformMBeanServer()>();

        $r4 = new javax.management.ObjectName;

        specialinvoke $r4.<javax.management.ObjectName: void <init>(java.lang.String)>(r1);

        interfaceinvoke r2.<javax.management.MBeanServer: void unregisterMBean(javax.management.ObjectName)>($r4);

        $r5 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.jmx.QuartzSchedulerMBean jmxBean>;

        interfaceinvoke $r5.<org.quartz.core.jmx.QuartzSchedulerMBean: void setSampledStatisticsEnabled(boolean)>(0);

        $r6 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: org.slf4j.Logger getLog()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Scheduler unregistered from name \'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' in the local MBeanServer.");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String)>($r11);

        return;
    }

    private void bind() throws java.rmi.RemoteException
    {
        org.quartz.core.QuartzScheduler r0;
        java.lang.String r1, $r6, $r8, $r10, r23, $r29;
        org.quartz.core.QuartzSchedulerResources $r2, $r3, $r5, $r7, $r9, $r11, $r12, $r13, $r14, $r17, $r19, $r22;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.rmi.server.RemoteStub $r4;
        boolean $z0, $z1;
        java.rmi.Remote $r15;
        java.lang.Exception $r16, $r18;
        org.quartz.core.RemotableQuartzScheduler r20;
        java.rmi.registry.Registry r21;
        org.slf4j.Logger $r24;
        java.lang.StringBuilder $r25, $r26, $r27, $r28;

        r0 := @this: org.quartz.core.QuartzScheduler;

        $r2 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        r1 = virtualinvoke $r2.<org.quartz.core.QuartzSchedulerResources: java.lang.String getRMIRegistryHost()>();

        if r1 == null goto label01;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label02;

     label01:
        return;

     label02:
        $r3 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $i1 = virtualinvoke $r3.<org.quartz.core.QuartzSchedulerResources: int getRMIServerPort()>();

        if $i1 <= 0 goto label03;

        $r14 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $i5 = virtualinvoke $r14.<org.quartz.core.QuartzSchedulerResources: int getRMIServerPort()>();

        $r15 = staticinvoke <java.rmi.server.UnicastRemoteObject: java.rmi.Remote exportObject(java.rmi.Remote,int)>(r0, $i5);

        r20 = (org.quartz.core.RemotableQuartzScheduler) $r15;

        goto label04;

     label03:
        $r4 = staticinvoke <java.rmi.server.UnicastRemoteObject: java.rmi.server.RemoteStub exportObject(java.rmi.Remote)>(r0);

        r20 = (org.quartz.core.RemotableQuartzScheduler) $r4;

     label04:
        $r5 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r6 = virtualinvoke $r5.<org.quartz.core.QuartzSchedulerResources: java.lang.String getRMICreateRegistryStrategy()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("as_needed");

        if $z0 == 0 goto label08;

     label05:
        $r13 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $i4 = virtualinvoke $r13.<org.quartz.core.QuartzSchedulerResources: int getRMIRegistryPort()>();

        r21 = staticinvoke <java.rmi.registry.LocateRegistry: java.rmi.registry.Registry getRegistry(int)>($i4);

        interfaceinvoke r21.<java.rmi.registry.Registry: java.lang.String[] list()>();

     label06:
        goto label13;

     label07:
        $r18 := @caughtexception;

        $r19 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $i7 = virtualinvoke $r19.<org.quartz.core.QuartzSchedulerResources: int getRMIRegistryPort()>();

        r21 = staticinvoke <java.rmi.registry.LocateRegistry: java.rmi.registry.Registry createRegistry(int)>($i7);

        goto label13;

     label08:
        $r7 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r8 = virtualinvoke $r7.<org.quartz.core.QuartzSchedulerResources: java.lang.String getRMICreateRegistryStrategy()>();

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>("always");

        if $z1 == 0 goto label12;

     label09:
        $r12 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $i3 = virtualinvoke $r12.<org.quartz.core.QuartzSchedulerResources: int getRMIRegistryPort()>();

        r21 = staticinvoke <java.rmi.registry.LocateRegistry: java.rmi.registry.Registry createRegistry(int)>($i3);

     label10:
        goto label13;

     label11:
        $r16 := @caughtexception;

        $r17 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $i6 = virtualinvoke $r17.<org.quartz.core.QuartzSchedulerResources: int getRMIRegistryPort()>();

        r21 = staticinvoke <java.rmi.registry.LocateRegistry: java.rmi.registry.Registry getRegistry(int)>($i6);

        goto label13;

     label12:
        $r9 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r10 = virtualinvoke $r9.<org.quartz.core.QuartzSchedulerResources: java.lang.String getRMIRegistryHost()>();

        $r11 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $i2 = virtualinvoke $r11.<org.quartz.core.QuartzSchedulerResources: int getRMIRegistryPort()>();

        r21 = staticinvoke <java.rmi.registry.LocateRegistry: java.rmi.registry.Registry getRegistry(java.lang.String,int)>($r10, $i2);

     label13:
        $r22 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        r23 = virtualinvoke $r22.<org.quartz.core.QuartzSchedulerResources: java.lang.String getRMIBindName()>();

        interfaceinvoke r21.<java.rmi.registry.Registry: void rebind(java.lang.String,java.rmi.Remote)>(r23, r20);

        r0.<org.quartz.core.QuartzScheduler: boolean boundRemotely> = 1;

        $r24 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: org.slf4j.Logger getLog()>();

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Scheduler bound to RMI registry under name \'");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r24.<org.slf4j.Logger: void info(java.lang.String)>($r29);

        return;

        catch java.lang.Exception from label05 to label06 with label07;
        catch java.lang.Exception from label09 to label10 with label11;
    }

    private void unBind() throws java.rmi.RemoteException
    {
        org.quartz.core.QuartzScheduler r0;
        java.lang.String r1, r3, $r7, $r15;
        java.rmi.registry.Registry r2;
        org.quartz.core.QuartzSchedulerResources $r5, $r6, $r8, $r9;
        int $i0, $i1;
        org.slf4j.Logger $r10;
        java.lang.StringBuilder $r11, $r12, $r13, $r14;
        java.rmi.NotBoundException $r16;

        r0 := @this: org.quartz.core.QuartzScheduler;

        $r5 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        r1 = virtualinvoke $r5.<org.quartz.core.QuartzSchedulerResources: java.lang.String getRMIRegistryHost()>();

        if r1 == null goto label1;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        return;

     label2:
        $r6 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r7 = virtualinvoke $r6.<org.quartz.core.QuartzSchedulerResources: java.lang.String getRMIRegistryHost()>();

        $r8 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $i1 = virtualinvoke $r8.<org.quartz.core.QuartzSchedulerResources: int getRMIRegistryPort()>();

        r2 = staticinvoke <java.rmi.registry.LocateRegistry: java.rmi.registry.Registry getRegistry(java.lang.String,int)>($r7, $i1);

        $r9 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        r3 = virtualinvoke $r9.<org.quartz.core.QuartzSchedulerResources: java.lang.String getRMIBindName()>();

     label3:
        interfaceinvoke r2.<java.rmi.registry.Registry: void unbind(java.lang.String)>(r3);

        staticinvoke <java.rmi.server.UnicastRemoteObject: boolean unexportObject(java.rmi.Remote,boolean)>(r0, 1);

     label4:
        goto label6;

     label5:
        $r16 := @caughtexception;

     label6:
        $r10 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: org.slf4j.Logger getLog()>();

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Scheduler un-bound from name \'");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' in RMI registry");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<org.slf4j.Logger: void info(java.lang.String)>($r15);

        return;

        catch java.rmi.NotBoundException from label3 to label4 with label5;
    }

    public java.lang.String getSchedulerName()
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.core.QuartzSchedulerResources $r1;
        java.lang.String $r2;

        r0 := @this: org.quartz.core.QuartzScheduler;

        $r1 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r2 = virtualinvoke $r1.<org.quartz.core.QuartzSchedulerResources: java.lang.String getName()>();

        return $r2;
    }

    public java.lang.String getSchedulerInstanceId()
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.core.QuartzSchedulerResources $r1;
        java.lang.String $r2;

        r0 := @this: org.quartz.core.QuartzScheduler;

        $r1 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r2 = virtualinvoke $r1.<org.quartz.core.QuartzSchedulerResources: java.lang.String getInstanceId()>();

        return $r2;
    }

    public java.lang.ThreadGroup getSchedulerThreadGroup()
    {
        org.quartz.core.QuartzScheduler r0;
        java.lang.ThreadGroup $r1, $r2, $r9, $r10;
        java.lang.StringBuilder $r3, $r4, $r6;
        java.lang.String $r5, $r7;
        org.quartz.core.QuartzSchedulerResources $r8;
        boolean $z0;

        r0 := @this: org.quartz.core.QuartzScheduler;

        $r1 = r0.<org.quartz.core.QuartzScheduler: java.lang.ThreadGroup threadGroup>;

        if $r1 != null goto label1;

        $r2 = new java.lang.ThreadGroup;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuartzScheduler:");

        $r5 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: java.lang.String getSchedulerName()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.ThreadGroup: void <init>(java.lang.String)>($r7);

        r0.<org.quartz.core.QuartzScheduler: java.lang.ThreadGroup threadGroup> = $r2;

        $r8 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $z0 = virtualinvoke $r8.<org.quartz.core.QuartzSchedulerResources: boolean getMakeSchedulerThreadDaemon()>();

        if $z0 == 0 goto label1;

        $r9 = r0.<org.quartz.core.QuartzScheduler: java.lang.ThreadGroup threadGroup>;

        virtualinvoke $r9.<java.lang.ThreadGroup: void setDaemon(boolean)>(1);

     label1:
        $r10 = r0.<org.quartz.core.QuartzScheduler: java.lang.ThreadGroup threadGroup>;

        return $r10;
    }

    public void addNoGCObject(java.lang.Object)
    {
        org.quartz.core.QuartzScheduler r0;
        java.lang.Object r1;
        java.util.ArrayList $r2;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.quartz.core.QuartzScheduler: java.util.ArrayList holdToPreventGC>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        return;
    }

    public boolean removeNoGCObject(java.lang.Object)
    {
        org.quartz.core.QuartzScheduler r0;
        java.lang.Object r1;
        java.util.ArrayList $r2;
        boolean $z0;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.quartz.core.QuartzScheduler: java.util.ArrayList holdToPreventGC>;

        $z0 = virtualinvoke $r2.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        return $z0;
    }

    public org.quartz.SchedulerContext getSchedulerContext() throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.SchedulerContext $r1;

        r0 := @this: org.quartz.core.QuartzScheduler;

        $r1 = r0.<org.quartz.core.QuartzScheduler: org.quartz.SchedulerContext context>;

        return $r1;
    }

    public boolean isSignalOnSchedulingChange()
    {
        org.quartz.core.QuartzScheduler r0;
        boolean $z0;

        r0 := @this: org.quartz.core.QuartzScheduler;

        $z0 = r0.<org.quartz.core.QuartzScheduler: boolean signalOnSchedulingChange>;

        return $z0;
    }

    public void setSignalOnSchedulingChange(boolean)
    {
        org.quartz.core.QuartzScheduler r0;
        boolean z0;

        r0 := @this: org.quartz.core.QuartzScheduler;

        z0 := @parameter0: boolean;

        r0.<org.quartz.core.QuartzScheduler: boolean signalOnSchedulingChange> = z0;

        return;
    }

    public void start() throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        boolean $z0, $z1;
        org.quartz.SchedulerException $r1;
        java.util.Date $r2, $r14;
        org.quartz.core.QuartzSchedulerResources $r3, $r9, $r15;
        org.quartz.spi.JobStore $r4, $r16;
        org.quartz.core.QuartzSchedulerThread $r5;
        org.slf4j.Logger $r6;
        java.lang.StringBuilder $r7, $r8, $r11, $r12;
        java.lang.String $r10, $r13;

        r0 := @this: org.quartz.core.QuartzScheduler;

        $z0 = r0.<org.quartz.core.QuartzScheduler: boolean shuttingDown>;

        if $z0 != 0 goto label1;

        $z1 = r0.<org.quartz.core.QuartzScheduler: boolean closed>;

        if $z1 == 0 goto label2;

     label1:
        $r1 = new org.quartz.SchedulerException;

        specialinvoke $r1.<org.quartz.SchedulerException: void <init>(java.lang.String)>("The Scheduler cannot be restarted after shutdown() has been called.");

        throw $r1;

     label2:
        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void notifySchedulerListenersStarting()>();

        $r2 = r0.<org.quartz.core.QuartzScheduler: java.util.Date initialStart>;

        if $r2 != null goto label3;

        $r14 = new java.util.Date;

        specialinvoke $r14.<java.util.Date: void <init>()>();

        r0.<org.quartz.core.QuartzScheduler: java.util.Date initialStart> = $r14;

        $r15 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r16 = virtualinvoke $r15.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        interfaceinvoke $r16.<org.quartz.spi.JobStore: void schedulerStarted()>();

        specialinvoke r0.<org.quartz.core.QuartzScheduler: void startPlugins()>();

        goto label4;

     label3:
        $r3 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r4 = virtualinvoke $r3.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        interfaceinvoke $r4.<org.quartz.spi.JobStore: void schedulerResumed()>();

     label4:
        $r5 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerThread schedThread>;

        virtualinvoke $r5.<org.quartz.core.QuartzSchedulerThread: void togglePause(boolean)>(0);

        $r6 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: org.slf4j.Logger getLog()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Scheduler ");

        $r9 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r10 = virtualinvoke $r9.<org.quartz.core.QuartzSchedulerResources: java.lang.String getUniqueIdentifier()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" started.");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String)>($r13);

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void notifySchedulerListenersStarted()>();

        return;
    }

    public void startDelayed(int) throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        int i0;
        boolean $z0, $z1;
        org.quartz.SchedulerException $r2;
        java.lang.Thread $r3;
        org.quartz.core.QuartzScheduler$1 $r4;

        r0 := @this: org.quartz.core.QuartzScheduler;

        i0 := @parameter0: int;

        $z0 = r0.<org.quartz.core.QuartzScheduler: boolean shuttingDown>;

        if $z0 != 0 goto label1;

        $z1 = r0.<org.quartz.core.QuartzScheduler: boolean closed>;

        if $z1 == 0 goto label2;

     label1:
        $r2 = new org.quartz.SchedulerException;

        specialinvoke $r2.<org.quartz.SchedulerException: void <init>(java.lang.String)>("The Scheduler cannot be restarted after shutdown() has been called.");

        throw $r2;

     label2:
        $r3 = new java.lang.Thread;

        $r4 = new org.quartz.core.QuartzScheduler$1;

        specialinvoke $r4.<org.quartz.core.QuartzScheduler$1: void <init>(org.quartz.core.QuartzScheduler,int)>(r0, i0);

        specialinvoke $r3.<java.lang.Thread: void <init>(java.lang.Runnable)>($r4);

        virtualinvoke $r3.<java.lang.Thread: void start()>();

        return;
    }

    public void standby()
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.core.QuartzSchedulerResources $r1, $r7;
        org.quartz.spi.JobStore $r2;
        org.quartz.core.QuartzSchedulerThread $r3;
        org.slf4j.Logger $r4;
        java.lang.StringBuilder $r5, $r6, $r9, $r10;
        java.lang.String $r8, $r11;

        r0 := @this: org.quartz.core.QuartzScheduler;

        $r1 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r2 = virtualinvoke $r1.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        interfaceinvoke $r2.<org.quartz.spi.JobStore: void schedulerPaused()>();

        $r3 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerThread schedThread>;

        virtualinvoke $r3.<org.quartz.core.QuartzSchedulerThread: void togglePause(boolean)>(1);

        $r4 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: org.slf4j.Logger getLog()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Scheduler ");

        $r7 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r8 = virtualinvoke $r7.<org.quartz.core.QuartzSchedulerResources: java.lang.String getUniqueIdentifier()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" paused.");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String)>($r11);

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void notifySchedulerListenersInStandbyMode()>();

        return;
    }

    public boolean isInStandbyMode()
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.core.QuartzSchedulerThread $r1;
        boolean $z0;

        r0 := @this: org.quartz.core.QuartzScheduler;

        $r1 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerThread schedThread>;

        $z0 = virtualinvoke $r1.<org.quartz.core.QuartzSchedulerThread: boolean isPaused()>();

        return $z0;
    }

    public java.util.Date runningSince()
    {
        org.quartz.core.QuartzScheduler r0;
        java.util.Date $r1, $r2, $r3;
        long $l0;

        r0 := @this: org.quartz.core.QuartzScheduler;

        $r1 = r0.<org.quartz.core.QuartzScheduler: java.util.Date initialStart>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = new java.util.Date;

        $r3 = r0.<org.quartz.core.QuartzScheduler: java.util.Date initialStart>;

        $l0 = virtualinvoke $r3.<java.util.Date: long getTime()>();

        specialinvoke $r2.<java.util.Date: void <init>(long)>($l0);

        return $r2;
    }

    public int numJobsExecuted()
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.core.ExecutingJobsManager $r1;
        int $i0;

        r0 := @this: org.quartz.core.QuartzScheduler;

        $r1 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.ExecutingJobsManager jobMgr>;

        $i0 = virtualinvoke $r1.<org.quartz.core.ExecutingJobsManager: int getNumJobsFired()>();

        return $i0;
    }

    public java.lang.Class getJobStoreClass()
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.core.QuartzSchedulerResources $r1;
        org.quartz.spi.JobStore $r2;
        java.lang.Class $r3;

        r0 := @this: org.quartz.core.QuartzScheduler;

        $r1 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r2 = virtualinvoke $r1.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        return $r3;
    }

    public boolean supportsPersistence()
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.core.QuartzSchedulerResources $r1;
        org.quartz.spi.JobStore $r2;
        boolean $z0;

        r0 := @this: org.quartz.core.QuartzScheduler;

        $r1 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r2 = virtualinvoke $r1.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        $z0 = interfaceinvoke $r2.<org.quartz.spi.JobStore: boolean supportsPersistence()>();

        return $z0;
    }

    public boolean isClustered()
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.core.QuartzSchedulerResources $r1;
        org.quartz.spi.JobStore $r2;
        boolean $z0;

        r0 := @this: org.quartz.core.QuartzScheduler;

        $r1 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r2 = virtualinvoke $r1.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        $z0 = interfaceinvoke $r2.<org.quartz.spi.JobStore: boolean isClustered()>();

        return $z0;
    }

    public java.lang.Class getThreadPoolClass()
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.core.QuartzSchedulerResources $r1;
        org.quartz.spi.ThreadPool $r2;
        java.lang.Class $r3;

        r0 := @this: org.quartz.core.QuartzScheduler;

        $r1 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r2 = virtualinvoke $r1.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.ThreadPool getThreadPool()>();

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        return $r3;
    }

    public int getThreadPoolSize()
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.core.QuartzSchedulerResources $r1;
        org.quartz.spi.ThreadPool $r2;
        int $i0;

        r0 := @this: org.quartz.core.QuartzScheduler;

        $r1 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r2 = virtualinvoke $r1.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.ThreadPool getThreadPool()>();

        $i0 = interfaceinvoke $r2.<org.quartz.spi.ThreadPool: int getPoolSize()>();

        return $i0;
    }

    public void shutdown()
    {
        org.quartz.core.QuartzScheduler r0;

        r0 := @this: org.quartz.core.QuartzScheduler;

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void shutdown(boolean)>(0);

        return;
    }

    public void shutdown(boolean)
    {
        org.quartz.core.QuartzScheduler r0;
        boolean z0, $z1, $z2, $z3, $z4, $z6, $z7, $z8, $z9;
        java.util.Iterator r1;
        org.quartz.JobExecutionContext r2;
        org.slf4j.Logger $r4, $r20, $r37;
        java.lang.StringBuilder $r5, $r6, $r9, $r10, $r38, $r39, $r42, $r43;
        org.quartz.core.QuartzSchedulerResources $r7, $r13, $r14, $r26, $r28, $r31, $r34, $r40;
        java.lang.String $r8, $r11, $r35, $r41, $r44;
        org.quartz.core.QuartzSchedulerThread $r12;
        java.lang.Object $r15;
        org.quartz.Job $r16, $r17;
        org.quartz.InterruptableJob $r18;
        java.lang.Throwable $r19;
        org.quartz.JobDetail $r21;
        org.quartz.JobKey $r22;
        java.lang.Exception $r23;
        java.rmi.RemoteException $r24;
        java.util.List r25;
        org.quartz.spi.ThreadPool $r27;
        org.quartz.spi.JobStore $r32;
        org.quartz.impl.SchedulerRepository $r33;
        java.util.ArrayList $r36;

        r0 := @this: org.quartz.core.QuartzScheduler;

        z0 := @parameter0: boolean;

        $z1 = r0.<org.quartz.core.QuartzScheduler: boolean shuttingDown>;

        if $z1 != 0 goto label01;

        $z2 = r0.<org.quartz.core.QuartzScheduler: boolean closed>;

        if $z2 == 0 goto label02;

     label01:
        return;

     label02:
        r0.<org.quartz.core.QuartzScheduler: boolean shuttingDown> = 1;

        $r4 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: org.slf4j.Logger getLog()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Scheduler ");

        $r7 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r8 = virtualinvoke $r7.<org.quartz.core.QuartzSchedulerResources: java.lang.String getUniqueIdentifier()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" shutting down.");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String)>($r11);

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void standby()>();

        $r12 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerThread schedThread>;

        virtualinvoke $r12.<org.quartz.core.QuartzSchedulerThread: void halt(boolean)>(z0);

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void notifySchedulerListenersShuttingdown()>();

        $r13 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $z3 = virtualinvoke $r13.<org.quartz.core.QuartzSchedulerResources: boolean isInterruptJobsOnShutdown()>();

        if $z3 == 0 goto label03;

        if z0 == 0 goto label04;

     label03:
        $r14 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $z4 = virtualinvoke $r14.<org.quartz.core.QuartzSchedulerResources: boolean isInterruptJobsOnShutdownWithWait()>();

        if $z4 == 0 goto label10;

        if z0 == 0 goto label10;

     label04:
        r25 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: java.util.List getCurrentlyExecutingJobs()>();

        r1 = interfaceinvoke r25.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z7 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label10;

        $r15 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.quartz.JobExecutionContext) $r15;

        $r16 = interfaceinvoke r2.<org.quartz.JobExecutionContext: org.quartz.Job getJobInstance()>();

        $z6 = $r16 instanceof org.quartz.InterruptableJob;

        if $z6 == 0 goto label09;

     label06:
        $r17 = interfaceinvoke r2.<org.quartz.JobExecutionContext: org.quartz.Job getJobInstance()>();

        $r18 = (org.quartz.InterruptableJob) $r17;

        interfaceinvoke $r18.<org.quartz.InterruptableJob: void interrupt()>();

     label07:
        goto label09;

     label08:
        $r19 := @caughtexception;

        $r20 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: org.slf4j.Logger getLog()>();

        $r21 = interfaceinvoke r2.<org.quartz.JobExecutionContext: org.quartz.JobDetail getJobDetail()>();

        $r22 = interfaceinvoke $r21.<org.quartz.JobDetail: org.quartz.JobKey getKey()>();

        interfaceinvoke $r20.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>("Encountered error when interrupting job {} during shutdown: {}", $r22, $r19);

     label09:
        goto label05;

     label10:
        $r26 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r27 = virtualinvoke $r26.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.ThreadPool getThreadPool()>();

        interfaceinvoke $r27.<org.quartz.spi.ThreadPool: void shutdown(boolean)>(z0);

        r0.<org.quartz.core.QuartzScheduler: boolean closed> = 1;

        $r28 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $z8 = virtualinvoke $r28.<org.quartz.core.QuartzSchedulerResources: boolean getJMXExport()>();

        if $z8 == 0 goto label14;

     label11:
        specialinvoke r0.<org.quartz.core.QuartzScheduler: void unregisterJMX()>();

     label12:
        goto label14;

     label13:
        $r23 := @caughtexception;

     label14:
        $z9 = r0.<org.quartz.core.QuartzScheduler: boolean boundRemotely>;

        if $z9 == 0 goto label18;

     label15:
        specialinvoke r0.<org.quartz.core.QuartzScheduler: void unBind()>();

     label16:
        goto label18;

     label17:
        $r24 := @caughtexception;

     label18:
        specialinvoke r0.<org.quartz.core.QuartzScheduler: void shutdownPlugins()>();

        $r31 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r32 = virtualinvoke $r31.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        interfaceinvoke $r32.<org.quartz.spi.JobStore: void shutdown()>();

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void notifySchedulerListenersShutdown()>();

        $r33 = staticinvoke <org.quartz.impl.SchedulerRepository: org.quartz.impl.SchedulerRepository getInstance()>();

        $r34 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r35 = virtualinvoke $r34.<org.quartz.core.QuartzSchedulerResources: java.lang.String getName()>();

        virtualinvoke $r33.<org.quartz.impl.SchedulerRepository: boolean remove(java.lang.String)>($r35);

        $r36 = r0.<org.quartz.core.QuartzScheduler: java.util.ArrayList holdToPreventGC>;

        virtualinvoke $r36.<java.util.ArrayList: void clear()>();

        $r37 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: org.slf4j.Logger getLog()>();

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Scheduler ");

        $r40 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r41 = virtualinvoke $r40.<org.quartz.core.QuartzSchedulerResources: java.lang.String getUniqueIdentifier()>();

        $r42 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" shutdown complete.");

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r37.<org.slf4j.Logger: void info(java.lang.String)>($r44);

        return;

        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Exception from label11 to label12 with label13;
        catch java.rmi.RemoteException from label15 to label16 with label17;
    }

    public boolean isShutdown()
    {
        org.quartz.core.QuartzScheduler r0;
        boolean $z0;

        r0 := @this: org.quartz.core.QuartzScheduler;

        $z0 = r0.<org.quartz.core.QuartzScheduler: boolean closed>;

        return $z0;
    }

    public boolean isShuttingDown()
    {
        org.quartz.core.QuartzScheduler r0;
        boolean $z0;

        r0 := @this: org.quartz.core.QuartzScheduler;

        $z0 = r0.<org.quartz.core.QuartzScheduler: boolean shuttingDown>;

        return $z0;
    }

    public boolean isStarted()
    {
        org.quartz.core.QuartzScheduler r0;
        boolean $z0, $z1, $z2, $z3;
        java.util.Date $r1;

        r0 := @this: org.quartz.core.QuartzScheduler;

        $z0 = r0.<org.quartz.core.QuartzScheduler: boolean shuttingDown>;

        if $z0 != 0 goto label1;

        $z1 = r0.<org.quartz.core.QuartzScheduler: boolean closed>;

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: boolean isInStandbyMode()>();

        if $z2 != 0 goto label1;

        $r1 = r0.<org.quartz.core.QuartzScheduler: java.util.Date initialStart>;

        if $r1 == null goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;
    }

    public void validateState() throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        boolean $z0;
        org.quartz.SchedulerException $r1;

        r0 := @this: org.quartz.core.QuartzScheduler;

        $z0 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: boolean isShutdown()>();

        if $z0 == 0 goto label1;

        $r1 = new org.quartz.SchedulerException;

        specialinvoke $r1.<org.quartz.SchedulerException: void <init>(java.lang.String)>("The Scheduler has been shutdown.");

        throw $r1;

     label1:
        return;
    }

    public java.util.List getCurrentlyExecutingJobs()
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.core.ExecutingJobsManager $r1;
        java.util.List $r2;

        r0 := @this: org.quartz.core.QuartzScheduler;

        $r1 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.ExecutingJobsManager jobMgr>;

        $r2 = virtualinvoke $r1.<org.quartz.core.ExecutingJobsManager: java.util.List getExecutingJobs()>();

        return $r2;
    }

    public java.util.Date scheduleJob(org.quartz.JobDetail, org.quartz.Trigger) throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.JobDetail r1;
        org.quartz.Trigger r2;
        org.quartz.spi.OperableTrigger r3;
        java.util.Date r4, $r13;
        org.quartz.JobKey $r5, $r7, $r8, $r9, $r25;
        java.lang.Class $r6;
        boolean $z0;
        java.lang.String $r10, $r20, $r23;
        org.quartz.core.QuartzSchedulerResources $r11, $r21;
        org.quartz.spi.JobStore $r12, $r22;
        long $l0;
        org.quartz.SchedulerException $r14, $r24, $r26, $r27, $r28, $r29;
        java.lang.StringBuilder $r15, $r16, $r18, $r19;
        org.quartz.TriggerKey $r17;
        org.quartz.Calendar r30;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: org.quartz.JobDetail;

        r2 := @parameter1: org.quartz.Trigger;

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void validateState()>();

        if r1 != null goto label1;

        $r29 = new org.quartz.SchedulerException;

        specialinvoke $r29.<org.quartz.SchedulerException: void <init>(java.lang.String)>("JobDetail cannot be null");

        throw $r29;

     label1:
        if r2 != null goto label2;

        $r28 = new org.quartz.SchedulerException;

        specialinvoke $r28.<org.quartz.SchedulerException: void <init>(java.lang.String)>("Trigger cannot be null");

        throw $r28;

     label2:
        $r5 = interfaceinvoke r1.<org.quartz.JobDetail: org.quartz.JobKey getKey()>();

        if $r5 != null goto label3;

        $r27 = new org.quartz.SchedulerException;

        specialinvoke $r27.<org.quartz.SchedulerException: void <init>(java.lang.String)>("Job\'s key cannot be null");

        throw $r27;

     label3:
        $r6 = interfaceinvoke r1.<org.quartz.JobDetail: java.lang.Class getJobClass()>();

        if $r6 != null goto label4;

        $r26 = new org.quartz.SchedulerException;

        specialinvoke $r26.<org.quartz.SchedulerException: void <init>(java.lang.String)>("Job\'s class cannot be null");

        throw $r26;

     label4:
        r3 = (org.quartz.spi.OperableTrigger) r2;

        $r7 = interfaceinvoke r2.<org.quartz.Trigger: org.quartz.JobKey getJobKey()>();

        if $r7 != null goto label5;

        $r25 = interfaceinvoke r1.<org.quartz.JobDetail: org.quartz.JobKey getKey()>();

        interfaceinvoke r3.<org.quartz.spi.OperableTrigger: void setJobKey(org.quartz.JobKey)>($r25);

        goto label6;

     label5:
        $r8 = interfaceinvoke r2.<org.quartz.Trigger: org.quartz.JobKey getJobKey()>();

        $r9 = interfaceinvoke r1.<org.quartz.JobDetail: org.quartz.JobKey getKey()>();

        $z0 = virtualinvoke $r8.<org.quartz.JobKey: boolean equals(java.lang.Object)>($r9);

        if $z0 != 0 goto label6;

        $r24 = new org.quartz.SchedulerException;

        specialinvoke $r24.<org.quartz.SchedulerException: void <init>(java.lang.String)>("Trigger does not reference given job!");

        throw $r24;

     label6:
        interfaceinvoke r3.<org.quartz.spi.OperableTrigger: void validate()>();

        r30 = null;

        $r10 = interfaceinvoke r2.<org.quartz.Trigger: java.lang.String getCalendarName()>();

        if $r10 == null goto label7;

        $r21 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r22 = virtualinvoke $r21.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        $r23 = interfaceinvoke r2.<org.quartz.Trigger: java.lang.String getCalendarName()>();

        r30 = interfaceinvoke $r22.<org.quartz.spi.JobStore: org.quartz.Calendar retrieveCalendar(java.lang.String)>($r23);

     label7:
        r4 = interfaceinvoke r3.<org.quartz.spi.OperableTrigger: java.util.Date computeFirstFireTime(org.quartz.Calendar)>(r30);

        if r4 != null goto label8;

        $r14 = new org.quartz.SchedulerException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Based on configured schedule, the given trigger \'");

        $r17 = interfaceinvoke r2.<org.quartz.Trigger: org.quartz.TriggerKey getKey()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' will never fire.");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<org.quartz.SchedulerException: void <init>(java.lang.String)>($r20);

        throw $r14;

     label8:
        $r11 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r12 = virtualinvoke $r11.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        interfaceinvoke $r12.<org.quartz.spi.JobStore: void storeJobAndTrigger(org.quartz.JobDetail,org.quartz.spi.OperableTrigger)>(r1, r3);

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void notifySchedulerListenersJobAdded(org.quartz.JobDetail)>(r1);

        $r13 = interfaceinvoke r2.<org.quartz.Trigger: java.util.Date getNextFireTime()>();

        $l0 = virtualinvoke $r13.<java.util.Date: long getTime()>();

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void notifySchedulerThread(long)>($l0);

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void notifySchedulerListenersSchduled(org.quartz.Trigger)>(r2);

        return r4;
    }

    public java.util.Date scheduleJob(org.quartz.Trigger) throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.Trigger r1;
        org.quartz.spi.OperableTrigger r2;
        java.util.Date r3, $r7;
        java.lang.String $r4, $r14, $r17, $r21, $r23;
        org.quartz.core.QuartzSchedulerResources $r5, $r15;
        org.quartz.spi.JobStore $r6, $r16;
        long $l0;
        org.quartz.SchedulerException $r8, $r18, $r24;
        java.lang.StringBuilder $r9, $r10, $r12, $r13, $r19, $r20, $r22;
        org.quartz.TriggerKey $r11;
        org.quartz.Calendar r25;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: org.quartz.Trigger;

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void validateState()>();

        if r1 != null goto label1;

        $r24 = new org.quartz.SchedulerException;

        specialinvoke $r24.<org.quartz.SchedulerException: void <init>(java.lang.String)>("Trigger cannot be null");

        throw $r24;

     label1:
        r2 = (org.quartz.spi.OperableTrigger) r1;

        interfaceinvoke r2.<org.quartz.spi.OperableTrigger: void validate()>();

        r25 = null;

        $r4 = interfaceinvoke r1.<org.quartz.Trigger: java.lang.String getCalendarName()>();

        if $r4 == null goto label2;

        $r15 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r16 = virtualinvoke $r15.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        $r17 = interfaceinvoke r1.<org.quartz.Trigger: java.lang.String getCalendarName()>();

        r25 = interfaceinvoke $r16.<org.quartz.spi.JobStore: org.quartz.Calendar retrieveCalendar(java.lang.String)>($r17);

        if r25 != null goto label2;

        $r18 = new org.quartz.SchedulerException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Calendar not found: ");

        $r21 = interfaceinvoke r1.<org.quartz.Trigger: java.lang.String getCalendarName()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<org.quartz.SchedulerException: void <init>(java.lang.String)>($r23);

        throw $r18;

     label2:
        r3 = interfaceinvoke r2.<org.quartz.spi.OperableTrigger: java.util.Date computeFirstFireTime(org.quartz.Calendar)>(r25);

        if r3 != null goto label3;

        $r8 = new org.quartz.SchedulerException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Based on configured schedule, the given trigger \'");

        $r11 = interfaceinvoke r1.<org.quartz.Trigger: org.quartz.TriggerKey getKey()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' will never fire.");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.quartz.SchedulerException: void <init>(java.lang.String)>($r14);

        throw $r8;

     label3:
        $r5 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r6 = virtualinvoke $r5.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        interfaceinvoke $r6.<org.quartz.spi.JobStore: void storeTrigger(org.quartz.spi.OperableTrigger,boolean)>(r2, 0);

        $r7 = interfaceinvoke r1.<org.quartz.Trigger: java.util.Date getNextFireTime()>();

        $l0 = virtualinvoke $r7.<java.util.Date: long getTime()>();

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void notifySchedulerThread(long)>($l0);

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void notifySchedulerListenersSchduled(org.quartz.Trigger)>(r1);

        return r3;
    }

    public void addJob(org.quartz.JobDetail, boolean) throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.JobDetail r1;
        boolean z0;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: org.quartz.JobDetail;

        z0 := @parameter1: boolean;

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void addJob(org.quartz.JobDetail,boolean,boolean)>(r1, z0, 0);

        return;
    }

    public void addJob(org.quartz.JobDetail, boolean, boolean) throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.JobDetail r1;
        boolean z0, z1, $z2;
        org.quartz.core.QuartzSchedulerResources $r2;
        org.quartz.spi.JobStore $r3;
        org.quartz.SchedulerException $r4;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: org.quartz.JobDetail;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void validateState()>();

        if z1 != 0 goto label1;

        $z2 = interfaceinvoke r1.<org.quartz.JobDetail: boolean isDurable()>();

        if $z2 != 0 goto label1;

        $r4 = new org.quartz.SchedulerException;

        specialinvoke $r4.<org.quartz.SchedulerException: void <init>(java.lang.String)>("Jobs added with no trigger must be durable.");

        throw $r4;

     label1:
        $r2 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r3 = virtualinvoke $r2.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        interfaceinvoke $r3.<org.quartz.spi.JobStore: void storeJob(org.quartz.JobDetail,boolean)>(r1, z0);

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void notifySchedulerThread(long)>(0L);

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void notifySchedulerListenersJobAdded(org.quartz.JobDetail)>(r1);

        return;
    }

    public boolean deleteJob(org.quartz.JobKey) throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.JobKey r1;
        java.util.List r2;
        java.util.Iterator r3;
        org.quartz.Trigger r4;
        java.lang.StringBuilder r5, $r10, $r11, $r13, $r14, $r15;
        boolean $z0, $z1, $z2, z3, $z4, z5;
        org.quartz.core.QuartzSchedulerResources $r6;
        org.quartz.spi.JobStore $r7;
        java.lang.Object $r8;
        org.quartz.TriggerKey $r9, $r12;
        org.quartz.SchedulerException $r16;
        java.lang.String $r17;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: org.quartz.JobKey;

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void validateState()>();

        z3 = 0;

        r2 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: java.util.List getTriggersOfJob(org.quartz.JobKey)>(r1);

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.quartz.Trigger) $r8;

        $r9 = interfaceinvoke r4.<org.quartz.Trigger: org.quartz.TriggerKey getKey()>();

        $z2 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: boolean unscheduleJob(org.quartz.TriggerKey)>($r9);

        if $z2 != 0 goto label2;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to unschedule trigger [");

        $r12 = interfaceinvoke r4.<org.quartz.Trigger: org.quartz.TriggerKey getKey()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] while deleting job [");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        r5 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r16 = new org.quartz.SchedulerException;

        $r17 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<org.quartz.SchedulerException: void <init>(java.lang.String)>($r17);

        throw $r16;

     label2:
        z3 = 1;

        goto label1;

     label3:
        $r6 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r7 = virtualinvoke $r6.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        $z1 = interfaceinvoke $r7.<org.quartz.spi.JobStore: boolean removeJob(org.quartz.JobKey)>(r1);

        if $z1 != 0 goto label4;

        if z3 == 0 goto label5;

     label4:
        $z4 = 1;

        goto label6;

     label5:
        $z4 = 0;

     label6:
        z5 = $z4;

        if $z4 == 0 goto label7;

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void notifySchedulerThread(long)>(0L);

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void notifySchedulerListenersJobDeleted(org.quartz.JobKey)>(r1);

     label7:
        return z5;
    }

    public boolean deleteJobs(java.util.List) throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        java.util.List r1;
        java.util.Iterator r2;
        org.quartz.JobKey r3;
        org.quartz.core.QuartzSchedulerResources $r4;
        org.quartz.spi.JobStore $r5;
        boolean $z0, z2;
        java.lang.Object $r6;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: java.util.List;

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void validateState()>();

        $r4 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r5 = virtualinvoke $r4.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        z2 = interfaceinvoke $r5.<org.quartz.spi.JobStore: boolean removeJobs(java.util.List)>(r1);

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void notifySchedulerThread(long)>(0L);

        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.quartz.JobKey) $r6;

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void notifySchedulerListenersJobDeleted(org.quartz.JobKey)>(r3);

        goto label1;

     label2:
        return z2;
    }

    public void scheduleJobs(java.util.Map, boolean) throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        java.util.Map r1;
        boolean z0, $z1, $z2, $z3, $z4;
        org.quartz.Trigger r2, r41;
        org.quartz.spi.OperableTrigger r3;
        java.util.Date r4;
        java.util.Set $r5, $r8, r34, r39;
        org.quartz.core.QuartzSchedulerResources $r6, $r19;
        org.quartz.spi.JobStore $r7, $r20;
        java.lang.Object $r9, $r10, $r11, $r12, $r13, $r14, $r15;
        org.quartz.JobKey $r16;
        java.lang.String $r17, $r21, $r25, $r30;
        org.quartz.SchedulerException $r18, $r22;
        java.lang.StringBuilder $r23, $r24, $r26, $r27, $r29;
        org.quartz.TriggerKey $r28;
        java.util.Iterator r31, r35, r37, r40;
        java.util.Map$Entry r32;
        org.quartz.JobDetail r33, r38;
        org.quartz.Calendar r36;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: java.util.Map;

        z0 := @parameter1: boolean;

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void validateState()>();

        $r5 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r31 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label01:
        $z4 = interfaceinvoke r31.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label08;

        $r12 = interfaceinvoke r31.<java.util.Iterator: java.lang.Object next()>();

        r32 = (java.util.Map$Entry) $r12;

        $r13 = interfaceinvoke r32.<java.util.Map$Entry: java.lang.Object getKey()>();

        r33 = (org.quartz.JobDetail) $r13;

        if r33 != null goto label02;

        goto label01;

     label02:
        $r14 = interfaceinvoke r32.<java.util.Map$Entry: java.lang.Object getValue()>();

        r34 = (java.util.Set) $r14;

        if r34 != null goto label03;

        goto label01;

     label03:
        r35 = interfaceinvoke r34.<java.util.Set: java.util.Iterator iterator()>();

     label04:
        $z3 = interfaceinvoke r35.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label07;

        $r15 = interfaceinvoke r35.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.quartz.Trigger) $r15;

        r3 = (org.quartz.spi.OperableTrigger) r2;

        $r16 = interfaceinvoke r33.<org.quartz.JobDetail: org.quartz.JobKey getKey()>();

        interfaceinvoke r3.<org.quartz.spi.OperableTrigger: void setJobKey(org.quartz.JobKey)>($r16);

        interfaceinvoke r3.<org.quartz.spi.OperableTrigger: void validate()>();

        r36 = null;

        $r17 = interfaceinvoke r2.<org.quartz.Trigger: java.lang.String getCalendarName()>();

        if $r17 == null goto label05;

        $r19 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r20 = virtualinvoke $r19.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        $r21 = interfaceinvoke r2.<org.quartz.Trigger: java.lang.String getCalendarName()>();

        r36 = interfaceinvoke $r20.<org.quartz.spi.JobStore: org.quartz.Calendar retrieveCalendar(java.lang.String)>($r21);

        if r36 != null goto label05;

        $r22 = new org.quartz.SchedulerException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Calendar \'");

        $r25 = interfaceinvoke r2.<org.quartz.Trigger: java.lang.String getCalendarName()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' not found for trigger: ");

        $r28 = interfaceinvoke r2.<org.quartz.Trigger: org.quartz.TriggerKey getKey()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<org.quartz.SchedulerException: void <init>(java.lang.String)>($r30);

        throw $r22;

     label05:
        r4 = interfaceinvoke r3.<org.quartz.spi.OperableTrigger: java.util.Date computeFirstFireTime(org.quartz.Calendar)>(r36);

        if r4 != null goto label06;

        $r18 = new org.quartz.SchedulerException;

        specialinvoke $r18.<org.quartz.SchedulerException: void <init>(java.lang.String)>("Based on configured schedule, the given trigger will never fire.");

        throw $r18;

     label06:
        goto label04;

     label07:
        goto label01;

     label08:
        $r6 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r7 = virtualinvoke $r6.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        interfaceinvoke $r7.<org.quartz.spi.JobStore: void storeJobsAndTriggers(java.util.Map,boolean)>(r1, z0);

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void notifySchedulerThread(long)>(0L);

        $r8 = interfaceinvoke r1.<java.util.Map: java.util.Set keySet()>();

        r37 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label09:
        $z1 = interfaceinvoke r37.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label12;

        $r9 = interfaceinvoke r37.<java.util.Iterator: java.lang.Object next()>();

        r38 = (org.quartz.JobDetail) $r9;

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void notifySchedulerListenersJobAdded(org.quartz.JobDetail)>(r38);

        $r10 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r38);

        r39 = (java.util.Set) $r10;

        r40 = interfaceinvoke r39.<java.util.Set: java.util.Iterator iterator()>();

     label10:
        $z2 = interfaceinvoke r40.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label11;

        $r11 = interfaceinvoke r40.<java.util.Iterator: java.lang.Object next()>();

        r41 = (org.quartz.Trigger) $r11;

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void notifySchedulerListenersSchduled(org.quartz.Trigger)>(r41);

        goto label10;

     label11:
        goto label09;

     label12:
        return;
    }

    public void scheduleJob(org.quartz.JobDetail, java.util.Set, boolean) throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.JobDetail r1;
        java.util.Set r2;
        boolean z0;
        java.util.HashMap $r4;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: org.quartz.JobDetail;

        r2 := @parameter1: java.util.Set;

        z0 := @parameter2: boolean;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void scheduleJobs(java.util.Map,boolean)>($r4, z0);

        return;
    }

    public boolean unscheduleJobs(java.util.List) throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        java.util.List r1;
        java.util.Iterator r2;
        org.quartz.TriggerKey r3;
        org.quartz.core.QuartzSchedulerResources $r4;
        org.quartz.spi.JobStore $r5;
        boolean $z0, z2;
        java.lang.Object $r6;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: java.util.List;

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void validateState()>();

        $r4 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r5 = virtualinvoke $r4.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        z2 = interfaceinvoke $r5.<org.quartz.spi.JobStore: boolean removeTriggers(java.util.List)>(r1);

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void notifySchedulerThread(long)>(0L);

        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.quartz.TriggerKey) $r6;

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void notifySchedulerListenersUnscheduled(org.quartz.TriggerKey)>(r3);

        goto label1;

     label2:
        return z2;
    }

    public boolean unscheduleJob(org.quartz.TriggerKey) throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.TriggerKey r1;
        org.quartz.core.QuartzSchedulerResources $r2;
        org.quartz.spi.JobStore $r3;
        boolean $z0;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: org.quartz.TriggerKey;

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void validateState()>();

        $r2 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r3 = virtualinvoke $r2.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        $z0 = interfaceinvoke $r3.<org.quartz.spi.JobStore: boolean removeTrigger(org.quartz.TriggerKey)>(r1);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void notifySchedulerThread(long)>(0L);

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void notifySchedulerListenersUnscheduled(org.quartz.TriggerKey)>(r1);

        goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public java.util.Date rescheduleJob(org.quartz.TriggerKey, org.quartz.Trigger) throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.TriggerKey r1;
        org.quartz.Trigger r2, r4;
        org.quartz.spi.OperableTrigger r3;
        java.util.Date r5, $r10;
        org.quartz.JobKey $r6;
        java.lang.String $r7, $r14;
        org.quartz.core.QuartzSchedulerResources $r8, $r12;
        org.quartz.spi.JobStore $r9, $r13;
        boolean $z0;
        long $l0;
        org.quartz.SchedulerException $r11;
        java.lang.IllegalArgumentException $r15, $r16;
        org.quartz.Calendar r17;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: org.quartz.TriggerKey;

        r2 := @parameter1: org.quartz.Trigger;

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void validateState()>();

        if r1 != null goto label1;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("triggerKey cannot be null");

        throw $r16;

     label1:
        if r2 != null goto label2;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("newTrigger cannot be null");

        throw $r15;

     label2:
        r3 = (org.quartz.spi.OperableTrigger) r2;

        r4 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: org.quartz.Trigger getTrigger(org.quartz.TriggerKey)>(r1);

        if r4 != null goto label3;

        return null;

     label3:
        $r6 = interfaceinvoke r4.<org.quartz.Trigger: org.quartz.JobKey getJobKey()>();

        interfaceinvoke r3.<org.quartz.spi.OperableTrigger: void setJobKey(org.quartz.JobKey)>($r6);

        interfaceinvoke r3.<org.quartz.spi.OperableTrigger: void validate()>();

        r17 = null;

        $r7 = interfaceinvoke r2.<org.quartz.Trigger: java.lang.String getCalendarName()>();

        if $r7 == null goto label4;

        $r12 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r13 = virtualinvoke $r12.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        $r14 = interfaceinvoke r2.<org.quartz.Trigger: java.lang.String getCalendarName()>();

        r17 = interfaceinvoke $r13.<org.quartz.spi.JobStore: org.quartz.Calendar retrieveCalendar(java.lang.String)>($r14);

     label4:
        r5 = interfaceinvoke r3.<org.quartz.spi.OperableTrigger: java.util.Date computeFirstFireTime(org.quartz.Calendar)>(r17);

        if r5 != null goto label5;

        $r11 = new org.quartz.SchedulerException;

        specialinvoke $r11.<org.quartz.SchedulerException: void <init>(java.lang.String)>("Based on configured schedule, the given trigger will never fire.");

        throw $r11;

     label5:
        $r8 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r9 = virtualinvoke $r8.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        $z0 = interfaceinvoke $r9.<org.quartz.spi.JobStore: boolean replaceTrigger(org.quartz.TriggerKey,org.quartz.spi.OperableTrigger)>(r1, r3);

        if $z0 == 0 goto label6;

        $r10 = interfaceinvoke r2.<org.quartz.Trigger: java.util.Date getNextFireTime()>();

        $l0 = virtualinvoke $r10.<java.util.Date: long getTime()>();

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void notifySchedulerThread(long)>($l0);

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void notifySchedulerListenersUnscheduled(org.quartz.TriggerKey)>(r1);

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void notifySchedulerListenersSchduled(org.quartz.Trigger)>(r2);

        goto label7;

     label6:
        return null;

     label7:
        return r5;
    }

    private java.lang.String newTriggerId()
    {
        org.quartz.core.QuartzScheduler r0;
        java.util.Random $r1;
        byte $b0;
        java.lang.StringBuilder $r2, $r3, $r5;
        long $l1, $l2, l5;
        int $i3, $i4;
        java.lang.String $r4, $r6;

        r0 := @this: org.quartz.core.QuartzScheduler;

        $r1 = r0.<org.quartz.core.QuartzScheduler: java.util.Random random>;

        l5 = virtualinvoke $r1.<java.util.Random: long nextLong()>();

        $b0 = l5 cmp 0L;

        if $b0 >= 0 goto label1;

        l5 = neg l5;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MT_");

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l2 = $l1 % 7L;

        $i3 = (int) $l2;

        $i4 = 30 + $i3;

        $r4 = staticinvoke <java.lang.Long: java.lang.String toString(long,int)>(l5, $i4);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public void triggerJob(org.quartz.JobKey, org.quartz.JobDataMap) throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.JobKey r1;
        org.quartz.JobDataMap r2;
        org.quartz.spi.OperableTrigger r3;
        org.quartz.TriggerBuilder $r5, $r7, $r8;
        java.lang.String $r6, $r16;
        org.quartz.Trigger $r9;
        java.util.Date $r11;
        long $l0;
        org.quartz.core.QuartzSchedulerResources $r12;
        org.quartz.spi.JobStore $r13;
        org.quartz.ObjectAlreadyExistsException $r14;
        org.quartz.TriggerKey $r15;
        boolean z0;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: org.quartz.JobKey;

        r2 := @parameter1: org.quartz.JobDataMap;

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void validateState()>();

        $r5 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r6 = specialinvoke r0.<org.quartz.core.QuartzScheduler: java.lang.String newTriggerId()>();

        $r7 = virtualinvoke $r5.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String,java.lang.String)>($r6, "DEFAULT");

        $r8 = virtualinvoke $r7.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder forJob(org.quartz.JobKey)>(r1);

        $r9 = virtualinvoke $r8.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        r3 = (org.quartz.spi.OperableTrigger) $r9;

        interfaceinvoke r3.<org.quartz.spi.OperableTrigger: java.util.Date computeFirstFireTime(org.quartz.Calendar)>(null);

        if r2 == null goto label1;

        interfaceinvoke r3.<org.quartz.spi.OperableTrigger: void setJobDataMap(org.quartz.JobDataMap)>(r2);

     label1:
        z0 = 1;

     label2:
        if z0 == 0 goto label6;

     label3:
        $r12 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r13 = virtualinvoke $r12.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        interfaceinvoke $r13.<org.quartz.spi.JobStore: void storeTrigger(org.quartz.spi.OperableTrigger,boolean)>(r3, 0);

        z0 = 0;

     label4:
        goto label2;

     label5:
        $r14 := @caughtexception;

        $r15 = new org.quartz.TriggerKey;

        $r16 = specialinvoke r0.<org.quartz.core.QuartzScheduler: java.lang.String newTriggerId()>();

        specialinvoke $r15.<org.quartz.TriggerKey: void <init>(java.lang.String,java.lang.String)>($r16, "DEFAULT");

        interfaceinvoke r3.<org.quartz.spi.OperableTrigger: void setKey(org.quartz.TriggerKey)>($r15);

        goto label2;

     label6:
        $r11 = interfaceinvoke r3.<org.quartz.spi.OperableTrigger: java.util.Date getNextFireTime()>();

        $l0 = virtualinvoke $r11.<java.util.Date: long getTime()>();

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void notifySchedulerThread(long)>($l0);

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void notifySchedulerListenersSchduled(org.quartz.Trigger)>(r3);

        return;

        catch org.quartz.ObjectAlreadyExistsException from label3 to label4 with label5;
    }

    public void triggerJob(org.quartz.spi.OperableTrigger) throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.spi.OperableTrigger r1;
        java.util.Date $r4;
        long $l0;
        org.quartz.core.QuartzSchedulerResources $r5;
        org.quartz.spi.JobStore $r6;
        org.quartz.ObjectAlreadyExistsException $r7;
        org.quartz.TriggerKey $r8;
        java.lang.String $r9;
        boolean z0;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: org.quartz.spi.OperableTrigger;

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void validateState()>();

        interfaceinvoke r1.<org.quartz.spi.OperableTrigger: java.util.Date computeFirstFireTime(org.quartz.Calendar)>(null);

        z0 = 1;

     label1:
        if z0 == 0 goto label5;

     label2:
        $r5 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r6 = virtualinvoke $r5.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        interfaceinvoke $r6.<org.quartz.spi.JobStore: void storeTrigger(org.quartz.spi.OperableTrigger,boolean)>(r1, 0);

        z0 = 0;

     label3:
        goto label1;

     label4:
        $r7 := @caughtexception;

        $r8 = new org.quartz.TriggerKey;

        $r9 = specialinvoke r0.<org.quartz.core.QuartzScheduler: java.lang.String newTriggerId()>();

        specialinvoke $r8.<org.quartz.TriggerKey: void <init>(java.lang.String,java.lang.String)>($r9, "DEFAULT");

        interfaceinvoke r1.<org.quartz.spi.OperableTrigger: void setKey(org.quartz.TriggerKey)>($r8);

        goto label1;

     label5:
        $r4 = interfaceinvoke r1.<org.quartz.spi.OperableTrigger: java.util.Date getNextFireTime()>();

        $l0 = virtualinvoke $r4.<java.util.Date: long getTime()>();

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void notifySchedulerThread(long)>($l0);

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void notifySchedulerListenersSchduled(org.quartz.Trigger)>(r1);

        return;

        catch org.quartz.ObjectAlreadyExistsException from label2 to label3 with label4;
    }

    public void pauseTrigger(org.quartz.TriggerKey) throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.TriggerKey r1;
        org.quartz.core.QuartzSchedulerResources $r2;
        org.quartz.spi.JobStore $r3;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: org.quartz.TriggerKey;

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void validateState()>();

        $r2 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r3 = virtualinvoke $r2.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        interfaceinvoke $r3.<org.quartz.spi.JobStore: void pauseTrigger(org.quartz.TriggerKey)>(r1);

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void notifySchedulerThread(long)>(0L);

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void notifySchedulerListenersPausedTrigger(org.quartz.TriggerKey)>(r1);

        return;
    }

    public void pauseTriggers(org.quartz.impl.matchers.GroupMatcher) throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        java.util.Collection r1;
        java.util.Iterator r2;
        java.lang.String r3;
        org.quartz.core.QuartzSchedulerResources $r4;
        org.quartz.spi.JobStore $r5;
        java.lang.Object $r6;
        org.quartz.impl.matchers.GroupMatcher r7;
        boolean $z0;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r7 := @parameter0: org.quartz.impl.matchers.GroupMatcher;

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void validateState()>();

        if r7 != null goto label1;

        r7 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher groupEquals(java.lang.String)>("DEFAULT");

     label1:
        $r4 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r5 = virtualinvoke $r4.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        r1 = interfaceinvoke $r5.<org.quartz.spi.JobStore: java.util.Collection pauseTriggers(org.quartz.impl.matchers.GroupMatcher)>(r7);

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void notifySchedulerThread(long)>(0L);

        r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r6;

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void notifySchedulerListenersPausedTriggers(java.lang.String)>(r3);

        goto label2;

     label3:
        return;
    }

    public void pauseJob(org.quartz.JobKey) throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.JobKey r1;
        org.quartz.core.QuartzSchedulerResources $r2;
        org.quartz.spi.JobStore $r3;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: org.quartz.JobKey;

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void validateState()>();

        $r2 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r3 = virtualinvoke $r2.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        interfaceinvoke $r3.<org.quartz.spi.JobStore: void pauseJob(org.quartz.JobKey)>(r1);

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void notifySchedulerThread(long)>(0L);

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void notifySchedulerListenersPausedJob(org.quartz.JobKey)>(r1);

        return;
    }

    public void pauseJobs(org.quartz.impl.matchers.GroupMatcher) throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        java.util.Collection r1;
        java.util.Iterator r2;
        java.lang.String r3;
        org.quartz.core.QuartzSchedulerResources $r4;
        org.quartz.spi.JobStore $r5;
        java.lang.Object $r6;
        org.quartz.impl.matchers.GroupMatcher r7;
        boolean $z0;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r7 := @parameter0: org.quartz.impl.matchers.GroupMatcher;

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void validateState()>();

        if r7 != null goto label1;

        r7 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher groupEquals(java.lang.String)>("DEFAULT");

     label1:
        $r4 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r5 = virtualinvoke $r4.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        r1 = interfaceinvoke $r5.<org.quartz.spi.JobStore: java.util.Collection pauseJobs(org.quartz.impl.matchers.GroupMatcher)>(r7);

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void notifySchedulerThread(long)>(0L);

        r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r6;

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void notifySchedulerListenersPausedJobs(java.lang.String)>(r3);

        goto label2;

     label3:
        return;
    }

    public void resumeTrigger(org.quartz.TriggerKey) throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.TriggerKey r1;
        org.quartz.core.QuartzSchedulerResources $r2;
        org.quartz.spi.JobStore $r3;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: org.quartz.TriggerKey;

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void validateState()>();

        $r2 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r3 = virtualinvoke $r2.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        interfaceinvoke $r3.<org.quartz.spi.JobStore: void resumeTrigger(org.quartz.TriggerKey)>(r1);

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void notifySchedulerThread(long)>(0L);

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void notifySchedulerListenersResumedTrigger(org.quartz.TriggerKey)>(r1);

        return;
    }

    public void resumeTriggers(org.quartz.impl.matchers.GroupMatcher) throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        java.util.Collection r1;
        java.util.Iterator r2;
        java.lang.String r3;
        org.quartz.core.QuartzSchedulerResources $r4;
        org.quartz.spi.JobStore $r5;
        java.lang.Object $r6;
        org.quartz.impl.matchers.GroupMatcher r7;
        boolean $z0;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r7 := @parameter0: org.quartz.impl.matchers.GroupMatcher;

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void validateState()>();

        if r7 != null goto label1;

        r7 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher groupEquals(java.lang.String)>("DEFAULT");

     label1:
        $r4 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r5 = virtualinvoke $r4.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        r1 = interfaceinvoke $r5.<org.quartz.spi.JobStore: java.util.Collection resumeTriggers(org.quartz.impl.matchers.GroupMatcher)>(r7);

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void notifySchedulerThread(long)>(0L);

        r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r6;

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void notifySchedulerListenersResumedTriggers(java.lang.String)>(r3);

        goto label2;

     label3:
        return;
    }

    public java.util.Set getPausedTriggerGroups() throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.core.QuartzSchedulerResources $r1;
        org.quartz.spi.JobStore $r2;
        java.util.Set $r3;

        r0 := @this: org.quartz.core.QuartzScheduler;

        $r1 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r2 = virtualinvoke $r1.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        $r3 = interfaceinvoke $r2.<org.quartz.spi.JobStore: java.util.Set getPausedTriggerGroups()>();

        return $r3;
    }

    public void resumeJob(org.quartz.JobKey) throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.JobKey r1;
        org.quartz.core.QuartzSchedulerResources $r2;
        org.quartz.spi.JobStore $r3;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: org.quartz.JobKey;

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void validateState()>();

        $r2 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r3 = virtualinvoke $r2.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        interfaceinvoke $r3.<org.quartz.spi.JobStore: void resumeJob(org.quartz.JobKey)>(r1);

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void notifySchedulerThread(long)>(0L);

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void notifySchedulerListenersResumedJob(org.quartz.JobKey)>(r1);

        return;
    }

    public void resumeJobs(org.quartz.impl.matchers.GroupMatcher) throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        java.util.Collection r1;
        java.util.Iterator r2;
        java.lang.String r3;
        org.quartz.core.QuartzSchedulerResources $r4;
        org.quartz.spi.JobStore $r5;
        java.lang.Object $r6;
        org.quartz.impl.matchers.GroupMatcher r7;
        boolean $z0;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r7 := @parameter0: org.quartz.impl.matchers.GroupMatcher;

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void validateState()>();

        if r7 != null goto label1;

        r7 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher groupEquals(java.lang.String)>("DEFAULT");

     label1:
        $r4 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r5 = virtualinvoke $r4.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        r1 = interfaceinvoke $r5.<org.quartz.spi.JobStore: java.util.Collection resumeJobs(org.quartz.impl.matchers.GroupMatcher)>(r7);

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void notifySchedulerThread(long)>(0L);

        r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r6;

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void notifySchedulerListenersResumedJobs(java.lang.String)>(r3);

        goto label2;

     label3:
        return;
    }

    public void pauseAll() throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.core.QuartzSchedulerResources $r1;
        org.quartz.spi.JobStore $r2;

        r0 := @this: org.quartz.core.QuartzScheduler;

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void validateState()>();

        $r1 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r2 = virtualinvoke $r1.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        interfaceinvoke $r2.<org.quartz.spi.JobStore: void pauseAll()>();

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void notifySchedulerThread(long)>(0L);

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void notifySchedulerListenersPausedTriggers(java.lang.String)>(null);

        return;
    }

    public void resumeAll() throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.core.QuartzSchedulerResources $r1;
        org.quartz.spi.JobStore $r2;

        r0 := @this: org.quartz.core.QuartzScheduler;

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void validateState()>();

        $r1 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r2 = virtualinvoke $r1.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        interfaceinvoke $r2.<org.quartz.spi.JobStore: void resumeAll()>();

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void notifySchedulerThread(long)>(0L);

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void notifySchedulerListenersResumedTrigger(org.quartz.TriggerKey)>(null);

        return;
    }

    public java.util.List getJobGroupNames() throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.core.QuartzSchedulerResources $r1;
        org.quartz.spi.JobStore $r2;
        java.util.List $r3;

        r0 := @this: org.quartz.core.QuartzScheduler;

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void validateState()>();

        $r1 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r2 = virtualinvoke $r1.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        $r3 = interfaceinvoke $r2.<org.quartz.spi.JobStore: java.util.List getJobGroupNames()>();

        return $r3;
    }

    public java.util.Set getJobKeys(org.quartz.impl.matchers.GroupMatcher) throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.core.QuartzSchedulerResources $r1;
        org.quartz.spi.JobStore $r2;
        java.util.Set $r3;
        org.quartz.impl.matchers.GroupMatcher r4;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r4 := @parameter0: org.quartz.impl.matchers.GroupMatcher;

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void validateState()>();

        if r4 != null goto label1;

        r4 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher groupEquals(java.lang.String)>("DEFAULT");

     label1:
        $r1 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r2 = virtualinvoke $r1.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        $r3 = interfaceinvoke $r2.<org.quartz.spi.JobStore: java.util.Set getJobKeys(org.quartz.impl.matchers.GroupMatcher)>(r4);

        return $r3;
    }

    public java.util.List getTriggersOfJob(org.quartz.JobKey) throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.JobKey r1;
        org.quartz.core.QuartzSchedulerResources $r2;
        org.quartz.spi.JobStore $r3;
        java.util.List $r4;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: org.quartz.JobKey;

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void validateState()>();

        $r2 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r3 = virtualinvoke $r2.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        $r4 = interfaceinvoke $r3.<org.quartz.spi.JobStore: java.util.List getTriggersForJob(org.quartz.JobKey)>(r1);

        return $r4;
    }

    public java.util.List getTriggerGroupNames() throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.core.QuartzSchedulerResources $r1;
        org.quartz.spi.JobStore $r2;
        java.util.List $r3;

        r0 := @this: org.quartz.core.QuartzScheduler;

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void validateState()>();

        $r1 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r2 = virtualinvoke $r1.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        $r3 = interfaceinvoke $r2.<org.quartz.spi.JobStore: java.util.List getTriggerGroupNames()>();

        return $r3;
    }

    public java.util.Set getTriggerKeys(org.quartz.impl.matchers.GroupMatcher) throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.core.QuartzSchedulerResources $r1;
        org.quartz.spi.JobStore $r2;
        java.util.Set $r3;
        org.quartz.impl.matchers.GroupMatcher r4;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r4 := @parameter0: org.quartz.impl.matchers.GroupMatcher;

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void validateState()>();

        if r4 != null goto label1;

        r4 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher groupEquals(java.lang.String)>("DEFAULT");

     label1:
        $r1 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r2 = virtualinvoke $r1.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        $r3 = interfaceinvoke $r2.<org.quartz.spi.JobStore: java.util.Set getTriggerKeys(org.quartz.impl.matchers.GroupMatcher)>(r4);

        return $r3;
    }

    public org.quartz.JobDetail getJobDetail(org.quartz.JobKey) throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.JobKey r1;
        org.quartz.core.QuartzSchedulerResources $r2;
        org.quartz.spi.JobStore $r3;
        org.quartz.JobDetail $r4;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: org.quartz.JobKey;

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void validateState()>();

        $r2 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r3 = virtualinvoke $r2.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        $r4 = interfaceinvoke $r3.<org.quartz.spi.JobStore: org.quartz.JobDetail retrieveJob(org.quartz.JobKey)>(r1);

        return $r4;
    }

    public org.quartz.Trigger getTrigger(org.quartz.TriggerKey) throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.TriggerKey r1;
        org.quartz.core.QuartzSchedulerResources $r2;
        org.quartz.spi.JobStore $r3;
        org.quartz.spi.OperableTrigger $r4;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: org.quartz.TriggerKey;

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void validateState()>();

        $r2 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r3 = virtualinvoke $r2.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        $r4 = interfaceinvoke $r3.<org.quartz.spi.JobStore: org.quartz.spi.OperableTrigger retrieveTrigger(org.quartz.TriggerKey)>(r1);

        return $r4;
    }

    public boolean checkExists(org.quartz.JobKey) throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.JobKey r1;
        org.quartz.core.QuartzSchedulerResources $r2;
        org.quartz.spi.JobStore $r3;
        boolean $z0;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: org.quartz.JobKey;

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void validateState()>();

        $r2 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r3 = virtualinvoke $r2.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        $z0 = interfaceinvoke $r3.<org.quartz.spi.JobStore: boolean checkExists(org.quartz.JobKey)>(r1);

        return $z0;
    }

    public boolean checkExists(org.quartz.TriggerKey) throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.TriggerKey r1;
        org.quartz.core.QuartzSchedulerResources $r2;
        org.quartz.spi.JobStore $r3;
        boolean $z0;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: org.quartz.TriggerKey;

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void validateState()>();

        $r2 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r3 = virtualinvoke $r2.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        $z0 = interfaceinvoke $r3.<org.quartz.spi.JobStore: boolean checkExists(org.quartz.TriggerKey)>(r1);

        return $z0;
    }

    public void clear() throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.core.QuartzSchedulerResources $r1;
        org.quartz.spi.JobStore $r2;

        r0 := @this: org.quartz.core.QuartzScheduler;

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void validateState()>();

        $r1 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r2 = virtualinvoke $r1.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        interfaceinvoke $r2.<org.quartz.spi.JobStore: void clearAllSchedulingData()>();

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void notifySchedulerListenersUnscheduled(org.quartz.TriggerKey)>(null);

        return;
    }

    public org.quartz.Trigger$TriggerState getTriggerState(org.quartz.TriggerKey) throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.TriggerKey r1;
        org.quartz.core.QuartzSchedulerResources $r2;
        org.quartz.spi.JobStore $r3;
        org.quartz.Trigger$TriggerState $r4;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: org.quartz.TriggerKey;

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void validateState()>();

        $r2 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r3 = virtualinvoke $r2.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        $r4 = interfaceinvoke $r3.<org.quartz.spi.JobStore: org.quartz.Trigger$TriggerState getTriggerState(org.quartz.TriggerKey)>(r1);

        return $r4;
    }

    public void resetTriggerFromErrorState(org.quartz.TriggerKey) throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.TriggerKey r1;
        org.quartz.core.QuartzSchedulerResources $r2;
        org.quartz.spi.JobStore $r3;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: org.quartz.TriggerKey;

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void validateState()>();

        $r2 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r3 = virtualinvoke $r2.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        interfaceinvoke $r3.<org.quartz.spi.JobStore: void resetTriggerFromErrorState(org.quartz.TriggerKey)>(r1);

        return;
    }

    public void addCalendar(java.lang.String, org.quartz.Calendar, boolean, boolean) throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        java.lang.String r1;
        org.quartz.Calendar r2;
        boolean z0, z1;
        org.quartz.core.QuartzSchedulerResources $r3;
        org.quartz.spi.JobStore $r4;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.quartz.Calendar;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void validateState()>();

        $r3 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r4 = virtualinvoke $r3.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        interfaceinvoke $r4.<org.quartz.spi.JobStore: void storeCalendar(java.lang.String,org.quartz.Calendar,boolean,boolean)>(r1, r2, z0, z1);

        return;
    }

    public boolean deleteCalendar(java.lang.String) throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        java.lang.String r1;
        org.quartz.core.QuartzSchedulerResources $r2;
        org.quartz.spi.JobStore $r3;
        boolean $z0;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void validateState()>();

        $r2 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r3 = virtualinvoke $r2.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        $z0 = interfaceinvoke $r3.<org.quartz.spi.JobStore: boolean removeCalendar(java.lang.String)>(r1);

        return $z0;
    }

    public org.quartz.Calendar getCalendar(java.lang.String) throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        java.lang.String r1;
        org.quartz.core.QuartzSchedulerResources $r2;
        org.quartz.spi.JobStore $r3;
        org.quartz.Calendar $r4;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void validateState()>();

        $r2 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r3 = virtualinvoke $r2.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        $r4 = interfaceinvoke $r3.<org.quartz.spi.JobStore: org.quartz.Calendar retrieveCalendar(java.lang.String)>(r1);

        return $r4;
    }

    public java.util.List getCalendarNames() throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.core.QuartzSchedulerResources $r1;
        org.quartz.spi.JobStore $r2;
        java.util.List $r3;

        r0 := @this: org.quartz.core.QuartzScheduler;

        virtualinvoke r0.<org.quartz.core.QuartzScheduler: void validateState()>();

        $r1 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r2 = virtualinvoke $r1.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        $r3 = interfaceinvoke $r2.<org.quartz.spi.JobStore: java.util.List getCalendarNames()>();

        return $r3;
    }

    public org.quartz.ListenerManager getListenerManager()
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.ListenerManager $r1;

        r0 := @this: org.quartz.core.QuartzScheduler;

        $r1 = r0.<org.quartz.core.QuartzScheduler: org.quartz.ListenerManager listenerManager>;

        return $r1;
    }

    public void addInternalJobListener(org.quartz.JobListener)
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.JobListener r1;
        java.lang.String $r4, $r6, $r9;
        java.lang.IllegalArgumentException $r5;
        int $i0;
        java.util.HashMap $r7, $r8;
        java.lang.Throwable $r11;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: org.quartz.JobListener;

        $r4 = interfaceinvoke r1.<org.quartz.JobListener: java.lang.String getName()>();

        if $r4 == null goto label1;

        $r6 = interfaceinvoke r1.<org.quartz.JobListener: java.lang.String getName()>();

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("JobListener name cannot be empty.");

        throw $r5;

     label2:
        $r7 = r0.<org.quartz.core.QuartzScheduler: java.util.HashMap internalJobListeners>;

        entermonitor $r7;

     label3:
        $r8 = r0.<org.quartz.core.QuartzScheduler: java.util.HashMap internalJobListeners>;

        $r9 = interfaceinvoke r1.<org.quartz.JobListener: java.lang.String getName()>();

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r1);

        exitmonitor $r7;

     label4:
        goto label7;

     label5:
        $r11 := @caughtexception;

        exitmonitor $r7;

     label6:
        throw $r11;

     label7:
        return;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public boolean removeInternalJobListener(java.lang.String)
    {
        org.quartz.core.QuartzScheduler r0;
        java.lang.String r1;
        java.util.HashMap $r4, $r5;
        java.lang.Object $r6;
        java.lang.Throwable $r7;
        boolean $z0;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<org.quartz.core.QuartzScheduler: java.util.HashMap internalJobListeners>;

        entermonitor $r4;

     label1:
        $r5 = r0.<org.quartz.core.QuartzScheduler: java.util.HashMap internalJobListeners>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

        if $r6 == null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        exitmonitor $r4;

     label4:
        return $z0;

     label5:
        $r7 := @caughtexception;

        exitmonitor $r4;

     label6:
        throw $r7;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public java.util.List getInternalJobListeners()
    {
        org.quartz.core.QuartzScheduler r0;
        java.util.HashMap $r3, $r5;
        java.util.LinkedList $r4;
        java.util.Collection $r6;
        java.util.List $r7;
        java.lang.Throwable $r8;

        r0 := @this: org.quartz.core.QuartzScheduler;

        $r3 = r0.<org.quartz.core.QuartzScheduler: java.util.HashMap internalJobListeners>;

        entermonitor $r3;

     label1:
        $r4 = new java.util.LinkedList;

        $r5 = r0.<org.quartz.core.QuartzScheduler: java.util.HashMap internalJobListeners>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.util.Collection values()>();

        specialinvoke $r4.<java.util.LinkedList: void <init>(java.util.Collection)>($r6);

        $r7 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r4);

        exitmonitor $r3;

     label2:
        return $r7;

     label3:
        $r8 := @caughtexception;

        exitmonitor $r3;

     label4:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public org.quartz.JobListener getInternalJobListener(java.lang.String)
    {
        org.quartz.core.QuartzScheduler r0;
        java.lang.String r1;
        java.util.HashMap $r4, $r5;
        java.lang.Object $r6;
        org.quartz.JobListener $r7;
        java.lang.Throwable $r8;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<org.quartz.core.QuartzScheduler: java.util.HashMap internalJobListeners>;

        entermonitor $r4;

     label1:
        $r5 = r0.<org.quartz.core.QuartzScheduler: java.util.HashMap internalJobListeners>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r7 = (org.quartz.JobListener) $r6;

        exitmonitor $r4;

     label2:
        return $r7;

     label3:
        $r8 := @caughtexception;

        exitmonitor $r4;

     label4:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void addInternalTriggerListener(org.quartz.TriggerListener)
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.TriggerListener r1;
        java.lang.String $r4, $r6, $r9;
        java.lang.IllegalArgumentException $r5;
        int $i0;
        java.util.HashMap $r7, $r8;
        java.lang.Throwable $r11;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: org.quartz.TriggerListener;

        $r4 = interfaceinvoke r1.<org.quartz.TriggerListener: java.lang.String getName()>();

        if $r4 == null goto label1;

        $r6 = interfaceinvoke r1.<org.quartz.TriggerListener: java.lang.String getName()>();

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("TriggerListener name cannot be empty.");

        throw $r5;

     label2:
        $r7 = r0.<org.quartz.core.QuartzScheduler: java.util.HashMap internalTriggerListeners>;

        entermonitor $r7;

     label3:
        $r8 = r0.<org.quartz.core.QuartzScheduler: java.util.HashMap internalTriggerListeners>;

        $r9 = interfaceinvoke r1.<org.quartz.TriggerListener: java.lang.String getName()>();

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r1);

        exitmonitor $r7;

     label4:
        goto label7;

     label5:
        $r11 := @caughtexception;

        exitmonitor $r7;

     label6:
        throw $r11;

     label7:
        return;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public boolean removeinternalTriggerListener(java.lang.String)
    {
        org.quartz.core.QuartzScheduler r0;
        java.lang.String r1;
        java.util.HashMap $r4, $r5;
        java.lang.Object $r6;
        java.lang.Throwable $r7;
        boolean $z0;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<org.quartz.core.QuartzScheduler: java.util.HashMap internalTriggerListeners>;

        entermonitor $r4;

     label1:
        $r5 = r0.<org.quartz.core.QuartzScheduler: java.util.HashMap internalTriggerListeners>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

        if $r6 == null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        exitmonitor $r4;

     label4:
        return $z0;

     label5:
        $r7 := @caughtexception;

        exitmonitor $r4;

     label6:
        throw $r7;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public java.util.List getInternalTriggerListeners()
    {
        org.quartz.core.QuartzScheduler r0;
        java.util.HashMap $r3, $r5;
        java.util.LinkedList $r4;
        java.util.Collection $r6;
        java.util.List $r7;
        java.lang.Throwable $r8;

        r0 := @this: org.quartz.core.QuartzScheduler;

        $r3 = r0.<org.quartz.core.QuartzScheduler: java.util.HashMap internalTriggerListeners>;

        entermonitor $r3;

     label1:
        $r4 = new java.util.LinkedList;

        $r5 = r0.<org.quartz.core.QuartzScheduler: java.util.HashMap internalTriggerListeners>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.util.Collection values()>();

        specialinvoke $r4.<java.util.LinkedList: void <init>(java.util.Collection)>($r6);

        $r7 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r4);

        exitmonitor $r3;

     label2:
        return $r7;

     label3:
        $r8 := @caughtexception;

        exitmonitor $r3;

     label4:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public org.quartz.TriggerListener getInternalTriggerListener(java.lang.String)
    {
        org.quartz.core.QuartzScheduler r0;
        java.lang.String r1;
        java.util.HashMap $r4, $r5;
        java.lang.Object $r6;
        org.quartz.TriggerListener $r7;
        java.lang.Throwable $r8;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<org.quartz.core.QuartzScheduler: java.util.HashMap internalTriggerListeners>;

        entermonitor $r4;

     label1:
        $r5 = r0.<org.quartz.core.QuartzScheduler: java.util.HashMap internalTriggerListeners>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r7 = (org.quartz.TriggerListener) $r6;

        exitmonitor $r4;

     label2:
        return $r7;

     label3:
        $r8 := @caughtexception;

        exitmonitor $r4;

     label4:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void addInternalSchedulerListener(org.quartz.SchedulerListener)
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.SchedulerListener r1;
        java.util.ArrayList $r4, $r5;
        java.lang.Throwable $r6;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: org.quartz.SchedulerListener;

        $r4 = r0.<org.quartz.core.QuartzScheduler: java.util.ArrayList internalSchedulerListeners>;

        entermonitor $r4;

     label1:
        $r5 = r0.<org.quartz.core.QuartzScheduler: java.util.ArrayList internalSchedulerListeners>;

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        exitmonitor $r4;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        exitmonitor $r4;

     label4:
        throw $r6;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean removeInternalSchedulerListener(org.quartz.SchedulerListener)
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.SchedulerListener r1;
        java.util.ArrayList $r4, $r5;
        boolean $z0;
        java.lang.Throwable $r6;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: org.quartz.SchedulerListener;

        $r4 = r0.<org.quartz.core.QuartzScheduler: java.util.ArrayList internalSchedulerListeners>;

        entermonitor $r4;

     label1:
        $r5 = r0.<org.quartz.core.QuartzScheduler: java.util.ArrayList internalSchedulerListeners>;

        $z0 = virtualinvoke $r5.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        exitmonitor $r4;

     label2:
        return $z0;

     label3:
        $r6 := @caughtexception;

        exitmonitor $r4;

     label4:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.util.List getInternalSchedulerListeners()
    {
        org.quartz.core.QuartzScheduler r0;
        java.util.ArrayList $r3, $r4, $r5;
        java.util.List $r6;
        java.lang.Throwable $r7;

        r0 := @this: org.quartz.core.QuartzScheduler;

        $r3 = r0.<org.quartz.core.QuartzScheduler: java.util.ArrayList internalSchedulerListeners>;

        entermonitor $r3;

     label1:
        $r4 = new java.util.ArrayList;

        $r5 = r0.<org.quartz.core.QuartzScheduler: java.util.ArrayList internalSchedulerListeners>;

        specialinvoke $r4.<java.util.ArrayList: void <init>(java.util.Collection)>($r5);

        $r6 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r4);

        exitmonitor $r3;

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        exitmonitor $r3;

     label4:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected void notifyJobStoreJobComplete(org.quartz.spi.OperableTrigger, org.quartz.JobDetail, org.quartz.Trigger$CompletedExecutionInstruction)
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.spi.OperableTrigger r1;
        org.quartz.JobDetail r2;
        org.quartz.Trigger$CompletedExecutionInstruction r3;
        org.quartz.core.QuartzSchedulerResources $r4;
        org.quartz.spi.JobStore $r5;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: org.quartz.spi.OperableTrigger;

        r2 := @parameter1: org.quartz.JobDetail;

        r3 := @parameter2: org.quartz.Trigger$CompletedExecutionInstruction;

        $r4 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r5 = virtualinvoke $r4.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        interfaceinvoke $r5.<org.quartz.spi.JobStore: void triggeredJobComplete(org.quartz.spi.OperableTrigger,org.quartz.JobDetail,org.quartz.Trigger$CompletedExecutionInstruction)>(r1, r2, r3);

        return;
    }

    protected void notifyJobStoreJobVetoed(org.quartz.spi.OperableTrigger, org.quartz.JobDetail, org.quartz.Trigger$CompletedExecutionInstruction)
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.spi.OperableTrigger r1;
        org.quartz.JobDetail r2;
        org.quartz.Trigger$CompletedExecutionInstruction r3;
        org.quartz.core.QuartzSchedulerResources $r4;
        org.quartz.spi.JobStore $r5;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: org.quartz.spi.OperableTrigger;

        r2 := @parameter1: org.quartz.JobDetail;

        r3 := @parameter2: org.quartz.Trigger$CompletedExecutionInstruction;

        $r4 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r5 = virtualinvoke $r4.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        interfaceinvoke $r5.<org.quartz.spi.JobStore: void triggeredJobComplete(org.quartz.spi.OperableTrigger,org.quartz.JobDetail,org.quartz.Trigger$CompletedExecutionInstruction)>(r1, r2, r3);

        return;
    }

    protected void notifySchedulerThread(long)
    {
        org.quartz.core.QuartzScheduler r0;
        long l0;
        boolean $z0;
        org.quartz.spi.SchedulerSignaler $r1;

        r0 := @this: org.quartz.core.QuartzScheduler;

        l0 := @parameter0: long;

        $z0 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: boolean isSignalOnSchedulingChange()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.quartz.core.QuartzScheduler: org.quartz.spi.SchedulerSignaler signaler>;

        interfaceinvoke $r1.<org.quartz.spi.SchedulerSignaler: void signalSchedulingChange(long)>(l0);

     label1:
        return;
    }

    private java.util.List buildTriggerListenerList() throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        java.util.LinkedList $r2;
        org.quartz.ListenerManager $r3;
        java.util.List $r4, $r5;

        r0 := @this: org.quartz.core.QuartzScheduler;

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        $r3 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: org.quartz.ListenerManager getListenerManager()>();

        $r4 = interfaceinvoke $r3.<org.quartz.ListenerManager: java.util.List getTriggerListeners()>();

        interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>($r4);

        $r5 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: java.util.List getInternalTriggerListeners()>();

        interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>($r5);

        return $r2;
    }

    private java.util.List buildJobListenerList() throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        java.util.LinkedList $r2;
        org.quartz.ListenerManager $r3;
        java.util.List $r4, $r5;

        r0 := @this: org.quartz.core.QuartzScheduler;

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        $r3 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: org.quartz.ListenerManager getListenerManager()>();

        $r4 = interfaceinvoke $r3.<org.quartz.ListenerManager: java.util.List getJobListeners()>();

        interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>($r4);

        $r5 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: java.util.List getInternalJobListeners()>();

        interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>($r5);

        return $r2;
    }

    private java.util.List buildSchedulerListenerList()
    {
        org.quartz.core.QuartzScheduler r0;
        java.util.LinkedList $r2;
        org.quartz.ListenerManager $r3;
        java.util.List $r4, $r5;

        r0 := @this: org.quartz.core.QuartzScheduler;

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        $r3 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: org.quartz.ListenerManager getListenerManager()>();

        $r4 = interfaceinvoke $r3.<org.quartz.ListenerManager: java.util.List getSchedulerListeners()>();

        interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>($r4);

        $r5 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: java.util.List getInternalSchedulerListeners()>();

        interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>($r5);

        return $r2;
    }

    private boolean matchJobListener(org.quartz.JobListener, org.quartz.JobKey)
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.JobListener r1;
        org.quartz.JobKey r2;
        java.util.List r3;
        java.util.Iterator r4;
        org.quartz.Matcher r5;
        org.quartz.ListenerManager $r6;
        java.lang.String $r7;
        boolean $z0, $z1;
        java.lang.Object $r8;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: org.quartz.JobListener;

        r2 := @parameter1: org.quartz.JobKey;

        $r6 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: org.quartz.ListenerManager getListenerManager()>();

        $r7 = interfaceinvoke r1.<org.quartz.JobListener: java.lang.String getName()>();

        r3 = interfaceinvoke $r6.<org.quartz.ListenerManager: java.util.List getJobListenerMatchers(java.lang.String)>($r7);

        if r3 != null goto label1;

        return 1;

     label1:
        r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.quartz.Matcher) $r8;

        $z1 = interfaceinvoke r5.<org.quartz.Matcher: boolean isMatch(org.quartz.utils.Key)>(r2);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        goto label2;

     label4:
        return 0;
    }

    private boolean matchTriggerListener(org.quartz.TriggerListener, org.quartz.TriggerKey)
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.TriggerListener r1;
        org.quartz.TriggerKey r2;
        java.util.List r3;
        java.util.Iterator r4;
        org.quartz.Matcher r5;
        org.quartz.ListenerManager $r6;
        java.lang.String $r7;
        boolean $z0, $z1;
        java.lang.Object $r8;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: org.quartz.TriggerListener;

        r2 := @parameter1: org.quartz.TriggerKey;

        $r6 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: org.quartz.ListenerManager getListenerManager()>();

        $r7 = interfaceinvoke r1.<org.quartz.TriggerListener: java.lang.String getName()>();

        r3 = interfaceinvoke $r6.<org.quartz.ListenerManager: java.util.List getTriggerListenerMatchers(java.lang.String)>($r7);

        if r3 != null goto label1;

        return 1;

     label1:
        r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.quartz.Matcher) $r8;

        $z1 = interfaceinvoke r5.<org.quartz.Matcher: boolean isMatch(org.quartz.utils.Key)>(r2);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        goto label2;

     label4:
        return 0;
    }

    public boolean notifyTriggerListenersFired(org.quartz.JobExecutionContext) throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.JobExecutionContext r1;
        java.util.List r2;
        java.util.Iterator r3;
        org.quartz.TriggerListener r4;
        java.lang.Object $r7;
        org.quartz.Trigger $r8, $r10, $r11;
        org.quartz.TriggerKey $r9;
        boolean $z0, $z1, z2, $z3;
        java.lang.Exception $r12;
        org.quartz.SchedulerException $r13;
        java.lang.StringBuilder $r14, $r15, $r17, $r18, $r20;
        java.lang.String $r16, $r19, $r21;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: org.quartz.JobExecutionContext;

        z2 = 0;

        r2 = specialinvoke r0.<org.quartz.core.QuartzScheduler: java.util.List buildTriggerListenerList()>();

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label8;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.quartz.TriggerListener) $r7;

     label2:
        $r8 = interfaceinvoke r1.<org.quartz.JobExecutionContext: org.quartz.Trigger getTrigger()>();

        $r9 = interfaceinvoke $r8.<org.quartz.Trigger: org.quartz.TriggerKey getKey()>();

        $z0 = specialinvoke r0.<org.quartz.core.QuartzScheduler: boolean matchTriggerListener(org.quartz.TriggerListener,org.quartz.TriggerKey)>(r4, $r9);

        if $z0 != 0 goto label4;

     label3:
        goto label1;

     label4:
        $r10 = interfaceinvoke r1.<org.quartz.JobExecutionContext: org.quartz.Trigger getTrigger()>();

        interfaceinvoke r4.<org.quartz.TriggerListener: void triggerFired(org.quartz.Trigger,org.quartz.JobExecutionContext)>($r10, r1);

        $r11 = interfaceinvoke r1.<org.quartz.JobExecutionContext: org.quartz.Trigger getTrigger()>();

        $z1 = interfaceinvoke r4.<org.quartz.TriggerListener: boolean vetoJobExecution(org.quartz.Trigger,org.quartz.JobExecutionContext)>($r11, r1);

        if $z1 == 0 goto label5;

        z2 = 1;

     label5:
        goto label7;

     label6:
        $r12 := @caughtexception;

        $r13 = new org.quartz.SchedulerException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("TriggerListener \'");

        $r16 = interfaceinvoke r4.<org.quartz.TriggerListener: java.lang.String getName()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' threw exception: ");

        $r19 = virtualinvoke $r12.<java.lang.Exception: java.lang.String getMessage()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<org.quartz.SchedulerException: void <init>(java.lang.String,java.lang.Throwable)>($r21, $r12);

        throw $r13;

     label7:
        goto label1;

     label8:
        return z2;

        catch java.lang.Exception from label2 to label3 with label6;
        catch java.lang.Exception from label4 to label5 with label6;
    }

    public void notifyTriggerListenersMisfired(org.quartz.Trigger) throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.Trigger r1;
        java.util.List r2;
        java.util.Iterator r3;
        org.quartz.TriggerListener r4;
        java.lang.Object $r7;
        org.quartz.TriggerKey $r8;
        boolean $z0, $z1;
        java.lang.Exception $r9;
        org.quartz.SchedulerException $r10;
        java.lang.StringBuilder $r11, $r12, $r14, $r15, $r17;
        java.lang.String $r13, $r16, $r18;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: org.quartz.Trigger;

        r2 = specialinvoke r0.<org.quartz.core.QuartzScheduler: java.util.List buildTriggerListenerList()>();

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label8;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.quartz.TriggerListener) $r7;

     label2:
        $r8 = interfaceinvoke r1.<org.quartz.Trigger: org.quartz.TriggerKey getKey()>();

        $z0 = specialinvoke r0.<org.quartz.core.QuartzScheduler: boolean matchTriggerListener(org.quartz.TriggerListener,org.quartz.TriggerKey)>(r4, $r8);

        if $z0 != 0 goto label4;

     label3:
        goto label1;

     label4:
        interfaceinvoke r4.<org.quartz.TriggerListener: void triggerMisfired(org.quartz.Trigger)>(r1);

     label5:
        goto label7;

     label6:
        $r9 := @caughtexception;

        $r10 = new org.quartz.SchedulerException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("TriggerListener \'");

        $r13 = interfaceinvoke r4.<org.quartz.TriggerListener: java.lang.String getName()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' threw exception: ");

        $r16 = virtualinvoke $r9.<java.lang.Exception: java.lang.String getMessage()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<org.quartz.SchedulerException: void <init>(java.lang.String,java.lang.Throwable)>($r18, $r9);

        throw $r10;

     label7:
        goto label1;

     label8:
        return;

        catch java.lang.Exception from label2 to label3 with label6;
        catch java.lang.Exception from label4 to label5 with label6;
    }

    public void notifyTriggerListenersComplete(org.quartz.JobExecutionContext, org.quartz.Trigger$CompletedExecutionInstruction) throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.JobExecutionContext r1;
        org.quartz.Trigger$CompletedExecutionInstruction r2;
        java.util.List r3;
        java.util.Iterator r4;
        org.quartz.TriggerListener r5;
        java.lang.Object $r8;
        org.quartz.Trigger $r9, $r11;
        org.quartz.TriggerKey $r10;
        boolean $z0, $z1;
        java.lang.Exception $r12;
        org.quartz.SchedulerException $r13;
        java.lang.StringBuilder $r14, $r15, $r17, $r18, $r20;
        java.lang.String $r16, $r19, $r21;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: org.quartz.JobExecutionContext;

        r2 := @parameter1: org.quartz.Trigger$CompletedExecutionInstruction;

        r3 = specialinvoke r0.<org.quartz.core.QuartzScheduler: java.util.List buildTriggerListenerList()>();

        r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label8;

        $r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.quartz.TriggerListener) $r8;

     label2:
        $r9 = interfaceinvoke r1.<org.quartz.JobExecutionContext: org.quartz.Trigger getTrigger()>();

        $r10 = interfaceinvoke $r9.<org.quartz.Trigger: org.quartz.TriggerKey getKey()>();

        $z0 = specialinvoke r0.<org.quartz.core.QuartzScheduler: boolean matchTriggerListener(org.quartz.TriggerListener,org.quartz.TriggerKey)>(r5, $r10);

        if $z0 != 0 goto label4;

     label3:
        goto label1;

     label4:
        $r11 = interfaceinvoke r1.<org.quartz.JobExecutionContext: org.quartz.Trigger getTrigger()>();

        interfaceinvoke r5.<org.quartz.TriggerListener: void triggerComplete(org.quartz.Trigger,org.quartz.JobExecutionContext,org.quartz.Trigger$CompletedExecutionInstruction)>($r11, r1, r2);

     label5:
        goto label7;

     label6:
        $r12 := @caughtexception;

        $r13 = new org.quartz.SchedulerException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("TriggerListener \'");

        $r16 = interfaceinvoke r5.<org.quartz.TriggerListener: java.lang.String getName()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' threw exception: ");

        $r19 = virtualinvoke $r12.<java.lang.Exception: java.lang.String getMessage()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<org.quartz.SchedulerException: void <init>(java.lang.String,java.lang.Throwable)>($r21, $r12);

        throw $r13;

     label7:
        goto label1;

     label8:
        return;

        catch java.lang.Exception from label2 to label3 with label6;
        catch java.lang.Exception from label4 to label5 with label6;
    }

    public void notifyJobListenersToBeExecuted(org.quartz.JobExecutionContext) throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.JobExecutionContext r1;
        java.util.List r2;
        java.util.Iterator r3;
        org.quartz.JobListener r4;
        java.lang.Object $r7;
        org.quartz.JobDetail $r8;
        org.quartz.JobKey $r9;
        boolean $z0, $z1;
        java.lang.Exception $r10;
        org.quartz.SchedulerException $r11;
        java.lang.StringBuilder $r12, $r13, $r15, $r16, $r18;
        java.lang.String $r14, $r17, $r19;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: org.quartz.JobExecutionContext;

        r2 = specialinvoke r0.<org.quartz.core.QuartzScheduler: java.util.List buildJobListenerList()>();

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label8;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.quartz.JobListener) $r7;

     label2:
        $r8 = interfaceinvoke r1.<org.quartz.JobExecutionContext: org.quartz.JobDetail getJobDetail()>();

        $r9 = interfaceinvoke $r8.<org.quartz.JobDetail: org.quartz.JobKey getKey()>();

        $z0 = specialinvoke r0.<org.quartz.core.QuartzScheduler: boolean matchJobListener(org.quartz.JobListener,org.quartz.JobKey)>(r4, $r9);

        if $z0 != 0 goto label4;

     label3:
        goto label1;

     label4:
        interfaceinvoke r4.<org.quartz.JobListener: void jobToBeExecuted(org.quartz.JobExecutionContext)>(r1);

     label5:
        goto label7;

     label6:
        $r10 := @caughtexception;

        $r11 = new org.quartz.SchedulerException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("JobListener \'");

        $r14 = interfaceinvoke r4.<org.quartz.JobListener: java.lang.String getName()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' threw exception: ");

        $r17 = virtualinvoke $r10.<java.lang.Exception: java.lang.String getMessage()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<org.quartz.SchedulerException: void <init>(java.lang.String,java.lang.Throwable)>($r19, $r10);

        throw $r11;

     label7:
        goto label1;

     label8:
        return;

        catch java.lang.Exception from label2 to label3 with label6;
        catch java.lang.Exception from label4 to label5 with label6;
    }

    public void notifyJobListenersWasVetoed(org.quartz.JobExecutionContext) throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.JobExecutionContext r1;
        java.util.List r2;
        java.util.Iterator r3;
        org.quartz.JobListener r4;
        java.lang.Object $r7;
        org.quartz.JobDetail $r8;
        org.quartz.JobKey $r9;
        boolean $z0, $z1;
        java.lang.Exception $r10;
        org.quartz.SchedulerException $r11;
        java.lang.StringBuilder $r12, $r13, $r15, $r16, $r18;
        java.lang.String $r14, $r17, $r19;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: org.quartz.JobExecutionContext;

        r2 = specialinvoke r0.<org.quartz.core.QuartzScheduler: java.util.List buildJobListenerList()>();

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label8;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.quartz.JobListener) $r7;

     label2:
        $r8 = interfaceinvoke r1.<org.quartz.JobExecutionContext: org.quartz.JobDetail getJobDetail()>();

        $r9 = interfaceinvoke $r8.<org.quartz.JobDetail: org.quartz.JobKey getKey()>();

        $z0 = specialinvoke r0.<org.quartz.core.QuartzScheduler: boolean matchJobListener(org.quartz.JobListener,org.quartz.JobKey)>(r4, $r9);

        if $z0 != 0 goto label4;

     label3:
        goto label1;

     label4:
        interfaceinvoke r4.<org.quartz.JobListener: void jobExecutionVetoed(org.quartz.JobExecutionContext)>(r1);

     label5:
        goto label7;

     label6:
        $r10 := @caughtexception;

        $r11 = new org.quartz.SchedulerException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("JobListener \'");

        $r14 = interfaceinvoke r4.<org.quartz.JobListener: java.lang.String getName()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' threw exception: ");

        $r17 = virtualinvoke $r10.<java.lang.Exception: java.lang.String getMessage()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<org.quartz.SchedulerException: void <init>(java.lang.String,java.lang.Throwable)>($r19, $r10);

        throw $r11;

     label7:
        goto label1;

     label8:
        return;

        catch java.lang.Exception from label2 to label3 with label6;
        catch java.lang.Exception from label4 to label5 with label6;
    }

    public void notifyJobListenersWasExecuted(org.quartz.JobExecutionContext, org.quartz.JobExecutionException) throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.JobExecutionContext r1;
        org.quartz.JobExecutionException r2;
        java.util.List r3;
        java.util.Iterator r4;
        org.quartz.JobListener r5;
        java.lang.Object $r8;
        org.quartz.JobDetail $r9;
        org.quartz.JobKey $r10;
        boolean $z0, $z1;
        java.lang.Exception $r11;
        org.quartz.SchedulerException $r12;
        java.lang.StringBuilder $r13, $r14, $r16, $r17, $r19;
        java.lang.String $r15, $r18, $r20;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: org.quartz.JobExecutionContext;

        r2 := @parameter1: org.quartz.JobExecutionException;

        r3 = specialinvoke r0.<org.quartz.core.QuartzScheduler: java.util.List buildJobListenerList()>();

        r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label8;

        $r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.quartz.JobListener) $r8;

     label2:
        $r9 = interfaceinvoke r1.<org.quartz.JobExecutionContext: org.quartz.JobDetail getJobDetail()>();

        $r10 = interfaceinvoke $r9.<org.quartz.JobDetail: org.quartz.JobKey getKey()>();

        $z0 = specialinvoke r0.<org.quartz.core.QuartzScheduler: boolean matchJobListener(org.quartz.JobListener,org.quartz.JobKey)>(r5, $r10);

        if $z0 != 0 goto label4;

     label3:
        goto label1;

     label4:
        interfaceinvoke r5.<org.quartz.JobListener: void jobWasExecuted(org.quartz.JobExecutionContext,org.quartz.JobExecutionException)>(r1, r2);

     label5:
        goto label7;

     label6:
        $r11 := @caughtexception;

        $r12 = new org.quartz.SchedulerException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("JobListener \'");

        $r15 = interfaceinvoke r5.<org.quartz.JobListener: java.lang.String getName()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' threw exception: ");

        $r18 = virtualinvoke $r11.<java.lang.Exception: java.lang.String getMessage()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<org.quartz.SchedulerException: void <init>(java.lang.String,java.lang.Throwable)>($r20, $r11);

        throw $r12;

     label7:
        goto label1;

     label8:
        return;

        catch java.lang.Exception from label2 to label3 with label6;
        catch java.lang.Exception from label4 to label5 with label6;
    }

    public void notifySchedulerListenersError(java.lang.String, org.quartz.SchedulerException)
    {
        org.quartz.core.QuartzScheduler r0;
        java.lang.String r1, $r14;
        org.quartz.SchedulerException r2;
        java.util.List r3;
        java.util.Iterator r4;
        org.quartz.SchedulerListener r5;
        boolean $z0;
        java.lang.Object $r7;
        java.lang.Exception $r8;
        org.slf4j.Logger $r9, $r10;
        java.lang.StringBuilder $r11, $r12, $r13;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.quartz.SchedulerException;

        r3 = specialinvoke r0.<org.quartz.core.QuartzScheduler: java.util.List buildSchedulerListenerList()>();

        r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.quartz.SchedulerListener) $r7;

     label2:
        interfaceinvoke r5.<org.quartz.SchedulerListener: void schedulerError(java.lang.String,org.quartz.SchedulerException)>(r1, r2);

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;

        $r9 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: org.slf4j.Logger getLog()>();

        interfaceinvoke $r9.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Error while notifying SchedulerListener of error: ", $r8);

        $r10 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: org.slf4j.Logger getLog()>();

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Original error (for notification) was: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r14, r2);

     label5:
        goto label1;

     label6:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public void notifySchedulerListenersSchduled(org.quartz.Trigger)
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.Trigger r1;
        java.util.List r2;
        java.util.Iterator r3;
        org.quartz.SchedulerListener r4;
        boolean $z0;
        java.lang.Object $r6;
        java.lang.Exception $r7;
        org.slf4j.Logger $r8;
        java.lang.StringBuilder $r9, $r10, $r12;
        org.quartz.TriggerKey $r11;
        java.lang.String $r13;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: org.quartz.Trigger;

        r2 = specialinvoke r0.<org.quartz.core.QuartzScheduler: java.util.List buildSchedulerListenerList()>();

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.quartz.SchedulerListener) $r6;

     label2:
        interfaceinvoke r4.<org.quartz.SchedulerListener: void jobScheduled(org.quartz.Trigger)>(r1);

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        $r8 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: org.slf4j.Logger getLog()>();

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error while notifying SchedulerListener of scheduled job.  Triger=");

        $r11 = interfaceinvoke r1.<org.quartz.Trigger: org.quartz.TriggerKey getKey()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r13, $r7);

     label5:
        goto label1;

     label6:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public void notifySchedulerListenersUnscheduled(org.quartz.TriggerKey)
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.TriggerKey r1;
        java.util.List r2;
        java.util.Iterator r3;
        org.quartz.SchedulerListener r4;
        boolean $z0;
        java.lang.Object $r6;
        java.lang.Exception $r7;
        org.slf4j.Logger $r8;
        java.lang.StringBuilder $r9, $r10, $r11;
        java.lang.String $r12;
        java.io.Serializable $r13;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: org.quartz.TriggerKey;

        r2 = specialinvoke r0.<org.quartz.core.QuartzScheduler: java.util.List buildSchedulerListenerList()>();

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.quartz.SchedulerListener) $r6;

     label2:
        if r1 != null goto label3;

        interfaceinvoke r4.<org.quartz.SchedulerListener: void schedulingDataCleared()>();

        goto label4;

     label3:
        interfaceinvoke r4.<org.quartz.SchedulerListener: void jobUnscheduled(org.quartz.TriggerKey)>(r1);

     label4:
        goto label8;

     label5:
        $r7 := @caughtexception;

        $r8 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: org.slf4j.Logger getLog()>();

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error while notifying SchedulerListener of unscheduled job.  Triger=");

        if r1 != null goto label6;

        $r13 = "ALL DATA";

        goto label7;

     label6:
        $r13 = r1;

     label7:
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r12, $r7);

     label8:
        goto label1;

     label9:
        return;

        catch java.lang.Exception from label2 to label4 with label5;
    }

    public void notifySchedulerListenersFinalized(org.quartz.Trigger)
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.Trigger r1;
        java.util.List r2;
        java.util.Iterator r3;
        org.quartz.SchedulerListener r4;
        boolean $z0;
        java.lang.Object $r6;
        java.lang.Exception $r7;
        org.slf4j.Logger $r8;
        java.lang.StringBuilder $r9, $r10, $r12;
        org.quartz.TriggerKey $r11;
        java.lang.String $r13;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: org.quartz.Trigger;

        r2 = specialinvoke r0.<org.quartz.core.QuartzScheduler: java.util.List buildSchedulerListenerList()>();

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.quartz.SchedulerListener) $r6;

     label2:
        interfaceinvoke r4.<org.quartz.SchedulerListener: void triggerFinalized(org.quartz.Trigger)>(r1);

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        $r8 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: org.slf4j.Logger getLog()>();

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error while notifying SchedulerListener of finalized trigger.  Triger=");

        $r11 = interfaceinvoke r1.<org.quartz.Trigger: org.quartz.TriggerKey getKey()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r13, $r7);

     label5:
        goto label1;

     label6:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public void notifySchedulerListenersPausedTrigger(org.quartz.TriggerKey)
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.TriggerKey r1;
        java.util.List r2;
        java.util.Iterator r3;
        org.quartz.SchedulerListener r4;
        boolean $z0;
        java.lang.Object $r6;
        java.lang.Exception $r7;
        org.slf4j.Logger $r8;
        java.lang.StringBuilder $r9, $r10, $r11;
        java.lang.String $r12;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: org.quartz.TriggerKey;

        r2 = specialinvoke r0.<org.quartz.core.QuartzScheduler: java.util.List buildSchedulerListenerList()>();

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.quartz.SchedulerListener) $r6;

     label2:
        interfaceinvoke r4.<org.quartz.SchedulerListener: void triggerPaused(org.quartz.TriggerKey)>(r1);

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        $r8 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: org.slf4j.Logger getLog()>();

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error while notifying SchedulerListener of paused trigger: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r12, $r7);

     label5:
        goto label1;

     label6:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public void notifySchedulerListenersPausedTriggers(java.lang.String)
    {
        org.quartz.core.QuartzScheduler r0;
        java.lang.String r1, $r12;
        java.util.List r2;
        java.util.Iterator r3;
        org.quartz.SchedulerListener r4;
        boolean $z0;
        java.lang.Object $r6;
        java.lang.Exception $r7;
        org.slf4j.Logger $r8;
        java.lang.StringBuilder $r9, $r10, $r11;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: java.lang.String;

        r2 = specialinvoke r0.<org.quartz.core.QuartzScheduler: java.util.List buildSchedulerListenerList()>();

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.quartz.SchedulerListener) $r6;

     label2:
        interfaceinvoke r4.<org.quartz.SchedulerListener: void triggersPaused(java.lang.String)>(r1);

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        $r8 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: org.slf4j.Logger getLog()>();

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error while notifying SchedulerListener of paused trigger group.");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r12, $r7);

     label5:
        goto label1;

     label6:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public void notifySchedulerListenersResumedTrigger(org.quartz.TriggerKey)
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.TriggerKey r1;
        java.util.List r2;
        java.util.Iterator r3;
        org.quartz.SchedulerListener r4;
        boolean $z0;
        java.lang.Object $r6;
        java.lang.Exception $r7;
        org.slf4j.Logger $r8;
        java.lang.StringBuilder $r9, $r10, $r11;
        java.lang.String $r12;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: org.quartz.TriggerKey;

        r2 = specialinvoke r0.<org.quartz.core.QuartzScheduler: java.util.List buildSchedulerListenerList()>();

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.quartz.SchedulerListener) $r6;

     label2:
        interfaceinvoke r4.<org.quartz.SchedulerListener: void triggerResumed(org.quartz.TriggerKey)>(r1);

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        $r8 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: org.slf4j.Logger getLog()>();

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error while notifying SchedulerListener of resumed trigger: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r12, $r7);

     label5:
        goto label1;

     label6:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public void notifySchedulerListenersResumedTriggers(java.lang.String)
    {
        org.quartz.core.QuartzScheduler r0;
        java.lang.String r1, $r12;
        java.util.List r2;
        java.util.Iterator r3;
        org.quartz.SchedulerListener r4;
        boolean $z0;
        java.lang.Object $r6;
        java.lang.Exception $r7;
        org.slf4j.Logger $r8;
        java.lang.StringBuilder $r9, $r10, $r11;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: java.lang.String;

        r2 = specialinvoke r0.<org.quartz.core.QuartzScheduler: java.util.List buildSchedulerListenerList()>();

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.quartz.SchedulerListener) $r6;

     label2:
        interfaceinvoke r4.<org.quartz.SchedulerListener: void triggersResumed(java.lang.String)>(r1);

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        $r8 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: org.slf4j.Logger getLog()>();

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error while notifying SchedulerListener of resumed group: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r12, $r7);

     label5:
        goto label1;

     label6:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public void notifySchedulerListenersPausedJob(org.quartz.JobKey)
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.JobKey r1;
        java.util.List r2;
        java.util.Iterator r3;
        org.quartz.SchedulerListener r4;
        boolean $z0;
        java.lang.Object $r6;
        java.lang.Exception $r7;
        org.slf4j.Logger $r8;
        java.lang.StringBuilder $r9, $r10, $r11;
        java.lang.String $r12;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: org.quartz.JobKey;

        r2 = specialinvoke r0.<org.quartz.core.QuartzScheduler: java.util.List buildSchedulerListenerList()>();

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.quartz.SchedulerListener) $r6;

     label2:
        interfaceinvoke r4.<org.quartz.SchedulerListener: void jobPaused(org.quartz.JobKey)>(r1);

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        $r8 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: org.slf4j.Logger getLog()>();

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error while notifying SchedulerListener of paused job: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r12, $r7);

     label5:
        goto label1;

     label6:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public void notifySchedulerListenersPausedJobs(java.lang.String)
    {
        org.quartz.core.QuartzScheduler r0;
        java.lang.String r1, $r12;
        java.util.List r2;
        java.util.Iterator r3;
        org.quartz.SchedulerListener r4;
        boolean $z0;
        java.lang.Object $r6;
        java.lang.Exception $r7;
        org.slf4j.Logger $r8;
        java.lang.StringBuilder $r9, $r10, $r11;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: java.lang.String;

        r2 = specialinvoke r0.<org.quartz.core.QuartzScheduler: java.util.List buildSchedulerListenerList()>();

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.quartz.SchedulerListener) $r6;

     label2:
        interfaceinvoke r4.<org.quartz.SchedulerListener: void jobsPaused(java.lang.String)>(r1);

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        $r8 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: org.slf4j.Logger getLog()>();

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error while notifying SchedulerListener of paused job group: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r12, $r7);

     label5:
        goto label1;

     label6:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public void notifySchedulerListenersResumedJob(org.quartz.JobKey)
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.JobKey r1;
        java.util.List r2;
        java.util.Iterator r3;
        org.quartz.SchedulerListener r4;
        boolean $z0;
        java.lang.Object $r6;
        java.lang.Exception $r7;
        org.slf4j.Logger $r8;
        java.lang.StringBuilder $r9, $r10, $r11;
        java.lang.String $r12;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: org.quartz.JobKey;

        r2 = specialinvoke r0.<org.quartz.core.QuartzScheduler: java.util.List buildSchedulerListenerList()>();

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.quartz.SchedulerListener) $r6;

     label2:
        interfaceinvoke r4.<org.quartz.SchedulerListener: void jobResumed(org.quartz.JobKey)>(r1);

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        $r8 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: org.slf4j.Logger getLog()>();

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error while notifying SchedulerListener of resumed job: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r12, $r7);

     label5:
        goto label1;

     label6:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public void notifySchedulerListenersResumedJobs(java.lang.String)
    {
        org.quartz.core.QuartzScheduler r0;
        java.lang.String r1, $r12;
        java.util.List r2;
        java.util.Iterator r3;
        org.quartz.SchedulerListener r4;
        boolean $z0;
        java.lang.Object $r6;
        java.lang.Exception $r7;
        org.slf4j.Logger $r8;
        java.lang.StringBuilder $r9, $r10, $r11;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: java.lang.String;

        r2 = specialinvoke r0.<org.quartz.core.QuartzScheduler: java.util.List buildSchedulerListenerList()>();

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.quartz.SchedulerListener) $r6;

     label2:
        interfaceinvoke r4.<org.quartz.SchedulerListener: void jobsResumed(java.lang.String)>(r1);

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        $r8 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: org.slf4j.Logger getLog()>();

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error while notifying SchedulerListener of resumed job group: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r12, $r7);

     label5:
        goto label1;

     label6:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public void notifySchedulerListenersInStandbyMode()
    {
        org.quartz.core.QuartzScheduler r0;
        java.util.List r1;
        java.util.Iterator r2;
        org.quartz.SchedulerListener r3;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.Exception $r6;
        org.slf4j.Logger $r7;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 = specialinvoke r0.<org.quartz.core.QuartzScheduler: java.util.List buildSchedulerListenerList()>();

        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.quartz.SchedulerListener) $r5;

     label2:
        interfaceinvoke r3.<org.quartz.SchedulerListener: void schedulerInStandbyMode()>();

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        $r7 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: org.slf4j.Logger getLog()>();

        interfaceinvoke $r7.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Error while notifying SchedulerListener of inStandByMode.", $r6);

     label5:
        goto label1;

     label6:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public void notifySchedulerListenersStarted()
    {
        org.quartz.core.QuartzScheduler r0;
        java.util.List r1;
        java.util.Iterator r2;
        org.quartz.SchedulerListener r3;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.Exception $r6;
        org.slf4j.Logger $r7;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 = specialinvoke r0.<org.quartz.core.QuartzScheduler: java.util.List buildSchedulerListenerList()>();

        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.quartz.SchedulerListener) $r5;

     label2:
        interfaceinvoke r3.<org.quartz.SchedulerListener: void schedulerStarted()>();

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        $r7 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: org.slf4j.Logger getLog()>();

        interfaceinvoke $r7.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Error while notifying SchedulerListener of startup.", $r6);

     label5:
        goto label1;

     label6:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public void notifySchedulerListenersStarting()
    {
        org.quartz.core.QuartzScheduler r0;
        java.util.List r1;
        java.util.Iterator r2;
        org.quartz.SchedulerListener r3;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.Exception $r6;
        org.slf4j.Logger $r7;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 = specialinvoke r0.<org.quartz.core.QuartzScheduler: java.util.List buildSchedulerListenerList()>();

        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.quartz.SchedulerListener) $r5;

     label2:
        interfaceinvoke r3.<org.quartz.SchedulerListener: void schedulerStarting()>();

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        $r7 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: org.slf4j.Logger getLog()>();

        interfaceinvoke $r7.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Error while notifying SchedulerListener of startup.", $r6);

     label5:
        goto label1;

     label6:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public void notifySchedulerListenersShutdown()
    {
        org.quartz.core.QuartzScheduler r0;
        java.util.List r1;
        java.util.Iterator r2;
        org.quartz.SchedulerListener r3;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.Exception $r6;
        org.slf4j.Logger $r7;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 = specialinvoke r0.<org.quartz.core.QuartzScheduler: java.util.List buildSchedulerListenerList()>();

        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.quartz.SchedulerListener) $r5;

     label2:
        interfaceinvoke r3.<org.quartz.SchedulerListener: void schedulerShutdown()>();

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        $r7 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: org.slf4j.Logger getLog()>();

        interfaceinvoke $r7.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Error while notifying SchedulerListener of shutdown.", $r6);

     label5:
        goto label1;

     label6:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public void notifySchedulerListenersShuttingdown()
    {
        org.quartz.core.QuartzScheduler r0;
        java.util.List r1;
        java.util.Iterator r2;
        org.quartz.SchedulerListener r3;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.Exception $r6;
        org.slf4j.Logger $r7;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 = specialinvoke r0.<org.quartz.core.QuartzScheduler: java.util.List buildSchedulerListenerList()>();

        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.quartz.SchedulerListener) $r5;

     label2:
        interfaceinvoke r3.<org.quartz.SchedulerListener: void schedulerShuttingdown()>();

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        $r7 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: org.slf4j.Logger getLog()>();

        interfaceinvoke $r7.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Error while notifying SchedulerListener of shutdown.", $r6);

     label5:
        goto label1;

     label6:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public void notifySchedulerListenersJobAdded(org.quartz.JobDetail)
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.JobDetail r1;
        java.util.List r2;
        java.util.Iterator r3;
        org.quartz.SchedulerListener r4;
        boolean $z0;
        java.lang.Object $r6;
        java.lang.Exception $r7;
        org.slf4j.Logger $r8;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: org.quartz.JobDetail;

        r2 = specialinvoke r0.<org.quartz.core.QuartzScheduler: java.util.List buildSchedulerListenerList()>();

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.quartz.SchedulerListener) $r6;

     label2:
        interfaceinvoke r4.<org.quartz.SchedulerListener: void jobAdded(org.quartz.JobDetail)>(r1);

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        $r8 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: org.slf4j.Logger getLog()>();

        interfaceinvoke $r8.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Error while notifying SchedulerListener of JobAdded.", $r7);

     label5:
        goto label1;

     label6:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public void notifySchedulerListenersJobDeleted(org.quartz.JobKey)
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.JobKey r1;
        java.util.List r2;
        java.util.Iterator r3;
        org.quartz.SchedulerListener r4;
        boolean $z0;
        java.lang.Object $r6;
        java.lang.Exception $r7;
        org.slf4j.Logger $r8;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: org.quartz.JobKey;

        r2 = specialinvoke r0.<org.quartz.core.QuartzScheduler: java.util.List buildSchedulerListenerList()>();

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.quartz.SchedulerListener) $r6;

     label2:
        interfaceinvoke r4.<org.quartz.SchedulerListener: void jobDeleted(org.quartz.JobKey)>(r1);

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        $r8 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: org.slf4j.Logger getLog()>();

        interfaceinvoke $r8.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Error while notifying SchedulerListener of JobAdded.", $r7);

     label5:
        goto label1;

     label6:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public void setJobFactory(org.quartz.spi.JobFactory) throws org.quartz.SchedulerException
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.spi.JobFactory r1;
        org.slf4j.Logger $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: org.quartz.spi.JobFactory;

        if r1 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("JobFactory cannot be set to null!");

        throw $r7;

     label1:
        $r2 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: org.slf4j.Logger getLog()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("JobFactory set to: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String)>($r6);

        r0.<org.quartz.core.QuartzScheduler: org.quartz.spi.JobFactory jobFactory> = r1;

        return;
    }

    public org.quartz.spi.JobFactory getJobFactory()
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.spi.JobFactory $r1;

        r0 := @this: org.quartz.core.QuartzScheduler;

        $r1 = r0.<org.quartz.core.QuartzScheduler: org.quartz.spi.JobFactory jobFactory>;

        return $r1;
    }

    public boolean interrupt(org.quartz.JobKey) throws org.quartz.UnableToInterruptJobException
    {
        org.quartz.core.QuartzScheduler r0;
        org.quartz.JobKey r1, $r6, $r10;
        java.util.List r2;
        java.util.Iterator r3;
        org.quartz.JobExecutionContext r4;
        boolean $z0, $z1, $z2, z3;
        java.lang.Object $r5;
        org.quartz.UnableToInterruptJobException $r7;
        java.lang.StringBuilder $r8, $r9, $r11, $r12, $r15;
        java.lang.Class $r13;
        java.lang.String $r14, $r16;
        org.quartz.InterruptableJob $r17;
        org.quartz.JobDetail r18;
        org.quartz.Job r19;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: org.quartz.JobKey;

        r2 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: java.util.List getCurrentlyExecutingJobs()>();

        z3 = 0;

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.quartz.JobExecutionContext) $r5;

        r18 = interfaceinvoke r4.<org.quartz.JobExecutionContext: org.quartz.JobDetail getJobDetail()>();

        $r6 = interfaceinvoke r18.<org.quartz.JobDetail: org.quartz.JobKey getKey()>();

        $z1 = virtualinvoke r1.<org.quartz.JobKey: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label3;

        r19 = interfaceinvoke r4.<org.quartz.JobExecutionContext: org.quartz.Job getJobInstance()>();

        $z2 = r19 instanceof org.quartz.InterruptableJob;

        if $z2 == 0 goto label2;

        $r17 = (org.quartz.InterruptableJob) r19;

        interfaceinvoke $r17.<org.quartz.InterruptableJob: void interrupt()>();

        z3 = 1;

        goto label3;

     label2:
        $r7 = new org.quartz.UnableToInterruptJobException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Job ");

        $r10 = interfaceinvoke r18.<org.quartz.JobDetail: org.quartz.JobKey getKey()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" can not be interrupted, since it does not implement ");

        $r13 = class "Lorg/quartz/InterruptableJob;";

        $r14 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.quartz.UnableToInterruptJobException: void <init>(java.lang.String)>($r16);

        throw $r7;

     label3:
        goto label1;

     label4:
        return z3;
    }

    public boolean interrupt(java.lang.String) throws org.quartz.UnableToInterruptJobException
    {
        org.quartz.core.QuartzScheduler r0;
        java.lang.String r1, $r6, $r15, $r17;
        java.util.List r2;
        java.util.Iterator r3;
        org.quartz.JobExecutionContext r4;
        boolean $z0, $z1, $z2;
        java.lang.Object $r5;
        org.quartz.UnableToInterruptJobException $r7;
        java.lang.StringBuilder $r8, $r9, $r12, $r13, $r16;
        org.quartz.JobDetail $r10;
        org.quartz.JobKey $r11;
        java.lang.Class $r14;
        org.quartz.InterruptableJob $r18;
        org.quartz.Job r19;

        r0 := @this: org.quartz.core.QuartzScheduler;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<org.quartz.core.QuartzScheduler: java.util.List getCurrentlyExecutingJobs()>();

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.quartz.JobExecutionContext) $r5;

        $r6 = interfaceinvoke r4.<org.quartz.JobExecutionContext: java.lang.String getFireInstanceId()>();

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label3;

        r19 = interfaceinvoke r4.<org.quartz.JobExecutionContext: org.quartz.Job getJobInstance()>();

        $z2 = r19 instanceof org.quartz.InterruptableJob;

        if $z2 == 0 goto label2;

        $r18 = (org.quartz.InterruptableJob) r19;

        interfaceinvoke $r18.<org.quartz.InterruptableJob: void interrupt()>();

        return 1;

     label2:
        $r7 = new org.quartz.UnableToInterruptJobException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Job ");

        $r10 = interfaceinvoke r4.<org.quartz.JobExecutionContext: org.quartz.JobDetail getJobDetail()>();

        $r11 = interfaceinvoke $r10.<org.quartz.JobDetail: org.quartz.JobKey getKey()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" can not be interrupted, since it does not implement ");

        $r14 = class "Lorg/quartz/InterruptableJob;";

        $r15 = virtualinvoke $r14.<java.lang.Class: java.lang.String getName()>();

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.quartz.UnableToInterruptJobException: void <init>(java.lang.String)>($r17);

        throw $r7;

     label3:
        goto label1;

     label4:
        return 0;
    }

    private void shutdownPlugins()
    {
        org.quartz.core.QuartzScheduler r0;
        java.util.Iterator r1;
        org.quartz.spi.SchedulerPlugin r2;
        org.quartz.core.QuartzSchedulerResources $r3;
        java.util.List $r4;
        boolean $z0;
        java.lang.Object $r5;

        r0 := @this: org.quartz.core.QuartzScheduler;

        $r3 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r4 = virtualinvoke $r3.<org.quartz.core.QuartzSchedulerResources: java.util.List getSchedulerPlugins()>();

        r1 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.quartz.spi.SchedulerPlugin) $r5;

        interfaceinvoke r2.<org.quartz.spi.SchedulerPlugin: void shutdown()>();

        goto label1;

     label2:
        return;
    }

    private void startPlugins()
    {
        org.quartz.core.QuartzScheduler r0;
        java.util.Iterator r1;
        org.quartz.spi.SchedulerPlugin r2;
        org.quartz.core.QuartzSchedulerResources $r3;
        java.util.List $r4;
        boolean $z0;
        java.lang.Object $r5;

        r0 := @this: org.quartz.core.QuartzScheduler;

        $r3 = r0.<org.quartz.core.QuartzScheduler: org.quartz.core.QuartzSchedulerResources resources>;

        $r4 = virtualinvoke $r3.<org.quartz.core.QuartzSchedulerResources: java.util.List getSchedulerPlugins()>();

        r1 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.quartz.spi.SchedulerPlugin) $r5;

        interfaceinvoke r2.<org.quartz.spi.SchedulerPlugin: void start()>();

        goto label1;

     label2:
        return;
    }

    static void <clinit>()
    {
        java.lang.String[] r1;
        java.util.Properties $r4;
        java.lang.Class $r5;
        org.slf4j.Logger $r6, $r13;
        java.lang.String $r7, $r8, $r9, r17;
        int $i0;
        java.lang.Exception $r10, $r11, $r12, $r14;
        java.lang.Throwable $r15;
        java.io.InputStream r16;

        <org.quartz.core.QuartzScheduler: java.lang.String VERSION_MAJOR> = "UNKNOWN";

        <org.quartz.core.QuartzScheduler: java.lang.String VERSION_MINOR> = "UNKNOWN";

        <org.quartz.core.QuartzScheduler: java.lang.String VERSION_ITERATION> = "UNKNOWN";

        $r4 = new java.util.Properties;

        specialinvoke $r4.<java.util.Properties: void <init>()>();

        r16 = null;

     label01:
        $r5 = class "Lorg/quartz/core/QuartzScheduler;";

        r16 = virtualinvoke $r5.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>("quartz-build.properties");

        if r16 == null goto label05;

        virtualinvoke $r4.<java.util.Properties: void load(java.io.InputStream)>(r16);

        r17 = virtualinvoke $r4.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("version");

        if r17 == null goto label04;

        r1 = virtualinvoke r17.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\.");

        $r7 = r1[0];

        <org.quartz.core.QuartzScheduler: java.lang.String VERSION_MAJOR> = $r7;

        $r8 = r1[1];

        <org.quartz.core.QuartzScheduler: java.lang.String VERSION_MINOR> = $r8;

        $i0 = lengthof r1;

        if $i0 <= 2 goto label02;

        $r9 = r1[2];

        <org.quartz.core.QuartzScheduler: java.lang.String VERSION_ITERATION> = $r9;

        goto label03;

     label02:
        <org.quartz.core.QuartzScheduler: java.lang.String VERSION_ITERATION> = "0";

     label03:
        goto label05;

     label04:
        $r6 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/quartz/core/QuartzScheduler;");

        interfaceinvoke $r6.<org.slf4j.Logger: void error(java.lang.String)>("Can\'t parse Quartz version from quartz-build.properties");

     label05:
        if r16 == null goto label20;

     label06:
        virtualinvoke r16.<java.io.InputStream: void close()>();

     label07:
        goto label20;

     label08:
        $r10 := @caughtexception;

        goto label20;

     label09:
        $r12 := @caughtexception;

        $r13 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/quartz/core/QuartzScheduler;");

        interfaceinvoke $r13.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Error loading version info from quartz-build.properties.", $r12);

     label10:
        if r16 == null goto label20;

     label11:
        virtualinvoke r16.<java.io.InputStream: void close()>();

     label12:
        goto label20;

     label13:
        $r14 := @caughtexception;

        goto label20;

     label14:
        $r15 := @caughtexception;

     label15:
        if r16 == null goto label19;

     label16:
        virtualinvoke r16.<java.io.InputStream: void close()>();

     label17:
        goto label19;

     label18:
        $r11 := @caughtexception;

     label19:
        throw $r15;

     label20:
        return;

        catch java.lang.Exception from label06 to label07 with label08;
        catch java.lang.Exception from label01 to label05 with label09;
        catch java.lang.Exception from label11 to label12 with label13;
        catch java.lang.Throwable from label01 to label05 with label14;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Exception from label16 to label17 with label18;
        catch java.lang.Throwable from label14 to label15 with label14;
    }
}
