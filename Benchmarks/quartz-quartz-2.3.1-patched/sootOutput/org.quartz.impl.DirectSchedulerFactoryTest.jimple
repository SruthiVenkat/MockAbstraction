public class org.quartz.impl.DirectSchedulerFactoryTest extends junit.framework.TestCase
{

    public void <init>()
    {
        org.quartz.impl.DirectSchedulerFactoryTest r0;

        r0 := @this: org.quartz.impl.DirectSchedulerFactoryTest;

        specialinvoke r0.<junit.framework.TestCase: void <init>()>();

        return;
    }

    public void testPlugins() throws java.lang.Exception
    {
        org.quartz.impl.DirectSchedulerFactoryTest r0;
        org.quartz.Scheduler r4;
        java.lang.StringBuffer $r5;
        org.quartz.impl.DirectSchedulerFactoryTest$1 $r6;
        org.quartz.simpl.SimpleThreadPool $r7;
        org.quartz.impl.DirectSchedulerFactory $r8, $r11;
        org.quartz.simpl.RAMJobStore $r9;
        java.util.Map $r10;
        java.lang.String $r12;

        r0 := @this: org.quartz.impl.DirectSchedulerFactoryTest;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = new org.quartz.impl.DirectSchedulerFactoryTest$1;

        specialinvoke $r6.<org.quartz.impl.DirectSchedulerFactoryTest$1: void <init>(org.quartz.impl.DirectSchedulerFactoryTest,java.lang.StringBuffer)>(r0, $r5);

        $r7 = new org.quartz.simpl.SimpleThreadPool;

        specialinvoke $r7.<org.quartz.simpl.SimpleThreadPool: void <init>(int,int)>(1, 5);

        interfaceinvoke $r7.<org.quartz.spi.ThreadPool: void initialize()>();

        $r8 = staticinvoke <org.quartz.impl.DirectSchedulerFactory: org.quartz.impl.DirectSchedulerFactory getInstance()>();

        $r9 = new org.quartz.simpl.RAMJobStore;

        specialinvoke $r9.<org.quartz.simpl.RAMJobStore: void <init>()>();

        $r10 = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>("TestPlugin", $r6);

        virtualinvoke $r8.<org.quartz.impl.DirectSchedulerFactory: void createScheduler(java.lang.String,java.lang.String,org.quartz.spi.ThreadPool,org.quartz.spi.JobStore,java.util.Map,java.lang.String,int,long,long,boolean,java.lang.String)>("MyScheduler", "Instance1", $r7, $r9, $r10, null, -1, 0L, 0L, 0, null);

        $r11 = staticinvoke <org.quartz.impl.DirectSchedulerFactory: org.quartz.impl.DirectSchedulerFactory getInstance()>();

        r4 = virtualinvoke $r11.<org.quartz.impl.DirectSchedulerFactory: org.quartz.Scheduler getScheduler(java.lang.String)>("MyScheduler");

        interfaceinvoke r4.<org.quartz.Scheduler: void start()>();

        interfaceinvoke r4.<org.quartz.Scheduler: void shutdown()>();

        $r12 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.quartz.impl.DirectSchedulerFactoryTest: void assertEquals(java.lang.String,java.lang.String)>("TestPlugin|MyScheduler|start|shutdown", $r12);

        return;
    }

    public void testThreadName() throws java.lang.Throwable
    {
        org.quartz.impl.DirectSchedulerFactoryTest r0;
        org.quartz.Scheduler r1;
        org.quartz.core.QuartzScheduler r2;
        org.quartz.core.QuartzSchedulerResources r3;
        org.quartz.spi.ThreadPool r4;
        java.util.List r5;
        java.lang.Object r6, $r10, $r11, $r12;
        java.lang.String r7, $r13;
        org.quartz.impl.DirectSchedulerFactory $r8, $r9;
        boolean $z0, $z1;

        r0 := @this: org.quartz.impl.DirectSchedulerFactoryTest;

        $r8 = staticinvoke <org.quartz.impl.DirectSchedulerFactory: org.quartz.impl.DirectSchedulerFactory getInstance()>();

        virtualinvoke $r8.<org.quartz.impl.DirectSchedulerFactory: void createVolatileScheduler(int)>(4);

        $r9 = staticinvoke <org.quartz.impl.DirectSchedulerFactory: org.quartz.impl.DirectSchedulerFactory getInstance()>();

        r1 = virtualinvoke $r9.<org.quartz.impl.DirectSchedulerFactory: org.quartz.Scheduler getScheduler()>();

        $r10 = virtualinvoke r0.<org.quartz.impl.DirectSchedulerFactoryTest: java.lang.Object getField(java.lang.Object,java.lang.String)>(r1, "sched");

        r2 = (org.quartz.core.QuartzScheduler) $r10;

        $r11 = virtualinvoke r0.<org.quartz.impl.DirectSchedulerFactoryTest: java.lang.Object getField(java.lang.Object,java.lang.String)>(r2, "resources");

        r3 = (org.quartz.core.QuartzSchedulerResources) $r11;

        r4 = virtualinvoke r3.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.ThreadPool getThreadPool()>();

        $r12 = virtualinvoke r0.<org.quartz.impl.DirectSchedulerFactoryTest: java.lang.Object getField(java.lang.Object,java.lang.String)>(r4, "workers");

        r5 = (java.util.List) $r12;

        r6 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(0);

        r7 = virtualinvoke r6.<java.lang.Object: java.lang.String toString()>();

        $z0 = virtualinvoke r7.<java.lang.String: boolean contains(java.lang.CharSequence)>("null");

        staticinvoke <org.quartz.impl.DirectSchedulerFactoryTest: void assertFalse(boolean)>($z0);

        $r13 = interfaceinvoke r1.<org.quartz.Scheduler: java.lang.String getSchedulerName()>();

        $z1 = virtualinvoke r7.<java.lang.String: boolean contains(java.lang.CharSequence)>($r13);

        staticinvoke <org.quartz.impl.DirectSchedulerFactoryTest: void assertTrue(boolean)>($z1);

        return;
    }

    java.lang.Object getField(java.lang.Object, java.lang.String) throws java.lang.Exception
    {
        org.quartz.impl.DirectSchedulerFactoryTest r0;
        java.lang.Object r1, r4;
        java.lang.String r2;
        java.lang.reflect.Field r3;
        java.lang.Class $r5;

        r0 := @this: org.quartz.impl.DirectSchedulerFactoryTest;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        r3 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>(r2);

        virtualinvoke r3.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        r4 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r1);

        return r4;
    }
}
