public class org.quartz.CalendarIntervalTriggerTest extends org.quartz.SerializationTestSupport
{
    private static final java.lang.String[] VERSIONS;

    public void <init>()
    {
        org.quartz.CalendarIntervalTriggerTest r0;

        r0 := @this: org.quartz.CalendarIntervalTriggerTest;

        specialinvoke r0.<org.quartz.SerializationTestSupport: void <init>()>();

        return;
    }

    public void testQTZ331FireTimeAfterBoundary()
    {
        org.quartz.CalendarIntervalTriggerTest r0;
        java.util.Calendar r1;
        java.util.Date r2, r3, $r8, $r10, $r11;
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl $r6;
        org.quartz.DateBuilder$IntervalUnit $r7;
        org.hamcrest.Matcher $r9, $r12;
        long $l0, $l1;

        r0 := @this: org.quartz.CalendarIntervalTriggerTest;

        r1 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r1.<java.util.Calendar: void clear()>();

        virtualinvoke r1.<java.util.Calendar: void set(int,int,int)>(2013, 1, 15);

        r2 = virtualinvoke r1.<java.util.Calendar: java.util.Date getTime()>();

        virtualinvoke r1.<java.util.Calendar: void add(int,int)>(5, 1);

        r3 = virtualinvoke r1.<java.util.Calendar: java.util.Date getTime()>();

        $r6 = new org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        $r7 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit DAY>;

        specialinvoke $r6.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void <init>(java.lang.String,java.util.Date,java.util.Date,org.quartz.DateBuilder$IntervalUnit,int)>("test", r2, null, $r7, 1);

        $r8 = virtualinvoke $r6.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>(r2);

        $r9 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher equalTo(java.lang.Object)>(r3);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r8, $r9);

        $r10 = new java.util.Date;

        $l0 = virtualinvoke r1.<java.util.Calendar: long getTimeInMillis()>();

        $l1 = $l0 - 500L;

        specialinvoke $r10.<java.util.Date: void <init>(long)>($l1);

        $r11 = virtualinvoke $r6.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>($r10);

        $r12 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher equalTo(java.lang.Object)>(r3);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r11, $r12);

        return;
    }

    public void testQTZ330DaylightSavingsCornerCase()
    {
        org.quartz.CalendarIntervalTriggerTest r0;
        java.util.TimeZone r1;
        java.util.Calendar r2, r3;
        java.util.Date r6, $r9, $r12, $r13;
        org.quartz.impl.calendar.BaseCalendar $r7;
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl $r8;
        org.quartz.DateBuilder$IntervalUnit $r10;
        boolean $z0;
        java.lang.Boolean $r14, $r15;
        org.hamcrest.Matcher $r16;

        r0 := @this: org.quartz.CalendarIntervalTriggerTest;

        r1 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("America/New_York");

        r2 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r2.<java.util.Calendar: void clear()>();

        virtualinvoke r2.<java.util.Calendar: void setTimeZone(java.util.TimeZone)>(r1);

        virtualinvoke r2.<java.util.Calendar: void set(int,int,int,int,int,int)>(2012, 2, 16, 2, 30, 0);

        r3 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r3.<java.util.Calendar: void clear()>();

        virtualinvoke r3.<java.util.Calendar: void setTimeZone(java.util.TimeZone)>(r1);

        virtualinvoke r3.<java.util.Calendar: void set(int,int,int,int,int,int)>(2013, 3, 19, 2, 30, 0);

        $r7 = new org.quartz.impl.calendar.BaseCalendar;

        specialinvoke $r7.<org.quartz.impl.calendar.BaseCalendar: void <init>(java.util.TimeZone)>(r1);

        $r8 = new org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        $r9 = virtualinvoke r2.<java.util.Calendar: java.util.Date getTime()>();

        $r10 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit DAY>;

        specialinvoke $r8.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void <init>(java.lang.String,java.util.Date,java.util.Date,org.quartz.DateBuilder$IntervalUnit,int)>("QTZ-330", $r9, null, $r10, 1);

        virtualinvoke $r8.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setTimeZone(java.util.TimeZone)>(r1);

        virtualinvoke $r8.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setPreserveHourOfDayAcrossDaylightSavings(boolean)>(1);

        virtualinvoke $r8.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date computeFirstFireTime(org.quartz.Calendar)>($r7);

        $r12 = virtualinvoke r3.<java.util.Calendar: java.util.Date getTime()>();

        r6 = virtualinvoke $r8.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>($r12);

        $r13 = virtualinvoke r3.<java.util.Calendar: java.util.Date getTime()>();

        $z0 = virtualinvoke r6.<java.util.Date: boolean after(java.util.Date)>($r13);

        $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r16 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r15);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r14, $r16);

        return;
    }

    public void testYearlyIntervalGetFireTimeAfter()
    {
        org.quartz.CalendarIntervalTriggerTest r0;
        java.util.Calendar r1, r3;
        java.util.List r4;
        java.util.Date r5, $r7, $r10;
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl $r6;
        org.quartz.DateBuilder$IntervalUnit $r8;
        java.lang.Object $r9;

        r0 := @this: org.quartz.CalendarIntervalTriggerTest;

        r1 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r1.<java.util.Calendar: void set(int,int,int,int,int,int)>(2005, 5, 1, 9, 30, 17);

        virtualinvoke r1.<java.util.Calendar: void clear(int)>(14);

        $r6 = new org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        specialinvoke $r6.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void <init>()>();

        $r7 = virtualinvoke r1.<java.util.Calendar: java.util.Date getTime()>();

        virtualinvoke $r6.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setStartTime(java.util.Date)>($r7);

        $r8 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit YEAR>;

        virtualinvoke $r6.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)>($r8);

        virtualinvoke $r6.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setRepeatInterval(int)>(2);

        r3 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r3.<java.util.Calendar: void set(int,int,int,int,int,int)>(2009, 5, 1, 9, 30, 17);

        virtualinvoke r3.<java.util.Calendar: void clear(int)>(14);

        r4 = staticinvoke <org.quartz.TriggerUtils: java.util.List computeFireTimes(org.quartz.spi.OperableTrigger,org.quartz.Calendar,int)>($r6, null, 4);

        $r9 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(2);

        r5 = (java.util.Date) $r9;

        $r10 = virtualinvoke r3.<java.util.Calendar: java.util.Date getTime()>();

        staticinvoke <org.quartz.CalendarIntervalTriggerTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Year increment result not as expected.", $r10, r5);

        return;
    }

    public void testMonthlyIntervalGetFireTimeAfter()
    {
        org.quartz.CalendarIntervalTriggerTest r0;
        java.util.Calendar r1, r3;
        java.util.List r4;
        java.util.Date r5, $r7, $r10;
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl $r6;
        org.quartz.DateBuilder$IntervalUnit $r8;
        java.lang.Object $r9;

        r0 := @this: org.quartz.CalendarIntervalTriggerTest;

        r1 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r1.<java.util.Calendar: void set(int,int,int,int,int,int)>(2005, 5, 1, 9, 30, 17);

        virtualinvoke r1.<java.util.Calendar: void clear(int)>(14);

        $r6 = new org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        specialinvoke $r6.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void <init>()>();

        $r7 = virtualinvoke r1.<java.util.Calendar: java.util.Date getTime()>();

        virtualinvoke $r6.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setStartTime(java.util.Date)>($r7);

        $r8 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit MONTH>;

        virtualinvoke $r6.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)>($r8);

        virtualinvoke $r6.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setRepeatInterval(int)>(5);

        r3 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r3.<java.util.Calendar: void set(int,int,int,int,int,int)>(2005, 5, 1, 9, 30, 17);

        virtualinvoke r3.<java.util.Calendar: void setLenient(boolean)>(1);

        virtualinvoke r3.<java.util.Calendar: void add(int,int)>(2, 25);

        virtualinvoke r3.<java.util.Calendar: void clear(int)>(14);

        r4 = staticinvoke <org.quartz.TriggerUtils: java.util.List computeFireTimes(org.quartz.spi.OperableTrigger,org.quartz.Calendar,int)>($r6, null, 6);

        $r9 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(5);

        r5 = (java.util.Date) $r9;

        $r10 = virtualinvoke r3.<java.util.Calendar: java.util.Date getTime()>();

        staticinvoke <org.quartz.CalendarIntervalTriggerTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Month increment result not as expected.", $r10, r5);

        return;
    }

    public void testWeeklyIntervalGetFireTimeAfter()
    {
        org.quartz.CalendarIntervalTriggerTest r0;
        java.util.Calendar r1, r3;
        java.util.List r4;
        java.util.Date r5, $r7, $r10;
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl $r6;
        org.quartz.DateBuilder$IntervalUnit $r8;
        java.lang.Object $r9;

        r0 := @this: org.quartz.CalendarIntervalTriggerTest;

        r1 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r1.<java.util.Calendar: void set(int,int,int,int,int,int)>(2005, 5, 1, 9, 30, 17);

        virtualinvoke r1.<java.util.Calendar: void clear(int)>(14);

        $r6 = new org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        specialinvoke $r6.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void <init>()>();

        $r7 = virtualinvoke r1.<java.util.Calendar: java.util.Date getTime()>();

        virtualinvoke $r6.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setStartTime(java.util.Date)>($r7);

        $r8 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit WEEK>;

        virtualinvoke $r6.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)>($r8);

        virtualinvoke $r6.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setRepeatInterval(int)>(6);

        r3 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r3.<java.util.Calendar: void set(int,int,int,int,int,int)>(2005, 5, 1, 9, 30, 17);

        virtualinvoke r3.<java.util.Calendar: void setLenient(boolean)>(1);

        virtualinvoke r3.<java.util.Calendar: void add(int,int)>(6, 168);

        virtualinvoke r3.<java.util.Calendar: void clear(int)>(14);

        r4 = staticinvoke <org.quartz.TriggerUtils: java.util.List computeFireTimes(org.quartz.spi.OperableTrigger,org.quartz.Calendar,int)>($r6, null, 7);

        $r9 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(4);

        r5 = (java.util.Date) $r9;

        $r10 = virtualinvoke r3.<java.util.Calendar: java.util.Date getTime()>();

        staticinvoke <org.quartz.CalendarIntervalTriggerTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Week increment result not as expected.", $r10, r5);

        return;
    }

    public void testDailyIntervalGetFireTimeAfter()
    {
        org.quartz.CalendarIntervalTriggerTest r0;
        java.util.Calendar r1, r3;
        java.util.List r4;
        java.util.Date r5, $r7, $r10;
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl $r6;
        org.quartz.DateBuilder$IntervalUnit $r8;
        java.lang.Object $r9;

        r0 := @this: org.quartz.CalendarIntervalTriggerTest;

        r1 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r1.<java.util.Calendar: void set(int,int,int,int,int,int)>(2005, 5, 1, 9, 30, 17);

        virtualinvoke r1.<java.util.Calendar: void clear(int)>(14);

        $r6 = new org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        specialinvoke $r6.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void <init>()>();

        $r7 = virtualinvoke r1.<java.util.Calendar: java.util.Date getTime()>();

        virtualinvoke $r6.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setStartTime(java.util.Date)>($r7);

        $r8 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit DAY>;

        virtualinvoke $r6.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)>($r8);

        virtualinvoke $r6.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setRepeatInterval(int)>(90);

        r3 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r3.<java.util.Calendar: void set(int,int,int,int,int,int)>(2005, 5, 1, 9, 30, 17);

        virtualinvoke r3.<java.util.Calendar: void setLenient(boolean)>(1);

        virtualinvoke r3.<java.util.Calendar: void add(int,int)>(6, 360);

        virtualinvoke r3.<java.util.Calendar: void clear(int)>(14);

        r4 = staticinvoke <org.quartz.TriggerUtils: java.util.List computeFireTimes(org.quartz.spi.OperableTrigger,org.quartz.Calendar,int)>($r6, null, 6);

        $r9 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(4);

        r5 = (java.util.Date) $r9;

        $r10 = virtualinvoke r3.<java.util.Calendar: java.util.Date getTime()>();

        staticinvoke <org.quartz.CalendarIntervalTriggerTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Day increment result not as expected.", $r10, r5);

        return;
    }

    public void testHourlyIntervalGetFireTimeAfter()
    {
        org.quartz.CalendarIntervalTriggerTest r0;
        java.util.Calendar r1, r3;
        java.util.List r4;
        java.util.Date r5, $r7, $r10;
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl $r6;
        org.quartz.DateBuilder$IntervalUnit $r8;
        java.lang.Object $r9;

        r0 := @this: org.quartz.CalendarIntervalTriggerTest;

        r1 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r1.<java.util.Calendar: void set(int,int,int,int,int,int)>(2005, 5, 1, 9, 30, 17);

        virtualinvoke r1.<java.util.Calendar: void clear(int)>(14);

        $r6 = new org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        specialinvoke $r6.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void <init>()>();

        $r7 = virtualinvoke r1.<java.util.Calendar: java.util.Date getTime()>();

        virtualinvoke $r6.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setStartTime(java.util.Date)>($r7);

        $r8 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit HOUR>;

        virtualinvoke $r6.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)>($r8);

        virtualinvoke $r6.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setRepeatInterval(int)>(100);

        r3 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r3.<java.util.Calendar: void set(int,int,int,int,int,int)>(2005, 5, 1, 9, 30, 17);

        virtualinvoke r3.<java.util.Calendar: void setLenient(boolean)>(1);

        virtualinvoke r3.<java.util.Calendar: void add(int,int)>(10, 400);

        virtualinvoke r3.<java.util.Calendar: void clear(int)>(14);

        r4 = staticinvoke <org.quartz.TriggerUtils: java.util.List computeFireTimes(org.quartz.spi.OperableTrigger,org.quartz.Calendar,int)>($r6, null, 6);

        $r9 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(4);

        r5 = (java.util.Date) $r9;

        $r10 = virtualinvoke r3.<java.util.Calendar: java.util.Date getTime()>();

        staticinvoke <org.quartz.CalendarIntervalTriggerTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Hour increment result not as expected.", $r10, r5);

        return;
    }

    public void testMinutelyIntervalGetFireTimeAfter()
    {
        org.quartz.CalendarIntervalTriggerTest r0;
        java.util.Calendar r1, r3;
        java.util.List r4;
        java.util.Date r5, $r7, $r10;
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl $r6;
        org.quartz.DateBuilder$IntervalUnit $r8;
        java.lang.Object $r9;

        r0 := @this: org.quartz.CalendarIntervalTriggerTest;

        r1 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r1.<java.util.Calendar: void set(int,int,int,int,int,int)>(2005, 5, 1, 9, 30, 17);

        virtualinvoke r1.<java.util.Calendar: void clear(int)>(14);

        $r6 = new org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        specialinvoke $r6.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void <init>()>();

        $r7 = virtualinvoke r1.<java.util.Calendar: java.util.Date getTime()>();

        virtualinvoke $r6.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setStartTime(java.util.Date)>($r7);

        $r8 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit MINUTE>;

        virtualinvoke $r6.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)>($r8);

        virtualinvoke $r6.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setRepeatInterval(int)>(100);

        r3 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r3.<java.util.Calendar: void set(int,int,int,int,int,int)>(2005, 5, 1, 9, 30, 17);

        virtualinvoke r3.<java.util.Calendar: void setLenient(boolean)>(1);

        virtualinvoke r3.<java.util.Calendar: void add(int,int)>(12, 400);

        virtualinvoke r3.<java.util.Calendar: void clear(int)>(14);

        r4 = staticinvoke <org.quartz.TriggerUtils: java.util.List computeFireTimes(org.quartz.spi.OperableTrigger,org.quartz.Calendar,int)>($r6, null, 6);

        $r9 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(4);

        r5 = (java.util.Date) $r9;

        $r10 = virtualinvoke r3.<java.util.Calendar: java.util.Date getTime()>();

        staticinvoke <org.quartz.CalendarIntervalTriggerTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Minutes increment result not as expected.", $r10, r5);

        return;
    }

    public void testSecondlyIntervalGetFireTimeAfter()
    {
        org.quartz.CalendarIntervalTriggerTest r0;
        java.util.Calendar r1, r3;
        java.util.List r4;
        java.util.Date r5, $r7, $r10;
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl $r6;
        org.quartz.DateBuilder$IntervalUnit $r8;
        java.lang.Object $r9;

        r0 := @this: org.quartz.CalendarIntervalTriggerTest;

        r1 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r1.<java.util.Calendar: void set(int,int,int,int,int,int)>(2005, 5, 1, 9, 30, 17);

        virtualinvoke r1.<java.util.Calendar: void clear(int)>(14);

        $r6 = new org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        specialinvoke $r6.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void <init>()>();

        $r7 = virtualinvoke r1.<java.util.Calendar: java.util.Date getTime()>();

        virtualinvoke $r6.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setStartTime(java.util.Date)>($r7);

        $r8 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit SECOND>;

        virtualinvoke $r6.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)>($r8);

        virtualinvoke $r6.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setRepeatInterval(int)>(100);

        r3 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r3.<java.util.Calendar: void set(int,int,int,int,int,int)>(2005, 5, 1, 9, 30, 17);

        virtualinvoke r3.<java.util.Calendar: void setLenient(boolean)>(1);

        virtualinvoke r3.<java.util.Calendar: void add(int,int)>(13, 400);

        virtualinvoke r3.<java.util.Calendar: void clear(int)>(14);

        r4 = staticinvoke <org.quartz.TriggerUtils: java.util.List computeFireTimes(org.quartz.spi.OperableTrigger,org.quartz.Calendar,int)>($r6, null, 6);

        $r9 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(4);

        r5 = (java.util.Date) $r9;

        $r10 = virtualinvoke r3.<java.util.Calendar: java.util.Date getTime()>();

        staticinvoke <org.quartz.CalendarIntervalTriggerTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Seconds increment result not as expected.", $r10, r5);

        return;
    }

    public void testDaylightSavingsTransitions()
    {
        org.quartz.CalendarIntervalTriggerTest r0;
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl $r1, $r7, $r14, $r24, $r33, $r40;
        java.util.Date $r2, $r4, $r6, $r8, $r10, $r12, $r15, $r19, $r25, $r29, $r34, $r36, $r38, $r41, $r45, $r47, r52, r57, r62, r68, r74, r79;
        org.quartz.DateBuilder$IntervalUnit $r3, $r9, $r16, $r26, $r35, $r42;
        java.lang.Object $r5, $r11, $r20, $r30, $r37, $r46;
        java.util.TimeZone $r13, $r17, $r18, $r21, $r23, $r27, $r28, $r31, $r39, $r43, $r44;
        long $l0, $l3;
        int $i1, $i2, $i4, $i5;
        java.util.Calendar r48, r50, r53, r55, r58, r60, r63, r64, r66, r69, r70, r72, r75, r77;
        java.util.List r51, r56, r61, r67, r73, r78;
        boolean $z0, $z1;

        r0 := @this: org.quartz.CalendarIntervalTriggerTest;

        r48 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r48.<java.util.Calendar: void set(int,int,int,int,int,int)>(2010, 2, 12, 9, 30, 17);

        virtualinvoke r48.<java.util.Calendar: void clear(int)>(14);

        $r1 = new org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        specialinvoke $r1.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void <init>()>();

        $r2 = virtualinvoke r48.<java.util.Calendar: java.util.Date getTime()>();

        virtualinvoke $r1.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setStartTime(java.util.Date)>($r2);

        $r3 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit DAY>;

        virtualinvoke $r1.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)>($r3);

        virtualinvoke $r1.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setRepeatInterval(int)>(5);

        r50 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $r4 = virtualinvoke r48.<java.util.Calendar: java.util.Date getTime()>();

        virtualinvoke r50.<java.util.Calendar: void setTime(java.util.Date)>($r4);

        virtualinvoke r50.<java.util.Calendar: void setLenient(boolean)>(1);

        virtualinvoke r50.<java.util.Calendar: void add(int,int)>(6, 10);

        virtualinvoke r50.<java.util.Calendar: void clear(int)>(14);

        r51 = staticinvoke <org.quartz.TriggerUtils: java.util.List computeFireTimes(org.quartz.spi.OperableTrigger,org.quartz.Calendar,int)>($r1, null, 6);

        $r5 = interfaceinvoke r51.<java.util.List: java.lang.Object get(int)>(2);

        r52 = (java.util.Date) $r5;

        $r6 = virtualinvoke r50.<java.util.Calendar: java.util.Date getTime()>();

        staticinvoke <org.quartz.CalendarIntervalTriggerTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Day increment result not as expected over spring 2010 daylight savings transition.", $r6, r52);

        r53 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r53.<java.util.Calendar: void set(int,int,int,int,int,int)>(2011, 2, 12, 1, 0, 0);

        virtualinvoke r53.<java.util.Calendar: void clear(int)>(14);

        $r7 = new org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        specialinvoke $r7.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void <init>()>();

        $r8 = virtualinvoke r53.<java.util.Calendar: java.util.Date getTime()>();

        virtualinvoke $r7.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setStartTime(java.util.Date)>($r8);

        $r9 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit DAY>;

        virtualinvoke $r7.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)>($r9);

        virtualinvoke $r7.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setRepeatInterval(int)>(1);

        r55 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $r10 = virtualinvoke r53.<java.util.Calendar: java.util.Date getTime()>();

        virtualinvoke r55.<java.util.Calendar: void setTime(java.util.Date)>($r10);

        virtualinvoke r55.<java.util.Calendar: void setLenient(boolean)>(1);

        virtualinvoke r55.<java.util.Calendar: void add(int,int)>(6, 2);

        virtualinvoke r55.<java.util.Calendar: void clear(int)>(14);

        r56 = staticinvoke <org.quartz.TriggerUtils: java.util.List computeFireTimes(org.quartz.spi.OperableTrigger,org.quartz.Calendar,int)>($r7, null, 6);

        $r11 = interfaceinvoke r56.<java.util.List: java.lang.Object get(int)>(2);

        r57 = (java.util.Date) $r11;

        $r12 = virtualinvoke r55.<java.util.Calendar: java.util.Date getTime()>();

        staticinvoke <org.quartz.CalendarIntervalTriggerTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Day increment result not as expected over spring 2011 daylight savings transition.", $r12, r57);

        r58 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $r13 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("CET");

        virtualinvoke r58.<java.util.Calendar: void setTimeZone(java.util.TimeZone)>($r13);

        virtualinvoke r58.<java.util.Calendar: void set(int,int,int,int,int,int)>(2011, 2, 26, 4, 0, 0);

        virtualinvoke r58.<java.util.Calendar: void clear(int)>(14);

        $r14 = new org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        specialinvoke $r14.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void <init>()>();

        $r15 = virtualinvoke r58.<java.util.Calendar: java.util.Date getTime()>();

        virtualinvoke $r14.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setStartTime(java.util.Date)>($r15);

        $r16 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit DAY>;

        virtualinvoke $r14.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)>($r16);

        virtualinvoke $r14.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setRepeatInterval(int)>(1);

        $r17 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("EST");

        virtualinvoke $r14.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setTimeZone(java.util.TimeZone)>($r17);

        r60 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $r18 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("CET");

        virtualinvoke r60.<java.util.Calendar: void setTimeZone(java.util.TimeZone)>($r18);

        $r19 = virtualinvoke r58.<java.util.Calendar: java.util.Date getTime()>();

        virtualinvoke r60.<java.util.Calendar: void setTime(java.util.Date)>($r19);

        virtualinvoke r60.<java.util.Calendar: void setLenient(boolean)>(1);

        virtualinvoke r60.<java.util.Calendar: void add(int,int)>(6, 2);

        virtualinvoke r60.<java.util.Calendar: void clear(int)>(14);

        r61 = staticinvoke <org.quartz.TriggerUtils: java.util.List computeFireTimes(org.quartz.spi.OperableTrigger,org.quartz.Calendar,int)>($r14, null, 6);

        $r20 = interfaceinvoke r61.<java.util.List: java.lang.Object get(int)>(2);

        r62 = (java.util.Date) $r20;

        $r21 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("CET");

        r63 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>($r21);

        $l0 = virtualinvoke r62.<java.util.Date: long getTime()>();

        virtualinvoke r63.<java.util.Calendar: void setTimeInMillis(long)>($l0);

        $i1 = virtualinvoke r60.<java.util.Calendar: int get(int)>(11);

        $i2 = virtualinvoke r63.<java.util.Calendar: int get(int)>(11);

        if $i1 != $i2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.quartz.CalendarIntervalTriggerTest: void assertFalse(java.lang.String,boolean)>("Day increment time-of-day result not as expected over spring 2011 daylight savings transition.", $z0);

        r64 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $r23 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("CET");

        virtualinvoke r64.<java.util.Calendar: void setTimeZone(java.util.TimeZone)>($r23);

        virtualinvoke r64.<java.util.Calendar: void set(int,int,int,int,int,int)>(2011, 2, 26, 4, 0, 0);

        virtualinvoke r64.<java.util.Calendar: void clear(int)>(14);

        $r24 = new org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        specialinvoke $r24.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void <init>()>();

        $r25 = virtualinvoke r64.<java.util.Calendar: java.util.Date getTime()>();

        virtualinvoke $r24.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setStartTime(java.util.Date)>($r25);

        $r26 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit DAY>;

        virtualinvoke $r24.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)>($r26);

        virtualinvoke $r24.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setRepeatInterval(int)>(1);

        $r27 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("CET");

        virtualinvoke $r24.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setTimeZone(java.util.TimeZone)>($r27);

        virtualinvoke $r24.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setPreserveHourOfDayAcrossDaylightSavings(boolean)>(1);

        r66 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $r28 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("CET");

        virtualinvoke r66.<java.util.Calendar: void setTimeZone(java.util.TimeZone)>($r28);

        $r29 = virtualinvoke r64.<java.util.Calendar: java.util.Date getTime()>();

        virtualinvoke r66.<java.util.Calendar: void setTime(java.util.Date)>($r29);

        virtualinvoke r66.<java.util.Calendar: void setLenient(boolean)>(1);

        virtualinvoke r66.<java.util.Calendar: void add(int,int)>(6, 2);

        virtualinvoke r66.<java.util.Calendar: void clear(int)>(14);

        r67 = staticinvoke <org.quartz.TriggerUtils: java.util.List computeFireTimes(org.quartz.spi.OperableTrigger,org.quartz.Calendar,int)>($r24, null, 6);

        $r30 = interfaceinvoke r67.<java.util.List: java.lang.Object get(int)>(2);

        r68 = (java.util.Date) $r30;

        $r31 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("CET");

        r69 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>($r31);

        $l3 = virtualinvoke r68.<java.util.Date: long getTime()>();

        virtualinvoke r69.<java.util.Calendar: void setTimeInMillis(long)>($l3);

        $i4 = virtualinvoke r66.<java.util.Calendar: int get(int)>(11);

        $i5 = virtualinvoke r69.<java.util.Calendar: int get(int)>(11);

        if $i4 != $i5 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <org.quartz.CalendarIntervalTriggerTest: void assertTrue(java.lang.String,boolean)>("Day increment time-of-day result not as expected over spring 2011 daylight savings transition.", $z1);

        r70 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r70.<java.util.Calendar: void set(int,int,int,int,int,int)>(2010, 9, 31, 9, 30, 17);

        virtualinvoke r70.<java.util.Calendar: void clear(int)>(14);

        $r33 = new org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        specialinvoke $r33.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void <init>()>();

        $r34 = virtualinvoke r70.<java.util.Calendar: java.util.Date getTime()>();

        virtualinvoke $r33.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setStartTime(java.util.Date)>($r34);

        $r35 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit DAY>;

        virtualinvoke $r33.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)>($r35);

        virtualinvoke $r33.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setRepeatInterval(int)>(5);

        r72 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $r36 = virtualinvoke r70.<java.util.Calendar: java.util.Date getTime()>();

        virtualinvoke r72.<java.util.Calendar: void setTime(java.util.Date)>($r36);

        virtualinvoke r72.<java.util.Calendar: void setLenient(boolean)>(1);

        virtualinvoke r72.<java.util.Calendar: void add(int,int)>(6, 15);

        virtualinvoke r72.<java.util.Calendar: void clear(int)>(14);

        r73 = staticinvoke <org.quartz.TriggerUtils: java.util.List computeFireTimes(org.quartz.spi.OperableTrigger,org.quartz.Calendar,int)>($r33, null, 6);

        $r37 = interfaceinvoke r73.<java.util.List: java.lang.Object get(int)>(3);

        r74 = (java.util.Date) $r37;

        $r38 = virtualinvoke r72.<java.util.Calendar: java.util.Date getTime()>();

        staticinvoke <org.quartz.CalendarIntervalTriggerTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Day increment result not as expected over fall 2010 daylight savings transition.", $r38, r74);

        r75 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $r39 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("CEST");

        virtualinvoke r75.<java.util.Calendar: void setTimeZone(java.util.TimeZone)>($r39);

        virtualinvoke r75.<java.util.Calendar: void set(int,int,int,int,int,int)>(2011, 9, 29, 1, 30, 0);

        virtualinvoke r75.<java.util.Calendar: void clear(int)>(14);

        $r40 = new org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        specialinvoke $r40.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void <init>()>();

        $r41 = virtualinvoke r75.<java.util.Calendar: java.util.Date getTime()>();

        virtualinvoke $r40.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setStartTime(java.util.Date)>($r41);

        $r42 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit DAY>;

        virtualinvoke $r40.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)>($r42);

        virtualinvoke $r40.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setRepeatInterval(int)>(1);

        $r43 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("EST");

        virtualinvoke $r40.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setTimeZone(java.util.TimeZone)>($r43);

        r77 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $r44 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("CEST");

        virtualinvoke r77.<java.util.Calendar: void setTimeZone(java.util.TimeZone)>($r44);

        $r45 = virtualinvoke r75.<java.util.Calendar: java.util.Date getTime()>();

        virtualinvoke r77.<java.util.Calendar: void setTime(java.util.Date)>($r45);

        virtualinvoke r77.<java.util.Calendar: void setLenient(boolean)>(1);

        virtualinvoke r77.<java.util.Calendar: void add(int,int)>(6, 3);

        virtualinvoke r77.<java.util.Calendar: void clear(int)>(14);

        r78 = staticinvoke <org.quartz.TriggerUtils: java.util.List computeFireTimes(org.quartz.spi.OperableTrigger,org.quartz.Calendar,int)>($r40, null, 6);

        $r46 = interfaceinvoke r78.<java.util.List: java.lang.Object get(int)>(3);

        r79 = (java.util.Date) $r46;

        $r47 = virtualinvoke r77.<java.util.Calendar: java.util.Date getTime()>();

        staticinvoke <org.quartz.CalendarIntervalTriggerTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Day increment result not as expected over fall 2011 daylight savings transition.", $r47, r79);

        return;
    }

    public void testFinalFireTimes()
    {
        org.quartz.CalendarIntervalTriggerTest r0;
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl $r1, $r7;
        java.util.Date $r2, $r4, $r5, $r6, $r8, $r10, $r11, $r12, $r13, r17, r21;
        org.quartz.DateBuilder$IntervalUnit $r3, $r9;
        boolean $z0, $z1;
        java.util.Calendar r14, r16, r18, r20;

        r0 := @this: org.quartz.CalendarIntervalTriggerTest;

        r14 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r14.<java.util.Calendar: void set(int,int,int,int,int,int)>(2010, 2, 12, 9, 0, 0);

        virtualinvoke r14.<java.util.Calendar: void clear(int)>(14);

        $r1 = new org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        specialinvoke $r1.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void <init>()>();

        $r2 = virtualinvoke r14.<java.util.Calendar: java.util.Date getTime()>();

        virtualinvoke $r1.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setStartTime(java.util.Date)>($r2);

        $r3 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit DAY>;

        virtualinvoke $r1.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)>($r3);

        virtualinvoke $r1.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setRepeatInterval(int)>(5);

        r16 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $r4 = virtualinvoke r14.<java.util.Calendar: java.util.Date getTime()>();

        virtualinvoke r16.<java.util.Calendar: void setTime(java.util.Date)>($r4);

        virtualinvoke r16.<java.util.Calendar: void setLenient(boolean)>(1);

        virtualinvoke r16.<java.util.Calendar: void add(int,int)>(6, 10);

        virtualinvoke r16.<java.util.Calendar: void clear(int)>(14);

        $r5 = virtualinvoke r16.<java.util.Calendar: java.util.Date getTime()>();

        virtualinvoke $r1.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setEndTime(java.util.Date)>($r5);

        r17 = virtualinvoke $r1.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date getFinalFireTime()>();

        $r6 = virtualinvoke r16.<java.util.Calendar: java.util.Date getTime()>();

        staticinvoke <org.quartz.CalendarIntervalTriggerTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Final fire time not computed correctly for day interval.", $r6, r17);

        r18 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r18.<java.util.Calendar: void set(int,int,int,int,int,int)>(2010, 2, 12, 9, 0, 0);

        virtualinvoke r18.<java.util.Calendar: void clear(int)>(14);

        $r7 = new org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        specialinvoke $r7.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void <init>()>();

        $r8 = virtualinvoke r18.<java.util.Calendar: java.util.Date getTime()>();

        virtualinvoke $r7.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setStartTime(java.util.Date)>($r8);

        $r9 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit MINUTE>;

        virtualinvoke $r7.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)>($r9);

        virtualinvoke $r7.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setRepeatInterval(int)>(5);

        r20 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $r10 = virtualinvoke r18.<java.util.Calendar: java.util.Date getTime()>();

        virtualinvoke r20.<java.util.Calendar: void setTime(java.util.Date)>($r10);

        virtualinvoke r20.<java.util.Calendar: void setLenient(boolean)>(1);

        virtualinvoke r20.<java.util.Calendar: void add(int,int)>(6, 15);

        virtualinvoke r20.<java.util.Calendar: void add(int,int)>(12, -2);

        virtualinvoke r20.<java.util.Calendar: void clear(int)>(14);

        $r11 = virtualinvoke r20.<java.util.Calendar: java.util.Date getTime()>();

        virtualinvoke $r7.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setEndTime(java.util.Date)>($r11);

        r21 = virtualinvoke $r7.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date getFinalFireTime()>();

        $r12 = virtualinvoke r20.<java.util.Calendar: java.util.Date getTime()>();

        $z0 = virtualinvoke $r12.<java.util.Date: boolean after(java.util.Date)>(r21);

        staticinvoke <org.quartz.CalendarIntervalTriggerTest: void assertTrue(java.lang.String,boolean)>("Final fire time not computed correctly for minutely interval.", $z0);

        virtualinvoke r20.<java.util.Calendar: void add(int,int)>(12, -3);

        $r13 = virtualinvoke r20.<java.util.Calendar: java.util.Date getTime()>();

        $z1 = virtualinvoke $r13.<java.util.Date: boolean equals(java.lang.Object)>(r21);

        staticinvoke <org.quartz.CalendarIntervalTriggerTest: void assertTrue(java.lang.String,boolean)>("Final fire time not computed correctly for minutely interval.", $z1);

        return;
    }

    public void testMisfireInstructionValidity() throws java.text.ParseException
    {
        org.quartz.CalendarIntervalTriggerTest r0;
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl $r2;
        java.lang.Exception $r3, $r4;

        r0 := @this: org.quartz.CalendarIntervalTriggerTest;

        $r2 = new org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        specialinvoke $r2.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void <init>()>();

     label1:
        virtualinvoke $r2.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setMisfireInstruction(int)>(-1);

        virtualinvoke $r2.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setMisfireInstruction(int)>(0);

        virtualinvoke $r2.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setMisfireInstruction(int)>(2);

        virtualinvoke $r2.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setMisfireInstruction(int)>(1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <org.quartz.CalendarIntervalTriggerTest: void fail(java.lang.String)>("Unexpected exception while setting misfire instruction.");

     label4:
        virtualinvoke $r2.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setMisfireInstruction(int)>(3);

        staticinvoke <org.quartz.CalendarIntervalTriggerTest: void fail(java.lang.String)>("Expected exception while setting invalid misfire instruction but did not get it.");

     label5:
        goto label7;

     label6:
        $r4 := @caughtexception;

     label7:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Exception from label4 to label5 with label6;
    }

    protected java.lang.Object getTargetObject() throws java.lang.Exception
    {
        org.quartz.CalendarIntervalTriggerTest r0;
        org.quartz.JobDataMap $r3;
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl $r4;
        org.quartz.DateBuilder$IntervalUnit $r5;

        r0 := @this: org.quartz.CalendarIntervalTriggerTest;

        $r3 = new org.quartz.JobDataMap;

        specialinvoke $r3.<org.quartz.JobDataMap: void <init>()>();

        virtualinvoke $r3.<org.quartz.JobDataMap: void put(java.lang.String,java.lang.String)>("A", "B");

        $r4 = new org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        specialinvoke $r4.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void <init>()>();

        virtualinvoke $r4.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setName(java.lang.String)>("test");

        virtualinvoke $r4.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setGroup(java.lang.String)>("testGroup");

        virtualinvoke $r4.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setCalendarName(java.lang.String)>("MyCalendar");

        virtualinvoke $r4.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setDescription(java.lang.String)>("CronTriggerDesc");

        virtualinvoke $r4.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setJobDataMap(org.quartz.JobDataMap)>($r3);

        virtualinvoke $r4.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setRepeatInterval(int)>(5);

        $r5 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit DAY>;

        virtualinvoke $r4.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)>($r5);

        return $r4;
    }

    protected java.lang.String[] getVersions()
    {
        org.quartz.CalendarIntervalTriggerTest r0;
        java.lang.String[] $r1;

        r0 := @this: org.quartz.CalendarIntervalTriggerTest;

        $r1 = <org.quartz.CalendarIntervalTriggerTest: java.lang.String[] VERSIONS>;

        return $r1;
    }

    protected void verifyMatch(java.lang.Object, java.lang.Object)
    {
        org.quartz.CalendarIntervalTriggerTest r0;
        java.lang.Object r1, r2;
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl r3, r4;
        java.lang.String $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r15, $r16, $r17, $r18;
        java.util.Date $r13, $r14;
        org.quartz.JobDataMap $r19, $r20;
        int $i0, $i1;
        org.quartz.DateBuilder$IntervalUnit $r21, $r22;

        r0 := @this: org.quartz.CalendarIntervalTriggerTest;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 = (org.quartz.impl.triggers.CalendarIntervalTriggerImpl) r1;

        r4 = (org.quartz.impl.triggers.CalendarIntervalTriggerImpl) r2;

        staticinvoke <org.quartz.CalendarIntervalTriggerTest: void assertNotNull(java.lang.Object)>(r4);

        $r5 = virtualinvoke r3.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.lang.String getName()>();

        $r6 = virtualinvoke r4.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.lang.String getName()>();

        staticinvoke <org.quartz.CalendarIntervalTriggerTest: void assertEquals(java.lang.String,java.lang.String)>($r5, $r6);

        $r7 = virtualinvoke r3.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.lang.String getGroup()>();

        $r8 = virtualinvoke r4.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.lang.String getGroup()>();

        staticinvoke <org.quartz.CalendarIntervalTriggerTest: void assertEquals(java.lang.String,java.lang.String)>($r7, $r8);

        $r9 = virtualinvoke r3.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.lang.String getJobName()>();

        $r10 = virtualinvoke r4.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.lang.String getJobName()>();

        staticinvoke <org.quartz.CalendarIntervalTriggerTest: void assertEquals(java.lang.String,java.lang.String)>($r9, $r10);

        $r11 = virtualinvoke r3.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.lang.String getJobGroup()>();

        $r12 = virtualinvoke r4.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.lang.String getJobGroup()>();

        staticinvoke <org.quartz.CalendarIntervalTriggerTest: void assertEquals(java.lang.String,java.lang.String)>($r11, $r12);

        $r13 = virtualinvoke r3.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date getEndTime()>();

        $r14 = virtualinvoke r4.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date getEndTime()>();

        staticinvoke <org.quartz.CalendarIntervalTriggerTest: void assertEquals(java.lang.Object,java.lang.Object)>($r13, $r14);

        $r15 = virtualinvoke r3.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.lang.String getCalendarName()>();

        $r16 = virtualinvoke r4.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.lang.String getCalendarName()>();

        staticinvoke <org.quartz.CalendarIntervalTriggerTest: void assertEquals(java.lang.String,java.lang.String)>($r15, $r16);

        $r17 = virtualinvoke r3.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.lang.String getDescription()>();

        $r18 = virtualinvoke r4.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.lang.String getDescription()>();

        staticinvoke <org.quartz.CalendarIntervalTriggerTest: void assertEquals(java.lang.String,java.lang.String)>($r17, $r18);

        $r19 = virtualinvoke r3.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: org.quartz.JobDataMap getJobDataMap()>();

        $r20 = virtualinvoke r4.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: org.quartz.JobDataMap getJobDataMap()>();

        staticinvoke <org.quartz.CalendarIntervalTriggerTest: void assertEquals(java.lang.Object,java.lang.Object)>($r19, $r20);

        $i0 = virtualinvoke r3.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: int getRepeatInterval()>();

        $i1 = virtualinvoke r4.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: int getRepeatInterval()>();

        staticinvoke <org.quartz.CalendarIntervalTriggerTest: void assertEquals(int,int)>($i0, $i1);

        $r21 = virtualinvoke r3.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: org.quartz.DateBuilder$IntervalUnit getRepeatIntervalUnit()>();

        $r22 = virtualinvoke r4.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: org.quartz.DateBuilder$IntervalUnit getRepeatIntervalUnit()>();

        staticinvoke <org.quartz.CalendarIntervalTriggerTest: void assertEquals(java.lang.Object,java.lang.Object)>($r21, $r22);

        return;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        java.lang.String[] r0;
        org.quartz.CalendarIntervalTriggerTest $r1;

        r0 := @parameter0: java.lang.String[];

        $r1 = new org.quartz.CalendarIntervalTriggerTest;

        specialinvoke $r1.<org.quartz.CalendarIntervalTriggerTest: void <init>()>();

        virtualinvoke $r1.<org.quartz.CalendarIntervalTriggerTest: void writeJobDataFile(java.lang.String)>("2.0");

        return;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;

        $r0 = newarray (java.lang.String)[1];

        $r0[0] = "2.0";

        <org.quartz.CalendarIntervalTriggerTest: java.lang.String[] VERSIONS> = $r0;

        return;
    }
}
