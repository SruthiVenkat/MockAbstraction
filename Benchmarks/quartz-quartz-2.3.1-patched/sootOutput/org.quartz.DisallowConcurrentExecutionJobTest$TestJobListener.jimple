public class org.quartz.DisallowConcurrentExecutionJobTest$TestJobListener extends org.quartz.listeners.JobListenerSupport
{
    private final java.util.concurrent.atomic.AtomicInteger jobExCount;
    private final int jobExecutionCountToSyncAfter;

    public void <init>(int)
    {
        org.quartz.DisallowConcurrentExecutionJobTest$TestJobListener r0;
        int i0;
        java.util.concurrent.atomic.AtomicInteger $r1;

        r0 := @this: org.quartz.DisallowConcurrentExecutionJobTest$TestJobListener;

        i0 := @parameter0: int;

        specialinvoke r0.<org.quartz.listeners.JobListenerSupport: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        r0.<org.quartz.DisallowConcurrentExecutionJobTest$TestJobListener: java.util.concurrent.atomic.AtomicInteger jobExCount> = $r1;

        r0.<org.quartz.DisallowConcurrentExecutionJobTest$TestJobListener: int jobExecutionCountToSyncAfter> = i0;

        return;
    }

    public java.lang.String getName()
    {
        org.quartz.DisallowConcurrentExecutionJobTest$TestJobListener r0;

        r0 := @this: org.quartz.DisallowConcurrentExecutionJobTest$TestJobListener;

        return "TestJobListener";
    }

    public void jobWasExecuted(org.quartz.JobExecutionContext, org.quartz.JobExecutionException)
    {
        org.quartz.DisallowConcurrentExecutionJobTest$TestJobListener r0;
        org.quartz.JobExecutionContext r1;
        org.quartz.JobExecutionException r2;
        java.util.concurrent.atomic.AtomicInteger $r3;
        int $i0, $i1;
        org.quartz.Scheduler $r4;
        org.quartz.SchedulerContext $r5;
        java.lang.Object $r6;
        java.util.concurrent.TimeUnit $r7;
        java.lang.Throwable $r8;
        java.lang.AssertionError $r9;
        java.lang.StringBuilder $r10, $r11, $r13;
        java.lang.String $r12, $r14;
        java.util.concurrent.CyclicBarrier r15;

        r0 := @this: org.quartz.DisallowConcurrentExecutionJobTest$TestJobListener;

        r1 := @parameter0: org.quartz.JobExecutionContext;

        r2 := @parameter1: org.quartz.JobExecutionException;

        $r3 = r0.<org.quartz.DisallowConcurrentExecutionJobTest$TestJobListener: java.util.concurrent.atomic.AtomicInteger jobExCount>;

        $i0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        $i1 = r0.<org.quartz.DisallowConcurrentExecutionJobTest$TestJobListener: int jobExecutionCountToSyncAfter>;

        if $i0 != $i1 goto label4;

     label1:
        $r4 = interfaceinvoke r1.<org.quartz.JobExecutionContext: org.quartz.Scheduler getScheduler()>();

        $r5 = interfaceinvoke $r4.<org.quartz.Scheduler: org.quartz.SchedulerContext getContext()>();

        $r6 = virtualinvoke $r5.<org.quartz.SchedulerContext: java.lang.Object get(java.lang.Object)>("BARRIER");

        r15 = (java.util.concurrent.CyclicBarrier) $r6;

        $r7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        virtualinvoke r15.<java.util.concurrent.CyclicBarrier: int await(long,java.util.concurrent.TimeUnit)>(125L, $r7);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        virtualinvoke $r8.<java.lang.Throwable: void printStackTrace()>();

        $r9 = new java.lang.AssertionError;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Await on barrier was interrupted: ");

        $r12 = virtualinvoke $r8.<java.lang.Throwable: java.lang.String toString()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.AssertionError: void <init>(java.lang.Object)>($r14);

        throw $r9;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
