public class org.quartz.impl.matchers.GroupMatcher extends org.quartz.impl.matchers.StringMatcher
{
    private static final long serialVersionUID;

    protected void <init>(java.lang.String, org.quartz.impl.matchers.StringMatcher$StringOperatorName)
    {
        org.quartz.impl.matchers.GroupMatcher r0;
        java.lang.String r1;
        org.quartz.impl.matchers.StringMatcher$StringOperatorName r2;

        r0 := @this: org.quartz.impl.matchers.GroupMatcher;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.quartz.impl.matchers.StringMatcher$StringOperatorName;

        specialinvoke r0.<org.quartz.impl.matchers.StringMatcher: void <init>(java.lang.String,org.quartz.impl.matchers.StringMatcher$StringOperatorName)>(r1, r2);

        return;
    }

    public static org.quartz.impl.matchers.GroupMatcher groupEquals(java.lang.String)
    {
        java.lang.String r0;
        org.quartz.impl.matchers.GroupMatcher $r1;
        org.quartz.impl.matchers.StringMatcher$StringOperatorName $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = new org.quartz.impl.matchers.GroupMatcher;

        $r2 = <org.quartz.impl.matchers.StringMatcher$StringOperatorName: org.quartz.impl.matchers.StringMatcher$StringOperatorName EQUALS>;

        specialinvoke $r1.<org.quartz.impl.matchers.GroupMatcher: void <init>(java.lang.String,org.quartz.impl.matchers.StringMatcher$StringOperatorName)>(r0, $r2);

        return $r1;
    }

    public static org.quartz.impl.matchers.GroupMatcher jobGroupEquals(java.lang.String)
    {
        java.lang.String r0;
        org.quartz.impl.matchers.GroupMatcher $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher groupEquals(java.lang.String)>(r0);

        return $r1;
    }

    public static org.quartz.impl.matchers.GroupMatcher triggerGroupEquals(java.lang.String)
    {
        java.lang.String r0;
        org.quartz.impl.matchers.GroupMatcher $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher groupEquals(java.lang.String)>(r0);

        return $r1;
    }

    public static org.quartz.impl.matchers.GroupMatcher groupStartsWith(java.lang.String)
    {
        java.lang.String r0;
        org.quartz.impl.matchers.GroupMatcher $r1;
        org.quartz.impl.matchers.StringMatcher$StringOperatorName $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = new org.quartz.impl.matchers.GroupMatcher;

        $r2 = <org.quartz.impl.matchers.StringMatcher$StringOperatorName: org.quartz.impl.matchers.StringMatcher$StringOperatorName STARTS_WITH>;

        specialinvoke $r1.<org.quartz.impl.matchers.GroupMatcher: void <init>(java.lang.String,org.quartz.impl.matchers.StringMatcher$StringOperatorName)>(r0, $r2);

        return $r1;
    }

    public static org.quartz.impl.matchers.GroupMatcher jobGroupStartsWith(java.lang.String)
    {
        java.lang.String r0;
        org.quartz.impl.matchers.GroupMatcher $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher groupStartsWith(java.lang.String)>(r0);

        return $r1;
    }

    public static org.quartz.impl.matchers.GroupMatcher triggerGroupStartsWith(java.lang.String)
    {
        java.lang.String r0;
        org.quartz.impl.matchers.GroupMatcher $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher groupStartsWith(java.lang.String)>(r0);

        return $r1;
    }

    public static org.quartz.impl.matchers.GroupMatcher groupEndsWith(java.lang.String)
    {
        java.lang.String r0;
        org.quartz.impl.matchers.GroupMatcher $r1;
        org.quartz.impl.matchers.StringMatcher$StringOperatorName $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = new org.quartz.impl.matchers.GroupMatcher;

        $r2 = <org.quartz.impl.matchers.StringMatcher$StringOperatorName: org.quartz.impl.matchers.StringMatcher$StringOperatorName ENDS_WITH>;

        specialinvoke $r1.<org.quartz.impl.matchers.GroupMatcher: void <init>(java.lang.String,org.quartz.impl.matchers.StringMatcher$StringOperatorName)>(r0, $r2);

        return $r1;
    }

    public static org.quartz.impl.matchers.GroupMatcher jobGroupEndsWith(java.lang.String)
    {
        java.lang.String r0;
        org.quartz.impl.matchers.GroupMatcher $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher groupEndsWith(java.lang.String)>(r0);

        return $r1;
    }

    public static org.quartz.impl.matchers.GroupMatcher triggerGroupEndsWith(java.lang.String)
    {
        java.lang.String r0;
        org.quartz.impl.matchers.GroupMatcher $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher groupEndsWith(java.lang.String)>(r0);

        return $r1;
    }

    public static org.quartz.impl.matchers.GroupMatcher groupContains(java.lang.String)
    {
        java.lang.String r0;
        org.quartz.impl.matchers.GroupMatcher $r1;
        org.quartz.impl.matchers.StringMatcher$StringOperatorName $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = new org.quartz.impl.matchers.GroupMatcher;

        $r2 = <org.quartz.impl.matchers.StringMatcher$StringOperatorName: org.quartz.impl.matchers.StringMatcher$StringOperatorName CONTAINS>;

        specialinvoke $r1.<org.quartz.impl.matchers.GroupMatcher: void <init>(java.lang.String,org.quartz.impl.matchers.StringMatcher$StringOperatorName)>(r0, $r2);

        return $r1;
    }

    public static org.quartz.impl.matchers.GroupMatcher jobGroupContains(java.lang.String)
    {
        java.lang.String r0;
        org.quartz.impl.matchers.GroupMatcher $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher groupContains(java.lang.String)>(r0);

        return $r1;
    }

    public static org.quartz.impl.matchers.GroupMatcher triggerGroupContains(java.lang.String)
    {
        java.lang.String r0;
        org.quartz.impl.matchers.GroupMatcher $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher groupContains(java.lang.String)>(r0);

        return $r1;
    }

    public static org.quartz.impl.matchers.GroupMatcher anyGroup()
    {
        org.quartz.impl.matchers.GroupMatcher $r0;
        org.quartz.impl.matchers.StringMatcher$StringOperatorName $r1;

        $r0 = new org.quartz.impl.matchers.GroupMatcher;

        $r1 = <org.quartz.impl.matchers.StringMatcher$StringOperatorName: org.quartz.impl.matchers.StringMatcher$StringOperatorName ANYTHING>;

        specialinvoke $r0.<org.quartz.impl.matchers.GroupMatcher: void <init>(java.lang.String,org.quartz.impl.matchers.StringMatcher$StringOperatorName)>("", $r1);

        return $r0;
    }

    public static org.quartz.impl.matchers.GroupMatcher anyJobGroup()
    {
        org.quartz.impl.matchers.GroupMatcher $r0;

        $r0 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher anyGroup()>();

        return $r0;
    }

    public static org.quartz.impl.matchers.GroupMatcher anyTriggerGroup()
    {
        org.quartz.impl.matchers.GroupMatcher $r0;

        $r0 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher anyGroup()>();

        return $r0;
    }

    protected java.lang.String getValue(org.quartz.utils.Key)
    {
        org.quartz.impl.matchers.GroupMatcher r0;
        org.quartz.utils.Key r1;
        java.lang.String $r2;

        r0 := @this: org.quartz.impl.matchers.GroupMatcher;

        r1 := @parameter0: org.quartz.utils.Key;

        $r2 = virtualinvoke r1.<org.quartz.utils.Key: java.lang.String getGroup()>();

        return $r2;
    }

    public static void <clinit>()
    {
        <org.quartz.impl.matchers.GroupMatcher: long serialVersionUID> = -3275767650469343849L;

        return;
    }
}
