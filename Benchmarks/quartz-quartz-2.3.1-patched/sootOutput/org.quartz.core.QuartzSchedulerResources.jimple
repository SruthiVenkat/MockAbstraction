public class org.quartz.core.QuartzSchedulerResources extends java.lang.Object
{
    public static final java.lang.String CREATE_REGISTRY_NEVER;
    public static final java.lang.String CREATE_REGISTRY_ALWAYS;
    public static final java.lang.String CREATE_REGISTRY_AS_NEEDED;
    private java.lang.String name;
    private java.lang.String instanceId;
    private java.lang.String threadName;
    private java.lang.String rmiRegistryHost;
    private int rmiRegistryPort;
    private int rmiServerPort;
    private java.lang.String rmiCreateRegistryStrategy;
    private org.quartz.spi.ThreadPool threadPool;
    private org.quartz.spi.JobStore jobStore;
    private org.quartz.core.JobRunShellFactory jobRunShellFactory;
    private java.util.List schedulerPlugins;
    private boolean makeSchedulerThreadDaemon;
    private boolean threadsInheritInitializersClassLoadContext;
    private java.lang.String rmiBindName;
    private boolean jmxExport;
    private java.lang.String jmxObjectName;
    private org.quartz.management.ManagementRESTServiceConfiguration managementRESTServiceConfiguration;
    private org.quartz.spi.ThreadExecutor threadExecutor;
    private long batchTimeWindow;
    private int maxBatchSize;
    private boolean interruptJobsOnShutdown;
    private boolean interruptJobsOnShutdownWithWait;

    public void <init>()
    {
        org.quartz.core.QuartzSchedulerResources r0;
        java.util.ArrayList $r1;

        r0 := @this: org.quartz.core.QuartzSchedulerResources;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.quartz.core.QuartzSchedulerResources: java.lang.String rmiRegistryHost> = null;

        r0.<org.quartz.core.QuartzSchedulerResources: int rmiRegistryPort> = 1099;

        r0.<org.quartz.core.QuartzSchedulerResources: int rmiServerPort> = -1;

        r0.<org.quartz.core.QuartzSchedulerResources: java.lang.String rmiCreateRegistryStrategy> = "never";

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(10);

        r0.<org.quartz.core.QuartzSchedulerResources: java.util.List schedulerPlugins> = $r1;

        r0.<org.quartz.core.QuartzSchedulerResources: boolean makeSchedulerThreadDaemon> = 0;

        r0.<org.quartz.core.QuartzSchedulerResources: boolean threadsInheritInitializersClassLoadContext> = 0;

        r0.<org.quartz.core.QuartzSchedulerResources: long batchTimeWindow> = 0L;

        r0.<org.quartz.core.QuartzSchedulerResources: int maxBatchSize> = 1;

        r0.<org.quartz.core.QuartzSchedulerResources: boolean interruptJobsOnShutdown> = 0;

        r0.<org.quartz.core.QuartzSchedulerResources: boolean interruptJobsOnShutdownWithWait> = 0;

        return;
    }

    public java.lang.String getName()
    {
        org.quartz.core.QuartzSchedulerResources r0;
        java.lang.String $r1;

        r0 := @this: org.quartz.core.QuartzSchedulerResources;

        $r1 = r0.<org.quartz.core.QuartzSchedulerResources: java.lang.String name>;

        return $r1;
    }

    public void setName(java.lang.String)
    {
        org.quartz.core.QuartzSchedulerResources r0;
        java.lang.String r1, $r3, $r4, $r8;
        java.lang.IllegalArgumentException $r2;
        int $i0;
        java.lang.StringBuilder $r5, $r6, $r7;

        r0 := @this: org.quartz.core.QuartzSchedulerResources;

        r1 := @parameter0: java.lang.String;

        if r1 == null goto label1;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Scheduler name cannot be empty.");

        throw $r2;

     label2:
        r0.<org.quartz.core.QuartzSchedulerResources: java.lang.String name> = r1;

        $r4 = r0.<org.quartz.core.QuartzSchedulerResources: java.lang.String threadName>;

        if $r4 != null goto label3;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_QuartzSchedulerThread");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.quartz.core.QuartzSchedulerResources: void setThreadName(java.lang.String)>($r8);

     label3:
        return;
    }

    public java.lang.String getInstanceId()
    {
        org.quartz.core.QuartzSchedulerResources r0;
        java.lang.String $r1;

        r0 := @this: org.quartz.core.QuartzSchedulerResources;

        $r1 = r0.<org.quartz.core.QuartzSchedulerResources: java.lang.String instanceId>;

        return $r1;
    }

    public void setInstanceId(java.lang.String)
    {
        org.quartz.core.QuartzSchedulerResources r0;
        java.lang.String r1, $r3;
        java.lang.IllegalArgumentException $r2;
        int $i0;

        r0 := @this: org.quartz.core.QuartzSchedulerResources;

        r1 := @parameter0: java.lang.String;

        if r1 == null goto label1;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Scheduler instanceId cannot be empty.");

        throw $r2;

     label2:
        r0.<org.quartz.core.QuartzSchedulerResources: java.lang.String instanceId> = r1;

        return;
    }

    public static java.lang.String getUniqueIdentifier(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r6;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_$_");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public java.lang.String getUniqueIdentifier()
    {
        org.quartz.core.QuartzSchedulerResources r0;
        java.lang.String $r1, $r2, $r3;

        r0 := @this: org.quartz.core.QuartzSchedulerResources;

        $r2 = r0.<org.quartz.core.QuartzSchedulerResources: java.lang.String name>;

        $r1 = r0.<org.quartz.core.QuartzSchedulerResources: java.lang.String instanceId>;

        $r3 = staticinvoke <org.quartz.core.QuartzSchedulerResources: java.lang.String getUniqueIdentifier(java.lang.String,java.lang.String)>($r2, $r1);

        return $r3;
    }

    public java.lang.String getRMIRegistryHost()
    {
        org.quartz.core.QuartzSchedulerResources r0;
        java.lang.String $r1;

        r0 := @this: org.quartz.core.QuartzSchedulerResources;

        $r1 = r0.<org.quartz.core.QuartzSchedulerResources: java.lang.String rmiRegistryHost>;

        return $r1;
    }

    public void setRMIRegistryHost(java.lang.String)
    {
        org.quartz.core.QuartzSchedulerResources r0;
        java.lang.String r1;

        r0 := @this: org.quartz.core.QuartzSchedulerResources;

        r1 := @parameter0: java.lang.String;

        r0.<org.quartz.core.QuartzSchedulerResources: java.lang.String rmiRegistryHost> = r1;

        return;
    }

    public int getRMIRegistryPort()
    {
        org.quartz.core.QuartzSchedulerResources r0;
        int $i0;

        r0 := @this: org.quartz.core.QuartzSchedulerResources;

        $i0 = r0.<org.quartz.core.QuartzSchedulerResources: int rmiRegistryPort>;

        return $i0;
    }

    public void setRMIRegistryPort(int)
    {
        org.quartz.core.QuartzSchedulerResources r0;
        int i0;

        r0 := @this: org.quartz.core.QuartzSchedulerResources;

        i0 := @parameter0: int;

        r0.<org.quartz.core.QuartzSchedulerResources: int rmiRegistryPort> = i0;

        return;
    }

    public int getRMIServerPort()
    {
        org.quartz.core.QuartzSchedulerResources r0;
        int $i0;

        r0 := @this: org.quartz.core.QuartzSchedulerResources;

        $i0 = r0.<org.quartz.core.QuartzSchedulerResources: int rmiServerPort>;

        return $i0;
    }

    public void setRMIServerPort(int)
    {
        org.quartz.core.QuartzSchedulerResources r0;
        int i0;

        r0 := @this: org.quartz.core.QuartzSchedulerResources;

        i0 := @parameter0: int;

        r0.<org.quartz.core.QuartzSchedulerResources: int rmiServerPort> = i0;

        return;
    }

    public java.lang.String getRMICreateRegistryStrategy()
    {
        org.quartz.core.QuartzSchedulerResources r0;
        java.lang.String $r1;

        r0 := @this: org.quartz.core.QuartzSchedulerResources;

        $r1 = r0.<org.quartz.core.QuartzSchedulerResources: java.lang.String rmiCreateRegistryStrategy>;

        return $r1;
    }

    public java.lang.String getThreadName()
    {
        org.quartz.core.QuartzSchedulerResources r0;
        java.lang.String $r1;

        r0 := @this: org.quartz.core.QuartzSchedulerResources;

        $r1 = r0.<org.quartz.core.QuartzSchedulerResources: java.lang.String threadName>;

        return $r1;
    }

    public void setThreadName(java.lang.String)
    {
        org.quartz.core.QuartzSchedulerResources r0;
        java.lang.String r1, $r3;
        java.lang.IllegalArgumentException $r2;
        int $i0;

        r0 := @this: org.quartz.core.QuartzSchedulerResources;

        r1 := @parameter0: java.lang.String;

        if r1 == null goto label1;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Scheduler thread name cannot be empty.");

        throw $r2;

     label2:
        r0.<org.quartz.core.QuartzSchedulerResources: java.lang.String threadName> = r1;

        return;
    }

    public void setRMICreateRegistryStrategy(java.lang.String)
    {
        org.quartz.core.QuartzSchedulerResources r0;
        java.lang.String $r1, $r7, r8, r9;
        int $i0;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;

        r0 := @this: org.quartz.core.QuartzSchedulerResources;

        r8 := @parameter0: java.lang.String;

        if r8 == null goto label1;

        $r1 = virtualinvoke r8.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        r9 = "never";

        goto label8;

     label2:
        $z0 = virtualinvoke r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        if $z0 == 0 goto label3;

        r9 = "as_needed";

        goto label8;

     label3:
        $z1 = virtualinvoke r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("false");

        if $z1 == 0 goto label4;

        r9 = "never";

        goto label8;

     label4:
        $z2 = virtualinvoke r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("always");

        if $z2 == 0 goto label5;

        r9 = "always";

        goto label8;

     label5:
        $z3 = virtualinvoke r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("as_needed");

        if $z3 == 0 goto label6;

        r9 = "as_needed";

        goto label8;

     label6:
        $z4 = virtualinvoke r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("never");

        if $z4 == 0 goto label7;

        r9 = "never";

        goto label8;

     label7:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Faild to set RMICreateRegistryStrategy - strategy unknown: \'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label8:
        r0.<org.quartz.core.QuartzSchedulerResources: java.lang.String rmiCreateRegistryStrategy> = r9;

        return;
    }

    public org.quartz.spi.ThreadPool getThreadPool()
    {
        org.quartz.core.QuartzSchedulerResources r0;
        org.quartz.spi.ThreadPool $r1;

        r0 := @this: org.quartz.core.QuartzSchedulerResources;

        $r1 = r0.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.ThreadPool threadPool>;

        return $r1;
    }

    public void setThreadPool(org.quartz.spi.ThreadPool)
    {
        org.quartz.core.QuartzSchedulerResources r0;
        org.quartz.spi.ThreadPool r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.quartz.core.QuartzSchedulerResources;

        r1 := @parameter0: org.quartz.spi.ThreadPool;

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ThreadPool cannot be null.");

        throw $r2;

     label1:
        r0.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.ThreadPool threadPool> = r1;

        return;
    }

    public org.quartz.spi.JobStore getJobStore()
    {
        org.quartz.core.QuartzSchedulerResources r0;
        org.quartz.spi.JobStore $r1;

        r0 := @this: org.quartz.core.QuartzSchedulerResources;

        $r1 = r0.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore jobStore>;

        return $r1;
    }

    public void setJobStore(org.quartz.spi.JobStore)
    {
        org.quartz.core.QuartzSchedulerResources r0;
        org.quartz.spi.JobStore r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.quartz.core.QuartzSchedulerResources;

        r1 := @parameter0: org.quartz.spi.JobStore;

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("JobStore cannot be null.");

        throw $r2;

     label1:
        r0.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore jobStore> = r1;

        return;
    }

    public org.quartz.core.JobRunShellFactory getJobRunShellFactory()
    {
        org.quartz.core.QuartzSchedulerResources r0;
        org.quartz.core.JobRunShellFactory $r1;

        r0 := @this: org.quartz.core.QuartzSchedulerResources;

        $r1 = r0.<org.quartz.core.QuartzSchedulerResources: org.quartz.core.JobRunShellFactory jobRunShellFactory>;

        return $r1;
    }

    public void setJobRunShellFactory(org.quartz.core.JobRunShellFactory)
    {
        org.quartz.core.QuartzSchedulerResources r0;
        org.quartz.core.JobRunShellFactory r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.quartz.core.QuartzSchedulerResources;

        r1 := @parameter0: org.quartz.core.JobRunShellFactory;

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("JobRunShellFactory cannot be null.");

        throw $r2;

     label1:
        r0.<org.quartz.core.QuartzSchedulerResources: org.quartz.core.JobRunShellFactory jobRunShellFactory> = r1;

        return;
    }

    public void addSchedulerPlugin(org.quartz.spi.SchedulerPlugin)
    {
        org.quartz.core.QuartzSchedulerResources r0;
        org.quartz.spi.SchedulerPlugin r1;
        java.util.List $r2;

        r0 := @this: org.quartz.core.QuartzSchedulerResources;

        r1 := @parameter0: org.quartz.spi.SchedulerPlugin;

        $r2 = r0.<org.quartz.core.QuartzSchedulerResources: java.util.List schedulerPlugins>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public java.util.List getSchedulerPlugins()
    {
        org.quartz.core.QuartzSchedulerResources r0;
        java.util.List $r1;

        r0 := @this: org.quartz.core.QuartzSchedulerResources;

        $r1 = r0.<org.quartz.core.QuartzSchedulerResources: java.util.List schedulerPlugins>;

        return $r1;
    }

    public boolean getMakeSchedulerThreadDaemon()
    {
        org.quartz.core.QuartzSchedulerResources r0;
        boolean $z0;

        r0 := @this: org.quartz.core.QuartzSchedulerResources;

        $z0 = r0.<org.quartz.core.QuartzSchedulerResources: boolean makeSchedulerThreadDaemon>;

        return $z0;
    }

    public void setMakeSchedulerThreadDaemon(boolean)
    {
        org.quartz.core.QuartzSchedulerResources r0;
        boolean z0;

        r0 := @this: org.quartz.core.QuartzSchedulerResources;

        z0 := @parameter0: boolean;

        r0.<org.quartz.core.QuartzSchedulerResources: boolean makeSchedulerThreadDaemon> = z0;

        return;
    }

    public boolean isThreadsInheritInitializersClassLoadContext()
    {
        org.quartz.core.QuartzSchedulerResources r0;
        boolean $z0;

        r0 := @this: org.quartz.core.QuartzSchedulerResources;

        $z0 = r0.<org.quartz.core.QuartzSchedulerResources: boolean threadsInheritInitializersClassLoadContext>;

        return $z0;
    }

    public void setThreadsInheritInitializersClassLoadContext(boolean)
    {
        org.quartz.core.QuartzSchedulerResources r0;
        boolean z0;

        r0 := @this: org.quartz.core.QuartzSchedulerResources;

        z0 := @parameter0: boolean;

        r0.<org.quartz.core.QuartzSchedulerResources: boolean threadsInheritInitializersClassLoadContext> = z0;

        return;
    }

    public java.lang.String getRMIBindName()
    {
        org.quartz.core.QuartzSchedulerResources r0;
        java.lang.String $r1, $r2;

        r0 := @this: org.quartz.core.QuartzSchedulerResources;

        $r1 = r0.<org.quartz.core.QuartzSchedulerResources: java.lang.String rmiBindName>;

        if $r1 != null goto label1;

        $r2 = virtualinvoke r0.<org.quartz.core.QuartzSchedulerResources: java.lang.String getUniqueIdentifier()>();

        goto label2;

     label1:
        $r2 = r0.<org.quartz.core.QuartzSchedulerResources: java.lang.String rmiBindName>;

     label2:
        return $r2;
    }

    public void setRMIBindName(java.lang.String)
    {
        org.quartz.core.QuartzSchedulerResources r0;
        java.lang.String r1;

        r0 := @this: org.quartz.core.QuartzSchedulerResources;

        r1 := @parameter0: java.lang.String;

        r0.<org.quartz.core.QuartzSchedulerResources: java.lang.String rmiBindName> = r1;

        return;
    }

    public boolean getJMXExport()
    {
        org.quartz.core.QuartzSchedulerResources r0;
        boolean $z0;

        r0 := @this: org.quartz.core.QuartzSchedulerResources;

        $z0 = r0.<org.quartz.core.QuartzSchedulerResources: boolean jmxExport>;

        return $z0;
    }

    public void setJMXExport(boolean)
    {
        org.quartz.core.QuartzSchedulerResources r0;
        boolean z0;

        r0 := @this: org.quartz.core.QuartzSchedulerResources;

        z0 := @parameter0: boolean;

        r0.<org.quartz.core.QuartzSchedulerResources: boolean jmxExport> = z0;

        return;
    }

    public java.lang.String getJMXObjectName()
    {
        org.quartz.core.QuartzSchedulerResources r0;
        java.lang.String $r1, $r2, $r3, $r4;

        r0 := @this: org.quartz.core.QuartzSchedulerResources;

        $r1 = r0.<org.quartz.core.QuartzSchedulerResources: java.lang.String jmxObjectName>;

        if $r1 != null goto label1;

        $r3 = r0.<org.quartz.core.QuartzSchedulerResources: java.lang.String name>;

        $r2 = r0.<org.quartz.core.QuartzSchedulerResources: java.lang.String instanceId>;

        $r4 = staticinvoke <org.quartz.core.QuartzSchedulerResources: java.lang.String generateJMXObjectName(java.lang.String,java.lang.String)>($r3, $r2);

        goto label2;

     label1:
        $r4 = r0.<org.quartz.core.QuartzSchedulerResources: java.lang.String jmxObjectName>;

     label2:
        return $r4;
    }

    public void setJMXObjectName(java.lang.String)
    {
        org.quartz.core.QuartzSchedulerResources r0;
        java.lang.String r1;

        r0 := @this: org.quartz.core.QuartzSchedulerResources;

        r1 := @parameter0: java.lang.String;

        r0.<org.quartz.core.QuartzSchedulerResources: java.lang.String jmxObjectName> = r1;

        return;
    }

    public org.quartz.spi.ThreadExecutor getThreadExecutor()
    {
        org.quartz.core.QuartzSchedulerResources r0;
        org.quartz.spi.ThreadExecutor $r1;

        r0 := @this: org.quartz.core.QuartzSchedulerResources;

        $r1 = r0.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.ThreadExecutor threadExecutor>;

        return $r1;
    }

    public void setThreadExecutor(org.quartz.spi.ThreadExecutor)
    {
        org.quartz.core.QuartzSchedulerResources r0;
        org.quartz.spi.ThreadExecutor r1;

        r0 := @this: org.quartz.core.QuartzSchedulerResources;

        r1 := @parameter0: org.quartz.spi.ThreadExecutor;

        r0.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.ThreadExecutor threadExecutor> = r1;

        return;
    }

    public static java.lang.String generateJMXObjectName(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r4, $r8;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r7;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("quartz:type=QuartzScheduler,name=");

        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(":|=|\n", ".");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",instance=");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public long getBatchTimeWindow()
    {
        org.quartz.core.QuartzSchedulerResources r0;
        long $l0;

        r0 := @this: org.quartz.core.QuartzSchedulerResources;

        $l0 = r0.<org.quartz.core.QuartzSchedulerResources: long batchTimeWindow>;

        return $l0;
    }

    public void setBatchTimeWindow(long)
    {
        org.quartz.core.QuartzSchedulerResources r0;
        long l0;

        r0 := @this: org.quartz.core.QuartzSchedulerResources;

        l0 := @parameter0: long;

        r0.<org.quartz.core.QuartzSchedulerResources: long batchTimeWindow> = l0;

        return;
    }

    public int getMaxBatchSize()
    {
        org.quartz.core.QuartzSchedulerResources r0;
        int $i0;

        r0 := @this: org.quartz.core.QuartzSchedulerResources;

        $i0 = r0.<org.quartz.core.QuartzSchedulerResources: int maxBatchSize>;

        return $i0;
    }

    public void setMaxBatchSize(int)
    {
        org.quartz.core.QuartzSchedulerResources r0;
        int i0;

        r0 := @this: org.quartz.core.QuartzSchedulerResources;

        i0 := @parameter0: int;

        r0.<org.quartz.core.QuartzSchedulerResources: int maxBatchSize> = i0;

        return;
    }

    public boolean isInterruptJobsOnShutdown()
    {
        org.quartz.core.QuartzSchedulerResources r0;
        boolean $z0;

        r0 := @this: org.quartz.core.QuartzSchedulerResources;

        $z0 = r0.<org.quartz.core.QuartzSchedulerResources: boolean interruptJobsOnShutdown>;

        return $z0;
    }

    public void setInterruptJobsOnShutdown(boolean)
    {
        org.quartz.core.QuartzSchedulerResources r0;
        boolean z0;

        r0 := @this: org.quartz.core.QuartzSchedulerResources;

        z0 := @parameter0: boolean;

        r0.<org.quartz.core.QuartzSchedulerResources: boolean interruptJobsOnShutdown> = z0;

        return;
    }

    public boolean isInterruptJobsOnShutdownWithWait()
    {
        org.quartz.core.QuartzSchedulerResources r0;
        boolean $z0;

        r0 := @this: org.quartz.core.QuartzSchedulerResources;

        $z0 = r0.<org.quartz.core.QuartzSchedulerResources: boolean interruptJobsOnShutdownWithWait>;

        return $z0;
    }

    public void setInterruptJobsOnShutdownWithWait(boolean)
    {
        org.quartz.core.QuartzSchedulerResources r0;
        boolean z0;

        r0 := @this: org.quartz.core.QuartzSchedulerResources;

        z0 := @parameter0: boolean;

        r0.<org.quartz.core.QuartzSchedulerResources: boolean interruptJobsOnShutdownWithWait> = z0;

        return;
    }

    public org.quartz.management.ManagementRESTServiceConfiguration getManagementRESTServiceConfiguration()
    {
        org.quartz.core.QuartzSchedulerResources r0;
        org.quartz.management.ManagementRESTServiceConfiguration $r1;

        r0 := @this: org.quartz.core.QuartzSchedulerResources;

        $r1 = r0.<org.quartz.core.QuartzSchedulerResources: org.quartz.management.ManagementRESTServiceConfiguration managementRESTServiceConfiguration>;

        return $r1;
    }

    public void setManagementRESTServiceConfiguration(org.quartz.management.ManagementRESTServiceConfiguration)
    {
        org.quartz.core.QuartzSchedulerResources r0;
        org.quartz.management.ManagementRESTServiceConfiguration r1;

        r0 := @this: org.quartz.core.QuartzSchedulerResources;

        r1 := @parameter0: org.quartz.management.ManagementRESTServiceConfiguration;

        r0.<org.quartz.core.QuartzSchedulerResources: org.quartz.management.ManagementRESTServiceConfiguration managementRESTServiceConfiguration> = r1;

        return;
    }

    public static void <clinit>()
    {
        <org.quartz.core.QuartzSchedulerResources: java.lang.String CREATE_REGISTRY_AS_NEEDED> = "as_needed";

        <org.quartz.core.QuartzSchedulerResources: java.lang.String CREATE_REGISTRY_ALWAYS> = "always";

        <org.quartz.core.QuartzSchedulerResources: java.lang.String CREATE_REGISTRY_NEVER> = "never";

        return;
    }
}
