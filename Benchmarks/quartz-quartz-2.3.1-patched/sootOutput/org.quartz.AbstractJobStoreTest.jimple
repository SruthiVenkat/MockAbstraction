public abstract class org.quartz.AbstractJobStoreTest extends junit.framework.TestCase
{
    private org.quartz.spi.JobStore fJobStore;
    private org.quartz.impl.JobDetailImpl fJobDetail;
    private org.quartz.AbstractJobStoreTest$SampleSignaler fSignaler;

    public void <init>()
    {
        org.quartz.AbstractJobStoreTest r0;

        r0 := @this: org.quartz.AbstractJobStoreTest;

        specialinvoke r0.<junit.framework.TestCase: void <init>()>();

        return;
    }

    protected void setUp() throws java.lang.Exception
    {
        org.quartz.AbstractJobStoreTest r0;
        org.quartz.AbstractJobStoreTest$SampleSignaler $r2, $r5;
        org.quartz.simpl.CascadingClassLoadHelper $r3;
        org.quartz.spi.JobStore $r4, $r6, $r7, $r11;
        org.quartz.impl.JobDetailImpl $r8, $r9, $r10;

        r0 := @this: org.quartz.AbstractJobStoreTest;

        $r2 = new org.quartz.AbstractJobStoreTest$SampleSignaler;

        specialinvoke $r2.<org.quartz.AbstractJobStoreTest$SampleSignaler: void <init>()>();

        r0.<org.quartz.AbstractJobStoreTest: org.quartz.AbstractJobStoreTest$SampleSignaler fSignaler> = $r2;

        $r3 = new org.quartz.simpl.CascadingClassLoadHelper;

        specialinvoke $r3.<org.quartz.simpl.CascadingClassLoadHelper: void <init>()>();

        interfaceinvoke $r3.<org.quartz.spi.ClassLoadHelper: void initialize()>();

        $r4 = virtualinvoke r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore createJobStore(java.lang.String)>("AbstractJobStoreTest");

        r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore> = $r4;

        $r6 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        $r5 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.AbstractJobStoreTest$SampleSignaler fSignaler>;

        interfaceinvoke $r6.<org.quartz.spi.JobStore: void initialize(org.quartz.spi.ClassLoadHelper,org.quartz.spi.SchedulerSignaler)>($r3, $r5);

        $r7 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        interfaceinvoke $r7.<org.quartz.spi.JobStore: void schedulerStarted()>();

        $r8 = new org.quartz.impl.JobDetailImpl;

        specialinvoke $r8.<org.quartz.impl.JobDetailImpl: void <init>(java.lang.String,java.lang.String,java.lang.Class)>("job1", "jobGroup1", class "Lorg/quartz/AbstractJobStoreTest$MyJob;");

        r0.<org.quartz.AbstractJobStoreTest: org.quartz.impl.JobDetailImpl fJobDetail> = $r8;

        $r9 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.impl.JobDetailImpl fJobDetail>;

        virtualinvoke $r9.<org.quartz.impl.JobDetailImpl: void setDurability(boolean)>(1);

        $r11 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        $r10 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.impl.JobDetailImpl fJobDetail>;

        interfaceinvoke $r11.<org.quartz.spi.JobStore: void storeJob(org.quartz.JobDetail,boolean)>($r10, 0);

        return;
    }

    protected void tearDown()
    {
        org.quartz.AbstractJobStoreTest r0;

        r0 := @this: org.quartz.AbstractJobStoreTest;

        virtualinvoke r0.<org.quartz.AbstractJobStoreTest: void destroyJobStore(java.lang.String)>("AbstractJobStoreTest");

        return;
    }

    protected abstract org.quartz.spi.JobStore createJobStore(java.lang.String);

    protected abstract void destroyJobStore(java.lang.String);

    public void testAcquireNextTrigger() throws java.lang.Exception
    {
        org.quartz.AbstractJobStoreTest r0;
        java.util.Date r1, $r10, $r11, $r17, $r18, $r24, $r25, $r32, $r33, $r57, $r59;
        long l0, l1, $l2, $l3, $l4, $l5, $l6, $l7, $l8, $l9, $l10, $l11, $l12, $l13, $l14, $l15;
        org.quartz.impl.triggers.SimpleTriggerImpl $r5, $r12, $r19;
        org.quartz.impl.JobDetailImpl $r6, $r8, $r13, $r15, $r20, $r22;
        java.lang.String $r7, $r9, $r14, $r16, $r21, $r23;
        org.quartz.spi.JobStore $r29, $r30, $r31, $r34, $r37, $r43, $r49, $r54, $r56, $r58;
        java.util.List $r35, $r38, $r44, $r50, $r55, $r60;
        boolean $z0, $z1;
        org.quartz.TriggerKey $r36, $r41, $r42, $r47, $r48, $r53;
        java.lang.Object $r39, $r45, $r51, $r61;
        org.quartz.spi.OperableTrigger $r40, $r46, $r52;

        r0 := @this: org.quartz.AbstractJobStoreTest;

        r1 = staticinvoke <org.quartz.DateBuilder: java.util.Date evenMinuteDateAfterNow()>();

        l0 = virtualinvoke r1.<java.util.Date: long getTime()>();

        $r5 = new org.quartz.impl.triggers.SimpleTriggerImpl;

        $r6 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.impl.JobDetailImpl fJobDetail>;

        $r7 = virtualinvoke $r6.<org.quartz.impl.JobDetailImpl: java.lang.String getName()>();

        $r8 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.impl.JobDetailImpl fJobDetail>;

        $r9 = virtualinvoke $r8.<org.quartz.impl.JobDetailImpl: java.lang.String getGroup()>();

        $r10 = new java.util.Date;

        $l2 = l0 + 200000L;

        specialinvoke $r10.<java.util.Date: void <init>(long)>($l2);

        $r11 = new java.util.Date;

        $l3 = l0 + 200000L;

        specialinvoke $r11.<java.util.Date: void <init>(long)>($l3);

        specialinvoke $r5.<org.quartz.impl.triggers.SimpleTriggerImpl: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Date,java.util.Date,int,long)>("trigger1", "triggerGroup1", $r7, $r9, $r10, $r11, 2, 2000L);

        $r12 = new org.quartz.impl.triggers.SimpleTriggerImpl;

        $r13 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.impl.JobDetailImpl fJobDetail>;

        $r14 = virtualinvoke $r13.<org.quartz.impl.JobDetailImpl: java.lang.String getName()>();

        $r15 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.impl.JobDetailImpl fJobDetail>;

        $r16 = virtualinvoke $r15.<org.quartz.impl.JobDetailImpl: java.lang.String getGroup()>();

        $r17 = new java.util.Date;

        $l4 = l0 + 50000L;

        specialinvoke $r17.<java.util.Date: void <init>(long)>($l4);

        $r18 = new java.util.Date;

        $l5 = l0 + 200000L;

        specialinvoke $r18.<java.util.Date: void <init>(long)>($l5);

        specialinvoke $r12.<org.quartz.impl.triggers.SimpleTriggerImpl: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Date,java.util.Date,int,long)>("trigger2", "triggerGroup1", $r14, $r16, $r17, $r18, 2, 2000L);

        $r19 = new org.quartz.impl.triggers.SimpleTriggerImpl;

        $r20 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.impl.JobDetailImpl fJobDetail>;

        $r21 = virtualinvoke $r20.<org.quartz.impl.JobDetailImpl: java.lang.String getName()>();

        $r22 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.impl.JobDetailImpl fJobDetail>;

        $r23 = virtualinvoke $r22.<org.quartz.impl.JobDetailImpl: java.lang.String getGroup()>();

        $r24 = new java.util.Date;

        $l6 = l0 + 100000L;

        specialinvoke $r24.<java.util.Date: void <init>(long)>($l6);

        $r25 = new java.util.Date;

        $l7 = l0 + 200000L;

        specialinvoke $r25.<java.util.Date: void <init>(long)>($l7);

        specialinvoke $r19.<org.quartz.impl.triggers.SimpleTriggerImpl: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Date,java.util.Date,int,long)>("trigger1", "triggerGroup2", $r21, $r23, $r24, $r25, 2, 2000L);

        interfaceinvoke $r5.<org.quartz.spi.OperableTrigger: java.util.Date computeFirstFireTime(org.quartz.Calendar)>(null);

        interfaceinvoke $r12.<org.quartz.spi.OperableTrigger: java.util.Date computeFirstFireTime(org.quartz.Calendar)>(null);

        interfaceinvoke $r19.<org.quartz.spi.OperableTrigger: java.util.Date computeFirstFireTime(org.quartz.Calendar)>(null);

        $r29 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        interfaceinvoke $r29.<org.quartz.spi.JobStore: void storeTrigger(org.quartz.spi.OperableTrigger,boolean)>($r5, 0);

        $r30 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        interfaceinvoke $r30.<org.quartz.spi.JobStore: void storeTrigger(org.quartz.spi.OperableTrigger,boolean)>($r12, 0);

        $r31 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        interfaceinvoke $r31.<org.quartz.spi.JobStore: void storeTrigger(org.quartz.spi.OperableTrigger,boolean)>($r19, 0);

        $r32 = new java.util.Date;

        $r33 = interfaceinvoke $r5.<org.quartz.spi.OperableTrigger: java.util.Date getNextFireTime()>();

        $l8 = virtualinvoke $r33.<java.util.Date: long getTime()>();

        specialinvoke $r32.<java.util.Date: void <init>(long)>($l8);

        l1 = virtualinvoke $r32.<java.util.Date: long getTime()>();

        $r34 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        $r35 = interfaceinvoke $r34.<org.quartz.spi.JobStore: java.util.List acquireNextTriggers(long,int,long)>(10L, 1, 0L);

        $z0 = interfaceinvoke $r35.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.quartz.AbstractJobStoreTest: void assertTrue(boolean)>($z0);

        $r36 = interfaceinvoke $r12.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        $r37 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        $l9 = l1 + 10000L;

        $r38 = interfaceinvoke $r37.<org.quartz.spi.JobStore: java.util.List acquireNextTriggers(long,int,long)>($l9, 1, 0L);

        $r39 = interfaceinvoke $r38.<java.util.List: java.lang.Object get(int)>(0);

        $r40 = (org.quartz.spi.OperableTrigger) $r39;

        $r41 = interfaceinvoke $r40.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        staticinvoke <org.quartz.AbstractJobStoreTest: void assertEquals(java.lang.Object,java.lang.Object)>($r36, $r41);

        $r42 = interfaceinvoke $r19.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        $r43 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        $l10 = l1 + 10000L;

        $r44 = interfaceinvoke $r43.<org.quartz.spi.JobStore: java.util.List acquireNextTriggers(long,int,long)>($l10, 1, 0L);

        $r45 = interfaceinvoke $r44.<java.util.List: java.lang.Object get(int)>(0);

        $r46 = (org.quartz.spi.OperableTrigger) $r45;

        $r47 = interfaceinvoke $r46.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        staticinvoke <org.quartz.AbstractJobStoreTest: void assertEquals(java.lang.Object,java.lang.Object)>($r42, $r47);

        $r48 = interfaceinvoke $r5.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        $r49 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        $l11 = l1 + 10000L;

        $r50 = interfaceinvoke $r49.<org.quartz.spi.JobStore: java.util.List acquireNextTriggers(long,int,long)>($l11, 1, 0L);

        $r51 = interfaceinvoke $r50.<java.util.List: java.lang.Object get(int)>(0);

        $r52 = (org.quartz.spi.OperableTrigger) $r51;

        $r53 = interfaceinvoke $r52.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        staticinvoke <org.quartz.AbstractJobStoreTest: void assertEquals(java.lang.Object,java.lang.Object)>($r48, $r53);

        $r54 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        $l12 = l1 + 10000L;

        $r55 = interfaceinvoke $r54.<org.quartz.spi.JobStore: java.util.List acquireNextTriggers(long,int,long)>($l12, 1, 0L);

        $z1 = interfaceinvoke $r55.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.quartz.AbstractJobStoreTest: void assertTrue(boolean)>($z1);

        $r56 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        interfaceinvoke $r56.<org.quartz.spi.JobStore: void releaseAcquiredTrigger(org.quartz.spi.OperableTrigger)>($r19);

        $r58 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        $r57 = new java.util.Date;

        $r59 = interfaceinvoke $r5.<org.quartz.spi.OperableTrigger: java.util.Date getNextFireTime()>();

        $l13 = virtualinvoke $r59.<java.util.Date: long getTime()>();

        specialinvoke $r57.<java.util.Date: void <init>(long)>($l13);

        $l14 = virtualinvoke $r57.<java.util.Date: long getTime()>();

        $l15 = $l14 + 10000L;

        $r60 = interfaceinvoke $r58.<org.quartz.spi.JobStore: java.util.List acquireNextTriggers(long,int,long)>($l15, 1, 1L);

        $r61 = interfaceinvoke $r60.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.quartz.AbstractJobStoreTest: void assertEquals(java.lang.Object,java.lang.Object)>($r19, $r61);

        return;
    }

    public void testAcquireNextTriggerBatch() throws java.lang.Exception
    {
        org.quartz.AbstractJobStoreTest r0;
        long l0, l1, $l2, $l3, $l4, $l5, $l6, $l7, $l8, $l9, $l10, $l11, $l12, $l13, $l14, $l15, $l17, $l19, $l21, $l23, $l25, $l27;
        org.quartz.impl.triggers.SimpleTriggerImpl $r7, $r14, $r21, $r28, $r35, $r42;
        org.quartz.impl.JobDetailImpl $r8, $r10, $r15, $r17, $r22, $r24, $r29, $r31, $r36, $r38, $r43, $r45;
        java.lang.String $r9, $r11, $r16, $r18, $r23, $r25, $r30, $r32, $r37, $r39, $r44, $r46;
        java.util.Date $r12, $r13, $r19, $r20, $r26, $r27, $r33, $r34, $r40, $r41, $r47, $r48, $r61, $r62;
        org.quartz.spi.JobStore $r55, $r56, $r57, $r58, $r59, $r60, $r63, $r68, $r69, $r78, $r79, $r80, $r82, $r99, $r100, $r101, $r102, $r103, $r120, $r121, $r122, $r123, $r124, $r129, $r130, $r139, $r140, $r141, $r142, $r147;
        int $i16, $i18, $i20, $i22, $i24, $i26, $i28;
        org.quartz.TriggerKey $r64, $r67, $r70, $r73, $r74, $r77, $r81, $r83, $r86, $r87, $r90, $r91, $r94, $r95, $r98, $r104, $r107, $r108, $r111, $r112, $r115, $r116, $r119, $r125, $r128, $r131, $r134, $r135, $r138, $r143, $r146;
        java.lang.Object $r65, $r71, $r75, $r84, $r88, $r92, $r96, $r105, $r109, $r113, $r117, $r126, $r132, $r136, $r144;
        org.quartz.spi.OperableTrigger $r66, $r72, $r76, $r85, $r89, $r93, $r97, $r106, $r110, $r114, $r118, $r127, $r133, $r137, $r145;
        java.util.List r148, r149, r150, r151, r152, r153, r154;

        r0 := @this: org.quartz.AbstractJobStoreTest;

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l0 = $l2 - 1000L;

        $r7 = new org.quartz.impl.triggers.SimpleTriggerImpl;

        $r8 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.impl.JobDetailImpl fJobDetail>;

        $r9 = virtualinvoke $r8.<org.quartz.impl.JobDetailImpl: java.lang.String getName()>();

        $r10 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.impl.JobDetailImpl fJobDetail>;

        $r11 = virtualinvoke $r10.<org.quartz.impl.JobDetailImpl: java.lang.String getGroup()>();

        $r12 = new java.util.Date;

        specialinvoke $r12.<java.util.Date: void <init>(long)>(l0);

        $r13 = new java.util.Date;

        $l3 = l0 + 5L;

        specialinvoke $r13.<java.util.Date: void <init>(long)>($l3);

        specialinvoke $r7.<org.quartz.impl.triggers.SimpleTriggerImpl: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Date,java.util.Date,int,long)>("early", "triggerGroup1", $r9, $r11, $r12, $r13, 2, 2000L);

        $r14 = new org.quartz.impl.triggers.SimpleTriggerImpl;

        $r15 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.impl.JobDetailImpl fJobDetail>;

        $r16 = virtualinvoke $r15.<org.quartz.impl.JobDetailImpl: java.lang.String getName()>();

        $r17 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.impl.JobDetailImpl fJobDetail>;

        $r18 = virtualinvoke $r17.<org.quartz.impl.JobDetailImpl: java.lang.String getGroup()>();

        $r19 = new java.util.Date;

        $l4 = l0 + 200000L;

        specialinvoke $r19.<java.util.Date: void <init>(long)>($l4);

        $r20 = new java.util.Date;

        $l5 = l0 + 200005L;

        specialinvoke $r20.<java.util.Date: void <init>(long)>($l5);

        specialinvoke $r14.<org.quartz.impl.triggers.SimpleTriggerImpl: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Date,java.util.Date,int,long)>("trigger1", "triggerGroup1", $r16, $r18, $r19, $r20, 2, 2000L);

        $r21 = new org.quartz.impl.triggers.SimpleTriggerImpl;

        $r22 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.impl.JobDetailImpl fJobDetail>;

        $r23 = virtualinvoke $r22.<org.quartz.impl.JobDetailImpl: java.lang.String getName()>();

        $r24 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.impl.JobDetailImpl fJobDetail>;

        $r25 = virtualinvoke $r24.<org.quartz.impl.JobDetailImpl: java.lang.String getGroup()>();

        $r26 = new java.util.Date;

        $l6 = l0 + 210000L;

        specialinvoke $r26.<java.util.Date: void <init>(long)>($l6);

        $r27 = new java.util.Date;

        $l7 = l0 + 210005L;

        specialinvoke $r27.<java.util.Date: void <init>(long)>($l7);

        specialinvoke $r21.<org.quartz.impl.triggers.SimpleTriggerImpl: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Date,java.util.Date,int,long)>("trigger2", "triggerGroup1", $r23, $r25, $r26, $r27, 2, 2000L);

        $r28 = new org.quartz.impl.triggers.SimpleTriggerImpl;

        $r29 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.impl.JobDetailImpl fJobDetail>;

        $r30 = virtualinvoke $r29.<org.quartz.impl.JobDetailImpl: java.lang.String getName()>();

        $r31 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.impl.JobDetailImpl fJobDetail>;

        $r32 = virtualinvoke $r31.<org.quartz.impl.JobDetailImpl: java.lang.String getGroup()>();

        $r33 = new java.util.Date;

        $l8 = l0 + 220000L;

        specialinvoke $r33.<java.util.Date: void <init>(long)>($l8);

        $r34 = new java.util.Date;

        $l9 = l0 + 220005L;

        specialinvoke $r34.<java.util.Date: void <init>(long)>($l9);

        specialinvoke $r28.<org.quartz.impl.triggers.SimpleTriggerImpl: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Date,java.util.Date,int,long)>("trigger3", "triggerGroup1", $r30, $r32, $r33, $r34, 2, 2000L);

        $r35 = new org.quartz.impl.triggers.SimpleTriggerImpl;

        $r36 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.impl.JobDetailImpl fJobDetail>;

        $r37 = virtualinvoke $r36.<org.quartz.impl.JobDetailImpl: java.lang.String getName()>();

        $r38 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.impl.JobDetailImpl fJobDetail>;

        $r39 = virtualinvoke $r38.<org.quartz.impl.JobDetailImpl: java.lang.String getGroup()>();

        $r40 = new java.util.Date;

        $l10 = l0 + 230000L;

        specialinvoke $r40.<java.util.Date: void <init>(long)>($l10);

        $r41 = new java.util.Date;

        $l11 = l0 + 230005L;

        specialinvoke $r41.<java.util.Date: void <init>(long)>($l11);

        specialinvoke $r35.<org.quartz.impl.triggers.SimpleTriggerImpl: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Date,java.util.Date,int,long)>("trigger4", "triggerGroup1", $r37, $r39, $r40, $r41, 2, 2000L);

        $r42 = new org.quartz.impl.triggers.SimpleTriggerImpl;

        $r43 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.impl.JobDetailImpl fJobDetail>;

        $r44 = virtualinvoke $r43.<org.quartz.impl.JobDetailImpl: java.lang.String getName()>();

        $r45 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.impl.JobDetailImpl fJobDetail>;

        $r46 = virtualinvoke $r45.<org.quartz.impl.JobDetailImpl: java.lang.String getGroup()>();

        $r47 = new java.util.Date;

        $l12 = l0 + 500000L;

        specialinvoke $r47.<java.util.Date: void <init>(long)>($l12);

        $r48 = new java.util.Date;

        $l13 = l0 + 700000L;

        specialinvoke $r48.<java.util.Date: void <init>(long)>($l13);

        specialinvoke $r42.<org.quartz.impl.triggers.SimpleTriggerImpl: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Date,java.util.Date,int,long)>("trigger10", "triggerGroup2", $r44, $r46, $r47, $r48, 2, 2000L);

        interfaceinvoke $r7.<org.quartz.spi.OperableTrigger: java.util.Date computeFirstFireTime(org.quartz.Calendar)>(null);

        interfaceinvoke $r7.<org.quartz.spi.OperableTrigger: void setMisfireInstruction(int)>(-1);

        interfaceinvoke $r14.<org.quartz.spi.OperableTrigger: java.util.Date computeFirstFireTime(org.quartz.Calendar)>(null);

        interfaceinvoke $r21.<org.quartz.spi.OperableTrigger: java.util.Date computeFirstFireTime(org.quartz.Calendar)>(null);

        interfaceinvoke $r28.<org.quartz.spi.OperableTrigger: java.util.Date computeFirstFireTime(org.quartz.Calendar)>(null);

        interfaceinvoke $r35.<org.quartz.spi.OperableTrigger: java.util.Date computeFirstFireTime(org.quartz.Calendar)>(null);

        interfaceinvoke $r42.<org.quartz.spi.OperableTrigger: java.util.Date computeFirstFireTime(org.quartz.Calendar)>(null);

        $r55 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        interfaceinvoke $r55.<org.quartz.spi.JobStore: void storeTrigger(org.quartz.spi.OperableTrigger,boolean)>($r7, 0);

        $r56 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        interfaceinvoke $r56.<org.quartz.spi.JobStore: void storeTrigger(org.quartz.spi.OperableTrigger,boolean)>($r14, 0);

        $r57 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        interfaceinvoke $r57.<org.quartz.spi.JobStore: void storeTrigger(org.quartz.spi.OperableTrigger,boolean)>($r21, 0);

        $r58 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        interfaceinvoke $r58.<org.quartz.spi.JobStore: void storeTrigger(org.quartz.spi.OperableTrigger,boolean)>($r28, 0);

        $r59 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        interfaceinvoke $r59.<org.quartz.spi.JobStore: void storeTrigger(org.quartz.spi.OperableTrigger,boolean)>($r35, 0);

        $r60 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        interfaceinvoke $r60.<org.quartz.spi.JobStore: void storeTrigger(org.quartz.spi.OperableTrigger,boolean)>($r42, 0);

        $r61 = new java.util.Date;

        $r62 = interfaceinvoke $r14.<org.quartz.spi.OperableTrigger: java.util.Date getNextFireTime()>();

        $l14 = virtualinvoke $r62.<java.util.Date: long getTime()>();

        specialinvoke $r61.<java.util.Date: void <init>(long)>($l14);

        l1 = virtualinvoke $r61.<java.util.Date: long getTime()>();

        $r63 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        $l15 = l1 + 10000L;

        r148 = interfaceinvoke $r63.<org.quartz.spi.JobStore: java.util.List acquireNextTriggers(long,int,long)>($l15, 4, 1000L);

        $i16 = interfaceinvoke r148.<java.util.List: int size()>();

        staticinvoke <org.quartz.AbstractJobStoreTest: void assertEquals(int,int)>(1, $i16);

        $r64 = interfaceinvoke $r7.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        $r65 = interfaceinvoke r148.<java.util.List: java.lang.Object get(int)>(0);

        $r66 = (org.quartz.spi.OperableTrigger) $r65;

        $r67 = interfaceinvoke $r66.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        staticinvoke <org.quartz.AbstractJobStoreTest: void assertEquals(java.lang.Object,java.lang.Object)>($r64, $r67);

        $r68 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        interfaceinvoke $r68.<org.quartz.spi.JobStore: void releaseAcquiredTrigger(org.quartz.spi.OperableTrigger)>($r7);

        $r69 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        $l17 = l1 + 10000L;

        r149 = interfaceinvoke $r69.<org.quartz.spi.JobStore: java.util.List acquireNextTriggers(long,int,long)>($l17, 4, 205000L);

        $i18 = interfaceinvoke r149.<java.util.List: int size()>();

        staticinvoke <org.quartz.AbstractJobStoreTest: void assertEquals(int,int)>(2, $i18);

        $r70 = interfaceinvoke $r7.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        $r71 = interfaceinvoke r149.<java.util.List: java.lang.Object get(int)>(0);

        $r72 = (org.quartz.spi.OperableTrigger) $r71;

        $r73 = interfaceinvoke $r72.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        staticinvoke <org.quartz.AbstractJobStoreTest: void assertEquals(java.lang.Object,java.lang.Object)>($r70, $r73);

        $r74 = interfaceinvoke $r14.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        $r75 = interfaceinvoke r149.<java.util.List: java.lang.Object get(int)>(1);

        $r76 = (org.quartz.spi.OperableTrigger) $r75;

        $r77 = interfaceinvoke $r76.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        staticinvoke <org.quartz.AbstractJobStoreTest: void assertEquals(java.lang.Object,java.lang.Object)>($r74, $r77);

        $r78 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        interfaceinvoke $r78.<org.quartz.spi.JobStore: void releaseAcquiredTrigger(org.quartz.spi.OperableTrigger)>($r7);

        $r79 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        interfaceinvoke $r79.<org.quartz.spi.JobStore: void releaseAcquiredTrigger(org.quartz.spi.OperableTrigger)>($r14);

        $r80 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        $r81 = interfaceinvoke $r7.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        interfaceinvoke $r80.<org.quartz.spi.JobStore: boolean removeTrigger(org.quartz.TriggerKey)>($r81);

        $r82 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        $l19 = l1 + 10000L;

        r150 = interfaceinvoke $r82.<org.quartz.spi.JobStore: java.util.List acquireNextTriggers(long,int,long)>($l19, 5, 100000L);

        $i20 = interfaceinvoke r150.<java.util.List: int size()>();

        staticinvoke <org.quartz.AbstractJobStoreTest: void assertEquals(int,int)>(4, $i20);

        $r83 = interfaceinvoke $r14.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        $r84 = interfaceinvoke r150.<java.util.List: java.lang.Object get(int)>(0);

        $r85 = (org.quartz.spi.OperableTrigger) $r84;

        $r86 = interfaceinvoke $r85.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        staticinvoke <org.quartz.AbstractJobStoreTest: void assertEquals(java.lang.Object,java.lang.Object)>($r83, $r86);

        $r87 = interfaceinvoke $r21.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        $r88 = interfaceinvoke r150.<java.util.List: java.lang.Object get(int)>(1);

        $r89 = (org.quartz.spi.OperableTrigger) $r88;

        $r90 = interfaceinvoke $r89.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        staticinvoke <org.quartz.AbstractJobStoreTest: void assertEquals(java.lang.Object,java.lang.Object)>($r87, $r90);

        $r91 = interfaceinvoke $r28.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        $r92 = interfaceinvoke r150.<java.util.List: java.lang.Object get(int)>(2);

        $r93 = (org.quartz.spi.OperableTrigger) $r92;

        $r94 = interfaceinvoke $r93.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        staticinvoke <org.quartz.AbstractJobStoreTest: void assertEquals(java.lang.Object,java.lang.Object)>($r91, $r94);

        $r95 = interfaceinvoke $r35.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        $r96 = interfaceinvoke r150.<java.util.List: java.lang.Object get(int)>(3);

        $r97 = (org.quartz.spi.OperableTrigger) $r96;

        $r98 = interfaceinvoke $r97.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        staticinvoke <org.quartz.AbstractJobStoreTest: void assertEquals(java.lang.Object,java.lang.Object)>($r95, $r98);

        $r99 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        interfaceinvoke $r99.<org.quartz.spi.JobStore: void releaseAcquiredTrigger(org.quartz.spi.OperableTrigger)>($r14);

        $r100 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        interfaceinvoke $r100.<org.quartz.spi.JobStore: void releaseAcquiredTrigger(org.quartz.spi.OperableTrigger)>($r21);

        $r101 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        interfaceinvoke $r101.<org.quartz.spi.JobStore: void releaseAcquiredTrigger(org.quartz.spi.OperableTrigger)>($r28);

        $r102 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        interfaceinvoke $r102.<org.quartz.spi.JobStore: void releaseAcquiredTrigger(org.quartz.spi.OperableTrigger)>($r35);

        $r103 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        $l21 = l1 + 10000L;

        r151 = interfaceinvoke $r103.<org.quartz.spi.JobStore: java.util.List acquireNextTriggers(long,int,long)>($l21, 6, 100000L);

        $i22 = interfaceinvoke r151.<java.util.List: int size()>();

        staticinvoke <org.quartz.AbstractJobStoreTest: void assertEquals(int,int)>(4, $i22);

        $r104 = interfaceinvoke $r14.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        $r105 = interfaceinvoke r151.<java.util.List: java.lang.Object get(int)>(0);

        $r106 = (org.quartz.spi.OperableTrigger) $r105;

        $r107 = interfaceinvoke $r106.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        staticinvoke <org.quartz.AbstractJobStoreTest: void assertEquals(java.lang.Object,java.lang.Object)>($r104, $r107);

        $r108 = interfaceinvoke $r21.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        $r109 = interfaceinvoke r151.<java.util.List: java.lang.Object get(int)>(1);

        $r110 = (org.quartz.spi.OperableTrigger) $r109;

        $r111 = interfaceinvoke $r110.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        staticinvoke <org.quartz.AbstractJobStoreTest: void assertEquals(java.lang.Object,java.lang.Object)>($r108, $r111);

        $r112 = interfaceinvoke $r28.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        $r113 = interfaceinvoke r151.<java.util.List: java.lang.Object get(int)>(2);

        $r114 = (org.quartz.spi.OperableTrigger) $r113;

        $r115 = interfaceinvoke $r114.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        staticinvoke <org.quartz.AbstractJobStoreTest: void assertEquals(java.lang.Object,java.lang.Object)>($r112, $r115);

        $r116 = interfaceinvoke $r35.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        $r117 = interfaceinvoke r151.<java.util.List: java.lang.Object get(int)>(3);

        $r118 = (org.quartz.spi.OperableTrigger) $r117;

        $r119 = interfaceinvoke $r118.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        staticinvoke <org.quartz.AbstractJobStoreTest: void assertEquals(java.lang.Object,java.lang.Object)>($r116, $r119);

        $r120 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        interfaceinvoke $r120.<org.quartz.spi.JobStore: void releaseAcquiredTrigger(org.quartz.spi.OperableTrigger)>($r14);

        $r121 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        interfaceinvoke $r121.<org.quartz.spi.JobStore: void releaseAcquiredTrigger(org.quartz.spi.OperableTrigger)>($r21);

        $r122 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        interfaceinvoke $r122.<org.quartz.spi.JobStore: void releaseAcquiredTrigger(org.quartz.spi.OperableTrigger)>($r28);

        $r123 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        interfaceinvoke $r123.<org.quartz.spi.JobStore: void releaseAcquiredTrigger(org.quartz.spi.OperableTrigger)>($r35);

        $r124 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        $l23 = l1 + 1L;

        r152 = interfaceinvoke $r124.<org.quartz.spi.JobStore: java.util.List acquireNextTriggers(long,int,long)>($l23, 5, 0L);

        $i24 = interfaceinvoke r152.<java.util.List: int size()>();

        staticinvoke <org.quartz.AbstractJobStoreTest: void assertEquals(int,int)>(1, $i24);

        $r125 = interfaceinvoke $r14.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        $r126 = interfaceinvoke r152.<java.util.List: java.lang.Object get(int)>(0);

        $r127 = (org.quartz.spi.OperableTrigger) $r126;

        $r128 = interfaceinvoke $r127.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        staticinvoke <org.quartz.AbstractJobStoreTest: void assertEquals(java.lang.Object,java.lang.Object)>($r125, $r128);

        $r129 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        interfaceinvoke $r129.<org.quartz.spi.JobStore: void releaseAcquiredTrigger(org.quartz.spi.OperableTrigger)>($r14);

        $r130 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        $l25 = l1 + 250L;

        r153 = interfaceinvoke $r130.<org.quartz.spi.JobStore: java.util.List acquireNextTriggers(long,int,long)>($l25, 5, 19999L);

        $i26 = interfaceinvoke r153.<java.util.List: int size()>();

        staticinvoke <org.quartz.AbstractJobStoreTest: void assertEquals(int,int)>(2, $i26);

        $r131 = interfaceinvoke $r14.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        $r132 = interfaceinvoke r153.<java.util.List: java.lang.Object get(int)>(0);

        $r133 = (org.quartz.spi.OperableTrigger) $r132;

        $r134 = interfaceinvoke $r133.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        staticinvoke <org.quartz.AbstractJobStoreTest: void assertEquals(java.lang.Object,java.lang.Object)>($r131, $r134);

        $r135 = interfaceinvoke $r21.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        $r136 = interfaceinvoke r153.<java.util.List: java.lang.Object get(int)>(1);

        $r137 = (org.quartz.spi.OperableTrigger) $r136;

        $r138 = interfaceinvoke $r137.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        staticinvoke <org.quartz.AbstractJobStoreTest: void assertEquals(java.lang.Object,java.lang.Object)>($r135, $r138);

        $r139 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        interfaceinvoke $r139.<org.quartz.spi.JobStore: void releaseAcquiredTrigger(org.quartz.spi.OperableTrigger)>($r14);

        $r140 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        interfaceinvoke $r140.<org.quartz.spi.JobStore: void releaseAcquiredTrigger(org.quartz.spi.OperableTrigger)>($r21);

        $r141 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        interfaceinvoke $r141.<org.quartz.spi.JobStore: void releaseAcquiredTrigger(org.quartz.spi.OperableTrigger)>($r28);

        $r142 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        $l27 = l1 + 150L;

        r154 = interfaceinvoke $r142.<org.quartz.spi.JobStore: java.util.List acquireNextTriggers(long,int,long)>($l27, 5, 5000L);

        $i28 = interfaceinvoke r154.<java.util.List: int size()>();

        staticinvoke <org.quartz.AbstractJobStoreTest: void assertEquals(int,int)>(1, $i28);

        $r143 = interfaceinvoke $r14.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        $r144 = interfaceinvoke r154.<java.util.List: java.lang.Object get(int)>(0);

        $r145 = (org.quartz.spi.OperableTrigger) $r144;

        $r146 = interfaceinvoke $r145.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        staticinvoke <org.quartz.AbstractJobStoreTest: void assertEquals(java.lang.Object,java.lang.Object)>($r143, $r146);

        $r147 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        interfaceinvoke $r147.<org.quartz.spi.JobStore: void releaseAcquiredTrigger(org.quartz.spi.OperableTrigger)>($r14);

        return;
    }

    public void testTriggerStates() throws java.lang.Exception
    {
        org.quartz.AbstractJobStoreTest r0;
        org.quartz.impl.triggers.SimpleTriggerImpl $r1;
        org.quartz.impl.JobDetailImpl $r2, $r4;
        java.lang.String $r3, $r5;
        java.util.Date $r6, $r7, $r30, $r32, $r36, $r38, $r41, $r43;
        long $l0, $l1, $l2, $l3, $l4, $l5, $l6, $l7, $l8, $l9, $l10, $l11, $l12;
        org.quartz.Trigger$TriggerState $r9, $r12, $r14, $r17, $r20, $r23, $r26, $r29;
        org.quartz.spi.JobStore $r10, $r13, $r15, $r18, $r21, $r24, $r27, $r31, $r35, $r37, $r42;
        org.quartz.TriggerKey $r11, $r16, $r19, $r22, $r25, $r28;
        java.util.List $r33, $r39, $r44;
        java.lang.Object $r34, $r40;
        boolean $z0;
        org.quartz.spi.OperableTrigger r46, r47;

        r0 := @this: org.quartz.AbstractJobStoreTest;

        $r1 = new org.quartz.impl.triggers.SimpleTriggerImpl;

        $r2 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.impl.JobDetailImpl fJobDetail>;

        $r3 = virtualinvoke $r2.<org.quartz.impl.JobDetailImpl: java.lang.String getName()>();

        $r4 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.impl.JobDetailImpl fJobDetail>;

        $r5 = virtualinvoke $r4.<org.quartz.impl.JobDetailImpl: java.lang.String getGroup()>();

        $r6 = new java.util.Date;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l1 = $l0 + 100000L;

        specialinvoke $r6.<java.util.Date: void <init>(long)>($l1);

        $r7 = new java.util.Date;

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l3 = $l2 + 200000L;

        specialinvoke $r7.<java.util.Date: void <init>(long)>($l3);

        specialinvoke $r1.<org.quartz.impl.triggers.SimpleTriggerImpl: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Date,java.util.Date,int,long)>("trigger1", "triggerGroup1", $r3, $r5, $r6, $r7, 2, 2000L);

        interfaceinvoke $r1.<org.quartz.spi.OperableTrigger: java.util.Date computeFirstFireTime(org.quartz.Calendar)>(null);

        $r9 = <org.quartz.Trigger$TriggerState: org.quartz.Trigger$TriggerState NONE>;

        $r10 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        $r11 = interfaceinvoke $r1.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        $r12 = interfaceinvoke $r10.<org.quartz.spi.JobStore: org.quartz.Trigger$TriggerState getTriggerState(org.quartz.TriggerKey)>($r11);

        staticinvoke <org.quartz.AbstractJobStoreTest: void assertEquals(java.lang.Object,java.lang.Object)>($r9, $r12);

        $r13 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        interfaceinvoke $r13.<org.quartz.spi.JobStore: void storeTrigger(org.quartz.spi.OperableTrigger,boolean)>($r1, 0);

        $r14 = <org.quartz.Trigger$TriggerState: org.quartz.Trigger$TriggerState NORMAL>;

        $r15 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        $r16 = interfaceinvoke $r1.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        $r17 = interfaceinvoke $r15.<org.quartz.spi.JobStore: org.quartz.Trigger$TriggerState getTriggerState(org.quartz.TriggerKey)>($r16);

        staticinvoke <org.quartz.AbstractJobStoreTest: void assertEquals(java.lang.Object,java.lang.Object)>($r14, $r17);

        $r18 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        $r19 = interfaceinvoke $r1.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        interfaceinvoke $r18.<org.quartz.spi.JobStore: void pauseTrigger(org.quartz.TriggerKey)>($r19);

        $r20 = <org.quartz.Trigger$TriggerState: org.quartz.Trigger$TriggerState PAUSED>;

        $r21 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        $r22 = interfaceinvoke $r1.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        $r23 = interfaceinvoke $r21.<org.quartz.spi.JobStore: org.quartz.Trigger$TriggerState getTriggerState(org.quartz.TriggerKey)>($r22);

        staticinvoke <org.quartz.AbstractJobStoreTest: void assertEquals(java.lang.Object,java.lang.Object)>($r20, $r23);

        $r24 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        $r25 = interfaceinvoke $r1.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        interfaceinvoke $r24.<org.quartz.spi.JobStore: void resumeTrigger(org.quartz.TriggerKey)>($r25);

        $r26 = <org.quartz.Trigger$TriggerState: org.quartz.Trigger$TriggerState NORMAL>;

        $r27 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        $r28 = interfaceinvoke $r1.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        $r29 = interfaceinvoke $r27.<org.quartz.spi.JobStore: org.quartz.Trigger$TriggerState getTriggerState(org.quartz.TriggerKey)>($r28);

        staticinvoke <org.quartz.AbstractJobStoreTest: void assertEquals(java.lang.Object,java.lang.Object)>($r26, $r29);

        $r31 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        $r30 = new java.util.Date;

        $r32 = interfaceinvoke $r1.<org.quartz.spi.OperableTrigger: java.util.Date getNextFireTime()>();

        $l4 = virtualinvoke $r32.<java.util.Date: long getTime()>();

        specialinvoke $r30.<java.util.Date: void <init>(long)>($l4);

        $l5 = virtualinvoke $r30.<java.util.Date: long getTime()>();

        $l6 = $l5 + 10000L;

        $r33 = interfaceinvoke $r31.<org.quartz.spi.JobStore: java.util.List acquireNextTriggers(long,int,long)>($l6, 1, 1L);

        $r34 = interfaceinvoke $r33.<java.util.List: java.lang.Object get(int)>(0);

        r46 = (org.quartz.spi.OperableTrigger) $r34;

        staticinvoke <org.quartz.AbstractJobStoreTest: void assertNotNull(java.lang.Object)>(r46);

        $r35 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        interfaceinvoke $r35.<org.quartz.spi.JobStore: void releaseAcquiredTrigger(org.quartz.spi.OperableTrigger)>(r46);

        $r37 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        $r36 = new java.util.Date;

        $r38 = interfaceinvoke r46.<org.quartz.spi.OperableTrigger: java.util.Date getNextFireTime()>();

        $l7 = virtualinvoke $r38.<java.util.Date: long getTime()>();

        specialinvoke $r36.<java.util.Date: void <init>(long)>($l7);

        $l8 = virtualinvoke $r36.<java.util.Date: long getTime()>();

        $l9 = $l8 + 10000L;

        $r39 = interfaceinvoke $r37.<org.quartz.spi.JobStore: java.util.List acquireNextTriggers(long,int,long)>($l9, 1, 1L);

        $r40 = interfaceinvoke $r39.<java.util.List: java.lang.Object get(int)>(0);

        r47 = (org.quartz.spi.OperableTrigger) $r40;

        staticinvoke <org.quartz.AbstractJobStoreTest: void assertNotNull(java.lang.Object)>(r47);

        $r42 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        $r41 = new java.util.Date;

        $r43 = interfaceinvoke r47.<org.quartz.spi.OperableTrigger: java.util.Date getNextFireTime()>();

        $l10 = virtualinvoke $r43.<java.util.Date: long getTime()>();

        specialinvoke $r41.<java.util.Date: void <init>(long)>($l10);

        $l11 = virtualinvoke $r41.<java.util.Date: long getTime()>();

        $l12 = $l11 + 10000L;

        $r44 = interfaceinvoke $r42.<org.quartz.spi.JobStore: java.util.List acquireNextTriggers(long,int,long)>($l12, 1, 1L);

        $z0 = interfaceinvoke $r44.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.quartz.AbstractJobStoreTest: void assertTrue(boolean)>($z0);

        return;
    }

    public void testStoreTriggerReplacesTrigger() throws java.lang.Exception
    {
        org.quartz.AbstractJobStoreTest r0;
        org.quartz.impl.JobDetailImpl $r8;
        org.quartz.spi.JobStore $r9, $r13, $r14, $r17, $r18, $r19, $r22;
        org.quartz.impl.triggers.SimpleTriggerImpl $r10;
        java.util.Date $r11;
        org.quartz.JobKey $r12;
        org.quartz.TriggerKey $r15, $r20, $r23;
        org.quartz.spi.OperableTrigger $r16, $r21, $r24;
        java.lang.String $r25;
        org.quartz.ObjectAlreadyExistsException $r26;

        r0 := @this: org.quartz.AbstractJobStoreTest;

        $r8 = new org.quartz.impl.JobDetailImpl;

        specialinvoke $r8.<org.quartz.impl.JobDetailImpl: void <init>(java.lang.String,java.lang.String,java.lang.Class)>("StoreTriggerReplacesTrigger", "StoreTriggerReplacesTriggerGroup", class "Lorg/quartz/AbstractJobStoreTest$MyJob;");

        $r9 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        interfaceinvoke $r9.<org.quartz.spi.JobStore: void storeJob(org.quartz.JobDetail,boolean)>($r8, 0);

        $r10 = new org.quartz.impl.triggers.SimpleTriggerImpl;

        $r11 = new java.util.Date;

        specialinvoke $r11.<java.util.Date: void <init>()>();

        specialinvoke $r10.<org.quartz.impl.triggers.SimpleTriggerImpl: void <init>(java.lang.String,java.lang.String,java.util.Date)>("StoreTriggerReplacesTrigger", "StoreTriggerReplacesTriggerGroup", $r11);

        $r12 = new org.quartz.JobKey;

        specialinvoke $r12.<org.quartz.JobKey: void <init>(java.lang.String,java.lang.String)>("StoreTriggerReplacesTrigger", "StoreTriggerReplacesTriggerGroup");

        interfaceinvoke $r10.<org.quartz.spi.OperableTrigger: void setJobKey(org.quartz.JobKey)>($r12);

        interfaceinvoke $r10.<org.quartz.spi.OperableTrigger: void setCalendarName(java.lang.String)>(null);

        $r13 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        interfaceinvoke $r13.<org.quartz.spi.JobStore: void storeTrigger(org.quartz.spi.OperableTrigger,boolean)>($r10, 0);

        $r14 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        $r15 = interfaceinvoke $r10.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        $r16 = interfaceinvoke $r14.<org.quartz.spi.JobStore: org.quartz.spi.OperableTrigger retrieveTrigger(org.quartz.TriggerKey)>($r15);

        staticinvoke <org.quartz.AbstractJobStoreTest: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r16);

     label1:
        $r17 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        interfaceinvoke $r17.<org.quartz.spi.JobStore: void storeTrigger(org.quartz.spi.OperableTrigger,boolean)>($r10, 0);

        staticinvoke <org.quartz.AbstractJobStoreTest: void fail(java.lang.String)>("an attempt to store duplicate trigger succeeded");

     label2:
        goto label4;

     label3:
        $r26 := @caughtexception;

     label4:
        interfaceinvoke $r10.<org.quartz.spi.OperableTrigger: void setCalendarName(java.lang.String)>("QQ");

        $r18 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        interfaceinvoke $r18.<org.quartz.spi.JobStore: void storeTrigger(org.quartz.spi.OperableTrigger,boolean)>($r10, 1);

        $r19 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        $r20 = interfaceinvoke $r10.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        $r21 = interfaceinvoke $r19.<org.quartz.spi.JobStore: org.quartz.spi.OperableTrigger retrieveTrigger(org.quartz.TriggerKey)>($r20);

        staticinvoke <org.quartz.AbstractJobStoreTest: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r21);

        $r22 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        $r23 = interfaceinvoke $r10.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        $r24 = interfaceinvoke $r22.<org.quartz.spi.JobStore: org.quartz.spi.OperableTrigger retrieveTrigger(org.quartz.TriggerKey)>($r23);

        $r25 = interfaceinvoke $r24.<org.quartz.spi.OperableTrigger: java.lang.String getCalendarName()>();

        staticinvoke <org.quartz.AbstractJobStoreTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("StoreJob doesn\'t replace triggers", "QQ", $r25);

        return;

        catch org.quartz.ObjectAlreadyExistsException from label1 to label2 with label3;
    }

    public void testPauseJobGroupPausesNewJob() throws java.lang.Exception
    {
        org.quartz.AbstractJobStoreTest r0;
        org.quartz.spi.JobStore $r7, $r9, $r10, $r14, $r18, $r20;
        boolean $z0;
        org.quartz.impl.JobDetailImpl $r8, $r13;
        org.quartz.impl.matchers.GroupMatcher $r11;
        org.quartz.impl.triggers.SimpleTriggerImpl $r15;
        java.util.Date $r16;
        org.quartz.JobKey $r17;
        org.quartz.Trigger$TriggerState $r19, $r22;
        org.quartz.TriggerKey $r21;

        r0 := @this: org.quartz.AbstractJobStoreTest;

        $r7 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        $z0 = $r7 instanceof org.quartz.impl.jdbcjobstore.JobStoreSupport;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r8 = new org.quartz.impl.JobDetailImpl;

        specialinvoke $r8.<org.quartz.impl.JobDetailImpl: void <init>(java.lang.String,java.lang.String,java.lang.Class)>("PauseJobGroupPausesNewJob", "PauseJobGroupPausesNewJobGroup", class "Lorg/quartz/AbstractJobStoreTest$MyJob;");

        virtualinvoke $r8.<org.quartz.impl.JobDetailImpl: void setDurability(boolean)>(1);

        $r9 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        interfaceinvoke $r9.<org.quartz.spi.JobStore: void storeJob(org.quartz.JobDetail,boolean)>($r8, 0);

        $r10 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        $r11 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher jobGroupEquals(java.lang.String)>("PauseJobGroupPausesNewJobGroup");

        interfaceinvoke $r10.<org.quartz.spi.JobStore: java.util.Collection pauseJobs(org.quartz.impl.matchers.GroupMatcher)>($r11);

        $r13 = new org.quartz.impl.JobDetailImpl;

        specialinvoke $r13.<org.quartz.impl.JobDetailImpl: void <init>(java.lang.String,java.lang.String,java.lang.Class)>("PauseJobGroupPausesNewJob2", "PauseJobGroupPausesNewJobGroup", class "Lorg/quartz/AbstractJobStoreTest$MyJob;");

        virtualinvoke $r13.<org.quartz.impl.JobDetailImpl: void setDurability(boolean)>(1);

        $r14 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        interfaceinvoke $r14.<org.quartz.spi.JobStore: void storeJob(org.quartz.JobDetail,boolean)>($r13, 0);

        $r15 = new org.quartz.impl.triggers.SimpleTriggerImpl;

        $r16 = new java.util.Date;

        specialinvoke $r16.<java.util.Date: void <init>()>();

        specialinvoke $r15.<org.quartz.impl.triggers.SimpleTriggerImpl: void <init>(java.lang.String,java.lang.String,java.util.Date)>("PauseJobGroupPausesNewJobTrigger", "PauseJobGroupPausesNewJobTriggerGroup", $r16);

        $r17 = new org.quartz.JobKey;

        specialinvoke $r17.<org.quartz.JobKey: void <init>(java.lang.String,java.lang.String)>("PauseJobGroupPausesNewJob2", "PauseJobGroupPausesNewJobGroup");

        interfaceinvoke $r15.<org.quartz.spi.OperableTrigger: void setJobKey(org.quartz.JobKey)>($r17);

        $r18 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        interfaceinvoke $r18.<org.quartz.spi.JobStore: void storeTrigger(org.quartz.spi.OperableTrigger,boolean)>($r15, 0);

        $r19 = <org.quartz.Trigger$TriggerState: org.quartz.Trigger$TriggerState PAUSED>;

        $r20 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        $r21 = interfaceinvoke $r15.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        $r22 = interfaceinvoke $r20.<org.quartz.spi.JobStore: org.quartz.Trigger$TriggerState getTriggerState(org.quartz.TriggerKey)>($r21);

        staticinvoke <org.quartz.AbstractJobStoreTest: void assertEquals(java.lang.Object,java.lang.Object)>($r19, $r22);

        return;
    }

    public void testStoreAndRetrieveJobs() throws java.lang.Exception
    {
        org.quartz.AbstractJobStoreTest r0;
        org.quartz.spi.JobStore r3;
        org.quartz.JobDetail r4, r24;
        org.quartz.AbstractJobStoreTest$SampleSignaler $r5;
        org.quartz.simpl.CascadingClassLoadHelper $r6;
        org.quartz.impl.matchers.GroupMatcher $r7, $r9;
        java.util.Set $r8, $r10;
        int $i0, $i1, i2, i3;
        java.lang.StringBuilder $r11, $r12, $r13, $r17, $r18, $r19;
        java.lang.String $r14, $r20, $r22, $r25;
        org.quartz.JobKey $r15, r27;
        org.quartz.JobBuilder $r16, $r21;

        r0 := @this: org.quartz.AbstractJobStoreTest;

        $r5 = new org.quartz.AbstractJobStoreTest$SampleSignaler;

        specialinvoke $r5.<org.quartz.AbstractJobStoreTest$SampleSignaler: void <init>()>();

        $r6 = new org.quartz.simpl.CascadingClassLoadHelper;

        specialinvoke $r6.<org.quartz.simpl.CascadingClassLoadHelper: void <init>()>();

        interfaceinvoke $r6.<org.quartz.spi.ClassLoadHelper: void initialize()>();

        r3 = virtualinvoke r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore createJobStore(java.lang.String)>("testStoreAndRetrieveJobs");

        interfaceinvoke r3.<org.quartz.spi.JobStore: void initialize(org.quartz.spi.ClassLoadHelper,org.quartz.spi.SchedulerSignaler)>($r6, $r5);

        i2 = 0;

     label1:
        if i2 >= 10 goto label4;

        if i2 >= 5 goto label2;

        $r22 = "a";

        goto label3;

     label2:
        $r22 = "b";

     label3:
        $r16 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob(java.lang.Class)>(class "Lorg/quartz/AbstractJobStoreTest$MyJob;");

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("job");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $r21 = virtualinvoke $r16.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String,java.lang.String)>($r20, $r22);

        r24 = virtualinvoke $r21.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        interfaceinvoke r3.<org.quartz.spi.JobStore: void storeJob(org.quartz.JobDetail,boolean)>(r24, 0);

        i2 = i2 + 1;

        goto label1;

     label4:
        i3 = 0;

     label5:
        if i3 >= 10 goto label8;

        if i3 >= 5 goto label6;

        $r25 = "a";

        goto label7;

     label6:
        $r25 = "b";

     label7:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("job");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        r27 = staticinvoke <org.quartz.JobKey: org.quartz.JobKey jobKey(java.lang.String,java.lang.String)>($r14, $r25);

        r4 = interfaceinvoke r3.<org.quartz.spi.JobStore: org.quartz.JobDetail retrieveJob(org.quartz.JobKey)>(r27);

        $r15 = interfaceinvoke r4.<org.quartz.JobDetail: org.quartz.JobKey getKey()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r27, $r15);

        i3 = i3 + 1;

        goto label5;

     label8:
        $r7 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher jobGroupEquals(java.lang.String)>("a");

        $r8 = interfaceinvoke r3.<org.quartz.spi.JobStore: java.util.Set getJobKeys(org.quartz.impl.matchers.GroupMatcher)>($r7);

        $i0 = interfaceinvoke $r8.<java.util.Set: int size()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>("Wrong number of jobs in group \'a\'", $i0, 5);

        $r9 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher jobGroupEquals(java.lang.String)>("b");

        $r10 = interfaceinvoke r3.<org.quartz.spi.JobStore: java.util.Set getJobKeys(org.quartz.impl.matchers.GroupMatcher)>($r9);

        $i1 = interfaceinvoke $r10.<java.util.Set: int size()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>("Wrong number of jobs in group \'b\'", $i1, 5);

        return;
    }

    public void testStoreAndRetriveTriggers() throws java.lang.Exception
    {
        org.quartz.AbstractJobStoreTest r0;
        org.quartz.spi.JobStore r3;
        org.quartz.spi.OperableTrigger r4, $r35;
        org.quartz.AbstractJobStoreTest$SampleSignaler $r5;
        org.quartz.simpl.CascadingClassLoadHelper $r6;
        org.quartz.impl.matchers.GroupMatcher $r7, $r9;
        java.util.Set $r8, $r10;
        int $i0, $i1, i2, i3;
        java.lang.StringBuilder $r11, $r12, $r13, $r16, $r17, $r18, $r22, $r23, $r24, $r28, $r29, $r30;
        java.lang.String $r14, $r19, $r25, $r31, $r36, $r41;
        org.quartz.JobKey $r15, r43;
        org.quartz.TriggerKey $r20, r45;
        org.quartz.JobBuilder $r21, $r26;
        org.quartz.TriggerBuilder $r27, $r32, $r33, $r34;
        org.quartz.JobDetail r38, r44;
        org.quartz.SimpleScheduleBuilder r39;
        org.quartz.Trigger r40;

        r0 := @this: org.quartz.AbstractJobStoreTest;

        $r5 = new org.quartz.AbstractJobStoreTest$SampleSignaler;

        specialinvoke $r5.<org.quartz.AbstractJobStoreTest$SampleSignaler: void <init>()>();

        $r6 = new org.quartz.simpl.CascadingClassLoadHelper;

        specialinvoke $r6.<org.quartz.simpl.CascadingClassLoadHelper: void <init>()>();

        interfaceinvoke $r6.<org.quartz.spi.ClassLoadHelper: void initialize()>();

        r3 = virtualinvoke r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore createJobStore(java.lang.String)>("testStoreAndRetriveTriggers");

        interfaceinvoke r3.<org.quartz.spi.JobStore: void initialize(org.quartz.spi.ClassLoadHelper,org.quartz.spi.SchedulerSignaler)>($r6, $r5);

        i2 = 0;

     label1:
        if i2 >= 10 goto label4;

        if i2 >= 5 goto label2;

        $r36 = "a";

        goto label3;

     label2:
        $r36 = "b";

     label3:
        $r21 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob(java.lang.Class)>(class "Lorg/quartz/AbstractJobStoreTest$MyJob;");

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("job");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        $r26 = virtualinvoke $r21.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String,java.lang.String)>($r25, $r36);

        r38 = virtualinvoke $r26.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        interfaceinvoke r3.<org.quartz.spi.JobStore: void storeJob(org.quartz.JobDetail,boolean)>(r38, 1);

        r39 = staticinvoke <org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder simpleSchedule()>();

        $r27 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("job");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        $r32 = virtualinvoke $r27.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String,java.lang.String)>($r31, $r36);

        $r33 = virtualinvoke $r32.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>(r39);

        $r34 = virtualinvoke $r33.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder forJob(org.quartz.JobDetail)>(r38);

        r40 = virtualinvoke $r34.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        $r35 = (org.quartz.spi.OperableTrigger) r40;

        interfaceinvoke r3.<org.quartz.spi.JobStore: void storeTrigger(org.quartz.spi.OperableTrigger,boolean)>($r35, 1);

        i2 = i2 + 1;

        goto label1;

     label4:
        i3 = 0;

     label5:
        if i3 >= 10 goto label8;

        if i3 >= 5 goto label6;

        $r41 = "a";

        goto label7;

     label6:
        $r41 = "b";

     label7:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("job");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        r43 = staticinvoke <org.quartz.JobKey: org.quartz.JobKey jobKey(java.lang.String,java.lang.String)>($r14, $r41);

        r44 = interfaceinvoke r3.<org.quartz.spi.JobStore: org.quartz.JobDetail retrieveJob(org.quartz.JobKey)>(r43);

        $r15 = interfaceinvoke r44.<org.quartz.JobDetail: org.quartz.JobKey getKey()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r43, $r15);

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("job");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        r45 = staticinvoke <org.quartz.TriggerKey: org.quartz.TriggerKey triggerKey(java.lang.String,java.lang.String)>($r19, $r41);

        r4 = interfaceinvoke r3.<org.quartz.spi.JobStore: org.quartz.spi.OperableTrigger retrieveTrigger(org.quartz.TriggerKey)>(r45);

        $r20 = interfaceinvoke r4.<org.quartz.Trigger: org.quartz.TriggerKey getKey()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r45, $r20);

        i3 = i3 + 1;

        goto label5;

     label8:
        $r7 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher triggerGroupEquals(java.lang.String)>("a");

        $r8 = interfaceinvoke r3.<org.quartz.spi.JobStore: java.util.Set getTriggerKeys(org.quartz.impl.matchers.GroupMatcher)>($r7);

        $i0 = interfaceinvoke $r8.<java.util.Set: int size()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>("Wrong number of triggers in group \'a\'", $i0, 5);

        $r9 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher triggerGroupEquals(java.lang.String)>("b");

        $r10 = interfaceinvoke r3.<org.quartz.spi.JobStore: java.util.Set getTriggerKeys(org.quartz.impl.matchers.GroupMatcher)>($r9);

        $i1 = interfaceinvoke $r10.<java.util.Set: int size()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>("Wrong number of triggers in group \'b\'", $i1, 5);

        return;
    }

    public void testMatchers() throws java.lang.Exception
    {
        org.quartz.AbstractJobStoreTest r0;
        org.quartz.spi.JobStore r3;
        org.quartz.AbstractJobStoreTest$SampleSignaler $r4;
        org.quartz.simpl.CascadingClassLoadHelper $r5;
        org.quartz.JobBuilder $r6, $r7, $r13, $r14, $r20, $r21;
        org.quartz.TriggerBuilder $r8, $r9, $r10, $r11, $r15, $r16, $r17, $r18, $r22, $r23, $r24, $r25;
        org.quartz.spi.OperableTrigger $r12, $r19, $r26;
        org.quartz.impl.matchers.GroupMatcher $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        org.quartz.JobDetail r45, r48, r51;
        org.quartz.SimpleScheduleBuilder r46, r49, r52;
        org.quartz.Trigger r47, r50, r53;
        java.util.Set r54, r55, r56, r57, r58, r59, r60, r61, r62, r63, r64, r65, r66, r67, r68, r69, r70, r71;

        r0 := @this: org.quartz.AbstractJobStoreTest;

        $r4 = new org.quartz.AbstractJobStoreTest$SampleSignaler;

        specialinvoke $r4.<org.quartz.AbstractJobStoreTest$SampleSignaler: void <init>()>();

        $r5 = new org.quartz.simpl.CascadingClassLoadHelper;

        specialinvoke $r5.<org.quartz.simpl.CascadingClassLoadHelper: void <init>()>();

        interfaceinvoke $r5.<org.quartz.spi.ClassLoadHelper: void initialize()>();

        r3 = virtualinvoke r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore createJobStore(java.lang.String)>("testMatchers");

        interfaceinvoke r3.<org.quartz.spi.JobStore: void initialize(org.quartz.spi.ClassLoadHelper,org.quartz.spi.SchedulerSignaler)>($r5, $r4);

        $r6 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob(java.lang.Class)>(class "Lorg/quartz/AbstractJobStoreTest$MyJob;");

        $r7 = virtualinvoke $r6.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String,java.lang.String)>("job1", "aaabbbccc");

        r45 = virtualinvoke $r7.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        interfaceinvoke r3.<org.quartz.spi.JobStore: void storeJob(org.quartz.JobDetail,boolean)>(r45, 1);

        r46 = staticinvoke <org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder simpleSchedule()>();

        $r8 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r9 = virtualinvoke $r8.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String,java.lang.String)>("trig1", "aaabbbccc");

        $r10 = virtualinvoke $r9.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>(r46);

        $r11 = virtualinvoke $r10.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder forJob(org.quartz.JobDetail)>(r45);

        r47 = virtualinvoke $r11.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        $r12 = (org.quartz.spi.OperableTrigger) r47;

        interfaceinvoke r3.<org.quartz.spi.JobStore: void storeTrigger(org.quartz.spi.OperableTrigger,boolean)>($r12, 1);

        $r13 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob(java.lang.Class)>(class "Lorg/quartz/AbstractJobStoreTest$MyJob;");

        $r14 = virtualinvoke $r13.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String,java.lang.String)>("job1", "xxxyyyzzz");

        r48 = virtualinvoke $r14.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        interfaceinvoke r3.<org.quartz.spi.JobStore: void storeJob(org.quartz.JobDetail,boolean)>(r48, 1);

        r49 = staticinvoke <org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder simpleSchedule()>();

        $r15 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r16 = virtualinvoke $r15.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String,java.lang.String)>("trig1", "xxxyyyzzz");

        $r17 = virtualinvoke $r16.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>(r49);

        $r18 = virtualinvoke $r17.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder forJob(org.quartz.JobDetail)>(r48);

        r50 = virtualinvoke $r18.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        $r19 = (org.quartz.spi.OperableTrigger) r50;

        interfaceinvoke r3.<org.quartz.spi.JobStore: void storeTrigger(org.quartz.spi.OperableTrigger,boolean)>($r19, 1);

        $r20 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob(java.lang.Class)>(class "Lorg/quartz/AbstractJobStoreTest$MyJob;");

        $r21 = virtualinvoke $r20.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String,java.lang.String)>("job2", "xxxyyyzzz");

        r51 = virtualinvoke $r21.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        interfaceinvoke r3.<org.quartz.spi.JobStore: void storeJob(org.quartz.JobDetail,boolean)>(r51, 1);

        r52 = staticinvoke <org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder simpleSchedule()>();

        $r22 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r23 = virtualinvoke $r22.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String,java.lang.String)>("trig2", "xxxyyyzzz");

        $r24 = virtualinvoke $r23.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>(r52);

        $r25 = virtualinvoke $r24.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder forJob(org.quartz.JobDetail)>(r51);

        r53 = virtualinvoke $r25.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        $r26 = (org.quartz.spi.OperableTrigger) r53;

        interfaceinvoke r3.<org.quartz.spi.JobStore: void storeTrigger(org.quartz.spi.OperableTrigger,boolean)>($r26, 1);

        $r27 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher anyJobGroup()>();

        r54 = interfaceinvoke r3.<org.quartz.spi.JobStore: java.util.Set getJobKeys(org.quartz.impl.matchers.GroupMatcher)>($r27);

        $i0 = interfaceinvoke r54.<java.util.Set: int size()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>("Wrong number of jobs found by anything matcher", 3, $i0);

        $r28 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher jobGroupEquals(java.lang.String)>("xxxyyyzzz");

        r55 = interfaceinvoke r3.<org.quartz.spi.JobStore: java.util.Set getJobKeys(org.quartz.impl.matchers.GroupMatcher)>($r28);

        $i1 = interfaceinvoke r55.<java.util.Set: int size()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>("Wrong number of jobs found by equals matcher", 2, $i1);

        $r29 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher jobGroupEquals(java.lang.String)>("aaabbbccc");

        r56 = interfaceinvoke r3.<org.quartz.spi.JobStore: java.util.Set getJobKeys(org.quartz.impl.matchers.GroupMatcher)>($r29);

        $i2 = interfaceinvoke r56.<java.util.Set: int size()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>("Wrong number of jobs found by equals matcher", 1, $i2);

        $r30 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher jobGroupStartsWith(java.lang.String)>("aa");

        r57 = interfaceinvoke r3.<org.quartz.spi.JobStore: java.util.Set getJobKeys(org.quartz.impl.matchers.GroupMatcher)>($r30);

        $i3 = interfaceinvoke r57.<java.util.Set: int size()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>("Wrong number of jobs found by starts with matcher", 1, $i3);

        $r31 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher jobGroupStartsWith(java.lang.String)>("xx");

        r58 = interfaceinvoke r3.<org.quartz.spi.JobStore: java.util.Set getJobKeys(org.quartz.impl.matchers.GroupMatcher)>($r31);

        $i4 = interfaceinvoke r58.<java.util.Set: int size()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>("Wrong number of jobs found by starts with matcher", 2, $i4);

        $r32 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher jobGroupEndsWith(java.lang.String)>("cc");

        r59 = interfaceinvoke r3.<org.quartz.spi.JobStore: java.util.Set getJobKeys(org.quartz.impl.matchers.GroupMatcher)>($r32);

        $i5 = interfaceinvoke r59.<java.util.Set: int size()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>("Wrong number of jobs found by ends with matcher", 1, $i5);

        $r33 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher jobGroupEndsWith(java.lang.String)>("zzz");

        r60 = interfaceinvoke r3.<org.quartz.spi.JobStore: java.util.Set getJobKeys(org.quartz.impl.matchers.GroupMatcher)>($r33);

        $i6 = interfaceinvoke r60.<java.util.Set: int size()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>("Wrong number of jobs found by ends with matcher", 2, $i6);

        $r34 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher jobGroupContains(java.lang.String)>("bc");

        r61 = interfaceinvoke r3.<org.quartz.spi.JobStore: java.util.Set getJobKeys(org.quartz.impl.matchers.GroupMatcher)>($r34);

        $i7 = interfaceinvoke r61.<java.util.Set: int size()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>("Wrong number of jobs found by contains with matcher", 1, $i7);

        $r35 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher jobGroupContains(java.lang.String)>("yz");

        r62 = interfaceinvoke r3.<org.quartz.spi.JobStore: java.util.Set getJobKeys(org.quartz.impl.matchers.GroupMatcher)>($r35);

        $i8 = interfaceinvoke r62.<java.util.Set: int size()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>("Wrong number of jobs found by contains with matcher", 2, $i8);

        $r36 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher anyTriggerGroup()>();

        r63 = interfaceinvoke r3.<org.quartz.spi.JobStore: java.util.Set getTriggerKeys(org.quartz.impl.matchers.GroupMatcher)>($r36);

        $i9 = interfaceinvoke r63.<java.util.Set: int size()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>("Wrong number of triggers found by anything matcher", 3, $i9);

        $r37 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher triggerGroupEquals(java.lang.String)>("xxxyyyzzz");

        r64 = interfaceinvoke r3.<org.quartz.spi.JobStore: java.util.Set getTriggerKeys(org.quartz.impl.matchers.GroupMatcher)>($r37);

        $i10 = interfaceinvoke r64.<java.util.Set: int size()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>("Wrong number of triggers found by equals matcher", 2, $i10);

        $r38 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher triggerGroupEquals(java.lang.String)>("aaabbbccc");

        r65 = interfaceinvoke r3.<org.quartz.spi.JobStore: java.util.Set getTriggerKeys(org.quartz.impl.matchers.GroupMatcher)>($r38);

        $i11 = interfaceinvoke r65.<java.util.Set: int size()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>("Wrong number of triggers found by equals matcher", 1, $i11);

        $r39 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher triggerGroupStartsWith(java.lang.String)>("aa");

        r66 = interfaceinvoke r3.<org.quartz.spi.JobStore: java.util.Set getTriggerKeys(org.quartz.impl.matchers.GroupMatcher)>($r39);

        $i12 = interfaceinvoke r66.<java.util.Set: int size()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>("Wrong number of triggers found by starts with matcher", 1, $i12);

        $r40 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher triggerGroupStartsWith(java.lang.String)>("xx");

        r67 = interfaceinvoke r3.<org.quartz.spi.JobStore: java.util.Set getTriggerKeys(org.quartz.impl.matchers.GroupMatcher)>($r40);

        $i13 = interfaceinvoke r67.<java.util.Set: int size()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>("Wrong number of triggers found by starts with matcher", 2, $i13);

        $r41 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher triggerGroupEndsWith(java.lang.String)>("cc");

        r68 = interfaceinvoke r3.<org.quartz.spi.JobStore: java.util.Set getTriggerKeys(org.quartz.impl.matchers.GroupMatcher)>($r41);

        $i14 = interfaceinvoke r68.<java.util.Set: int size()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>("Wrong number of triggers found by ends with matcher", 1, $i14);

        $r42 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher triggerGroupEndsWith(java.lang.String)>("zzz");

        r69 = interfaceinvoke r3.<org.quartz.spi.JobStore: java.util.Set getTriggerKeys(org.quartz.impl.matchers.GroupMatcher)>($r42);

        $i15 = interfaceinvoke r69.<java.util.Set: int size()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>("Wrong number of triggers found by ends with matcher", 2, $i15);

        $r43 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher triggerGroupContains(java.lang.String)>("bc");

        r70 = interfaceinvoke r3.<org.quartz.spi.JobStore: java.util.Set getTriggerKeys(org.quartz.impl.matchers.GroupMatcher)>($r43);

        $i16 = interfaceinvoke r70.<java.util.Set: int size()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>("Wrong number of triggers found by contains with matcher", 1, $i16);

        $r44 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher triggerGroupContains(java.lang.String)>("yz");

        r71 = interfaceinvoke r3.<org.quartz.spi.JobStore: java.util.Set getTriggerKeys(org.quartz.impl.matchers.GroupMatcher)>($r44);

        $i17 = interfaceinvoke r71.<java.util.Set: int size()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>("Wrong number of triggers found by contains with matcher", 2, $i17);

        return;
    }

    public void testAcquireTriggers() throws java.lang.Exception
    {
        org.quartz.AbstractJobStoreTest r0;
        org.quartz.spi.JobStore r3;
        org.quartz.JobDetail r5;
        java.util.Date r6, $r10, $r22;
        java.util.List r7;
        org.quartz.AbstractJobStoreTest$SampleSignaler $r8;
        org.quartz.simpl.CascadingClassLoadHelper $r9;
        long $l1, $l2, $l3, $l4, $l5, $l7, $l8, $l9, $l10, l13;
        int $i6, i11, i12;
        java.lang.StringBuilder $r11, $r12, $r13, $r24, $r25, $r26, $r30, $r31, $r32;
        java.lang.String $r14, $r18, $r27, $r33;
        java.lang.Object $r15, $r19;
        org.quartz.spi.OperableTrigger $r16, $r20, r41;
        org.quartz.TriggerKey $r17;
        org.quartz.JobKey $r21;
        org.quartz.JobBuilder $r23, $r28;
        org.quartz.TriggerBuilder $r29, $r34, $r35, $r36, $r37;
        org.quartz.Trigger $r38;
        org.quartz.SimpleScheduleBuilder r40;
        boolean $z2;

        r0 := @this: org.quartz.AbstractJobStoreTest;

        $r8 = new org.quartz.AbstractJobStoreTest$SampleSignaler;

        specialinvoke $r8.<org.quartz.AbstractJobStoreTest$SampleSignaler: void <init>()>();

        $r9 = new org.quartz.simpl.CascadingClassLoadHelper;

        specialinvoke $r9.<org.quartz.simpl.CascadingClassLoadHelper: void <init>()>();

        interfaceinvoke $r9.<org.quartz.spi.ClassLoadHelper: void initialize()>();

        r3 = virtualinvoke r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore createJobStore(java.lang.String)>("testAcquireTriggers");

        interfaceinvoke r3.<org.quartz.spi.JobStore: void initialize(org.quartz.spi.ClassLoadHelper,org.quartz.spi.SchedulerSignaler)>($r9, $r8);

        $r10 = new java.util.Date;

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l2 = $l1 + 60000L;

        specialinvoke $r10.<java.util.Date: void <init>(long)>($l2);

        i11 = 0;

     label1:
        if i11 >= 10 goto label4;

        $r22 = new java.util.Date;

        $l7 = virtualinvoke $r10.<java.util.Date: long getTime()>();

        $l8 = (long) i11;

        $l9 = $l8 * 60000L;

        $l10 = $l7 + $l9;

        specialinvoke $r22.<java.util.Date: void <init>(long)>($l10);

        $r23 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob(java.lang.Class)>(class "Lorg/quartz/AbstractJobStoreTest$MyJob;");

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("job");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        $r28 = virtualinvoke $r23.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String)>($r27);

        r5 = virtualinvoke $r28.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        r40 = staticinvoke <org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder repeatMinutelyForever(int)>(2);

        $r29 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("job");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        $r34 = virtualinvoke $r29.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>(r40);

        $r36 = virtualinvoke $r35.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder forJob(org.quartz.JobDetail)>(r5);

        $r37 = virtualinvoke $r36.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder startAt(java.util.Date)>($r22);

        $r38 = virtualinvoke $r37.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        r41 = (org.quartz.spi.OperableTrigger) $r38;

        r6 = interfaceinvoke r41.<org.quartz.spi.OperableTrigger: java.util.Date computeFirstFireTime(org.quartz.Calendar)>(null);

        if r6 == null goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        staticinvoke <junit.framework.Assert: void assertEquals(boolean,boolean)>(1, $z2);

        interfaceinvoke r3.<org.quartz.spi.JobStore: void storeJobAndTrigger(org.quartz.JobDetail,org.quartz.spi.OperableTrigger)>(r5, r41);

        i11 = i11 + 1;

        goto label1;

     label4:
        i12 = 0;

     label5:
        if i12 >= 10 goto label6;

        $l3 = virtualinvoke $r10.<java.util.Date: long getTime()>();

        $l4 = (long) i12;

        $l5 = $l4 * 60000L;

        l13 = $l3 + $l5;

        r7 = interfaceinvoke r3.<org.quartz.spi.JobStore: java.util.List acquireNextTriggers(long,int,long)>(l13, 1, 0L);

        $i6 = interfaceinvoke r7.<java.util.List: int size()>();

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(1, $i6);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("job");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = interfaceinvoke r7.<java.util.List: java.lang.Object get(int)>(0);

        $r16 = (org.quartz.spi.OperableTrigger) $r15;

        $r17 = interfaceinvoke $r16.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        $r18 = virtualinvoke $r17.<org.quartz.TriggerKey: java.lang.String getName()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.String)>($r14, $r18);

        $r19 = interfaceinvoke r7.<java.util.List: java.lang.Object get(int)>(0);

        $r20 = (org.quartz.spi.OperableTrigger) $r19;

        $r21 = interfaceinvoke $r20.<org.quartz.spi.OperableTrigger: org.quartz.JobKey getJobKey()>();

        interfaceinvoke r3.<org.quartz.spi.JobStore: boolean removeJob(org.quartz.JobKey)>($r21);

        i12 = i12 + 1;

        goto label5;

     label6:
        return;
    }

    public void testAcquireTriggersInBatch() throws java.lang.Exception
    {
        org.quartz.AbstractJobStoreTest r0;
        org.quartz.spi.JobStore r3;
        org.quartz.spi.OperableTrigger r6, $r15;
        org.quartz.AbstractJobStoreTest$SampleSignaler $r7;
        org.quartz.simpl.CascadingClassLoadHelper $r8;
        java.util.Date $r9, $r18, r37;
        long $l1, $l2, $l3, $l4, $l6, $l7, $l8, $l9, l11, l13;
        int $i5, i10, i14;
        java.lang.StringBuilder $r10, $r11, $r12, $r20, $r21, $r22, $r26, $r27, $r28;
        java.lang.String $r13, $r17, $r23, $r29;
        java.lang.Object $r14;
        org.quartz.TriggerKey $r16;
        org.quartz.JobBuilder $r19, $r24;
        org.quartz.TriggerBuilder $r25, $r30, $r31, $r32, $r33;
        org.quartz.Trigger $r34;
        org.quartz.JobDetail r35;
        org.quartz.SimpleScheduleBuilder r36;
        boolean $z1;
        java.util.List r38;

        r0 := @this: org.quartz.AbstractJobStoreTest;

        $r7 = new org.quartz.AbstractJobStoreTest$SampleSignaler;

        specialinvoke $r7.<org.quartz.AbstractJobStoreTest$SampleSignaler: void <init>()>();

        $r8 = new org.quartz.simpl.CascadingClassLoadHelper;

        specialinvoke $r8.<org.quartz.simpl.CascadingClassLoadHelper: void <init>()>();

        interfaceinvoke $r8.<org.quartz.spi.ClassLoadHelper: void initialize()>();

        r3 = virtualinvoke r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore createJobStore(java.lang.String)>("testAcquireTriggersInBatch");

        interfaceinvoke r3.<org.quartz.spi.JobStore: void initialize(org.quartz.spi.ClassLoadHelper,org.quartz.spi.SchedulerSignaler)>($r8, $r7);

        $r9 = new java.util.Date;

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l2 = $l1 + 60000L;

        specialinvoke $r9.<java.util.Date: void <init>(long)>($l2);

        i10 = 0;

     label1:
        if i10 >= 10 goto label4;

        $r18 = new java.util.Date;

        $l6 = virtualinvoke $r9.<java.util.Date: long getTime()>();

        $l7 = (long) i10;

        $l8 = $l7 * 60000L;

        $l9 = $l6 + $l8;

        specialinvoke $r18.<java.util.Date: void <init>(long)>($l9);

        $r19 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob(java.lang.Class)>(class "Lorg/quartz/AbstractJobStoreTest$MyJob;");

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("job");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        $r24 = virtualinvoke $r19.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String)>($r23);

        r35 = virtualinvoke $r24.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        r36 = staticinvoke <org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder repeatMinutelyForever(int)>(2);

        $r25 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("job");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        $r30 = virtualinvoke $r25.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>(r36);

        $r32 = virtualinvoke $r31.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder forJob(org.quartz.JobDetail)>(r35);

        $r33 = virtualinvoke $r32.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder startAt(java.util.Date)>($r18);

        $r34 = virtualinvoke $r33.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        r6 = (org.quartz.spi.OperableTrigger) $r34;

        r37 = interfaceinvoke r6.<org.quartz.spi.OperableTrigger: java.util.Date computeFirstFireTime(org.quartz.Calendar)>(null);

        if r37 == null goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        staticinvoke <junit.framework.Assert: void assertEquals(boolean,boolean)>(1, $z1);

        interfaceinvoke r3.<org.quartz.spi.JobStore: void storeJobAndTrigger(org.quartz.JobDetail,org.quartz.spi.OperableTrigger)>(r35, r6);

        i10 = i10 + 1;

        goto label1;

     label4:
        $l3 = virtualinvoke $r9.<java.util.Date: long getTime()>();

        $l4 = 10L * 60000L;

        l11 = $l3 + $l4;

        l13 = 8L * 60000L;

        r38 = interfaceinvoke r3.<org.quartz.spi.JobStore: java.util.List acquireNextTriggers(long,int,long)>(l11, 7, l13);

        $i5 = interfaceinvoke r38.<java.util.List: int size()>();

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(7, $i5);

        i14 = 0;

     label5:
        if i14 >= 7 goto label6;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("job");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i14);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = interfaceinvoke r38.<java.util.List: java.lang.Object get(int)>(i14);

        $r15 = (org.quartz.spi.OperableTrigger) $r14;

        $r16 = interfaceinvoke $r15.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        $r17 = virtualinvoke $r16.<org.quartz.TriggerKey: java.lang.String getName()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.String)>($r13, $r17);

        i14 = i14 + 1;

        goto label5;

     label6:
        return;
    }

    public void testResetErrorTrigger() throws java.lang.Exception
    {
        org.quartz.AbstractJobStoreTest r0;
        java.util.Date r1, $r11, $r12, $r15, $r16;
        long l0, l1, $l2, $l3, $l4, $l5;
        java.util.List r3, r4;
        org.quartz.spi.TriggerFiredResult r5;
        org.quartz.impl.triggers.SimpleTriggerImpl $r6;
        org.quartz.impl.JobDetailImpl $r7, $r9;
        java.lang.String $r8, $r10;
        org.quartz.spi.JobStore $r14, $r17, $r22, $r24, $r30, $r33, $r35;
        org.quartz.TriggerKey $r18, $r21, $r31, $r34, $r36;
        java.lang.Object $r19, $r23;
        org.quartz.spi.OperableTrigger $r20, $r26;
        org.quartz.spi.TriggerFiredBundle $r25, $r27;
        org.quartz.JobDetail $r28;
        org.quartz.Trigger$CompletedExecutionInstruction $r29;
        org.quartz.Trigger$TriggerState $r32, $r37, r38, r39;

        r0 := @this: org.quartz.AbstractJobStoreTest;

        r1 = staticinvoke <org.quartz.DateBuilder: java.util.Date evenMinuteDateAfterNow()>();

        l0 = virtualinvoke r1.<java.util.Date: long getTime()>();

        $r6 = new org.quartz.impl.triggers.SimpleTriggerImpl;

        $r7 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.impl.JobDetailImpl fJobDetail>;

        $r8 = virtualinvoke $r7.<org.quartz.impl.JobDetailImpl: java.lang.String getName()>();

        $r9 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.impl.JobDetailImpl fJobDetail>;

        $r10 = virtualinvoke $r9.<org.quartz.impl.JobDetailImpl: java.lang.String getGroup()>();

        $r11 = new java.util.Date;

        $l2 = l0 + 200000L;

        specialinvoke $r11.<java.util.Date: void <init>(long)>($l2);

        $r12 = new java.util.Date;

        $l3 = l0 + 200000L;

        specialinvoke $r12.<java.util.Date: void <init>(long)>($l3);

        specialinvoke $r6.<org.quartz.impl.triggers.SimpleTriggerImpl: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Date,java.util.Date,int,long)>("trigger1", "triggerGroup1", $r8, $r10, $r11, $r12, 2, 2000L);

        interfaceinvoke $r6.<org.quartz.spi.OperableTrigger: java.util.Date computeFirstFireTime(org.quartz.Calendar)>(null);

        $r14 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        interfaceinvoke $r14.<org.quartz.spi.JobStore: void storeTrigger(org.quartz.spi.OperableTrigger,boolean)>($r6, 0);

        $r15 = new java.util.Date;

        $r16 = interfaceinvoke $r6.<org.quartz.spi.OperableTrigger: java.util.Date getNextFireTime()>();

        $l4 = virtualinvoke $r16.<java.util.Date: long getTime()>();

        specialinvoke $r15.<java.util.Date: void <init>(long)>($l4);

        l1 = virtualinvoke $r15.<java.util.Date: long getTime()>();

        $r17 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        $l5 = l1 + 10000L;

        r3 = interfaceinvoke $r17.<org.quartz.spi.JobStore: java.util.List acquireNextTriggers(long,int,long)>($l5, 1, 0L);

        $r18 = interfaceinvoke $r6.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        $r19 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(0);

        $r20 = (org.quartz.spi.OperableTrigger) $r19;

        $r21 = interfaceinvoke $r20.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        staticinvoke <org.quartz.AbstractJobStoreTest: void assertEquals(java.lang.Object,java.lang.Object)>($r18, $r21);

        $r22 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        r4 = interfaceinvoke $r22.<org.quartz.spi.JobStore: java.util.List triggersFired(java.util.List)>(r3);

        $r23 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(0);

        r5 = (org.quartz.spi.TriggerFiredResult) $r23;

        $r24 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        $r25 = virtualinvoke r5.<org.quartz.spi.TriggerFiredResult: org.quartz.spi.TriggerFiredBundle getTriggerFiredBundle()>();

        $r26 = virtualinvoke $r25.<org.quartz.spi.TriggerFiredBundle: org.quartz.spi.OperableTrigger getTrigger()>();

        $r27 = virtualinvoke r5.<org.quartz.spi.TriggerFiredResult: org.quartz.spi.TriggerFiredBundle getTriggerFiredBundle()>();

        $r28 = virtualinvoke $r27.<org.quartz.spi.TriggerFiredBundle: org.quartz.JobDetail getJobDetail()>();

        $r29 = <org.quartz.Trigger$CompletedExecutionInstruction: org.quartz.Trigger$CompletedExecutionInstruction SET_TRIGGER_ERROR>;

        interfaceinvoke $r24.<org.quartz.spi.JobStore: void triggeredJobComplete(org.quartz.spi.OperableTrigger,org.quartz.JobDetail,org.quartz.Trigger$CompletedExecutionInstruction)>($r26, $r28, $r29);

        $r30 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        $r31 = interfaceinvoke $r6.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        r38 = interfaceinvoke $r30.<org.quartz.spi.JobStore: org.quartz.Trigger$TriggerState getTriggerState(org.quartz.TriggerKey)>($r31);

        $r32 = <org.quartz.Trigger$TriggerState: org.quartz.Trigger$TriggerState ERROR>;

        staticinvoke <org.quartz.AbstractJobStoreTest: void assertEquals(java.lang.Object,java.lang.Object)>($r32, r38);

        $r33 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        $r34 = interfaceinvoke $r6.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        interfaceinvoke $r33.<org.quartz.spi.JobStore: void resetTriggerFromErrorState(org.quartz.TriggerKey)>($r34);

        $r35 = r0.<org.quartz.AbstractJobStoreTest: org.quartz.spi.JobStore fJobStore>;

        $r36 = interfaceinvoke $r6.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        r39 = interfaceinvoke $r35.<org.quartz.spi.JobStore: org.quartz.Trigger$TriggerState getTriggerState(org.quartz.TriggerKey)>($r36);

        $r37 = <org.quartz.Trigger$TriggerState: org.quartz.Trigger$TriggerState NORMAL>;

        staticinvoke <org.quartz.AbstractJobStoreTest: void assertEquals(java.lang.Object,java.lang.Object)>($r37, r39);

        return;
    }
}
