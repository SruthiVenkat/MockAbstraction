public class org.quartz.impl.jdbcjobstore.StdJDBCDelegateTest extends junit.framework.TestCase
{

    public void <init>()
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegateTest r0;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegateTest;

        specialinvoke r0.<junit.framework.TestCase: void <init>()>();

        return;
    }

    public void testSerializeJobData() throws java.io.IOException, org.quartz.impl.jdbcjobstore.NoSuchDelegateException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegateTest r0;
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate $r4;
        java.lang.Class $r5;
        org.slf4j.Logger $r6;
        org.quartz.simpl.SimpleClassLoadHelper $r7;
        org.quartz.JobDataMap $r8;
        java.io.ByteArrayOutputStream $r9, $r10;
        java.lang.Object $r11;
        java.io.NotSerializableException $r14;
        java.lang.String $r15;
        int $i0;
        boolean $z0;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegateTest;

        $r4 = new org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        specialinvoke $r4.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void <init>()>();

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>($r5);

        $r7 = new org.quartz.simpl.SimpleClassLoadHelper;

        specialinvoke $r7.<org.quartz.simpl.SimpleClassLoadHelper: void <init>()>();

        virtualinvoke $r4.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void initialize(org.slf4j.Logger,java.lang.String,java.lang.String,java.lang.String,org.quartz.spi.ClassLoadHelper,boolean,java.lang.String)>($r6, "QRTZ_", "TESTSCHED", "INSTANCE", $r7, 0, "");

        $r8 = new org.quartz.JobDataMap;

        specialinvoke $r8.<org.quartz.JobDataMap: void <init>()>();

        $r9 = virtualinvoke $r4.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.io.ByteArrayOutputStream serializeJobData(org.quartz.JobDataMap)>($r8);

        virtualinvoke $r9.<java.io.ByteArrayOutputStream: void close()>();

        virtualinvoke $r8.<org.quartz.JobDataMap: void clear()>();

        virtualinvoke $r8.<org.quartz.JobDataMap: void put(java.lang.String,java.lang.String)>("key", "value");

        virtualinvoke $r8.<org.quartz.JobDataMap: void put(java.lang.String,java.lang.String)>("key2", null);

        $r10 = virtualinvoke $r4.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.io.ByteArrayOutputStream serializeJobData(org.quartz.JobDataMap)>($r8);

        virtualinvoke $r10.<java.io.ByteArrayOutputStream: void close()>();

        virtualinvoke $r8.<org.quartz.JobDataMap: void clear()>();

        virtualinvoke $r8.<org.quartz.JobDataMap: void put(java.lang.String,java.lang.String)>("key1", "value");

        virtualinvoke $r8.<org.quartz.JobDataMap: void put(java.lang.String,java.lang.String)>("key2", null);

        $r11 = new java.lang.Object;

        specialinvoke $r11.<java.lang.Object: void <init>()>();

        virtualinvoke $r8.<org.quartz.JobDataMap: java.lang.Object put(java.lang.String,java.lang.Object)>("key3", $r11);

     label1:
        virtualinvoke $r4.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.io.ByteArrayOutputStream serializeJobData(org.quartz.JobDataMap)>($r8);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegateTest: void fail()>();

     label2:
        goto label6;

     label3:
        $r14 := @caughtexception;

        $r15 = virtualinvoke $r14.<java.io.NotSerializableException: java.lang.String getMessage()>();

        $i0 = virtualinvoke $r15.<java.lang.String: int indexOf(java.lang.String)>("key3");

        if $i0 < 0 goto label4;

        $z0 = 1;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegateTest: void assertTrue(boolean)>($z0);

     label6:
        return;

        catch java.io.NotSerializableException from label1 to label2 with label3;
    }

    public void testSelectBlobTriggerWithNoBlobContent() throws org.quartz.JobPersistenceException, java.sql.SQLException, java.io.IOException, java.lang.ClassNotFoundException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegateTest r0;
        java.sql.Connection r2;
        java.sql.PreparedStatement r3, $r14;
        java.sql.ResultSet r4, $r17;
        org.quartz.spi.OperableTrigger r5;
        org.quartz.impl.jdbcjobstore.StdJDBCDelegate $r6;
        java.lang.Class $r7;
        org.slf4j.Logger $r8;
        org.quartz.simpl.SimpleClassLoadHelper $r9;
        java.lang.Object $r10, $r11, $r12;
        java.lang.String $r13, $r26;
        org.mockito.stubbing.OngoingStubbing $r15, $r18, $r21, $r23, $r27;
        boolean $z0;
        java.lang.Boolean $r20, $r22, $r24;
        org.quartz.TriggerKey $r29;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegateTest;

        $r6 = new org.quartz.impl.jdbcjobstore.StdJDBCDelegate;

        specialinvoke $r6.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void <init>()>();

        $r7 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>($r7);

        $r9 = new org.quartz.simpl.SimpleClassLoadHelper;

        specialinvoke $r9.<org.quartz.simpl.SimpleClassLoadHelper: void <init>()>();

        virtualinvoke $r6.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void initialize(org.slf4j.Logger,java.lang.String,java.lang.String,java.lang.String,org.quartz.spi.ClassLoadHelper,boolean,java.lang.String)>($r8, "QRTZ_", "TESTSCHED", "INSTANCE", $r9, 0, "");

        $r10 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Ljava/sql/Connection;");

        r2 = (java.sql.Connection) $r10;

        $r11 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Ljava/sql/PreparedStatement;");

        r3 = (java.sql.PreparedStatement) $r11;

        $r12 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Ljava/sql/ResultSet;");

        r4 = (java.sql.ResultSet) $r12;

        $r13 = staticinvoke <org.mockito.Matchers: java.lang.String anyString()>();

        $r14 = interfaceinvoke r2.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r13);

        $r15 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r14);

        interfaceinvoke $r15.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>(r3);

        $r17 = interfaceinvoke r3.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

        $r18 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r17);

        interfaceinvoke $r18.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>(r4);

        $z0 = interfaceinvoke r4.<java.sql.ResultSet: boolean next()>();

        $r20 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r21 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r20);

        $r22 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r23 = interfaceinvoke $r21.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r22);

        $r24 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        interfaceinvoke $r23.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r24);

        $r26 = interfaceinvoke r4.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("TRIGGER_TYPE");

        $r27 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r26);

        interfaceinvoke $r27.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>("BLOB");

        $r29 = staticinvoke <org.quartz.TriggerKey: org.quartz.TriggerKey triggerKey(java.lang.String)>("test");

        r5 = virtualinvoke $r6.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: org.quartz.spi.OperableTrigger selectTrigger(java.sql.Connection,org.quartz.TriggerKey)>(r2, $r29);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegateTest: void assertNull(java.lang.Object)>(r5);

        return;
    }

    public void testSelectSimpleTriggerWithExceptionWithExtendedProps() throws java.sql.SQLException, org.quartz.JobPersistenceException, java.io.IOException, java.lang.ClassNotFoundException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegateTest r0;
        org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate r1, $r42;
        java.sql.Connection r4, $r11, $r44;
        java.sql.PreparedStatement r5, $r26;
        java.sql.ResultSet r6, $r29;
        java.lang.Object $r8, $r10, $r12, $r22, $r23, $r24, $r41, $r43, $r45;
        java.lang.IllegalStateException $r9, $r48;
        org.quartz.TriggerKey $r13, $r39, $r46;
        org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate$TriggerPropertyBundle $r14;
        org.mockito.stubbing.OngoingStubbing $r15, $r27, $r30, $r33, $r37;
        java.lang.Throwable[] $r16;
        org.quartz.impl.jdbcjobstore.StdJDBCDelegateTest$TestStdJDBCDelegate $r18;
        java.lang.Class $r19;
        org.slf4j.Logger $r20;
        org.quartz.simpl.SimpleClassLoadHelper $r21;
        java.lang.String $r25, $r36;
        boolean $z0;
        java.lang.Boolean $r32, $r34;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegateTest;

        $r8 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/quartz/impl/jdbcjobstore/TriggerPersistenceDelegate;");

        r1 = (org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate) $r8;

        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>()>();

        $r10 = staticinvoke <org.mockito.Matchers: java.lang.Object any(java.lang.Class)>(class "Ljava/sql/Connection;");

        $r11 = (java.sql.Connection) $r10;

        $r12 = staticinvoke <org.mockito.Matchers: java.lang.Object any(java.lang.Class)>(class "Lorg/quartz/TriggerKey;");

        $r13 = (org.quartz.TriggerKey) $r12;

        $r14 = interfaceinvoke r1.<org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate: org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate$TriggerPropertyBundle loadExtendedTriggerProperties(java.sql.Connection,org.quartz.TriggerKey)>($r11, $r13);

        $r15 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r14);

        $r16 = newarray (java.lang.Throwable)[1];

        $r16[0] = $r9;

        interfaceinvoke $r15.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenThrow(java.lang.Throwable[])>($r16);

        $r18 = new org.quartz.impl.jdbcjobstore.StdJDBCDelegateTest$TestStdJDBCDelegate;

        specialinvoke $r18.<org.quartz.impl.jdbcjobstore.StdJDBCDelegateTest$TestStdJDBCDelegate: void <init>(org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate)>(r1);

        $r19 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r20 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>($r19);

        $r21 = new org.quartz.simpl.SimpleClassLoadHelper;

        specialinvoke $r21.<org.quartz.simpl.SimpleClassLoadHelper: void <init>()>();

        virtualinvoke $r18.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void initialize(org.slf4j.Logger,java.lang.String,java.lang.String,java.lang.String,org.quartz.spi.ClassLoadHelper,boolean,java.lang.String)>($r20, "QRTZ_", "TESTSCHED", "INSTANCE", $r21, 0, "");

        $r22 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Ljava/sql/Connection;");

        r4 = (java.sql.Connection) $r22;

        $r23 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Ljava/sql/PreparedStatement;");

        r5 = (java.sql.PreparedStatement) $r23;

        $r24 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Ljava/sql/ResultSet;");

        r6 = (java.sql.ResultSet) $r24;

        $r25 = staticinvoke <org.mockito.Matchers: java.lang.String anyString()>();

        $r26 = interfaceinvoke r4.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r25);

        $r27 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r26);

        interfaceinvoke $r27.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>(r5);

        $r29 = interfaceinvoke r5.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

        $r30 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r29);

        interfaceinvoke $r30.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>(r6);

        $z0 = interfaceinvoke r6.<java.sql.ResultSet: boolean next()>();

        $r32 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r33 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r32);

        $r34 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r33.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r34);

        $r36 = interfaceinvoke r6.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("TRIGGER_TYPE");

        $r37 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r36);

        interfaceinvoke $r37.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>("SIMPLE");

     label1:
        $r39 = staticinvoke <org.quartz.TriggerKey: org.quartz.TriggerKey triggerKey(java.lang.String)>("test");

        virtualinvoke $r18.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: org.quartz.spi.OperableTrigger selectTrigger(java.sql.Connection,org.quartz.TriggerKey)>(r4, $r39);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegateTest: void fail(java.lang.String)>("Trigger selection should result in exception");

     label2:
        goto label4;

     label3:
        $r48 := @caughtexception;

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegateTest: void assertSame(java.lang.Object,java.lang.Object)>($r9, $r48);

     label4:
        $r41 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r1);

        $r42 = (org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate) $r41;

        $r43 = staticinvoke <org.mockito.Matchers: java.lang.Object any(java.lang.Class)>(class "Ljava/sql/Connection;");

        $r44 = (java.sql.Connection) $r43;

        $r45 = staticinvoke <org.mockito.Matchers: java.lang.Object any(java.lang.Class)>(class "Lorg/quartz/TriggerKey;");

        $r46 = (org.quartz.TriggerKey) $r45;

        interfaceinvoke $r42.<org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate: org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate$TriggerPropertyBundle loadExtendedTriggerProperties(java.sql.Connection,org.quartz.TriggerKey)>($r44, $r46);

        return;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    public void testSelectSimpleTriggerWithDeleteBeforeSelectExtendedProps() throws org.quartz.JobPersistenceException, java.lang.ClassNotFoundException, java.sql.SQLException, java.io.IOException
    {
        org.quartz.impl.jdbcjobstore.StdJDBCDelegateTest r0;
        org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate r1, $r42;
        java.sql.Connection r3, $r9, $r44;
        java.sql.PreparedStatement r4, $r25;
        java.sql.ResultSet r5, $r28;
        org.quartz.spi.OperableTrigger r6;
        java.lang.Object $r7, $r8, $r10, $r21, $r22, $r23, $r41, $r43, $r45;
        org.quartz.TriggerKey $r11, $r40, $r46;
        org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate$TriggerPropertyBundle $r12;
        org.mockito.stubbing.OngoingStubbing $r13, $r26, $r29, $r32, $r34, $r38;
        java.lang.Throwable[] $r14;
        java.lang.IllegalStateException $r15;
        org.quartz.impl.jdbcjobstore.StdJDBCDelegateTest$TestStdJDBCDelegate $r17;
        java.lang.Class $r18;
        org.slf4j.Logger $r19;
        org.quartz.simpl.SimpleClassLoadHelper $r20;
        java.lang.String $r24, $r37;
        boolean $z0;
        java.lang.Boolean $r31, $r33, $r35;

        r0 := @this: org.quartz.impl.jdbcjobstore.StdJDBCDelegateTest;

        $r7 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/quartz/impl/jdbcjobstore/TriggerPersistenceDelegate;");

        r1 = (org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate) $r7;

        $r8 = staticinvoke <org.mockito.Matchers: java.lang.Object any(java.lang.Class)>(class "Ljava/sql/Connection;");

        $r9 = (java.sql.Connection) $r8;

        $r10 = staticinvoke <org.mockito.Matchers: java.lang.Object any(java.lang.Class)>(class "Lorg/quartz/TriggerKey;");

        $r11 = (org.quartz.TriggerKey) $r10;

        $r12 = interfaceinvoke r1.<org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate: org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate$TriggerPropertyBundle loadExtendedTriggerProperties(java.sql.Connection,org.quartz.TriggerKey)>($r9, $r11);

        $r13 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r12);

        $r14 = newarray (java.lang.Throwable)[1];

        $r15 = new java.lang.IllegalStateException;

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>()>();

        $r14[0] = $r15;

        interfaceinvoke $r13.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenThrow(java.lang.Throwable[])>($r14);

        $r17 = new org.quartz.impl.jdbcjobstore.StdJDBCDelegateTest$TestStdJDBCDelegate;

        specialinvoke $r17.<org.quartz.impl.jdbcjobstore.StdJDBCDelegateTest$TestStdJDBCDelegate: void <init>(org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate)>(r1);

        $r18 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r19 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>($r18);

        $r20 = new org.quartz.simpl.SimpleClassLoadHelper;

        specialinvoke $r20.<org.quartz.simpl.SimpleClassLoadHelper: void <init>()>();

        virtualinvoke $r17.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void initialize(org.slf4j.Logger,java.lang.String,java.lang.String,java.lang.String,org.quartz.spi.ClassLoadHelper,boolean,java.lang.String)>($r19, "QRTZ_", "TESTSCHED", "INSTANCE", $r20, 0, "");

        $r21 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Ljava/sql/Connection;");

        r3 = (java.sql.Connection) $r21;

        $r22 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Ljava/sql/PreparedStatement;");

        r4 = (java.sql.PreparedStatement) $r22;

        $r23 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Ljava/sql/ResultSet;");

        r5 = (java.sql.ResultSet) $r23;

        $r24 = staticinvoke <org.mockito.Matchers: java.lang.String anyString()>();

        $r25 = interfaceinvoke r3.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r24);

        $r26 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r25);

        interfaceinvoke $r26.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>(r4);

        $r28 = interfaceinvoke r4.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

        $r29 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r28);

        interfaceinvoke $r29.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>(r5);

        $z0 = interfaceinvoke r5.<java.sql.ResultSet: boolean next()>();

        $r31 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r32 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r31);

        $r33 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r34 = interfaceinvoke $r32.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r33);

        $r35 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        interfaceinvoke $r34.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r35);

        $r37 = interfaceinvoke r5.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("TRIGGER_TYPE");

        $r38 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r37);

        interfaceinvoke $r38.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>("SIMPLE");

        $r40 = staticinvoke <org.quartz.TriggerKey: org.quartz.TriggerKey triggerKey(java.lang.String)>("test");

        r6 = virtualinvoke $r17.<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: org.quartz.spi.OperableTrigger selectTrigger(java.sql.Connection,org.quartz.TriggerKey)>(r3, $r40);

        staticinvoke <org.quartz.impl.jdbcjobstore.StdJDBCDelegateTest: void assertNull(java.lang.Object)>(r6);

        $r41 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r1);

        $r42 = (org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate) $r41;

        $r43 = staticinvoke <org.mockito.Matchers: java.lang.Object any(java.lang.Class)>(class "Ljava/sql/Connection;");

        $r44 = (java.sql.Connection) $r43;

        $r45 = staticinvoke <org.mockito.Matchers: java.lang.Object any(java.lang.Class)>(class "Lorg/quartz/TriggerKey;");

        $r46 = (org.quartz.TriggerKey) $r45;

        interfaceinvoke $r42.<org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate: org.quartz.impl.jdbcjobstore.TriggerPersistenceDelegate$TriggerPropertyBundle loadExtendedTriggerProperties(java.sql.Connection,org.quartz.TriggerKey)>($r44, $r46);

        return;
    }
}
