public class org.quartz.CronScheduleBuilder extends org.quartz.ScheduleBuilder
{
    private org.quartz.CronExpression cronExpression;
    private int misfireInstruction;

    protected void <init>(org.quartz.CronExpression)
    {
        org.quartz.CronScheduleBuilder r0;
        org.quartz.CronExpression r1;
        java.lang.NullPointerException $r2;

        r0 := @this: org.quartz.CronScheduleBuilder;

        r1 := @parameter0: org.quartz.CronExpression;

        specialinvoke r0.<org.quartz.ScheduleBuilder: void <init>()>();

        r0.<org.quartz.CronScheduleBuilder: int misfireInstruction> = 0;

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("cronExpression cannot be null");

        throw $r2;

     label1:
        r0.<org.quartz.CronScheduleBuilder: org.quartz.CronExpression cronExpression> = r1;

        return;
    }

    public org.quartz.spi.MutableTrigger build()
    {
        org.quartz.CronScheduleBuilder r0;
        org.quartz.impl.triggers.CronTriggerImpl $r2;
        org.quartz.CronExpression $r3, $r4;
        java.util.TimeZone $r5;
        int $i0;

        r0 := @this: org.quartz.CronScheduleBuilder;

        $r2 = new org.quartz.impl.triggers.CronTriggerImpl;

        specialinvoke $r2.<org.quartz.impl.triggers.CronTriggerImpl: void <init>()>();

        $r3 = r0.<org.quartz.CronScheduleBuilder: org.quartz.CronExpression cronExpression>;

        virtualinvoke $r2.<org.quartz.impl.triggers.CronTriggerImpl: void setCronExpression(org.quartz.CronExpression)>($r3);

        $r4 = r0.<org.quartz.CronScheduleBuilder: org.quartz.CronExpression cronExpression>;

        $r5 = virtualinvoke $r4.<org.quartz.CronExpression: java.util.TimeZone getTimeZone()>();

        virtualinvoke $r2.<org.quartz.impl.triggers.CronTriggerImpl: void setTimeZone(java.util.TimeZone)>($r5);

        $i0 = r0.<org.quartz.CronScheduleBuilder: int misfireInstruction>;

        virtualinvoke $r2.<org.quartz.impl.triggers.CronTriggerImpl: void setMisfireInstruction(int)>($i0);

        return $r2;
    }

    public static org.quartz.CronScheduleBuilder cronSchedule(java.lang.String)
    {
        java.lang.String r0, $r10;
        org.quartz.CronExpression $r2;
        org.quartz.CronScheduleBuilder $r3;
        java.text.ParseException $r4;
        java.lang.RuntimeException $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;

        r0 := @parameter0: java.lang.String;

     label1:
        $r2 = new org.quartz.CronExpression;

        specialinvoke $r2.<org.quartz.CronExpression: void <init>(java.lang.String)>(r0);

        $r3 = staticinvoke <org.quartz.CronScheduleBuilder: org.quartz.CronScheduleBuilder cronSchedule(org.quartz.CronExpression)>($r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CronExpression \'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is invalid.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r10, $r4);

        throw $r5;

        catch java.text.ParseException from label1 to label2 with label3;
    }

    public static org.quartz.CronScheduleBuilder cronScheduleNonvalidatedExpression(java.lang.String) throws java.text.ParseException
    {
        java.lang.String r0;
        org.quartz.CronExpression $r1;
        org.quartz.CronScheduleBuilder $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = new org.quartz.CronExpression;

        specialinvoke $r1.<org.quartz.CronExpression: void <init>(java.lang.String)>(r0);

        $r2 = staticinvoke <org.quartz.CronScheduleBuilder: org.quartz.CronScheduleBuilder cronSchedule(org.quartz.CronExpression)>($r1);

        return $r2;
    }

    private static org.quartz.CronScheduleBuilder cronScheduleNoParseException(java.lang.String)
    {
        java.lang.String r0, $r10;
        org.quartz.CronExpression $r2;
        org.quartz.CronScheduleBuilder $r3;
        java.text.ParseException $r4;
        java.lang.RuntimeException $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;

        r0 := @parameter0: java.lang.String;

     label1:
        $r2 = new org.quartz.CronExpression;

        specialinvoke $r2.<org.quartz.CronExpression: void <init>(java.lang.String)>(r0);

        $r3 = staticinvoke <org.quartz.CronScheduleBuilder: org.quartz.CronScheduleBuilder cronSchedule(org.quartz.CronExpression)>($r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CronExpression \'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is invalid, which should not be possible, please report bug to Quartz developers.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r10, $r4);

        throw $r5;

        catch java.text.ParseException from label1 to label2 with label3;
    }

    public static org.quartz.CronScheduleBuilder cronSchedule(org.quartz.CronExpression)
    {
        org.quartz.CronExpression r0;
        org.quartz.CronScheduleBuilder $r1;

        r0 := @parameter0: org.quartz.CronExpression;

        $r1 = new org.quartz.CronScheduleBuilder;

        specialinvoke $r1.<org.quartz.CronScheduleBuilder: void <init>(org.quartz.CronExpression)>(r0);

        return $r1;
    }

    public static org.quartz.CronScheduleBuilder dailyAtHourAndMinute(int, int)
    {
        int i0, i1;
        java.lang.String r0;
        java.lang.Object[] $r1;
        java.lang.Integer $r2, $r3;
        org.quartz.CronScheduleBuilder $r4;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        staticinvoke <org.quartz.DateBuilder: void validateHour(int)>(i0);

        staticinvoke <org.quartz.DateBuilder: void validateMinute(int)>(i1);

        $r1 = newarray (java.lang.Object)[2];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[1] = $r3;

        r0 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("0 %d %d ? * *", $r1);

        $r4 = staticinvoke <org.quartz.CronScheduleBuilder: org.quartz.CronScheduleBuilder cronScheduleNoParseException(java.lang.String)>(r0);

        return $r4;
    }

    public static transient org.quartz.CronScheduleBuilder atHourAndMinuteOnGivenDaysOfWeek(int, int, java.lang.Integer[])
    {
        int i0, i1, i2, $i3, $i4, i5, i6, i7;
        java.lang.Integer[] r0;
        java.lang.IllegalArgumentException $r1;
        java.lang.Object[] $r2;
        java.lang.Integer $r3, $r4, $r5, $r10, $r12;
        org.quartz.CronScheduleBuilder $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r11;
        java.lang.String r14;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: java.lang.Integer[];

        if r0 == null goto label1;

        $i3 = lengthof r0;

        if $i3 != 0 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("You must specify at least one day of week.");

        throw $r1;

     label2:
        i5 = lengthof r0;

        i6 = 0;

     label3:
        if i6 >= i5 goto label4;

        $r12 = r0[i6];

        i2 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

        staticinvoke <org.quartz.DateBuilder: void validateDayOfWeek(int)>(i2);

        i6 = i6 + 1;

        goto label3;

     label4:
        staticinvoke <org.quartz.DateBuilder: void validateHour(int)>(i0);

        staticinvoke <org.quartz.DateBuilder: void validateMinute(int)>(i1);

        $r2 = newarray (java.lang.Object)[3];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r2[0] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2[1] = $r4;

        $r5 = r0[0];

        $r2[2] = $r5;

        r14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("0 %d %d ? * %d", $r2);

        i7 = 1;

     label5:
        $i4 = lengthof r0;

        if i7 >= $i4 goto label6;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r10 = r0[i7];

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        i7 = i7 + 1;

        goto label5;

     label6:
        $r6 = staticinvoke <org.quartz.CronScheduleBuilder: org.quartz.CronScheduleBuilder cronScheduleNoParseException(java.lang.String)>(r14);

        return $r6;
    }

    public static org.quartz.CronScheduleBuilder weeklyOnDayAndHourAndMinute(int, int, int)
    {
        int i0, i1, i2;
        java.lang.String r0;
        java.lang.Object[] $r1;
        java.lang.Integer $r2, $r3, $r4;
        org.quartz.CronScheduleBuilder $r5;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        staticinvoke <org.quartz.DateBuilder: void validateDayOfWeek(int)>(i0);

        staticinvoke <org.quartz.DateBuilder: void validateHour(int)>(i1);

        staticinvoke <org.quartz.DateBuilder: void validateMinute(int)>(i2);

        $r1 = newarray (java.lang.Object)[3];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r1[1] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[2] = $r4;

        r0 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("0 %d %d ? * %d", $r1);

        $r5 = staticinvoke <org.quartz.CronScheduleBuilder: org.quartz.CronScheduleBuilder cronScheduleNoParseException(java.lang.String)>(r0);

        return $r5;
    }

    public static org.quartz.CronScheduleBuilder monthlyOnDayAndHourAndMinute(int, int, int)
    {
        int i0, i1, i2;
        java.lang.String r0;
        java.lang.Object[] $r1;
        java.lang.Integer $r2, $r3, $r4;
        org.quartz.CronScheduleBuilder $r5;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        staticinvoke <org.quartz.DateBuilder: void validateDayOfMonth(int)>(i0);

        staticinvoke <org.quartz.DateBuilder: void validateHour(int)>(i1);

        staticinvoke <org.quartz.DateBuilder: void validateMinute(int)>(i2);

        $r1 = newarray (java.lang.Object)[3];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r1[1] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[2] = $r4;

        r0 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("0 %d %d %d * ?", $r1);

        $r5 = staticinvoke <org.quartz.CronScheduleBuilder: org.quartz.CronScheduleBuilder cronScheduleNoParseException(java.lang.String)>(r0);

        return $r5;
    }

    public org.quartz.CronScheduleBuilder inTimeZone(java.util.TimeZone)
    {
        org.quartz.CronScheduleBuilder r0;
        java.util.TimeZone r1;
        org.quartz.CronExpression $r2;

        r0 := @this: org.quartz.CronScheduleBuilder;

        r1 := @parameter0: java.util.TimeZone;

        $r2 = r0.<org.quartz.CronScheduleBuilder: org.quartz.CronExpression cronExpression>;

        virtualinvoke $r2.<org.quartz.CronExpression: void setTimeZone(java.util.TimeZone)>(r1);

        return r0;
    }

    public org.quartz.CronScheduleBuilder withMisfireHandlingInstructionIgnoreMisfires()
    {
        org.quartz.CronScheduleBuilder r0;

        r0 := @this: org.quartz.CronScheduleBuilder;

        r0.<org.quartz.CronScheduleBuilder: int misfireInstruction> = -1;

        return r0;
    }

    public org.quartz.CronScheduleBuilder withMisfireHandlingInstructionDoNothing()
    {
        org.quartz.CronScheduleBuilder r0;

        r0 := @this: org.quartz.CronScheduleBuilder;

        r0.<org.quartz.CronScheduleBuilder: int misfireInstruction> = 2;

        return r0;
    }

    public org.quartz.CronScheduleBuilder withMisfireHandlingInstructionFireAndProceed()
    {
        org.quartz.CronScheduleBuilder r0;

        r0 := @this: org.quartz.CronScheduleBuilder;

        r0.<org.quartz.CronScheduleBuilder: int misfireInstruction> = 1;

        return r0;
    }
}
