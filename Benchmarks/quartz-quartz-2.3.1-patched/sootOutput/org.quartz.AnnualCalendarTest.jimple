public class org.quartz.AnnualCalendarTest extends org.quartz.SerializationTestSupport
{
    private static final java.lang.String[] VERSIONS;
    private static final java.util.TimeZone EST_TIME_ZONE;

    public void <init>()
    {
        org.quartz.AnnualCalendarTest r0;

        r0 := @this: org.quartz.AnnualCalendarTest;

        specialinvoke r0.<org.quartz.SerializationTestSupport: void <init>()>();

        return;
    }

    protected java.lang.Object getTargetObject()
    {
        org.quartz.AnnualCalendarTest r0;
        java.util.Calendar r2;
        org.quartz.impl.calendar.AnnualCalendar $r3;
        java.util.Locale $r4;
        java.util.TimeZone $r5;

        r0 := @this: org.quartz.AnnualCalendarTest;

        $r3 = new org.quartz.impl.calendar.AnnualCalendar;

        specialinvoke $r3.<org.quartz.impl.calendar.AnnualCalendar: void <init>()>();

        virtualinvoke $r3.<org.quartz.impl.calendar.AnnualCalendar: void setDescription(java.lang.String)>("description");

        $r5 = <org.quartz.AnnualCalendarTest: java.util.TimeZone EST_TIME_ZONE>;

        $r4 = <java.util.Locale: java.util.Locale US>;

        r2 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone,java.util.Locale)>($r5, $r4);

        virtualinvoke r2.<java.util.Calendar: void clear()>();

        virtualinvoke r2.<java.util.Calendar: void set(int,int,int,int,int,int)>(2005, 0, 20, 10, 5, 15);

        virtualinvoke $r3.<org.quartz.impl.calendar.AnnualCalendar: void setDayExcluded(java.util.Calendar,boolean)>(r2, 1);

        return $r3;
    }

    protected java.lang.String[] getVersions()
    {
        org.quartz.AnnualCalendarTest r0;
        java.lang.String[] $r1;

        r0 := @this: org.quartz.AnnualCalendarTest;

        $r1 = <org.quartz.AnnualCalendarTest: java.lang.String[] VERSIONS>;

        return $r1;
    }

    protected void verifyMatch(java.lang.Object, java.lang.Object)
    {
        org.quartz.AnnualCalendarTest r0;
        java.lang.Object r1, r2;
        org.quartz.impl.calendar.AnnualCalendar r3, r4;
        java.lang.String $r5, $r6;
        java.util.ArrayList $r7, $r8;
        java.util.TimeZone $r9;

        r0 := @this: org.quartz.AnnualCalendarTest;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 = (org.quartz.impl.calendar.AnnualCalendar) r1;

        r4 = (org.quartz.impl.calendar.AnnualCalendar) r2;

        staticinvoke <org.quartz.AnnualCalendarTest: void assertNotNull(java.lang.Object)>(r4);

        $r5 = virtualinvoke r3.<org.quartz.impl.calendar.AnnualCalendar: java.lang.String getDescription()>();

        $r6 = virtualinvoke r4.<org.quartz.impl.calendar.AnnualCalendar: java.lang.String getDescription()>();

        staticinvoke <org.quartz.AnnualCalendarTest: void assertEquals(java.lang.String,java.lang.String)>($r5, $r6);

        $r7 = virtualinvoke r3.<org.quartz.impl.calendar.AnnualCalendar: java.util.ArrayList getDaysExcluded()>();

        $r8 = virtualinvoke r4.<org.quartz.impl.calendar.AnnualCalendar: java.util.ArrayList getDaysExcluded()>();

        staticinvoke <org.quartz.AnnualCalendarTest: void assertEquals(java.lang.Object,java.lang.Object)>($r7, $r8);

        $r9 = virtualinvoke r4.<org.quartz.impl.calendar.AnnualCalendar: java.util.TimeZone getTimeZone()>();

        staticinvoke <org.quartz.AnnualCalendarTest: void assertNull(java.lang.Object)>($r9);

        return;
    }

    public void testDaysExcluded()
    {
        org.quartz.AnnualCalendarTest r0;
        org.quartz.impl.calendar.AnnualCalendar $r2;
        java.util.ArrayList $r3;

        r0 := @this: org.quartz.AnnualCalendarTest;

        $r2 = new org.quartz.impl.calendar.AnnualCalendar;

        specialinvoke $r2.<org.quartz.impl.calendar.AnnualCalendar: void <init>()>();

        virtualinvoke $r2.<org.quartz.impl.calendar.AnnualCalendar: void setDaysExcluded(java.util.ArrayList)>(null);

        $r3 = virtualinvoke $r2.<org.quartz.impl.calendar.AnnualCalendar: java.util.ArrayList getDaysExcluded()>();

        staticinvoke <org.quartz.AnnualCalendarTest: void assertNotNull(java.lang.String,java.lang.Object)>("Annual calendar daysExcluded property should have been set to empty ArrayList, not null.", $r3);

        return;
    }

    public void testExclude()
    {
        org.quartz.AnnualCalendarTest r0;
        java.util.Calendar r2, $r6, $r8, $r10, $r12;
        org.quartz.impl.calendar.AnnualCalendar $r3;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Object $r5, $r7, $r9, $r11;

        r0 := @this: org.quartz.AnnualCalendarTest;

        $r3 = new org.quartz.impl.calendar.AnnualCalendar;

        specialinvoke $r3.<org.quartz.impl.calendar.AnnualCalendar: void <init>()>();

        r2 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r2.<java.util.Calendar: void set(int,int)>(2, 9);

        virtualinvoke r2.<java.util.Calendar: void set(int,int)>(5, 15);

        virtualinvoke $r3.<org.quartz.impl.calendar.AnnualCalendar: void setDayExcluded(java.util.Calendar,boolean)>(r2, 0);

        $z0 = virtualinvoke $r3.<org.quartz.impl.calendar.AnnualCalendar: boolean isDayExcluded(java.util.Calendar)>(r2);

        if $z0 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        staticinvoke <org.quartz.AnnualCalendarTest: void assertTrue(java.lang.String,boolean)>("The day 15 October is not expected to be excluded but it is", $z3);

        virtualinvoke r2.<java.util.Calendar: void set(int,int)>(2, 9);

        virtualinvoke r2.<java.util.Calendar: void set(int,int)>(5, 15);

        $r5 = virtualinvoke r2.<java.util.Calendar: java.lang.Object clone()>();

        $r6 = (java.util.Calendar) $r5;

        virtualinvoke $r3.<org.quartz.impl.calendar.AnnualCalendar: void setDayExcluded(java.util.Calendar,boolean)>($r6, 1);

        virtualinvoke r2.<java.util.Calendar: void set(int,int)>(2, 10);

        virtualinvoke r2.<java.util.Calendar: void set(int,int)>(5, 12);

        $r7 = virtualinvoke r2.<java.util.Calendar: java.lang.Object clone()>();

        $r8 = (java.util.Calendar) $r7;

        virtualinvoke $r3.<org.quartz.impl.calendar.AnnualCalendar: void setDayExcluded(java.util.Calendar,boolean)>($r8, 1);

        virtualinvoke r2.<java.util.Calendar: void set(int,int)>(2, 8);

        virtualinvoke r2.<java.util.Calendar: void set(int,int)>(5, 1);

        $r9 = virtualinvoke r2.<java.util.Calendar: java.lang.Object clone()>();

        $r10 = (java.util.Calendar) $r9;

        virtualinvoke $r3.<org.quartz.impl.calendar.AnnualCalendar: void setDayExcluded(java.util.Calendar,boolean)>($r10, 1);

        $z1 = virtualinvoke $r3.<org.quartz.impl.calendar.AnnualCalendar: boolean isDayExcluded(java.util.Calendar)>(r2);

        staticinvoke <org.quartz.AnnualCalendarTest: void assertTrue(java.lang.String,boolean)>("The day 15 October is expected to be excluded but it is not", $z1);

        virtualinvoke r2.<java.util.Calendar: void set(int,int)>(2, 9);

        virtualinvoke r2.<java.util.Calendar: void set(int,int)>(5, 15);

        $r11 = virtualinvoke r2.<java.util.Calendar: java.lang.Object clone()>();

        $r12 = (java.util.Calendar) $r11;

        virtualinvoke $r3.<org.quartz.impl.calendar.AnnualCalendar: void setDayExcluded(java.util.Calendar,boolean)>($r12, 0);

        $z2 = virtualinvoke $r3.<org.quartz.impl.calendar.AnnualCalendar: boolean isDayExcluded(java.util.Calendar)>(r2);

        if $z2 != 0 goto label3;

        $z4 = 1;

        goto label4;

     label3:
        $z4 = 0;

     label4:
        staticinvoke <org.quartz.AnnualCalendarTest: void assertTrue(java.lang.String,boolean)>("The day 15 October is not expected to be excluded but it is", $z4);

        return;
    }

    public void testDaysExcludedOverTime()
    {
        org.quartz.AnnualCalendarTest r0;
        java.util.Calendar r2, $r5, $r7;
        org.quartz.impl.calendar.AnnualCalendar $r3;
        java.lang.Object $r4, $r6;
        boolean $z0;

        r0 := @this: org.quartz.AnnualCalendarTest;

        $r3 = new org.quartz.impl.calendar.AnnualCalendar;

        specialinvoke $r3.<org.quartz.impl.calendar.AnnualCalendar: void <init>()>();

        r2 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r2.<java.util.Calendar: void set(int,int)>(2, 5);

        virtualinvoke r2.<java.util.Calendar: void set(int,int)>(1, 2005);

        virtualinvoke r2.<java.util.Calendar: void set(int,int)>(5, 23);

        $r4 = virtualinvoke r2.<java.util.Calendar: java.lang.Object clone()>();

        $r5 = (java.util.Calendar) $r4;

        virtualinvoke $r3.<org.quartz.impl.calendar.AnnualCalendar: void setDayExcluded(java.util.Calendar,boolean)>($r5, 1);

        virtualinvoke r2.<java.util.Calendar: void set(int,int)>(1, 2008);

        virtualinvoke r2.<java.util.Calendar: void set(int,int)>(2, 1);

        virtualinvoke r2.<java.util.Calendar: void set(int,int)>(5, 1);

        $r6 = virtualinvoke r2.<java.util.Calendar: java.lang.Object clone()>();

        $r7 = (java.util.Calendar) $r6;

        virtualinvoke $r3.<org.quartz.impl.calendar.AnnualCalendar: void setDayExcluded(java.util.Calendar,boolean)>($r7, 1);

        $z0 = virtualinvoke $r3.<org.quartz.impl.calendar.AnnualCalendar: boolean isDayExcluded(java.util.Calendar)>(r2);

        staticinvoke <org.quartz.AnnualCalendarTest: void assertTrue(java.lang.String,boolean)>("The day 1 February is expected to be excluded but it is not", $z0);

        return;
    }

    public void testRemoveInTheFuture()
    {
        org.quartz.AnnualCalendarTest r0;
        java.util.Calendar r2, $r5, $r7;
        org.quartz.impl.calendar.AnnualCalendar $r3;
        java.lang.Object $r4, $r6;
        boolean $z0, $z1;

        r0 := @this: org.quartz.AnnualCalendarTest;

        $r3 = new org.quartz.impl.calendar.AnnualCalendar;

        specialinvoke $r3.<org.quartz.impl.calendar.AnnualCalendar: void <init>()>();

        r2 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r2.<java.util.Calendar: void set(int,int)>(2, 5);

        virtualinvoke r2.<java.util.Calendar: void set(int,int)>(1, 2005);

        virtualinvoke r2.<java.util.Calendar: void set(int,int)>(5, 23);

        $r4 = virtualinvoke r2.<java.util.Calendar: java.lang.Object clone()>();

        $r5 = (java.util.Calendar) $r4;

        virtualinvoke $r3.<org.quartz.impl.calendar.AnnualCalendar: void setDayExcluded(java.util.Calendar,boolean)>($r5, 1);

        virtualinvoke r2.<java.util.Calendar: void set(int,int)>(2, 5);

        virtualinvoke r2.<java.util.Calendar: void set(int,int)>(1, 2008);

        virtualinvoke r2.<java.util.Calendar: void set(int,int)>(5, 23);

        $r6 = virtualinvoke r2.<java.util.Calendar: java.lang.Object clone()>();

        $r7 = (java.util.Calendar) $r6;

        virtualinvoke $r3.<org.quartz.impl.calendar.AnnualCalendar: void setDayExcluded(java.util.Calendar,boolean)>($r7, 0);

        $z0 = virtualinvoke $r3.<org.quartz.impl.calendar.AnnualCalendar: boolean isDayExcluded(java.util.Calendar)>(r2);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.quartz.AnnualCalendarTest: void assertTrue(java.lang.String,boolean)>("The day 23 June is not expected to be excluded but it is", $z1);

        return;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;
        java.util.TimeZone $r1;

        $r0 = newarray (java.lang.String)[1];

        $r0[0] = "1.5.1";

        <org.quartz.AnnualCalendarTest: java.lang.String[] VERSIONS> = $r0;

        $r1 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("America/New_York");

        <org.quartz.AnnualCalendarTest: java.util.TimeZone EST_TIME_ZONE> = $r1;

        return;
    }
}
