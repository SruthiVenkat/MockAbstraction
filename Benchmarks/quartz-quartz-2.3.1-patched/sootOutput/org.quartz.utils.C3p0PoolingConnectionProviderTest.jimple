public class org.quartz.utils.C3p0PoolingConnectionProviderTest extends org.quartz.integrations.tests.QuartzDatabaseTestSupport
{
    boolean testConnectionProviderClass;

    public void <init>()
    {
        org.quartz.utils.C3p0PoolingConnectionProviderTest r0;

        r0 := @this: org.quartz.utils.C3p0PoolingConnectionProviderTest;

        specialinvoke r0.<org.quartz.integrations.tests.QuartzDatabaseTestSupport: void <init>()>();

        r0.<org.quartz.utils.C3p0PoolingConnectionProviderTest: boolean testConnectionProviderClass> = 0;

        return;
    }

    public void testC3p0PoolProviderWithExtraProps() throws java.lang.Exception
    {
        org.quartz.utils.C3p0PoolingConnectionProviderTest r0;

        r0 := @this: org.quartz.utils.C3p0PoolingConnectionProviderTest;

        specialinvoke r0.<org.quartz.utils.C3p0PoolingConnectionProviderTest: void validateC3p0PoolProviderClassWithExtraProps()>();

        r0.<org.quartz.utils.C3p0PoolingConnectionProviderTest: boolean testConnectionProviderClass> = 1;

        return;
    }

    public void testC3p0PoolProviderClassWithExtraProps() throws java.lang.Exception
    {
        org.quartz.utils.C3p0PoolingConnectionProviderTest r0;

        r0 := @this: org.quartz.utils.C3p0PoolingConnectionProviderTest;

        specialinvoke r0.<org.quartz.utils.C3p0PoolingConnectionProviderTest: void validateC3p0PoolProviderClassWithExtraProps()>();

        r0.<org.quartz.utils.C3p0PoolingConnectionProviderTest: boolean testConnectionProviderClass> = 0;

        return;
    }

    private void validateC3p0PoolProviderClassWithExtraProps() throws java.lang.Exception
    {
        org.quartz.utils.C3p0PoolingConnectionProviderTest r0;
        org.quartz.utils.DBConnectionManager r1;
        org.quartz.utils.ConnectionProvider r2;
        com.mchange.v2.c3p0.ComboPooledDataSource r3;
        org.quartz.utils.C3p0PoolingConnectionProvider $r4;
        java.lang.String $r5, $r7, $r8, $r10, $r12;
        org.hamcrest.Matcher $r6, $r9, $r11, $r13, $r16, $r19, $r22, $r25, $r28;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Integer $r14, $r15, $r17, $r18, $r20, $r21, $r23, $r24, $r26, $r27;

        r0 := @this: org.quartz.utils.C3p0PoolingConnectionProviderTest;

        r1 = staticinvoke <org.quartz.utils.DBConnectionManager: org.quartz.utils.DBConnectionManager getInstance()>();

        r2 = virtualinvoke r1.<org.quartz.utils.DBConnectionManager: org.quartz.utils.ConnectionProvider getConnectionProvider(java.lang.String)>("myDS");

        $r4 = (org.quartz.utils.C3p0PoolingConnectionProvider) r2;

        r3 = virtualinvoke $r4.<org.quartz.utils.C3p0PoolingConnectionProvider: com.mchange.v2.c3p0.ComboPooledDataSource getDataSource()>();

        $r5 = virtualinvoke r3.<com.mchange.v2.c3p0.ComboPooledDataSource: java.lang.String getDriverClass()>();

        $r6 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("org.apache.derby.jdbc.ClientDriver");

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r5, $r6);

        $r7 = virtualinvoke r3.<com.mchange.v2.c3p0.ComboPooledDataSource: java.lang.String getJdbcUrl()>();

        $r8 = <org.quartz.integrations.tests.JdbcQuartzDerbyUtilities: java.lang.String DATABASE_CONNECTION_PREFIX>;

        $r9 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r8);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r7, $r9);

        $r10 = virtualinvoke r3.<com.mchange.v2.c3p0.ComboPooledDataSource: java.lang.String getUser()>();

        $r11 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("quartz");

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r10, $r11);

        $r12 = virtualinvoke r3.<com.mchange.v2.c3p0.ComboPooledDataSource: java.lang.String getPassword()>();

        $r13 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("quartz");

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r12, $r13);

        $i0 = virtualinvoke r3.<com.mchange.v2.c3p0.ComboPooledDataSource: int getMaxPoolSize()>();

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r16 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r15);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r14, $r16);

        $i1 = virtualinvoke r3.<com.mchange.v2.c3p0.ComboPooledDataSource: int getMinPoolSize()>();

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r19 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r18);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r17, $r19);

        $i2 = virtualinvoke r3.<com.mchange.v2.c3p0.ComboPooledDataSource: int getAcquireIncrement()>();

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r22 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r21);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r20, $r22);

        $i3 = virtualinvoke r3.<com.mchange.v2.c3p0.ComboPooledDataSource: int getAcquireRetryAttempts()>();

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r25 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r24);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r23, $r25);

        $i4 = virtualinvoke r3.<com.mchange.v2.c3p0.ComboPooledDataSource: int getAcquireRetryDelay()>();

        $r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3000);

        $r28 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r27);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r26, $r28);

        return;
    }

    protected java.util.Properties createSchedulerProperties()
    {
        org.quartz.utils.C3p0PoolingConnectionProviderTest r0;
        java.util.Properties $r2;
        boolean $z0;
        java.lang.String $r18;

        r0 := @this: org.quartz.utils.C3p0PoolingConnectionProviderTest;

        $r2 = new java.util.Properties;

        specialinvoke $r2.<java.util.Properties: void <init>()>();

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.scheduler.instanceName", "TestScheduler");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.scheduler.instanceId", "AUTO");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.scheduler.skipUpdateCheck", "true");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.threadPool.class", "org.quartz.simpl.SimpleThreadPool");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.threadPool.threadCount", "12");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.threadPool.threadPriority", "5");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.jobStore.misfireThreshold", "10000");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.jobStore.class", "org.quartz.impl.jdbcjobstore.JobStoreTX");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.jobStore.driverDelegateClass", "org.quartz.impl.jdbcjobstore.StdJDBCDelegate");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.jobStore.useProperties", "true");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.jobStore.dataSource", "myDS");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.jobStore.tablePrefix", "QRTZ_");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.jobStore.isClustered", "false");

        $z0 = r0.<org.quartz.utils.C3p0PoolingConnectionProviderTest: boolean testConnectionProviderClass>;

        if $z0 == 0 goto label1;

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.dataSource.myDS.connectionProvider.class", "org.quartz.utils.PoolingConnectionProvider");

     label1:
        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.dataSource.myDS.provider", "c3p0");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.dataSource.myDS.driver", "org.apache.derby.jdbc.ClientDriver");

        $r18 = <org.quartz.integrations.tests.JdbcQuartzDerbyUtilities: java.lang.String DATABASE_CONNECTION_PREFIX>;

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.dataSource.myDS.URL", $r18);

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.dataSource.myDS.user", "quartz");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.dataSource.myDS.password", "quartz");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.dataSource.myDS.maxConnections", "5");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.dataSource.myDS.minPoolSize", "5");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.dataSource.myDS.acquireIncrement", "5");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.dataSource.myDS.acquireRetryAttempts", "3");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.dataSource.myDS.acquireRetryDelay", "3000");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.dataSource.myDS.maxIdleTime", "60");

        return $r2;
    }
}
