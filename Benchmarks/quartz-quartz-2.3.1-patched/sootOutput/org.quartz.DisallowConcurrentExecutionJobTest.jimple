public class org.quartz.DisallowConcurrentExecutionJobTest extends java.lang.Object
{
    private static final long JOB_BLOCK_TIME;
    private static final java.lang.String BARRIER;
    private static final java.lang.String DATE_STAMPS;

    public void <init>()
    {
        org.quartz.DisallowConcurrentExecutionJobTest r0;

        r0 := @this: org.quartz.DisallowConcurrentExecutionJobTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testNoConcurrentExecOnSameJob() throws java.lang.Exception
    {
        org.quartz.DisallowConcurrentExecutionJobTest r0;
        java.util.List r1;
        org.quartz.JobDetail r4;
        org.quartz.Trigger r5, r6;
        org.quartz.Scheduler r8;
        long l0, l1, $l2, $l3, $l5;
        java.util.ArrayList $r9;
        java.util.concurrent.CyclicBarrier $r10;
        java.util.Date $r11, $r39, $r41;
        org.quartz.JobBuilder $r12, $r13;
        org.quartz.TriggerBuilder $r14, $r16, $r17, $r18, $r20, $r21, $r23;
        org.quartz.SimpleScheduleBuilder $r15, $r19;
        org.quartz.JobKey $r22;
        java.util.Properties $r24;
        org.quartz.impl.StdSchedulerFactory $r27;
        org.quartz.SchedulerContext $r28, $r30;
        org.quartz.ListenerManager $r32;
        org.quartz.DisallowConcurrentExecutionJobTest$TestJobListener $r33;
        java.util.concurrent.TimeUnit $r36;
        org.hamcrest.Matcher $r37, $r44;
        java.lang.Object $r38, $r40;
        java.lang.Long $r42, $r43;

        r0 := @this: org.quartz.DisallowConcurrentExecutionJobTest;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r1 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>($r9);

        $r10 = new java.util.concurrent.CyclicBarrier;

        specialinvoke $r10.<java.util.concurrent.CyclicBarrier: void <init>(int)>(2);

        $r11 = new java.util.Date;

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l3 = $l2 + 100L;

        specialinvoke $r11.<java.util.Date: void <init>(long)>($l3);

        $r12 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob(java.lang.Class)>(class "Lorg/quartz/DisallowConcurrentExecutionJobTest$TestJob;");

        $r13 = virtualinvoke $r12.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String)>("job1");

        r4 = virtualinvoke $r13.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        $r14 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r15 = staticinvoke <org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder simpleSchedule()>();

        $r16 = virtualinvoke $r14.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>($r15);

        $r17 = virtualinvoke $r16.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder startAt(java.util.Date)>($r11);

        r5 = virtualinvoke $r17.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        $r18 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r19 = staticinvoke <org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder simpleSchedule()>();

        $r20 = virtualinvoke $r18.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>($r19);

        $r21 = virtualinvoke $r20.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder startAt(java.util.Date)>($r11);

        $r22 = interfaceinvoke r4.<org.quartz.JobDetail: org.quartz.JobKey getKey()>();

        $r23 = virtualinvoke $r21.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder forJob(org.quartz.JobKey)>($r22);

        r6 = virtualinvoke $r23.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        $r24 = new java.util.Properties;

        specialinvoke $r24.<java.util.Properties: void <init>()>();

        virtualinvoke $r24.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("org.quartz.scheduler.idleWaitTime", "1500");

        virtualinvoke $r24.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("org.quartz.threadPool.threadCount", "2");

        $r27 = new org.quartz.impl.StdSchedulerFactory;

        specialinvoke $r27.<org.quartz.impl.StdSchedulerFactory: void <init>(java.util.Properties)>($r24);

        r8 = virtualinvoke $r27.<org.quartz.impl.StdSchedulerFactory: org.quartz.Scheduler getScheduler()>();

        $r28 = interfaceinvoke r8.<org.quartz.Scheduler: org.quartz.SchedulerContext getContext()>();

        virtualinvoke $r28.<org.quartz.SchedulerContext: java.lang.Object put(java.lang.String,java.lang.Object)>("BARRIER", $r10);

        $r30 = interfaceinvoke r8.<org.quartz.Scheduler: org.quartz.SchedulerContext getContext()>();

        virtualinvoke $r30.<org.quartz.SchedulerContext: java.lang.Object put(java.lang.String,java.lang.Object)>("DATE_STAMPS", r1);

        $r32 = interfaceinvoke r8.<org.quartz.Scheduler: org.quartz.ListenerManager getListenerManager()>();

        $r33 = new org.quartz.DisallowConcurrentExecutionJobTest$TestJobListener;

        specialinvoke $r33.<org.quartz.DisallowConcurrentExecutionJobTest$TestJobListener: void <init>(int)>(2);

        interfaceinvoke $r32.<org.quartz.ListenerManager: void addJobListener(org.quartz.JobListener)>($r33);

        interfaceinvoke r8.<org.quartz.Scheduler: java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)>(r4, r5);

        interfaceinvoke r8.<org.quartz.Scheduler: java.util.Date scheduleJob(org.quartz.Trigger)>(r6);

        interfaceinvoke r8.<org.quartz.Scheduler: void start()>();

        $r36 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        virtualinvoke $r10.<java.util.concurrent.CyclicBarrier: int await(long,java.util.concurrent.TimeUnit)>(125L, $r36);

        interfaceinvoke r8.<org.quartz.Scheduler: void shutdown(boolean)>(1);

        $r37 = staticinvoke <org.hamcrest.collection.IsCollectionWithSize: org.hamcrest.Matcher hasSize(int)>(2);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r1, $r37);

        $r38 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        $r39 = (java.util.Date) $r38;

        l0 = virtualinvoke $r39.<java.util.Date: long getTime()>();

        $r40 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(1);

        $r41 = (java.util.Date) $r40;

        l1 = virtualinvoke $r41.<java.util.Date: long getTime()>();

        $l5 = l1 - l0;

        $r42 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l5);

        $r43 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(300L);

        $r44 = staticinvoke <org.hamcrest.number.OrderingComparison: org.hamcrest.Matcher greaterThanOrEqualTo(java.lang.Comparable)>($r43);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r42, $r44);

        return;
    }

    public void testNoConcurrentExecOnSameJobWithBatching() throws java.lang.Exception
    {
        org.quartz.DisallowConcurrentExecutionJobTest r0;
        java.util.List r1;
        org.quartz.JobDetail r4;
        org.quartz.Trigger r5, r6;
        org.quartz.Scheduler r8;
        long l0, l1, $l2, $l3, $l5;
        java.util.ArrayList $r9;
        java.util.concurrent.CyclicBarrier $r10;
        java.util.Date $r11, $r40, $r42;
        org.quartz.JobBuilder $r12, $r13;
        org.quartz.TriggerBuilder $r14, $r16, $r17, $r18, $r20, $r21, $r23;
        org.quartz.SimpleScheduleBuilder $r15, $r19;
        org.quartz.JobKey $r22;
        java.util.Properties $r24;
        org.quartz.impl.StdSchedulerFactory $r28;
        org.quartz.SchedulerContext $r29, $r31;
        org.quartz.ListenerManager $r33;
        org.quartz.DisallowConcurrentExecutionJobTest$TestJobListener $r34;
        java.util.concurrent.TimeUnit $r37;
        org.hamcrest.Matcher $r38, $r45;
        java.lang.Object $r39, $r41;
        java.lang.Long $r43, $r44;

        r0 := @this: org.quartz.DisallowConcurrentExecutionJobTest;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r1 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>($r9);

        $r10 = new java.util.concurrent.CyclicBarrier;

        specialinvoke $r10.<java.util.concurrent.CyclicBarrier: void <init>(int)>(2);

        $r11 = new java.util.Date;

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l3 = $l2 + 100L;

        specialinvoke $r11.<java.util.Date: void <init>(long)>($l3);

        $r12 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob(java.lang.Class)>(class "Lorg/quartz/DisallowConcurrentExecutionJobTest$TestJob;");

        $r13 = virtualinvoke $r12.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String)>("job1");

        r4 = virtualinvoke $r13.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        $r14 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r15 = staticinvoke <org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder simpleSchedule()>();

        $r16 = virtualinvoke $r14.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>($r15);

        $r17 = virtualinvoke $r16.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder startAt(java.util.Date)>($r11);

        r5 = virtualinvoke $r17.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        $r18 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r19 = staticinvoke <org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder simpleSchedule()>();

        $r20 = virtualinvoke $r18.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>($r19);

        $r21 = virtualinvoke $r20.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder startAt(java.util.Date)>($r11);

        $r22 = interfaceinvoke r4.<org.quartz.JobDetail: org.quartz.JobKey getKey()>();

        $r23 = virtualinvoke $r21.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder forJob(org.quartz.JobKey)>($r22);

        r6 = virtualinvoke $r23.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        $r24 = new java.util.Properties;

        specialinvoke $r24.<java.util.Properties: void <init>()>();

        virtualinvoke $r24.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("org.quartz.scheduler.idleWaitTime", "1500");

        virtualinvoke $r24.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("org.quartz.scheduler.batchTriggerAcquisitionMaxCount", "2");

        virtualinvoke $r24.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("org.quartz.threadPool.threadCount", "2");

        $r28 = new org.quartz.impl.StdSchedulerFactory;

        specialinvoke $r28.<org.quartz.impl.StdSchedulerFactory: void <init>(java.util.Properties)>($r24);

        r8 = virtualinvoke $r28.<org.quartz.impl.StdSchedulerFactory: org.quartz.Scheduler getScheduler()>();

        $r29 = interfaceinvoke r8.<org.quartz.Scheduler: org.quartz.SchedulerContext getContext()>();

        virtualinvoke $r29.<org.quartz.SchedulerContext: java.lang.Object put(java.lang.String,java.lang.Object)>("BARRIER", $r10);

        $r31 = interfaceinvoke r8.<org.quartz.Scheduler: org.quartz.SchedulerContext getContext()>();

        virtualinvoke $r31.<org.quartz.SchedulerContext: java.lang.Object put(java.lang.String,java.lang.Object)>("DATE_STAMPS", r1);

        $r33 = interfaceinvoke r8.<org.quartz.Scheduler: org.quartz.ListenerManager getListenerManager()>();

        $r34 = new org.quartz.DisallowConcurrentExecutionJobTest$TestJobListener;

        specialinvoke $r34.<org.quartz.DisallowConcurrentExecutionJobTest$TestJobListener: void <init>(int)>(2);

        interfaceinvoke $r33.<org.quartz.ListenerManager: void addJobListener(org.quartz.JobListener)>($r34);

        interfaceinvoke r8.<org.quartz.Scheduler: java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)>(r4, r5);

        interfaceinvoke r8.<org.quartz.Scheduler: java.util.Date scheduleJob(org.quartz.Trigger)>(r6);

        interfaceinvoke r8.<org.quartz.Scheduler: void start()>();

        $r37 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        virtualinvoke $r10.<java.util.concurrent.CyclicBarrier: int await(long,java.util.concurrent.TimeUnit)>(125L, $r37);

        interfaceinvoke r8.<org.quartz.Scheduler: void shutdown(boolean)>(1);

        $r38 = staticinvoke <org.hamcrest.collection.IsCollectionWithSize: org.hamcrest.Matcher hasSize(int)>(2);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r1, $r38);

        $r39 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        $r40 = (java.util.Date) $r39;

        l0 = virtualinvoke $r40.<java.util.Date: long getTime()>();

        $r41 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(1);

        $r42 = (java.util.Date) $r41;

        l1 = virtualinvoke $r42.<java.util.Date: long getTime()>();

        $l5 = l1 - l0;

        $r43 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l5);

        $r44 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(300L);

        $r45 = staticinvoke <org.hamcrest.number.OrderingComparison: org.hamcrest.Matcher greaterThanOrEqualTo(java.lang.Comparable)>($r44);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r43, $r45);

        return;
    }

    public static void <clinit>()
    {
        <org.quartz.DisallowConcurrentExecutionJobTest: java.lang.String DATE_STAMPS> = "DATE_STAMPS";

        <org.quartz.DisallowConcurrentExecutionJobTest: java.lang.String BARRIER> = "BARRIER";

        <org.quartz.DisallowConcurrentExecutionJobTest: long JOB_BLOCK_TIME> = 300L;

        return;
    }
}
