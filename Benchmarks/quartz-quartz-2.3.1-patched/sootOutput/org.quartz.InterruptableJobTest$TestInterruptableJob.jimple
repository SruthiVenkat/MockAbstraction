public class org.quartz.InterruptableJobTest$TestInterruptableJob extends java.lang.Object implements org.quartz.InterruptableJob
{
    public static final java.util.concurrent.atomic.AtomicBoolean interrupted;

    public void <init>()
    {
        org.quartz.InterruptableJobTest$TestInterruptableJob r0;

        r0 := @this: org.quartz.InterruptableJobTest$TestInterruptableJob;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void execute(org.quartz.JobExecutionContext) throws org.quartz.JobExecutionException
    {
        org.quartz.InterruptableJobTest$TestInterruptableJob r0;
        org.quartz.JobExecutionContext r1;
        java.io.PrintStream $r3, $r6, $r13;
        java.util.concurrent.CyclicBarrier $r4, $r11;
        java.lang.StringBuilder $r5, $r7, $r9;
        java.util.concurrent.atomic.AtomicBoolean $r8, $r12;
        java.lang.String $r10;
        boolean $z0;
        java.util.concurrent.BrokenBarrierException $r14, $r17;
        java.lang.InterruptedException $r15, $r16, $r18;
        int i2;

        r0 := @this: org.quartz.InterruptableJobTest$TestInterruptableJob;

        r1 := @parameter0: org.quartz.JobExecutionContext;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("TestInterruptableJob is executing.");

     label01:
        $r4 = <org.quartz.InterruptableJobTest: java.util.concurrent.CyclicBarrier sync>;

        virtualinvoke $r4.<java.util.concurrent.CyclicBarrier: int await()>();

     label02:
        goto label05;

     label03:
        $r18 := @caughtexception;

        goto label05;

     label04:
        $r17 := @caughtexception;

     label05:
        i2 = 0;

     label06:
        if i2 >= 200 goto label12;

     label07:
        staticinvoke <java.lang.Thread: void sleep(long)>(50L);

     label08:
        goto label10;

     label09:
        $r16 := @caughtexception;

     label10:
        $r12 = <org.quartz.InterruptableJobTest$TestInterruptableJob: java.util.concurrent.atomic.AtomicBoolean interrupted>;

        $z0 = virtualinvoke $r12.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 == 0 goto label11;

        $r13 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>("TestInterruptableJob main loop detected interrupt signal.");

        goto label12;

     label11:
        i2 = i2 + 1;

        goto label06;

     label12:
        $r6 = <java.lang.System: java.io.PrintStream out>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("TestInterruptableJob exiting with interrupted = ");

        $r8 = <org.quartz.InterruptableJobTest$TestInterruptableJob: java.util.concurrent.atomic.AtomicBoolean interrupted>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r10);

        $r11 = <org.quartz.InterruptableJobTest: java.util.concurrent.CyclicBarrier sync>;

        virtualinvoke $r11.<java.util.concurrent.CyclicBarrier: int await()>();

     label13:
        goto label16;

     label14:
        $r15 := @caughtexception;

        goto label16;

     label15:
        $r14 := @caughtexception;

     label16:
        return;

        catch java.lang.InterruptedException from label01 to label02 with label03;
        catch java.util.concurrent.BrokenBarrierException from label01 to label02 with label04;
        catch java.lang.InterruptedException from label07 to label08 with label09;
        catch java.lang.InterruptedException from label12 to label13 with label14;
        catch java.util.concurrent.BrokenBarrierException from label12 to label13 with label15;
    }

    public void interrupt() throws org.quartz.UnableToInterruptJobException
    {
        org.quartz.InterruptableJobTest$TestInterruptableJob r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        java.io.PrintStream $r2;

        r0 := @this: org.quartz.InterruptableJobTest$TestInterruptableJob;

        $r1 = <org.quartz.InterruptableJobTest$TestInterruptableJob: java.util.concurrent.atomic.AtomicBoolean interrupted>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        $r2 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("TestInterruptableJob.interrupt() called.");

        return;
    }

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicBoolean $r0;

        $r0 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        <org.quartz.InterruptableJobTest$TestInterruptableJob: java.util.concurrent.atomic.AtomicBoolean interrupted> = $r0;

        return;
    }
}
