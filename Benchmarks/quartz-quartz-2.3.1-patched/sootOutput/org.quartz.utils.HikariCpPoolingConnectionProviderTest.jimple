public class org.quartz.utils.HikariCpPoolingConnectionProviderTest extends org.quartz.integrations.tests.QuartzDatabaseTestSupport
{
    boolean testConnectionProviderClass;

    public void <init>()
    {
        org.quartz.utils.HikariCpPoolingConnectionProviderTest r0;

        r0 := @this: org.quartz.utils.HikariCpPoolingConnectionProviderTest;

        specialinvoke r0.<org.quartz.integrations.tests.QuartzDatabaseTestSupport: void <init>()>();

        r0.<org.quartz.utils.HikariCpPoolingConnectionProviderTest: boolean testConnectionProviderClass> = 0;

        return;
    }

    public void testHikariCpPoolProviderWithExtraProps() throws java.lang.Exception
    {
        org.quartz.utils.HikariCpPoolingConnectionProviderTest r0;

        r0 := @this: org.quartz.utils.HikariCpPoolingConnectionProviderTest;

        specialinvoke r0.<org.quartz.utils.HikariCpPoolingConnectionProviderTest: void validateHikariCpPoolProviderClassWithExtraProps()>();

        r0.<org.quartz.utils.HikariCpPoolingConnectionProviderTest: boolean testConnectionProviderClass> = 1;

        return;
    }

    public void testHikariCpPoolProviderClassWithExtraProps() throws java.lang.Exception
    {
        org.quartz.utils.HikariCpPoolingConnectionProviderTest r0;

        r0 := @this: org.quartz.utils.HikariCpPoolingConnectionProviderTest;

        specialinvoke r0.<org.quartz.utils.HikariCpPoolingConnectionProviderTest: void validateHikariCpPoolProviderClassWithExtraProps()>();

        r0.<org.quartz.utils.HikariCpPoolingConnectionProviderTest: boolean testConnectionProviderClass> = 0;

        return;
    }

    private void validateHikariCpPoolProviderClassWithExtraProps() throws java.lang.Exception
    {
        org.quartz.utils.HikariCpPoolingConnectionProviderTest r0;
        org.quartz.utils.DBConnectionManager r1;
        org.quartz.utils.ConnectionProvider r2;
        com.zaxxer.hikari.HikariDataSource r3;
        org.quartz.utils.HikariCpPoolingConnectionProvider $r4;
        java.lang.String $r5, $r7, $r8, $r10, $r12, $r17;
        org.hamcrest.Matcher $r6, $r9, $r11, $r13, $r16, $r18, $r21, $r24;
        int $i0;
        java.lang.Integer $r14, $r15;
        boolean $z0, $z1;
        java.lang.Boolean $r19, $r20, $r22, $r23;

        r0 := @this: org.quartz.utils.HikariCpPoolingConnectionProviderTest;

        r1 = staticinvoke <org.quartz.utils.DBConnectionManager: org.quartz.utils.DBConnectionManager getInstance()>();

        r2 = virtualinvoke r1.<org.quartz.utils.DBConnectionManager: org.quartz.utils.ConnectionProvider getConnectionProvider(java.lang.String)>("myDS");

        $r4 = (org.quartz.utils.HikariCpPoolingConnectionProvider) r2;

        r3 = virtualinvoke $r4.<org.quartz.utils.HikariCpPoolingConnectionProvider: com.zaxxer.hikari.HikariDataSource getDataSource()>();

        $r5 = virtualinvoke r3.<com.zaxxer.hikari.HikariDataSource: java.lang.String getDriverClassName()>();

        $r6 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("org.apache.derby.jdbc.ClientDriver");

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r5, $r6);

        $r7 = virtualinvoke r3.<com.zaxxer.hikari.HikariDataSource: java.lang.String getJdbcUrl()>();

        $r8 = <org.quartz.integrations.tests.JdbcQuartzDerbyUtilities: java.lang.String DATABASE_CONNECTION_PREFIX>;

        $r9 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r8);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r7, $r9);

        $r10 = virtualinvoke r3.<com.zaxxer.hikari.HikariDataSource: java.lang.String getUsername()>();

        $r11 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("quartz");

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r10, $r11);

        $r12 = virtualinvoke r3.<com.zaxxer.hikari.HikariDataSource: java.lang.String getPassword()>();

        $r13 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("quartz");

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r12, $r13);

        $i0 = virtualinvoke r3.<com.zaxxer.hikari.HikariDataSource: int getMaximumPoolSize()>();

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r16 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r15);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r14, $r16);

        $r17 = virtualinvoke r3.<com.zaxxer.hikari.HikariDataSource: java.lang.String getTransactionIsolation()>();

        $r18 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("TRANSACTION_REPEATABLE_READ");

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r17, $r18);

        $z0 = virtualinvoke r3.<com.zaxxer.hikari.HikariDataSource: boolean isReadOnly()>();

        $r19 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r20 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r21 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r20);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r19, $r21);

        $z1 = virtualinvoke r3.<com.zaxxer.hikari.HikariDataSource: boolean isAutoCommit()>();

        $r22 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        $r23 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r24 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r23);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r22, $r24);

        return;
    }

    protected java.util.Properties createSchedulerProperties()
    {
        org.quartz.utils.HikariCpPoolingConnectionProviderTest r0;
        java.util.Properties $r2;
        boolean $z0;
        java.lang.String $r19;

        r0 := @this: org.quartz.utils.HikariCpPoolingConnectionProviderTest;

        $r2 = new java.util.Properties;

        specialinvoke $r2.<java.util.Properties: void <init>()>();

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.scheduler.instanceName", "TestScheduler");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.scheduler.instanceId", "AUTO");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.scheduler.skipUpdateCheck", "true");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.threadPool.class", "org.quartz.simpl.SimpleThreadPool");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.threadPool.threadCount", "12");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.threadPool.threadPriority", "5");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.jobStore.misfireThreshold", "10000");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.jobStore.class", "org.quartz.impl.jdbcjobstore.JobStoreTX");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.jobStore.driverDelegateClass", "org.quartz.impl.jdbcjobstore.StdJDBCDelegate");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.jobStore.useProperties", "true");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.jobStore.dataSource", "myDS");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.jobStore.tablePrefix", "QRTZ_");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.jobStore.isClustered", "false");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.dataSource.myDS.provider", "hikaricp");

        $z0 = r0.<org.quartz.utils.HikariCpPoolingConnectionProviderTest: boolean testConnectionProviderClass>;

        if $z0 == 0 goto label1;

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.dataSource.myDS.connectionProvider.class", "org.quartz.utils.HikariCpPoolingConnectionProvider");

     label1:
        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.dataSource.myDS.provider", "hikaricp");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.dataSource.myDS.driver", "org.apache.derby.jdbc.ClientDriver");

        $r19 = <org.quartz.integrations.tests.JdbcQuartzDerbyUtilities: java.lang.String DATABASE_CONNECTION_PREFIX>;

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.dataSource.myDS.URL", $r19);

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.dataSource.myDS.username", "quartz");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.dataSource.myDS.password", "quartz");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.dataSource.myDS.maxConnections", "5");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.dataSource.myDS.transactionIsolation", "TRANSACTION_REPEATABLE_READ");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.dataSource.myDS.readOnly", "false");

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.dataSource.myDS.autoCommit", "false");

        return $r2;
    }
}
