public class org.quartz.xml.XMLSchedulingDataProcessorTest extends junit.framework.TestCase
{

    public void <init>()
    {
        org.quartz.xml.XMLSchedulingDataProcessorTest r0;

        r0 := @this: org.quartz.xml.XMLSchedulingDataProcessorTest;

        specialinvoke r0.<junit.framework.TestCase: void <init>()>();

        return;
    }

    public void testOverwriteFlag() throws java.lang.Exception
    {
        org.quartz.xml.XMLSchedulingDataProcessorTest r0;
        org.quartz.Trigger r3;
        java.io.File $r7;
        org.quartz.impl.StdSchedulerFactory $r8;
        org.quartz.JobBuilder $r9, $r10, $r11;
        org.quartz.TriggerBuilder $r12, $r13, $r15;
        org.quartz.SimpleScheduleBuilder $r14;
        org.quartz.simpl.CascadingClassLoadHelper $r17;
        org.quartz.xml.XMLSchedulingDataProcessor $r18;
        org.quartz.impl.matchers.GroupMatcher $r19, $r21;
        java.util.Set $r20, $r22;
        int $i0, $i1;
        org.quartz.JobKey $r23;
        org.quartz.JobDataMap $r24;
        boolean $z0, $z1, $z2, $z3;
        java.lang.RuntimeException $r25, $r31;
        java.lang.StringBuilder $r26, $r27, $r28, $r32, $r33, $r34;
        java.lang.String $r29, $r35, r41;
        java.lang.Throwable $r30;
        org.quartz.ObjectAlreadyExistsException $r36;
        org.quartz.Scheduler r37;
        org.quartz.JobDetail r38, r40;

        r0 := @this: org.quartz.xml.XMLSchedulingDataProcessorTest;

        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.lang.String)>("quartz_data.xml");

        specialinvoke r0.<org.quartz.xml.XMLSchedulingDataProcessorTest: void copyResourceToFile(java.lang.String,java.io.File)>("/org/quartz/xml/simple-job-trigger.xml", $r7);

        r37 = null;

     label01:
        $r8 = new org.quartz.impl.StdSchedulerFactory;

        specialinvoke $r8.<org.quartz.impl.StdSchedulerFactory: void <init>(java.lang.String)>("org/quartz/xml/quartz-test.properties");

        r37 = virtualinvoke $r8.<org.quartz.impl.StdSchedulerFactory: org.quartz.Scheduler getScheduler()>();

        $r9 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob(java.lang.Class)>(class "Lorg/quartz/xml/XMLSchedulingDataProcessorTest$MyJob;");

        $r10 = virtualinvoke $r9.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String)>("job1");

        $r11 = virtualinvoke $r10.<org.quartz.JobBuilder: org.quartz.JobBuilder usingJobData(java.lang.String,java.lang.String)>("foo", "dont_chg_me");

        r38 = virtualinvoke $r11.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        $r12 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r13 = virtualinvoke $r12.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String)>("job1");

        $r14 = staticinvoke <org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder repeatHourlyForever()>();

        $r15 = virtualinvoke $r13.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>($r14);

        r3 = virtualinvoke $r15.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        interfaceinvoke r37.<org.quartz.Scheduler: java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)>(r38, r3);

        $r17 = new org.quartz.simpl.CascadingClassLoadHelper;

        specialinvoke $r17.<org.quartz.simpl.CascadingClassLoadHelper: void <init>()>();

        interfaceinvoke $r17.<org.quartz.spi.ClassLoadHelper: void initialize()>();

        $r18 = new org.quartz.xml.XMLSchedulingDataProcessor;

        specialinvoke $r18.<org.quartz.xml.XMLSchedulingDataProcessor: void <init>(org.quartz.spi.ClassLoadHelper)>($r17);

     label02:
        virtualinvoke $r18.<org.quartz.xml.XMLSchedulingDataProcessor: void processFileAndScheduleJobs(org.quartz.Scheduler,boolean)>(r37, 0);

        staticinvoke <org.quartz.xml.XMLSchedulingDataProcessorTest: void fail(java.lang.String)>("OverWriteExisting flag didn\'t work. We should get Exception when overwrite is set to false.");

     label03:
        goto label05;

     label04:
        $r36 := @caughtexception;

     label05:
        $r19 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher jobGroupEquals(java.lang.String)>("DEFAULT");

        $r20 = interfaceinvoke r37.<org.quartz.Scheduler: java.util.Set getJobKeys(org.quartz.impl.matchers.GroupMatcher)>($r19);

        $i0 = interfaceinvoke $r20.<java.util.Set: int size()>();

        staticinvoke <org.quartz.xml.XMLSchedulingDataProcessorTest: void assertEquals(int,int)>(1, $i0);

        $r21 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher triggerGroupEquals(java.lang.String)>("DEFAULT");

        $r22 = interfaceinvoke r37.<org.quartz.Scheduler: java.util.Set getTriggerKeys(org.quartz.impl.matchers.GroupMatcher)>($r21);

        $i1 = interfaceinvoke $r22.<java.util.Set: int size()>();

        staticinvoke <org.quartz.xml.XMLSchedulingDataProcessorTest: void assertEquals(int,int)>(1, $i1);

        $r23 = staticinvoke <org.quartz.JobKey: org.quartz.JobKey jobKey(java.lang.String)>("job1");

        r40 = interfaceinvoke r37.<org.quartz.Scheduler: org.quartz.JobDetail getJobDetail(org.quartz.JobKey)>($r23);

        $r24 = interfaceinvoke r40.<org.quartz.JobDetail: org.quartz.JobDataMap getJobDataMap()>();

        r41 = virtualinvoke $r24.<org.quartz.JobDataMap: java.lang.String getString(java.lang.String)>("foo");

        staticinvoke <org.quartz.xml.XMLSchedulingDataProcessorTest: void assertEquals(java.lang.String,java.lang.String)>("dont_chg_me", r41);

     label06:
        $z0 = virtualinvoke $r7.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label07;

        $z1 = virtualinvoke $r7.<java.io.File: boolean delete()>();

        if $z1 != 0 goto label07;

        $r25 = new java.lang.RuntimeException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to remove test file ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.lang.RuntimeException: void <init>(java.lang.String)>($r29);

        throw $r25;

     label07:
        if r37 == null goto label12;

        interfaceinvoke r37.<org.quartz.Scheduler: void shutdown()>();

        goto label12;

     label08:
        $r30 := @caughtexception;

     label09:
        $z2 = virtualinvoke $r7.<java.io.File: boolean exists()>();

        if $z2 == 0 goto label10;

        $z3 = virtualinvoke $r7.<java.io.File: boolean delete()>();

        if $z3 != 0 goto label10;

        $r31 = new java.lang.RuntimeException;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to remove test file ");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r31.<java.lang.RuntimeException: void <init>(java.lang.String)>($r35);

        throw $r31;

     label10:
        if r37 == null goto label11;

        interfaceinvoke r37.<org.quartz.Scheduler: void shutdown()>();

     label11:
        throw $r30;

     label12:
        return;

        catch org.quartz.ObjectAlreadyExistsException from label02 to label03 with label04;
        catch java.lang.Throwable from label01 to label06 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    private void copyResourceToFile(java.lang.String, java.io.File) throws java.io.IOException
    {
        org.quartz.xml.XMLSchedulingDataProcessorTest r0;
        java.lang.String r1;
        java.io.File r2;
        byte[] r3;
        java.lang.Class $r5;
        java.io.FileOutputStream $r6, r9;
        int $i1;
        java.lang.Throwable $r7;
        java.io.InputStream r8;

        r0 := @this: org.quartz.xml.XMLSchedulingDataProcessorTest;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.File;

        r8 = null;

        r9 = null;

     label1:
        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r8 = virtualinvoke $r5.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>(r1);

        $r6 = new java.io.FileOutputStream;

        specialinvoke $r6.<java.io.FileOutputStream: void <init>(java.io.File)>(r2);

        r9 = $r6;

        r3 = newarray (byte)[5242880];

     label2:
        $i1 = virtualinvoke r8.<java.io.InputStream: int read(byte[],int,int)>(r3, 0, 5242880);

        if $i1 == -1 goto label3;

        virtualinvoke $r6.<java.io.FileOutputStream: void write(byte[],int,int)>(r3, 0, $i1);

        goto label2;

     label3:
        if $r6 == null goto label4;

        virtualinvoke $r6.<java.io.FileOutputStream: void close()>();

     label4:
        if r8 == null goto label9;

        virtualinvoke r8.<java.io.InputStream: void close()>();

        goto label9;

     label5:
        $r7 := @caughtexception;

     label6:
        if r9 == null goto label7;

        virtualinvoke r9.<java.io.FileOutputStream: void close()>();

     label7:
        if r8 == null goto label8;

        virtualinvoke r8.<java.io.InputStream: void close()>();

     label8:
        throw $r7;

     label9:
        return;

        catch java.lang.Throwable from label1 to label3 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void testDirectivesNoOverwriteWithIgnoreDups() throws java.lang.Exception
    {
        org.quartz.xml.XMLSchedulingDataProcessorTest r0;
        org.quartz.impl.StdSchedulerFactory $r5;
        org.quartz.JobBuilder $r6, $r7, $r13, $r14;
        org.quartz.TriggerBuilder $r8, $r9, $r11, $r15, $r16, $r18;
        org.quartz.SimpleScheduleBuilder $r10, $r17;
        org.quartz.simpl.CascadingClassLoadHelper $r20;
        org.quartz.xml.XMLSchedulingDataProcessor $r21;
        org.quartz.impl.matchers.GroupMatcher $r22, $r24;
        java.util.Set $r23, $r25;
        int $i0, $i1;
        java.lang.Throwable $r26;
        org.quartz.Scheduler r27;
        org.quartz.JobDetail r28, r30;
        org.quartz.Trigger r29, r31;

        r0 := @this: org.quartz.xml.XMLSchedulingDataProcessorTest;

        r27 = null;

     label1:
        $r5 = new org.quartz.impl.StdSchedulerFactory;

        specialinvoke $r5.<org.quartz.impl.StdSchedulerFactory: void <init>(java.lang.String)>("org/quartz/xml/quartz-test.properties");

        r27 = virtualinvoke $r5.<org.quartz.impl.StdSchedulerFactory: org.quartz.Scheduler getScheduler()>();

        $r6 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob(java.lang.Class)>(class "Lorg/quartz/xml/XMLSchedulingDataProcessorTest$MyJob;");

        $r7 = virtualinvoke $r6.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String)>("job1");

        r28 = virtualinvoke $r7.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        $r8 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r9 = virtualinvoke $r8.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String)>("job1");

        $r10 = staticinvoke <org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder repeatHourlyForever()>();

        $r11 = virtualinvoke $r9.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>($r10);

        r29 = virtualinvoke $r11.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        interfaceinvoke r27.<org.quartz.Scheduler: java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)>(r28, r29);

        $r13 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob(java.lang.Class)>(class "Lorg/quartz/xml/XMLSchedulingDataProcessorTest$MyJob;");

        $r14 = virtualinvoke $r13.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String)>("job2");

        r30 = virtualinvoke $r14.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        $r15 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r16 = virtualinvoke $r15.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String)>("job2");

        $r17 = staticinvoke <org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder repeatHourlyForever()>();

        $r18 = virtualinvoke $r16.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>($r17);

        r31 = virtualinvoke $r18.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        interfaceinvoke r27.<org.quartz.Scheduler: java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)>(r30, r31);

        $r20 = new org.quartz.simpl.CascadingClassLoadHelper;

        specialinvoke $r20.<org.quartz.simpl.CascadingClassLoadHelper: void <init>()>();

        interfaceinvoke $r20.<org.quartz.spi.ClassLoadHelper: void initialize()>();

        $r21 = new org.quartz.xml.XMLSchedulingDataProcessor;

        specialinvoke $r21.<org.quartz.xml.XMLSchedulingDataProcessor: void <init>(org.quartz.spi.ClassLoadHelper)>($r20);

        virtualinvoke $r21.<org.quartz.xml.XMLSchedulingDataProcessor: void processFileAndScheduleJobs(java.lang.String,org.quartz.Scheduler)>("org/quartz/xml/directives_no-overwrite_ignoredups.xml", r27);

        $r22 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher jobGroupEquals(java.lang.String)>("DEFAULT");

        $r23 = interfaceinvoke r27.<org.quartz.Scheduler: java.util.Set getJobKeys(org.quartz.impl.matchers.GroupMatcher)>($r22);

        $i0 = interfaceinvoke $r23.<java.util.Set: int size()>();

        staticinvoke <org.quartz.xml.XMLSchedulingDataProcessorTest: void assertEquals(int,int)>(2, $i0);

        $r24 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher triggerGroupEquals(java.lang.String)>("DEFAULT");

        $r25 = interfaceinvoke r27.<org.quartz.Scheduler: java.util.Set getTriggerKeys(org.quartz.impl.matchers.GroupMatcher)>($r24);

        $i1 = interfaceinvoke $r25.<java.util.Set: int size()>();

        staticinvoke <org.quartz.xml.XMLSchedulingDataProcessorTest: void assertEquals(int,int)>(2, $i1);

     label2:
        if r27 == null goto label6;

        interfaceinvoke r27.<org.quartz.Scheduler: void shutdown()>();

        goto label6;

     label3:
        $r26 := @caughtexception;

     label4:
        if r27 == null goto label5;

        interfaceinvoke r27.<org.quartz.Scheduler: void shutdown()>();

     label5:
        throw $r26;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void testDirectivesOverwriteWithNoIgnoreDups() throws java.lang.Exception
    {
        org.quartz.xml.XMLSchedulingDataProcessorTest r0;
        org.quartz.impl.StdSchedulerFactory $r5;
        org.quartz.JobBuilder $r6, $r7, $r13, $r14;
        org.quartz.TriggerBuilder $r8, $r9, $r11, $r15, $r16, $r18;
        org.quartz.SimpleScheduleBuilder $r10, $r17;
        org.quartz.simpl.CascadingClassLoadHelper $r20;
        org.quartz.xml.XMLSchedulingDataProcessor $r21;
        org.quartz.impl.matchers.GroupMatcher $r22, $r24;
        java.util.Set $r23, $r25;
        int $i0, $i1;
        java.lang.Throwable $r26;
        org.quartz.Scheduler r27;
        org.quartz.JobDetail r28, r30;
        org.quartz.Trigger r29, r31;

        r0 := @this: org.quartz.xml.XMLSchedulingDataProcessorTest;

        r27 = null;

     label1:
        $r5 = new org.quartz.impl.StdSchedulerFactory;

        specialinvoke $r5.<org.quartz.impl.StdSchedulerFactory: void <init>(java.lang.String)>("org/quartz/xml/quartz-test.properties");

        r27 = virtualinvoke $r5.<org.quartz.impl.StdSchedulerFactory: org.quartz.Scheduler getScheduler()>();

        $r6 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob(java.lang.Class)>(class "Lorg/quartz/xml/XMLSchedulingDataProcessorTest$MyJob;");

        $r7 = virtualinvoke $r6.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String)>("job1");

        r28 = virtualinvoke $r7.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        $r8 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r9 = virtualinvoke $r8.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String)>("job1");

        $r10 = staticinvoke <org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder repeatHourlyForever()>();

        $r11 = virtualinvoke $r9.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>($r10);

        r29 = virtualinvoke $r11.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        interfaceinvoke r27.<org.quartz.Scheduler: java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)>(r28, r29);

        $r13 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob(java.lang.Class)>(class "Lorg/quartz/xml/XMLSchedulingDataProcessorTest$MyJob;");

        $r14 = virtualinvoke $r13.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String)>("job2");

        r30 = virtualinvoke $r14.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        $r15 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r16 = virtualinvoke $r15.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String)>("job2");

        $r17 = staticinvoke <org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder repeatHourlyForever()>();

        $r18 = virtualinvoke $r16.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>($r17);

        r31 = virtualinvoke $r18.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        interfaceinvoke r27.<org.quartz.Scheduler: java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)>(r30, r31);

        $r20 = new org.quartz.simpl.CascadingClassLoadHelper;

        specialinvoke $r20.<org.quartz.simpl.CascadingClassLoadHelper: void <init>()>();

        interfaceinvoke $r20.<org.quartz.spi.ClassLoadHelper: void initialize()>();

        $r21 = new org.quartz.xml.XMLSchedulingDataProcessor;

        specialinvoke $r21.<org.quartz.xml.XMLSchedulingDataProcessor: void <init>(org.quartz.spi.ClassLoadHelper)>($r20);

        virtualinvoke $r21.<org.quartz.xml.XMLSchedulingDataProcessor: void processFileAndScheduleJobs(java.lang.String,org.quartz.Scheduler)>("org/quartz/xml/directives_overwrite_no-ignoredups.xml", r27);

        $r22 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher jobGroupEquals(java.lang.String)>("DEFAULT");

        $r23 = interfaceinvoke r27.<org.quartz.Scheduler: java.util.Set getJobKeys(org.quartz.impl.matchers.GroupMatcher)>($r22);

        $i0 = interfaceinvoke $r23.<java.util.Set: int size()>();

        staticinvoke <org.quartz.xml.XMLSchedulingDataProcessorTest: void assertEquals(int,int)>(2, $i0);

        $r24 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher triggerGroupEquals(java.lang.String)>("DEFAULT");

        $r25 = interfaceinvoke r27.<org.quartz.Scheduler: java.util.Set getTriggerKeys(org.quartz.impl.matchers.GroupMatcher)>($r24);

        $i1 = interfaceinvoke $r25.<java.util.Set: int size()>();

        staticinvoke <org.quartz.xml.XMLSchedulingDataProcessorTest: void assertEquals(int,int)>(2, $i1);

     label2:
        if r27 == null goto label6;

        interfaceinvoke r27.<org.quartz.Scheduler: void shutdown()>();

        goto label6;

     label3:
        $r26 := @caughtexception;

     label4:
        if r27 == null goto label5;

        interfaceinvoke r27.<org.quartz.Scheduler: void shutdown()>();

     label5:
        throw $r26;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void testXsdSchemaValidationOnVariousTriggers() throws java.lang.Exception
    {
        org.quartz.xml.XMLSchedulingDataProcessorTest r0;
        org.quartz.impl.StdSchedulerFactory $r5;
        org.quartz.simpl.CascadingClassLoadHelper $r6;
        org.quartz.xml.XMLSchedulingDataProcessor $r7;
        org.quartz.impl.matchers.GroupMatcher $r8, $r10;
        java.util.Set $r9, $r11;
        int $i0, $i1;
        java.lang.Throwable $r12;
        org.quartz.Scheduler r13;

        r0 := @this: org.quartz.xml.XMLSchedulingDataProcessorTest;

        r13 = null;

     label1:
        $r5 = new org.quartz.impl.StdSchedulerFactory;

        specialinvoke $r5.<org.quartz.impl.StdSchedulerFactory: void <init>(java.lang.String)>("org/quartz/xml/quartz-test.properties");

        r13 = virtualinvoke $r5.<org.quartz.impl.StdSchedulerFactory: org.quartz.Scheduler getScheduler()>();

        $r6 = new org.quartz.simpl.CascadingClassLoadHelper;

        specialinvoke $r6.<org.quartz.simpl.CascadingClassLoadHelper: void <init>()>();

        interfaceinvoke $r6.<org.quartz.spi.ClassLoadHelper: void initialize()>();

        $r7 = new org.quartz.xml.XMLSchedulingDataProcessor;

        specialinvoke $r7.<org.quartz.xml.XMLSchedulingDataProcessor: void <init>(org.quartz.spi.ClassLoadHelper)>($r6);

        virtualinvoke $r7.<org.quartz.xml.XMLSchedulingDataProcessor: void processFileAndScheduleJobs(java.lang.String,org.quartz.Scheduler)>("org/quartz/xml/job-scheduling-data-2.0_trigger-samples.xml", r13);

        $r8 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher jobGroupEquals(java.lang.String)>("DEFAULT");

        $r9 = interfaceinvoke r13.<org.quartz.Scheduler: java.util.Set getJobKeys(org.quartz.impl.matchers.GroupMatcher)>($r8);

        $i0 = interfaceinvoke $r9.<java.util.Set: int size()>();

        staticinvoke <org.quartz.xml.XMLSchedulingDataProcessorTest: void assertEquals(int,int)>(1, $i0);

        $r10 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher triggerGroupEquals(java.lang.String)>("DEFAULT");

        $r11 = interfaceinvoke r13.<org.quartz.Scheduler: java.util.Set getTriggerKeys(org.quartz.impl.matchers.GroupMatcher)>($r10);

        $i1 = interfaceinvoke $r11.<java.util.Set: int size()>();

        staticinvoke <org.quartz.xml.XMLSchedulingDataProcessorTest: void assertEquals(int,int)>(35, $i1);

     label2:
        if r13 == null goto label6;

        interfaceinvoke r13.<org.quartz.Scheduler: void shutdown()>();

        goto label6;

     label3:
        $r12 := @caughtexception;

     label4:
        if r13 == null goto label5;

        interfaceinvoke r13.<org.quartz.Scheduler: void shutdown()>();

     label5:
        throw $r12;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void testQTZ327SimpleTriggerNoRepeat() throws java.lang.Exception
    {
        org.quartz.xml.XMLSchedulingDataProcessorTest r0;
        org.quartz.impl.StdSchedulerFactory $r5;
        org.quartz.simpl.CascadingClassLoadHelper $r6;
        org.quartz.xml.XMLSchedulingDataProcessor $r7;
        org.quartz.impl.matchers.GroupMatcher $r8, $r10;
        java.util.Set $r9, $r11;
        int $i0, $i1;
        java.lang.Throwable $r12;
        org.quartz.Scheduler r13;

        r0 := @this: org.quartz.xml.XMLSchedulingDataProcessorTest;

        r13 = null;

     label1:
        $r5 = new org.quartz.impl.StdSchedulerFactory;

        specialinvoke $r5.<org.quartz.impl.StdSchedulerFactory: void <init>(java.lang.String)>("org/quartz/xml/quartz-test.properties");

        r13 = virtualinvoke $r5.<org.quartz.impl.StdSchedulerFactory: org.quartz.Scheduler getScheduler()>();

        $r6 = new org.quartz.simpl.CascadingClassLoadHelper;

        specialinvoke $r6.<org.quartz.simpl.CascadingClassLoadHelper: void <init>()>();

        interfaceinvoke $r6.<org.quartz.spi.ClassLoadHelper: void initialize()>();

        $r7 = new org.quartz.xml.XMLSchedulingDataProcessor;

        specialinvoke $r7.<org.quartz.xml.XMLSchedulingDataProcessor: void <init>(org.quartz.spi.ClassLoadHelper)>($r6);

        virtualinvoke $r7.<org.quartz.xml.XMLSchedulingDataProcessor: void processFileAndScheduleJobs(java.lang.String,org.quartz.Scheduler)>("org/quartz/xml/simple-job-trigger-no-repeat.xml", r13);

        $r8 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher jobGroupEquals(java.lang.String)>("DEFAULT");

        $r9 = interfaceinvoke r13.<org.quartz.Scheduler: java.util.Set getJobKeys(org.quartz.impl.matchers.GroupMatcher)>($r8);

        $i0 = interfaceinvoke $r9.<java.util.Set: int size()>();

        staticinvoke <org.quartz.xml.XMLSchedulingDataProcessorTest: void assertEquals(int,int)>(1, $i0);

        $r10 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher triggerGroupEquals(java.lang.String)>("DEFAULT");

        $r11 = interfaceinvoke r13.<org.quartz.Scheduler: java.util.Set getTriggerKeys(org.quartz.impl.matchers.GroupMatcher)>($r10);

        $i1 = interfaceinvoke $r11.<java.util.Set: int size()>();

        staticinvoke <org.quartz.xml.XMLSchedulingDataProcessorTest: void assertEquals(int,int)>(1, $i1);

     label2:
        if r13 == null goto label6;

        interfaceinvoke r13.<org.quartz.Scheduler: void shutdown()>();

        goto label6;

     label3:
        $r12 := @caughtexception;

     label4:
        if r13 == null goto label5;

        interfaceinvoke r13.<org.quartz.Scheduler: void shutdown()>();

     label5:
        throw $r12;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private java.util.Date dateOfGMT_UTC(int, int, int, int, int, int)
    {
        org.quartz.xml.XMLSchedulingDataProcessorTest r0;
        int i0, i1, i2, i3, i4, i5;
        java.util.GregorianCalendar $r2;
        java.util.TimeZone $r3;
        java.util.Date $r4;

        r0 := @this: org.quartz.xml.XMLSchedulingDataProcessorTest;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        $r2 = new java.util.GregorianCalendar;

        $r3 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");

        specialinvoke $r2.<java.util.GregorianCalendar: void <init>(java.util.TimeZone)>($r3);

        virtualinvoke $r2.<java.util.GregorianCalendar: void set(int,int,int,int,int,int)>(i5, i4, i3, i0, i1, i2);

        virtualinvoke $r2.<java.util.GregorianCalendar: void set(int,int)>(14, 0);

        $r4 = virtualinvoke $r2.<java.util.GregorianCalendar: java.util.Date getTime()>();

        return $r4;
    }

    private java.util.Date dateOfLocalTime(int, int, int, int, int, int)
    {
        org.quartz.xml.XMLSchedulingDataProcessorTest r0;
        int i0, i1, i2, i3, i4, i5;
        java.util.GregorianCalendar $r2;
        java.util.Date $r3;

        r0 := @this: org.quartz.xml.XMLSchedulingDataProcessorTest;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        $r2 = new java.util.GregorianCalendar;

        specialinvoke $r2.<java.util.GregorianCalendar: void <init>()>();

        virtualinvoke $r2.<java.util.GregorianCalendar: void set(int,int,int,int,int,int)>(i5, i4, i3, i0, i1, i2);

        virtualinvoke $r2.<java.util.GregorianCalendar: void set(int,int)>(14, 0);

        $r3 = virtualinvoke $r2.<java.util.GregorianCalendar: java.util.Date getTime()>();

        return $r3;
    }

    public void testTimeZones() throws java.lang.Exception
    {
        org.quartz.xml.XMLSchedulingDataProcessorTest r0;
        org.quartz.impl.StdSchedulerFactory $r5;
        org.quartz.simpl.CascadingClassLoadHelper $r6;
        org.quartz.xml.XMLSchedulingDataProcessor $r7;
        org.quartz.TriggerKey $r8, $r13;
        java.util.Date $r9, $r10, $r11, $r12, $r14, $r15, $r16, $r17;
        java.lang.Throwable $r18;
        org.quartz.Scheduler r19;
        org.quartz.Trigger r20, r21;

        r0 := @this: org.quartz.xml.XMLSchedulingDataProcessorTest;

        r19 = null;

     label1:
        $r5 = new org.quartz.impl.StdSchedulerFactory;

        specialinvoke $r5.<org.quartz.impl.StdSchedulerFactory: void <init>(java.lang.String)>("org/quartz/xml/quartz-test.properties");

        r19 = virtualinvoke $r5.<org.quartz.impl.StdSchedulerFactory: org.quartz.Scheduler getScheduler()>();

        $r6 = new org.quartz.simpl.CascadingClassLoadHelper;

        specialinvoke $r6.<org.quartz.simpl.CascadingClassLoadHelper: void <init>()>();

        interfaceinvoke $r6.<org.quartz.spi.ClassLoadHelper: void initialize()>();

        $r7 = new org.quartz.xml.XMLSchedulingDataProcessor;

        specialinvoke $r7.<org.quartz.xml.XMLSchedulingDataProcessor: void <init>(org.quartz.spi.ClassLoadHelper)>($r6);

        virtualinvoke $r7.<org.quartz.xml.XMLSchedulingDataProcessor: void processFileAndScheduleJobs(java.lang.String,org.quartz.Scheduler)>("org/quartz/xml/simple-job-trigger-with-timezones.xml", r19);

        $r8 = new org.quartz.TriggerKey;

        specialinvoke $r8.<org.quartz.TriggerKey: void <init>(java.lang.String,java.lang.String)>("job1", "DEFAULT");

        r20 = interfaceinvoke r19.<org.quartz.Scheduler: org.quartz.Trigger getTrigger(org.quartz.TriggerKey)>($r8);

        staticinvoke <org.quartz.xml.XMLSchedulingDataProcessorTest: void assertNotNull(java.lang.Object)>(r20);

        $r9 = specialinvoke r0.<org.quartz.xml.XMLSchedulingDataProcessorTest: java.util.Date dateOfGMT_UTC(int,int,int,int,int,int)>(18, 0, 0, 1, 0, 2012);

        $r10 = interfaceinvoke r20.<org.quartz.Trigger: java.util.Date getStartTime()>();

        staticinvoke <org.quartz.xml.XMLSchedulingDataProcessorTest: void assertEquals(java.lang.Object,java.lang.Object)>($r9, $r10);

        $r11 = specialinvoke r0.<org.quartz.xml.XMLSchedulingDataProcessorTest: java.util.Date dateOfGMT_UTC(int,int,int,int,int,int)>(19, 0, 0, 1, 0, 2012);

        $r12 = interfaceinvoke r20.<org.quartz.Trigger: java.util.Date getEndTime()>();

        staticinvoke <org.quartz.xml.XMLSchedulingDataProcessorTest: void assertEquals(java.lang.Object,java.lang.Object)>($r11, $r12);

        $r13 = new org.quartz.TriggerKey;

        specialinvoke $r13.<org.quartz.TriggerKey: void <init>(java.lang.String,java.lang.String)>("job2", "DEFAULT");

        r21 = interfaceinvoke r19.<org.quartz.Scheduler: org.quartz.Trigger getTrigger(org.quartz.TriggerKey)>($r13);

        staticinvoke <org.quartz.xml.XMLSchedulingDataProcessorTest: void assertNotNull(java.lang.Object)>(r21);

        $r14 = specialinvoke r0.<org.quartz.xml.XMLSchedulingDataProcessorTest: java.util.Date dateOfLocalTime(int,int,int,int,int,int)>(6, 0, 0, 1, 0, 2012);

        $r15 = interfaceinvoke r21.<org.quartz.Trigger: java.util.Date getStartTime()>();

        staticinvoke <org.quartz.xml.XMLSchedulingDataProcessorTest: void assertEquals(java.lang.Object,java.lang.Object)>($r14, $r15);

        $r16 = specialinvoke r0.<org.quartz.xml.XMLSchedulingDataProcessorTest: java.util.Date dateOfGMT_UTC(int,int,int,int,int,int)>(19, 0, 0, 1, 0, 2012);

        $r17 = interfaceinvoke r21.<org.quartz.Trigger: java.util.Date getEndTime()>();

        staticinvoke <org.quartz.xml.XMLSchedulingDataProcessorTest: void assertEquals(java.lang.Object,java.lang.Object)>($r16, $r17);

     label2:
        if r19 == null goto label6;

        interfaceinvoke r19.<org.quartz.Scheduler: void shutdown()>();

        goto label6;

     label3:
        $r18 := @caughtexception;

     label4:
        if r19 == null goto label5;

        interfaceinvoke r19.<org.quartz.Scheduler: void shutdown()>();

     label5:
        throw $r18;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void testRemoveJobClassNotFound() throws java.lang.Exception
    {
        org.quartz.xml.XMLSchedulingDataProcessorTest r0;
        org.quartz.Scheduler r4;
        org.quartz.JobDetail r5, r41, r43, r45;
        org.quartz.Trigger r6, r42, r44, r46;
        org.quartz.impl.jdbcjobstore.JobStoreTX $r10;
        org.quartz.impl.DirectSchedulerFactory $r11;
        org.quartz.simpl.SimpleThreadPool $r12;
        org.quartz.impl.SchedulerRepository $r13;
        org.quartz.JobBuilder $r14, $r15, $r16;
        org.quartz.TriggerBuilder $r17, $r18, $r20;
        org.quartz.CronScheduleBuilder $r19;
        org.quartz.JobKey $r22, $r30, $r34;
        org.quartz.TriggerKey $r23, $r31, $r35;
        org.quartz.JobDataMap $r24, $r36;
        java.lang.String $r25, $r37;
        org.hamcrest.Matcher $r26, $r27, $r32, $r33, $r38, $r39;
        org.quartz.simpl.CascadingClassLoadHelper $r28;
        org.quartz.xml.XMLSchedulingDataProcessor $r29;
        java.lang.Throwable $r40;

        r0 := @this: org.quartz.xml.XMLSchedulingDataProcessorTest;

        staticinvoke <org.quartz.impl.jdbcjobstore.JdbcQuartzTestUtilities: void createDatabase(java.lang.String)>("XmlDeleteNonExistsJobTestDatasase");

        $r10 = new org.quartz.impl.jdbcjobstore.JobStoreTX;

        specialinvoke $r10.<org.quartz.impl.jdbcjobstore.JobStoreTX: void <init>()>();

        virtualinvoke $r10.<org.quartz.impl.jdbcjobstore.JobStoreTX: void setDataSource(java.lang.String)>("XmlDeleteNonExistsJobTestDatasase");

        virtualinvoke $r10.<org.quartz.impl.jdbcjobstore.JobStoreTX: void setTablePrefix(java.lang.String)>("QRTZ_");

        virtualinvoke $r10.<org.quartz.impl.jdbcjobstore.JobStoreTX: void setInstanceId(java.lang.String)>("AUTO");

        $r11 = staticinvoke <org.quartz.impl.DirectSchedulerFactory: org.quartz.impl.DirectSchedulerFactory getInstance()>();

        $r12 = new org.quartz.simpl.SimpleThreadPool;

        specialinvoke $r12.<org.quartz.simpl.SimpleThreadPool: void <init>(int,int)>(4, 5);

        virtualinvoke $r11.<org.quartz.impl.DirectSchedulerFactory: void createScheduler(java.lang.String,java.lang.String,org.quartz.spi.ThreadPool,org.quartz.spi.JobStore)>("XmlDeleteNonExistsJobTestScheduler", "AUTO", $r12, $r10);

        $r13 = staticinvoke <org.quartz.impl.SchedulerRepository: org.quartz.impl.SchedulerRepository getInstance()>();

        r4 = virtualinvoke $r13.<org.quartz.impl.SchedulerRepository: org.quartz.Scheduler lookup(java.lang.String)>("XmlDeleteNonExistsJobTestScheduler");

     label1:
        $r14 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob(java.lang.Class)>(class "Lorg/quartz/xml/XMLSchedulingDataProcessorTest$MyJob;");

        $r15 = virtualinvoke $r14.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String,java.lang.String)>("testjob1", "DEFAULT");

        $r16 = virtualinvoke $r15.<org.quartz.JobBuilder: org.quartz.JobBuilder usingJobData(java.lang.String,java.lang.String)>("foo", "foo");

        r5 = virtualinvoke $r16.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        $r17 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r18 = virtualinvoke $r17.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String,java.lang.String)>("testjob1", "DEFAULT");

        $r19 = staticinvoke <org.quartz.CronScheduleBuilder: org.quartz.CronScheduleBuilder cronSchedule(java.lang.String)>("* * * * * ?");

        $r20 = virtualinvoke $r18.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>($r19);

        r6 = virtualinvoke $r20.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        interfaceinvoke r4.<org.quartz.Scheduler: java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)>(r5, r6);

        $r22 = interfaceinvoke r5.<org.quartz.JobDetail: org.quartz.JobKey getKey()>();

        r41 = interfaceinvoke r4.<org.quartz.Scheduler: org.quartz.JobDetail getJobDetail(org.quartz.JobKey)>($r22);

        $r23 = interfaceinvoke r6.<org.quartz.Trigger: org.quartz.TriggerKey getKey()>();

        r42 = interfaceinvoke r4.<org.quartz.Scheduler: org.quartz.Trigger getTrigger(org.quartz.TriggerKey)>($r23);

        $r24 = interfaceinvoke r41.<org.quartz.JobDetail: org.quartz.JobDataMap getJobDataMap()>();

        $r25 = virtualinvoke $r24.<org.quartz.JobDataMap: java.lang.String getString(java.lang.String)>("foo");

        $r26 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("foo");

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r25, $r26);

        $r27 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher instanceOf(java.lang.Class)>(class "Lorg/quartz/CronTrigger;");

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r42, $r27);

        specialinvoke r0.<org.quartz.xml.XMLSchedulingDataProcessorTest: void modifyStoredJobClassName()>();

        $r28 = new org.quartz.simpl.CascadingClassLoadHelper;

        specialinvoke $r28.<org.quartz.simpl.CascadingClassLoadHelper: void <init>()>();

        interfaceinvoke $r28.<org.quartz.spi.ClassLoadHelper: void initialize()>();

        $r29 = new org.quartz.xml.XMLSchedulingDataProcessor;

        specialinvoke $r29.<org.quartz.xml.XMLSchedulingDataProcessor: void <init>(org.quartz.spi.ClassLoadHelper)>($r28);

        virtualinvoke $r29.<org.quartz.xml.XMLSchedulingDataProcessor: void processFileAndScheduleJobs(java.lang.String,org.quartz.Scheduler)>("org/quartz/xml/delete-no-jobclass.xml", r4);

        $r30 = interfaceinvoke r5.<org.quartz.JobDetail: org.quartz.JobKey getKey()>();

        r43 = interfaceinvoke r4.<org.quartz.Scheduler: org.quartz.JobDetail getJobDetail(org.quartz.JobKey)>($r30);

        $r31 = interfaceinvoke r6.<org.quartz.Trigger: org.quartz.TriggerKey getKey()>();

        r44 = interfaceinvoke r4.<org.quartz.Scheduler: org.quartz.Trigger getTrigger(org.quartz.TriggerKey)>($r31);

        $r32 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher nullValue()>();

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r44, $r32);

        $r33 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher nullValue()>();

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r43, $r33);

        $r34 = new org.quartz.JobKey;

        specialinvoke $r34.<org.quartz.JobKey: void <init>(java.lang.String,java.lang.String)>("job1", "DEFAULT");

        r45 = interfaceinvoke r4.<org.quartz.Scheduler: org.quartz.JobDetail getJobDetail(org.quartz.JobKey)>($r34);

        $r35 = new org.quartz.TriggerKey;

        specialinvoke $r35.<org.quartz.TriggerKey: void <init>(java.lang.String,java.lang.String)>("job1", "DEFAULT");

        r46 = interfaceinvoke r4.<org.quartz.Scheduler: org.quartz.Trigger getTrigger(org.quartz.TriggerKey)>($r35);

        $r36 = interfaceinvoke r45.<org.quartz.JobDetail: org.quartz.JobDataMap getJobDataMap()>();

        $r37 = virtualinvoke $r36.<org.quartz.JobDataMap: java.lang.String getString(java.lang.String)>("foo");

        $r38 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("bar");

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r37, $r38);

        $r39 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher instanceOf(java.lang.Class)>(class "Lorg/quartz/SimpleTrigger;");

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r46, $r39);

     label2:
        interfaceinvoke r4.<org.quartz.Scheduler: void shutdown(boolean)>(0);

        staticinvoke <org.quartz.impl.jdbcjobstore.JdbcQuartzTestUtilities: void destroyDatabase(java.lang.String)>("XmlDeleteNonExistsJobTestDatasase");

        goto label5;

     label3:
        $r40 := @caughtexception;

     label4:
        interfaceinvoke r4.<org.quartz.Scheduler: void shutdown(boolean)>(0);

        staticinvoke <org.quartz.impl.jdbcjobstore.JdbcQuartzTestUtilities: void destroyDatabase(java.lang.String)>("XmlDeleteNonExistsJobTestDatasase");

        throw $r40;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void testOverwriteJobClassNotFound() throws java.lang.Exception
    {
        org.quartz.xml.XMLSchedulingDataProcessorTest r0;
        org.quartz.Scheduler r4;
        org.quartz.JobDetail r5, r37, r39;
        org.quartz.Trigger r6, r38, r40;
        org.quartz.impl.jdbcjobstore.JobStoreTX $r10;
        org.quartz.impl.DirectSchedulerFactory $r11;
        org.quartz.simpl.SimpleThreadPool $r12;
        org.quartz.impl.SchedulerRepository $r13;
        org.quartz.JobBuilder $r14, $r15, $r16;
        org.quartz.TriggerBuilder $r17, $r18, $r20;
        org.quartz.CronScheduleBuilder $r19;
        org.quartz.JobKey $r22, $r30;
        org.quartz.TriggerKey $r23, $r31;
        org.quartz.JobDataMap $r24, $r32;
        java.lang.String $r25, $r33;
        org.hamcrest.Matcher $r26, $r27, $r34, $r35;
        org.quartz.simpl.CascadingClassLoadHelper $r28;
        org.quartz.xml.XMLSchedulingDataProcessor $r29;
        java.lang.Throwable $r36;

        r0 := @this: org.quartz.xml.XMLSchedulingDataProcessorTest;

        staticinvoke <org.quartz.impl.jdbcjobstore.JdbcQuartzTestUtilities: void createDatabase(java.lang.String)>("XmlDeleteNonExistsJobTestDatasase");

        $r10 = new org.quartz.impl.jdbcjobstore.JobStoreTX;

        specialinvoke $r10.<org.quartz.impl.jdbcjobstore.JobStoreTX: void <init>()>();

        virtualinvoke $r10.<org.quartz.impl.jdbcjobstore.JobStoreTX: void setDataSource(java.lang.String)>("XmlDeleteNonExistsJobTestDatasase");

        virtualinvoke $r10.<org.quartz.impl.jdbcjobstore.JobStoreTX: void setTablePrefix(java.lang.String)>("QRTZ_");

        virtualinvoke $r10.<org.quartz.impl.jdbcjobstore.JobStoreTX: void setInstanceId(java.lang.String)>("AUTO");

        $r11 = staticinvoke <org.quartz.impl.DirectSchedulerFactory: org.quartz.impl.DirectSchedulerFactory getInstance()>();

        $r12 = new org.quartz.simpl.SimpleThreadPool;

        specialinvoke $r12.<org.quartz.simpl.SimpleThreadPool: void <init>(int,int)>(4, 5);

        virtualinvoke $r11.<org.quartz.impl.DirectSchedulerFactory: void createScheduler(java.lang.String,java.lang.String,org.quartz.spi.ThreadPool,org.quartz.spi.JobStore)>("XmlDeleteNonExistsJobTestScheduler", "AUTO", $r12, $r10);

        $r13 = staticinvoke <org.quartz.impl.SchedulerRepository: org.quartz.impl.SchedulerRepository getInstance()>();

        r4 = virtualinvoke $r13.<org.quartz.impl.SchedulerRepository: org.quartz.Scheduler lookup(java.lang.String)>("XmlDeleteNonExistsJobTestScheduler");

     label1:
        $r14 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob(java.lang.Class)>(class "Lorg/quartz/xml/XMLSchedulingDataProcessorTest$MyJob;");

        $r15 = virtualinvoke $r14.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String,java.lang.String)>("job1", "DEFAULT");

        $r16 = virtualinvoke $r15.<org.quartz.JobBuilder: org.quartz.JobBuilder usingJobData(java.lang.String,java.lang.String)>("foo", "foo");

        r5 = virtualinvoke $r16.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        $r17 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r18 = virtualinvoke $r17.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String,java.lang.String)>("job1", "DEFAULT");

        $r19 = staticinvoke <org.quartz.CronScheduleBuilder: org.quartz.CronScheduleBuilder cronSchedule(java.lang.String)>("* * * * * ?");

        $r20 = virtualinvoke $r18.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>($r19);

        r6 = virtualinvoke $r20.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        interfaceinvoke r4.<org.quartz.Scheduler: java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)>(r5, r6);

        $r22 = interfaceinvoke r5.<org.quartz.JobDetail: org.quartz.JobKey getKey()>();

        r37 = interfaceinvoke r4.<org.quartz.Scheduler: org.quartz.JobDetail getJobDetail(org.quartz.JobKey)>($r22);

        $r23 = interfaceinvoke r6.<org.quartz.Trigger: org.quartz.TriggerKey getKey()>();

        r38 = interfaceinvoke r4.<org.quartz.Scheduler: org.quartz.Trigger getTrigger(org.quartz.TriggerKey)>($r23);

        $r24 = interfaceinvoke r37.<org.quartz.JobDetail: org.quartz.JobDataMap getJobDataMap()>();

        $r25 = virtualinvoke $r24.<org.quartz.JobDataMap: java.lang.String getString(java.lang.String)>("foo");

        $r26 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("foo");

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r25, $r26);

        $r27 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher instanceOf(java.lang.Class)>(class "Lorg/quartz/CronTrigger;");

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r38, $r27);

        specialinvoke r0.<org.quartz.xml.XMLSchedulingDataProcessorTest: void modifyStoredJobClassName()>();

        $r28 = new org.quartz.simpl.CascadingClassLoadHelper;

        specialinvoke $r28.<org.quartz.simpl.CascadingClassLoadHelper: void <init>()>();

        interfaceinvoke $r28.<org.quartz.spi.ClassLoadHelper: void initialize()>();

        $r29 = new org.quartz.xml.XMLSchedulingDataProcessor;

        specialinvoke $r29.<org.quartz.xml.XMLSchedulingDataProcessor: void <init>(org.quartz.spi.ClassLoadHelper)>($r28);

        virtualinvoke $r29.<org.quartz.xml.XMLSchedulingDataProcessor: void processFileAndScheduleJobs(java.lang.String,org.quartz.Scheduler)>("org/quartz/xml/overwrite-no-jobclass.xml", r4);

        $r30 = interfaceinvoke r5.<org.quartz.JobDetail: org.quartz.JobKey getKey()>();

        r39 = interfaceinvoke r4.<org.quartz.Scheduler: org.quartz.JobDetail getJobDetail(org.quartz.JobKey)>($r30);

        $r31 = interfaceinvoke r6.<org.quartz.Trigger: org.quartz.TriggerKey getKey()>();

        r40 = interfaceinvoke r4.<org.quartz.Scheduler: org.quartz.Trigger getTrigger(org.quartz.TriggerKey)>($r31);

        $r32 = interfaceinvoke r39.<org.quartz.JobDetail: org.quartz.JobDataMap getJobDataMap()>();

        $r33 = virtualinvoke $r32.<org.quartz.JobDataMap: java.lang.String getString(java.lang.String)>("foo");

        $r34 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("bar");

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r33, $r34);

        $r35 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher instanceOf(java.lang.Class)>(class "Lorg/quartz/SimpleTrigger;");

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r40, $r35);

     label2:
        interfaceinvoke r4.<org.quartz.Scheduler: void shutdown(boolean)>(0);

        staticinvoke <org.quartz.impl.jdbcjobstore.JdbcQuartzTestUtilities: void destroyDatabase(java.lang.String)>("XmlDeleteNonExistsJobTestDatasase");

        goto label5;

     label3:
        $r36 := @caughtexception;

     label4:
        interfaceinvoke r4.<org.quartz.Scheduler: void shutdown(boolean)>(0);

        staticinvoke <org.quartz.impl.jdbcjobstore.JdbcQuartzTestUtilities: void destroyDatabase(java.lang.String)>("XmlDeleteNonExistsJobTestDatasase");

        throw $r36;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void modifyStoredJobClassName() throws java.lang.Exception
    {
        org.quartz.xml.XMLSchedulingDataProcessorTest r0;
        java.sql.Connection r2;
        java.sql.Statement r3;
        org.quartz.utils.DBConnectionManager $r4;

        r0 := @this: org.quartz.xml.XMLSchedulingDataProcessorTest;

        $r4 = staticinvoke <org.quartz.utils.DBConnectionManager: org.quartz.utils.DBConnectionManager getInstance()>();

        r2 = virtualinvoke $r4.<org.quartz.utils.DBConnectionManager: java.sql.Connection getConnection(java.lang.String)>("XmlDeleteNonExistsJobTestDatasase");

        r3 = interfaceinvoke r2.<java.sql.Connection: java.sql.Statement createStatement()>();

        interfaceinvoke r3.<java.sql.Statement: int executeUpdate(java.lang.String)>("update qrtz_job_details set job_class_name=\'com.FakeNonExistsJob\'");

        interfaceinvoke r3.<java.sql.Statement: void close()>();

        interfaceinvoke r2.<java.sql.Connection: void close()>();

        return;
    }
}
