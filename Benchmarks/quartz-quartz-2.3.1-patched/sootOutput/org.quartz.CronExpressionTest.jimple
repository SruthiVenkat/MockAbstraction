public class org.quartz.CronExpressionTest extends org.quartz.SerializationTestSupport
{
    private static final java.lang.String[] VERSIONS;
    private static final java.util.TimeZone EST_TIME_ZONE;

    public void <init>()
    {
        org.quartz.CronExpressionTest r0;

        r0 := @this: org.quartz.CronExpressionTest;

        specialinvoke r0.<org.quartz.SerializationTestSupport: void <init>()>();

        return;
    }

    protected java.lang.Object getTargetObject() throws java.text.ParseException
    {
        org.quartz.CronExpressionTest r0;
        org.quartz.CronExpression $r2;
        java.util.TimeZone $r3;

        r0 := @this: org.quartz.CronExpressionTest;

        $r2 = new org.quartz.CronExpression;

        specialinvoke $r2.<org.quartz.CronExpression: void <init>(java.lang.String)>("0 15 10 * * ? 2005");

        $r3 = <org.quartz.CronExpressionTest: java.util.TimeZone EST_TIME_ZONE>;

        virtualinvoke $r2.<org.quartz.CronExpression: void setTimeZone(java.util.TimeZone)>($r3);

        return $r2;
    }

    protected java.lang.String[] getVersions()
    {
        org.quartz.CronExpressionTest r0;
        java.lang.String[] $r1;

        r0 := @this: org.quartz.CronExpressionTest;

        $r1 = <org.quartz.CronExpressionTest: java.lang.String[] VERSIONS>;

        return $r1;
    }

    protected void verifyMatch(java.lang.Object, java.lang.Object)
    {
        org.quartz.CronExpressionTest r0;
        java.lang.Object r1, r2;
        org.quartz.CronExpression r3, r4;
        java.lang.String $r5, $r6;
        java.util.TimeZone $r7, $r8;

        r0 := @this: org.quartz.CronExpressionTest;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 = (org.quartz.CronExpression) r1;

        r4 = (org.quartz.CronExpression) r2;

        staticinvoke <org.quartz.CronExpressionTest: void assertNotNull(java.lang.Object)>(r4);

        $r5 = virtualinvoke r3.<org.quartz.CronExpression: java.lang.String getCronExpression()>();

        $r6 = virtualinvoke r4.<org.quartz.CronExpression: java.lang.String getCronExpression()>();

        staticinvoke <org.quartz.CronExpressionTest: void assertEquals(java.lang.String,java.lang.String)>($r5, $r6);

        $r7 = virtualinvoke r3.<org.quartz.CronExpression: java.util.TimeZone getTimeZone()>();

        $r8 = virtualinvoke r4.<org.quartz.CronExpression: java.util.TimeZone getTimeZone()>();

        staticinvoke <org.quartz.CronExpressionTest: void assertEquals(java.lang.Object,java.lang.Object)>($r7, $r8);

        return;
    }

    public void testIsSatisfiedBy() throws java.lang.Exception
    {
        org.quartz.CronExpressionTest r0;
        org.quartz.CronExpression $r2;
        java.util.Date $r3, $r4, $r5, $r6;
        boolean $z0, $z1, $z2, $z3;
        java.util.Calendar r7, r8, r9;

        r0 := @this: org.quartz.CronExpressionTest;

        $r2 = new org.quartz.CronExpression;

        specialinvoke $r2.<org.quartz.CronExpression: void <init>(java.lang.String)>("0 15 10 * * ? 2005");

        r7 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r7.<java.util.Calendar: void set(int,int,int,int,int,int)>(2005, 5, 1, 10, 15, 0);

        $r3 = virtualinvoke r7.<java.util.Calendar: java.util.Date getTime()>();

        $z0 = virtualinvoke $r2.<org.quartz.CronExpression: boolean isSatisfiedBy(java.util.Date)>($r3);

        staticinvoke <org.quartz.CronExpressionTest: void assertTrue(boolean)>($z0);

        virtualinvoke r7.<java.util.Calendar: void set(int,int)>(1, 2006);

        $r4 = virtualinvoke r7.<java.util.Calendar: java.util.Date getTime()>();

        $z1 = virtualinvoke $r2.<org.quartz.CronExpression: boolean isSatisfiedBy(java.util.Date)>($r4);

        staticinvoke <org.quartz.CronExpressionTest: void assertFalse(boolean)>($z1);

        r8 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r8.<java.util.Calendar: void set(int,int,int,int,int,int)>(2005, 5, 1, 10, 16, 0);

        $r5 = virtualinvoke r8.<java.util.Calendar: java.util.Date getTime()>();

        $z2 = virtualinvoke $r2.<org.quartz.CronExpression: boolean isSatisfiedBy(java.util.Date)>($r5);

        staticinvoke <org.quartz.CronExpressionTest: void assertFalse(boolean)>($z2);

        r9 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r9.<java.util.Calendar: void set(int,int,int,int,int,int)>(2005, 5, 1, 10, 14, 0);

        $r6 = virtualinvoke r9.<java.util.Calendar: java.util.Date getTime()>();

        $z3 = virtualinvoke $r2.<org.quartz.CronExpression: boolean isSatisfiedBy(java.util.Date)>($r6);

        staticinvoke <org.quartz.CronExpressionTest: void assertFalse(boolean)>($z3);

        return;
    }

    public void testLastDayOffset() throws java.lang.Exception
    {
        org.quartz.CronExpressionTest r0;
        java.util.Calendar r1;
        org.quartz.CronExpression $r2, $r5, $r7, $r9;
        java.util.Date $r3, $r4, $r6, $r8, $r10;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: org.quartz.CronExpressionTest;

        $r2 = new org.quartz.CronExpression;

        specialinvoke $r2.<org.quartz.CronExpression: void <init>(java.lang.String)>("0 15 10 L-2 * ? 2010");

        r1 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r1.<java.util.Calendar: void set(int,int,int,int,int,int)>(2010, 9, 29, 10, 15, 0);

        $r3 = virtualinvoke r1.<java.util.Calendar: java.util.Date getTime()>();

        $z0 = virtualinvoke $r2.<org.quartz.CronExpression: boolean isSatisfiedBy(java.util.Date)>($r3);

        staticinvoke <org.quartz.CronExpressionTest: void assertTrue(boolean)>($z0);

        virtualinvoke r1.<java.util.Calendar: void set(int,int,int,int,int,int)>(2010, 9, 28, 10, 15, 0);

        $r4 = virtualinvoke r1.<java.util.Calendar: java.util.Date getTime()>();

        $z1 = virtualinvoke $r2.<org.quartz.CronExpression: boolean isSatisfiedBy(java.util.Date)>($r4);

        staticinvoke <org.quartz.CronExpressionTest: void assertFalse(boolean)>($z1);

        $r5 = new org.quartz.CronExpression;

        specialinvoke $r5.<org.quartz.CronExpression: void <init>(java.lang.String)>("0 15 10 L-5W * ? 2010");

        virtualinvoke r1.<java.util.Calendar: void set(int,int,int,int,int,int)>(2010, 9, 26, 10, 15, 0);

        $r6 = virtualinvoke r1.<java.util.Calendar: java.util.Date getTime()>();

        $z2 = virtualinvoke $r5.<org.quartz.CronExpression: boolean isSatisfiedBy(java.util.Date)>($r6);

        staticinvoke <org.quartz.CronExpressionTest: void assertTrue(boolean)>($z2);

        $r7 = new org.quartz.CronExpression;

        specialinvoke $r7.<org.quartz.CronExpression: void <init>(java.lang.String)>("0 15 10 L-1 * ? 2010");

        virtualinvoke r1.<java.util.Calendar: void set(int,int,int,int,int,int)>(2010, 9, 30, 10, 15, 0);

        $r8 = virtualinvoke r1.<java.util.Calendar: java.util.Date getTime()>();

        $z3 = virtualinvoke $r7.<org.quartz.CronExpression: boolean isSatisfiedBy(java.util.Date)>($r8);

        staticinvoke <org.quartz.CronExpressionTest: void assertTrue(boolean)>($z3);

        $r9 = new org.quartz.CronExpression;

        specialinvoke $r9.<org.quartz.CronExpression: void <init>(java.lang.String)>("0 15 10 L-1W * ? 2010");

        virtualinvoke r1.<java.util.Calendar: void set(int,int,int,int,int,int)>(2010, 9, 29, 10, 15, 0);

        $r10 = virtualinvoke r1.<java.util.Calendar: java.util.Date getTime()>();

        $z4 = virtualinvoke $r9.<org.quartz.CronExpression: boolean isSatisfiedBy(java.util.Date)>($r10);

        staticinvoke <org.quartz.CronExpressionTest: void assertTrue(boolean)>($z4);

        return;
    }

    public void testQuartz571() throws java.lang.Exception
    {
        org.quartz.CronExpressionTest r0;
        org.quartz.CronExpression r6, $r7;
        java.io.ByteArrayOutputStream $r8;
        java.io.ObjectOutputStream $r9;
        java.io.ByteArrayInputStream $r10;
        byte[] $r11;
        java.io.ObjectInputStream $r12;
        java.lang.Object $r13;
        java.lang.String $r14, $r15;
        java.util.Date $r16;

        r0 := @this: org.quartz.CronExpressionTest;

        $r7 = new org.quartz.CronExpression;

        specialinvoke $r7.<org.quartz.CronExpression: void <init>(java.lang.String)>("19 15 10 4 Apr ? ");

        $r8 = new java.io.ByteArrayOutputStream;

        specialinvoke $r8.<java.io.ByteArrayOutputStream: void <init>()>();

        $r9 = new java.io.ObjectOutputStream;

        specialinvoke $r9.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>($r8);

        virtualinvoke $r9.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r7);

        $r10 = new java.io.ByteArrayInputStream;

        $r11 = virtualinvoke $r8.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r10.<java.io.ByteArrayInputStream: void <init>(byte[])>($r11);

        $r12 = new java.io.ObjectInputStream;

        specialinvoke $r12.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>($r10);

        $r13 = virtualinvoke $r12.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        r6 = (org.quartz.CronExpression) $r13;

        $r14 = virtualinvoke r6.<org.quartz.CronExpression: java.lang.String getCronExpression()>();

        $r15 = virtualinvoke $r7.<org.quartz.CronExpression: java.lang.String getCronExpression()>();

        staticinvoke <org.quartz.CronExpressionTest: void assertEquals(java.lang.String,java.lang.String)>($r14, $r15);

        $r16 = new java.util.Date;

        specialinvoke $r16.<java.util.Date: void <init>()>();

        virtualinvoke r6.<org.quartz.CronExpression: java.util.Date getNextValidTimeAfter(java.util.Date)>($r16);

        return;
    }

    public void testQtz259() throws java.lang.Exception
    {
        org.quartz.CronExpressionTest r0;
        org.quartz.CronScheduleBuilder r1;
        org.quartz.Trigger r2;
        java.util.Date r3, $r7, r15;
        org.quartz.TriggerBuilder $r4, $r5, $r6;
        java.lang.StringBuilder $r8, $r10, $r11, $r12, $r13;
        java.io.PrintStream $r9;
        java.lang.String $r14;
        boolean $z0;
        int i0;

        r0 := @this: org.quartz.CronExpressionTest;

        r1 = staticinvoke <org.quartz.CronScheduleBuilder: org.quartz.CronScheduleBuilder cronSchedule(java.lang.String)>("0 0 0 L-2 * ? *");

        $r4 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r5 = virtualinvoke $r4.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String)>("test");

        $r6 = virtualinvoke $r5.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>(r1);

        r2 = virtualinvoke $r6.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        i0 = 0;

        $r7 = new java.util.Date;

        specialinvoke $r7.<java.util.Date: void <init>()>();

        r15 = interfaceinvoke r2.<org.quartz.Trigger: java.util.Date getFireTimeAfter(java.util.Date)>($r7);

     label1:
        i0 = i0 + 1;

        if i0 >= 26 goto label2;

        r3 = interfaceinvoke r2.<org.quartz.Trigger: java.util.Date getFireTimeAfter(java.util.Date)>(r15);

        $r9 = <java.lang.System: java.io.PrintStream out>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("fireTime: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", previousFireTime: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r15);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r14);

        $z0 = virtualinvoke r15.<java.util.Date: boolean equals(java.lang.Object)>(r3);

        staticinvoke <org.quartz.CronExpressionTest: void assertFalse(java.lang.String,boolean)>("Next fire time is the same as previous fire time!", $z0);

        r15 = r3;

        goto label1;

     label2:
        return;
    }

    public void testQtz259LW() throws java.lang.Exception
    {
        org.quartz.CronExpressionTest r0;
        org.quartz.CronScheduleBuilder r1;
        org.quartz.Trigger r2;
        java.util.Date r3, $r7, r15;
        org.quartz.TriggerBuilder $r4, $r5, $r6;
        java.lang.StringBuilder $r8, $r10, $r11, $r12, $r13;
        java.io.PrintStream $r9;
        java.lang.String $r14;
        boolean $z0;
        int i0;

        r0 := @this: org.quartz.CronExpressionTest;

        r1 = staticinvoke <org.quartz.CronScheduleBuilder: org.quartz.CronScheduleBuilder cronSchedule(java.lang.String)>("0 0 0 LW * ? *");

        $r4 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r5 = virtualinvoke $r4.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String)>("test");

        $r6 = virtualinvoke $r5.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>(r1);

        r2 = virtualinvoke $r6.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        i0 = 0;

        $r7 = new java.util.Date;

        specialinvoke $r7.<java.util.Date: void <init>()>();

        r15 = interfaceinvoke r2.<org.quartz.Trigger: java.util.Date getFireTimeAfter(java.util.Date)>($r7);

     label1:
        i0 = i0 + 1;

        if i0 >= 26 goto label2;

        r3 = interfaceinvoke r2.<org.quartz.Trigger: java.util.Date getFireTimeAfter(java.util.Date)>(r15);

        $r9 = <java.lang.System: java.io.PrintStream out>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("fireTime: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", previousFireTime: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r15);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r14);

        $z0 = virtualinvoke r15.<java.util.Date: boolean equals(java.lang.Object)>(r3);

        staticinvoke <org.quartz.CronExpressionTest: void assertFalse(java.lang.String,boolean)>("Next fire time is the same as previous fire time!", $z0);

        r15 = r3;

        goto label1;

     label2:
        return;
    }

    public void testQuartz574()
    {
        org.quartz.CronExpressionTest r0;
        org.quartz.CronExpression $r1, $r2;
        java.text.ParseException $r3, $r5;
        java.lang.String $r4, $r6;
        boolean $z0, $z1;

        r0 := @this: org.quartz.CronExpressionTest;

     label1:
        $r1 = new org.quartz.CronExpression;

        specialinvoke $r1.<org.quartz.CronExpression: void <init>(java.lang.String)>("* * * * Foo ? ");

        staticinvoke <org.quartz.CronExpressionTest: void fail(java.lang.String)>("Expected ParseException did not fire for non-existent month");

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<java.text.ParseException: java.lang.String getMessage()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>("Invalid Month value:");

        staticinvoke <org.quartz.CronExpressionTest: void assertTrue(java.lang.String,boolean)>("Incorrect ParseException thrown", $z0);

     label4:
        $r2 = new org.quartz.CronExpression;

        specialinvoke $r2.<org.quartz.CronExpression: void <init>(java.lang.String)>("* * * * Jan-Foo ? ");

        staticinvoke <org.quartz.CronExpressionTest: void fail(java.lang.String)>("Expected ParseException did not fire for non-existent month");

     label5:
        goto label7;

     label6:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<java.text.ParseException: java.lang.String getMessage()>();

        $z1 = virtualinvoke $r6.<java.lang.String: boolean startsWith(java.lang.String)>("Invalid Month value:");

        staticinvoke <org.quartz.CronExpressionTest: void assertTrue(java.lang.String,boolean)>("Incorrect ParseException thrown", $z1);

     label7:
        return;

        catch java.text.ParseException from label1 to label2 with label3;
        catch java.text.ParseException from label4 to label5 with label6;
    }

    public void testQuartz621()
    {
        org.quartz.CronExpressionTest r0;
        org.quartz.CronExpression $r1, $r2, $r3;
        java.text.ParseException $r4, $r6, $r8;
        java.lang.String $r5, $r7, $r9;
        boolean $z0, $z1, $z2;

        r0 := @this: org.quartz.CronExpressionTest;

     label01:
        $r1 = new org.quartz.CronExpression;

        specialinvoke $r1.<org.quartz.CronExpression: void <init>(java.lang.String)>("0 0 * * * *");

        staticinvoke <org.quartz.CronExpressionTest: void fail(java.lang.String)>("Expected ParseException did not fire for wildcard day-of-month and day-of-week");

     label02:
        goto label04;

     label03:
        $r8 := @caughtexception;

        $r9 = virtualinvoke $r8.<java.text.ParseException: java.lang.String getMessage()>();

        $z2 = virtualinvoke $r9.<java.lang.String: boolean startsWith(java.lang.String)>("Support for specifying both a day-of-week AND a day-of-month parameter is not implemented.");

        staticinvoke <org.quartz.CronExpressionTest: void assertTrue(java.lang.String,boolean)>("Incorrect ParseException thrown", $z2);

     label04:
        $r2 = new org.quartz.CronExpression;

        specialinvoke $r2.<org.quartz.CronExpression: void <init>(java.lang.String)>("0 0 * 4 * *");

        staticinvoke <org.quartz.CronExpressionTest: void fail(java.lang.String)>("Expected ParseException did not fire for specified day-of-month and wildcard day-of-week");

     label05:
        goto label07;

     label06:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<java.text.ParseException: java.lang.String getMessage()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>("Support for specifying both a day-of-week AND a day-of-month parameter is not implemented.");

        staticinvoke <org.quartz.CronExpressionTest: void assertTrue(java.lang.String,boolean)>("Incorrect ParseException thrown", $z0);

     label07:
        $r3 = new org.quartz.CronExpression;

        specialinvoke $r3.<org.quartz.CronExpression: void <init>(java.lang.String)>("0 0 * * * 4");

        staticinvoke <org.quartz.CronExpressionTest: void fail(java.lang.String)>("Expected ParseException did not fire for wildcard day-of-month and specified day-of-week");

     label08:
        goto label10;

     label09:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<java.text.ParseException: java.lang.String getMessage()>();

        $z1 = virtualinvoke $r7.<java.lang.String: boolean startsWith(java.lang.String)>("Support for specifying both a day-of-week AND a day-of-month parameter is not implemented.");

        staticinvoke <org.quartz.CronExpressionTest: void assertTrue(java.lang.String,boolean)>("Incorrect ParseException thrown", $z1);

     label10:
        return;

        catch java.text.ParseException from label01 to label02 with label03;
        catch java.text.ParseException from label04 to label05 with label06;
        catch java.text.ParseException from label07 to label08 with label09;
    }

    public void testQuartz640() throws java.text.ParseException
    {
        org.quartz.CronExpressionTest r0;
        org.quartz.CronExpression $r1, $r2, $r3, $r4;
        java.text.ParseException $r5, $r7, $r8, $r10;
        java.lang.String $r6, $r9, $r11;
        boolean $z0, $z1, $z2;

        r0 := @this: org.quartz.CronExpressionTest;

     label01:
        $r1 = new org.quartz.CronExpression;

        specialinvoke $r1.<org.quartz.CronExpression: void <init>(java.lang.String)>("0 43 9 1,5,29,L * ?");

        staticinvoke <org.quartz.CronExpressionTest: void fail(java.lang.String)>("Expected ParseException did not fire for L combined with other days of the month");

     label02:
        goto label04;

     label03:
        $r8 := @caughtexception;

        $r9 = virtualinvoke $r8.<java.text.ParseException: java.lang.String getMessage()>();

        $z1 = virtualinvoke $r9.<java.lang.String: boolean startsWith(java.lang.String)>("Support for specifying \'L\' and \'LW\' with other days of the month is not implemented");

        staticinvoke <org.quartz.CronExpressionTest: void assertTrue(java.lang.String,boolean)>("Incorrect ParseException thrown", $z1);

     label04:
        $r2 = new org.quartz.CronExpression;

        specialinvoke $r2.<org.quartz.CronExpression: void <init>(java.lang.String)>("0 43 9 ? * SAT,SUN,L");

        staticinvoke <org.quartz.CronExpressionTest: void fail(java.lang.String)>("Expected ParseException did not fire for L combined with other days of the week");

     label05:
        goto label07;

     label06:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<java.text.ParseException: java.lang.String getMessage()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean startsWith(java.lang.String)>("Support for specifying \'L\' with other days of the week is not implemented");

        staticinvoke <org.quartz.CronExpressionTest: void assertTrue(java.lang.String,boolean)>("Incorrect ParseException thrown", $z0);

     label07:
        $r3 = new org.quartz.CronExpression;

        specialinvoke $r3.<org.quartz.CronExpression: void <init>(java.lang.String)>("0 43 9 ? * 6,7,L");

        staticinvoke <org.quartz.CronExpressionTest: void fail(java.lang.String)>("Expected ParseException did not fire for L combined with other days of the week");

     label08:
        goto label10;

     label09:
        $r10 := @caughtexception;

        $r11 = virtualinvoke $r10.<java.text.ParseException: java.lang.String getMessage()>();

        $z2 = virtualinvoke $r11.<java.lang.String: boolean startsWith(java.lang.String)>("Support for specifying \'L\' with other days of the week is not implemented");

        staticinvoke <org.quartz.CronExpressionTest: void assertTrue(java.lang.String,boolean)>("Incorrect ParseException thrown", $z2);

     label10:
        $r4 = new org.quartz.CronExpression;

        specialinvoke $r4.<org.quartz.CronExpression: void <init>(java.lang.String)>("0 43 9 ? * 5L");

     label11:
        goto label13;

     label12:
        $r7 := @caughtexception;

        staticinvoke <org.quartz.CronExpressionTest: void fail(java.lang.String)>("Unexpected ParseException thrown for supported \'5L\' expression.");

     label13:
        return;

        catch java.text.ParseException from label01 to label02 with label03;
        catch java.text.ParseException from label04 to label05 with label06;
        catch java.text.ParseException from label07 to label08 with label09;
        catch java.text.ParseException from label10 to label11 with label12;
    }

    public void testQtz96() throws java.text.ParseException
    {
        org.quartz.CronExpressionTest r0;
        org.quartz.CronExpression $r2;
        java.text.ParseException $r3;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: org.quartz.CronExpressionTest;

     label1:
        $r2 = new org.quartz.CronExpression;

        specialinvoke $r2.<org.quartz.CronExpression: void <init>(java.lang.String)>("0/5 * * 32W 1 ?");

        staticinvoke <org.quartz.CronExpressionTest: void fail(java.lang.String)>("Expected ParseException did not fire for W with value larger than 31");

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<java.text.ParseException: java.lang.String getMessage()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>("The \'W\' option does not make sense with values larger than");

        staticinvoke <org.quartz.CronExpressionTest: void assertTrue(java.lang.String,boolean)>("Incorrect ParseException thrown", $z0);

     label4:
        return;

        catch java.text.ParseException from label1 to label2 with label3;
    }

    public void testQtz395_CopyConstructorMustPreserveTimeZone() throws java.text.ParseException
    {
        org.quartz.CronExpressionTest r0;
        java.util.TimeZone $r3, $r6, r7;
        boolean $z0;
        org.quartz.CronExpression $r4, $r5;

        r0 := @this: org.quartz.CronExpressionTest;

        r7 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("Europe/Brussels");

        $r3 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();

        $z0 = virtualinvoke r7.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        r7 = <org.quartz.CronExpressionTest: java.util.TimeZone EST_TIME_ZONE>;

     label1:
        $r4 = new org.quartz.CronExpression;

        specialinvoke $r4.<org.quartz.CronExpression: void <init>(java.lang.String)>("0 15 10 * * ? 2005");

        virtualinvoke $r4.<org.quartz.CronExpression: void setTimeZone(java.util.TimeZone)>(r7);

        $r5 = new org.quartz.CronExpression;

        specialinvoke $r5.<org.quartz.CronExpression: void <init>(org.quartz.CronExpression)>($r4);

        $r6 = virtualinvoke $r5.<org.quartz.CronExpression: java.util.TimeZone getTimeZone()>();

        staticinvoke <org.quartz.CronExpressionTest: void assertEquals(java.lang.Object,java.lang.Object)>(r7, $r6);

        return;
    }

    public void testSecRangeIntervalAfterSlash() throws java.lang.Exception
    {
        org.quartz.CronExpressionTest r0;
        org.quartz.CronExpression $r1, $r2, $r3, $r4;
        java.text.ParseException $r5, $r7, $r9, $r11;
        java.lang.String $r6, $r8, $r10, $r12;

        r0 := @this: org.quartz.CronExpressionTest;

     label01:
        $r1 = new org.quartz.CronExpression;

        specialinvoke $r1.<org.quartz.CronExpression: void <init>(java.lang.String)>("/120 0 8-18 ? * 2-6");

        staticinvoke <org.quartz.CronExpressionTest: void fail(java.lang.String)>("Cron did not validate bad range interval in \'_blank/xxx\' form");

     label02:
        goto label04;

     label03:
        $r11 := @caughtexception;

        $r12 = virtualinvoke $r11.<java.text.ParseException: java.lang.String getMessage()>();

        staticinvoke <org.quartz.CronExpressionTest: void assertEquals(java.lang.String,java.lang.String)>($r12, "Increment > 60 : 120");

     label04:
        $r2 = new org.quartz.CronExpression;

        specialinvoke $r2.<org.quartz.CronExpression: void <init>(java.lang.String)>("0/120 0 8-18 ? * 2-6");

        staticinvoke <org.quartz.CronExpressionTest: void fail(java.lang.String)>("Cron did not validate bad range interval in in \'0/xxx\' form");

     label05:
        goto label07;

     label06:
        $r9 := @caughtexception;

        $r10 = virtualinvoke $r9.<java.text.ParseException: java.lang.String getMessage()>();

        staticinvoke <org.quartz.CronExpressionTest: void assertEquals(java.lang.String,java.lang.String)>($r10, "Increment > 60 : 120");

     label07:
        $r3 = new org.quartz.CronExpression;

        specialinvoke $r3.<org.quartz.CronExpression: void <init>(java.lang.String)>("/ 0 8-18 ? * 2-6");

        staticinvoke <org.quartz.CronExpressionTest: void fail(java.lang.String)>("Cron did not validate bad range interval in \'_blank/_blank\'");

     label08:
        goto label10;

     label09:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<java.text.ParseException: java.lang.String getMessage()>();

        staticinvoke <org.quartz.CronExpressionTest: void assertEquals(java.lang.String,java.lang.String)>($r6, "\'/\' must be followed by an integer.");

     label10:
        $r4 = new org.quartz.CronExpression;

        specialinvoke $r4.<org.quartz.CronExpression: void <init>(java.lang.String)>("0/ 0 8-18 ? * 2-6");

        staticinvoke <org.quartz.CronExpressionTest: void fail(java.lang.String)>("Cron did not validate bad range interval in \'0/_blank\'");

     label11:
        goto label13;

     label12:
        $r7 := @caughtexception;

        $r8 = virtualinvoke $r7.<java.text.ParseException: java.lang.String getMessage()>();

        staticinvoke <org.quartz.CronExpressionTest: void assertEquals(java.lang.String,java.lang.String)>($r8, "\'/\' must be followed by an integer.");

     label13:
        return;

        catch java.text.ParseException from label01 to label02 with label03;
        catch java.text.ParseException from label04 to label05 with label06;
        catch java.text.ParseException from label07 to label08 with label09;
        catch java.text.ParseException from label10 to label11 with label12;
    }

    public void testMinRangeIntervalAfterSlash() throws java.lang.Exception
    {
        org.quartz.CronExpressionTest r0;
        org.quartz.CronExpression $r1, $r2, $r3, $r4;
        java.text.ParseException $r5, $r7, $r9, $r11;
        java.lang.String $r6, $r8, $r10, $r12;

        r0 := @this: org.quartz.CronExpressionTest;

     label01:
        $r1 = new org.quartz.CronExpression;

        specialinvoke $r1.<org.quartz.CronExpression: void <init>(java.lang.String)>("0 /120 8-18 ? * 2-6");

        staticinvoke <org.quartz.CronExpressionTest: void fail(java.lang.String)>("Cron did not validate bad range interval in \'_blank/xxx\' form");

     label02:
        goto label04;

     label03:
        $r7 := @caughtexception;

        $r8 = virtualinvoke $r7.<java.text.ParseException: java.lang.String getMessage()>();

        staticinvoke <org.quartz.CronExpressionTest: void assertEquals(java.lang.String,java.lang.String)>($r8, "Increment > 60 : 120");

     label04:
        $r2 = new org.quartz.CronExpression;

        specialinvoke $r2.<org.quartz.CronExpression: void <init>(java.lang.String)>("0 0/120 8-18 ? * 2-6");

        staticinvoke <org.quartz.CronExpressionTest: void fail(java.lang.String)>("Cron did not validate bad range interval in in \'0/xxx\' form");

     label05:
        goto label07;

     label06:
        $r11 := @caughtexception;

        $r12 = virtualinvoke $r11.<java.text.ParseException: java.lang.String getMessage()>();

        staticinvoke <org.quartz.CronExpressionTest: void assertEquals(java.lang.String,java.lang.String)>($r12, "Increment > 60 : 120");

     label07:
        $r3 = new org.quartz.CronExpression;

        specialinvoke $r3.<org.quartz.CronExpression: void <init>(java.lang.String)>("0 / 8-18 ? * 2-6");

        staticinvoke <org.quartz.CronExpressionTest: void fail(java.lang.String)>("Cron did not validate bad range interval in \'_blank/_blank\'");

     label08:
        goto label10;

     label09:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<java.text.ParseException: java.lang.String getMessage()>();

        staticinvoke <org.quartz.CronExpressionTest: void assertEquals(java.lang.String,java.lang.String)>($r6, "\'/\' must be followed by an integer.");

     label10:
        $r4 = new org.quartz.CronExpression;

        specialinvoke $r4.<org.quartz.CronExpression: void <init>(java.lang.String)>("0 0/ 8-18 ? * 2-6");

        staticinvoke <org.quartz.CronExpressionTest: void fail(java.lang.String)>("Cron did not validate bad range interval in \'0/_blank\'");

     label11:
        goto label13;

     label12:
        $r9 := @caughtexception;

        $r10 = virtualinvoke $r9.<java.text.ParseException: java.lang.String getMessage()>();

        staticinvoke <org.quartz.CronExpressionTest: void assertEquals(java.lang.String,java.lang.String)>($r10, "\'/\' must be followed by an integer.");

     label13:
        return;

        catch java.text.ParseException from label01 to label02 with label03;
        catch java.text.ParseException from label04 to label05 with label06;
        catch java.text.ParseException from label07 to label08 with label09;
        catch java.text.ParseException from label10 to label11 with label12;
    }

    public void testHourRangeIntervalAfterSlash() throws java.lang.Exception
    {
        org.quartz.CronExpressionTest r0;
        org.quartz.CronExpression $r1, $r2, $r3, $r4;
        java.text.ParseException $r5, $r7, $r9, $r11;
        java.lang.String $r6, $r8, $r10, $r12;

        r0 := @this: org.quartz.CronExpressionTest;

     label01:
        $r1 = new org.quartz.CronExpression;

        specialinvoke $r1.<org.quartz.CronExpression: void <init>(java.lang.String)>("0 0 /120 ? * 2-6");

        staticinvoke <org.quartz.CronExpressionTest: void fail(java.lang.String)>("Cron did not validate bad range interval in \'_blank/xxx\' form");

     label02:
        goto label04;

     label03:
        $r9 := @caughtexception;

        $r10 = virtualinvoke $r9.<java.text.ParseException: java.lang.String getMessage()>();

        staticinvoke <org.quartz.CronExpressionTest: void assertEquals(java.lang.String,java.lang.String)>($r10, "Increment > 24 : 120");

     label04:
        $r2 = new org.quartz.CronExpression;

        specialinvoke $r2.<org.quartz.CronExpression: void <init>(java.lang.String)>("0 0 0/120 ? * 2-6");

        staticinvoke <org.quartz.CronExpressionTest: void fail(java.lang.String)>("Cron did not validate bad range interval in in \'0/xxx\' form");

     label05:
        goto label07;

     label06:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<java.text.ParseException: java.lang.String getMessage()>();

        staticinvoke <org.quartz.CronExpressionTest: void assertEquals(java.lang.String,java.lang.String)>($r6, "Increment > 24 : 120");

     label07:
        $r3 = new org.quartz.CronExpression;

        specialinvoke $r3.<org.quartz.CronExpression: void <init>(java.lang.String)>("0 0 / ? * 2-6");

        staticinvoke <org.quartz.CronExpressionTest: void fail(java.lang.String)>("Cron did not validate bad range interval in \'_blank/_blank\'");

     label08:
        goto label10;

     label09:
        $r11 := @caughtexception;

        $r12 = virtualinvoke $r11.<java.text.ParseException: java.lang.String getMessage()>();

        staticinvoke <org.quartz.CronExpressionTest: void assertEquals(java.lang.String,java.lang.String)>($r12, "\'/\' must be followed by an integer.");

     label10:
        $r4 = new org.quartz.CronExpression;

        specialinvoke $r4.<org.quartz.CronExpression: void <init>(java.lang.String)>("0 0 0/ ? * 2-6");

        staticinvoke <org.quartz.CronExpressionTest: void fail(java.lang.String)>("Cron did not validate bad range interval in \'0/_blank\'");

     label11:
        goto label13;

     label12:
        $r7 := @caughtexception;

        $r8 = virtualinvoke $r7.<java.text.ParseException: java.lang.String getMessage()>();

        staticinvoke <org.quartz.CronExpressionTest: void assertEquals(java.lang.String,java.lang.String)>($r8, "\'/\' must be followed by an integer.");

     label13:
        return;

        catch java.text.ParseException from label01 to label02 with label03;
        catch java.text.ParseException from label04 to label05 with label06;
        catch java.text.ParseException from label07 to label08 with label09;
        catch java.text.ParseException from label10 to label11 with label12;
    }

    public void testDayOfMonthRangeIntervalAfterSlash() throws java.lang.Exception
    {
        org.quartz.CronExpressionTest r0;
        org.quartz.CronExpression $r1, $r2, $r3, $r4;
        java.text.ParseException $r5, $r7, $r9, $r11;
        java.lang.String $r6, $r8, $r10, $r12;

        r0 := @this: org.quartz.CronExpressionTest;

     label01:
        $r1 = new org.quartz.CronExpression;

        specialinvoke $r1.<org.quartz.CronExpression: void <init>(java.lang.String)>("0 0 0 /120 * 2-6");

        staticinvoke <org.quartz.CronExpressionTest: void fail(java.lang.String)>("Cron did not validate bad range interval in \'_blank/xxx\' form");

     label02:
        goto label04;

     label03:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<java.text.ParseException: java.lang.String getMessage()>();

        staticinvoke <org.quartz.CronExpressionTest: void assertEquals(java.lang.String,java.lang.String)>($r6, "Increment > 31 : 120");

     label04:
        $r2 = new org.quartz.CronExpression;

        specialinvoke $r2.<org.quartz.CronExpression: void <init>(java.lang.String)>("0 0 0 0/120 * 2-6");

        staticinvoke <org.quartz.CronExpressionTest: void fail(java.lang.String)>("Cron did not validate bad range interval in in \'0/xxx\' form");

     label05:
        goto label07;

     label06:
        $r9 := @caughtexception;

        $r10 = virtualinvoke $r9.<java.text.ParseException: java.lang.String getMessage()>();

        staticinvoke <org.quartz.CronExpressionTest: void assertEquals(java.lang.String,java.lang.String)>($r10, "Increment > 31 : 120");

     label07:
        $r3 = new org.quartz.CronExpression;

        specialinvoke $r3.<org.quartz.CronExpression: void <init>(java.lang.String)>("0 0 0 / * 2-6");

        staticinvoke <org.quartz.CronExpressionTest: void fail(java.lang.String)>("Cron did not validate bad range interval in \'_blank/_blank\'");

     label08:
        goto label10;

     label09:
        $r11 := @caughtexception;

        $r12 = virtualinvoke $r11.<java.text.ParseException: java.lang.String getMessage()>();

        staticinvoke <org.quartz.CronExpressionTest: void assertEquals(java.lang.String,java.lang.String)>($r12, "\'/\' must be followed by an integer.");

     label10:
        $r4 = new org.quartz.CronExpression;

        specialinvoke $r4.<org.quartz.CronExpression: void <init>(java.lang.String)>("0 0 0 0/ * 2-6");

        staticinvoke <org.quartz.CronExpressionTest: void fail(java.lang.String)>("Cron did not validate bad range interval in \'0/_blank\'");

     label11:
        goto label13;

     label12:
        $r7 := @caughtexception;

        $r8 = virtualinvoke $r7.<java.text.ParseException: java.lang.String getMessage()>();

        staticinvoke <org.quartz.CronExpressionTest: void assertEquals(java.lang.String,java.lang.String)>($r8, "\'/\' must be followed by an integer.");

     label13:
        return;

        catch java.text.ParseException from label01 to label02 with label03;
        catch java.text.ParseException from label04 to label05 with label06;
        catch java.text.ParseException from label07 to label08 with label09;
        catch java.text.ParseException from label10 to label11 with label12;
    }

    public void testMonthRangeIntervalAfterSlash() throws java.lang.Exception
    {
        org.quartz.CronExpressionTest r0;
        org.quartz.CronExpression $r1, $r2, $r3, $r4;
        java.text.ParseException $r5, $r7, $r9, $r11;
        java.lang.String $r6, $r8, $r10, $r12;

        r0 := @this: org.quartz.CronExpressionTest;

     label01:
        $r1 = new org.quartz.CronExpression;

        specialinvoke $r1.<org.quartz.CronExpression: void <init>(java.lang.String)>("0 0 0 ? /120 2-6");

        staticinvoke <org.quartz.CronExpressionTest: void fail(java.lang.String)>("Cron did not validate bad range interval in \'_blank/xxx\' form");

     label02:
        goto label04;

     label03:
        $r9 := @caughtexception;

        $r10 = virtualinvoke $r9.<java.text.ParseException: java.lang.String getMessage()>();

        staticinvoke <org.quartz.CronExpressionTest: void assertEquals(java.lang.String,java.lang.String)>($r10, "Increment > 12 : 120");

     label04:
        $r2 = new org.quartz.CronExpression;

        specialinvoke $r2.<org.quartz.CronExpression: void <init>(java.lang.String)>("0 0 0 ? 0/120 2-6");

        staticinvoke <org.quartz.CronExpressionTest: void fail(java.lang.String)>("Cron did not validate bad range interval in in \'0/xxx\' form");

     label05:
        goto label07;

     label06:
        $r7 := @caughtexception;

        $r8 = virtualinvoke $r7.<java.text.ParseException: java.lang.String getMessage()>();

        staticinvoke <org.quartz.CronExpressionTest: void assertEquals(java.lang.String,java.lang.String)>($r8, "Increment > 12 : 120");

     label07:
        $r3 = new org.quartz.CronExpression;

        specialinvoke $r3.<org.quartz.CronExpression: void <init>(java.lang.String)>("0 0 0 ? / 2-6");

        staticinvoke <org.quartz.CronExpressionTest: void fail(java.lang.String)>("Cron did not validate bad range interval in \'_blank/_blank\'");

     label08:
        goto label10;

     label09:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<java.text.ParseException: java.lang.String getMessage()>();

        staticinvoke <org.quartz.CronExpressionTest: void assertEquals(java.lang.String,java.lang.String)>($r6, "\'/\' must be followed by an integer.");

     label10:
        $r4 = new org.quartz.CronExpression;

        specialinvoke $r4.<org.quartz.CronExpression: void <init>(java.lang.String)>("0 0 0 ? 0/ 2-6");

        staticinvoke <org.quartz.CronExpressionTest: void fail(java.lang.String)>("Cron did not validate bad range interval in \'0/_blank\'");

     label11:
        goto label13;

     label12:
        $r11 := @caughtexception;

        $r12 = virtualinvoke $r11.<java.text.ParseException: java.lang.String getMessage()>();

        staticinvoke <org.quartz.CronExpressionTest: void assertEquals(java.lang.String,java.lang.String)>($r12, "\'/\' must be followed by an integer.");

     label13:
        return;

        catch java.text.ParseException from label01 to label02 with label03;
        catch java.text.ParseException from label04 to label05 with label06;
        catch java.text.ParseException from label07 to label08 with label09;
        catch java.text.ParseException from label10 to label11 with label12;
    }

    public void testDayOfWeekRangeIntervalAfterSlash() throws java.lang.Exception
    {
        org.quartz.CronExpressionTest r0;
        org.quartz.CronExpression $r1, $r2, $r3, $r4;
        java.text.ParseException $r5, $r7, $r9, $r11;
        java.lang.String $r6, $r8, $r10, $r12;

        r0 := @this: org.quartz.CronExpressionTest;

     label01:
        $r1 = new org.quartz.CronExpression;

        specialinvoke $r1.<org.quartz.CronExpression: void <init>(java.lang.String)>("0 0 0 ? * /120");

        staticinvoke <org.quartz.CronExpressionTest: void fail(java.lang.String)>("Cron did not validate bad range interval in \'_blank/xxx\' form");

     label02:
        goto label04;

     label03:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<java.text.ParseException: java.lang.String getMessage()>();

        staticinvoke <org.quartz.CronExpressionTest: void assertEquals(java.lang.String,java.lang.String)>($r6, "Increment > 7 : 120");

     label04:
        $r2 = new org.quartz.CronExpression;

        specialinvoke $r2.<org.quartz.CronExpression: void <init>(java.lang.String)>("0 0 0 ? * 0/120");

        staticinvoke <org.quartz.CronExpressionTest: void fail(java.lang.String)>("Cron did not validate bad range interval in in \'0/xxx\' form");

     label05:
        goto label07;

     label06:
        $r11 := @caughtexception;

        $r12 = virtualinvoke $r11.<java.text.ParseException: java.lang.String getMessage()>();

        staticinvoke <org.quartz.CronExpressionTest: void assertEquals(java.lang.String,java.lang.String)>($r12, "Increment > 7 : 120");

     label07:
        $r3 = new org.quartz.CronExpression;

        specialinvoke $r3.<org.quartz.CronExpression: void <init>(java.lang.String)>("0 0 0 ? * /");

        staticinvoke <org.quartz.CronExpressionTest: void fail(java.lang.String)>("Cron did not validate bad range interval in \'_blank/_blank\'");

     label08:
        goto label10;

     label09:
        $r9 := @caughtexception;

        $r10 = virtualinvoke $r9.<java.text.ParseException: java.lang.String getMessage()>();

        staticinvoke <org.quartz.CronExpressionTest: void assertEquals(java.lang.String,java.lang.String)>($r10, "\'/\' must be followed by an integer.");

     label10:
        $r4 = new org.quartz.CronExpression;

        specialinvoke $r4.<org.quartz.CronExpression: void <init>(java.lang.String)>("0 0 0 ? * 0/");

        staticinvoke <org.quartz.CronExpressionTest: void fail(java.lang.String)>("Cron did not validate bad range interval in \'0/_blank\'");

     label11:
        goto label13;

     label12:
        $r7 := @caughtexception;

        $r8 = virtualinvoke $r7.<java.text.ParseException: java.lang.String getMessage()>();

        staticinvoke <org.quartz.CronExpressionTest: void assertEquals(java.lang.String,java.lang.String)>($r8, "\'/\' must be followed by an integer.");

     label13:
        return;

        catch java.text.ParseException from label01 to label02 with label03;
        catch java.text.ParseException from label04 to label05 with label06;
        catch java.text.ParseException from label07 to label08 with label09;
        catch java.text.ParseException from label10 to label11 with label12;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        java.lang.String[] r0;
        org.quartz.CronExpressionTest $r1;

        r0 := @parameter0: java.lang.String[];

        $r1 = new org.quartz.CronExpressionTest;

        specialinvoke $r1.<org.quartz.CronExpressionTest: void <init>()>();

        virtualinvoke $r1.<org.quartz.CronExpressionTest: void writeJobDataFile(java.lang.String)>("1.5.2");

        return;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;
        java.util.TimeZone $r1;

        $r0 = newarray (java.lang.String)[1];

        $r0[0] = "1.5.2";

        <org.quartz.CronExpressionTest: java.lang.String[] VERSIONS> = $r0;

        $r1 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("US/Eastern");

        <org.quartz.CronExpressionTest: java.util.TimeZone EST_TIME_ZONE> = $r1;

        return;
    }
}
