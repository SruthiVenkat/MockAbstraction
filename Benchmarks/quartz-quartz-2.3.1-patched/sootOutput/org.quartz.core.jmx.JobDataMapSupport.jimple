public class org.quartz.core.jmx.JobDataMapSupport extends java.lang.Object
{
    private static final java.lang.String typeName;
    private static final java.lang.String[] keyValue;
    private static final javax.management.openmbean.OpenType[] openTypes;
    private static final javax.management.openmbean.CompositeType rowType;
    public static final javax.management.openmbean.TabularType TABULAR_TYPE;

    public void <init>()
    {
        org.quartz.core.jmx.JobDataMapSupport r0;

        r0 := @this: org.quartz.core.jmx.JobDataMapSupport;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.quartz.JobDataMap newJobDataMap(javax.management.openmbean.TabularData)
    {
        javax.management.openmbean.TabularData r0;
        java.util.Iterator r2;
        javax.management.openmbean.CompositeData r3;
        org.quartz.JobDataMap $r4;
        java.util.Collection $r5;
        boolean $z0;
        java.lang.Object $r6, $r7, $r9;
        java.lang.String $r8, $r10;

        r0 := @parameter0: javax.management.openmbean.TabularData;

        $r4 = new org.quartz.JobDataMap;

        specialinvoke $r4.<org.quartz.JobDataMap: void <init>()>();

        if r0 == null goto label2;

        $r5 = interfaceinvoke r0.<javax.management.openmbean.TabularData: java.util.Collection values()>();

        r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (javax.management.openmbean.CompositeData) $r6;

        $r7 = interfaceinvoke r3.<javax.management.openmbean.CompositeData: java.lang.Object get(java.lang.String)>("key");

        $r8 = (java.lang.String) $r7;

        $r9 = interfaceinvoke r3.<javax.management.openmbean.CompositeData: java.lang.Object get(java.lang.String)>("value");

        $r10 = (java.lang.String) $r9;

        virtualinvoke $r4.<org.quartz.JobDataMap: void put(java.lang.String,java.lang.String)>($r8, $r10);

        goto label1;

     label2:
        return $r4;
    }

    public static org.quartz.JobDataMap newJobDataMap(java.util.Map)
    {
        java.util.Map r0;
        java.util.Iterator r2;
        java.lang.String r3;
        org.quartz.JobDataMap $r4;
        java.util.Set $r5;
        boolean $z0;
        java.lang.Object $r6, $r7;

        r0 := @parameter0: java.util.Map;

        $r4 = new org.quartz.JobDataMap;

        specialinvoke $r4.<org.quartz.JobDataMap: void <init>()>();

        if r0 == null goto label2;

        $r5 = interfaceinvoke r0.<java.util.Map: java.util.Set keySet()>();

        r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r6;

        $r7 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);

        virtualinvoke $r4.<org.quartz.JobDataMap: java.lang.Object put(java.lang.String,java.lang.Object)>(r3, $r7);

        goto label1;

     label2:
        return $r4;
    }

    public static javax.management.openmbean.CompositeData toCompositeData(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        javax.management.openmbean.CompositeDataSupport $r3;
        java.lang.Object[] $r4;
        java.lang.String[] $r5;
        javax.management.openmbean.CompositeType $r6;
        javax.management.openmbean.OpenDataException $r7;
        java.lang.RuntimeException $r8;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

     label1:
        $r3 = new javax.management.openmbean.CompositeDataSupport;

        $r6 = <org.quartz.core.jmx.JobDataMapSupport: javax.management.openmbean.CompositeType rowType>;

        $r5 = <org.quartz.core.jmx.JobDataMapSupport: java.lang.String[] keyValue>;

        $r4 = newarray (java.lang.Object)[2];

        $r4[0] = r0;

        $r4[1] = r1;

        specialinvoke $r3.<javax.management.openmbean.CompositeDataSupport: void <init>(javax.management.openmbean.CompositeType,java.lang.String[],java.lang.Object[])>($r6, $r5, $r4);

     label2:
        return $r3;

     label3:
        $r7 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r7);

        throw $r8;

        catch javax.management.openmbean.OpenDataException from label1 to label2 with label3;
    }

    public static javax.management.openmbean.TabularData toTabularData(org.quartz.JobDataMap)
    {
        org.quartz.JobDataMap r0;
        java.util.Iterator r3;
        java.lang.String r4, $r14;
        javax.management.openmbean.TabularDataSupport $r5;
        javax.management.openmbean.TabularType $r6;
        java.util.ArrayList $r7;
        java.util.Set $r8;
        boolean $z0;
        int $i0;
        javax.management.openmbean.CompositeData[] $r9, $r11;
        java.lang.Object[] $r10;
        java.lang.Object $r12, $r13;
        javax.management.openmbean.CompositeData $r15;

        r0 := @parameter0: org.quartz.JobDataMap;

        $r5 = new javax.management.openmbean.TabularDataSupport;

        $r6 = <org.quartz.core.jmx.JobDataMapSupport: javax.management.openmbean.TabularType TABULAR_TYPE>;

        specialinvoke $r5.<javax.management.openmbean.TabularDataSupport: void <init>(javax.management.openmbean.TabularType)>($r6);

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        $r8 = virtualinvoke r0.<org.quartz.JobDataMap: java.util.Set keySet()>();

        r3 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r12 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r12;

        $r13 = virtualinvoke r0.<org.quartz.JobDataMap: java.lang.Object get(java.lang.Object)>(r4);

        $r14 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r13);

        $r15 = staticinvoke <org.quartz.core.jmx.JobDataMapSupport: javax.management.openmbean.CompositeData toCompositeData(java.lang.String,java.lang.String)>(r4, $r14);

        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>($r15);

        goto label1;

     label2:
        $i0 = virtualinvoke $r7.<java.util.ArrayList: int size()>();

        $r9 = newarray (javax.management.openmbean.CompositeData)[$i0];

        $r10 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        $r11 = (javax.management.openmbean.CompositeData[]) $r10;

        interfaceinvoke $r5.<javax.management.openmbean.TabularData: void putAll(javax.management.openmbean.CompositeData[])>($r11);

        return $r5;
    }

    static void <clinit>()
    {
        java.lang.String[] $r1, $r7, $r8, $r10;
        javax.management.openmbean.OpenType[] $r2, $r6;
        javax.management.openmbean.SimpleType $r3, $r4;
        javax.management.openmbean.CompositeType $r5, $r11;
        javax.management.openmbean.TabularType $r9;
        javax.management.openmbean.OpenDataException $r12;
        java.lang.RuntimeException $r13;

        <org.quartz.core.jmx.JobDataMapSupport: java.lang.String typeName> = "JobDataMap";

        $r1 = newarray (java.lang.String)[2];

        $r1[0] = "key";

        $r1[1] = "value";

        <org.quartz.core.jmx.JobDataMapSupport: java.lang.String[] keyValue> = $r1;

        $r2 = newarray (javax.management.openmbean.OpenType)[2];

        $r3 = <javax.management.openmbean.SimpleType: javax.management.openmbean.SimpleType STRING>;

        $r2[0] = $r3;

        $r4 = <javax.management.openmbean.SimpleType: javax.management.openmbean.SimpleType STRING>;

        $r2[1] = $r4;

        <org.quartz.core.jmx.JobDataMapSupport: javax.management.openmbean.OpenType[] openTypes> = $r2;

     label1:
        $r5 = new javax.management.openmbean.CompositeType;

        $r8 = <org.quartz.core.jmx.JobDataMapSupport: java.lang.String[] keyValue>;

        $r7 = <org.quartz.core.jmx.JobDataMapSupport: java.lang.String[] keyValue>;

        $r6 = <org.quartz.core.jmx.JobDataMapSupport: javax.management.openmbean.OpenType[] openTypes>;

        specialinvoke $r5.<javax.management.openmbean.CompositeType: void <init>(java.lang.String,java.lang.String,java.lang.String[],java.lang.String[],javax.management.openmbean.OpenType[])>("JobDataMap", "JobDataMap", $r8, $r7, $r6);

        <org.quartz.core.jmx.JobDataMapSupport: javax.management.openmbean.CompositeType rowType> = $r5;

        $r9 = new javax.management.openmbean.TabularType;

        $r11 = <org.quartz.core.jmx.JobDataMapSupport: javax.management.openmbean.CompositeType rowType>;

        $r10 = newarray (java.lang.String)[1];

        $r10[0] = "key";

        specialinvoke $r9.<javax.management.openmbean.TabularType: void <init>(java.lang.String,java.lang.String,javax.management.openmbean.CompositeType,java.lang.String[])>("JobDataMap", "JobDataMap", $r11, $r10);

        <org.quartz.core.jmx.JobDataMapSupport: javax.management.openmbean.TabularType TABULAR_TYPE> = $r9;

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;

        $r13 = new java.lang.RuntimeException;

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r12);

        throw $r13;

     label4:
        return;

        catch javax.management.openmbean.OpenDataException from label1 to label2 with label3;
    }
}
