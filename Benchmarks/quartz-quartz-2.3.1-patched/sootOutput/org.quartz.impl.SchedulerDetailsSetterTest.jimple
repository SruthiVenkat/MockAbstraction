public class org.quartz.impl.SchedulerDetailsSetterTest extends junit.framework.TestCase
{
    private static final java.util.concurrent.atomic.AtomicInteger instanceIdCalls;
    private static final java.util.concurrent.atomic.AtomicInteger instanceNameCalls;

    public void <init>()
    {
        org.quartz.impl.SchedulerDetailsSetterTest r0;

        r0 := @this: org.quartz.impl.SchedulerDetailsSetterTest;

        specialinvoke r0.<junit.framework.TestCase: void <init>()>();

        return;
    }

    public void testSetter() throws org.quartz.SchedulerException, java.io.IOException
    {
        org.quartz.impl.SchedulerDetailsSetterTest r0;
        org.quartz.impl.DirectSchedulerFactory r3;
        java.util.Properties $r4;
        java.lang.Class $r5, $r7, $r10;
        java.io.InputStream $r6;
        java.lang.String $r8, $r11;
        org.quartz.impl.StdSchedulerFactory $r13;
        java.util.concurrent.atomic.AtomicInteger $r15, $r16, $r19, $r20;
        int $i0, $i1, $i2, $i3;
        org.quartz.impl.SchedulerDetailsSetterTest$MyThreadPool $r17;
        org.quartz.impl.SchedulerDetailsSetterTest$MyJobStore $r18;

        r0 := @this: org.quartz.impl.SchedulerDetailsSetterTest;

        $r4 = new java.util.Properties;

        specialinvoke $r4.<java.util.Properties: void <init>()>();

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>("/org/quartz/quartz.properties");

        virtualinvoke $r4.<java.util.Properties: void load(java.io.InputStream)>($r6);

        $r7 = class "Lorg/quartz/impl/SchedulerDetailsSetterTest$MyThreadPool;";

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r4.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("org.quartz.threadPool.class", $r8);

        $r10 = class "Lorg/quartz/impl/SchedulerDetailsSetterTest$MyJobStore;";

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r4.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("org.quartz.jobStore.class", $r11);

        $r13 = new org.quartz.impl.StdSchedulerFactory;

        specialinvoke $r13.<org.quartz.impl.StdSchedulerFactory: void <init>(java.util.Properties)>($r4);

        virtualinvoke $r13.<org.quartz.impl.StdSchedulerFactory: org.quartz.Scheduler getScheduler()>();

        $r15 = <org.quartz.impl.SchedulerDetailsSetterTest: java.util.concurrent.atomic.AtomicInteger instanceIdCalls>;

        $i0 = virtualinvoke $r15.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        staticinvoke <org.quartz.impl.SchedulerDetailsSetterTest: void assertEquals(int,int)>(3, $i0);

        $r16 = <org.quartz.impl.SchedulerDetailsSetterTest: java.util.concurrent.atomic.AtomicInteger instanceNameCalls>;

        $i1 = virtualinvoke $r16.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        staticinvoke <org.quartz.impl.SchedulerDetailsSetterTest: void assertEquals(int,int)>(3, $i1);

        r3 = staticinvoke <org.quartz.impl.DirectSchedulerFactory: org.quartz.impl.DirectSchedulerFactory getInstance()>();

        $r17 = new org.quartz.impl.SchedulerDetailsSetterTest$MyThreadPool;

        specialinvoke $r17.<org.quartz.impl.SchedulerDetailsSetterTest$MyThreadPool: void <init>()>();

        $r18 = new org.quartz.impl.SchedulerDetailsSetterTest$MyJobStore;

        specialinvoke $r18.<org.quartz.impl.SchedulerDetailsSetterTest$MyJobStore: void <init>()>();

        virtualinvoke r3.<org.quartz.impl.DirectSchedulerFactory: void createScheduler(org.quartz.spi.ThreadPool,org.quartz.spi.JobStore)>($r17, $r18);

        $r19 = <org.quartz.impl.SchedulerDetailsSetterTest: java.util.concurrent.atomic.AtomicInteger instanceIdCalls>;

        $i2 = virtualinvoke $r19.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        staticinvoke <org.quartz.impl.SchedulerDetailsSetterTest: void assertEquals(int,int)>(5, $i2);

        $r20 = <org.quartz.impl.SchedulerDetailsSetterTest: java.util.concurrent.atomic.AtomicInteger instanceNameCalls>;

        $i3 = virtualinvoke $r20.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        staticinvoke <org.quartz.impl.SchedulerDetailsSetterTest: void assertEquals(int,int)>(6, $i3);

        return;
    }

    public void testMissingSetterMethods() throws org.quartz.SchedulerException
    {
        org.quartz.impl.SchedulerDetailsSetterTest r0;
        java.lang.Object $r1;

        r0 := @this: org.quartz.impl.SchedulerDetailsSetterTest;

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        staticinvoke <org.quartz.impl.SchedulerDetailsSetter: void setDetails(java.lang.Object,java.lang.String,java.lang.String)>($r1, "name", "id");

        return;
    }

    public void testUnimplementedMethods() throws java.lang.Exception
    {
        org.quartz.impl.SchedulerDetailsSetterTest r0;
        org.quartz.spi.ThreadPool r1;
        java.lang.AbstractMethodError $r3;

        r0 := @this: org.quartz.impl.SchedulerDetailsSetterTest;

        r1 = specialinvoke r0.<org.quartz.impl.SchedulerDetailsSetterTest: org.quartz.spi.ThreadPool makeIncompleteThreadPool()>();

     label1:
        interfaceinvoke r1.<org.quartz.spi.ThreadPool: void setInstanceName(java.lang.String)>("name");

        staticinvoke <org.quartz.impl.SchedulerDetailsSetterTest: void fail()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        staticinvoke <org.quartz.impl.SchedulerDetailsSetter: void setDetails(java.lang.Object,java.lang.String,java.lang.String)>(r1, "name", "id");

        return;

        catch java.lang.AbstractMethodError from label1 to label2 with label3;
    }

    private org.quartz.spi.ThreadPool makeIncompleteThreadPool() throws java.lang.InstantiationException, java.lang.IllegalAccessException
    {
        org.quartz.impl.SchedulerDetailsSetterTest r0;
        org.objectweb.asm.MethodVisitor r3;
        org.objectweb.asm.ClassWriter $r4;
        java.lang.String[] $r5;
        org.quartz.impl.SchedulerDetailsSetterTest$1 $r6;
        byte[] $r7;
        java.lang.Class $r8;
        java.lang.Object $r9;
        org.quartz.spi.ThreadPool $r10;

        r0 := @this: org.quartz.impl.SchedulerDetailsSetterTest;

        $r4 = new org.objectweb.asm.ClassWriter;

        specialinvoke $r4.<org.objectweb.asm.ClassWriter: void <init>(int)>(0);

        $r5 = newarray (java.lang.String)[1];

        $r5[0] = "org/quartz/spi/ThreadPool";

        virtualinvoke $r4.<org.objectweb.asm.ClassWriter: void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>(49, 1, "IncompleteThreadPool", null, "java/lang/Object", $r5);

        r3 = virtualinvoke $r4.<org.objectweb.asm.ClassWriter: org.objectweb.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>(1, "<init>", "()V", null, null);

        interfaceinvoke r3.<org.objectweb.asm.MethodVisitor: void visitCode()>();

        interfaceinvoke r3.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 0);

        interfaceinvoke r3.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>(183, "java/lang/Object", "<init>", "()V");

        interfaceinvoke r3.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(177);

        interfaceinvoke r3.<org.objectweb.asm.MethodVisitor: void visitMaxs(int,int)>(1, 1);

        interfaceinvoke r3.<org.objectweb.asm.MethodVisitor: void visitEnd()>();

        virtualinvoke $r4.<org.objectweb.asm.ClassWriter: void visitEnd()>();

        $r6 = new org.quartz.impl.SchedulerDetailsSetterTest$1;

        specialinvoke $r6.<org.quartz.impl.SchedulerDetailsSetterTest$1: void <init>(org.quartz.impl.SchedulerDetailsSetterTest)>(r0);

        $r7 = virtualinvoke $r4.<org.objectweb.asm.ClassWriter: byte[] toByteArray()>();

        $r8 = virtualinvoke $r6.<org.quartz.impl.SchedulerDetailsSetterTest$1: java.lang.Class defineClass(java.lang.String,byte[])>("IncompleteThreadPool", $r7);

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.Object newInstance()>();

        $r10 = (org.quartz.spi.ThreadPool) $r9;

        return $r10;
    }

    static java.util.concurrent.atomic.AtomicInteger access$000()
    {
        java.util.concurrent.atomic.AtomicInteger $r0;

        $r0 = <org.quartz.impl.SchedulerDetailsSetterTest: java.util.concurrent.atomic.AtomicInteger instanceIdCalls>;

        return $r0;
    }

    static java.util.concurrent.atomic.AtomicInteger access$100()
    {
        java.util.concurrent.atomic.AtomicInteger $r0;

        $r0 = <org.quartz.impl.SchedulerDetailsSetterTest: java.util.concurrent.atomic.AtomicInteger instanceNameCalls>;

        return $r0;
    }

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicInteger $r0, $r1;

        $r0 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        <org.quartz.impl.SchedulerDetailsSetterTest: java.util.concurrent.atomic.AtomicInteger instanceIdCalls> = $r0;

        $r1 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        <org.quartz.impl.SchedulerDetailsSetterTest: java.util.concurrent.atomic.AtomicInteger instanceNameCalls> = $r1;

        return;
    }
}
