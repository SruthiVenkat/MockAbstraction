public class org.quartz.DailyTimeIntervalScheduleBuilderTest extends junit.framework.TestCase
{

    public void <init>()
    {
        org.quartz.DailyTimeIntervalScheduleBuilderTest r0;

        r0 := @this: org.quartz.DailyTimeIntervalScheduleBuilderTest;

        specialinvoke r0.<junit.framework.TestCase: void <init>()>();

        return;
    }

    public void testScheduleActualTrigger() throws java.lang.Exception
    {
        org.quartz.DailyTimeIntervalScheduleBuilderTest r0;
        org.quartz.Scheduler r1;
        org.quartz.JobDetail r2;
        org.quartz.DailyTimeIntervalTrigger r3;
        org.quartz.JobBuilder $r4;
        org.quartz.TriggerBuilder $r5, $r6, $r9;
        org.quartz.DailyTimeIntervalScheduleBuilder $r7, $r8;
        org.quartz.Trigger $r10;

        r0 := @this: org.quartz.DailyTimeIntervalScheduleBuilderTest;

        r1 = staticinvoke <org.quartz.impl.StdSchedulerFactory: org.quartz.Scheduler getDefaultScheduler()>();

        $r4 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob(java.lang.Class)>(class "Lorg/quartz/DailyTimeIntervalScheduleBuilderTest$MyJob;");

        r2 = virtualinvoke $r4.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        $r5 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r6 = virtualinvoke $r5.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String)>("test");

        $r7 = staticinvoke <org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DailyTimeIntervalScheduleBuilder dailyTimeIntervalSchedule()>();

        $r8 = virtualinvoke $r7.<org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DailyTimeIntervalScheduleBuilder withIntervalInSeconds(int)>(3);

        $r9 = virtualinvoke $r6.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>($r8);

        $r10 = virtualinvoke $r9.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        r3 = (org.quartz.DailyTimeIntervalTrigger) $r10;

        interfaceinvoke r1.<org.quartz.Scheduler: java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)>(r2, r3);

        interfaceinvoke r1.<org.quartz.Scheduler: void shutdown()>();

        return;
    }

    public void testScheduleInMiddleOfDailyInterval() throws java.lang.Exception
    {
        org.quartz.DailyTimeIntervalScheduleBuilderTest r0;
        java.util.Calendar r1;
        int i0;
        org.quartz.Scheduler r2;
        java.util.Date r3, $r12, $r19, $r25, $r28, $r29, $r49, $r52;
        org.quartz.JobBuilder $r4, $r30;
        org.quartz.TriggerBuilder $r5, $r6, $r11, $r13, $r31, $r32, $r37, $r38;
        org.quartz.DailyTimeIntervalScheduleBuilder $r7, $r9, $r10, $r33, $r35, $r36;
        org.quartz.TimeOfDay $r8, $r34;
        org.quartz.TriggerKey $r15, $r40;
        java.lang.StringBuilder $r16, $r18, $r20, $r22, $r24, $r26, $r41, $r43, $r44, $r46, $r48, $r50;
        java.io.PrintStream $r17, $r23, $r42, $r47;
        java.lang.String $r21, $r27, $r45, $r51;
        boolean $z0, $z1;
        org.quartz.JobDetail r53, r56;
        org.quartz.Trigger r54, r55, r57, r58;

        r0 := @this: org.quartz.DailyTimeIntervalScheduleBuilderTest;

        r1 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        i0 = virtualinvoke r1.<java.util.Calendar: int get(int)>(10);

        if i0 >= 3 goto label1;

        return;

     label1:
        r2 = staticinvoke <org.quartz.impl.StdSchedulerFactory: org.quartz.Scheduler getDefaultScheduler()>();

        $r4 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob(java.lang.Class)>(class "Lorg/quartz/DailyTimeIntervalScheduleBuilderTest$MyJob;");

        r53 = virtualinvoke $r4.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        $r5 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r6 = virtualinvoke $r5.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String)>("test");

        $r7 = staticinvoke <org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DailyTimeIntervalScheduleBuilder dailyTimeIntervalSchedule()>();

        $r8 = staticinvoke <org.quartz.TimeOfDay: org.quartz.TimeOfDay hourAndMinuteOfDay(int,int)>(2, 15);

        $r9 = virtualinvoke $r7.<org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DailyTimeIntervalScheduleBuilder startingDailyAt(org.quartz.TimeOfDay)>($r8);

        $r10 = virtualinvoke $r9.<org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DailyTimeIntervalScheduleBuilder withIntervalInMinutes(int)>(5);

        $r11 = virtualinvoke $r6.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>($r10);

        $r12 = virtualinvoke r1.<java.util.Calendar: java.util.Date getTime()>();

        $r13 = virtualinvoke $r11.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder startAt(java.util.Date)>($r12);

        r54 = virtualinvoke $r13.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        interfaceinvoke r2.<org.quartz.Scheduler: java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)>(r53, r54);

        $r15 = interfaceinvoke r54.<org.quartz.Trigger: org.quartz.TriggerKey getKey()>();

        r55 = interfaceinvoke r2.<org.quartz.Scheduler: org.quartz.Trigger getTrigger(org.quartz.TriggerKey)>($r15);

        $r17 = <java.lang.System: java.io.PrintStream out>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("testScheduleInMiddleOfDailyInterval: currTime = ");

        $r19 = virtualinvoke r1.<java.util.Calendar: java.util.Date getTime()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>($r21);

        $r23 = <java.lang.System: java.io.PrintStream out>;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("testScheduleInMiddleOfDailyInterval: computed first fire time = ");

        $r25 = interfaceinvoke r55.<org.quartz.Trigger: java.util.Date getNextFireTime()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r23.<java.io.PrintStream: void println(java.lang.String)>($r27);

        $r28 = interfaceinvoke r55.<org.quartz.Trigger: java.util.Date getNextFireTime()>();

        $r29 = virtualinvoke r1.<java.util.Calendar: java.util.Date getTime()>();

        $z0 = virtualinvoke $r28.<java.util.Date: boolean after(java.util.Date)>($r29);

        staticinvoke <junit.framework.Assert: void assertTrue(java.lang.String,boolean)>("First fire time is not after now!", $z0);

        r3 = staticinvoke <org.quartz.DateBuilder: java.util.Date todayAt(int,int,int)>(2, 15, 0);

        $r30 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob(java.lang.Class)>(class "Lorg/quartz/DailyTimeIntervalScheduleBuilderTest$MyJob;");

        r56 = virtualinvoke $r30.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        $r31 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r32 = virtualinvoke $r31.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String)>("test2");

        $r33 = staticinvoke <org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DailyTimeIntervalScheduleBuilder dailyTimeIntervalSchedule()>();

        $r34 = staticinvoke <org.quartz.TimeOfDay: org.quartz.TimeOfDay hourAndMinuteOfDay(int,int)>(2, 15);

        $r35 = virtualinvoke $r33.<org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DailyTimeIntervalScheduleBuilder startingDailyAt(org.quartz.TimeOfDay)>($r34);

        $r36 = virtualinvoke $r35.<org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DailyTimeIntervalScheduleBuilder withIntervalInMinutes(int)>(5);

        $r37 = virtualinvoke $r32.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>($r36);

        $r38 = virtualinvoke $r37.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder startAt(java.util.Date)>(r3);

        r57 = virtualinvoke $r38.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        interfaceinvoke r2.<org.quartz.Scheduler: java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)>(r56, r57);

        $r40 = interfaceinvoke r57.<org.quartz.Trigger: org.quartz.TriggerKey getKey()>();

        r58 = interfaceinvoke r2.<org.quartz.Scheduler: org.quartz.Trigger getTrigger(org.quartz.TriggerKey)>($r40);

        $r42 = <java.lang.System: java.io.PrintStream out>;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("testScheduleInMiddleOfDailyInterval: startTime = ");

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r42.<java.io.PrintStream: void println(java.lang.String)>($r45);

        $r47 = <java.lang.System: java.io.PrintStream out>;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        $r48 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("testScheduleInMiddleOfDailyInterval: computed first fire time = ");

        $r49 = interfaceinvoke r58.<org.quartz.Trigger: java.util.Date getNextFireTime()>();

        $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r49);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r47.<java.io.PrintStream: void println(java.lang.String)>($r51);

        $r52 = interfaceinvoke r58.<org.quartz.Trigger: java.util.Date getNextFireTime()>();

        $z1 = virtualinvoke $r52.<java.util.Date: boolean equals(java.lang.Object)>(r3);

        staticinvoke <junit.framework.Assert: void assertTrue(java.lang.String,boolean)>("First fire time is not after now!", $z1);

        interfaceinvoke r2.<org.quartz.Scheduler: void shutdown()>();

        return;
    }

    public void testHourlyTrigger()
    {
        org.quartz.DailyTimeIntervalScheduleBuilderTest r0;
        org.quartz.DailyTimeIntervalTrigger r1;
        java.util.List r2;
        org.quartz.TriggerBuilder $r3, $r4, $r7;
        org.quartz.DailyTimeIntervalScheduleBuilder $r5, $r6;
        org.quartz.Trigger $r8;
        org.quartz.TriggerKey $r9, $r11;
        java.lang.String $r10, $r12;
        org.quartz.DateBuilder$IntervalUnit $r13, $r14;
        int $i0, $i1;
        org.quartz.spi.OperableTrigger $r15;

        r0 := @this: org.quartz.DailyTimeIntervalScheduleBuilderTest;

        $r3 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r4 = virtualinvoke $r3.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String)>("test");

        $r5 = staticinvoke <org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DailyTimeIntervalScheduleBuilder dailyTimeIntervalSchedule()>();

        $r6 = virtualinvoke $r5.<org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DailyTimeIntervalScheduleBuilder withIntervalInHours(int)>(1);

        $r7 = virtualinvoke $r4.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>($r6);

        $r8 = virtualinvoke $r7.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        r1 = (org.quartz.DailyTimeIntervalTrigger) $r8;

        $r9 = interfaceinvoke r1.<org.quartz.DailyTimeIntervalTrigger: org.quartz.TriggerKey getKey()>();

        $r10 = virtualinvoke $r9.<org.quartz.TriggerKey: java.lang.String getName()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.String)>("test", $r10);

        $r11 = interfaceinvoke r1.<org.quartz.DailyTimeIntervalTrigger: org.quartz.TriggerKey getKey()>();

        $r12 = virtualinvoke $r11.<org.quartz.TriggerKey: java.lang.String getGroup()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.String)>("DEFAULT", $r12);

        $r13 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit HOUR>;

        $r14 = interfaceinvoke r1.<org.quartz.DailyTimeIntervalTrigger: org.quartz.DateBuilder$IntervalUnit getRepeatIntervalUnit()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r13, $r14);

        $i0 = interfaceinvoke r1.<org.quartz.DailyTimeIntervalTrigger: int getRepeatInterval()>();

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(1, $i0);

        $r15 = (org.quartz.spi.OperableTrigger) r1;

        r2 = staticinvoke <org.quartz.TriggerUtils: java.util.List computeFireTimes(org.quartz.spi.OperableTrigger,org.quartz.Calendar,int)>($r15, null, 48);

        $i1 = interfaceinvoke r2.<java.util.List: int size()>();

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(48, $i1);

        return;
    }

    public void testMinutelyTriggerWithTimeOfDay()
    {
        org.quartz.DailyTimeIntervalScheduleBuilderTest r0;
        org.quartz.DailyTimeIntervalTrigger r1;
        java.util.List r2;
        org.quartz.TriggerBuilder $r3, $r4, $r12;
        org.quartz.DailyTimeIntervalScheduleBuilder $r5, $r6, $r8, $r10, $r11;
        org.quartz.TimeOfDay $r7, $r9, $r23, $r24, $r25, $r26;
        org.quartz.Trigger $r13;
        org.quartz.TriggerKey $r14, $r16;
        java.lang.String $r15, $r17;
        java.util.Date $r18, $r19, $r20;
        long $l0, $l1;
        byte $b2;
        org.quartz.DateBuilder$IntervalUnit $r21, $r22;
        int $i3, $i4;
        org.quartz.spi.OperableTrigger $r27;
        boolean $z2, $z3;

        r0 := @this: org.quartz.DailyTimeIntervalScheduleBuilderTest;

        $r3 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r4 = virtualinvoke $r3.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String,java.lang.String)>("test", "group");

        $r5 = staticinvoke <org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DailyTimeIntervalScheduleBuilder dailyTimeIntervalSchedule()>();

        $r6 = virtualinvoke $r5.<org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DailyTimeIntervalScheduleBuilder withIntervalInMinutes(int)>(72);

        $r7 = staticinvoke <org.quartz.TimeOfDay: org.quartz.TimeOfDay hourAndMinuteOfDay(int,int)>(8, 0);

        $r8 = virtualinvoke $r6.<org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DailyTimeIntervalScheduleBuilder startingDailyAt(org.quartz.TimeOfDay)>($r7);

        $r9 = staticinvoke <org.quartz.TimeOfDay: org.quartz.TimeOfDay hourAndMinuteOfDay(int,int)>(17, 0);

        $r10 = virtualinvoke $r8.<org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DailyTimeIntervalScheduleBuilder endingDailyAt(org.quartz.TimeOfDay)>($r9);

        $r11 = virtualinvoke $r10.<org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DailyTimeIntervalScheduleBuilder onMondayThroughFriday()>();

        $r12 = virtualinvoke $r4.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>($r11);

        $r13 = virtualinvoke $r12.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        r1 = (org.quartz.DailyTimeIntervalTrigger) $r13;

        $r14 = interfaceinvoke r1.<org.quartz.DailyTimeIntervalTrigger: org.quartz.TriggerKey getKey()>();

        $r15 = virtualinvoke $r14.<org.quartz.TriggerKey: java.lang.String getName()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.String)>("test", $r15);

        $r16 = interfaceinvoke r1.<org.quartz.DailyTimeIntervalTrigger: org.quartz.TriggerKey getKey()>();

        $r17 = virtualinvoke $r16.<org.quartz.TriggerKey: java.lang.String getGroup()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.String)>("group", $r17);

        $r18 = new java.util.Date;

        specialinvoke $r18.<java.util.Date: void <init>()>();

        $l0 = virtualinvoke $r18.<java.util.Date: long getTime()>();

        $r19 = interfaceinvoke r1.<org.quartz.DailyTimeIntervalTrigger: java.util.Date getStartTime()>();

        $l1 = virtualinvoke $r19.<java.util.Date: long getTime()>();

        $b2 = $l0 cmp $l1;

        if $b2 < 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <junit.framework.Assert: void assertEquals(boolean,boolean)>(1, $z2);

        $r20 = interfaceinvoke r1.<org.quartz.DailyTimeIntervalTrigger: java.util.Date getEndTime()>();

        if null != $r20 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        staticinvoke <junit.framework.Assert: void assertEquals(boolean,boolean)>(1, $z3);

        $r21 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit MINUTE>;

        $r22 = interfaceinvoke r1.<org.quartz.DailyTimeIntervalTrigger: org.quartz.DateBuilder$IntervalUnit getRepeatIntervalUnit()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r21, $r22);

        $i3 = interfaceinvoke r1.<org.quartz.DailyTimeIntervalTrigger: int getRepeatInterval()>();

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(72, $i3);

        $r23 = new org.quartz.TimeOfDay;

        specialinvoke $r23.<org.quartz.TimeOfDay: void <init>(int,int)>(8, 0);

        $r24 = interfaceinvoke r1.<org.quartz.DailyTimeIntervalTrigger: org.quartz.TimeOfDay getStartTimeOfDay()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r23, $r24);

        $r25 = new org.quartz.TimeOfDay;

        specialinvoke $r25.<org.quartz.TimeOfDay: void <init>(int,int)>(17, 0);

        $r26 = interfaceinvoke r1.<org.quartz.DailyTimeIntervalTrigger: org.quartz.TimeOfDay getEndTimeOfDay()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r25, $r26);

        $r27 = (org.quartz.spi.OperableTrigger) r1;

        r2 = staticinvoke <org.quartz.TriggerUtils: java.util.List computeFireTimes(org.quartz.spi.OperableTrigger,org.quartz.Calendar,int)>($r27, null, 48);

        $i4 = interfaceinvoke r2.<java.util.List: int size()>();

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(48, $i4);

        return;
    }

    public void testSecondlyTriggerWithStartAndEndTime()
    {
        org.quartz.DailyTimeIntervalScheduleBuilderTest r0;
        java.util.Date r1, r2, $r22, $r23;
        org.quartz.DailyTimeIntervalTrigger r3;
        java.util.List r4;
        org.quartz.TriggerBuilder $r5, $r6, $r14, $r15, $r16;
        org.quartz.DailyTimeIntervalScheduleBuilder $r7, $r8, $r10, $r12, $r13;
        org.quartz.TimeOfDay $r9, $r11, $r26, $r27, $r28, $r29;
        org.quartz.Trigger $r17;
        org.quartz.TriggerKey $r18, $r20;
        java.lang.String $r19, $r21;
        long $l0, $l1, $l3, $l4;
        byte $b2, $b5;
        org.quartz.DateBuilder$IntervalUnit $r24, $r25;
        int $i6, $i7;
        org.quartz.spi.OperableTrigger $r30;
        boolean $z2, $z3;

        r0 := @this: org.quartz.DailyTimeIntervalScheduleBuilderTest;

        r1 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(0, 0, 0, 1, 1, 2011);

        r2 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(0, 0, 0, 2, 1, 2011);

        $r5 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r6 = virtualinvoke $r5.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String,java.lang.String)>("test", "test");

        $r7 = staticinvoke <org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DailyTimeIntervalScheduleBuilder dailyTimeIntervalSchedule()>();

        $r8 = virtualinvoke $r7.<org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DailyTimeIntervalScheduleBuilder withIntervalInSeconds(int)>(121);

        $r9 = staticinvoke <org.quartz.TimeOfDay: org.quartz.TimeOfDay hourMinuteAndSecondOfDay(int,int,int)>(10, 0, 0);

        $r10 = virtualinvoke $r8.<org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DailyTimeIntervalScheduleBuilder startingDailyAt(org.quartz.TimeOfDay)>($r9);

        $r11 = staticinvoke <org.quartz.TimeOfDay: org.quartz.TimeOfDay hourMinuteAndSecondOfDay(int,int,int)>(23, 59, 59);

        $r12 = virtualinvoke $r10.<org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DailyTimeIntervalScheduleBuilder endingDailyAt(org.quartz.TimeOfDay)>($r11);

        $r13 = virtualinvoke $r12.<org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DailyTimeIntervalScheduleBuilder onSaturdayAndSunday()>();

        $r14 = virtualinvoke $r6.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>($r13);

        $r15 = virtualinvoke $r14.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder startAt(java.util.Date)>(r1);

        $r16 = virtualinvoke $r15.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder endAt(java.util.Date)>(r2);

        $r17 = virtualinvoke $r16.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        r3 = (org.quartz.DailyTimeIntervalTrigger) $r17;

        $r18 = interfaceinvoke r3.<org.quartz.DailyTimeIntervalTrigger: org.quartz.TriggerKey getKey()>();

        $r19 = virtualinvoke $r18.<org.quartz.TriggerKey: java.lang.String getName()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.String)>("test", $r19);

        $r20 = interfaceinvoke r3.<org.quartz.DailyTimeIntervalTrigger: org.quartz.TriggerKey getKey()>();

        $r21 = virtualinvoke $r20.<org.quartz.TriggerKey: java.lang.String getGroup()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.String)>("test", $r21);

        $l0 = virtualinvoke r1.<java.util.Date: long getTime()>();

        $r22 = interfaceinvoke r3.<org.quartz.DailyTimeIntervalTrigger: java.util.Date getStartTime()>();

        $l1 = virtualinvoke $r22.<java.util.Date: long getTime()>();

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <junit.framework.Assert: void assertEquals(boolean,boolean)>(1, $z2);

        $l3 = virtualinvoke r2.<java.util.Date: long getTime()>();

        $r23 = interfaceinvoke r3.<org.quartz.DailyTimeIntervalTrigger: java.util.Date getEndTime()>();

        $l4 = virtualinvoke $r23.<java.util.Date: long getTime()>();

        $b5 = $l3 cmp $l4;

        if $b5 != 0 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        staticinvoke <junit.framework.Assert: void assertEquals(boolean,boolean)>(1, $z3);

        $r24 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit SECOND>;

        $r25 = interfaceinvoke r3.<org.quartz.DailyTimeIntervalTrigger: org.quartz.DateBuilder$IntervalUnit getRepeatIntervalUnit()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r24, $r25);

        $i6 = interfaceinvoke r3.<org.quartz.DailyTimeIntervalTrigger: int getRepeatInterval()>();

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(121, $i6);

        $r26 = new org.quartz.TimeOfDay;

        specialinvoke $r26.<org.quartz.TimeOfDay: void <init>(int,int,int)>(10, 0, 0);

        $r27 = interfaceinvoke r3.<org.quartz.DailyTimeIntervalTrigger: org.quartz.TimeOfDay getStartTimeOfDay()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r26, $r27);

        $r28 = new org.quartz.TimeOfDay;

        specialinvoke $r28.<org.quartz.TimeOfDay: void <init>(int,int,int)>(23, 59, 59);

        $r29 = interfaceinvoke r3.<org.quartz.DailyTimeIntervalTrigger: org.quartz.TimeOfDay getEndTimeOfDay()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r28, $r29);

        $r30 = (org.quartz.spi.OperableTrigger) r3;

        r4 = staticinvoke <org.quartz.TriggerUtils: java.util.List computeFireTimes(org.quartz.spi.OperableTrigger,org.quartz.Calendar,int)>($r30, null, 48);

        $i7 = interfaceinvoke r4.<java.util.List: int size()>();

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(48, $i7);

        return;
    }

    public void testRepeatCountTrigger()
    {
        org.quartz.DailyTimeIntervalScheduleBuilderTest r0;
        org.quartz.DailyTimeIntervalTrigger r1;
        java.util.List r2;
        org.quartz.TriggerBuilder $r3, $r4, $r8;
        org.quartz.DailyTimeIntervalScheduleBuilder $r5, $r6, $r7;
        org.quartz.Trigger $r9;
        org.quartz.TriggerKey $r10, $r12;
        java.lang.String $r11, $r13;
        org.quartz.DateBuilder$IntervalUnit $r14, $r15;
        int $i0, $i1;
        org.quartz.spi.OperableTrigger $r16;

        r0 := @this: org.quartz.DailyTimeIntervalScheduleBuilderTest;

        $r3 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r4 = virtualinvoke $r3.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String)>("test");

        $r5 = staticinvoke <org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DailyTimeIntervalScheduleBuilder dailyTimeIntervalSchedule()>();

        $r6 = virtualinvoke $r5.<org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DailyTimeIntervalScheduleBuilder withIntervalInHours(int)>(1);

        $r7 = virtualinvoke $r6.<org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DailyTimeIntervalScheduleBuilder withRepeatCount(int)>(9);

        $r8 = virtualinvoke $r4.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>($r7);

        $r9 = virtualinvoke $r8.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        r1 = (org.quartz.DailyTimeIntervalTrigger) $r9;

        $r10 = interfaceinvoke r1.<org.quartz.DailyTimeIntervalTrigger: org.quartz.TriggerKey getKey()>();

        $r11 = virtualinvoke $r10.<org.quartz.TriggerKey: java.lang.String getName()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.String)>("test", $r11);

        $r12 = interfaceinvoke r1.<org.quartz.DailyTimeIntervalTrigger: org.quartz.TriggerKey getKey()>();

        $r13 = virtualinvoke $r12.<org.quartz.TriggerKey: java.lang.String getGroup()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.String)>("DEFAULT", $r13);

        $r14 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit HOUR>;

        $r15 = interfaceinvoke r1.<org.quartz.DailyTimeIntervalTrigger: org.quartz.DateBuilder$IntervalUnit getRepeatIntervalUnit()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r14, $r15);

        $i0 = interfaceinvoke r1.<org.quartz.DailyTimeIntervalTrigger: int getRepeatInterval()>();

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(1, $i0);

        $r16 = (org.quartz.spi.OperableTrigger) r1;

        r2 = staticinvoke <org.quartz.TriggerUtils: java.util.List computeFireTimes(org.quartz.spi.OperableTrigger,org.quartz.Calendar,int)>($r16, null, 48);

        $i1 = interfaceinvoke r2.<java.util.List: int size()>();

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(10, $i1);

        return;
    }

    public void testEndingAtAfterCount()
    {
        org.quartz.DailyTimeIntervalScheduleBuilderTest r0;
        java.util.Date r1, $r21, $r23;
        org.quartz.DailyTimeIntervalTrigger r2;
        java.util.List r3;
        org.quartz.TriggerBuilder $r4, $r5, $r11, $r12;
        org.quartz.DailyTimeIntervalScheduleBuilder $r6, $r7, $r9, $r10;
        org.quartz.TimeOfDay $r8, $r25, $r26;
        org.quartz.Trigger $r13;
        org.quartz.TriggerKey $r14, $r16;
        java.lang.String $r15, $r17;
        org.quartz.DateBuilder$IntervalUnit $r18, $r19;
        org.quartz.spi.OperableTrigger $r20;
        int $i0;
        java.lang.Object $r22, $r24;

        r0 := @this: org.quartz.DailyTimeIntervalScheduleBuilderTest;

        r1 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(0, 0, 0, 1, 1, 2011);

        $r4 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r5 = virtualinvoke $r4.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String)>("test");

        $r6 = staticinvoke <org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DailyTimeIntervalScheduleBuilder dailyTimeIntervalSchedule()>();

        $r7 = virtualinvoke $r6.<org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DailyTimeIntervalScheduleBuilder withIntervalInMinutes(int)>(15);

        $r8 = staticinvoke <org.quartz.TimeOfDay: org.quartz.TimeOfDay hourAndMinuteOfDay(int,int)>(8, 0);

        $r9 = virtualinvoke $r7.<org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DailyTimeIntervalScheduleBuilder startingDailyAt(org.quartz.TimeOfDay)>($r8);

        $r10 = virtualinvoke $r9.<org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DailyTimeIntervalScheduleBuilder endingDailyAfterCount(int)>(12);

        $r11 = virtualinvoke $r5.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>($r10);

        $r12 = virtualinvoke $r11.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder startAt(java.util.Date)>(r1);

        $r13 = virtualinvoke $r12.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        r2 = (org.quartz.DailyTimeIntervalTrigger) $r13;

        $r14 = interfaceinvoke r2.<org.quartz.DailyTimeIntervalTrigger: org.quartz.TriggerKey getKey()>();

        $r15 = virtualinvoke $r14.<org.quartz.TriggerKey: java.lang.String getName()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.String)>("test", $r15);

        $r16 = interfaceinvoke r2.<org.quartz.DailyTimeIntervalTrigger: org.quartz.TriggerKey getKey()>();

        $r17 = virtualinvoke $r16.<org.quartz.TriggerKey: java.lang.String getGroup()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.String)>("DEFAULT", $r17);

        $r18 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit MINUTE>;

        $r19 = interfaceinvoke r2.<org.quartz.DailyTimeIntervalTrigger: org.quartz.DateBuilder$IntervalUnit getRepeatIntervalUnit()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r18, $r19);

        $r20 = (org.quartz.spi.OperableTrigger) r2;

        r3 = staticinvoke <org.quartz.TriggerUtils: java.util.List computeFireTimes(org.quartz.spi.OperableTrigger,org.quartz.Calendar,int)>($r20, null, 48);

        $i0 = interfaceinvoke r3.<java.util.List: int size()>();

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(48, $i0);

        $r21 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(8, 0, 0, 1, 1, 2011);

        $r22 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r21, $r22);

        $r23 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(10, 45, 0, 4, 1, 2011);

        $r24 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(47);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r23, $r24);

        $r25 = new org.quartz.TimeOfDay;

        specialinvoke $r25.<org.quartz.TimeOfDay: void <init>(int,int)>(10, 45);

        $r26 = interfaceinvoke r2.<org.quartz.DailyTimeIntervalTrigger: org.quartz.TimeOfDay getEndTimeOfDay()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r25, $r26);

        return;
    }

    public void testEndingAtAfterCountOf1()
    {
        org.quartz.DailyTimeIntervalScheduleBuilderTest r0;
        java.util.Date r1, $r22, $r24;
        org.quartz.DailyTimeIntervalTrigger r2;
        java.util.List r3;
        org.quartz.TriggerBuilder $r4, $r5, $r11, $r12, $r13;
        org.quartz.DailyTimeIntervalScheduleBuilder $r6, $r7, $r9, $r10;
        org.quartz.TimeOfDay $r8, $r26, $r27;
        org.quartz.Trigger $r14;
        org.quartz.TriggerKey $r15, $r17;
        java.lang.String $r16, $r18;
        org.quartz.DateBuilder$IntervalUnit $r19, $r20;
        org.quartz.spi.OperableTrigger $r21;
        int $i0;
        java.lang.Object $r23, $r25;

        r0 := @this: org.quartz.DailyTimeIntervalScheduleBuilderTest;

        r1 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(0, 0, 0, 1, 1, 2011);

        $r4 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r5 = virtualinvoke $r4.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String)>("test");

        $r6 = staticinvoke <org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DailyTimeIntervalScheduleBuilder dailyTimeIntervalSchedule()>();

        $r7 = virtualinvoke $r6.<org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DailyTimeIntervalScheduleBuilder withIntervalInMinutes(int)>(15);

        $r8 = staticinvoke <org.quartz.TimeOfDay: org.quartz.TimeOfDay hourAndMinuteOfDay(int,int)>(8, 0);

        $r9 = virtualinvoke $r7.<org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DailyTimeIntervalScheduleBuilder startingDailyAt(org.quartz.TimeOfDay)>($r8);

        $r10 = virtualinvoke $r9.<org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DailyTimeIntervalScheduleBuilder endingDailyAfterCount(int)>(1);

        $r11 = virtualinvoke $r5.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>($r10);

        $r12 = virtualinvoke $r11.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder startAt(java.util.Date)>(r1);

        $r13 = virtualinvoke $r12.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder forJob(java.lang.String,java.lang.String)>("testJob", "testJobGroup");

        $r14 = virtualinvoke $r13.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        r2 = (org.quartz.DailyTimeIntervalTrigger) $r14;

        $r15 = interfaceinvoke r2.<org.quartz.DailyTimeIntervalTrigger: org.quartz.TriggerKey getKey()>();

        $r16 = virtualinvoke $r15.<org.quartz.TriggerKey: java.lang.String getName()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.String)>("test", $r16);

        $r17 = interfaceinvoke r2.<org.quartz.DailyTimeIntervalTrigger: org.quartz.TriggerKey getKey()>();

        $r18 = virtualinvoke $r17.<org.quartz.TriggerKey: java.lang.String getGroup()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.String)>("DEFAULT", $r18);

        $r19 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit MINUTE>;

        $r20 = interfaceinvoke r2.<org.quartz.DailyTimeIntervalTrigger: org.quartz.DateBuilder$IntervalUnit getRepeatIntervalUnit()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r19, $r20);

        specialinvoke r0.<org.quartz.DailyTimeIntervalScheduleBuilderTest: void validateTrigger(org.quartz.DailyTimeIntervalTrigger)>(r2);

        $r21 = (org.quartz.spi.OperableTrigger) r2;

        r3 = staticinvoke <org.quartz.TriggerUtils: java.util.List computeFireTimes(org.quartz.spi.OperableTrigger,org.quartz.Calendar,int)>($r21, null, 48);

        $i0 = interfaceinvoke r3.<java.util.List: int size()>();

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(48, $i0);

        $r22 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(8, 0, 0, 1, 1, 2011);

        $r23 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r22, $r23);

        $r24 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(8, 0, 0, 17, 2, 2011);

        $r25 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(47);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r24, $r25);

        $r26 = new org.quartz.TimeOfDay;

        specialinvoke $r26.<org.quartz.TimeOfDay: void <init>(int,int)>(8, 0);

        $r27 = interfaceinvoke r2.<org.quartz.DailyTimeIntervalTrigger: org.quartz.TimeOfDay getEndTimeOfDay()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r26, $r27);

        return;
    }

    private void validateTrigger(org.quartz.DailyTimeIntervalTrigger)
    {
        org.quartz.DailyTimeIntervalScheduleBuilderTest r0;
        org.quartz.DailyTimeIntervalTrigger r1;
        org.quartz.spi.OperableTrigger $r3;
        org.quartz.SchedulerException $r4;
        java.lang.RuntimeException $r5;
        java.lang.StringBuilder $r6, $r7, $r9, $r10;
        org.quartz.TriggerKey $r8;
        java.lang.String $r11;

        r0 := @this: org.quartz.DailyTimeIntervalScheduleBuilderTest;

        r1 := @parameter0: org.quartz.DailyTimeIntervalTrigger;

     label1:
        $r3 = (org.quartz.spi.OperableTrigger) r1;

        interfaceinvoke $r3.<org.quartz.spi.OperableTrigger: void validate()>();

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Trigger ");

        $r8 = interfaceinvoke r1.<org.quartz.DailyTimeIntervalTrigger: org.quartz.TriggerKey getKey()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" failed to validate");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r11, $r4);

        throw $r5;

     label4:
        return;

        catch org.quartz.SchedulerException from label1 to label2 with label3;
    }

    public void testEndingAtAfterCountOf0()
    {
        org.quartz.DailyTimeIntervalScheduleBuilderTest r0;
        org.quartz.TriggerBuilder $r1, $r2, $r8, $r9, $r11, $r12, $r16, $r17;
        org.quartz.DailyTimeIntervalScheduleBuilder $r3, $r4, $r6, $r7, $r13, $r14, $r15;
        org.quartz.TimeOfDay $r5;
        java.lang.IllegalArgumentException $r19, $r20;
        java.util.Date r21, r23;

        r0 := @this: org.quartz.DailyTimeIntervalScheduleBuilderTest;

     label1:
        r21 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(0, 0, 0, 1, 1, 2011);

        $r1 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r2 = virtualinvoke $r1.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String)>("test");

        $r3 = staticinvoke <org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DailyTimeIntervalScheduleBuilder dailyTimeIntervalSchedule()>();

        $r4 = virtualinvoke $r3.<org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DailyTimeIntervalScheduleBuilder withIntervalInMinutes(int)>(15);

        $r5 = staticinvoke <org.quartz.TimeOfDay: org.quartz.TimeOfDay hourAndMinuteOfDay(int,int)>(8, 0);

        $r6 = virtualinvoke $r4.<org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DailyTimeIntervalScheduleBuilder startingDailyAt(org.quartz.TimeOfDay)>($r5);

        $r7 = virtualinvoke $r6.<org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DailyTimeIntervalScheduleBuilder endingDailyAfterCount(int)>(0);

        $r8 = virtualinvoke $r2.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>($r7);

        $r9 = virtualinvoke $r8.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder startAt(java.util.Date)>(r21);

        virtualinvoke $r9.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        staticinvoke <org.quartz.DailyTimeIntervalScheduleBuilderTest: void fail(java.lang.String)>("We should not accept endingDailyAfterCount(0)");

     label2:
        goto label4;

     label3:
        $r20 := @caughtexception;

     label4:
        r23 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(0, 0, 0, 1, 1, 2011);

        $r11 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r12 = virtualinvoke $r11.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String)>("test");

        $r13 = staticinvoke <org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DailyTimeIntervalScheduleBuilder dailyTimeIntervalSchedule()>();

        $r14 = virtualinvoke $r13.<org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DailyTimeIntervalScheduleBuilder withIntervalInMinutes(int)>(15);

        $r15 = virtualinvoke $r14.<org.quartz.DailyTimeIntervalScheduleBuilder: org.quartz.DailyTimeIntervalScheduleBuilder endingDailyAfterCount(int)>(1);

        $r16 = virtualinvoke $r12.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>($r15);

        $r17 = virtualinvoke $r16.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder startAt(java.util.Date)>(r23);

        virtualinvoke $r17.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        staticinvoke <org.quartz.DailyTimeIntervalScheduleBuilderTest: void fail(java.lang.String)>("We should not accept endingDailyAfterCount(x) without first setting startingDailyAt.");

     label5:
        goto label7;

     label6:
        $r19 := @caughtexception;

     label7:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
        catch java.lang.IllegalArgumentException from label4 to label5 with label6;
    }
}
