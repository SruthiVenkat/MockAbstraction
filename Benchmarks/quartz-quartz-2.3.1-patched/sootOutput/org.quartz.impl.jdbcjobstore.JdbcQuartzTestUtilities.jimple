public final class org.quartz.impl.jdbcjobstore.JdbcQuartzTestUtilities extends java.lang.Object
{
    private static final java.lang.String DATABASE_DRIVER_CLASS;
    private static final java.lang.String DATABASE_CONNECTION_PREFIX;
    private static final java.util.List DATABASE_SETUP_STATEMENTS;

    public static void createDatabase(java.lang.String) throws java.sql.SQLException
    {
        java.lang.String r0;
        org.quartz.utils.DBConnectionManager $r1;
        org.quartz.impl.jdbcjobstore.JdbcQuartzTestUtilities$DerbyEmbeddedConnectionProvider $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.quartz.utils.DBConnectionManager: org.quartz.utils.DBConnectionManager getInstance()>();

        $r2 = new org.quartz.impl.jdbcjobstore.JdbcQuartzTestUtilities$DerbyEmbeddedConnectionProvider;

        specialinvoke $r2.<org.quartz.impl.jdbcjobstore.JdbcQuartzTestUtilities$DerbyEmbeddedConnectionProvider: void <init>(java.lang.String)>(r0);

        virtualinvoke $r1.<org.quartz.utils.DBConnectionManager: void addConnectionProvider(java.lang.String,org.quartz.utils.ConnectionProvider)>(r0, $r2);

        return;
    }

    public static void destroyDatabase(java.lang.String) throws java.sql.SQLException
    {
        java.lang.String r0, $r6, $r13, $r14;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r9, $r10, $r11, $r12;
        java.sql.Connection $r7;
        java.sql.SQLException $r8;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("jdbc:derby:memory:");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";drop=true");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = staticinvoke <java.sql.DriverManager: java.sql.Connection getConnection(java.lang.String)>($r6);

        interfaceinvoke $r7.<java.sql.Connection: void close()>();

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Database \'memory:");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' dropped.");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = virtualinvoke $r8.<java.sql.SQLException: java.lang.String getMessage()>();

        $z0 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z0 != 0 goto label4;

        throw $r8;

     label4:
        return;

        catch java.sql.SQLException from label1 to label2 with label3;
    }

    public static void shutdownDatabase() throws java.sql.SQLException
    {
        java.sql.Connection $r0;
        java.lang.Class $r1;
        java.lang.IllegalAccessException $r3;
        java.lang.AssertionError $r4, $r6, $r8;
        java.lang.InstantiationException $r5;
        java.lang.ClassNotFoundException $r7;
        java.sql.SQLException $r9;
        java.lang.String $r10, $r11;
        boolean $z0;

     label1:
        $r0 = staticinvoke <java.sql.DriverManager: java.sql.Connection getConnection(java.lang.String)>("jdbc:derby:;shutdown=true");

        interfaceinvoke $r0.<java.sql.Connection: void close()>();

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        $r10 = "Derby system shutdown.";

        $r11 = virtualinvoke $r9.<java.sql.SQLException: java.lang.String getMessage()>();

        $z0 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z0 != 0 goto label4;

        throw $r9;

     label4:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.apache.derby.jdbc.EmbeddedDriver");

        virtualinvoke $r1.<java.lang.Class: java.lang.Object newInstance()>();

     label5:
        goto label9;

     label6:
        $r7 := @caughtexception;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>(java.lang.Object)>($r7);

        throw $r8;

     label7:
        $r5 := @caughtexception;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>($r5);

        throw $r6;

     label8:
        $r3 := @caughtexception;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>($r3);

        throw $r4;

     label9:
        return;

        catch java.sql.SQLException from label1 to label2 with label3;
        catch java.lang.ClassNotFoundException from label4 to label5 with label6;
        catch java.lang.InstantiationException from label4 to label5 with label7;
        catch java.lang.IllegalAccessException from label4 to label5 with label8;
    }

    private void <init>()
    {
        org.quartz.impl.jdbcjobstore.JdbcQuartzTestUtilities r0;

        r0 := @this: org.quartz.impl.jdbcjobstore.JdbcQuartzTestUtilities;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static java.util.List access$000()
    {
        java.util.List $r0;

        $r0 = <org.quartz.impl.jdbcjobstore.JdbcQuartzTestUtilities: java.util.List DATABASE_SETUP_STATEMENTS>;

        return $r0;
    }

    static void <clinit>()
    {
        java.lang.String r0, r28, r31;
        java.lang.Class $r2, $r5;
        java.util.ArrayList $r4;
        java.lang.ClassLoader $r6;
        java.io.BufferedReader $r7;
        java.io.InputStreamReader $r8;
        java.lang.StringBuilder $r9, $r10;
        boolean $z0, $z1;
        java.io.IOException $r12;
        java.lang.AssertionError $r13, $r15, $r17, $r19;
        java.lang.ClassNotFoundException $r14;
        java.lang.IllegalAccessException $r16;
        java.lang.InstantiationException $r18;
        java.lang.Throwable $r20;
        java.io.InputStream r25;
        java.lang.String[] r30;
        int i0, i1;

        <org.quartz.impl.jdbcjobstore.JdbcQuartzTestUtilities: java.lang.String DATABASE_CONNECTION_PREFIX> = "jdbc:derby:memory:";

        <org.quartz.impl.jdbcjobstore.JdbcQuartzTestUtilities: java.lang.String DATABASE_DRIVER_CLASS> = "org.apache.derby.jdbc.EmbeddedDriver";

     label01:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.apache.derby.jdbc.EmbeddedDriver");

        virtualinvoke $r2.<java.lang.Class: java.lang.Object newInstance()>();

     label02:
        goto label06;

     label03:
        $r14 := @caughtexception;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>(java.lang.Object)>($r14);

        throw $r15;

     label04:
        $r18 := @caughtexception;

        $r19 = new java.lang.AssertionError;

        specialinvoke $r19.<java.lang.AssertionError: void <init>(java.lang.Object)>($r18);

        throw $r19;

     label05:
        $r16 := @caughtexception;

        $r17 = new java.lang.AssertionError;

        specialinvoke $r17.<java.lang.AssertionError: void <init>(java.lang.Object)>($r16);

        throw $r17;

     label06:
        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

     label07:
        $r5 = class "Lorg/quartz/impl/jdbcjobstore/JdbcQuartzTestUtilities$DerbyEmbeddedConnectionProvider;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        r25 = virtualinvoke $r6.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>("org/quartz/impl/jdbcjobstore/tables_derby.sql");

     label08:
        $r7 = new java.io.BufferedReader;

        $r8 = new java.io.InputStreamReader;

        specialinvoke $r8.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>(r25, "US-ASCII");

        specialinvoke $r7.<java.io.BufferedReader: void <init>(java.io.Reader)>($r8);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

     label09:
        r28 = virtualinvoke $r7.<java.io.BufferedReader: java.lang.String readLine()>();

        if r28 != null goto label10;

        goto label12;

     label10:
        $z0 = virtualinvoke r28.<java.lang.String: boolean startsWith(java.lang.String)>("--");

        if $z0 != 0 goto label11;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r28);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

     label11:
        goto label09;

     label12:
        r0 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

     label13:
        virtualinvoke r25.<java.io.InputStream: void close()>();

        goto label16;

     label14:
        $r20 := @caughtexception;

     label15:
        virtualinvoke r25.<java.io.InputStream: void close()>();

        throw $r20;

     label16:
        goto label18;

     label17:
        $r12 := @caughtexception;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>(java.lang.Object)>($r12);

        throw $r13;

     label18:
        r30 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>(";");

        i0 = lengthof r30;

        i1 = 0;

     label19:
        if i1 >= i0 goto label21;

        r31 = r30[i1];

        $z1 = virtualinvoke r31.<java.lang.String: boolean matches(java.lang.String)>("\\s*");

        if $z1 != 0 goto label20;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r31);

     label20:
        i1 = i1 + 1;

        goto label19;

     label21:
        <org.quartz.impl.jdbcjobstore.JdbcQuartzTestUtilities: java.util.List DATABASE_SETUP_STATEMENTS> = $r4;

        return;

        catch java.lang.ClassNotFoundException from label01 to label02 with label03;
        catch java.lang.InstantiationException from label01 to label02 with label04;
        catch java.lang.IllegalAccessException from label01 to label02 with label05;
        catch java.lang.Throwable from label08 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
        catch java.io.IOException from label07 to label16 with label17;
    }
}
