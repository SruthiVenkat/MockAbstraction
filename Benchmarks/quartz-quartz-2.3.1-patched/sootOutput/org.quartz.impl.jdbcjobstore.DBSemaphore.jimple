public abstract class org.quartz.impl.jdbcjobstore.DBSemaphore extends java.lang.Object implements org.quartz.impl.jdbcjobstore.Semaphore, org.quartz.impl.jdbcjobstore.Constants, org.quartz.impl.jdbcjobstore.StdJDBCConstants, org.quartz.impl.jdbcjobstore.TablePrefixAware
{
    private final org.slf4j.Logger log;
    java.lang.ThreadLocal lockOwners;
    private java.lang.String sql;
    private java.lang.String insertSql;
    private java.lang.String tablePrefix;
    private java.lang.String schedName;
    private java.lang.String expandedSQL;
    private java.lang.String expandedInsertSQL;
    private java.lang.String schedNameLiteral;

    public void <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        org.quartz.impl.jdbcjobstore.DBSemaphore r0;
        java.lang.String r1, r2, r3, r4;
        java.lang.Class $r5;
        org.slf4j.Logger $r6;
        java.lang.ThreadLocal $r7;

        r0 := @this: org.quartz.impl.jdbcjobstore.DBSemaphore;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>($r5);

        r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: org.slf4j.Logger log> = $r6;

        $r7 = new java.lang.ThreadLocal;

        specialinvoke $r7.<java.lang.ThreadLocal: void <init>()>();

        r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: java.lang.ThreadLocal lockOwners> = $r7;

        r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: java.lang.String schedNameLiteral> = null;

        r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: java.lang.String tablePrefix> = r1;

        r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: java.lang.String schedName> = r2;

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: void setSQL(java.lang.String)>(r3);

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: void setInsertSQL(java.lang.String)>(r4);

        return;
    }

    protected org.slf4j.Logger getLog()
    {
        org.quartz.impl.jdbcjobstore.DBSemaphore r0;
        org.slf4j.Logger $r1;

        r0 := @this: org.quartz.impl.jdbcjobstore.DBSemaphore;

        $r1 = r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: org.slf4j.Logger log>;

        return $r1;
    }

    private java.util.HashSet getThreadLocks()
    {
        org.quartz.impl.jdbcjobstore.DBSemaphore r0;
        java.lang.ThreadLocal $r1, $r4;
        java.lang.Object $r2;
        java.util.HashSet $r3, r5;

        r0 := @this: org.quartz.impl.jdbcjobstore.DBSemaphore;

        $r1 = r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: java.lang.ThreadLocal lockOwners>;

        $r2 = virtualinvoke $r1.<java.lang.ThreadLocal: java.lang.Object get()>();

        r5 = (java.util.HashSet) $r2;

        if r5 != null goto label1;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        r5 = $r3;

        $r4 = r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: java.lang.ThreadLocal lockOwners>;

        virtualinvoke $r4.<java.lang.ThreadLocal: void set(java.lang.Object)>($r3);

     label1:
        return r5;
    }

    protected abstract void executeSQL(java.sql.Connection, java.lang.String, java.lang.String, java.lang.String) throws org.quartz.impl.jdbcjobstore.LockException;

    public boolean obtainLock(java.sql.Connection, java.lang.String) throws org.quartz.impl.jdbcjobstore.LockException
    {
        org.quartz.impl.jdbcjobstore.DBSemaphore r0;
        java.sql.Connection r1;
        java.lang.String r2, $r11, $r13, $r14, $r15, $r24, $r26, $r33, $r35;
        org.slf4j.Logger $r3, $r4, $r6, $r16, $r19, $r28;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r5, $r7, $r8, $r9, $r12, $r18, $r20, $r21, $r22, $r25, $r27, $r29, $r30, $r31, $r34;
        java.lang.Thread $r10, $r23, $r32;
        java.util.HashSet $r17;

        r0 := @this: org.quartz.impl.jdbcjobstore.DBSemaphore;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r3.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r28 = r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: org.slf4j.Logger log>;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Lock \'");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is desired by: ");

        $r32 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r33 = virtualinvoke $r32.<java.lang.Thread: java.lang.String getName()>();

        $r34 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r28.<org.slf4j.Logger: void debug(java.lang.String)>($r35);

     label1:
        $z1 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: boolean isLockOwner(java.lang.String)>(r2);

        if $z1 != 0 goto label3;

        $r15 = r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: java.lang.String expandedSQL>;

        $r14 = r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: java.lang.String expandedInsertSQL>;

        virtualinvoke r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: void executeSQL(java.sql.Connection,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, $r15, $r14);

        $r16 = r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: org.slf4j.Logger log>;

        $z3 = interfaceinvoke $r16.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z3 == 0 goto label2;

        $r19 = r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: org.slf4j.Logger log>;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Lock \'");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' given to: ");

        $r23 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r24 = virtualinvoke $r23.<java.lang.Thread: java.lang.String getName()>();

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r19.<org.slf4j.Logger: void debug(java.lang.String)>($r26);

     label2:
        $r17 = specialinvoke r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: java.util.HashSet getThreadLocks()>();

        virtualinvoke $r17.<java.util.HashSet: boolean add(java.lang.Object)>(r2);

        goto label4;

     label3:
        $r4 = r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: org.slf4j.Logger log>;

        $z2 = interfaceinvoke $r4.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z2 == 0 goto label4;

        $r6 = r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: org.slf4j.Logger log>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Lock \'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' Is already owned by: ");

        $r10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r11 = virtualinvoke $r10.<java.lang.Thread: java.lang.String getName()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.slf4j.Logger: void debug(java.lang.String)>($r13);

     label4:
        return 1;
    }

    public void releaseLock(java.lang.String)
    {
        org.quartz.impl.jdbcjobstore.DBSemaphore r0;
        java.lang.String r1, $r9, $r12, $r22, $r24;
        boolean $z0, $z1, $z2;
        org.slf4j.Logger $r2, $r3, $r14, $r16;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r10, $r11, $r17, $r18, $r19, $r20, $r23;
        java.lang.Thread $r8, $r21;
        java.lang.Exception $r13;
        java.util.HashSet $r15;

        r0 := @this: org.quartz.impl.jdbcjobstore.DBSemaphore;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: boolean isLockOwner(java.lang.String)>(r1);

        if $z0 == 0 goto label2;

        $r14 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: org.slf4j.Logger getLog()>();

        $z2 = interfaceinvoke $r14.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z2 == 0 goto label1;

        $r16 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: org.slf4j.Logger getLog()>();

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Lock \'");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' returned by: ");

        $r21 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r22 = virtualinvoke $r21.<java.lang.Thread: java.lang.String getName()>();

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r16.<org.slf4j.Logger: void debug(java.lang.String)>($r24);

     label1:
        $r15 = specialinvoke r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: java.util.HashSet getThreadLocks()>();

        virtualinvoke $r15.<java.util.HashSet: boolean remove(java.lang.Object)>(r1);

        goto label3;

     label2:
        $r2 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: org.slf4j.Logger getLog()>();

        $z1 = interfaceinvoke $r2.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z1 == 0 goto label3;

        $r3 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: org.slf4j.Logger getLog()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Lock \'");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' attempt to return by: ");

        $r8 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r9 = virtualinvoke $r8.<java.lang.Thread: java.lang.String getName()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -- but not owner!");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = new java.lang.Exception;

        specialinvoke $r13.<java.lang.Exception: void <init>(java.lang.String)>("stack-trace of wrongful returner");

        interfaceinvoke $r3.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>($r12, $r13);

     label3:
        return;
    }

    public boolean isLockOwner(java.lang.String)
    {
        org.quartz.impl.jdbcjobstore.DBSemaphore r0;
        java.lang.String r1;
        java.util.HashSet $r2;
        boolean $z0;

        r0 := @this: org.quartz.impl.jdbcjobstore.DBSemaphore;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: java.util.HashSet getThreadLocks()>();

        $z0 = virtualinvoke $r2.<java.util.HashSet: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean requiresConnection()
    {
        org.quartz.impl.jdbcjobstore.DBSemaphore r0;

        r0 := @this: org.quartz.impl.jdbcjobstore.DBSemaphore;

        return 1;
    }

    protected java.lang.String getSQL()
    {
        org.quartz.impl.jdbcjobstore.DBSemaphore r0;
        java.lang.String $r1;

        r0 := @this: org.quartz.impl.jdbcjobstore.DBSemaphore;

        $r1 = r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: java.lang.String sql>;

        return $r1;
    }

    protected void setSQL(java.lang.String)
    {
        org.quartz.impl.jdbcjobstore.DBSemaphore r0;
        java.lang.String r1, $r2, $r3;
        int $i0;

        r0 := @this: org.quartz.impl.jdbcjobstore.DBSemaphore;

        r1 := @parameter0: java.lang.String;

        if r1 == null goto label1;

        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 == 0 goto label1;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>();

        r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: java.lang.String sql> = $r3;

     label1:
        specialinvoke r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: void setExpandedSQL()>();

        return;
    }

    protected void setInsertSQL(java.lang.String)
    {
        org.quartz.impl.jdbcjobstore.DBSemaphore r0;
        java.lang.String r1, $r2, $r3;
        int $i0;

        r0 := @this: org.quartz.impl.jdbcjobstore.DBSemaphore;

        r1 := @parameter0: java.lang.String;

        if r1 == null goto label1;

        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 == 0 goto label1;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>();

        r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: java.lang.String insertSql> = $r3;

     label1:
        specialinvoke r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: void setExpandedSQL()>();

        return;
    }

    private void setExpandedSQL()
    {
        org.quartz.impl.jdbcjobstore.DBSemaphore r0;
        java.lang.String $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;

        r0 := @this: org.quartz.impl.jdbcjobstore.DBSemaphore;

        $r1 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: java.lang.String getTablePrefix()>();

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: java.lang.String getSchedName()>();

        if $r2 == null goto label1;

        $r3 = r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: java.lang.String sql>;

        if $r3 == null goto label1;

        $r4 = r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: java.lang.String insertSql>;

        if $r4 == null goto label1;

        $r5 = r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: java.lang.String sql>;

        $r6 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: java.lang.String getTablePrefix()>();

        $r7 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: java.lang.String getSchedulerNameLiteral()>();

        $r8 = staticinvoke <org.quartz.impl.jdbcjobstore.Util: java.lang.String rtp(java.lang.String,java.lang.String,java.lang.String)>($r5, $r6, $r7);

        r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: java.lang.String expandedSQL> = $r8;

        $r9 = r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: java.lang.String insertSql>;

        $r10 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: java.lang.String getTablePrefix()>();

        $r11 = virtualinvoke r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: java.lang.String getSchedulerNameLiteral()>();

        $r12 = staticinvoke <org.quartz.impl.jdbcjobstore.Util: java.lang.String rtp(java.lang.String,java.lang.String,java.lang.String)>($r9, $r10, $r11);

        r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: java.lang.String expandedInsertSQL> = $r12;

     label1:
        return;
    }

    protected java.lang.String getSchedulerNameLiteral()
    {
        org.quartz.impl.jdbcjobstore.DBSemaphore r0;
        java.lang.String $r1, $r2, $r5, $r8;
        java.lang.StringBuilder $r3, $r4, $r6, $r7;

        r0 := @this: org.quartz.impl.jdbcjobstore.DBSemaphore;

        $r1 = r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: java.lang.String schedNameLiteral>;

        if $r1 != null goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r5 = r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: java.lang.String schedName>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: java.lang.String schedNameLiteral> = $r8;

     label1:
        $r2 = r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: java.lang.String schedNameLiteral>;

        return $r2;
    }

    public java.lang.String getSchedName()
    {
        org.quartz.impl.jdbcjobstore.DBSemaphore r0;
        java.lang.String $r1;

        r0 := @this: org.quartz.impl.jdbcjobstore.DBSemaphore;

        $r1 = r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: java.lang.String schedName>;

        return $r1;
    }

    public void setSchedName(java.lang.String)
    {
        org.quartz.impl.jdbcjobstore.DBSemaphore r0;
        java.lang.String r1;

        r0 := @this: org.quartz.impl.jdbcjobstore.DBSemaphore;

        r1 := @parameter0: java.lang.String;

        r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: java.lang.String schedName> = r1;

        specialinvoke r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: void setExpandedSQL()>();

        return;
    }

    protected java.lang.String getTablePrefix()
    {
        org.quartz.impl.jdbcjobstore.DBSemaphore r0;
        java.lang.String $r1;

        r0 := @this: org.quartz.impl.jdbcjobstore.DBSemaphore;

        $r1 = r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: java.lang.String tablePrefix>;

        return $r1;
    }

    public void setTablePrefix(java.lang.String)
    {
        org.quartz.impl.jdbcjobstore.DBSemaphore r0;
        java.lang.String r1;

        r0 := @this: org.quartz.impl.jdbcjobstore.DBSemaphore;

        r1 := @parameter0: java.lang.String;

        r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: java.lang.String tablePrefix> = r1;

        specialinvoke r0.<org.quartz.impl.jdbcjobstore.DBSemaphore: void setExpandedSQL()>();

        return;
    }
}
