public class org.quartz.impl.RemoteMBeanSchedulerTest extends java.lang.Object
{
    public static final java.lang.String TRIGGER_KEY;
    public static final java.lang.String GROUP_KEY;
    public static final java.lang.String JOB_KEY;
    public static final java.lang.String CALENDAR_KEY;
    private org.quartz.Scheduler scheduler;
    private org.quartz.impl.RemoteMBeanScheduler remoteScheduler;

    public void <init>()
    {
        org.quartz.impl.RemoteMBeanSchedulerTest r0;

        r0 := @this: org.quartz.impl.RemoteMBeanSchedulerTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void setUp() throws java.lang.Exception
    {
        org.quartz.impl.RemoteMBeanSchedulerTest r0;
        org.quartz.JobDetail r2;
        org.quartz.Trigger r3;
        java.lang.String r4, $r24, $r26;
        java.util.Properties $r5;
        org.quartz.impl.StdSchedulerFactory $r11;
        org.quartz.Scheduler $r12, $r20, $r21, $r23, $r25;
        org.quartz.JobBuilder $r13, $r14;
        org.quartz.TriggerBuilder $r15, $r16, $r18;
        java.util.Date $r17;
        org.quartz.impl.calendar.BaseCalendar $r19;
        org.quartz.impl.RemoteMBeanSchedulerTest$TestRemoteScheduler $r27;

        r0 := @this: org.quartz.impl.RemoteMBeanSchedulerTest;

        $r5 = new java.util.Properties;

        specialinvoke $r5.<java.util.Properties: void <init>()>();

        virtualinvoke $r5.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.scheduler.instanceName", "TestScheduler");

        virtualinvoke $r5.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.jobStore.class", "org.quartz.simpl.RAMJobStore");

        virtualinvoke $r5.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.threadPool.class", "org.quartz.simpl.SimpleThreadPool");

        virtualinvoke $r5.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.threadPool.threadCount", "1");

        virtualinvoke $r5.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.scheduler.jmx.export", "true");

        $r11 = new org.quartz.impl.StdSchedulerFactory;

        specialinvoke $r11.<org.quartz.impl.StdSchedulerFactory: void <init>(java.util.Properties)>($r5);

        $r12 = virtualinvoke $r11.<org.quartz.impl.StdSchedulerFactory: org.quartz.Scheduler getScheduler()>();

        r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.Scheduler scheduler> = $r12;

        $r13 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob(java.lang.Class)>(class "Lorg/quartz/impl/RemoteMBeanSchedulerTest$HelloJob;");

        $r14 = virtualinvoke $r13.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String,java.lang.String)>("job1", "group1");

        r2 = virtualinvoke $r14.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        $r15 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r16 = virtualinvoke $r15.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String,java.lang.String)>("trigger1", "group1");

        $r17 = new java.util.Date;

        specialinvoke $r17.<java.util.Date: void <init>()>();

        $r18 = virtualinvoke $r16.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder startAt(java.util.Date)>($r17);

        r3 = virtualinvoke $r18.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        $r20 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.Scheduler scheduler>;

        $r19 = new org.quartz.impl.calendar.BaseCalendar;

        specialinvoke $r19.<org.quartz.impl.calendar.BaseCalendar: void <init>()>();

        interfaceinvoke $r20.<org.quartz.Scheduler: void addCalendar(java.lang.String,org.quartz.Calendar,boolean,boolean)>("calendar1", $r19, 0, 0);

        $r21 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.Scheduler scheduler>;

        interfaceinvoke $r21.<org.quartz.Scheduler: java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)>(r2, r3);

        $r23 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.Scheduler scheduler>;

        $r24 = interfaceinvoke $r23.<org.quartz.Scheduler: java.lang.String getSchedulerName()>();

        $r25 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.Scheduler scheduler>;

        $r26 = interfaceinvoke $r25.<org.quartz.Scheduler: java.lang.String getSchedulerInstanceId()>();

        r4 = staticinvoke <org.quartz.core.QuartzSchedulerResources: java.lang.String generateJMXObjectName(java.lang.String,java.lang.String)>($r24, $r26);

        $r27 = new org.quartz.impl.RemoteMBeanSchedulerTest$TestRemoteScheduler;

        specialinvoke $r27.<org.quartz.impl.RemoteMBeanSchedulerTest$TestRemoteScheduler: void <init>(java.lang.String)>(r4);

        r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler> = $r27;

        return;
    }

    public void tearDown() throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanSchedulerTest r0;
        org.quartz.Scheduler $r1;

        r0 := @this: org.quartz.impl.RemoteMBeanSchedulerTest;

        $r1 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.Scheduler scheduler>;

        interfaceinvoke $r1.<org.quartz.Scheduler: void shutdown()>();

        return;
    }

    public void testJMXAttributesAccess() throws java.lang.Exception
    {
        org.quartz.impl.RemoteMBeanSchedulerTest r0;
        org.quartz.impl.RemoteMBeanScheduler $r1, $r6, $r11, $r16, $r21, $r26;
        java.util.List $r2, $r4, $r7, $r9, $r27, $r29;
        org.quartz.Scheduler $r3, $r8, $r13, $r18, $r23, $r28;
        org.hamcrest.Matcher $r5, $r10, $r15, $r20, $r25, $r30;
        java.util.Set $r12, $r14;
        java.lang.String $r17, $r19, $r22, $r24;

        r0 := @this: org.quartz.impl.RemoteMBeanSchedulerTest;

        $r1 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler>;

        $r2 = virtualinvoke $r1.<org.quartz.impl.RemoteMBeanScheduler: java.util.List getCalendarNames()>();

        $r3 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.Scheduler scheduler>;

        $r4 = interfaceinvoke $r3.<org.quartz.Scheduler: java.util.List getCalendarNames()>();

        $r5 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r4);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r2, $r5);

        $r6 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler>;

        $r7 = virtualinvoke $r6.<org.quartz.impl.RemoteMBeanScheduler: java.util.List getJobGroupNames()>();

        $r8 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.Scheduler scheduler>;

        $r9 = interfaceinvoke $r8.<org.quartz.Scheduler: java.util.List getJobGroupNames()>();

        $r10 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r9);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r7, $r10);

        $r11 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler>;

        $r12 = virtualinvoke $r11.<org.quartz.impl.RemoteMBeanScheduler: java.util.Set getPausedTriggerGroups()>();

        $r13 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.Scheduler scheduler>;

        $r14 = interfaceinvoke $r13.<org.quartz.Scheduler: java.util.Set getPausedTriggerGroups()>();

        $r15 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r14);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r12, $r15);

        $r16 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler>;

        $r17 = virtualinvoke $r16.<org.quartz.impl.RemoteMBeanScheduler: java.lang.String getSchedulerInstanceId()>();

        $r18 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.Scheduler scheduler>;

        $r19 = interfaceinvoke $r18.<org.quartz.Scheduler: java.lang.String getSchedulerInstanceId()>();

        $r20 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r19);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r17, $r20);

        $r21 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler>;

        $r22 = virtualinvoke $r21.<org.quartz.impl.RemoteMBeanScheduler: java.lang.String getSchedulerName()>();

        $r23 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.Scheduler scheduler>;

        $r24 = interfaceinvoke $r23.<org.quartz.Scheduler: java.lang.String getSchedulerName()>();

        $r25 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r24);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r22, $r25);

        $r26 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler>;

        $r27 = virtualinvoke $r26.<org.quartz.impl.RemoteMBeanScheduler: java.util.List getTriggerGroupNames()>();

        $r28 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.Scheduler scheduler>;

        $r29 = interfaceinvoke $r28.<org.quartz.Scheduler: java.util.List getTriggerGroupNames()>();

        $r30 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r29);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r27, $r30);

        return;
    }

    public void testSchedulerMetaData() throws java.lang.Exception
    {
        org.quartz.impl.RemoteMBeanSchedulerTest r0;
        org.quartz.SchedulerMetaData r1, r2;
        org.quartz.impl.RemoteMBeanScheduler $r3;
        org.quartz.Scheduler $r4;
        java.lang.String $r5, $r6, $r8, $r9, $r48, $r49;
        org.hamcrest.Matcher $r7, $r10, $r13, $r15, $r18, $r21, $r24, $r27, $r29, $r32, $r35, $r38, $r41, $r44, $r47, $r50, $r53;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.lang.Boolean $r11, $r12, $r16, $r17, $r19, $r20, $r22, $r23, $r25, $r26, $r36, $r37, $r39, $r40;
        java.lang.Class $r14, $r33, $r34, $r42, $r43, $r51, $r52;
        java.util.Date $r28;
        int $i0, $i1, $i2, $i3;
        java.lang.Integer $r30, $r31, $r45, $r46;

        r0 := @this: org.quartz.impl.RemoteMBeanSchedulerTest;

        $r3 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler>;

        r1 = virtualinvoke $r3.<org.quartz.impl.RemoteMBeanScheduler: org.quartz.SchedulerMetaData getMetaData()>();

        $r4 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.Scheduler scheduler>;

        r2 = interfaceinvoke $r4.<org.quartz.Scheduler: org.quartz.SchedulerMetaData getMetaData()>();

        $r5 = virtualinvoke r1.<org.quartz.SchedulerMetaData: java.lang.String getSchedulerName()>();

        $r6 = virtualinvoke r2.<org.quartz.SchedulerMetaData: java.lang.String getSchedulerName()>();

        $r7 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r6);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r5, $r7);

        $r8 = virtualinvoke r1.<org.quartz.SchedulerMetaData: java.lang.String getSchedulerInstanceId()>();

        $r9 = virtualinvoke r2.<org.quartz.SchedulerMetaData: java.lang.String getSchedulerInstanceId()>();

        $r10 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r9);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r8, $r10);

        $z0 = virtualinvoke r1.<org.quartz.SchedulerMetaData: boolean isInStandbyMode()>();

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $z1 = virtualinvoke r2.<org.quartz.SchedulerMetaData: boolean isInStandbyMode()>();

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        $r13 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r12);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r11, $r13);

        $r14 = virtualinvoke r1.<org.quartz.SchedulerMetaData: java.lang.Class getSchedulerClass()>();

        $r15 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher equalTo(java.lang.Object)>(class "Lorg/quartz/impl/RemoteMBeanSchedulerTest$TestRemoteScheduler;");

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r14, $r15);

        $z2 = virtualinvoke r1.<org.quartz.SchedulerMetaData: boolean isSchedulerRemote()>();

        $r16 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r18 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r17);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r16, $r18);

        $z3 = virtualinvoke r1.<org.quartz.SchedulerMetaData: boolean isStarted()>();

        $r19 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3);

        $r20 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r21 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r20);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r19, $r21);

        $z4 = virtualinvoke r1.<org.quartz.SchedulerMetaData: boolean isInStandbyMode()>();

        $r22 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z4);

        $z5 = virtualinvoke r2.<org.quartz.SchedulerMetaData: boolean isInStandbyMode()>();

        $r23 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z5);

        $r24 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r23);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r22, $r24);

        $z6 = virtualinvoke r1.<org.quartz.SchedulerMetaData: boolean isShutdown()>();

        $r25 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z6);

        $z7 = virtualinvoke r2.<org.quartz.SchedulerMetaData: boolean isShutdown()>();

        $r26 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z7);

        $r27 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r26);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r25, $r27);

        $r28 = virtualinvoke r1.<org.quartz.SchedulerMetaData: java.util.Date getRunningSince()>();

        $r29 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher nullValue()>();

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r28, $r29);

        $i0 = virtualinvoke r1.<org.quartz.SchedulerMetaData: int getNumberOfJobsExecuted()>();

        $r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $i1 = virtualinvoke r2.<org.quartz.SchedulerMetaData: int getNumberOfJobsExecuted()>();

        $r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r32 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r31);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r30, $r32);

        $r33 = virtualinvoke r1.<org.quartz.SchedulerMetaData: java.lang.Class getJobStoreClass()>();

        $r34 = virtualinvoke r2.<org.quartz.SchedulerMetaData: java.lang.Class getJobStoreClass()>();

        $r35 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r34);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r33, $r35);

        $z8 = virtualinvoke r1.<org.quartz.SchedulerMetaData: boolean isJobStoreSupportsPersistence()>();

        $r36 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z8);

        $r37 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r38 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r37);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r36, $r38);

        $z9 = virtualinvoke r1.<org.quartz.SchedulerMetaData: boolean isJobStoreClustered()>();

        $r39 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z9);

        $r40 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r41 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r40);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r39, $r41);

        $r42 = virtualinvoke r1.<org.quartz.SchedulerMetaData: java.lang.Class getThreadPoolClass()>();

        $r43 = virtualinvoke r2.<org.quartz.SchedulerMetaData: java.lang.Class getThreadPoolClass()>();

        $r44 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r43);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r42, $r44);

        $i2 = virtualinvoke r1.<org.quartz.SchedulerMetaData: int getThreadPoolSize()>();

        $r45 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $i3 = virtualinvoke r2.<org.quartz.SchedulerMetaData: int getThreadPoolSize()>();

        $r46 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r47 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r46);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r45, $r47);

        $r48 = virtualinvoke r1.<org.quartz.SchedulerMetaData: java.lang.String getVersion()>();

        $r49 = virtualinvoke r2.<org.quartz.SchedulerMetaData: java.lang.String getVersion()>();

        $r50 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r49);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r48, $r50);

        $r51 = virtualinvoke r1.<org.quartz.SchedulerMetaData: java.lang.Class getJobStoreClass()>();

        $r52 = virtualinvoke r2.<org.quartz.SchedulerMetaData: java.lang.Class getJobStoreClass()>();

        $r53 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r52);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r51, $r53);

        return;
    }

    public void testCalendarOperations() throws java.lang.Exception
    {
        org.quartz.impl.RemoteMBeanSchedulerTest r0;
        org.quartz.impl.calendar.BaseCalendar $r1;
        org.quartz.impl.RemoteMBeanScheduler $r2, $r3, $r5;
        org.quartz.Scheduler $r6;
        org.quartz.Calendar $r7;
        org.hamcrest.Matcher $r8;
        org.quartz.SchedulerException $r9, $r10;

        r0 := @this: org.quartz.impl.RemoteMBeanSchedulerTest;

     label1:
        $r2 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler>;

        $r1 = new org.quartz.impl.calendar.BaseCalendar;

        specialinvoke $r1.<org.quartz.impl.calendar.BaseCalendar: void <init>()>();

        virtualinvoke $r2.<org.quartz.impl.RemoteMBeanScheduler: void addCalendar(java.lang.String,org.quartz.Calendar,boolean,boolean)>("testCal", $r1, 1, 1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Method was not exposed in MBean API");

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

     label4:
        $r3 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler>;

        virtualinvoke $r3.<org.quartz.impl.RemoteMBeanScheduler: org.quartz.Calendar getCalendar(java.lang.String)>("test");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Method was not exposed in MBean API");

     label5:
        goto label7;

     label6:
        $r10 := @caughtexception;

     label7:
        $r5 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler>;

        virtualinvoke $r5.<org.quartz.impl.RemoteMBeanScheduler: boolean deleteCalendar(java.lang.String)>("calendar1");

        $r6 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.Scheduler scheduler>;

        $r7 = interfaceinvoke $r6.<org.quartz.Scheduler: org.quartz.Calendar getCalendar(java.lang.String)>("calendar1");

        $r8 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher nullValue()>();

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r7, $r8);

        return;

        catch org.quartz.SchedulerException from label1 to label2 with label3;
        catch org.quartz.SchedulerException from label4 to label5 with label6;
    }

    public void testTriggerOperations() throws java.lang.Exception
    {
        org.quartz.impl.RemoteMBeanSchedulerTest r0;
        org.quartz.impl.matchers.GroupMatcher r2;
        org.quartz.TriggerKey $r3;
        org.quartz.impl.RemoteMBeanScheduler $r4, $r7, $r9, $r10, $r15, $r17, $r22, $r27, $r32, $r37, $r42;
        org.quartz.JobKey $r6;
        org.quartz.Trigger$TriggerState $r11, $r13, $r19, $r20, $r24, $r25, $r29, $r30, $r34, $r35, $r39, $r40, $r44, $r45;
        org.quartz.Scheduler $r12, $r18, $r23, $r28, $r33, $r38, $r43;
        org.hamcrest.Matcher $r14, $r21, $r26, $r31, $r36, $r41, $r46;
        org.quartz.SchedulerException $r47, $r48, $r49, $r50;

        r0 := @this: org.quartz.impl.RemoteMBeanSchedulerTest;

        $r3 = new org.quartz.TriggerKey;

        specialinvoke $r3.<org.quartz.TriggerKey: void <init>(java.lang.String,java.lang.String)>("trigger1", "group1");

        r2 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher triggerGroupEquals(java.lang.String)>("group1");

     label01:
        $r4 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler>;

        virtualinvoke $r4.<org.quartz.impl.RemoteMBeanScheduler: org.quartz.Trigger getTrigger(org.quartz.TriggerKey)>($r3);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Method had a different return type in MBean API");

     label02:
        goto label04;

     label03:
        $r47 := @caughtexception;

     label04:
        $r7 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler>;

        $r6 = new org.quartz.JobKey;

        specialinvoke $r6.<org.quartz.JobKey: void <init>(java.lang.String,java.lang.String)>("job1", "group1");

        virtualinvoke $r7.<org.quartz.impl.RemoteMBeanScheduler: java.util.List getTriggersOfJob(org.quartz.JobKey)>($r6);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Method had a different return type in MBean API");

     label05:
        goto label07;

     label06:
        $r50 := @caughtexception;

     label07:
        $r9 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler>;

        virtualinvoke $r9.<org.quartz.impl.RemoteMBeanScheduler: boolean checkExists(org.quartz.TriggerKey)>($r3);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Method was not exposed in MBean API");

     label08:
        goto label10;

     label09:
        $r48 := @caughtexception;

     label10:
        $r10 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler>;

        $r11 = virtualinvoke $r10.<org.quartz.impl.RemoteMBeanScheduler: org.quartz.Trigger$TriggerState getTriggerState(org.quartz.TriggerKey)>($r3);

        $r12 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.Scheduler scheduler>;

        $r13 = interfaceinvoke $r12.<org.quartz.Scheduler: org.quartz.Trigger$TriggerState getTriggerState(org.quartz.TriggerKey)>($r3);

        $r14 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r13);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r11, $r14);

     label11:
        $r15 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler>;

        virtualinvoke $r15.<org.quartz.impl.RemoteMBeanScheduler: java.util.Set getTriggerKeys(org.quartz.impl.matchers.GroupMatcher)>(r2);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Method was not exposed in MBean API");

     label12:
        goto label14;

     label13:
        $r49 := @caughtexception;

     label14:
        $r17 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler>;

        virtualinvoke $r17.<org.quartz.impl.RemoteMBeanScheduler: void pauseTrigger(org.quartz.TriggerKey)>($r3);

        $r18 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.Scheduler scheduler>;

        $r19 = interfaceinvoke $r18.<org.quartz.Scheduler: org.quartz.Trigger$TriggerState getTriggerState(org.quartz.TriggerKey)>($r3);

        $r20 = <org.quartz.Trigger$TriggerState: org.quartz.Trigger$TriggerState PAUSED>;

        $r21 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r20);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r19, $r21);

        $r22 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler>;

        virtualinvoke $r22.<org.quartz.impl.RemoteMBeanScheduler: void resumeTrigger(org.quartz.TriggerKey)>($r3);

        $r23 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.Scheduler scheduler>;

        $r24 = interfaceinvoke $r23.<org.quartz.Scheduler: org.quartz.Trigger$TriggerState getTriggerState(org.quartz.TriggerKey)>($r3);

        $r25 = <org.quartz.Trigger$TriggerState: org.quartz.Trigger$TriggerState NORMAL>;

        $r26 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r25);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r24, $r26);

        $r27 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler>;

        virtualinvoke $r27.<org.quartz.impl.RemoteMBeanScheduler: void pauseTriggers(org.quartz.impl.matchers.GroupMatcher)>(r2);

        $r28 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.Scheduler scheduler>;

        $r29 = interfaceinvoke $r28.<org.quartz.Scheduler: org.quartz.Trigger$TriggerState getTriggerState(org.quartz.TriggerKey)>($r3);

        $r30 = <org.quartz.Trigger$TriggerState: org.quartz.Trigger$TriggerState PAUSED>;

        $r31 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r30);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r29, $r31);

        $r32 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler>;

        virtualinvoke $r32.<org.quartz.impl.RemoteMBeanScheduler: void resumeTriggers(org.quartz.impl.matchers.GroupMatcher)>(r2);

        $r33 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.Scheduler scheduler>;

        $r34 = interfaceinvoke $r33.<org.quartz.Scheduler: org.quartz.Trigger$TriggerState getTriggerState(org.quartz.TriggerKey)>($r3);

        $r35 = <org.quartz.Trigger$TriggerState: org.quartz.Trigger$TriggerState NORMAL>;

        $r36 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r35);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r34, $r36);

        $r37 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler>;

        virtualinvoke $r37.<org.quartz.impl.RemoteMBeanScheduler: void pauseAll()>();

        $r38 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.Scheduler scheduler>;

        $r39 = interfaceinvoke $r38.<org.quartz.Scheduler: org.quartz.Trigger$TriggerState getTriggerState(org.quartz.TriggerKey)>($r3);

        $r40 = <org.quartz.Trigger$TriggerState: org.quartz.Trigger$TriggerState PAUSED>;

        $r41 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r40);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r39, $r41);

        $r42 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler>;

        virtualinvoke $r42.<org.quartz.impl.RemoteMBeanScheduler: void resumeAll()>();

        $r43 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.Scheduler scheduler>;

        $r44 = interfaceinvoke $r43.<org.quartz.Scheduler: org.quartz.Trigger$TriggerState getTriggerState(org.quartz.TriggerKey)>($r3);

        $r45 = <org.quartz.Trigger$TriggerState: org.quartz.Trigger$TriggerState NORMAL>;

        $r46 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r45);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r44, $r46);

        return;

        catch org.quartz.SchedulerException from label01 to label02 with label03;
        catch org.quartz.SchedulerException from label04 to label05 with label06;
        catch org.quartz.SchedulerException from label07 to label08 with label09;
        catch org.quartz.SchedulerException from label11 to label12 with label13;
    }

    public void testJobOperations() throws java.lang.Exception
    {
        org.quartz.impl.RemoteMBeanSchedulerTest r0;
        org.quartz.JobDetail r2, $r9;
        org.quartz.JobKey $r3, $r44;
        org.quartz.JobBuilder $r4, $r5, $r6;
        org.quartz.impl.RemoteMBeanScheduler $r7, $r8, $r11, $r12, $r13, $r14, $r15, $r16, $r21, $r25, $r26, $r28, $r30, $r31, $r36, $r37, $r39, $r43;
        org.hamcrest.Matcher $r10, $r20, $r24, $r35, $r42;
        java.util.Set $r17;
        int $i0;
        java.lang.Integer $r18, $r19;
        boolean $z1, $z2, $z4;
        java.lang.Boolean $r22, $r23, $r33, $r34, $r40, $r41;
        org.quartz.TriggerKey $r32;
        java.util.List $r45;
        org.quartz.SchedulerException $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53;
        org.quartz.impl.matchers.GroupMatcher r55;

        r0 := @this: org.quartz.impl.RemoteMBeanSchedulerTest;

        $r3 = new org.quartz.JobKey;

        specialinvoke $r3.<org.quartz.JobKey: void <init>(java.lang.String,java.lang.String)>("job2", "group1");

        $r4 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob(java.lang.Class)>(class "Lorg/quartz/impl/RemoteMBeanSchedulerTest$HelloJob;");

        $r5 = virtualinvoke $r4.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(org.quartz.JobKey)>($r3);

        $r6 = virtualinvoke $r5.<org.quartz.JobBuilder: org.quartz.JobBuilder storeDurably()>();

        r2 = virtualinvoke $r6.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        $r7 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler>;

        virtualinvoke $r7.<org.quartz.impl.RemoteMBeanScheduler: void addJob(org.quartz.JobDetail,boolean)>(r2, 0);

        $r8 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler>;

        $r9 = virtualinvoke $r8.<org.quartz.impl.RemoteMBeanScheduler: org.quartz.JobDetail getJobDetail(org.quartz.JobKey)>($r3);

        $r10 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher equalTo(java.lang.Object)>(r2);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r9, $r10);

     label01:
        $r11 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler>;

        virtualinvoke $r11.<org.quartz.impl.RemoteMBeanScheduler: boolean checkExists(org.quartz.JobKey)>($r3);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Method was not exposed in MBean API");

     label02:
        goto label04;

     label03:
        $r52 := @caughtexception;

     label04:
        $r12 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler>;

        virtualinvoke $r12.<org.quartz.impl.RemoteMBeanScheduler: void pauseJob(org.quartz.JobKey)>($r3);

        $r13 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler>;

        virtualinvoke $r13.<org.quartz.impl.RemoteMBeanScheduler: void resumeJob(org.quartz.JobKey)>($r3);

        r55 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher jobGroupEquals(java.lang.String)>("group1");

        $r14 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler>;

        virtualinvoke $r14.<org.quartz.impl.RemoteMBeanScheduler: void pauseJobs(org.quartz.impl.matchers.GroupMatcher)>(r55);

        $r15 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler>;

        virtualinvoke $r15.<org.quartz.impl.RemoteMBeanScheduler: void resumeJobs(org.quartz.impl.matchers.GroupMatcher)>(r55);

        $r16 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler>;

        $r17 = virtualinvoke $r16.<org.quartz.impl.RemoteMBeanScheduler: java.util.Set getJobKeys(org.quartz.impl.matchers.GroupMatcher)>(r55);

        $i0 = interfaceinvoke $r17.<java.util.Set: int size()>();

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r20 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r19);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r18, $r20);

        $r21 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler>;

        $z1 = virtualinvoke $r21.<org.quartz.impl.RemoteMBeanScheduler: boolean interrupt(org.quartz.JobKey)>($r3);

        $r22 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        $r23 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r24 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r23);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r22, $r24);

     label05:
        $r25 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler>;

        virtualinvoke $r25.<org.quartz.impl.RemoteMBeanScheduler: void triggerJob(org.quartz.JobKey)>($r3);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Method had different parameters in MBean API");

     label06:
        goto label08;

     label07:
        $r53 := @caughtexception;

     label08:
        $r26 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler>;

        virtualinvoke $r26.<org.quartz.impl.RemoteMBeanScheduler: java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)>(null, null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Method had different parameters in MBean API");

     label09:
        goto label11;

     label10:
        $r51 := @caughtexception;

     label11:
        $r28 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler>;

        virtualinvoke $r28.<org.quartz.impl.RemoteMBeanScheduler: java.util.Date scheduleJob(org.quartz.Trigger)>(null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Method had different parameters in MBean API");

     label12:
        goto label14;

     label13:
        $r50 := @caughtexception;

     label14:
        $r30 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler>;

        virtualinvoke $r30.<org.quartz.impl.RemoteMBeanScheduler: void scheduleJobs(java.util.Map,boolean)>(null, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Method was not exposed in MBean API");

     label15:
        goto label17;

     label16:
        $r47 := @caughtexception;

     label17:
        $r31 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler>;

        $r32 = staticinvoke <org.quartz.TriggerKey: org.quartz.TriggerKey triggerKey(java.lang.String,java.lang.String)>("trigger1", "group1");

        $z2 = virtualinvoke $r31.<org.quartz.impl.RemoteMBeanScheduler: boolean unscheduleJob(org.quartz.TriggerKey)>($r32);

        $r33 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        $r34 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r35 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r34);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r33, $r35);

     label18:
        $r36 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler>;

        virtualinvoke $r36.<org.quartz.impl.RemoteMBeanScheduler: boolean unscheduleJobs(java.util.List)>(null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Method was not exposed in MBean API");

     label19:
        goto label21;

     label20:
        $r49 := @caughtexception;

     label21:
        $r37 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler>;

        virtualinvoke $r37.<org.quartz.impl.RemoteMBeanScheduler: java.util.Date rescheduleJob(org.quartz.TriggerKey,org.quartz.Trigger)>(null, null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Method was not exposed in MBean API");

     label22:
        goto label24;

     label23:
        $r48 := @caughtexception;

     label24:
        $r39 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler>;

        $z4 = virtualinvoke $r39.<org.quartz.impl.RemoteMBeanScheduler: boolean deleteJob(org.quartz.JobKey)>($r3);

        $r40 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z4);

        $r41 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r42 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r41);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r40, $r42);

     label25:
        $r43 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler>;

        $r44 = staticinvoke <org.quartz.JobKey: org.quartz.JobKey jobKey(java.lang.String,java.lang.String)>("job1", "group1");

        $r45 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r44);

        virtualinvoke $r43.<org.quartz.impl.RemoteMBeanScheduler: boolean deleteJobs(java.util.List)>($r45);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Method was not exposed in MBean API");

     label26:
        goto label28;

     label27:
        $r46 := @caughtexception;

     label28:
        return;

        catch org.quartz.SchedulerException from label01 to label02 with label03;
        catch org.quartz.SchedulerException from label05 to label06 with label07;
        catch org.quartz.SchedulerException from label08 to label09 with label10;
        catch org.quartz.SchedulerException from label11 to label12 with label13;
        catch org.quartz.SchedulerException from label14 to label15 with label16;
        catch org.quartz.SchedulerException from label18 to label19 with label20;
        catch org.quartz.SchedulerException from label21 to label22 with label23;
        catch org.quartz.SchedulerException from label25 to label26 with label27;
    }

    public void testLifecycleOperations() throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanSchedulerTest r0;
        org.quartz.impl.RemoteMBeanScheduler $r1, $r2, $r3, $r11, $r12, $r20, $r21, $r22;
        boolean $z0, $z1, $z2, $z3, $z5;
        java.lang.Boolean $r4, $r5, $r8, $r9, $r13, $r14, $r17, $r18, $r24, $r25;
        org.hamcrest.Matcher $r6, $r10, $r15, $r19, $r26;
        org.quartz.Scheduler $r7, $r16, $r23;
        org.quartz.SchedulerException $r27, $r28, $r29;

        r0 := @this: org.quartz.impl.RemoteMBeanSchedulerTest;

     label01:
        $r1 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler>;

        virtualinvoke $r1.<org.quartz.impl.RemoteMBeanScheduler: void startDelayed(int)>(60);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Method was not exposed in MBean API");

     label02:
        goto label04;

     label03:
        $r29 := @caughtexception;

     label04:
        $r2 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler>;

        virtualinvoke $r2.<org.quartz.impl.RemoteMBeanScheduler: void start()>();

        $r3 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler>;

        $z0 = virtualinvoke $r3.<org.quartz.impl.RemoteMBeanScheduler: boolean isStarted()>();

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r6 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r5);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r4, $r6);

        $r7 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.Scheduler scheduler>;

        $z1 = interfaceinvoke $r7.<org.quartz.Scheduler: boolean isStarted()>();

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r10 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r9);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r8, $r10);

        $r11 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler>;

        virtualinvoke $r11.<org.quartz.impl.RemoteMBeanScheduler: void standby()>();

        $r12 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler>;

        $z2 = virtualinvoke $r12.<org.quartz.impl.RemoteMBeanScheduler: boolean isInStandbyMode()>();

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r15 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r14);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r13, $r15);

        $r16 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.Scheduler scheduler>;

        $z3 = interfaceinvoke $r16.<org.quartz.Scheduler: boolean isInStandbyMode()>();

        $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3);

        $r18 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r19 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r18);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r17, $r19);

     label05:
        $r20 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler>;

        virtualinvoke $r20.<org.quartz.impl.RemoteMBeanScheduler: void shutdown(boolean)>(1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Method was not exposed in MBean API");

     label06:
        goto label08;

     label07:
        $r28 := @caughtexception;

     label08:
        $r21 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler>;

        virtualinvoke $r21.<org.quartz.impl.RemoteMBeanScheduler: void shutdown()>();

     label09:
        $r22 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler>;

        virtualinvoke $r22.<org.quartz.impl.RemoteMBeanScheduler: boolean isShutdown()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Shutting down a scheduler un-registers it in JMX");

     label10:
        goto label12;

     label11:
        $r27 := @caughtexception;

     label12:
        $r23 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.Scheduler scheduler>;

        $z5 = interfaceinvoke $r23.<org.quartz.Scheduler: boolean isShutdown()>();

        $r24 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z5);

        $r25 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r26 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r25);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r24, $r26);

        return;

        catch org.quartz.SchedulerException from label01 to label02 with label03;
        catch org.quartz.SchedulerException from label05 to label06 with label07;
        catch org.quartz.SchedulerException from label09 to label10 with label11;
    }

    public void testJMXOperations() throws java.lang.Exception
    {
        org.quartz.impl.RemoteMBeanSchedulerTest r0;
        org.quartz.impl.RemoteMBeanScheduler $r1, $r2;
        java.util.List $r3;
        boolean $z0;
        java.lang.Boolean $r4, $r5;
        org.hamcrest.Matcher $r6;

        r0 := @this: org.quartz.impl.RemoteMBeanSchedulerTest;

        $r1 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler>;

        virtualinvoke $r1.<org.quartz.impl.RemoteMBeanScheduler: void clear()>();

        $r2 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler>;

        $r3 = virtualinvoke $r2.<org.quartz.impl.RemoteMBeanScheduler: java.util.List getJobGroupNames()>();

        $z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r6 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r5);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r4, $r6);

        return;
    }

    public void testUnsupportedMethods()
    {
        org.quartz.impl.RemoteMBeanSchedulerTest r0;
        org.quartz.impl.RemoteMBeanScheduler $r1, $r3;
        org.quartz.SchedulerException $r4, $r5;

        r0 := @this: org.quartz.impl.RemoteMBeanSchedulerTest;

     label1:
        $r1 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler>;

        virtualinvoke $r1.<org.quartz.impl.RemoteMBeanScheduler: org.quartz.ListenerManager getListenerManager()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Operation should not be supported");

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        $r3 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler>;

        virtualinvoke $r3.<org.quartz.impl.RemoteMBeanScheduler: void setJobFactory(org.quartz.spi.JobFactory)>(null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Operation should not be supported");

     label5:
        goto label7;

     label6:
        $r5 := @caughtexception;

     label7:
        return;

        catch org.quartz.SchedulerException from label1 to label2 with label3;
        catch org.quartz.SchedulerException from label4 to label5 with label6;
    }

    public void testListBrokenAttributes() throws java.lang.Exception
    {
        org.quartz.impl.RemoteMBeanSchedulerTest r0;
        org.quartz.impl.RemoteMBeanScheduler $r1, $r3;
        org.quartz.SchedulerException $r5, $r6;

        r0 := @this: org.quartz.impl.RemoteMBeanSchedulerTest;

     label1:
        $r1 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler>;

        virtualinvoke $r1.<org.quartz.impl.RemoteMBeanScheduler: org.quartz.SchedulerContext getContext()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Method was not exposed in MBean API");

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        $r3 = r0.<org.quartz.impl.RemoteMBeanSchedulerTest: org.quartz.impl.RemoteMBeanScheduler remoteScheduler>;

        virtualinvoke $r3.<org.quartz.impl.RemoteMBeanScheduler: java.util.List getCurrentlyExecutingJobs()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Method had a different return type in MBean API");

     label5:
        goto label7;

     label6:
        $r5 := @caughtexception;

     label7:
        return;

        catch org.quartz.SchedulerException from label1 to label2 with label3;
        catch org.quartz.SchedulerException from label4 to label5 with label6;
    }

    public static void <clinit>()
    {
        <org.quartz.impl.RemoteMBeanSchedulerTest: java.lang.String CALENDAR_KEY> = "calendar1";

        <org.quartz.impl.RemoteMBeanSchedulerTest: java.lang.String JOB_KEY> = "job1";

        <org.quartz.impl.RemoteMBeanSchedulerTest: java.lang.String GROUP_KEY> = "group1";

        <org.quartz.impl.RemoteMBeanSchedulerTest: java.lang.String TRIGGER_KEY> = "trigger1";

        return;
    }
}
