public class org.quartz.JobDataMapTest extends org.quartz.SerializationTestSupport
{
    private static final java.lang.String[] VERSIONS;

    public void <init>()
    {
        org.quartz.JobDataMapTest r0;

        r0 := @this: org.quartz.JobDataMapTest;

        specialinvoke r0.<org.quartz.SerializationTestSupport: void <init>()>();

        return;
    }

    protected java.lang.Object getTargetObject()
    {
        org.quartz.JobDataMapTest r0;
        org.quartz.JobDataMap $r2;
        java.lang.Integer $r3;

        r0 := @this: org.quartz.JobDataMapTest;

        $r2 = new org.quartz.JobDataMap;

        specialinvoke $r2.<org.quartz.JobDataMap: void <init>()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        virtualinvoke $r2.<org.quartz.JobDataMap: java.lang.Object put(java.lang.String,java.lang.Object)>("key", $r3);

        return $r2;
    }

    protected java.lang.String[] getVersions()
    {
        org.quartz.JobDataMapTest r0;
        java.lang.String[] $r1;

        r0 := @this: org.quartz.JobDataMapTest;

        $r1 = <org.quartz.JobDataMapTest: java.lang.String[] VERSIONS>;

        return $r1;
    }

    protected void verifyMatch(java.lang.Object, java.lang.Object)
    {
        org.quartz.JobDataMapTest r0;
        java.lang.Object r1, r2;
        org.quartz.JobDataMap r3, r4;
        java.util.Map $r5, $r6;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.quartz.JobDataMapTest;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 = (org.quartz.JobDataMap) r1;

        r4 = (org.quartz.JobDataMap) r2;

        staticinvoke <org.quartz.JobDataMapTest: void assertNotNull(java.lang.Object)>(r4);

        $r5 = virtualinvoke r3.<org.quartz.JobDataMap: java.util.Map getWrappedMap()>();

        $r6 = virtualinvoke r4.<org.quartz.JobDataMap: java.util.Map getWrappedMap()>();

        staticinvoke <org.quartz.JobDataMapTest: void assertEquals(java.lang.Object,java.lang.Object)>($r5, $r6);

        $z0 = virtualinvoke r3.<org.quartz.JobDataMap: boolean getAllowsTransientData()>();

        $z1 = virtualinvoke r4.<org.quartz.JobDataMap: boolean getAllowsTransientData()>();

        staticinvoke <org.quartz.JobDataMapTest: void assertEquals(boolean,boolean)>($z0, $z1);

        $z2 = virtualinvoke r3.<org.quartz.JobDataMap: boolean isDirty()>();

        $z3 = virtualinvoke r4.<org.quartz.JobDataMap: boolean isDirty()>();

        staticinvoke <org.quartz.JobDataMapTest: void assertEquals(boolean,boolean)>($z2, $z3);

        return;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        java.lang.String[] r0;
        org.quartz.JobDataMapTest $r1;

        r0 := @parameter0: java.lang.String[];

        $r1 = new org.quartz.JobDataMapTest;

        specialinvoke $r1.<org.quartz.JobDataMapTest: void <init>()>();

        virtualinvoke $r1.<org.quartz.JobDataMapTest: void writeJobDataFile(java.lang.String)>("2.1");

        return;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;

        $r0 = newarray (java.lang.String)[3];

        $r0[0] = "1.4.5";

        $r0[1] = "1.5.1";

        $r0[2] = "2.1";

        <org.quartz.JobDataMapTest: java.lang.String[] VERSIONS> = $r0;

        return;
    }
}
