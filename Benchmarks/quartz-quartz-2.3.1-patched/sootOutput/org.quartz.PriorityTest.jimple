public class org.quartz.PriorityTest extends junit.framework.TestCase
{
    private static java.util.concurrent.CountDownLatch latch;
    private static java.lang.StringBuffer result;

    public void <init>()
    {
        org.quartz.PriorityTest r0;

        r0 := @this: org.quartz.PriorityTest;

        specialinvoke r0.<junit.framework.TestCase: void <init>()>();

        return;
    }

    protected void setUp() throws java.lang.Exception
    {
        org.quartz.PriorityTest r0;
        java.util.concurrent.CountDownLatch $r1;
        java.lang.StringBuffer $r2;

        r0 := @this: org.quartz.PriorityTest;

        $r1 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r1.<java.util.concurrent.CountDownLatch: void <init>(int)>(2);

        <org.quartz.PriorityTest: java.util.concurrent.CountDownLatch latch> = $r1;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        <org.quartz.PriorityTest: java.lang.StringBuffer result> = $r2;

        return;
    }

    public void testSameDefaultPriority() throws java.lang.Exception
    {
        org.quartz.PriorityTest r0;
        org.quartz.Scheduler r2;
        java.util.Calendar r3;
        java.util.Properties $r7;
        org.quartz.impl.StdSchedulerFactory $r10;
        org.quartz.impl.triggers.SimpleTriggerImpl $r11, $r13;
        java.util.Date $r12, $r14;
        org.quartz.impl.JobDetailImpl $r15;
        org.quartz.JobKey $r17, $r18;
        java.lang.String $r19, $r23;
        java.util.concurrent.CountDownLatch $r21;
        java.lang.StringBuffer $r22;

        r0 := @this: org.quartz.PriorityTest;

        $r7 = new java.util.Properties;

        specialinvoke $r7.<java.util.Properties: void <init>()>();

        virtualinvoke $r7.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("org.quartz.threadPool.threadCount", "1");

        virtualinvoke $r7.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("org.quartz.threadPool.class", "org.quartz.simpl.SimpleThreadPool");

        $r10 = new org.quartz.impl.StdSchedulerFactory;

        specialinvoke $r10.<org.quartz.impl.StdSchedulerFactory: void <init>(java.util.Properties)>($r7);

        r2 = virtualinvoke $r10.<org.quartz.impl.StdSchedulerFactory: org.quartz.Scheduler getScheduler()>();

        r3 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r3.<java.util.Calendar: void add(int,int)>(13, 1);

        $r11 = new org.quartz.impl.triggers.SimpleTriggerImpl;

        $r12 = virtualinvoke r3.<java.util.Calendar: java.util.Date getTime()>();

        specialinvoke $r11.<org.quartz.impl.triggers.SimpleTriggerImpl: void <init>(java.lang.String,java.lang.String,java.util.Date)>("T1", null, $r12);

        $r13 = new org.quartz.impl.triggers.SimpleTriggerImpl;

        $r14 = virtualinvoke r3.<java.util.Calendar: java.util.Date getTime()>();

        specialinvoke $r13.<org.quartz.impl.triggers.SimpleTriggerImpl: void <init>(java.lang.String,java.lang.String,java.util.Date)>("T2", null, $r14);

        $r15 = new org.quartz.impl.JobDetailImpl;

        specialinvoke $r15.<org.quartz.impl.JobDetailImpl: void <init>(java.lang.String,java.lang.String,java.lang.Class)>("JD", null, class "Lorg/quartz/PriorityTest$TestJob;");

        interfaceinvoke r2.<org.quartz.Scheduler: java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)>($r15, $r11);

        $r17 = new org.quartz.JobKey;

        $r18 = interfaceinvoke $r15.<org.quartz.JobDetail: org.quartz.JobKey getKey()>();

        $r19 = virtualinvoke $r18.<org.quartz.JobKey: java.lang.String getName()>();

        specialinvoke $r17.<org.quartz.JobKey: void <init>(java.lang.String)>($r19);

        interfaceinvoke $r13.<org.quartz.spi.MutableTrigger: void setJobKey(org.quartz.JobKey)>($r17);

        interfaceinvoke r2.<org.quartz.Scheduler: java.util.Date scheduleJob(org.quartz.Trigger)>($r13);

        interfaceinvoke r2.<org.quartz.Scheduler: void start()>();

        $r21 = <org.quartz.PriorityTest: java.util.concurrent.CountDownLatch latch>;

        virtualinvoke $r21.<java.util.concurrent.CountDownLatch: void await()>();

        $r22 = <org.quartz.PriorityTest: java.lang.StringBuffer result>;

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.quartz.PriorityTest: void assertEquals(java.lang.String,java.lang.String)>("T1T2", $r23);

        interfaceinvoke r2.<org.quartz.Scheduler: void shutdown()>();

        return;
    }

    public void testDifferentPriority() throws java.lang.Exception
    {
        org.quartz.PriorityTest r0;
        org.quartz.Scheduler r2;
        java.util.Calendar r3;
        java.util.Properties $r7;
        org.quartz.impl.StdSchedulerFactory $r10;
        org.quartz.impl.triggers.SimpleTriggerImpl $r11, $r13;
        java.util.Date $r12, $r14;
        org.quartz.impl.JobDetailImpl $r15;
        org.quartz.JobKey $r17, $r18;
        java.lang.String $r19, $r23;
        java.util.concurrent.CountDownLatch $r21;
        java.lang.StringBuffer $r22;

        r0 := @this: org.quartz.PriorityTest;

        $r7 = new java.util.Properties;

        specialinvoke $r7.<java.util.Properties: void <init>()>();

        virtualinvoke $r7.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("org.quartz.threadPool.threadCount", "1");

        virtualinvoke $r7.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("org.quartz.threadPool.class", "org.quartz.simpl.SimpleThreadPool");

        $r10 = new org.quartz.impl.StdSchedulerFactory;

        specialinvoke $r10.<org.quartz.impl.StdSchedulerFactory: void <init>(java.util.Properties)>($r7);

        r2 = virtualinvoke $r10.<org.quartz.impl.StdSchedulerFactory: org.quartz.Scheduler getScheduler()>();

        r3 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r3.<java.util.Calendar: void add(int,int)>(13, 1);

        $r11 = new org.quartz.impl.triggers.SimpleTriggerImpl;

        $r12 = virtualinvoke r3.<java.util.Calendar: java.util.Date getTime()>();

        specialinvoke $r11.<org.quartz.impl.triggers.SimpleTriggerImpl: void <init>(java.lang.String,java.lang.String,java.util.Date)>("T1", null, $r12);

        interfaceinvoke $r11.<org.quartz.spi.MutableTrigger: void setPriority(int)>(5);

        $r13 = new org.quartz.impl.triggers.SimpleTriggerImpl;

        $r14 = virtualinvoke r3.<java.util.Calendar: java.util.Date getTime()>();

        specialinvoke $r13.<org.quartz.impl.triggers.SimpleTriggerImpl: void <init>(java.lang.String,java.lang.String,java.util.Date)>("T2", null, $r14);

        interfaceinvoke $r13.<org.quartz.spi.MutableTrigger: void setPriority(int)>(10);

        $r15 = new org.quartz.impl.JobDetailImpl;

        specialinvoke $r15.<org.quartz.impl.JobDetailImpl: void <init>(java.lang.String,java.lang.String,java.lang.Class)>("JD", null, class "Lorg/quartz/PriorityTest$TestJob;");

        interfaceinvoke r2.<org.quartz.Scheduler: java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)>($r15, $r11);

        $r17 = new org.quartz.JobKey;

        $r18 = interfaceinvoke $r15.<org.quartz.JobDetail: org.quartz.JobKey getKey()>();

        $r19 = virtualinvoke $r18.<org.quartz.JobKey: java.lang.String getName()>();

        specialinvoke $r17.<org.quartz.JobKey: void <init>(java.lang.String,java.lang.String)>($r19, null);

        interfaceinvoke $r13.<org.quartz.spi.MutableTrigger: void setJobKey(org.quartz.JobKey)>($r17);

        interfaceinvoke r2.<org.quartz.Scheduler: java.util.Date scheduleJob(org.quartz.Trigger)>($r13);

        interfaceinvoke r2.<org.quartz.Scheduler: void start()>();

        $r21 = <org.quartz.PriorityTest: java.util.concurrent.CountDownLatch latch>;

        virtualinvoke $r21.<java.util.concurrent.CountDownLatch: void await()>();

        $r22 = <org.quartz.PriorityTest: java.lang.StringBuffer result>;

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.quartz.PriorityTest: void assertEquals(java.lang.String,java.lang.String)>("T2T1", $r23);

        interfaceinvoke r2.<org.quartz.Scheduler: void shutdown()>();

        return;
    }

    static java.lang.StringBuffer access$000()
    {
        java.lang.StringBuffer $r0;

        $r0 = <org.quartz.PriorityTest: java.lang.StringBuffer result>;

        return $r0;
    }

    static java.util.concurrent.CountDownLatch access$100()
    {
        java.util.concurrent.CountDownLatch $r0;

        $r0 = <org.quartz.PriorityTest: java.util.concurrent.CountDownLatch latch>;

        return $r0;
    }
}
