public class org.quartz.core.SampledStatisticsImpl extends org.quartz.listeners.SchedulerListenerSupport implements org.quartz.core.SampledStatistics, org.quartz.JobListener, org.quartz.SchedulerListener
{
    private final org.quartz.core.QuartzScheduler scheduler;
    private static final java.lang.String NAME;
    private static final int DEFAULT_HISTORY_SIZE;
    private static final int DEFAULT_INTERVAL_SECS;
    private static final org.quartz.utils.counter.sampled.SampledCounterConfig DEFAULT_SAMPLED_COUNTER_CONFIG;
    private static final org.quartz.utils.counter.sampled.SampledRateCounterConfig DEFAULT_SAMPLED_RATE_COUNTER_CONFIG;
    private volatile org.quartz.utils.counter.CounterManager counterManager;
    private final org.quartz.utils.counter.sampled.SampledCounter jobsScheduledCount;
    private final org.quartz.utils.counter.sampled.SampledCounter jobsExecutingCount;
    private final org.quartz.utils.counter.sampled.SampledCounter jobsCompletedCount;

    void <init>(org.quartz.core.QuartzScheduler)
    {
        org.quartz.core.SampledStatisticsImpl r0;
        org.quartz.core.QuartzScheduler r1;
        org.quartz.utils.counter.CounterManagerImpl $r2;
        java.util.Timer $r3;
        org.quartz.utils.counter.sampled.SampledCounterConfig $r4, $r6, $r8;
        org.quartz.utils.counter.sampled.SampledCounter $r5, $r7, $r9;

        r0 := @this: org.quartz.core.SampledStatisticsImpl;

        r1 := @parameter0: org.quartz.core.QuartzScheduler;

        specialinvoke r0.<org.quartz.listeners.SchedulerListenerSupport: void <init>()>();

        r0.<org.quartz.core.SampledStatisticsImpl: org.quartz.core.QuartzScheduler scheduler> = r1;

        $r2 = new org.quartz.utils.counter.CounterManagerImpl;

        $r3 = new java.util.Timer;

        specialinvoke $r3.<java.util.Timer: void <init>(java.lang.String)>("QuartzSampledStatisticsTimer");

        specialinvoke $r2.<org.quartz.utils.counter.CounterManagerImpl: void <init>(java.util.Timer)>($r3);

        r0.<org.quartz.core.SampledStatisticsImpl: org.quartz.utils.counter.CounterManager counterManager> = $r2;

        $r4 = <org.quartz.core.SampledStatisticsImpl: org.quartz.utils.counter.sampled.SampledCounterConfig DEFAULT_SAMPLED_COUNTER_CONFIG>;

        $r5 = specialinvoke r0.<org.quartz.core.SampledStatisticsImpl: org.quartz.utils.counter.sampled.SampledCounter createSampledCounter(org.quartz.utils.counter.CounterConfig)>($r4);

        r0.<org.quartz.core.SampledStatisticsImpl: org.quartz.utils.counter.sampled.SampledCounter jobsScheduledCount> = $r5;

        $r6 = <org.quartz.core.SampledStatisticsImpl: org.quartz.utils.counter.sampled.SampledCounterConfig DEFAULT_SAMPLED_COUNTER_CONFIG>;

        $r7 = specialinvoke r0.<org.quartz.core.SampledStatisticsImpl: org.quartz.utils.counter.sampled.SampledCounter createSampledCounter(org.quartz.utils.counter.CounterConfig)>($r6);

        r0.<org.quartz.core.SampledStatisticsImpl: org.quartz.utils.counter.sampled.SampledCounter jobsExecutingCount> = $r7;

        $r8 = <org.quartz.core.SampledStatisticsImpl: org.quartz.utils.counter.sampled.SampledCounterConfig DEFAULT_SAMPLED_COUNTER_CONFIG>;

        $r9 = specialinvoke r0.<org.quartz.core.SampledStatisticsImpl: org.quartz.utils.counter.sampled.SampledCounter createSampledCounter(org.quartz.utils.counter.CounterConfig)>($r8);

        r0.<org.quartz.core.SampledStatisticsImpl: org.quartz.utils.counter.sampled.SampledCounter jobsCompletedCount> = $r9;

        virtualinvoke r1.<org.quartz.core.QuartzScheduler: void addInternalSchedulerListener(org.quartz.SchedulerListener)>(r0);

        virtualinvoke r1.<org.quartz.core.QuartzScheduler: void addInternalJobListener(org.quartz.JobListener)>(r0);

        return;
    }

    public void shutdown()
    {
        org.quartz.core.SampledStatisticsImpl r0;
        org.quartz.utils.counter.CounterManager $r1;

        r0 := @this: org.quartz.core.SampledStatisticsImpl;

        $r1 = r0.<org.quartz.core.SampledStatisticsImpl: org.quartz.utils.counter.CounterManager counterManager>;

        interfaceinvoke $r1.<org.quartz.utils.counter.CounterManager: void shutdown(boolean)>(1);

        return;
    }

    private org.quartz.utils.counter.sampled.SampledCounter createSampledCounter(org.quartz.utils.counter.CounterConfig)
    {
        org.quartz.core.SampledStatisticsImpl r0;
        org.quartz.utils.counter.CounterConfig r1;
        org.quartz.utils.counter.CounterManager $r2;
        org.quartz.utils.counter.Counter $r3;
        org.quartz.utils.counter.sampled.SampledCounter $r4;

        r0 := @this: org.quartz.core.SampledStatisticsImpl;

        r1 := @parameter0: org.quartz.utils.counter.CounterConfig;

        $r2 = r0.<org.quartz.core.SampledStatisticsImpl: org.quartz.utils.counter.CounterManager counterManager>;

        $r3 = interfaceinvoke $r2.<org.quartz.utils.counter.CounterManager: org.quartz.utils.counter.Counter createCounter(org.quartz.utils.counter.CounterConfig)>(r1);

        $r4 = (org.quartz.utils.counter.sampled.SampledCounter) $r3;

        return $r4;
    }

    public void clearStatistics()
    {
        org.quartz.core.SampledStatisticsImpl r0;
        org.quartz.utils.counter.sampled.SampledCounter $r1, $r2, $r3;

        r0 := @this: org.quartz.core.SampledStatisticsImpl;

        $r1 = r0.<org.quartz.core.SampledStatisticsImpl: org.quartz.utils.counter.sampled.SampledCounter jobsScheduledCount>;

        interfaceinvoke $r1.<org.quartz.utils.counter.sampled.SampledCounter: long getAndReset()>();

        $r2 = r0.<org.quartz.core.SampledStatisticsImpl: org.quartz.utils.counter.sampled.SampledCounter jobsExecutingCount>;

        interfaceinvoke $r2.<org.quartz.utils.counter.sampled.SampledCounter: long getAndReset()>();

        $r3 = r0.<org.quartz.core.SampledStatisticsImpl: org.quartz.utils.counter.sampled.SampledCounter jobsCompletedCount>;

        interfaceinvoke $r3.<org.quartz.utils.counter.sampled.SampledCounter: long getAndReset()>();

        return;
    }

    public long getJobsCompletedMostRecentSample()
    {
        org.quartz.core.SampledStatisticsImpl r0;
        org.quartz.utils.counter.sampled.SampledCounter $r1;
        org.quartz.utils.counter.sampled.TimeStampedCounterValue $r2;
        long $l0;

        r0 := @this: org.quartz.core.SampledStatisticsImpl;

        $r1 = r0.<org.quartz.core.SampledStatisticsImpl: org.quartz.utils.counter.sampled.SampledCounter jobsCompletedCount>;

        $r2 = interfaceinvoke $r1.<org.quartz.utils.counter.sampled.SampledCounter: org.quartz.utils.counter.sampled.TimeStampedCounterValue getMostRecentSample()>();

        $l0 = virtualinvoke $r2.<org.quartz.utils.counter.sampled.TimeStampedCounterValue: long getCounterValue()>();

        return $l0;
    }

    public long getJobsExecutingMostRecentSample()
    {
        org.quartz.core.SampledStatisticsImpl r0;
        org.quartz.utils.counter.sampled.SampledCounter $r1;
        org.quartz.utils.counter.sampled.TimeStampedCounterValue $r2;
        long $l0;

        r0 := @this: org.quartz.core.SampledStatisticsImpl;

        $r1 = r0.<org.quartz.core.SampledStatisticsImpl: org.quartz.utils.counter.sampled.SampledCounter jobsExecutingCount>;

        $r2 = interfaceinvoke $r1.<org.quartz.utils.counter.sampled.SampledCounter: org.quartz.utils.counter.sampled.TimeStampedCounterValue getMostRecentSample()>();

        $l0 = virtualinvoke $r2.<org.quartz.utils.counter.sampled.TimeStampedCounterValue: long getCounterValue()>();

        return $l0;
    }

    public long getJobsScheduledMostRecentSample()
    {
        org.quartz.core.SampledStatisticsImpl r0;
        org.quartz.utils.counter.sampled.SampledCounter $r1;
        org.quartz.utils.counter.sampled.TimeStampedCounterValue $r2;
        long $l0;

        r0 := @this: org.quartz.core.SampledStatisticsImpl;

        $r1 = r0.<org.quartz.core.SampledStatisticsImpl: org.quartz.utils.counter.sampled.SampledCounter jobsScheduledCount>;

        $r2 = interfaceinvoke $r1.<org.quartz.utils.counter.sampled.SampledCounter: org.quartz.utils.counter.sampled.TimeStampedCounterValue getMostRecentSample()>();

        $l0 = virtualinvoke $r2.<org.quartz.utils.counter.sampled.TimeStampedCounterValue: long getCounterValue()>();

        return $l0;
    }

    public java.lang.String getName()
    {
        org.quartz.core.SampledStatisticsImpl r0;

        r0 := @this: org.quartz.core.SampledStatisticsImpl;

        return "QuartzSampledStatistics";
    }

    public void jobScheduled(org.quartz.Trigger)
    {
        org.quartz.core.SampledStatisticsImpl r0;
        org.quartz.Trigger r1;
        org.quartz.utils.counter.sampled.SampledCounter $r2;

        r0 := @this: org.quartz.core.SampledStatisticsImpl;

        r1 := @parameter0: org.quartz.Trigger;

        $r2 = r0.<org.quartz.core.SampledStatisticsImpl: org.quartz.utils.counter.sampled.SampledCounter jobsScheduledCount>;

        interfaceinvoke $r2.<org.quartz.utils.counter.sampled.SampledCounter: long increment()>();

        return;
    }

    public void jobExecutionVetoed(org.quartz.JobExecutionContext)
    {
        org.quartz.core.SampledStatisticsImpl r0;
        org.quartz.JobExecutionContext r1;

        r0 := @this: org.quartz.core.SampledStatisticsImpl;

        r1 := @parameter0: org.quartz.JobExecutionContext;

        return;
    }

    public void jobToBeExecuted(org.quartz.JobExecutionContext)
    {
        org.quartz.core.SampledStatisticsImpl r0;
        org.quartz.JobExecutionContext r1;
        org.quartz.utils.counter.sampled.SampledCounter $r2;

        r0 := @this: org.quartz.core.SampledStatisticsImpl;

        r1 := @parameter0: org.quartz.JobExecutionContext;

        $r2 = r0.<org.quartz.core.SampledStatisticsImpl: org.quartz.utils.counter.sampled.SampledCounter jobsExecutingCount>;

        interfaceinvoke $r2.<org.quartz.utils.counter.sampled.SampledCounter: long increment()>();

        return;
    }

    public void jobWasExecuted(org.quartz.JobExecutionContext, org.quartz.JobExecutionException)
    {
        org.quartz.core.SampledStatisticsImpl r0;
        org.quartz.JobExecutionContext r1;
        org.quartz.JobExecutionException r2;
        org.quartz.utils.counter.sampled.SampledCounter $r3;

        r0 := @this: org.quartz.core.SampledStatisticsImpl;

        r1 := @parameter0: org.quartz.JobExecutionContext;

        r2 := @parameter1: org.quartz.JobExecutionException;

        $r3 = r0.<org.quartz.core.SampledStatisticsImpl: org.quartz.utils.counter.sampled.SampledCounter jobsCompletedCount>;

        interfaceinvoke $r3.<org.quartz.utils.counter.sampled.SampledCounter: long increment()>();

        return;
    }

    public void jobAdded(org.quartz.JobDetail)
    {
        org.quartz.core.SampledStatisticsImpl r0;
        org.quartz.JobDetail r1;

        r0 := @this: org.quartz.core.SampledStatisticsImpl;

        r1 := @parameter0: org.quartz.JobDetail;

        return;
    }

    public void jobDeleted(java.lang.String, java.lang.String)
    {
        org.quartz.core.SampledStatisticsImpl r0;
        java.lang.String r1, r2;

        r0 := @this: org.quartz.core.SampledStatisticsImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        return;
    }

    static void <clinit>()
    {
        org.quartz.utils.counter.sampled.SampledCounterConfig $r0;
        org.quartz.utils.counter.sampled.SampledRateCounterConfig $r1;

        <org.quartz.core.SampledStatisticsImpl: int DEFAULT_INTERVAL_SECS> = 1;

        <org.quartz.core.SampledStatisticsImpl: int DEFAULT_HISTORY_SIZE> = 30;

        <org.quartz.core.SampledStatisticsImpl: java.lang.String NAME> = "QuartzSampledStatistics";

        $r0 = new org.quartz.utils.counter.sampled.SampledCounterConfig;

        specialinvoke $r0.<org.quartz.utils.counter.sampled.SampledCounterConfig: void <init>(int,int,boolean,long)>(1, 30, 1, 0L);

        <org.quartz.core.SampledStatisticsImpl: org.quartz.utils.counter.sampled.SampledCounterConfig DEFAULT_SAMPLED_COUNTER_CONFIG> = $r0;

        $r1 = new org.quartz.utils.counter.sampled.SampledRateCounterConfig;

        specialinvoke $r1.<org.quartz.utils.counter.sampled.SampledRateCounterConfig: void <init>(int,int,boolean)>(1, 30, 1);

        <org.quartz.core.SampledStatisticsImpl: org.quartz.utils.counter.sampled.SampledRateCounterConfig DEFAULT_SAMPLED_RATE_COUNTER_CONFIG> = $r1;

        return;
    }
}
