public class org.quartz.impl.triggers.CronTriggerImpl extends org.quartz.impl.triggers.AbstractTrigger implements org.quartz.CronTrigger, org.quartz.impl.triggers.CoreTrigger
{
    private static final long serialVersionUID;
    protected static final int YEAR_TO_GIVEUP_SCHEDULING_AT;
    private org.quartz.CronExpression cronEx;
    private java.util.Date startTime;
    private java.util.Date endTime;
    private java.util.Date nextFireTime;
    private java.util.Date previousFireTime;
    private transient java.util.TimeZone timeZone;

    public void <init>()
    {
        org.quartz.impl.triggers.CronTriggerImpl r0;
        java.util.Date $r1;
        java.util.TimeZone $r2;

        r0 := @this: org.quartz.impl.triggers.CronTriggerImpl;

        specialinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: void <init>()>();

        r0.<org.quartz.impl.triggers.CronTriggerImpl: org.quartz.CronExpression cronEx> = null;

        r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date startTime> = null;

        r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date endTime> = null;

        r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date nextFireTime> = null;

        r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date previousFireTime> = null;

        r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.TimeZone timeZone> = null;

        $r1 = new java.util.Date;

        specialinvoke $r1.<java.util.Date: void <init>()>();

        virtualinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: void setStartTime(java.util.Date)>($r1);

        $r2 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();

        virtualinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: void setTimeZone(java.util.TimeZone)>($r2);

        return;
    }

    public void <init>(java.lang.String)
    {
        org.quartz.impl.triggers.CronTriggerImpl r0;
        java.lang.String r1;

        r0 := @this: org.quartz.impl.triggers.CronTriggerImpl;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: void <init>(java.lang.String,java.lang.String)>(r1, null);

        return;
    }

    public void <init>(java.lang.String, java.lang.String)
    {
        org.quartz.impl.triggers.CronTriggerImpl r0;
        java.lang.String r1, r2;
        java.util.Date $r3;
        java.util.TimeZone $r4;

        r0 := @this: org.quartz.impl.triggers.CronTriggerImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: void <init>(java.lang.String,java.lang.String)>(r1, r2);

        r0.<org.quartz.impl.triggers.CronTriggerImpl: org.quartz.CronExpression cronEx> = null;

        r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date startTime> = null;

        r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date endTime> = null;

        r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date nextFireTime> = null;

        r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date previousFireTime> = null;

        r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.TimeZone timeZone> = null;

        $r3 = new java.util.Date;

        specialinvoke $r3.<java.util.Date: void <init>()>();

        virtualinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: void setStartTime(java.util.Date)>($r3);

        $r4 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();

        virtualinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: void setTimeZone(java.util.TimeZone)>($r4);

        return;
    }

    public void <init>(java.lang.String, java.lang.String, java.lang.String) throws java.text.ParseException
    {
        org.quartz.impl.triggers.CronTriggerImpl r0;
        java.lang.String r1, r2, r3;
        java.util.Date $r4;
        java.util.TimeZone $r5;

        r0 := @this: org.quartz.impl.triggers.CronTriggerImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: void <init>(java.lang.String,java.lang.String)>(r1, r2);

        r0.<org.quartz.impl.triggers.CronTriggerImpl: org.quartz.CronExpression cronEx> = null;

        r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date startTime> = null;

        r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date endTime> = null;

        r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date nextFireTime> = null;

        r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date previousFireTime> = null;

        r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.TimeZone timeZone> = null;

        virtualinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: void setCronExpression(java.lang.String)>(r3);

        $r4 = new java.util.Date;

        specialinvoke $r4.<java.util.Date: void <init>()>();

        virtualinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: void setStartTime(java.util.Date)>($r4);

        $r5 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();

        virtualinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: void setTimeZone(java.util.TimeZone)>($r5);

        return;
    }

    public void <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        org.quartz.impl.triggers.CronTriggerImpl r0;
        java.lang.String r1, r2, r3, r4;
        java.util.Date $r5;
        java.util.TimeZone $r6;

        r0 := @this: org.quartz.impl.triggers.CronTriggerImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        specialinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3, r4);

        r0.<org.quartz.impl.triggers.CronTriggerImpl: org.quartz.CronExpression cronEx> = null;

        r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date startTime> = null;

        r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date endTime> = null;

        r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date nextFireTime> = null;

        r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date previousFireTime> = null;

        r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.TimeZone timeZone> = null;

        $r5 = new java.util.Date;

        specialinvoke $r5.<java.util.Date: void <init>()>();

        virtualinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: void setStartTime(java.util.Date)>($r5);

        $r6 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();

        virtualinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: void setTimeZone(java.util.TimeZone)>($r6);

        return;
    }

    public void <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.text.ParseException
    {
        org.quartz.impl.triggers.CronTriggerImpl r0;
        java.lang.String r1, r2, r3, r4, r5;
        java.util.TimeZone $r6;

        r0 := @this: org.quartz.impl.triggers.CronTriggerImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        $r6 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();

        specialinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Date,java.util.Date,java.lang.String,java.util.TimeZone)>(r1, r2, r3, r4, null, null, r5, $r6);

        return;
    }

    public void <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.util.TimeZone) throws java.text.ParseException
    {
        org.quartz.impl.triggers.CronTriggerImpl r0;
        java.lang.String r1, r2, r3, r4, r5;
        java.util.TimeZone r6;

        r0 := @this: org.quartz.impl.triggers.CronTriggerImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        r6 := @parameter5: java.util.TimeZone;

        specialinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Date,java.util.Date,java.lang.String,java.util.TimeZone)>(r1, r2, r3, r4, null, null, r5, r6);

        return;
    }

    public void <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.util.Date, java.util.Date, java.lang.String) throws java.text.ParseException
    {
        org.quartz.impl.triggers.CronTriggerImpl r0;
        java.lang.String r1, r2, r3, r4, r6;
        java.util.Date r5, $r8, r9;
        java.util.TimeZone $r7;

        r0 := @this: org.quartz.impl.triggers.CronTriggerImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r9 := @parameter4: java.util.Date;

        r5 := @parameter5: java.util.Date;

        r6 := @parameter6: java.lang.String;

        specialinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3, r4);

        r0.<org.quartz.impl.triggers.CronTriggerImpl: org.quartz.CronExpression cronEx> = null;

        r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date startTime> = null;

        r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date endTime> = null;

        r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date nextFireTime> = null;

        r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date previousFireTime> = null;

        r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.TimeZone timeZone> = null;

        virtualinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: void setCronExpression(java.lang.String)>(r6);

        if r9 != null goto label1;

        $r8 = new java.util.Date;

        specialinvoke $r8.<java.util.Date: void <init>()>();

        r9 = $r8;

     label1:
        virtualinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: void setStartTime(java.util.Date)>(r9);

        if r5 == null goto label2;

        virtualinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: void setEndTime(java.util.Date)>(r5);

     label2:
        $r7 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();

        virtualinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: void setTimeZone(java.util.TimeZone)>($r7);

        return;
    }

    public void <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.util.Date, java.util.Date, java.lang.String, java.util.TimeZone) throws java.text.ParseException
    {
        org.quartz.impl.triggers.CronTriggerImpl r0;
        java.lang.String r1, r2, r3, r4, r6;
        java.util.Date r5, $r9, r10;
        java.util.TimeZone r7, $r8;

        r0 := @this: org.quartz.impl.triggers.CronTriggerImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r10 := @parameter4: java.util.Date;

        r5 := @parameter5: java.util.Date;

        r6 := @parameter6: java.lang.String;

        r7 := @parameter7: java.util.TimeZone;

        specialinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3, r4);

        r0.<org.quartz.impl.triggers.CronTriggerImpl: org.quartz.CronExpression cronEx> = null;

        r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date startTime> = null;

        r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date endTime> = null;

        r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date nextFireTime> = null;

        r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date previousFireTime> = null;

        r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.TimeZone timeZone> = null;

        virtualinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: void setCronExpression(java.lang.String)>(r6);

        if r10 != null goto label1;

        $r9 = new java.util.Date;

        specialinvoke $r9.<java.util.Date: void <init>()>();

        r10 = $r9;

     label1:
        virtualinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: void setStartTime(java.util.Date)>(r10);

        if r5 == null goto label2;

        virtualinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: void setEndTime(java.util.Date)>(r5);

     label2:
        if r7 != null goto label3;

        $r8 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();

        virtualinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: void setTimeZone(java.util.TimeZone)>($r8);

        goto label4;

     label3:
        virtualinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: void setTimeZone(java.util.TimeZone)>(r7);

     label4:
        return;
    }

    public java.lang.Object clone()
    {
        org.quartz.impl.triggers.CronTriggerImpl r0, r1;
        java.lang.Object $r2;
        org.quartz.CronExpression $r3, $r4, $r5;

        r0 := @this: org.quartz.impl.triggers.CronTriggerImpl;

        $r2 = specialinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: java.lang.Object clone()>();

        r1 = (org.quartz.impl.triggers.CronTriggerImpl) $r2;

        $r3 = r0.<org.quartz.impl.triggers.CronTriggerImpl: org.quartz.CronExpression cronEx>;

        if $r3 == null goto label1;

        $r4 = new org.quartz.CronExpression;

        $r5 = r0.<org.quartz.impl.triggers.CronTriggerImpl: org.quartz.CronExpression cronEx>;

        specialinvoke $r4.<org.quartz.CronExpression: void <init>(org.quartz.CronExpression)>($r5);

        virtualinvoke r1.<org.quartz.impl.triggers.CronTriggerImpl: void setCronExpression(org.quartz.CronExpression)>($r4);

     label1:
        return r1;
    }

    public void setCronExpression(java.lang.String) throws java.text.ParseException
    {
        org.quartz.impl.triggers.CronTriggerImpl r0;
        java.lang.String r1;
        java.util.TimeZone r2;
        org.quartz.CronExpression $r3, $r4;

        r0 := @this: org.quartz.impl.triggers.CronTriggerImpl;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.TimeZone getTimeZone()>();

        $r3 = new org.quartz.CronExpression;

        specialinvoke $r3.<org.quartz.CronExpression: void <init>(java.lang.String)>(r1);

        r0.<org.quartz.impl.triggers.CronTriggerImpl: org.quartz.CronExpression cronEx> = $r3;

        $r4 = r0.<org.quartz.impl.triggers.CronTriggerImpl: org.quartz.CronExpression cronEx>;

        virtualinvoke $r4.<org.quartz.CronExpression: void setTimeZone(java.util.TimeZone)>(r2);

        return;
    }

    public java.lang.String getCronExpression()
    {
        org.quartz.impl.triggers.CronTriggerImpl r0;
        org.quartz.CronExpression $r1, $r2;
        java.lang.String $r3;

        r0 := @this: org.quartz.impl.triggers.CronTriggerImpl;

        $r1 = r0.<org.quartz.impl.triggers.CronTriggerImpl: org.quartz.CronExpression cronEx>;

        if $r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r2 = r0.<org.quartz.impl.triggers.CronTriggerImpl: org.quartz.CronExpression cronEx>;

        $r3 = virtualinvoke $r2.<org.quartz.CronExpression: java.lang.String getCronExpression()>();

     label2:
        return $r3;
    }

    public void setCronExpression(org.quartz.CronExpression)
    {
        org.quartz.impl.triggers.CronTriggerImpl r0;
        org.quartz.CronExpression r1;
        java.util.TimeZone $r2;

        r0 := @this: org.quartz.impl.triggers.CronTriggerImpl;

        r1 := @parameter0: org.quartz.CronExpression;

        r0.<org.quartz.impl.triggers.CronTriggerImpl: org.quartz.CronExpression cronEx> = r1;

        $r2 = virtualinvoke r1.<org.quartz.CronExpression: java.util.TimeZone getTimeZone()>();

        r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.TimeZone timeZone> = $r2;

        return;
    }

    public java.util.Date getStartTime()
    {
        org.quartz.impl.triggers.CronTriggerImpl r0;
        java.util.Date $r1;

        r0 := @this: org.quartz.impl.triggers.CronTriggerImpl;

        $r1 = r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date startTime>;

        return $r1;
    }

    public void setStartTime(java.util.Date)
    {
        org.quartz.impl.triggers.CronTriggerImpl r0;
        java.util.Date r1, r2, $r4;
        java.util.Calendar r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r5, $r6;

        r0 := @this: org.quartz.impl.triggers.CronTriggerImpl;

        r1 := @parameter0: java.util.Date;

        if r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Start time cannot be null");

        throw $r6;

     label1:
        r2 = virtualinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date getEndTime()>();

        if r2 == null goto label2;

        $z0 = virtualinvoke r2.<java.util.Date: boolean before(java.util.Date)>(r1);

        if $z0 == 0 goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("End time cannot be before start time");

        throw $r5;

     label2:
        r3 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r3.<java.util.Calendar: void setTime(java.util.Date)>(r1);

        virtualinvoke r3.<java.util.Calendar: void set(int,int)>(14, 0);

        $r4 = virtualinvoke r3.<java.util.Calendar: java.util.Date getTime()>();

        r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date startTime> = $r4;

        return;
    }

    public java.util.Date getEndTime()
    {
        org.quartz.impl.triggers.CronTriggerImpl r0;
        java.util.Date $r1;

        r0 := @this: org.quartz.impl.triggers.CronTriggerImpl;

        $r1 = r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date endTime>;

        return $r1;
    }

    public void setEndTime(java.util.Date)
    {
        org.quartz.impl.triggers.CronTriggerImpl r0;
        java.util.Date r1, r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.quartz.impl.triggers.CronTriggerImpl;

        r1 := @parameter0: java.util.Date;

        r2 = virtualinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date getStartTime()>();

        if r2 == null goto label1;

        if r1 == null goto label1;

        $z0 = virtualinvoke r2.<java.util.Date: boolean after(java.util.Date)>(r1);

        if $z0 == 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("End time cannot be before start time");

        throw $r3;

     label1:
        r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date endTime> = r1;

        return;
    }

    public java.util.Date getNextFireTime()
    {
        org.quartz.impl.triggers.CronTriggerImpl r0;
        java.util.Date $r1;

        r0 := @this: org.quartz.impl.triggers.CronTriggerImpl;

        $r1 = r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date nextFireTime>;

        return $r1;
    }

    public java.util.Date getPreviousFireTime()
    {
        org.quartz.impl.triggers.CronTriggerImpl r0;
        java.util.Date $r1;

        r0 := @this: org.quartz.impl.triggers.CronTriggerImpl;

        $r1 = r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date previousFireTime>;

        return $r1;
    }

    public void setNextFireTime(java.util.Date)
    {
        org.quartz.impl.triggers.CronTriggerImpl r0;
        java.util.Date r1;

        r0 := @this: org.quartz.impl.triggers.CronTriggerImpl;

        r1 := @parameter0: java.util.Date;

        r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date nextFireTime> = r1;

        return;
    }

    public void setPreviousFireTime(java.util.Date)
    {
        org.quartz.impl.triggers.CronTriggerImpl r0;
        java.util.Date r1;

        r0 := @this: org.quartz.impl.triggers.CronTriggerImpl;

        r1 := @parameter0: java.util.Date;

        r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date previousFireTime> = r1;

        return;
    }

    public java.util.TimeZone getTimeZone()
    {
        org.quartz.impl.triggers.CronTriggerImpl r0;
        org.quartz.CronExpression $r1, $r5;
        java.util.TimeZone $r2, $r3, $r4, $r6;

        r0 := @this: org.quartz.impl.triggers.CronTriggerImpl;

        $r1 = r0.<org.quartz.impl.triggers.CronTriggerImpl: org.quartz.CronExpression cronEx>;

        if $r1 == null goto label1;

        $r5 = r0.<org.quartz.impl.triggers.CronTriggerImpl: org.quartz.CronExpression cronEx>;

        $r6 = virtualinvoke $r5.<org.quartz.CronExpression: java.util.TimeZone getTimeZone()>();

        return $r6;

     label1:
        $r2 = r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.TimeZone timeZone>;

        if $r2 != null goto label2;

        $r4 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();

        r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.TimeZone timeZone> = $r4;

     label2:
        $r3 = r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.TimeZone timeZone>;

        return $r3;
    }

    public void setTimeZone(java.util.TimeZone)
    {
        org.quartz.impl.triggers.CronTriggerImpl r0;
        java.util.TimeZone r1;
        org.quartz.CronExpression $r2, $r3;

        r0 := @this: org.quartz.impl.triggers.CronTriggerImpl;

        r1 := @parameter0: java.util.TimeZone;

        $r2 = r0.<org.quartz.impl.triggers.CronTriggerImpl: org.quartz.CronExpression cronEx>;

        if $r2 == null goto label1;

        $r3 = r0.<org.quartz.impl.triggers.CronTriggerImpl: org.quartz.CronExpression cronEx>;

        virtualinvoke $r3.<org.quartz.CronExpression: void setTimeZone(java.util.TimeZone)>(r1);

     label1:
        r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.TimeZone timeZone> = r1;

        return;
    }

    public java.util.Date getFireTimeAfter(java.util.Date)
    {
        org.quartz.impl.triggers.CronTriggerImpl r0;
        java.util.Date r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, r10;
        boolean $z0, $z1;
        int $i0;
        long $l1, $l2;

        r0 := @this: org.quartz.impl.triggers.CronTriggerImpl;

        r10 := @parameter0: java.util.Date;

        if r10 != null goto label1;

        $r9 = new java.util.Date;

        specialinvoke $r9.<java.util.Date: void <init>()>();

        r10 = $r9;

     label1:
        $r2 = virtualinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date getStartTime()>();

        $z0 = virtualinvoke $r2.<java.util.Date: boolean after(java.util.Date)>(r10);

        if $z0 == 0 goto label2;

        $r7 = new java.util.Date;

        $r8 = virtualinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date getStartTime()>();

        $l1 = virtualinvoke $r8.<java.util.Date: long getTime()>();

        $l2 = $l1 - 1000L;

        specialinvoke $r7.<java.util.Date: void <init>(long)>($l2);

        r10 = $r7;

     label2:
        $r3 = virtualinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date getEndTime()>();

        if $r3 == null goto label3;

        $r6 = virtualinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date getEndTime()>();

        $i0 = virtualinvoke r10.<java.util.Date: int compareTo(java.util.Date)>($r6);

        if $i0 < 0 goto label3;

        return null;

     label3:
        r1 = virtualinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date getTimeAfter(java.util.Date)>(r10);

        $r4 = virtualinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date getEndTime()>();

        if $r4 == null goto label4;

        if r1 == null goto label4;

        $r5 = virtualinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date getEndTime()>();

        $z1 = virtualinvoke r1.<java.util.Date: boolean after(java.util.Date)>($r5);

        if $z1 == 0 goto label4;

        return null;

     label4:
        return r1;
    }

    public java.util.Date getFinalFireTime()
    {
        org.quartz.impl.triggers.CronTriggerImpl r0;
        java.util.Date $r1, $r4, $r5, $r6, $r7, r8, $r9;
        org.quartz.CronExpression $r2, $r3;
        boolean $z0;
        long $l0, $l1;

        r0 := @this: org.quartz.impl.triggers.CronTriggerImpl;

        $r1 = virtualinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date getEndTime()>();

        if $r1 == null goto label1;

        $r6 = new java.util.Date;

        $r7 = virtualinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date getEndTime()>();

        $l0 = virtualinvoke $r7.<java.util.Date: long getTime()>();

        $l1 = $l0 + 1000L;

        specialinvoke $r6.<java.util.Date: void <init>(long)>($l1);

        r8 = virtualinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date getTimeBefore(java.util.Date)>($r6);

        goto label4;

     label1:
        $r2 = r0.<org.quartz.impl.triggers.CronTriggerImpl: org.quartz.CronExpression cronEx>;

        if $r2 != null goto label2;

        $r9 = null;

        goto label3;

     label2:
        $r3 = r0.<org.quartz.impl.triggers.CronTriggerImpl: org.quartz.CronExpression cronEx>;

        $r9 = virtualinvoke $r3.<org.quartz.CronExpression: java.util.Date getFinalFireTime()>();

     label3:
        r8 = $r9;

     label4:
        if r8 == null goto label5;

        $r4 = virtualinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date getStartTime()>();

        if $r4 == null goto label5;

        $r5 = virtualinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date getStartTime()>();

        $z0 = virtualinvoke r8.<java.util.Date: boolean before(java.util.Date)>($r5);

        if $z0 == 0 goto label5;

        return null;

     label5:
        return r8;
    }

    public boolean mayFireAgain()
    {
        org.quartz.impl.triggers.CronTriggerImpl r0;
        java.util.Date $r1;
        boolean $z0;

        r0 := @this: org.quartz.impl.triggers.CronTriggerImpl;

        $r1 = virtualinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date getNextFireTime()>();

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected boolean validateMisfireInstruction(int)
    {
        org.quartz.impl.triggers.CronTriggerImpl r0;
        int i0;
        boolean $z0;

        r0 := @this: org.quartz.impl.triggers.CronTriggerImpl;

        i0 := @parameter0: int;

        if i0 < -1 goto label1;

        if i0 > 2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void updateAfterMisfire(org.quartz.Calendar)
    {
        org.quartz.impl.triggers.CronTriggerImpl r0;
        org.quartz.Calendar r1;
        java.util.Date $r2, $r3, r4;
        long $l0;
        boolean $z0;
        int i1;

        r0 := @this: org.quartz.impl.triggers.CronTriggerImpl;

        r1 := @parameter0: org.quartz.Calendar;

        i1 = virtualinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: int getMisfireInstruction()>();

        if i1 != -1 goto label1;

        return;

     label1:
        if i1 != 0 goto label2;

        i1 = 1;

     label2:
        if i1 != 2 goto label5;

        $r3 = new java.util.Date;

        specialinvoke $r3.<java.util.Date: void <init>()>();

        r4 = virtualinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>($r3);

     label3:
        if r4 == null goto label4;

        if r1 == null goto label4;

        $l0 = virtualinvoke r4.<java.util.Date: long getTime()>();

        $z0 = interfaceinvoke r1.<org.quartz.Calendar: boolean isTimeIncluded(long)>($l0);

        if $z0 != 0 goto label4;

        r4 = virtualinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>(r4);

        goto label3;

     label4:
        virtualinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: void setNextFireTime(java.util.Date)>(r4);

        goto label6;

     label5:
        if i1 != 1 goto label6;

        $r2 = new java.util.Date;

        specialinvoke $r2.<java.util.Date: void <init>()>();

        virtualinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: void setNextFireTime(java.util.Date)>($r2);

     label6:
        return;
    }

    public boolean willFireOn(java.util.Calendar)
    {
        org.quartz.impl.triggers.CronTriggerImpl r0;
        java.util.Calendar r1;
        boolean $z0;

        r0 := @this: org.quartz.impl.triggers.CronTriggerImpl;

        r1 := @parameter0: java.util.Calendar;

        $z0 = virtualinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: boolean willFireOn(java.util.Calendar,boolean)>(r1, 0);

        return $z0;
    }

    public boolean willFireOn(java.util.Calendar, boolean)
    {
        org.quartz.impl.triggers.CronTriggerImpl r0;
        boolean z0, $z1, $z2, $z3;
        java.util.Date r1, $r4, $r5, r9;
        java.util.Calendar r2, r7, r8;
        int i0, i1, i2, $i5, $i6, $i7;
        java.lang.Object $r3;
        long $l3, $l4;
        java.util.TimeZone $r6;

        r0 := @this: org.quartz.impl.triggers.CronTriggerImpl;

        r7 := @parameter0: java.util.Calendar;

        z0 := @parameter1: boolean;

        $r3 = virtualinvoke r7.<java.util.Calendar: java.lang.Object clone()>();

        r8 = (java.util.Calendar) $r3;

        virtualinvoke r8.<java.util.Calendar: void set(int,int)>(14, 0);

        if z0 == 0 goto label1;

        virtualinvoke r8.<java.util.Calendar: void set(int,int)>(11, 0);

        virtualinvoke r8.<java.util.Calendar: void set(int,int)>(12, 0);

        virtualinvoke r8.<java.util.Calendar: void set(int,int)>(13, 0);

     label1:
        r1 = virtualinvoke r8.<java.util.Calendar: java.util.Date getTime()>();

        $r4 = new java.util.Date;

        $r5 = virtualinvoke r8.<java.util.Calendar: java.util.Date getTime()>();

        $l3 = virtualinvoke $r5.<java.util.Date: long getTime()>();

        $l4 = $l3 - 1000L;

        specialinvoke $r4.<java.util.Date: void <init>(long)>($l4);

        r9 = virtualinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>($r4);

        if r9 != null goto label2;

        return 0;

     label2:
        $r6 = virtualinvoke r8.<java.util.Calendar: java.util.TimeZone getTimeZone()>();

        r2 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>($r6);

        virtualinvoke r2.<java.util.Calendar: void setTime(java.util.Date)>(r9);

        i0 = virtualinvoke r2.<java.util.Calendar: int get(int)>(1);

        i1 = virtualinvoke r2.<java.util.Calendar: int get(int)>(2);

        i2 = virtualinvoke r2.<java.util.Calendar: int get(int)>(5);

        if z0 == 0 goto label5;

        $i5 = virtualinvoke r8.<java.util.Calendar: int get(int)>(1);

        if i0 != $i5 goto label3;

        $i6 = virtualinvoke r8.<java.util.Calendar: int get(int)>(2);

        if i1 != $i6 goto label3;

        $i7 = virtualinvoke r8.<java.util.Calendar: int get(int)>(5);

        if i2 != $i7 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        return $z3;

     label5:
        $z1 = virtualinvoke r9.<java.util.Date: boolean before(java.util.Date)>(r1);

        if $z1 == 0 goto label6;

        r9 = virtualinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>(r9);

        goto label5;

     label6:
        $z2 = virtualinvoke r9.<java.util.Date: boolean equals(java.lang.Object)>(r1);

        return $z2;
    }

    public void triggered(org.quartz.Calendar)
    {
        org.quartz.impl.triggers.CronTriggerImpl r0;
        org.quartz.Calendar r1;
        java.util.Date $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        long $l0;
        boolean $z0;

        r0 := @this: org.quartz.impl.triggers.CronTriggerImpl;

        r1 := @parameter0: org.quartz.Calendar;

        $r2 = r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date nextFireTime>;

        r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date previousFireTime> = $r2;

        $r3 = r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date nextFireTime>;

        $r4 = virtualinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>($r3);

        r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date nextFireTime> = $r4;

     label1:
        $r5 = r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date nextFireTime>;

        if $r5 == null goto label2;

        if r1 == null goto label2;

        $r6 = r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date nextFireTime>;

        $l0 = virtualinvoke $r6.<java.util.Date: long getTime()>();

        $z0 = interfaceinvoke r1.<org.quartz.Calendar: boolean isTimeIncluded(long)>($l0);

        if $z0 != 0 goto label2;

        $r7 = r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date nextFireTime>;

        $r8 = virtualinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>($r7);

        r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date nextFireTime> = $r8;

        goto label1;

     label2:
        return;
    }

    public void updateWithNewCalendar(org.quartz.Calendar, long)
    {
        org.quartz.impl.triggers.CronTriggerImpl r0;
        org.quartz.Calendar r1;
        long l0, l1, $l2, $l5, $l6;
        java.util.Date $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r14, $r15, $r16, $r17, $r18, $r19;
        boolean $z0, $z1;
        java.util.GregorianCalendar $r13;
        int $i3, $i4;
        byte $b7;

        r0 := @this: org.quartz.impl.triggers.CronTriggerImpl;

        r1 := @parameter0: org.quartz.Calendar;

        l0 := @parameter1: long;

        $r4 = r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date previousFireTime>;

        $r5 = virtualinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>($r4);

        r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date nextFireTime> = $r5;

        $r6 = r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date nextFireTime>;

        if $r6 == null goto label1;

        if r1 != null goto label2;

     label1:
        return;

     label2:
        $r7 = new java.util.Date;

        specialinvoke $r7.<java.util.Date: void <init>()>();

     label3:
        $r8 = r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date nextFireTime>;

        if $r8 == null goto label7;

        $r9 = r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date nextFireTime>;

        $l2 = virtualinvoke $r9.<java.util.Date: long getTime()>();

        $z0 = interfaceinvoke r1.<org.quartz.Calendar: boolean isTimeIncluded(long)>($l2);

        if $z0 != 0 goto label7;

        $r10 = r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date nextFireTime>;

        $r11 = virtualinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>($r10);

        r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date nextFireTime> = $r11;

        $r12 = r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date nextFireTime>;

        if $r12 != null goto label4;

        goto label7;

     label4:
        $r13 = new java.util.GregorianCalendar;

        specialinvoke $r13.<java.util.GregorianCalendar: void <init>()>();

        $r14 = r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date nextFireTime>;

        virtualinvoke $r13.<java.util.Calendar: void setTime(java.util.Date)>($r14);

        $i3 = virtualinvoke $r13.<java.util.Calendar: int get(int)>(1);

        $i4 = <org.quartz.impl.triggers.CronTriggerImpl: int YEAR_TO_GIVEUP_SCHEDULING_AT>;

        if $i3 <= $i4 goto label5;

        r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date nextFireTime> = null;

     label5:
        $r15 = r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date nextFireTime>;

        if $r15 == null goto label6;

        $r16 = r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date nextFireTime>;

        $z1 = virtualinvoke $r16.<java.util.Date: boolean before(java.util.Date)>($r7);

        if $z1 == 0 goto label6;

        $l5 = virtualinvoke $r7.<java.util.Date: long getTime()>();

        $r17 = r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date nextFireTime>;

        $l6 = virtualinvoke $r17.<java.util.Date: long getTime()>();

        l1 = $l5 - $l6;

        $b7 = l1 cmp l0;

        if $b7 < 0 goto label6;

        $r18 = r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date nextFireTime>;

        $r19 = virtualinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>($r18);

        r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date nextFireTime> = $r19;

     label6:
        goto label3;

     label7:
        return;
    }

    public java.util.Date computeFirstFireTime(org.quartz.Calendar)
    {
        org.quartz.impl.triggers.CronTriggerImpl r0;
        org.quartz.Calendar r1;
        java.util.Date $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        long $l0, $l1, $l2;
        boolean $z0;

        r0 := @this: org.quartz.impl.triggers.CronTriggerImpl;

        r1 := @parameter0: org.quartz.Calendar;

        $r2 = new java.util.Date;

        $r3 = virtualinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date getStartTime()>();

        $l0 = virtualinvoke $r3.<java.util.Date: long getTime()>();

        $l1 = $l0 - 1000L;

        specialinvoke $r2.<java.util.Date: void <init>(long)>($l1);

        $r4 = virtualinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>($r2);

        r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date nextFireTime> = $r4;

     label1:
        $r5 = r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date nextFireTime>;

        if $r5 == null goto label2;

        if r1 == null goto label2;

        $r6 = r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date nextFireTime>;

        $l2 = virtualinvoke $r6.<java.util.Date: long getTime()>();

        $z0 = interfaceinvoke r1.<org.quartz.Calendar: boolean isTimeIncluded(long)>($l2);

        if $z0 != 0 goto label2;

        $r7 = r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date nextFireTime>;

        $r8 = virtualinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>($r7);

        r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date nextFireTime> = $r8;

        goto label1;

     label2:
        $r9 = r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.Date nextFireTime>;

        return $r9;
    }

    public java.lang.String getExpressionSummary()
    {
        org.quartz.impl.triggers.CronTriggerImpl r0;
        org.quartz.CronExpression $r1, $r2;
        java.lang.String $r3;

        r0 := @this: org.quartz.impl.triggers.CronTriggerImpl;

        $r1 = r0.<org.quartz.impl.triggers.CronTriggerImpl: org.quartz.CronExpression cronEx>;

        if $r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r2 = r0.<org.quartz.impl.triggers.CronTriggerImpl: org.quartz.CronExpression cronEx>;

        $r3 = virtualinvoke $r2.<org.quartz.CronExpression: java.lang.String getExpressionSummary()>();

     label2:
        return $r3;
    }

    public boolean hasAdditionalProperties()
    {
        org.quartz.impl.triggers.CronTriggerImpl r0;

        r0 := @this: org.quartz.impl.triggers.CronTriggerImpl;

        return 0;
    }

    public org.quartz.ScheduleBuilder getScheduleBuilder()
    {
        org.quartz.impl.triggers.CronTriggerImpl r0;
        org.quartz.CronScheduleBuilder r1, $r3;
        java.lang.String $r2;
        java.util.TimeZone $r4;
        int $i0;

        r0 := @this: org.quartz.impl.triggers.CronTriggerImpl;

        $r2 = virtualinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: java.lang.String getCronExpression()>();

        $r3 = staticinvoke <org.quartz.CronScheduleBuilder: org.quartz.CronScheduleBuilder cronSchedule(java.lang.String)>($r2);

        $r4 = virtualinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: java.util.TimeZone getTimeZone()>();

        r1 = virtualinvoke $r3.<org.quartz.CronScheduleBuilder: org.quartz.CronScheduleBuilder inTimeZone(java.util.TimeZone)>($r4);

        $i0 = virtualinvoke r0.<org.quartz.impl.triggers.CronTriggerImpl: int getMisfireInstruction()>();

        lookupswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label1;
            default: goto label3;
        };

     label1:
        virtualinvoke r1.<org.quartz.CronScheduleBuilder: org.quartz.CronScheduleBuilder withMisfireHandlingInstructionDoNothing()>();

        goto label3;

     label2:
        virtualinvoke r1.<org.quartz.CronScheduleBuilder: org.quartz.CronScheduleBuilder withMisfireHandlingInstructionFireAndProceed()>();

     label3:
        return r1;
    }

    protected java.util.Date getTimeAfter(java.util.Date)
    {
        org.quartz.impl.triggers.CronTriggerImpl r0;
        java.util.Date r1, $r4;
        org.quartz.CronExpression $r2, $r3;

        r0 := @this: org.quartz.impl.triggers.CronTriggerImpl;

        r1 := @parameter0: java.util.Date;

        $r2 = r0.<org.quartz.impl.triggers.CronTriggerImpl: org.quartz.CronExpression cronEx>;

        if $r2 != null goto label1;

        $r4 = null;

        goto label2;

     label1:
        $r3 = r0.<org.quartz.impl.triggers.CronTriggerImpl: org.quartz.CronExpression cronEx>;

        $r4 = virtualinvoke $r3.<org.quartz.CronExpression: java.util.Date getTimeAfter(java.util.Date)>(r1);

     label2:
        return $r4;
    }

    protected java.util.Date getTimeBefore(java.util.Date)
    {
        org.quartz.impl.triggers.CronTriggerImpl r0;
        java.util.Date r1, $r4;
        org.quartz.CronExpression $r2, $r3;

        r0 := @this: org.quartz.impl.triggers.CronTriggerImpl;

        r1 := @parameter0: java.util.Date;

        $r2 = r0.<org.quartz.impl.triggers.CronTriggerImpl: org.quartz.CronExpression cronEx>;

        if $r2 != null goto label1;

        $r4 = null;

        goto label2;

     label1:
        $r3 = r0.<org.quartz.impl.triggers.CronTriggerImpl: org.quartz.CronExpression cronEx>;

        $r4 = virtualinvoke $r3.<org.quartz.CronExpression: java.util.Date getTimeBefore(java.util.Date)>(r1);

     label2:
        return $r4;
    }

    static void <clinit>()
    {
        int $i0;

        <org.quartz.impl.triggers.CronTriggerImpl: long serialVersionUID> = -8644953146451592766L;

        $i0 = <org.quartz.CronExpression: int MAX_YEAR>;

        <org.quartz.impl.triggers.CronTriggerImpl: int YEAR_TO_GIVEUP_SCHEDULING_AT> = $i0;

        return;
    }
}
