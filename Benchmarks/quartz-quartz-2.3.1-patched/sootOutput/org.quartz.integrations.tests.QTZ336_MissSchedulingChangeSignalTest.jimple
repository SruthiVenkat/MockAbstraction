public class org.quartz.integrations.tests.QTZ336_MissSchedulingChangeSignalTest extends java.lang.Object
{
    private static final org.slf4j.Logger LOG;

    public void <init>()
    {
        org.quartz.integrations.tests.QTZ336_MissSchedulingChangeSignalTest r0;

        r0 := @this: org.quartz.integrations.tests.QTZ336_MissSchedulingChangeSignalTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void simpleScheduleAlwaysFiredUnder20s() throws java.lang.Exception
    {
        org.quartz.integrations.tests.QTZ336_MissSchedulingChangeSignalTest r0;
        java.io.InputStream r2;
        org.quartz.Scheduler r3;
        org.quartz.JobDetail r4;
        org.quartz.SimpleTrigger r5;
        java.util.Iterator r6;
        long l0, $l1, $l2;
        java.util.Properties $r7;
        java.lang.Class $r8, $r10;
        java.lang.String $r11, $r38;
        org.quartz.impl.StdSchedulerFactory $r13;
        org.slf4j.Logger $r14, $r15, $r29;
        org.quartz.JobBuilder $r16, $r17;
        org.quartz.TriggerBuilder $r18, $r19, $r21, $r26;
        java.util.Date $r20;
        org.quartz.SimpleScheduleBuilder $r22, $r23, $r24, $r25;
        org.quartz.Trigger $r27;
        boolean $z0, $z1, $z2;
        java.lang.Object $r30;
        java.lang.Long $r31;
        java.lang.StringBuilder $r32, $r33, $r34, $r35, $r36, $r37;
        byte $b3;
        java.lang.Throwable $r39;
        java.lang.Exception $r40;
        java.util.List r44;

        r0 := @this: org.quartz.integrations.tests.QTZ336_MissSchedulingChangeSignalTest;

        $r7 = new java.util.Properties;

        specialinvoke $r7.<java.util.Properties: void <init>()>();

        $r8 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r2 = virtualinvoke $r8.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>("/org/quartz/quartz.properties");

     label01:
        virtualinvoke $r7.<java.util.Properties: void load(java.io.InputStream)>(r2);

     label02:
        virtualinvoke r2.<java.io.InputStream: void close()>();

        goto label04;

     label03:
        $r39 := @caughtexception;

        virtualinvoke r2.<java.io.InputStream: void close()>();

        throw $r39;

     label04:
        virtualinvoke $r7.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("org.quartz.scheduler.skipUpdateCheck", "true");

        $r10 = class "Lorg/quartz/integrations/tests/QTZ336_MissSchedulingChangeSignalTest$SlowRAMJobStore;";

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r7.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("org.quartz.jobStore.class", $r11);

        $r13 = new org.quartz.impl.StdSchedulerFactory;

        specialinvoke $r13.<org.quartz.impl.StdSchedulerFactory: void <init>(java.util.Properties)>($r7);

        r3 = interfaceinvoke $r13.<org.quartz.SchedulerFactory: org.quartz.Scheduler getScheduler()>();

        $r14 = <org.quartz.integrations.tests.QTZ336_MissSchedulingChangeSignalTest: org.slf4j.Logger LOG>;

        interfaceinvoke $r14.<org.slf4j.Logger: void info(java.lang.String)>("------- Initialization Complete -----------");

        $r15 = <org.quartz.integrations.tests.QTZ336_MissSchedulingChangeSignalTest: org.slf4j.Logger LOG>;

        interfaceinvoke $r15.<org.slf4j.Logger: void info(java.lang.String)>("------- Scheduling Job  -------------------");

        $r16 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob(java.lang.Class)>(class "Lorg/quartz/integrations/tests/QTZ336_MissSchedulingChangeSignalTest$CollectDuractionBetweenFireTimesJob;");

        $r17 = virtualinvoke $r16.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String,java.lang.String)>("job", "group");

        r4 = virtualinvoke $r17.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        $r18 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r19 = virtualinvoke $r18.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String,java.lang.String)>("trigger1", "group1");

        $r20 = new java.util.Date;

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l2 = $l1 + 1000L;

        specialinvoke $r20.<java.util.Date: void <init>(long)>($l2);

        $r21 = virtualinvoke $r19.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder startAt(java.util.Date)>($r20);

        $r22 = staticinvoke <org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder simpleSchedule()>();

        $r23 = virtualinvoke $r22.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder withIntervalInSeconds(int)>(1);

        $r24 = virtualinvoke $r23.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder repeatForever()>();

        $r25 = virtualinvoke $r24.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder withMisfireHandlingInstructionIgnoreMisfires()>();

        $r26 = virtualinvoke $r21.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>($r25);

        $r27 = virtualinvoke $r26.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        r5 = (org.quartz.SimpleTrigger) $r27;

        interfaceinvoke r3.<org.quartz.Scheduler: java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)>(r4, r5);

        interfaceinvoke r3.<org.quartz.Scheduler: void start()>();

        $r29 = <org.quartz.integrations.tests.QTZ336_MissSchedulingChangeSignalTest: org.slf4j.Logger LOG>;

        interfaceinvoke $r29.<org.slf4j.Logger: void info(java.lang.String)>("------- Scheduler Started -----------------");

     label05:
        staticinvoke <java.lang.Thread: void sleep(long)>(50000L);

     label06:
        goto label08;

     label07:
        $r40 := @caughtexception;

        virtualinvoke $r40.<java.lang.Exception: void printStackTrace()>();

     label08:
        r44 = staticinvoke <org.quartz.integrations.tests.QTZ336_MissSchedulingChangeSignalTest$CollectDuractionBetweenFireTimesJob: java.util.List getDurations()>();

        $z0 = interfaceinvoke r44.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("Job was not executed once!", $z0);

        r6 = interfaceinvoke r44.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label12;

        $r30 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        $r31 = (java.lang.Long) $r30;

        l0 = virtualinvoke $r31.<java.lang.Long: long longValue()>();

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missed an execution with one duration being between two fires: ");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (all: ");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r44);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        $b3 = l0 cmp 20000L;

        if $b3 >= 0 goto label10;

        $z2 = 1;

        goto label11;

     label10:
        $z2 = 0;

     label11:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>($r38, $z2);

        goto label09;

     label12:
        return;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Exception from label05 to label06 with label07;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/quartz/integrations/tests/QTZ336_MissSchedulingChangeSignalTest;");

        <org.quartz.integrations.tests.QTZ336_MissSchedulingChangeSignalTest: org.slf4j.Logger LOG> = $r0;

        return;
    }
}
