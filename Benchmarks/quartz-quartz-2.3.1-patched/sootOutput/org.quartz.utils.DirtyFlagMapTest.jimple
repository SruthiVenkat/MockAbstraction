public class org.quartz.utils.DirtyFlagMapTest extends junit.framework.TestCase
{

    public void <init>()
    {
        org.quartz.utils.DirtyFlagMapTest r0;

        r0 := @this: org.quartz.utils.DirtyFlagMapTest;

        specialinvoke r0.<junit.framework.TestCase: void <init>()>();

        return;
    }

    public void testClear()
    {
        org.quartz.utils.DirtyFlagMapTest r0;
        org.quartz.utils.DirtyFlagMap $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.quartz.utils.DirtyFlagMapTest;

        $r2 = new org.quartz.utils.DirtyFlagMap;

        specialinvoke $r2.<org.quartz.utils.DirtyFlagMap: void <init>()>();

        $z0 = virtualinvoke $r2.<org.quartz.utils.DirtyFlagMap: boolean isDirty()>();

        staticinvoke <org.quartz.utils.DirtyFlagMapTest: void assertFalse(boolean)>($z0);

        virtualinvoke $r2.<org.quartz.utils.DirtyFlagMap: void clear()>();

        $z1 = virtualinvoke $r2.<org.quartz.utils.DirtyFlagMap: boolean isDirty()>();

        staticinvoke <org.quartz.utils.DirtyFlagMapTest: void assertFalse(boolean)>($z1);

        virtualinvoke $r2.<org.quartz.utils.DirtyFlagMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("X", "Y");

        virtualinvoke $r2.<org.quartz.utils.DirtyFlagMap: void clearDirtyFlag()>();

        virtualinvoke $r2.<org.quartz.utils.DirtyFlagMap: void clear()>();

        $z2 = virtualinvoke $r2.<org.quartz.utils.DirtyFlagMap: boolean isDirty()>();

        staticinvoke <org.quartz.utils.DirtyFlagMapTest: void assertTrue(boolean)>($z2);

        return;
    }

    public void testPut()
    {
        org.quartz.utils.DirtyFlagMapTest r0;
        org.quartz.utils.DirtyFlagMap $r2;
        boolean $z0;

        r0 := @this: org.quartz.utils.DirtyFlagMapTest;

        $r2 = new org.quartz.utils.DirtyFlagMap;

        specialinvoke $r2.<org.quartz.utils.DirtyFlagMap: void <init>()>();

        virtualinvoke $r2.<org.quartz.utils.DirtyFlagMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("a", "Y");

        $z0 = virtualinvoke $r2.<org.quartz.utils.DirtyFlagMap: boolean isDirty()>();

        staticinvoke <org.quartz.utils.DirtyFlagMapTest: void assertTrue(boolean)>($z0);

        return;
    }

    public void testRemove()
    {
        org.quartz.utils.DirtyFlagMapTest r0;
        org.quartz.utils.DirtyFlagMap $r2;
        boolean $z0, $z1;

        r0 := @this: org.quartz.utils.DirtyFlagMapTest;

        $r2 = new org.quartz.utils.DirtyFlagMap;

        specialinvoke $r2.<org.quartz.utils.DirtyFlagMap: void <init>()>();

        virtualinvoke $r2.<org.quartz.utils.DirtyFlagMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("a", "Y");

        virtualinvoke $r2.<org.quartz.utils.DirtyFlagMap: void clearDirtyFlag()>();

        virtualinvoke $r2.<org.quartz.utils.DirtyFlagMap: java.lang.Object remove(java.lang.Object)>("b");

        $z0 = virtualinvoke $r2.<org.quartz.utils.DirtyFlagMap: boolean isDirty()>();

        staticinvoke <org.quartz.utils.DirtyFlagMapTest: void assertFalse(boolean)>($z0);

        virtualinvoke $r2.<org.quartz.utils.DirtyFlagMap: java.lang.Object remove(java.lang.Object)>("a");

        $z1 = virtualinvoke $r2.<org.quartz.utils.DirtyFlagMap: boolean isDirty()>();

        staticinvoke <org.quartz.utils.DirtyFlagMapTest: void assertTrue(boolean)>($z1);

        return;
    }

    public void testEntrySetRemove()
    {
        org.quartz.utils.DirtyFlagMapTest r0;
        java.util.Set r2;
        org.quartz.utils.DirtyFlagMap $r3;
        boolean $z0, $z2, $z4;
        java.util.Iterator $r6;
        java.lang.Object $r7;

        r0 := @this: org.quartz.utils.DirtyFlagMapTest;

        $r3 = new org.quartz.utils.DirtyFlagMap;

        specialinvoke $r3.<org.quartz.utils.DirtyFlagMap: void <init>()>();

        r2 = virtualinvoke $r3.<org.quartz.utils.DirtyFlagMap: java.util.Set entrySet()>();

        virtualinvoke $r3.<org.quartz.utils.DirtyFlagMap: java.lang.Object remove(java.lang.Object)>("a");

        $z0 = virtualinvoke $r3.<org.quartz.utils.DirtyFlagMap: boolean isDirty()>();

        staticinvoke <org.quartz.utils.DirtyFlagMapTest: void assertFalse(boolean)>($z0);

        virtualinvoke $r3.<org.quartz.utils.DirtyFlagMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("a", "Y");

        virtualinvoke $r3.<org.quartz.utils.DirtyFlagMap: void clearDirtyFlag()>();

        interfaceinvoke r2.<java.util.Set: boolean remove(java.lang.Object)>("b");

        $z2 = virtualinvoke $r3.<org.quartz.utils.DirtyFlagMap: boolean isDirty()>();

        staticinvoke <org.quartz.utils.DirtyFlagMapTest: void assertFalse(boolean)>($z2);

        $r6 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke r2.<java.util.Set: boolean remove(java.lang.Object)>($r7);

        $z4 = virtualinvoke $r3.<org.quartz.utils.DirtyFlagMap: boolean isDirty()>();

        staticinvoke <org.quartz.utils.DirtyFlagMapTest: void assertTrue(boolean)>($z4);

        return;
    }

    public void testEntrySetRetainAll()
    {
        org.quartz.utils.DirtyFlagMapTest r0;
        java.util.Set r2;
        org.quartz.utils.DirtyFlagMap $r3;
        java.util.List $r4, $r8, $r9;
        boolean $z1, $z3, $z5;
        java.util.Iterator $r6;
        java.lang.Object $r7;

        r0 := @this: org.quartz.utils.DirtyFlagMapTest;

        $r3 = new org.quartz.utils.DirtyFlagMap;

        specialinvoke $r3.<org.quartz.utils.DirtyFlagMap: void <init>()>();

        r2 = virtualinvoke $r3.<org.quartz.utils.DirtyFlagMap: java.util.Set entrySet()>();

        $r4 = <java.util.Collections: java.util.List EMPTY_LIST>;

        interfaceinvoke r2.<java.util.Set: boolean retainAll(java.util.Collection)>($r4);

        $z1 = virtualinvoke $r3.<org.quartz.utils.DirtyFlagMap: boolean isDirty()>();

        staticinvoke <org.quartz.utils.DirtyFlagMapTest: void assertFalse(boolean)>($z1);

        virtualinvoke $r3.<org.quartz.utils.DirtyFlagMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("a", "Y");

        virtualinvoke $r3.<org.quartz.utils.DirtyFlagMap: void clearDirtyFlag()>();

        $r6 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r8 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r7);

        interfaceinvoke r2.<java.util.Set: boolean retainAll(java.util.Collection)>($r8);

        $z3 = virtualinvoke $r3.<org.quartz.utils.DirtyFlagMap: boolean isDirty()>();

        staticinvoke <org.quartz.utils.DirtyFlagMapTest: void assertFalse(boolean)>($z3);

        $r9 = <java.util.Collections: java.util.List EMPTY_LIST>;

        interfaceinvoke r2.<java.util.Set: boolean retainAll(java.util.Collection)>($r9);

        $z5 = virtualinvoke $r3.<org.quartz.utils.DirtyFlagMap: boolean isDirty()>();

        staticinvoke <org.quartz.utils.DirtyFlagMapTest: void assertTrue(boolean)>($z5);

        return;
    }

    public void testEntrySetRemoveAll()
    {
        org.quartz.utils.DirtyFlagMapTest r0;
        java.util.Set r2;
        org.quartz.utils.DirtyFlagMap $r3;
        java.util.List $r4, $r6, $r9;
        boolean $z1, $z3, $z5;
        java.util.Iterator $r7;
        java.lang.Object $r8;

        r0 := @this: org.quartz.utils.DirtyFlagMapTest;

        $r3 = new org.quartz.utils.DirtyFlagMap;

        specialinvoke $r3.<org.quartz.utils.DirtyFlagMap: void <init>()>();

        r2 = virtualinvoke $r3.<org.quartz.utils.DirtyFlagMap: java.util.Set entrySet()>();

        $r4 = <java.util.Collections: java.util.List EMPTY_LIST>;

        interfaceinvoke r2.<java.util.Set: boolean removeAll(java.util.Collection)>($r4);

        $z1 = virtualinvoke $r3.<org.quartz.utils.DirtyFlagMap: boolean isDirty()>();

        staticinvoke <org.quartz.utils.DirtyFlagMapTest: void assertFalse(boolean)>($z1);

        virtualinvoke $r3.<org.quartz.utils.DirtyFlagMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("a", "Y");

        virtualinvoke $r3.<org.quartz.utils.DirtyFlagMap: void clearDirtyFlag()>();

        $r6 = <java.util.Collections: java.util.List EMPTY_LIST>;

        interfaceinvoke r2.<java.util.Set: boolean removeAll(java.util.Collection)>($r6);

        $z3 = virtualinvoke $r3.<org.quartz.utils.DirtyFlagMap: boolean isDirty()>();

        staticinvoke <org.quartz.utils.DirtyFlagMapTest: void assertFalse(boolean)>($z3);

        $r7 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r9 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r8);

        interfaceinvoke r2.<java.util.Set: boolean removeAll(java.util.Collection)>($r9);

        $z5 = virtualinvoke $r3.<org.quartz.utils.DirtyFlagMap: boolean isDirty()>();

        staticinvoke <org.quartz.utils.DirtyFlagMapTest: void assertTrue(boolean)>($z5);

        return;
    }

    public void testEntrySetClear()
    {
        org.quartz.utils.DirtyFlagMapTest r0;
        java.util.Set r2;
        org.quartz.utils.DirtyFlagMap $r3;
        boolean $z0, $z1;

        r0 := @this: org.quartz.utils.DirtyFlagMapTest;

        $r3 = new org.quartz.utils.DirtyFlagMap;

        specialinvoke $r3.<org.quartz.utils.DirtyFlagMap: void <init>()>();

        r2 = virtualinvoke $r3.<org.quartz.utils.DirtyFlagMap: java.util.Set entrySet()>();

        interfaceinvoke r2.<java.util.Set: void clear()>();

        $z0 = virtualinvoke $r3.<org.quartz.utils.DirtyFlagMap: boolean isDirty()>();

        staticinvoke <org.quartz.utils.DirtyFlagMapTest: void assertFalse(boolean)>($z0);

        virtualinvoke $r3.<org.quartz.utils.DirtyFlagMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("a", "Y");

        virtualinvoke $r3.<org.quartz.utils.DirtyFlagMap: void clearDirtyFlag()>();

        interfaceinvoke r2.<java.util.Set: void clear()>();

        $z1 = virtualinvoke $r3.<org.quartz.utils.DirtyFlagMap: boolean isDirty()>();

        staticinvoke <org.quartz.utils.DirtyFlagMapTest: void assertTrue(boolean)>($z1);

        return;
    }

    public void testEntrySetIterator()
    {
        org.quartz.utils.DirtyFlagMapTest r0;
        java.util.Set r2;
        java.util.Iterator r3;
        java.util.Map$Entry r4, r6;
        java.lang.String r5;
        org.quartz.utils.DirtyFlagMap $r7;
        java.lang.Object $r11, $r12, $r13;
        int $i0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.quartz.utils.DirtyFlagMapTest;

        $r7 = new org.quartz.utils.DirtyFlagMap;

        specialinvoke $r7.<org.quartz.utils.DirtyFlagMap: void <init>()>();

        r2 = virtualinvoke $r7.<org.quartz.utils.DirtyFlagMap: java.util.Set entrySet()>();

        virtualinvoke $r7.<org.quartz.utils.DirtyFlagMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("a", "A");

        virtualinvoke $r7.<org.quartz.utils.DirtyFlagMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("b", "B");

        virtualinvoke $r7.<org.quartz.utils.DirtyFlagMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("c", "C");

        virtualinvoke $r7.<org.quartz.utils.DirtyFlagMap: void clearDirtyFlag()>();

        r3 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();

        $r11 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r11;

        $r12 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        r5 = (java.lang.String) $r12;

        interfaceinvoke r3.<java.util.Iterator: void remove()>();

        $i0 = virtualinvoke $r7.<org.quartz.utils.DirtyFlagMap: int size()>();

        staticinvoke <org.quartz.utils.DirtyFlagMapTest: void assertEquals(int,int)>(2, $i0);

        $z0 = virtualinvoke $r7.<org.quartz.utils.DirtyFlagMap: boolean isDirty()>();

        staticinvoke <org.quartz.utils.DirtyFlagMapTest: void assertTrue(boolean)>($z0);

        $z1 = virtualinvoke $r7.<org.quartz.utils.DirtyFlagMap: boolean containsKey(java.lang.Object)>(r5);

        staticinvoke <org.quartz.utils.DirtyFlagMapTest: void assertFalse(boolean)>($z1);

        virtualinvoke $r7.<org.quartz.utils.DirtyFlagMap: void clearDirtyFlag()>();

        $r13 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r13;

        interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>("BB");

        $z2 = virtualinvoke $r7.<org.quartz.utils.DirtyFlagMap: boolean isDirty()>();

        staticinvoke <org.quartz.utils.DirtyFlagMapTest: void assertTrue(boolean)>($z2);

        $z3 = virtualinvoke $r7.<org.quartz.utils.DirtyFlagMap: boolean containsValue(java.lang.Object)>("BB");

        staticinvoke <org.quartz.utils.DirtyFlagMapTest: void assertTrue(boolean)>($z3);

        return;
    }

    public void testEntrySetToArray()
    {
        org.quartz.utils.DirtyFlagMapTest r0;
        java.util.Set r2;
        java.lang.Object[] r3;
        java.util.Map$Entry r4;
        org.quartz.utils.DirtyFlagMap $r5;
        int $i0;
        java.lang.Object $r9;
        boolean $z0, $z1;

        r0 := @this: org.quartz.utils.DirtyFlagMapTest;

        $r5 = new org.quartz.utils.DirtyFlagMap;

        specialinvoke $r5.<org.quartz.utils.DirtyFlagMap: void <init>()>();

        r2 = virtualinvoke $r5.<org.quartz.utils.DirtyFlagMap: java.util.Set entrySet()>();

        virtualinvoke $r5.<org.quartz.utils.DirtyFlagMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("a", "A");

        virtualinvoke $r5.<org.quartz.utils.DirtyFlagMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("b", "B");

        virtualinvoke $r5.<org.quartz.utils.DirtyFlagMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("c", "C");

        virtualinvoke $r5.<org.quartz.utils.DirtyFlagMap: void clearDirtyFlag()>();

        r3 = interfaceinvoke r2.<java.util.Set: java.lang.Object[] toArray()>();

        $i0 = lengthof r3;

        staticinvoke <org.quartz.utils.DirtyFlagMapTest: void assertEquals(int,int)>(3, $i0);

        $r9 = r3[0];

        r4 = (java.util.Map$Entry) $r9;

        interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>("BB");

        $z0 = virtualinvoke $r5.<org.quartz.utils.DirtyFlagMap: boolean isDirty()>();

        staticinvoke <org.quartz.utils.DirtyFlagMapTest: void assertTrue(boolean)>($z0);

        $z1 = virtualinvoke $r5.<org.quartz.utils.DirtyFlagMap: boolean containsValue(java.lang.Object)>("BB");

        staticinvoke <org.quartz.utils.DirtyFlagMapTest: void assertTrue(boolean)>($z1);

        return;
    }

    public void testEntrySetToArrayWithArg()
    {
        org.quartz.utils.DirtyFlagMapTest r0;
        java.util.Set r2;
        java.lang.Object[] r3;
        java.util.Map$Entry r4;
        org.quartz.utils.DirtyFlagMap $r5;
        java.util.Map$Entry[] $r9;
        int $i0;
        java.lang.Object $r10;
        boolean $z0, $z1;

        r0 := @this: org.quartz.utils.DirtyFlagMapTest;

        $r5 = new org.quartz.utils.DirtyFlagMap;

        specialinvoke $r5.<org.quartz.utils.DirtyFlagMap: void <init>()>();

        r2 = virtualinvoke $r5.<org.quartz.utils.DirtyFlagMap: java.util.Set entrySet()>();

        virtualinvoke $r5.<org.quartz.utils.DirtyFlagMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("a", "A");

        virtualinvoke $r5.<org.quartz.utils.DirtyFlagMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("b", "B");

        virtualinvoke $r5.<org.quartz.utils.DirtyFlagMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("c", "C");

        virtualinvoke $r5.<org.quartz.utils.DirtyFlagMap: void clearDirtyFlag()>();

        $r9 = newarray (java.util.Map$Entry)[0];

        r3 = interfaceinvoke r2.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        $i0 = lengthof r3;

        staticinvoke <org.quartz.utils.DirtyFlagMapTest: void assertEquals(int,int)>(3, $i0);

        $r10 = r3[0];

        r4 = (java.util.Map$Entry) $r10;

        interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>("BB");

        $z0 = virtualinvoke $r5.<org.quartz.utils.DirtyFlagMap: boolean isDirty()>();

        staticinvoke <org.quartz.utils.DirtyFlagMapTest: void assertTrue(boolean)>($z0);

        $z1 = virtualinvoke $r5.<org.quartz.utils.DirtyFlagMap: boolean containsValue(java.lang.Object)>("BB");

        staticinvoke <org.quartz.utils.DirtyFlagMapTest: void assertTrue(boolean)>($z1);

        return;
    }

    public void testKeySetClear()
    {
        org.quartz.utils.DirtyFlagMapTest r0;
        java.util.Set r2;
        org.quartz.utils.DirtyFlagMap $r3;
        boolean $z0, $z1;
        int $i0;

        r0 := @this: org.quartz.utils.DirtyFlagMapTest;

        $r3 = new org.quartz.utils.DirtyFlagMap;

        specialinvoke $r3.<org.quartz.utils.DirtyFlagMap: void <init>()>();

        r2 = virtualinvoke $r3.<org.quartz.utils.DirtyFlagMap: java.util.Set keySet()>();

        interfaceinvoke r2.<java.util.Set: void clear()>();

        $z0 = virtualinvoke $r3.<org.quartz.utils.DirtyFlagMap: boolean isDirty()>();

        staticinvoke <org.quartz.utils.DirtyFlagMapTest: void assertFalse(boolean)>($z0);

        virtualinvoke $r3.<org.quartz.utils.DirtyFlagMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("a", "Y");

        virtualinvoke $r3.<org.quartz.utils.DirtyFlagMap: void clearDirtyFlag()>();

        interfaceinvoke r2.<java.util.Set: void clear()>();

        $z1 = virtualinvoke $r3.<org.quartz.utils.DirtyFlagMap: boolean isDirty()>();

        staticinvoke <org.quartz.utils.DirtyFlagMapTest: void assertTrue(boolean)>($z1);

        $i0 = virtualinvoke $r3.<org.quartz.utils.DirtyFlagMap: int size()>();

        staticinvoke <org.quartz.utils.DirtyFlagMapTest: void assertEquals(int,int)>(0, $i0);

        return;
    }

    public void testValuesClear()
    {
        org.quartz.utils.DirtyFlagMapTest r0;
        java.util.Collection r2;
        org.quartz.utils.DirtyFlagMap $r3;
        boolean $z0, $z1;
        int $i0;

        r0 := @this: org.quartz.utils.DirtyFlagMapTest;

        $r3 = new org.quartz.utils.DirtyFlagMap;

        specialinvoke $r3.<org.quartz.utils.DirtyFlagMap: void <init>()>();

        r2 = virtualinvoke $r3.<org.quartz.utils.DirtyFlagMap: java.util.Collection values()>();

        interfaceinvoke r2.<java.util.Collection: void clear()>();

        $z0 = virtualinvoke $r3.<org.quartz.utils.DirtyFlagMap: boolean isDirty()>();

        staticinvoke <org.quartz.utils.DirtyFlagMapTest: void assertFalse(boolean)>($z0);

        virtualinvoke $r3.<org.quartz.utils.DirtyFlagMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("a", "Y");

        virtualinvoke $r3.<org.quartz.utils.DirtyFlagMap: void clearDirtyFlag()>();

        interfaceinvoke r2.<java.util.Collection: void clear()>();

        $z1 = virtualinvoke $r3.<org.quartz.utils.DirtyFlagMap: boolean isDirty()>();

        staticinvoke <org.quartz.utils.DirtyFlagMapTest: void assertTrue(boolean)>($z1);

        $i0 = virtualinvoke $r3.<org.quartz.utils.DirtyFlagMap: int size()>();

        staticinvoke <org.quartz.utils.DirtyFlagMapTest: void assertEquals(int,int)>(0, $i0);

        return;
    }
}
