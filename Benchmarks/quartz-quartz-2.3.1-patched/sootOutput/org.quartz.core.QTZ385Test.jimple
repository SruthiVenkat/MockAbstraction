public class org.quartz.core.QTZ385Test extends java.lang.Object
{
    private static final java.lang.reflect.Method TRIGGERS_FIRED;

    public void <init>()
    {
        org.quartz.core.QTZ385Test r0;

        r0 := @this: org.quartz.core.QTZ385Test;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testShutdownOrdering() throws org.quartz.SchedulerException, java.sql.SQLException, java.lang.InterruptedException, java.util.concurrent.BrokenBarrierException
    {
        org.quartz.core.QTZ385Test r0;
        org.quartz.spi.JobStore r3;
        org.quartz.impl.DirectSchedulerFactory r4;
        org.quartz.Scheduler r5, r6;
        java.util.concurrent.CyclicBarrier $r9;
        org.quartz.impl.jdbcjobstore.JobStoreTX $r10;
        java.lang.Class $r11;
        java.lang.ClassLoader $r12;
        java.lang.Class[] $r13;
        org.quartz.core.QTZ385Test$1 $r14;
        java.lang.Object $r15;
        org.quartz.simpl.SimpleThreadPool $r16, $r30;
        org.quartz.JobBuilder $r17, $r18, $r19;
        org.quartz.JobDetail $r20;
        org.quartz.TriggerBuilder $r21, $r22, $r25;
        org.quartz.SimpleScheduleBuilder $r23, $r24;
        org.quartz.Trigger $r26;
        java.util.concurrent.TimeUnit $r28;
        java.util.concurrent.atomic.AtomicBoolean $r29;
        org.quartz.ListenerManager $r31;
        org.quartz.core.QTZ385Test$2 $r32;
        boolean $z0;
        java.lang.Throwable $r33, $r34, $r36;
        java.lang.Exception $r35;

        r0 := @this: org.quartz.core.QTZ385Test;

        staticinvoke <org.quartz.impl.jdbcjobstore.JdbcQuartzTestUtilities: void createDatabase(java.lang.String)>("testShutdownOrdering");

     label01:
        $r9 = new java.util.concurrent.CyclicBarrier;

        specialinvoke $r9.<java.util.concurrent.CyclicBarrier: void <init>(int)>(2);

        $r10 = new org.quartz.impl.jdbcjobstore.JobStoreTX;

        specialinvoke $r10.<org.quartz.impl.jdbcjobstore.JobStoreTX: void <init>()>();

        virtualinvoke $r10.<org.quartz.impl.jdbcjobstore.JobStoreTX: void setDataSource(java.lang.String)>("testShutdownOrdering");

        virtualinvoke $r10.<org.quartz.impl.jdbcjobstore.JobStoreTX: void setInstanceId(java.lang.String)>("SINGLE_NODE_TEST");

        virtualinvoke $r10.<org.quartz.impl.jdbcjobstore.JobStoreTX: void setInstanceName(java.lang.String)>("testShutdownOrdering");

        $r11 = class "Lorg/quartz/spi/JobStore;";

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r13 = newarray (java.lang.Class)[1];

        $r13[0] = class "Lorg/quartz/spi/JobStore;";

        $r14 = new org.quartz.core.QTZ385Test$1;

        specialinvoke $r14.<org.quartz.core.QTZ385Test$1: void <init>(org.quartz.core.QTZ385Test,org.quartz.impl.jdbcjobstore.JobStoreTX,java.util.concurrent.CyclicBarrier)>(r0, $r10, $r9);

        $r15 = staticinvoke <java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>($r12, $r13, $r14);

        r3 = (org.quartz.spi.JobStore) $r15;

        r4 = staticinvoke <org.quartz.impl.DirectSchedulerFactory: org.quartz.impl.DirectSchedulerFactory getInstance()>();

        $r16 = new org.quartz.simpl.SimpleThreadPool;

        specialinvoke $r16.<org.quartz.simpl.SimpleThreadPool: void <init>(int,int)>(1, 5);

        virtualinvoke r4.<org.quartz.impl.DirectSchedulerFactory: void createScheduler(org.quartz.spi.ThreadPool,org.quartz.spi.JobStore)>($r16, r3);

        r5 = virtualinvoke r4.<org.quartz.impl.DirectSchedulerFactory: org.quartz.Scheduler getScheduler()>();

     label02:
        $r17 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob(java.lang.Class)>(class "Lorg/quartz/integrations/tests/HelloJob;");

        $r18 = virtualinvoke $r17.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String)>("test");

        $r19 = virtualinvoke $r18.<org.quartz.JobBuilder: org.quartz.JobBuilder requestRecovery()>();

        $r20 = virtualinvoke $r19.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        $r21 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r22 = virtualinvoke $r21.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String)>("test");

        $r23 = staticinvoke <org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder simpleSchedule()>();

        $r24 = virtualinvoke $r23.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder withIntervalInMilliseconds(long)>(1L);

        $r25 = virtualinvoke $r22.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>($r24);

        $r26 = virtualinvoke $r25.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        interfaceinvoke r5.<org.quartz.Scheduler: java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)>($r20, $r26);

        interfaceinvoke r5.<org.quartz.Scheduler: void start()>();

        virtualinvoke $r9.<java.util.concurrent.CyclicBarrier: int await()>();

     label03:
        interfaceinvoke r5.<org.quartz.Scheduler: void shutdown(boolean)>(1);

        goto label06;

     label04:
        $r33 := @caughtexception;

     label05:
        interfaceinvoke r5.<org.quartz.Scheduler: void shutdown(boolean)>(1);

        throw $r33;

     label06:
        $r28 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        virtualinvoke $r9.<java.util.concurrent.CyclicBarrier: int await(long,java.util.concurrent.TimeUnit)>(1L, $r28);

     label07:
        goto label09;

     label08:
        $r35 := @caughtexception;

     label09:
        $r29 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r29.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        $r30 = new org.quartz.simpl.SimpleThreadPool;

        specialinvoke $r30.<org.quartz.simpl.SimpleThreadPool: void <init>(int,int)>(1, 5);

        virtualinvoke r4.<org.quartz.impl.DirectSchedulerFactory: void createScheduler(org.quartz.spi.ThreadPool,org.quartz.spi.JobStore)>($r30, $r10);

        r6 = virtualinvoke r4.<org.quartz.impl.DirectSchedulerFactory: org.quartz.Scheduler getScheduler()>();

     label10:
        $r31 = interfaceinvoke r6.<org.quartz.Scheduler: org.quartz.ListenerManager getListenerManager()>();

        $r32 = new org.quartz.core.QTZ385Test$2;

        specialinvoke $r32.<org.quartz.core.QTZ385Test$2: void <init>(org.quartz.core.QTZ385Test,java.util.concurrent.atomic.AtomicBoolean)>(r0, $r29);

        interfaceinvoke $r31.<org.quartz.ListenerManager: void addJobListener(org.quartz.JobListener)>($r32);

        interfaceinvoke r6.<org.quartz.Scheduler: void start()>();

        staticinvoke <java.lang.Thread: void sleep(long)>(1000L);

        $z0 = virtualinvoke $r29.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

     label11:
        interfaceinvoke r6.<org.quartz.Scheduler: void shutdown(boolean)>(1);

        goto label14;

     label12:
        $r36 := @caughtexception;

     label13:
        interfaceinvoke r6.<org.quartz.Scheduler: void shutdown(boolean)>(1);

        throw $r36;

     label14:
        staticinvoke <org.quartz.impl.jdbcjobstore.JdbcQuartzTestUtilities: void destroyDatabase(java.lang.String)>("testShutdownOrdering");

        goto label17;

     label15:
        $r34 := @caughtexception;

     label16:
        staticinvoke <org.quartz.impl.jdbcjobstore.JdbcQuartzTestUtilities: void destroyDatabase(java.lang.String)>("testShutdownOrdering");

        throw $r34;

     label17:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Exception from label06 to label07 with label08;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
        catch java.lang.Throwable from label01 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    static java.lang.reflect.Method access$000()
    {
        java.lang.reflect.Method $r0;

        $r0 = <org.quartz.core.QTZ385Test: java.lang.reflect.Method TRIGGERS_FIRED>;

        return $r0;
    }

    static void <clinit>()
    {
        java.lang.Class[] $r1;
        java.lang.Class $r2;
        java.lang.reflect.Method $r3;
        java.lang.NoSuchMethodException $r4;
        java.lang.AssertionError $r5;

     label1:
        $r2 = class "Lorg/quartz/spi/JobStore;";

        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = class "Ljava/util/List;";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("triggersFired", $r1);

        <org.quartz.core.QTZ385Test: java.lang.reflect.Method TRIGGERS_FIRED> = $r3;

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>($r4);

        throw $r5;

     label4:
        return;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
    }
}
