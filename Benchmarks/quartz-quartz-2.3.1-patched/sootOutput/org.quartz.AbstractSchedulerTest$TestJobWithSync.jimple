public class org.quartz.AbstractSchedulerTest$TestJobWithSync extends java.lang.Object implements org.quartz.Job
{

    public void <init>()
    {
        org.quartz.AbstractSchedulerTest$TestJobWithSync r0;

        r0 := @this: org.quartz.AbstractSchedulerTest$TestJobWithSync;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void execute(org.quartz.JobExecutionContext) throws org.quartz.JobExecutionException
    {
        org.quartz.AbstractSchedulerTest$TestJobWithSync r0;
        org.quartz.JobExecutionContext r1;
        java.util.concurrent.CyclicBarrier r2;
        org.quartz.Scheduler $r3, $r6;
        org.quartz.SchedulerContext $r4, $r7;
        java.lang.Object $r5, $r8;
        long $l0;
        java.lang.Long $r9;
        java.util.concurrent.TimeUnit $r10;
        java.lang.Throwable $r11;
        java.lang.AssertionError $r12;
        java.lang.StringBuilder $r13, $r14, $r16;
        java.lang.String $r15, $r17;
        java.util.List r18;

        r0 := @this: org.quartz.AbstractSchedulerTest$TestJobWithSync;

        r1 := @parameter0: org.quartz.JobExecutionContext;

     label1:
        $r3 = interfaceinvoke r1.<org.quartz.JobExecutionContext: org.quartz.Scheduler getScheduler()>();

        $r4 = interfaceinvoke $r3.<org.quartz.Scheduler: org.quartz.SchedulerContext getContext()>();

        $r5 = virtualinvoke $r4.<org.quartz.SchedulerContext: java.lang.Object get(java.lang.Object)>("DATE_STAMPS");

        r18 = (java.util.List) $r5;

        $r6 = interfaceinvoke r1.<org.quartz.JobExecutionContext: org.quartz.Scheduler getScheduler()>();

        $r7 = interfaceinvoke $r6.<org.quartz.Scheduler: org.quartz.SchedulerContext getContext()>();

        $r8 = virtualinvoke $r7.<org.quartz.SchedulerContext: java.lang.Object get(java.lang.Object)>("BARRIER");

        r2 = (java.util.concurrent.CyclicBarrier) $r8;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        interfaceinvoke r18.<java.util.List: boolean add(java.lang.Object)>($r9);

        $r10 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        virtualinvoke r2.<java.util.concurrent.CyclicBarrier: int await(long,java.util.concurrent.TimeUnit)>(125L, $r10);

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        virtualinvoke $r11.<java.lang.Throwable: void printStackTrace()>();

        $r12 = new java.lang.AssertionError;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Await on barrier was interrupted: ");

        $r15 = virtualinvoke $r11.<java.lang.Throwable: java.lang.String toString()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.AssertionError: void <init>(java.lang.Object)>($r17);

        throw $r12;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
