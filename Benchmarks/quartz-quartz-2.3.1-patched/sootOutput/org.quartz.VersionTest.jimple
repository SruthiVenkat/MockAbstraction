public class org.quartz.VersionTest extends junit.framework.TestCase
{
    private static final java.lang.String SNAPSHOT_SUFFIX;
    private static final java.lang.String PROTOTYPE_SUFFIX;

    public void <init>()
    {
        org.quartz.VersionTest r0;

        r0 := @this: org.quartz.VersionTest;

        specialinvoke r0.<junit.framework.TestCase: void <init>()>();

        return;
    }

    public void testVersionParsing()
    {
        org.quartz.VersionTest r0;
        java.lang.String r1, $r4, $r5, $r10, $r11;
        java.util.regex.Pattern r2;
        java.util.regex.Matcher r3;
        boolean $z0;
        java.lang.RuntimeException $r6;
        java.lang.StringBuilder $r7, $r8, $r9;

        r0 := @this: org.quartz.VersionTest;

        $r4 = staticinvoke <org.quartz.core.QuartzScheduler: java.lang.String getVersionMajor()>();

        specialinvoke r0.<org.quartz.VersionTest: void assertNonNegativeInteger(java.lang.String)>($r4);

        $r5 = staticinvoke <org.quartz.core.QuartzScheduler: java.lang.String getVersionMinor()>();

        specialinvoke r0.<org.quartz.VersionTest: void assertNonNegativeInteger(java.lang.String)>($r5);

        r1 = staticinvoke <org.quartz.core.QuartzScheduler: java.lang.String getVersionIteration()>();

        staticinvoke <org.quartz.VersionTest: void assertNotNull(java.lang.Object)>(r1);

        r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(\\d+)(-\\w+)?");

        r3 = virtualinvoke r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z0 = virtualinvoke r3.<java.util.regex.Matcher: boolean matches()>();

        if $z0 == 0 goto label1;

        $r11 = virtualinvoke r3.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        specialinvoke r0.<org.quartz.VersionTest: void assertNonNegativeInteger(java.lang.String)>($r11);

        goto label2;

     label1:
        $r6 = new java.lang.RuntimeException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" doesn\'t match pattern \'(\\d+)(-\\w+)?\'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label2:
        return;
    }

    private void assertNonNegativeInteger(java.lang.String)
    {
        org.quartz.VersionTest r0;
        java.lang.String r1;
        java.lang.NumberFormatException $r3;
        boolean z0, $z1;
        int i0;

        r0 := @this: org.quartz.VersionTest;

        r1 := @parameter0: java.lang.String;

        staticinvoke <org.quartz.VersionTest: void assertNotNull(java.lang.Object)>(r1);

        z0 = 0;

        i0 = -1;

     label1:
        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r1);

        z0 = 1;

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        staticinvoke <org.quartz.VersionTest: void assertTrue(boolean)>(z0);

        if i0 < 0 goto label5;

        $z1 = 1;

        goto label6;

     label5:
        $z1 = 0;

     label6:
        staticinvoke <org.quartz.VersionTest: void assertTrue(boolean)>($z1);

        return;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <org.quartz.VersionTest: java.lang.String PROTOTYPE_SUFFIX> = "-PROTO";

        <org.quartz.VersionTest: java.lang.String SNAPSHOT_SUFFIX> = "-SNAPSHOT";

        return;
    }
}
