public class org.quartz.impl.triggers.SimpleTriggerImpl extends org.quartz.impl.triggers.AbstractTrigger implements org.quartz.SimpleTrigger, org.quartz.impl.triggers.CoreTrigger
{
    private static final long serialVersionUID;
    private static final int YEAR_TO_GIVEUP_SCHEDULING_AT;
    private java.util.Date startTime;
    private java.util.Date endTime;
    private java.util.Date nextFireTime;
    private java.util.Date previousFireTime;
    private int repeatCount;
    private long repeatInterval;
    private int timesTriggered;
    private boolean complete;

    public void <init>()
    {
        org.quartz.impl.triggers.SimpleTriggerImpl r0;

        r0 := @this: org.quartz.impl.triggers.SimpleTriggerImpl;

        specialinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: void <init>()>();

        r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date startTime> = null;

        r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date endTime> = null;

        r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date nextFireTime> = null;

        r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date previousFireTime> = null;

        r0.<org.quartz.impl.triggers.SimpleTriggerImpl: int repeatCount> = 0;

        r0.<org.quartz.impl.triggers.SimpleTriggerImpl: long repeatInterval> = 0L;

        r0.<org.quartz.impl.triggers.SimpleTriggerImpl: int timesTriggered> = 0;

        r0.<org.quartz.impl.triggers.SimpleTriggerImpl: boolean complete> = 0;

        return;
    }

    public void <init>(java.lang.String)
    {
        org.quartz.impl.triggers.SimpleTriggerImpl r0;
        java.lang.String r1, $r2;

        r0 := @this: org.quartz.impl.triggers.SimpleTriggerImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = (java.lang.String) null;

        specialinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: void <init>(java.lang.String,java.lang.String)>(r1, $r2);

        return;
    }

    public void <init>(java.lang.String, java.lang.String)
    {
        org.quartz.impl.triggers.SimpleTriggerImpl r0;
        java.lang.String r1, r2;
        java.util.Date $r3;

        r0 := @this: org.quartz.impl.triggers.SimpleTriggerImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = new java.util.Date;

        specialinvoke $r3.<java.util.Date: void <init>()>();

        specialinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: void <init>(java.lang.String,java.lang.String,java.util.Date,java.util.Date,int,long)>(r1, r2, $r3, null, 0, 0L);

        return;
    }

    public void <init>(java.lang.String, int, long)
    {
        org.quartz.impl.triggers.SimpleTriggerImpl r0;
        java.lang.String r1;
        int i0;
        long l1;

        r0 := @this: org.quartz.impl.triggers.SimpleTriggerImpl;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        specialinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: void <init>(java.lang.String,java.lang.String,int,long)>(r1, null, i0, l1);

        return;
    }

    public void <init>(java.lang.String, java.lang.String, int, long)
    {
        org.quartz.impl.triggers.SimpleTriggerImpl r0;
        java.lang.String r1, r2;
        int i0;
        long l1;
        java.util.Date $r3;

        r0 := @this: org.quartz.impl.triggers.SimpleTriggerImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        l1 := @parameter3: long;

        $r3 = new java.util.Date;

        specialinvoke $r3.<java.util.Date: void <init>()>();

        specialinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: void <init>(java.lang.String,java.lang.String,java.util.Date,java.util.Date,int,long)>(r1, r2, $r3, null, i0, l1);

        return;
    }

    public void <init>(java.lang.String, java.util.Date)
    {
        org.quartz.impl.triggers.SimpleTriggerImpl r0;
        java.lang.String r1;
        java.util.Date r2;

        r0 := @this: org.quartz.impl.triggers.SimpleTriggerImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Date;

        specialinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: void <init>(java.lang.String,java.lang.String,java.util.Date)>(r1, null, r2);

        return;
    }

    public void <init>(java.lang.String, java.lang.String, java.util.Date)
    {
        org.quartz.impl.triggers.SimpleTriggerImpl r0;
        java.lang.String r1, r2;
        java.util.Date r3;

        r0 := @this: org.quartz.impl.triggers.SimpleTriggerImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.Date;

        specialinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: void <init>(java.lang.String,java.lang.String,java.util.Date,java.util.Date,int,long)>(r1, r2, r3, null, 0, 0L);

        return;
    }

    public void <init>(java.lang.String, java.util.Date, java.util.Date, int, long)
    {
        org.quartz.impl.triggers.SimpleTriggerImpl r0;
        java.lang.String r1;
        java.util.Date r2, r3;
        int i0;
        long l1;

        r0 := @this: org.quartz.impl.triggers.SimpleTriggerImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Date;

        r3 := @parameter2: java.util.Date;

        i0 := @parameter3: int;

        l1 := @parameter4: long;

        specialinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: void <init>(java.lang.String,java.lang.String,java.util.Date,java.util.Date,int,long)>(r1, null, r2, r3, i0, l1);

        return;
    }

    public void <init>(java.lang.String, java.lang.String, java.util.Date, java.util.Date, int, long)
    {
        org.quartz.impl.triggers.SimpleTriggerImpl r0;
        java.lang.String r1, r2;
        java.util.Date r3, r4;
        int i0;
        long l1;

        r0 := @this: org.quartz.impl.triggers.SimpleTriggerImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.Date;

        r4 := @parameter3: java.util.Date;

        i0 := @parameter4: int;

        l1 := @parameter5: long;

        specialinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: void <init>(java.lang.String,java.lang.String)>(r1, r2);

        r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date startTime> = null;

        r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date endTime> = null;

        r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date nextFireTime> = null;

        r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date previousFireTime> = null;

        r0.<org.quartz.impl.triggers.SimpleTriggerImpl: int repeatCount> = 0;

        r0.<org.quartz.impl.triggers.SimpleTriggerImpl: long repeatInterval> = 0L;

        r0.<org.quartz.impl.triggers.SimpleTriggerImpl: int timesTriggered> = 0;

        r0.<org.quartz.impl.triggers.SimpleTriggerImpl: boolean complete> = 0;

        virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: void setStartTime(java.util.Date)>(r3);

        virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: void setEndTime(java.util.Date)>(r4);

        virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: void setRepeatCount(int)>(i0);

        virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: void setRepeatInterval(long)>(l1);

        return;
    }

    public void <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.util.Date, java.util.Date, int, long)
    {
        org.quartz.impl.triggers.SimpleTriggerImpl r0;
        java.lang.String r1, r2, r3, r4;
        java.util.Date r5, r6;
        int i0;
        long l1;

        r0 := @this: org.quartz.impl.triggers.SimpleTriggerImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.util.Date;

        r6 := @parameter5: java.util.Date;

        i0 := @parameter6: int;

        l1 := @parameter7: long;

        specialinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3, r4);

        r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date startTime> = null;

        r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date endTime> = null;

        r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date nextFireTime> = null;

        r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date previousFireTime> = null;

        r0.<org.quartz.impl.triggers.SimpleTriggerImpl: int repeatCount> = 0;

        r0.<org.quartz.impl.triggers.SimpleTriggerImpl: long repeatInterval> = 0L;

        r0.<org.quartz.impl.triggers.SimpleTriggerImpl: int timesTriggered> = 0;

        r0.<org.quartz.impl.triggers.SimpleTriggerImpl: boolean complete> = 0;

        virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: void setStartTime(java.util.Date)>(r5);

        virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: void setEndTime(java.util.Date)>(r6);

        virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: void setRepeatCount(int)>(i0);

        virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: void setRepeatInterval(long)>(l1);

        return;
    }

    public java.util.Date getStartTime()
    {
        org.quartz.impl.triggers.SimpleTriggerImpl r0;
        java.util.Date $r1;

        r0 := @this: org.quartz.impl.triggers.SimpleTriggerImpl;

        $r1 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date startTime>;

        return $r1;
    }

    public void setStartTime(java.util.Date)
    {
        org.quartz.impl.triggers.SimpleTriggerImpl r0;
        java.util.Date r1, r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3, $r4;

        r0 := @this: org.quartz.impl.triggers.SimpleTriggerImpl;

        r1 := @parameter0: java.util.Date;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Start time cannot be null");

        throw $r4;

     label1:
        r2 = virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date getEndTime()>();

        if r2 == null goto label2;

        if r1 == null goto label2;

        $z0 = virtualinvoke r2.<java.util.Date: boolean before(java.util.Date)>(r1);

        if $z0 == 0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("End time cannot be before start time");

        throw $r3;

     label2:
        r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date startTime> = r1;

        return;
    }

    public java.util.Date getEndTime()
    {
        org.quartz.impl.triggers.SimpleTriggerImpl r0;
        java.util.Date $r1;

        r0 := @this: org.quartz.impl.triggers.SimpleTriggerImpl;

        $r1 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date endTime>;

        return $r1;
    }

    public void setEndTime(java.util.Date)
    {
        org.quartz.impl.triggers.SimpleTriggerImpl r0;
        java.util.Date r1, r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.quartz.impl.triggers.SimpleTriggerImpl;

        r1 := @parameter0: java.util.Date;

        r2 = virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date getStartTime()>();

        if r2 == null goto label1;

        if r1 == null goto label1;

        $z0 = virtualinvoke r2.<java.util.Date: boolean after(java.util.Date)>(r1);

        if $z0 == 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("End time cannot be before start time");

        throw $r3;

     label1:
        r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date endTime> = r1;

        return;
    }

    public int getRepeatCount()
    {
        org.quartz.impl.triggers.SimpleTriggerImpl r0;
        int $i0;

        r0 := @this: org.quartz.impl.triggers.SimpleTriggerImpl;

        $i0 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: int repeatCount>;

        return $i0;
    }

    public void setRepeatCount(int)
    {
        org.quartz.impl.triggers.SimpleTriggerImpl r0;
        int i0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: org.quartz.impl.triggers.SimpleTriggerImpl;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        if i0 == -1 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Repeat count must be >= 0, use the constant REPEAT_INDEFINITELY for infinite.");

        throw $r1;

     label1:
        r0.<org.quartz.impl.triggers.SimpleTriggerImpl: int repeatCount> = i0;

        return;
    }

    public long getRepeatInterval()
    {
        org.quartz.impl.triggers.SimpleTriggerImpl r0;
        long $l0;

        r0 := @this: org.quartz.impl.triggers.SimpleTriggerImpl;

        $l0 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: long repeatInterval>;

        return $l0;
    }

    public void setRepeatInterval(long)
    {
        org.quartz.impl.triggers.SimpleTriggerImpl r0;
        long l0;
        byte $b1;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: org.quartz.impl.triggers.SimpleTriggerImpl;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        if $b1 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Repeat interval must be >= 0");

        throw $r1;

     label1:
        r0.<org.quartz.impl.triggers.SimpleTriggerImpl: long repeatInterval> = l0;

        return;
    }

    public int getTimesTriggered()
    {
        org.quartz.impl.triggers.SimpleTriggerImpl r0;
        int $i0;

        r0 := @this: org.quartz.impl.triggers.SimpleTriggerImpl;

        $i0 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: int timesTriggered>;

        return $i0;
    }

    public void setTimesTriggered(int)
    {
        org.quartz.impl.triggers.SimpleTriggerImpl r0;
        int i0;

        r0 := @this: org.quartz.impl.triggers.SimpleTriggerImpl;

        i0 := @parameter0: int;

        r0.<org.quartz.impl.triggers.SimpleTriggerImpl: int timesTriggered> = i0;

        return;
    }

    protected boolean validateMisfireInstruction(int)
    {
        org.quartz.impl.triggers.SimpleTriggerImpl r0;
        int i0;

        r0 := @this: org.quartz.impl.triggers.SimpleTriggerImpl;

        i0 := @parameter0: int;

        if i0 >= -1 goto label1;

        return 0;

     label1:
        if i0 <= 5 goto label2;

        return 0;

     label2:
        return 1;
    }

    public void updateAfterMisfire(org.quartz.Calendar)
    {
        org.quartz.impl.triggers.SimpleTriggerImpl r0;
        org.quartz.Calendar r1;
        java.util.Date $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, r11, r13, $r16, $r18;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i13, $i14, $i16, $i17, $i18, $i19, $i20, i21, i22, i23, i24;
        boolean $z0, $z1, $z2, $z3;
        long $l12, $l15;
        java.util.Calendar r12, r14;

        r0 := @this: org.quartz.impl.triggers.SimpleTriggerImpl;

        r1 := @parameter0: org.quartz.Calendar;

        i21 = virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: int getMisfireInstruction()>();

        if i21 != -1 goto label01;

        return;

     label01:
        if i21 != 0 goto label04;

        $i19 = virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: int getRepeatCount()>();

        if $i19 != 0 goto label02;

        i21 = 1;

        goto label05;

     label02:
        $i20 = virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: int getRepeatCount()>();

        if $i20 != -1 goto label03;

        i21 = 4;

        goto label05;

     label03:
        i21 = 2;

        goto label05;

     label04:
        if i21 != 1 goto label05;

        $i18 = virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: int getRepeatCount()>();

        if $i18 == 0 goto label05;

        i21 = 3;

     label05:
        if i21 != 1 goto label06;

        $r10 = new java.util.Date;

        specialinvoke $r10.<java.util.Date: void <init>()>();

        virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: void setNextFireTime(java.util.Date)>($r10);

        goto label25;

     label06:
        if i21 != 5 goto label11;

        $r9 = new java.util.Date;

        specialinvoke $r9.<java.util.Date: void <init>()>();

        r11 = virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>($r9);

     label07:
        if r11 == null goto label10;

        if r1 == null goto label10;

        $l15 = virtualinvoke r11.<java.util.Date: long getTime()>();

        $z3 = interfaceinvoke r1.<org.quartz.Calendar: boolean isTimeIncluded(long)>($l15);

        if $z3 != 0 goto label10;

        r11 = virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>(r11);

        if r11 != null goto label08;

        goto label10;

     label08:
        r12 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r12.<java.util.Calendar: void setTime(java.util.Date)>(r11);

        $i16 = virtualinvoke r12.<java.util.Calendar: int get(int)>(1);

        $i17 = <org.quartz.impl.triggers.SimpleTriggerImpl: int YEAR_TO_GIVEUP_SCHEDULING_AT>;

        if $i16 <= $i17 goto label09;

        r11 = null;

     label09:
        goto label07;

     label10:
        virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: void setNextFireTime(java.util.Date)>(r11);

        goto label25;

     label11:
        if i21 != 4 goto label17;

        $r7 = new java.util.Date;

        specialinvoke $r7.<java.util.Date: void <init>()>();

        r13 = virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>($r7);

     label12:
        if r13 == null goto label15;

        if r1 == null goto label15;

        $l12 = virtualinvoke r13.<java.util.Date: long getTime()>();

        $z2 = interfaceinvoke r1.<org.quartz.Calendar: boolean isTimeIncluded(long)>($l12);

        if $z2 != 0 goto label15;

        r13 = virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>(r13);

        if r13 != null goto label13;

        goto label15;

     label13:
        r14 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r14.<java.util.Calendar: void setTime(java.util.Date)>(r13);

        $i13 = virtualinvoke r14.<java.util.Calendar: int get(int)>(1);

        $i14 = <org.quartz.impl.triggers.SimpleTriggerImpl: int YEAR_TO_GIVEUP_SCHEDULING_AT>;

        if $i13 <= $i14 goto label14;

        r13 = null;

     label14:
        goto label12;

     label15:
        if r13 == null goto label16;

        $r8 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date nextFireTime>;

        i22 = virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: int computeNumTimesFiredBetween(java.util.Date,java.util.Date)>($r8, r13);

        $i10 = virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: int getTimesTriggered()>();

        $i11 = $i10 + i22;

        virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: void setTimesTriggered(int)>($i11);

     label16:
        virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: void setNextFireTime(java.util.Date)>(r13);

        goto label25;

     label17:
        if i21 != 2 goto label21;

        $r5 = new java.util.Date;

        specialinvoke $r5.<java.util.Date: void <init>()>();

        $i5 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: int repeatCount>;

        if $i5 == 0 goto label18;

        $i6 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: int repeatCount>;

        if $i6 == -1 goto label18;

        $i7 = virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: int getRepeatCount()>();

        $i8 = virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: int getTimesTriggered()>();

        $i9 = $i7 - $i8;

        virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: void setRepeatCount(int)>($i9);

        virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: void setTimesTriggered(int)>(0);

     label18:
        $r16 = virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date getEndTime()>();

        if $r16 == null goto label19;

        $r6 = virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date getEndTime()>();

        $z1 = virtualinvoke $r6.<java.util.Date: boolean before(java.util.Date)>($r5);

        if $z1 == 0 goto label19;

        virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: void setNextFireTime(java.util.Date)>(null);

        goto label20;

     label19:
        virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: void setStartTime(java.util.Date)>($r5);

        virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: void setNextFireTime(java.util.Date)>($r5);

     label20:
        goto label25;

     label21:
        if i21 != 3 goto label25;

        $r2 = new java.util.Date;

        specialinvoke $r2.<java.util.Date: void <init>()>();

        $r3 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date nextFireTime>;

        i23 = virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: int computeNumTimesFiredBetween(java.util.Date,java.util.Date)>($r3, $r2);

        $i0 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: int repeatCount>;

        if $i0 == 0 goto label23;

        $i1 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: int repeatCount>;

        if $i1 == -1 goto label23;

        $i2 = virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: int getRepeatCount()>();

        $i3 = virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: int getTimesTriggered()>();

        $i4 = $i3 + i23;

        i24 = $i2 - $i4;

        if i24 > 0 goto label22;

        i24 = 0;

     label22:
        virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: void setRepeatCount(int)>(i24);

        virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: void setTimesTriggered(int)>(0);

     label23:
        $r18 = virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date getEndTime()>();

        if $r18 == null goto label24;

        $r4 = virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date getEndTime()>();

        $z0 = virtualinvoke $r4.<java.util.Date: boolean before(java.util.Date)>($r2);

        if $z0 == 0 goto label24;

        virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: void setNextFireTime(java.util.Date)>(null);

        goto label25;

     label24:
        virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: void setStartTime(java.util.Date)>($r2);

        virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: void setNextFireTime(java.util.Date)>($r2);

     label25:
        return;
    }

    public void triggered(org.quartz.Calendar)
    {
        org.quartz.impl.triggers.SimpleTriggerImpl r0;
        org.quartz.Calendar r1;
        java.util.Calendar r2;
        int $i0, $i1, $i3, $i4;
        java.util.Date $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        long $l2;
        boolean $z0;

        r0 := @this: org.quartz.impl.triggers.SimpleTriggerImpl;

        r1 := @parameter0: org.quartz.Calendar;

        $i0 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: int timesTriggered>;

        $i1 = $i0 + 1;

        r0.<org.quartz.impl.triggers.SimpleTriggerImpl: int timesTriggered> = $i1;

        $r3 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date nextFireTime>;

        r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date previousFireTime> = $r3;

        $r4 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date nextFireTime>;

        $r5 = virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>($r4);

        r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date nextFireTime> = $r5;

     label1:
        $r6 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date nextFireTime>;

        if $r6 == null goto label4;

        if r1 == null goto label4;

        $r7 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date nextFireTime>;

        $l2 = virtualinvoke $r7.<java.util.Date: long getTime()>();

        $z0 = interfaceinvoke r1.<org.quartz.Calendar: boolean isTimeIncluded(long)>($l2);

        if $z0 != 0 goto label4;

        $r8 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date nextFireTime>;

        $r9 = virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>($r8);

        r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date nextFireTime> = $r9;

        $r10 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date nextFireTime>;

        if $r10 != null goto label2;

        goto label4;

     label2:
        r2 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $r11 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date nextFireTime>;

        virtualinvoke r2.<java.util.Calendar: void setTime(java.util.Date)>($r11);

        $i3 = virtualinvoke r2.<java.util.Calendar: int get(int)>(1);

        $i4 = <org.quartz.impl.triggers.SimpleTriggerImpl: int YEAR_TO_GIVEUP_SCHEDULING_AT>;

        if $i3 <= $i4 goto label3;

        r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date nextFireTime> = null;

     label3:
        goto label1;

     label4:
        return;
    }

    public void updateWithNewCalendar(org.quartz.Calendar, long)
    {
        org.quartz.impl.triggers.SimpleTriggerImpl r0;
        org.quartz.Calendar r1;
        long l0, l1, $l2, $l5, $l6;
        java.util.Calendar r3;
        java.util.Date $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18;
        boolean $z0, $z1;
        int $i3, $i4;
        byte $b7;

        r0 := @this: org.quartz.impl.triggers.SimpleTriggerImpl;

        r1 := @parameter0: org.quartz.Calendar;

        l0 := @parameter1: long;

        $r4 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date previousFireTime>;

        $r5 = virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>($r4);

        r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date nextFireTime> = $r5;

        $r6 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date nextFireTime>;

        if $r6 == null goto label1;

        if r1 != null goto label2;

     label1:
        return;

     label2:
        $r7 = new java.util.Date;

        specialinvoke $r7.<java.util.Date: void <init>()>();

     label3:
        $r8 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date nextFireTime>;

        if $r8 == null goto label7;

        $r9 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date nextFireTime>;

        $l2 = virtualinvoke $r9.<java.util.Date: long getTime()>();

        $z0 = interfaceinvoke r1.<org.quartz.Calendar: boolean isTimeIncluded(long)>($l2);

        if $z0 != 0 goto label7;

        $r10 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date nextFireTime>;

        $r11 = virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>($r10);

        r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date nextFireTime> = $r11;

        $r12 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date nextFireTime>;

        if $r12 != null goto label4;

        goto label7;

     label4:
        r3 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $r13 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date nextFireTime>;

        virtualinvoke r3.<java.util.Calendar: void setTime(java.util.Date)>($r13);

        $i3 = virtualinvoke r3.<java.util.Calendar: int get(int)>(1);

        $i4 = <org.quartz.impl.triggers.SimpleTriggerImpl: int YEAR_TO_GIVEUP_SCHEDULING_AT>;

        if $i3 <= $i4 goto label5;

        r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date nextFireTime> = null;

     label5:
        $r14 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date nextFireTime>;

        if $r14 == null goto label6;

        $r15 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date nextFireTime>;

        $z1 = virtualinvoke $r15.<java.util.Date: boolean before(java.util.Date)>($r7);

        if $z1 == 0 goto label6;

        $l5 = virtualinvoke $r7.<java.util.Date: long getTime()>();

        $r16 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date nextFireTime>;

        $l6 = virtualinvoke $r16.<java.util.Date: long getTime()>();

        l1 = $l5 - $l6;

        $b7 = l1 cmp l0;

        if $b7 < 0 goto label6;

        $r17 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date nextFireTime>;

        $r18 = virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>($r17);

        r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date nextFireTime> = $r18;

     label6:
        goto label3;

     label7:
        return;
    }

    public java.util.Date computeFirstFireTime(org.quartz.Calendar)
    {
        org.quartz.impl.triggers.SimpleTriggerImpl r0;
        org.quartz.Calendar r1;
        java.util.Calendar r2;
        java.util.Date $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        long $l0;
        boolean $z0;
        int $i1, $i2;

        r0 := @this: org.quartz.impl.triggers.SimpleTriggerImpl;

        r1 := @parameter0: org.quartz.Calendar;

        $r3 = virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date getStartTime()>();

        r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date nextFireTime> = $r3;

     label1:
        $r4 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date nextFireTime>;

        if $r4 == null goto label4;

        if r1 == null goto label4;

        $r5 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date nextFireTime>;

        $l0 = virtualinvoke $r5.<java.util.Date: long getTime()>();

        $z0 = interfaceinvoke r1.<org.quartz.Calendar: boolean isTimeIncluded(long)>($l0);

        if $z0 != 0 goto label4;

        $r6 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date nextFireTime>;

        $r7 = virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>($r6);

        r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date nextFireTime> = $r7;

        $r8 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date nextFireTime>;

        if $r8 != null goto label2;

        goto label4;

     label2:
        r2 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $r9 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date nextFireTime>;

        virtualinvoke r2.<java.util.Calendar: void setTime(java.util.Date)>($r9);

        $i1 = virtualinvoke r2.<java.util.Calendar: int get(int)>(1);

        $i2 = <org.quartz.impl.triggers.SimpleTriggerImpl: int YEAR_TO_GIVEUP_SCHEDULING_AT>;

        if $i1 <= $i2 goto label3;

        return null;

     label3:
        goto label1;

     label4:
        $r10 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date nextFireTime>;

        return $r10;
    }

    public java.util.Date getNextFireTime()
    {
        org.quartz.impl.triggers.SimpleTriggerImpl r0;
        java.util.Date $r1;

        r0 := @this: org.quartz.impl.triggers.SimpleTriggerImpl;

        $r1 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date nextFireTime>;

        return $r1;
    }

    public java.util.Date getPreviousFireTime()
    {
        org.quartz.impl.triggers.SimpleTriggerImpl r0;
        java.util.Date $r1;

        r0 := @this: org.quartz.impl.triggers.SimpleTriggerImpl;

        $r1 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date previousFireTime>;

        return $r1;
    }

    public void setNextFireTime(java.util.Date)
    {
        org.quartz.impl.triggers.SimpleTriggerImpl r0;
        java.util.Date r1;

        r0 := @this: org.quartz.impl.triggers.SimpleTriggerImpl;

        r1 := @parameter0: java.util.Date;

        r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date nextFireTime> = r1;

        return;
    }

    public void setPreviousFireTime(java.util.Date)
    {
        org.quartz.impl.triggers.SimpleTriggerImpl r0;
        java.util.Date r1;

        r0 := @this: org.quartz.impl.triggers.SimpleTriggerImpl;

        r1 := @parameter0: java.util.Date;

        r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date previousFireTime> = r1;

        return;
    }

    public java.util.Date getFireTimeAfter(java.util.Date)
    {
        org.quartz.impl.triggers.SimpleTriggerImpl r0;
        long l0, l1, l2, l3, $l9, $l10, $l11, $l13, $l15, $l16, $l17, $l18, $l23;
        boolean $z0;
        int $i4, $i5, $i6, $i12, $i20, $i21, $i22;
        java.util.Date $r2, $r3, $r4, $r5, $r6, $r7, $r8, r9;
        byte $b7, $b8, $b14, $b19;

        r0 := @this: org.quartz.impl.triggers.SimpleTriggerImpl;

        r9 := @parameter0: java.util.Date;

        $z0 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: boolean complete>;

        if $z0 == 0 goto label01;

        return null;

     label01:
        $i5 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: int timesTriggered>;

        $i4 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: int repeatCount>;

        if $i5 <= $i4 goto label02;

        $i22 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: int repeatCount>;

        if $i22 == -1 goto label02;

        return null;

     label02:
        if r9 != null goto label03;

        $r8 = new java.util.Date;

        specialinvoke $r8.<java.util.Date: void <init>()>();

        r9 = $r8;

     label03:
        $i6 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: int repeatCount>;

        if $i6 != 0 goto label04;

        $r7 = virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date getStartTime()>();

        $i21 = virtualinvoke r9.<java.util.Date: int compareTo(java.util.Date)>($r7);

        if $i21 < 0 goto label04;

        return null;

     label04:
        $r2 = virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date getStartTime()>();

        l0 = virtualinvoke $r2.<java.util.Date: long getTime()>();

        l1 = virtualinvoke r9.<java.util.Date: long getTime()>();

        $r3 = virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date getEndTime()>();

        if $r3 != null goto label05;

        $l23 = 9223372036854775807L;

        goto label06;

     label05:
        $r4 = virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date getEndTime()>();

        $l23 = virtualinvoke $r4.<java.util.Date: long getTime()>();

     label06:
        l2 = $l23;

        $b7 = $l23 cmp l1;

        if $b7 > 0 goto label07;

        return null;

     label07:
        $b8 = l1 cmp l0;

        if $b8 >= 0 goto label08;

        $r6 = new java.util.Date;

        specialinvoke $r6.<java.util.Date: void <init>(long)>(l0);

        return $r6;

     label08:
        $l10 = l1 - l0;

        $l9 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: long repeatInterval>;

        $l11 = $l10 / $l9;

        l3 = $l11 + 1L;

        $i12 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: int repeatCount>;

        $l13 = (long) $i12;

        $b14 = l3 cmp $l13;

        if $b14 <= 0 goto label09;

        $i20 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: int repeatCount>;

        if $i20 == -1 goto label09;

        return null;

     label09:
        $r5 = new java.util.Date;

        $l15 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: long repeatInterval>;

        $l16 = l3 * $l15;

        $l17 = l0 + $l16;

        specialinvoke $r5.<java.util.Date: void <init>(long)>($l17);

        $l18 = virtualinvoke $r5.<java.util.Date: long getTime()>();

        $b19 = l2 cmp $l18;

        if $b19 > 0 goto label10;

        return null;

     label10:
        return $r5;
    }

    public java.util.Date getFireTimeBefore(java.util.Date)
    {
        org.quartz.impl.triggers.SimpleTriggerImpl r0;
        java.util.Date r1, $r2, $r3, $r4, $r5;
        int i0;
        long $l1, $l2, $l4, $l5, $l6, $l7, $l8;
        byte $b3;

        r0 := @this: org.quartz.impl.triggers.SimpleTriggerImpl;

        r1 := @parameter0: java.util.Date;

        $l1 = virtualinvoke r1.<java.util.Date: long getTime()>();

        $r2 = virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date getStartTime()>();

        $l2 = virtualinvoke $r2.<java.util.Date: long getTime()>();

        $b3 = $l1 cmp $l2;

        if $b3 >= 0 goto label1;

        return null;

     label1:
        $r3 = virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date getStartTime()>();

        i0 = virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: int computeNumTimesFiredBetween(java.util.Date,java.util.Date)>($r3, r1);

        $r4 = new java.util.Date;

        $r5 = virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date getStartTime()>();

        $l4 = virtualinvoke $r5.<java.util.Date: long getTime()>();

        $l6 = (long) i0;

        $l5 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: long repeatInterval>;

        $l7 = $l6 * $l5;

        $l8 = $l4 + $l7;

        specialinvoke $r4.<java.util.Date: void <init>(long)>($l8);

        return $r4;
    }

    public int computeNumTimesFiredBetween(java.util.Date, java.util.Date)
    {
        org.quartz.impl.triggers.SimpleTriggerImpl r0;
        java.util.Date r1, r2;
        long l0, $l1, $l3, $l4, $l5, $l6;
        byte $b2;
        int $i7;

        r0 := @this: org.quartz.impl.triggers.SimpleTriggerImpl;

        r1 := @parameter0: java.util.Date;

        r2 := @parameter1: java.util.Date;

        $l1 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: long repeatInterval>;

        $b2 = $l1 cmp 1L;

        if $b2 >= 0 goto label1;

        return 0;

     label1:
        $l3 = virtualinvoke r2.<java.util.Date: long getTime()>();

        $l4 = virtualinvoke r1.<java.util.Date: long getTime()>();

        l0 = $l3 - $l4;

        $l5 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: long repeatInterval>;

        $l6 = l0 / $l5;

        $i7 = (int) $l6;

        return $i7;
    }

    public java.util.Date getFinalFireTime()
    {
        org.quartz.impl.triggers.SimpleTriggerImpl r0;
        long l0, $l3, $l5, $l6, $l7, $l8;
        int $i1, $i2, $i4;
        java.util.Date $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        byte $b9;

        r0 := @this: org.quartz.impl.triggers.SimpleTriggerImpl;

        $i1 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: int repeatCount>;

        if $i1 != 0 goto label1;

        $r9 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date startTime>;

        return $r9;

     label1:
        $i2 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: int repeatCount>;

        if $i2 != -1 goto label4;

        $r7 = virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date getEndTime()>();

        if $r7 != null goto label2;

        $r10 = null;

        goto label3;

     label2:
        $r8 = virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date getEndTime()>();

        $r10 = virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date getFireTimeBefore(java.util.Date)>($r8);

     label3:
        return $r10;

     label4:
        $r1 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date startTime>;

        $l3 = virtualinvoke $r1.<java.util.Date: long getTime()>();

        $i4 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: int repeatCount>;

        $l6 = (long) $i4;

        $l5 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: long repeatInterval>;

        $l7 = $l6 * $l5;

        l0 = $l3 + $l7;

        $r2 = virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date getEndTime()>();

        if $r2 == null goto label5;

        $r4 = virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date getEndTime()>();

        $l8 = virtualinvoke $r4.<java.util.Date: long getTime()>();

        $b9 = l0 cmp $l8;

        if $b9 >= 0 goto label6;

     label5:
        $r3 = new java.util.Date;

        specialinvoke $r3.<java.util.Date: void <init>(long)>(l0);

        return $r3;

     label6:
        $r5 = virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date getEndTime()>();

        $r6 = virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date getFireTimeBefore(java.util.Date)>($r5);

        return $r6;
    }

    public boolean mayFireAgain()
    {
        org.quartz.impl.triggers.SimpleTriggerImpl r0;
        java.util.Date $r1;
        boolean $z0;

        r0 := @this: org.quartz.impl.triggers.SimpleTriggerImpl;

        $r1 = virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: java.util.Date getNextFireTime()>();

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void validate() throws org.quartz.SchedulerException
    {
        org.quartz.impl.triggers.SimpleTriggerImpl r0;
        int $i0;
        long $l1;
        byte $b2;
        org.quartz.SchedulerException $r1;

        r0 := @this: org.quartz.impl.triggers.SimpleTriggerImpl;

        specialinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: void validate()>();

        $i0 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: int repeatCount>;

        if $i0 == 0 goto label1;

        $l1 = r0.<org.quartz.impl.triggers.SimpleTriggerImpl: long repeatInterval>;

        $b2 = $l1 cmp 1L;

        if $b2 >= 0 goto label1;

        $r1 = new org.quartz.SchedulerException;

        specialinvoke $r1.<org.quartz.SchedulerException: void <init>(java.lang.String)>("Repeat Interval cannot be zero.");

        throw $r1;

     label1:
        return;
    }

    public boolean hasAdditionalProperties()
    {
        org.quartz.impl.triggers.SimpleTriggerImpl r0;

        r0 := @this: org.quartz.impl.triggers.SimpleTriggerImpl;

        return 0;
    }

    public org.quartz.ScheduleBuilder getScheduleBuilder()
    {
        org.quartz.impl.triggers.SimpleTriggerImpl r0;
        org.quartz.SimpleScheduleBuilder r1, $r2, $r3;
        long $l0;
        int $i1, $i2;

        r0 := @this: org.quartz.impl.triggers.SimpleTriggerImpl;

        $r2 = staticinvoke <org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder simpleSchedule()>();

        $l0 = virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: long getRepeatInterval()>();

        $r3 = virtualinvoke $r2.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder withIntervalInMilliseconds(long)>($l0);

        $i1 = virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: int getRepeatCount()>();

        r1 = virtualinvoke $r3.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder withRepeatCount(int)>($i1);

        $i2 = virtualinvoke r0.<org.quartz.impl.triggers.SimpleTriggerImpl: int getMisfireInstruction()>();

        tableswitch($i2)
        {
            case 1: goto label1;
            case 2: goto label4;
            case 3: goto label5;
            case 4: goto label3;
            case 5: goto label2;
            default: goto label6;
        };

     label1:
        virtualinvoke r1.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder withMisfireHandlingInstructionFireNow()>();

        goto label6;

     label2:
        virtualinvoke r1.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder withMisfireHandlingInstructionNextWithExistingCount()>();

        goto label6;

     label3:
        virtualinvoke r1.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder withMisfireHandlingInstructionNextWithRemainingCount()>();

        goto label6;

     label4:
        virtualinvoke r1.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder withMisfireHandlingInstructionNowWithExistingCount()>();

        goto label6;

     label5:
        virtualinvoke r1.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder withMisfireHandlingInstructionNowWithRemainingCount()>();

     label6:
        return r1;
    }

    static void <clinit>()
    {
        java.util.Calendar $r0;
        int $i0, $i1;

        <org.quartz.impl.triggers.SimpleTriggerImpl: long serialVersionUID> = -3735980074222850397L;

        $r0 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $i0 = virtualinvoke $r0.<java.util.Calendar: int get(int)>(1);

        $i1 = $i0 + 100;

        <org.quartz.impl.triggers.SimpleTriggerImpl: int YEAR_TO_GIVEUP_SCHEDULING_AT> = $i1;

        return;
    }
}
