public class org.quartz.integrations.tests.QTZ179_TriggerLostAfterDbRestart_Test extends java.lang.Object
{
    private static final long DURATION_OF_FIRST_SCHEDULING;
    private static final long DURATION_OF_NETWORK_FAILURE;
    private static final long DURATION_OF_SECOND_SCHEDULING;
    private static final org.slf4j.Logger LOG;
    private static final int INTERVAL_IN_SECONDS;
    private static org.apache.derby.drda.NetworkServerControl derbyServer;
    private static org.quartz.Scheduler sched;
    private static org.quartz.Trigger trigger1_1;
    private static org.quartz.Trigger trigger2_1;
    private static org.quartz.Trigger trigger1_2;
    private static org.quartz.Trigger trigger2_2;

    public void <init>()
    {
        org.quartz.integrations.tests.QTZ179_TriggerLostAfterDbRestart_Test r0;

        r0 := @this: org.quartz.integrations.tests.QTZ179_TriggerLostAfterDbRestart_Test;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void initialize() throws java.lang.Exception
    {
        org.quartz.JobDetail r1, r2, r3, r4, r7;
        org.quartz.Trigger r8, $r57, $r65, $r73, $r81, $r83, $r84, $r85, $r86;
        org.slf4j.Logger $r9, $r14, $r15, $r16, $r39, $r40, $r41, $r89, $r90, $r93;
        org.apache.derby.drda.NetworkServerControl $r10, $r13, $r91, $r92, $r102;
        java.io.PrintWriter $r11;
        java.io.PrintStream $r12;
        java.util.Properties $r17;
        java.lang.String $r32;
        org.quartz.impl.StdSchedulerFactory $r37;
        org.quartz.Scheduler $r38, $r88, $r94, $r96, $r98;
        org.quartz.JobBuilder $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49;
        org.quartz.TriggerBuilder $r50, $r51, $r52, $r56, $r58, $r59, $r60, $r64, $r66, $r67, $r68, $r72, $r74, $r75, $r76, $r80;
        org.quartz.SimpleScheduleBuilder $r53, $r54, $r55, $r61, $r62, $r63, $r69, $r70, $r71, $r77, $r78, $r79;
        org.quartz.Trigger[] $r82;
        org.quartz.JobDetail[] $r87;
        int $i0, i1, i2, $i3;
        org.quartz.JobKey $r95;
        boolean $z0;
        org.quartz.TriggerKey $r99;
        java.lang.Exception $r101, $r105, $r106, $r107;
        java.sql.SQLException $r103, $r104;

        $r9 = <org.quartz.integrations.tests.QTZ179_TriggerLostAfterDbRestart_Test: org.slf4j.Logger LOG>;

        interfaceinvoke $r9.<org.slf4j.Logger: void info(java.lang.String)>("------- Starting Database ---------------------");

        $r10 = new org.apache.derby.drda.NetworkServerControl;

        specialinvoke $r10.<org.apache.derby.drda.NetworkServerControl: void <init>()>();

        <org.quartz.integrations.tests.QTZ179_TriggerLostAfterDbRestart_Test: org.apache.derby.drda.NetworkServerControl derbyServer> = $r10;

        $r13 = <org.quartz.integrations.tests.QTZ179_TriggerLostAfterDbRestart_Test: org.apache.derby.drda.NetworkServerControl derbyServer>;

        $r11 = new java.io.PrintWriter;

        $r12 = <java.lang.System: java.io.PrintStream out>;

        specialinvoke $r11.<java.io.PrintWriter: void <init>(java.io.OutputStream)>($r12);

        virtualinvoke $r13.<org.apache.derby.drda.NetworkServerControl: void start(java.io.PrintWriter)>($r11);

        i1 = 0;

     label01:
        if i1 >= 5 goto label05;

     label02:
        staticinvoke <java.lang.Thread: void sleep(long)>(500L);

        $r102 = <org.quartz.integrations.tests.QTZ179_TriggerLostAfterDbRestart_Test: org.apache.derby.drda.NetworkServerControl derbyServer>;

        virtualinvoke $r102.<org.apache.derby.drda.NetworkServerControl: void ping()>();

     label03:
        goto label05;

     label04:
        $r106 := @caughtexception;

        i1 = i1 + 1;

        goto label01;

     label05:
        if i1 != 5 goto label06;

        $r101 = new java.lang.Exception;

        specialinvoke $r101.<java.lang.Exception: void <init>(java.lang.String)>("Failed to start Derby!");

        throw $r101;

     label06:
        $r14 = <org.quartz.integrations.tests.QTZ179_TriggerLostAfterDbRestart_Test: org.slf4j.Logger LOG>;

        interfaceinvoke $r14.<org.slf4j.Logger: void info(java.lang.String)>("------- Database started ---------------------");

     label07:
        $r15 = <org.quartz.integrations.tests.QTZ179_TriggerLostAfterDbRestart_Test: org.slf4j.Logger LOG>;

        interfaceinvoke $r15.<org.slf4j.Logger: void info(java.lang.String)>("------- Creating Database tables ---------------------");

        staticinvoke <org.quartz.integrations.tests.JdbcQuartzDerbyUtilities: void createDatabase()>();

        $r16 = <org.quartz.integrations.tests.QTZ179_TriggerLostAfterDbRestart_Test: org.slf4j.Logger LOG>;

        interfaceinvoke $r16.<org.slf4j.Logger: void info(java.lang.String)>("------- Database tables created ---------------------");

     label08:
        goto label10;

     label09:
        $r103 := @caughtexception;

        virtualinvoke $r103.<java.sql.SQLException: void printStackTrace()>();

        $r104 = virtualinvoke $r103.<java.sql.SQLException: java.sql.SQLException getNextException()>();

        virtualinvoke $r104.<java.sql.SQLException: void printStackTrace()>();

     label10:
        $r17 = new java.util.Properties;

        specialinvoke $r17.<java.util.Properties: void <init>()>();

        virtualinvoke $r17.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.scheduler.instanceName", "TestScheduler");

        virtualinvoke $r17.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.scheduler.instanceId", "AUTO");

        virtualinvoke $r17.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.scheduler.skipUpdateCheck", "true");

        virtualinvoke $r17.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.threadPool.class", "org.quartz.simpl.SimpleThreadPool");

        virtualinvoke $r17.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.threadPool.threadCount", "12");

        virtualinvoke $r17.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.threadPool.threadPriority", "5");

        virtualinvoke $r17.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.jobStore.misfireThreshold", "10000");

        virtualinvoke $r17.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.jobStore.class", "org.quartz.impl.jdbcjobstore.JobStoreTX");

        virtualinvoke $r17.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.jobStore.driverDelegateClass", "org.quartz.impl.jdbcjobstore.StdJDBCDelegate");

        virtualinvoke $r17.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.jobStore.useProperties", "true");

        virtualinvoke $r17.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.jobStore.dataSource", "myDS");

        virtualinvoke $r17.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.jobStore.tablePrefix", "QRTZ_");

        virtualinvoke $r17.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.jobStore.isClustered", "false");

        virtualinvoke $r17.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.dataSource.myDS.driver", "org.apache.derby.jdbc.ClientDriver");

        $r32 = <org.quartz.integrations.tests.JdbcQuartzDerbyUtilities: java.lang.String DATABASE_CONNECTION_PREFIX>;

        virtualinvoke $r17.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.dataSource.myDS.URL", $r32);

        virtualinvoke $r17.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.dataSource.myDS.user", "quartz");

        virtualinvoke $r17.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.dataSource.myDS.password", "quartz");

        virtualinvoke $r17.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.quartz.dataSource.myDS.maxConnections", "5");

        $r37 = new org.quartz.impl.StdSchedulerFactory;

        specialinvoke $r37.<org.quartz.impl.StdSchedulerFactory: void <init>(java.util.Properties)>($r17);

        $r38 = interfaceinvoke $r37.<org.quartz.SchedulerFactory: org.quartz.Scheduler getScheduler()>();

        <org.quartz.integrations.tests.QTZ179_TriggerLostAfterDbRestart_Test: org.quartz.Scheduler sched> = $r38;

        $r39 = <org.quartz.integrations.tests.QTZ179_TriggerLostAfterDbRestart_Test: org.slf4j.Logger LOG>;

        interfaceinvoke $r39.<org.slf4j.Logger: void info(java.lang.String)>("------- Initializing ----------------------");

        $r40 = <org.quartz.integrations.tests.QTZ179_TriggerLostAfterDbRestart_Test: org.slf4j.Logger LOG>;

        interfaceinvoke $r40.<org.slf4j.Logger: void info(java.lang.String)>("------- Initialization Complete -----------");

        $r41 = <org.quartz.integrations.tests.QTZ179_TriggerLostAfterDbRestart_Test: org.slf4j.Logger LOG>;

        interfaceinvoke $r41.<org.slf4j.Logger: void info(java.lang.String)>("------- Scheduling Job  -------------------");

        $r42 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob(java.lang.Class)>(class "Lorg/quartz/integrations/tests/HelloJob;");

        $r43 = virtualinvoke $r42.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String,java.lang.String)>("job1", "group1");

        r1 = virtualinvoke $r43.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        $r44 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob(java.lang.Class)>(class "Lorg/quartz/integrations/tests/HelloJob;");

        $r45 = virtualinvoke $r44.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String,java.lang.String)>("job2", "group1");

        r2 = virtualinvoke $r45.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        $r46 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob(java.lang.Class)>(class "Lorg/quartz/integrations/tests/HelloJob;");

        $r47 = virtualinvoke $r46.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String,java.lang.String)>("job1", "group2");

        r3 = virtualinvoke $r47.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        $r48 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob(java.lang.Class)>(class "Lorg/quartz/integrations/tests/HelloJob;");

        $r49 = virtualinvoke $r48.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String,java.lang.String)>("job2", "group2");

        r4 = virtualinvoke $r49.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        $r50 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r51 = virtualinvoke $r50.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String,java.lang.String)>("job1", "group1");

        $r52 = virtualinvoke $r51.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder startNow()>();

        $r53 = staticinvoke <org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder simpleSchedule()>();

        $r54 = virtualinvoke $r53.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder withIntervalInSeconds(int)>(3);

        $r55 = virtualinvoke $r54.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder repeatForever()>();

        $r56 = virtualinvoke $r52.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>($r55);

        $r57 = virtualinvoke $r56.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        <org.quartz.integrations.tests.QTZ179_TriggerLostAfterDbRestart_Test: org.quartz.Trigger trigger1_1> = $r57;

        $r58 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r59 = virtualinvoke $r58.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String,java.lang.String)>("job2", "group1");

        $r60 = virtualinvoke $r59.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder startNow()>();

        $r61 = staticinvoke <org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder simpleSchedule()>();

        $r62 = virtualinvoke $r61.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder withIntervalInSeconds(int)>(3);

        $r63 = virtualinvoke $r62.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder repeatForever()>();

        $r64 = virtualinvoke $r60.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>($r63);

        $r65 = virtualinvoke $r64.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        <org.quartz.integrations.tests.QTZ179_TriggerLostAfterDbRestart_Test: org.quartz.Trigger trigger2_1> = $r65;

        $r66 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r67 = virtualinvoke $r66.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String,java.lang.String)>("job1", "group2");

        $r68 = virtualinvoke $r67.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder startNow()>();

        $r69 = staticinvoke <org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder simpleSchedule()>();

        $r70 = virtualinvoke $r69.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder withIntervalInSeconds(int)>(3);

        $r71 = virtualinvoke $r70.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder repeatForever()>();

        $r72 = virtualinvoke $r68.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>($r71);

        $r73 = virtualinvoke $r72.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        <org.quartz.integrations.tests.QTZ179_TriggerLostAfterDbRestart_Test: org.quartz.Trigger trigger1_2> = $r73;

        $r74 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r75 = virtualinvoke $r74.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String,java.lang.String)>("job2", "group2");

        $r76 = virtualinvoke $r75.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder startNow()>();

        $r77 = staticinvoke <org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder simpleSchedule()>();

        $r78 = virtualinvoke $r77.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder withIntervalInSeconds(int)>(3);

        $r79 = virtualinvoke $r78.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder repeatForever()>();

        $r80 = virtualinvoke $r76.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>($r79);

        $r81 = virtualinvoke $r80.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        <org.quartz.integrations.tests.QTZ179_TriggerLostAfterDbRestart_Test: org.quartz.Trigger trigger2_2> = $r81;

        $r82 = newarray (org.quartz.Trigger)[4];

        $r83 = <org.quartz.integrations.tests.QTZ179_TriggerLostAfterDbRestart_Test: org.quartz.Trigger trigger1_1>;

        $r82[0] = $r83;

        $r84 = <org.quartz.integrations.tests.QTZ179_TriggerLostAfterDbRestart_Test: org.quartz.Trigger trigger1_2>;

        $r82[1] = $r84;

        $r85 = <org.quartz.integrations.tests.QTZ179_TriggerLostAfterDbRestart_Test: org.quartz.Trigger trigger2_1>;

        $r82[2] = $r85;

        $r86 = <org.quartz.integrations.tests.QTZ179_TriggerLostAfterDbRestart_Test: org.quartz.Trigger trigger2_2>;

        $r82[3] = $r86;

        $r87 = newarray (org.quartz.JobDetail)[4];

        $r87[0] = r1;

        $r87[1] = r3;

        $r87[2] = r2;

        $r87[3] = r4;

        i2 = 0;

     label11:
        $i3 = lengthof $r82;

        if i2 >= $i3 goto label14;

        r7 = $r87[i2];

        r8 = $r82[i2];

        $r94 = <org.quartz.integrations.tests.QTZ179_TriggerLostAfterDbRestart_Test: org.quartz.Scheduler sched>;

        $r95 = interfaceinvoke r7.<org.quartz.JobDetail: org.quartz.JobKey getKey()>();

        $z0 = interfaceinvoke $r94.<org.quartz.Scheduler: boolean checkExists(org.quartz.JobKey)>($r95);

        if $z0 == 0 goto label12;

        $r98 = <org.quartz.integrations.tests.QTZ179_TriggerLostAfterDbRestart_Test: org.quartz.Scheduler sched>;

        $r99 = interfaceinvoke r8.<org.quartz.Trigger: org.quartz.TriggerKey getKey()>();

        interfaceinvoke $r98.<org.quartz.Scheduler: java.util.Date rescheduleJob(org.quartz.TriggerKey,org.quartz.Trigger)>($r99, r8);

        goto label13;

     label12:
        $r96 = <org.quartz.integrations.tests.QTZ179_TriggerLostAfterDbRestart_Test: org.quartz.Scheduler sched>;

        interfaceinvoke $r96.<org.quartz.Scheduler: java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)>(r7, r8);

     label13:
        i2 = i2 + 1;

        goto label11;

     label14:
        $r88 = <org.quartz.integrations.tests.QTZ179_TriggerLostAfterDbRestart_Test: org.quartz.Scheduler sched>;

        interfaceinvoke $r88.<org.quartz.Scheduler: void start()>();

        $r89 = <org.quartz.integrations.tests.QTZ179_TriggerLostAfterDbRestart_Test: org.slf4j.Logger LOG>;

        interfaceinvoke $r89.<org.slf4j.Logger: void info(java.lang.String)>("------- Scheduler Started -----------------");

     label15:
        staticinvoke <java.lang.Thread: void sleep(long)>(9000L);

     label16:
        goto label18;

     label17:
        $r107 := @caughtexception;

     label18:
        $i0 = staticinvoke <org.quartz.integrations.tests.JdbcQuartzDerbyUtilities: int triggersInAcquiredState()>();

        if $i0 <= 1 goto label19;

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("There should not be more than 1 trigger in ACQUIRED state in the DB.");

     label19:
        $r90 = <org.quartz.integrations.tests.QTZ179_TriggerLostAfterDbRestart_Test: org.slf4j.Logger LOG>;

        interfaceinvoke $r90.<org.slf4j.Logger: void info(java.lang.String)>("------- Shutting down database ! -----------------");

        $r91 = <org.quartz.integrations.tests.QTZ179_TriggerLostAfterDbRestart_Test: org.apache.derby.drda.NetworkServerControl derbyServer>;

        virtualinvoke $r91.<org.apache.derby.drda.NetworkServerControl: void shutdown()>();

        staticinvoke <java.lang.Thread: void sleep(long)>(10000L);

        $r92 = <org.quartz.integrations.tests.QTZ179_TriggerLostAfterDbRestart_Test: org.apache.derby.drda.NetworkServerControl derbyServer>;

        virtualinvoke $r92.<org.apache.derby.drda.NetworkServerControl: void start(java.io.PrintWriter)>(null);

        $r93 = <org.quartz.integrations.tests.QTZ179_TriggerLostAfterDbRestart_Test: org.slf4j.Logger LOG>;

        interfaceinvoke $r93.<org.slf4j.Logger: void info(java.lang.String)>("------- Database back online ! -----------------");

        staticinvoke <java.lang.Thread: void sleep(long)>(10000L);

     label20:
        goto label22;

     label21:
        $r105 := @caughtexception;

        virtualinvoke $r105.<java.lang.Exception: void printStackTrace()>();

     label22:
        return;

        catch java.lang.Exception from label02 to label03 with label04;
        catch java.sql.SQLException from label07 to label08 with label09;
        catch java.lang.Exception from label15 to label16 with label17;
        catch java.lang.Exception from label19 to label20 with label21;
    }

    public void checkAll4TriggersStillRunningTest() throws java.sql.SQLException
    {
        org.quartz.integrations.tests.QTZ179_TriggerLostAfterDbRestart_Test r0;
        int i0;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: org.quartz.integrations.tests.QTZ179_TriggerLostAfterDbRestart_Test;

        i0 = staticinvoke <org.quartz.integrations.tests.JdbcQuartzDerbyUtilities: int triggersInAcquiredState()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("There should not be more than 1 trigger in ACQUIRED state in the DB, but found ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        if i0 <= 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>($r4, $z0);

        return;
    }

    public static void shutdownDb() throws java.lang.Exception
    {
        org.slf4j.Logger $r1, $r3, $r4, $r5, $r7;
        org.quartz.Scheduler $r2;
        org.apache.derby.drda.NetworkServerControl $r6;
        java.sql.SQLException $r8, $r9;
        java.lang.AssertionError $r10;

        $r1 = <org.quartz.integrations.tests.QTZ179_TriggerLostAfterDbRestart_Test: org.slf4j.Logger LOG>;

        interfaceinvoke $r1.<org.slf4j.Logger: void info(java.lang.String)>("------- Shutting Down Scheduler---------------------");

        $r2 = <org.quartz.integrations.tests.QTZ179_TriggerLostAfterDbRestart_Test: org.quartz.Scheduler sched>;

        interfaceinvoke $r2.<org.quartz.Scheduler: void shutdown(boolean)>(1);

        $r3 = <org.quartz.integrations.tests.QTZ179_TriggerLostAfterDbRestart_Test: org.slf4j.Logger LOG>;

        interfaceinvoke $r3.<org.slf4j.Logger: void info(java.lang.String)>("------- Shutdown Complete -----------------");

     label1:
        $r4 = <org.quartz.integrations.tests.QTZ179_TriggerLostAfterDbRestart_Test: org.slf4j.Logger LOG>;

        interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String)>("------- Destroying Database ---------------------");

        staticinvoke <org.quartz.integrations.tests.JdbcQuartzDerbyUtilities: void destroyDatabase()>();

        $r5 = <org.quartz.integrations.tests.QTZ179_TriggerLostAfterDbRestart_Test: org.slf4j.Logger LOG>;

        interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String)>("------- Database destroyed ---------------------");

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        virtualinvoke $r8.<java.sql.SQLException: void printStackTrace()>();

        $r9 = virtualinvoke $r8.<java.sql.SQLException: java.sql.SQLException getNextException()>();

        virtualinvoke $r9.<java.sql.SQLException: void printStackTrace()>();

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>(java.lang.Object)>($r8);

        throw $r10;

     label4:
        $r6 = <org.quartz.integrations.tests.QTZ179_TriggerLostAfterDbRestart_Test: org.apache.derby.drda.NetworkServerControl derbyServer>;

        virtualinvoke $r6.<org.apache.derby.drda.NetworkServerControl: void shutdown()>();

        $r7 = <org.quartz.integrations.tests.QTZ179_TriggerLostAfterDbRestart_Test: org.slf4j.Logger LOG>;

        interfaceinvoke $r7.<org.slf4j.Logger: void info(java.lang.String)>("------- Database shutdown ---------------------");

        return;

        catch java.sql.SQLException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        <org.quartz.integrations.tests.QTZ179_TriggerLostAfterDbRestart_Test: int INTERVAL_IN_SECONDS> = 3;

        <org.quartz.integrations.tests.QTZ179_TriggerLostAfterDbRestart_Test: long DURATION_OF_SECOND_SCHEDULING> = 10L;

        <org.quartz.integrations.tests.QTZ179_TriggerLostAfterDbRestart_Test: long DURATION_OF_NETWORK_FAILURE> = 10L;

        <org.quartz.integrations.tests.QTZ179_TriggerLostAfterDbRestart_Test: long DURATION_OF_FIRST_SCHEDULING> = 9L;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/quartz/integrations/tests/QTZ179_TriggerLostAfterDbRestart_Test;");

        <org.quartz.integrations.tests.QTZ179_TriggerLostAfterDbRestart_Test: org.slf4j.Logger LOG> = $r0;

        return;
    }
}
