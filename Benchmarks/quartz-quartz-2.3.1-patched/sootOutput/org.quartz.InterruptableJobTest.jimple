public class org.quartz.InterruptableJobTest extends junit.framework.TestCase
{
    static final java.util.concurrent.CyclicBarrier sync;

    public void <init>()
    {
        org.quartz.InterruptableJobTest r0;

        r0 := @this: org.quartz.InterruptableJobTest;

        specialinvoke r0.<junit.framework.TestCase: void <init>()>();

        return;
    }

    protected void setUp() throws java.lang.Exception
    {
        org.quartz.InterruptableJobTest r0;

        r0 := @this: org.quartz.InterruptableJobTest;

        return;
    }

    public void testJobInterruption() throws java.lang.Exception
    {
        org.quartz.InterruptableJobTest r0;
        org.quartz.Scheduler r2;
        org.quartz.JobDetail r3;
        org.quartz.Trigger r4;
        java.util.List r5;
        org.quartz.JobExecutionContext r6;
        boolean z0, $z1, $z2;
        java.util.Properties $r7;
        org.quartz.impl.StdSchedulerFactory $r12;
        org.quartz.JobBuilder $r13, $r14, $r15;
        org.quartz.TriggerBuilder $r16, $r17, $r18, $r19;
        java.util.concurrent.CyclicBarrier $r21, $r25;
        int $i1;
        java.lang.Object $r23;
        java.lang.String $r24;
        java.util.concurrent.atomic.AtomicBoolean $r26;

        r0 := @this: org.quartz.InterruptableJobTest;

        $r7 = new java.util.Properties;

        specialinvoke $r7.<java.util.Properties: void <init>()>();

        virtualinvoke $r7.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("org.quartz.scheduler.instanceName", "InterruptableJobTest_Scheduler");

        virtualinvoke $r7.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("org.quartz.scheduler.instanceId", "AUTO");

        virtualinvoke $r7.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("org.quartz.threadPool.threadCount", "2");

        virtualinvoke $r7.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("org.quartz.threadPool.class", "org.quartz.simpl.SimpleThreadPool");

        $r12 = new org.quartz.impl.StdSchedulerFactory;

        specialinvoke $r12.<org.quartz.impl.StdSchedulerFactory: void <init>(java.util.Properties)>($r7);

        r2 = virtualinvoke $r12.<org.quartz.impl.StdSchedulerFactory: org.quartz.Scheduler getScheduler()>();

        interfaceinvoke r2.<org.quartz.Scheduler: void start()>();

        $r13 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob()>();

        $r14 = virtualinvoke $r13.<org.quartz.JobBuilder: org.quartz.JobBuilder ofType(java.lang.Class)>(class "Lorg/quartz/InterruptableJobTest$TestInterruptableJob;");

        $r15 = virtualinvoke $r14.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String)>("j1");

        r3 = virtualinvoke $r15.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        $r16 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r17 = virtualinvoke $r16.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String)>("t1");

        $r18 = virtualinvoke $r17.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder forJob(org.quartz.JobDetail)>(r3);

        $r19 = virtualinvoke $r18.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder startNow()>();

        r4 = virtualinvoke $r19.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        interfaceinvoke r2.<org.quartz.Scheduler: java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)>(r3, r4);

        $r21 = <org.quartz.InterruptableJobTest: java.util.concurrent.CyclicBarrier sync>;

        virtualinvoke $r21.<java.util.concurrent.CyclicBarrier: int await()>();

        r5 = interfaceinvoke r2.<org.quartz.Scheduler: java.util.List getCurrentlyExecutingJobs()>();

        $i1 = interfaceinvoke r5.<java.util.List: int size()>();

        if $i1 != 1 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <org.quartz.InterruptableJobTest: void assertTrue(java.lang.String,boolean)>("Number of executing jobs should be 1 ", $z2);

        $r23 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(0);

        r6 = (org.quartz.JobExecutionContext) $r23;

        $r24 = interfaceinvoke r6.<org.quartz.JobExecutionContext: java.lang.String getFireInstanceId()>();

        z0 = interfaceinvoke r2.<org.quartz.Scheduler: boolean interrupt(java.lang.String)>($r24);

        $r25 = <org.quartz.InterruptableJobTest: java.util.concurrent.CyclicBarrier sync>;

        virtualinvoke $r25.<java.util.concurrent.CyclicBarrier: int await()>();

        staticinvoke <org.quartz.InterruptableJobTest: void assertTrue(java.lang.String,boolean)>("Expected successful result from interruption of job ", z0);

        $r26 = <org.quartz.InterruptableJobTest$TestInterruptableJob: java.util.concurrent.atomic.AtomicBoolean interrupted>;

        $z1 = virtualinvoke $r26.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        staticinvoke <org.quartz.InterruptableJobTest: void assertTrue(java.lang.String,boolean)>("Expected interrupted flag to be set on job class ", $z1);

        interfaceinvoke r2.<org.quartz.Scheduler: void clear()>();

        interfaceinvoke r2.<org.quartz.Scheduler: void shutdown()>();

        return;
    }

    static void <clinit>()
    {
        java.util.concurrent.CyclicBarrier $r0;

        $r0 = new java.util.concurrent.CyclicBarrier;

        specialinvoke $r0.<java.util.concurrent.CyclicBarrier: void <init>(int)>(2);

        <org.quartz.InterruptableJobTest: java.util.concurrent.CyclicBarrier sync> = $r0;

        return;
    }
}
