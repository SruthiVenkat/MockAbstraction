public abstract class org.quartz.impl.triggers.AbstractTrigger extends java.lang.Object implements org.quartz.spi.OperableTrigger
{
    private static final long serialVersionUID;
    private java.lang.String name;
    private java.lang.String group;
    private java.lang.String jobName;
    private java.lang.String jobGroup;
    private java.lang.String description;
    private org.quartz.JobDataMap jobDataMap;
    private boolean volatility;
    private java.lang.String calendarName;
    private java.lang.String fireInstanceId;
    private int misfireInstruction;
    private int priority;
    private transient org.quartz.TriggerKey key;

    public void <init>()
    {
        org.quartz.impl.triggers.AbstractTrigger r0;

        r0 := @this: org.quartz.impl.triggers.AbstractTrigger;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.quartz.impl.triggers.AbstractTrigger: java.lang.String group> = "DEFAULT";

        r0.<org.quartz.impl.triggers.AbstractTrigger: java.lang.String jobGroup> = "DEFAULT";

        r0.<org.quartz.impl.triggers.AbstractTrigger: boolean volatility> = 0;

        r0.<org.quartz.impl.triggers.AbstractTrigger: java.lang.String calendarName> = null;

        r0.<org.quartz.impl.triggers.AbstractTrigger: java.lang.String fireInstanceId> = null;

        r0.<org.quartz.impl.triggers.AbstractTrigger: int misfireInstruction> = 0;

        r0.<org.quartz.impl.triggers.AbstractTrigger: int priority> = 5;

        r0.<org.quartz.impl.triggers.AbstractTrigger: org.quartz.TriggerKey key> = null;

        return;
    }

    public void <init>(java.lang.String)
    {
        org.quartz.impl.triggers.AbstractTrigger r0;
        java.lang.String r1;

        r0 := @this: org.quartz.impl.triggers.AbstractTrigger;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.quartz.impl.triggers.AbstractTrigger: java.lang.String group> = "DEFAULT";

        r0.<org.quartz.impl.triggers.AbstractTrigger: java.lang.String jobGroup> = "DEFAULT";

        r0.<org.quartz.impl.triggers.AbstractTrigger: boolean volatility> = 0;

        r0.<org.quartz.impl.triggers.AbstractTrigger: java.lang.String calendarName> = null;

        r0.<org.quartz.impl.triggers.AbstractTrigger: java.lang.String fireInstanceId> = null;

        r0.<org.quartz.impl.triggers.AbstractTrigger: int misfireInstruction> = 0;

        r0.<org.quartz.impl.triggers.AbstractTrigger: int priority> = 5;

        r0.<org.quartz.impl.triggers.AbstractTrigger: org.quartz.TriggerKey key> = null;

        virtualinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: void setName(java.lang.String)>(r1);

        virtualinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: void setGroup(java.lang.String)>(null);

        return;
    }

    public void <init>(java.lang.String, java.lang.String)
    {
        org.quartz.impl.triggers.AbstractTrigger r0;
        java.lang.String r1, r2;

        r0 := @this: org.quartz.impl.triggers.AbstractTrigger;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.quartz.impl.triggers.AbstractTrigger: java.lang.String group> = "DEFAULT";

        r0.<org.quartz.impl.triggers.AbstractTrigger: java.lang.String jobGroup> = "DEFAULT";

        r0.<org.quartz.impl.triggers.AbstractTrigger: boolean volatility> = 0;

        r0.<org.quartz.impl.triggers.AbstractTrigger: java.lang.String calendarName> = null;

        r0.<org.quartz.impl.triggers.AbstractTrigger: java.lang.String fireInstanceId> = null;

        r0.<org.quartz.impl.triggers.AbstractTrigger: int misfireInstruction> = 0;

        r0.<org.quartz.impl.triggers.AbstractTrigger: int priority> = 5;

        r0.<org.quartz.impl.triggers.AbstractTrigger: org.quartz.TriggerKey key> = null;

        virtualinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: void setName(java.lang.String)>(r1);

        virtualinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: void setGroup(java.lang.String)>(r2);

        return;
    }

    public void <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        org.quartz.impl.triggers.AbstractTrigger r0;
        java.lang.String r1, r2, r3, r4;

        r0 := @this: org.quartz.impl.triggers.AbstractTrigger;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.quartz.impl.triggers.AbstractTrigger: java.lang.String group> = "DEFAULT";

        r0.<org.quartz.impl.triggers.AbstractTrigger: java.lang.String jobGroup> = "DEFAULT";

        r0.<org.quartz.impl.triggers.AbstractTrigger: boolean volatility> = 0;

        r0.<org.quartz.impl.triggers.AbstractTrigger: java.lang.String calendarName> = null;

        r0.<org.quartz.impl.triggers.AbstractTrigger: java.lang.String fireInstanceId> = null;

        r0.<org.quartz.impl.triggers.AbstractTrigger: int misfireInstruction> = 0;

        r0.<org.quartz.impl.triggers.AbstractTrigger: int priority> = 5;

        r0.<org.quartz.impl.triggers.AbstractTrigger: org.quartz.TriggerKey key> = null;

        virtualinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: void setName(java.lang.String)>(r1);

        virtualinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: void setGroup(java.lang.String)>(r2);

        virtualinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: void setJobName(java.lang.String)>(r3);

        virtualinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: void setJobGroup(java.lang.String)>(r4);

        return;
    }

    public java.lang.String getName()
    {
        org.quartz.impl.triggers.AbstractTrigger r0;
        java.lang.String $r1;

        r0 := @this: org.quartz.impl.triggers.AbstractTrigger;

        $r1 = r0.<org.quartz.impl.triggers.AbstractTrigger: java.lang.String name>;

        return $r1;
    }

    public void setName(java.lang.String)
    {
        org.quartz.impl.triggers.AbstractTrigger r0;
        java.lang.String r1, $r3;
        java.lang.IllegalArgumentException $r2;
        int $i0;

        r0 := @this: org.quartz.impl.triggers.AbstractTrigger;

        r1 := @parameter0: java.lang.String;

        if r1 == null goto label1;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Trigger name cannot be null or empty.");

        throw $r2;

     label2:
        r0.<org.quartz.impl.triggers.AbstractTrigger: java.lang.String name> = r1;

        r0.<org.quartz.impl.triggers.AbstractTrigger: org.quartz.TriggerKey key> = null;

        return;
    }

    public java.lang.String getGroup()
    {
        org.quartz.impl.triggers.AbstractTrigger r0;
        java.lang.String $r1;

        r0 := @this: org.quartz.impl.triggers.AbstractTrigger;

        $r1 = r0.<org.quartz.impl.triggers.AbstractTrigger: java.lang.String group>;

        return $r1;
    }

    public void setGroup(java.lang.String)
    {
        org.quartz.impl.triggers.AbstractTrigger r0;
        java.lang.String $r1, r3;
        int $i0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.quartz.impl.triggers.AbstractTrigger;

        r3 := @parameter0: java.lang.String;

        if r3 == null goto label1;

        $r1 = virtualinvoke r3.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Group name cannot be an empty string.");

        throw $r2;

     label1:
        if r3 != null goto label2;

        r3 = "DEFAULT";

     label2:
        r0.<org.quartz.impl.triggers.AbstractTrigger: java.lang.String group> = r3;

        r0.<org.quartz.impl.triggers.AbstractTrigger: org.quartz.TriggerKey key> = null;

        return;
    }

    public void setKey(org.quartz.TriggerKey)
    {
        org.quartz.impl.triggers.AbstractTrigger r0;
        org.quartz.TriggerKey r1;
        java.lang.String $r2, $r3;

        r0 := @this: org.quartz.impl.triggers.AbstractTrigger;

        r1 := @parameter0: org.quartz.TriggerKey;

        $r2 = virtualinvoke r1.<org.quartz.TriggerKey: java.lang.String getName()>();

        virtualinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: void setName(java.lang.String)>($r2);

        $r3 = virtualinvoke r1.<org.quartz.TriggerKey: java.lang.String getGroup()>();

        virtualinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: void setGroup(java.lang.String)>($r3);

        r0.<org.quartz.impl.triggers.AbstractTrigger: org.quartz.TriggerKey key> = r1;

        return;
    }

    public java.lang.String getJobName()
    {
        org.quartz.impl.triggers.AbstractTrigger r0;
        java.lang.String $r1;

        r0 := @this: org.quartz.impl.triggers.AbstractTrigger;

        $r1 = r0.<org.quartz.impl.triggers.AbstractTrigger: java.lang.String jobName>;

        return $r1;
    }

    public void setJobName(java.lang.String)
    {
        org.quartz.impl.triggers.AbstractTrigger r0;
        java.lang.String r1, $r3;
        java.lang.IllegalArgumentException $r2;
        int $i0;

        r0 := @this: org.quartz.impl.triggers.AbstractTrigger;

        r1 := @parameter0: java.lang.String;

        if r1 == null goto label1;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Job name cannot be null or empty.");

        throw $r2;

     label2:
        r0.<org.quartz.impl.triggers.AbstractTrigger: java.lang.String jobName> = r1;

        return;
    }

    public java.lang.String getJobGroup()
    {
        org.quartz.impl.triggers.AbstractTrigger r0;
        java.lang.String $r1;

        r0 := @this: org.quartz.impl.triggers.AbstractTrigger;

        $r1 = r0.<org.quartz.impl.triggers.AbstractTrigger: java.lang.String jobGroup>;

        return $r1;
    }

    public void setJobGroup(java.lang.String)
    {
        org.quartz.impl.triggers.AbstractTrigger r0;
        java.lang.String $r1, r3;
        int $i0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.quartz.impl.triggers.AbstractTrigger;

        r3 := @parameter0: java.lang.String;

        if r3 == null goto label1;

        $r1 = virtualinvoke r3.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Group name cannot be null or empty.");

        throw $r2;

     label1:
        if r3 != null goto label2;

        r3 = "DEFAULT";

     label2:
        r0.<org.quartz.impl.triggers.AbstractTrigger: java.lang.String jobGroup> = r3;

        return;
    }

    public void setJobKey(org.quartz.JobKey)
    {
        org.quartz.impl.triggers.AbstractTrigger r0;
        org.quartz.JobKey r1;
        java.lang.String $r2, $r3;

        r0 := @this: org.quartz.impl.triggers.AbstractTrigger;

        r1 := @parameter0: org.quartz.JobKey;

        $r2 = virtualinvoke r1.<org.quartz.JobKey: java.lang.String getName()>();

        virtualinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: void setJobName(java.lang.String)>($r2);

        $r3 = virtualinvoke r1.<org.quartz.JobKey: java.lang.String getGroup()>();

        virtualinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: void setJobGroup(java.lang.String)>($r3);

        return;
    }

    public java.lang.String getFullName()
    {
        org.quartz.impl.triggers.AbstractTrigger r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r6;
        java.lang.String $r2, $r5, $r7;

        r0 := @this: org.quartz.impl.triggers.AbstractTrigger;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.quartz.impl.triggers.AbstractTrigger: java.lang.String group>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r5 = r0.<org.quartz.impl.triggers.AbstractTrigger: java.lang.String name>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public org.quartz.TriggerKey getKey()
    {
        org.quartz.impl.triggers.AbstractTrigger r0;
        org.quartz.TriggerKey $r1, $r2, $r4;
        java.lang.String $r3, $r5, $r6;

        r0 := @this: org.quartz.impl.triggers.AbstractTrigger;

        $r1 = r0.<org.quartz.impl.triggers.AbstractTrigger: org.quartz.TriggerKey key>;

        if $r1 != null goto label2;

        $r3 = virtualinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: java.lang.String getName()>();

        if $r3 != null goto label1;

        return null;

     label1:
        $r4 = new org.quartz.TriggerKey;

        $r5 = virtualinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: java.lang.String getName()>();

        $r6 = virtualinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: java.lang.String getGroup()>();

        specialinvoke $r4.<org.quartz.TriggerKey: void <init>(java.lang.String,java.lang.String)>($r5, $r6);

        r0.<org.quartz.impl.triggers.AbstractTrigger: org.quartz.TriggerKey key> = $r4;

     label2:
        $r2 = r0.<org.quartz.impl.triggers.AbstractTrigger: org.quartz.TriggerKey key>;

        return $r2;
    }

    public org.quartz.JobKey getJobKey()
    {
        org.quartz.impl.triggers.AbstractTrigger r0;
        java.lang.String $r1, $r3, $r4;
        org.quartz.JobKey $r2;

        r0 := @this: org.quartz.impl.triggers.AbstractTrigger;

        $r1 = virtualinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: java.lang.String getJobName()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = new org.quartz.JobKey;

        $r3 = virtualinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: java.lang.String getJobName()>();

        $r4 = virtualinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: java.lang.String getJobGroup()>();

        specialinvoke $r2.<org.quartz.JobKey: void <init>(java.lang.String,java.lang.String)>($r3, $r4);

        return $r2;
    }

    public java.lang.String getFullJobName()
    {
        org.quartz.impl.triggers.AbstractTrigger r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r6;
        java.lang.String $r2, $r5, $r7;

        r0 := @this: org.quartz.impl.triggers.AbstractTrigger;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.quartz.impl.triggers.AbstractTrigger: java.lang.String jobGroup>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r5 = r0.<org.quartz.impl.triggers.AbstractTrigger: java.lang.String jobName>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public java.lang.String getDescription()
    {
        org.quartz.impl.triggers.AbstractTrigger r0;
        java.lang.String $r1;

        r0 := @this: org.quartz.impl.triggers.AbstractTrigger;

        $r1 = r0.<org.quartz.impl.triggers.AbstractTrigger: java.lang.String description>;

        return $r1;
    }

    public void setDescription(java.lang.String)
    {
        org.quartz.impl.triggers.AbstractTrigger r0;
        java.lang.String r1;

        r0 := @this: org.quartz.impl.triggers.AbstractTrigger;

        r1 := @parameter0: java.lang.String;

        r0.<org.quartz.impl.triggers.AbstractTrigger: java.lang.String description> = r1;

        return;
    }

    public void setCalendarName(java.lang.String)
    {
        org.quartz.impl.triggers.AbstractTrigger r0;
        java.lang.String r1;

        r0 := @this: org.quartz.impl.triggers.AbstractTrigger;

        r1 := @parameter0: java.lang.String;

        r0.<org.quartz.impl.triggers.AbstractTrigger: java.lang.String calendarName> = r1;

        return;
    }

    public java.lang.String getCalendarName()
    {
        org.quartz.impl.triggers.AbstractTrigger r0;
        java.lang.String $r1;

        r0 := @this: org.quartz.impl.triggers.AbstractTrigger;

        $r1 = r0.<org.quartz.impl.triggers.AbstractTrigger: java.lang.String calendarName>;

        return $r1;
    }

    public org.quartz.JobDataMap getJobDataMap()
    {
        org.quartz.impl.triggers.AbstractTrigger r0;
        org.quartz.JobDataMap $r1, $r2, $r3;

        r0 := @this: org.quartz.impl.triggers.AbstractTrigger;

        $r1 = r0.<org.quartz.impl.triggers.AbstractTrigger: org.quartz.JobDataMap jobDataMap>;

        if $r1 != null goto label1;

        $r3 = new org.quartz.JobDataMap;

        specialinvoke $r3.<org.quartz.JobDataMap: void <init>()>();

        r0.<org.quartz.impl.triggers.AbstractTrigger: org.quartz.JobDataMap jobDataMap> = $r3;

     label1:
        $r2 = r0.<org.quartz.impl.triggers.AbstractTrigger: org.quartz.JobDataMap jobDataMap>;

        return $r2;
    }

    public void setJobDataMap(org.quartz.JobDataMap)
    {
        org.quartz.impl.triggers.AbstractTrigger r0;
        org.quartz.JobDataMap r1;

        r0 := @this: org.quartz.impl.triggers.AbstractTrigger;

        r1 := @parameter0: org.quartz.JobDataMap;

        r0.<org.quartz.impl.triggers.AbstractTrigger: org.quartz.JobDataMap jobDataMap> = r1;

        return;
    }

    public int getPriority()
    {
        org.quartz.impl.triggers.AbstractTrigger r0;
        int $i0;

        r0 := @this: org.quartz.impl.triggers.AbstractTrigger;

        $i0 = r0.<org.quartz.impl.triggers.AbstractTrigger: int priority>;

        return $i0;
    }

    public void setPriority(int)
    {
        org.quartz.impl.triggers.AbstractTrigger r0;
        int i0;

        r0 := @this: org.quartz.impl.triggers.AbstractTrigger;

        i0 := @parameter0: int;

        r0.<org.quartz.impl.triggers.AbstractTrigger: int priority> = i0;

        return;
    }

    public abstract void triggered(org.quartz.Calendar);

    public abstract java.util.Date computeFirstFireTime(org.quartz.Calendar);

    public org.quartz.Trigger$CompletedExecutionInstruction executionComplete(org.quartz.JobExecutionContext, org.quartz.JobExecutionException)
    {
        org.quartz.impl.triggers.AbstractTrigger r0;
        org.quartz.JobExecutionContext r1;
        org.quartz.JobExecutionException r2;
        boolean $z0, $z1, $z2, $z3;
        org.quartz.Trigger$CompletedExecutionInstruction $r3, $r4, $r5, $r6, $r7;

        r0 := @this: org.quartz.impl.triggers.AbstractTrigger;

        r1 := @parameter0: org.quartz.JobExecutionContext;

        r2 := @parameter1: org.quartz.JobExecutionException;

        if r2 == null goto label1;

        $z3 = virtualinvoke r2.<org.quartz.JobExecutionException: boolean refireImmediately()>();

        if $z3 == 0 goto label1;

        $r7 = <org.quartz.Trigger$CompletedExecutionInstruction: org.quartz.Trigger$CompletedExecutionInstruction RE_EXECUTE_JOB>;

        return $r7;

     label1:
        if r2 == null goto label2;

        $z2 = virtualinvoke r2.<org.quartz.JobExecutionException: boolean unscheduleFiringTrigger()>();

        if $z2 == 0 goto label2;

        $r6 = <org.quartz.Trigger$CompletedExecutionInstruction: org.quartz.Trigger$CompletedExecutionInstruction SET_TRIGGER_COMPLETE>;

        return $r6;

     label2:
        if r2 == null goto label3;

        $z1 = virtualinvoke r2.<org.quartz.JobExecutionException: boolean unscheduleAllTriggers()>();

        if $z1 == 0 goto label3;

        $r5 = <org.quartz.Trigger$CompletedExecutionInstruction: org.quartz.Trigger$CompletedExecutionInstruction SET_ALL_JOB_TRIGGERS_COMPLETE>;

        return $r5;

     label3:
        $z0 = virtualinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: boolean mayFireAgain()>();

        if $z0 != 0 goto label4;

        $r4 = <org.quartz.Trigger$CompletedExecutionInstruction: org.quartz.Trigger$CompletedExecutionInstruction DELETE_TRIGGER>;

        return $r4;

     label4:
        $r3 = <org.quartz.Trigger$CompletedExecutionInstruction: org.quartz.Trigger$CompletedExecutionInstruction NOOP>;

        return $r3;
    }

    public abstract boolean mayFireAgain();

    public abstract java.util.Date getStartTime();

    public abstract void setStartTime(java.util.Date);

    public abstract void setEndTime(java.util.Date);

    public abstract java.util.Date getEndTime();

    public abstract java.util.Date getNextFireTime();

    public abstract java.util.Date getPreviousFireTime();

    public abstract java.util.Date getFireTimeAfter(java.util.Date);

    public abstract java.util.Date getFinalFireTime();

    public void setMisfireInstruction(int)
    {
        org.quartz.impl.triggers.AbstractTrigger r0;
        int i0;
        boolean $z0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: org.quartz.impl.triggers.AbstractTrigger;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: boolean validateMisfireInstruction(int)>(i0);

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The misfire instruction code is invalid for this type of trigger.");

        throw $r1;

     label1:
        r0.<org.quartz.impl.triggers.AbstractTrigger: int misfireInstruction> = i0;

        return;
    }

    protected abstract boolean validateMisfireInstruction(int);

    public int getMisfireInstruction()
    {
        org.quartz.impl.triggers.AbstractTrigger r0;
        int $i0;

        r0 := @this: org.quartz.impl.triggers.AbstractTrigger;

        $i0 = r0.<org.quartz.impl.triggers.AbstractTrigger: int misfireInstruction>;

        return $i0;
    }

    public abstract void updateAfterMisfire(org.quartz.Calendar);

    public abstract void updateWithNewCalendar(org.quartz.Calendar, long);

    public void validate() throws org.quartz.SchedulerException
    {
        org.quartz.impl.triggers.AbstractTrigger r0;
        java.lang.String $r1, $r2, $r3, $r4;
        org.quartz.SchedulerException $r5, $r6, $r7, $r8;

        r0 := @this: org.quartz.impl.triggers.AbstractTrigger;

        $r1 = r0.<org.quartz.impl.triggers.AbstractTrigger: java.lang.String name>;

        if $r1 != null goto label1;

        $r8 = new org.quartz.SchedulerException;

        specialinvoke $r8.<org.quartz.SchedulerException: void <init>(java.lang.String)>("Trigger\'s name cannot be null");

        throw $r8;

     label1:
        $r2 = r0.<org.quartz.impl.triggers.AbstractTrigger: java.lang.String group>;

        if $r2 != null goto label2;

        $r7 = new org.quartz.SchedulerException;

        specialinvoke $r7.<org.quartz.SchedulerException: void <init>(java.lang.String)>("Trigger\'s group cannot be null");

        throw $r7;

     label2:
        $r3 = r0.<org.quartz.impl.triggers.AbstractTrigger: java.lang.String jobName>;

        if $r3 != null goto label3;

        $r6 = new org.quartz.SchedulerException;

        specialinvoke $r6.<org.quartz.SchedulerException: void <init>(java.lang.String)>("Trigger\'s related Job\'s name cannot be null");

        throw $r6;

     label3:
        $r4 = r0.<org.quartz.impl.triggers.AbstractTrigger: java.lang.String jobGroup>;

        if $r4 != null goto label4;

        $r5 = new org.quartz.SchedulerException;

        specialinvoke $r5.<org.quartz.SchedulerException: void <init>(java.lang.String)>("Trigger\'s related Job\'s group cannot be null");

        throw $r5;

     label4:
        return;
    }

    public void setFireInstanceId(java.lang.String)
    {
        org.quartz.impl.triggers.AbstractTrigger r0;
        java.lang.String r1;

        r0 := @this: org.quartz.impl.triggers.AbstractTrigger;

        r1 := @parameter0: java.lang.String;

        r0.<org.quartz.impl.triggers.AbstractTrigger: java.lang.String fireInstanceId> = r1;

        return;
    }

    public java.lang.String getFireInstanceId()
    {
        org.quartz.impl.triggers.AbstractTrigger r0;
        java.lang.String $r1;

        r0 := @this: org.quartz.impl.triggers.AbstractTrigger;

        $r1 = r0.<org.quartz.impl.triggers.AbstractTrigger: java.lang.String fireInstanceId>;

        return $r1;
    }

    public java.lang.String toString()
    {
        org.quartz.impl.triggers.AbstractTrigger r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r8, $r9, $r11, $r12, $r13, $r14, $r16;
        java.lang.String $r3, $r7, $r10, $r17;
        java.lang.Class $r6;
        int $i0;
        java.util.Date $r15;

        r0 := @this: org.quartz.impl.triggers.AbstractTrigger;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Trigger \'");

        $r3 = virtualinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: java.lang.String getFullName()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\':  triggerClass: \'");

        $r6 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" calendar: \'");

        $r10 = virtualinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: java.lang.String getCalendarName()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' misfireInstruction: ");

        $i0 = virtualinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: int getMisfireInstruction()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" nextFireTime: ");

        $r15 = virtualinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: java.util.Date getNextFireTime()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r17;
    }

    public int compareTo(org.quartz.Trigger)
    {
        org.quartz.impl.triggers.AbstractTrigger r0;
        org.quartz.Trigger r1;
        org.quartz.TriggerKey $r2, $r3, $r4, $r5, $r6, $r7;
        int $i0;

        r0 := @this: org.quartz.impl.triggers.AbstractTrigger;

        r1 := @parameter0: org.quartz.Trigger;

        $r2 = interfaceinvoke r1.<org.quartz.Trigger: org.quartz.TriggerKey getKey()>();

        if $r2 != null goto label1;

        $r7 = virtualinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: org.quartz.TriggerKey getKey()>();

        if $r7 != null goto label1;

        return 0;

     label1:
        $r3 = interfaceinvoke r1.<org.quartz.Trigger: org.quartz.TriggerKey getKey()>();

        if $r3 != null goto label2;

        return -1;

     label2:
        $r4 = virtualinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: org.quartz.TriggerKey getKey()>();

        if $r4 != null goto label3;

        return 1;

     label3:
        $r5 = virtualinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: org.quartz.TriggerKey getKey()>();

        $r6 = interfaceinvoke r1.<org.quartz.Trigger: org.quartz.TriggerKey getKey()>();

        $i0 = virtualinvoke $r5.<org.quartz.TriggerKey: int compareTo(org.quartz.utils.Key)>($r6);

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        org.quartz.impl.triggers.AbstractTrigger r0;
        java.lang.Object r1;
        org.quartz.Trigger r2;
        boolean $z0, $z1, $z2;
        org.quartz.TriggerKey $r3, $r4, $r5, $r6;

        r0 := @this: org.quartz.impl.triggers.AbstractTrigger;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.quartz.Trigger;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (org.quartz.Trigger) r1;

        $r3 = interfaceinvoke r2.<org.quartz.Trigger: org.quartz.TriggerKey getKey()>();

        if $r3 == null goto label2;

        $r4 = virtualinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: org.quartz.TriggerKey getKey()>();

        if $r4 == null goto label2;

        $r5 = virtualinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: org.quartz.TriggerKey getKey()>();

        $r6 = interfaceinvoke r2.<org.quartz.Trigger: org.quartz.TriggerKey getKey()>();

        $z1 = virtualinvoke $r5.<org.quartz.TriggerKey: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public int hashCode()
    {
        org.quartz.impl.triggers.AbstractTrigger r0;
        org.quartz.TriggerKey $r1, $r2;
        int $i0, $i1;

        r0 := @this: org.quartz.impl.triggers.AbstractTrigger;

        $r1 = virtualinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: org.quartz.TriggerKey getKey()>();

        if $r1 != null goto label1;

        $i1 = specialinvoke r0.<java.lang.Object: int hashCode()>();

        return $i1;

     label1:
        $r2 = virtualinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: org.quartz.TriggerKey getKey()>();

        $i0 = virtualinvoke $r2.<org.quartz.TriggerKey: int hashCode()>();

        return $i0;
    }

    public java.lang.Object clone()
    {
        org.quartz.impl.triggers.AbstractTrigger r0, r1;
        java.lang.Object $r3, $r6;
        org.quartz.JobDataMap $r4, $r5, $r7;
        java.lang.CloneNotSupportedException $r8;
        java.lang.IncompatibleClassChangeError $r9;

        r0 := @this: org.quartz.impl.triggers.AbstractTrigger;

     label1:
        $r3 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r1 = (org.quartz.impl.triggers.AbstractTrigger) $r3;

        $r4 = r0.<org.quartz.impl.triggers.AbstractTrigger: org.quartz.JobDataMap jobDataMap>;

        if $r4 == null goto label2;

        $r5 = r0.<org.quartz.impl.triggers.AbstractTrigger: org.quartz.JobDataMap jobDataMap>;

        $r6 = virtualinvoke $r5.<org.quartz.JobDataMap: java.lang.Object clone()>();

        $r7 = (org.quartz.JobDataMap) $r6;

        r1.<org.quartz.impl.triggers.AbstractTrigger: org.quartz.JobDataMap jobDataMap> = $r7;

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        $r9 = new java.lang.IncompatibleClassChangeError;

        specialinvoke $r9.<java.lang.IncompatibleClassChangeError: void <init>(java.lang.String)>("Not Cloneable.");

        throw $r9;

     label4:
        return r1;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public org.quartz.TriggerBuilder getTriggerBuilder()
    {
        org.quartz.impl.triggers.AbstractTrigger r0;
        org.quartz.TriggerBuilder $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r14, $r16, $r18;
        org.quartz.JobKey $r2;
        java.lang.String $r4, $r8;
        org.quartz.JobDataMap $r6;
        java.util.Date $r10, $r15;
        org.quartz.TriggerKey $r12;
        int $i0;
        org.quartz.ScheduleBuilder $r17;

        r0 := @this: org.quartz.impl.triggers.AbstractTrigger;

        $r1 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r2 = virtualinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: org.quartz.JobKey getJobKey()>();

        $r3 = virtualinvoke $r1.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder forJob(org.quartz.JobKey)>($r2);

        $r4 = virtualinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: java.lang.String getCalendarName()>();

        $r5 = virtualinvoke $r3.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder modifiedByCalendar(java.lang.String)>($r4);

        $r6 = virtualinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: org.quartz.JobDataMap getJobDataMap()>();

        $r7 = virtualinvoke $r5.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder usingJobData(org.quartz.JobDataMap)>($r6);

        $r8 = virtualinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: java.lang.String getDescription()>();

        $r9 = virtualinvoke $r7.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withDescription(java.lang.String)>($r8);

        $r10 = virtualinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: java.util.Date getEndTime()>();

        $r11 = virtualinvoke $r9.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder endAt(java.util.Date)>($r10);

        $r12 = virtualinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: org.quartz.TriggerKey getKey()>();

        $r13 = virtualinvoke $r11.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(org.quartz.TriggerKey)>($r12);

        $i0 = virtualinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: int getPriority()>();

        $r14 = virtualinvoke $r13.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withPriority(int)>($i0);

        $r15 = virtualinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: java.util.Date getStartTime()>();

        $r16 = virtualinvoke $r14.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder startAt(java.util.Date)>($r15);

        $r17 = virtualinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: org.quartz.ScheduleBuilder getScheduleBuilder()>();

        $r18 = virtualinvoke $r16.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>($r17);

        return $r18;
    }

    public abstract org.quartz.ScheduleBuilder getScheduleBuilder();

    public volatile int compareTo(java.lang.Object)
    {
        org.quartz.impl.triggers.AbstractTrigger r0;
        java.lang.Object r1;
        org.quartz.Trigger $r2;
        int $i0;

        r0 := @this: org.quartz.impl.triggers.AbstractTrigger;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.quartz.Trigger) r1;

        $i0 = virtualinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: int compareTo(org.quartz.Trigger)>($r2);

        return $i0;
    }

    public static void <clinit>()
    {
        <org.quartz.impl.triggers.AbstractTrigger: long serialVersionUID> = -3904243490805975570L;

        return;
    }
}
