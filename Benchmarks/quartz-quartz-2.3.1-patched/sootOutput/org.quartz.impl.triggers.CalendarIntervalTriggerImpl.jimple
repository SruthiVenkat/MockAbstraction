public class org.quartz.impl.triggers.CalendarIntervalTriggerImpl extends org.quartz.impl.triggers.AbstractTrigger implements org.quartz.CalendarIntervalTrigger, org.quartz.impl.triggers.CoreTrigger
{
    private static final long serialVersionUID;
    private static final int YEAR_TO_GIVEUP_SCHEDULING_AT;
    private java.util.Date startTime;
    private java.util.Date endTime;
    private java.util.Date nextFireTime;
    private java.util.Date previousFireTime;
    private int repeatInterval;
    private org.quartz.DateBuilder$IntervalUnit repeatIntervalUnit;
    private java.util.TimeZone timeZone;
    private boolean preserveHourOfDayAcrossDaylightSavings;
    private boolean skipDayIfHourDoesNotExist;
    private int timesTriggered;
    private boolean complete;

    public void <init>()
    {
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl r0;
        org.quartz.DateBuilder$IntervalUnit $r1;

        r0 := @this: org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        specialinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: void <init>()>();

        r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date startTime> = null;

        r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date endTime> = null;

        r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date nextFireTime> = null;

        r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date previousFireTime> = null;

        r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: int repeatInterval> = 0;

        $r1 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit DAY>;

        r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: org.quartz.DateBuilder$IntervalUnit repeatIntervalUnit> = $r1;

        r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: boolean preserveHourOfDayAcrossDaylightSavings> = 0;

        r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: boolean skipDayIfHourDoesNotExist> = 0;

        r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: int timesTriggered> = 0;

        r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: boolean complete> = 0;

        return;
    }

    public void <init>(java.lang.String, org.quartz.DateBuilder$IntervalUnit, int)
    {
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl r0;
        java.lang.String r1;
        org.quartz.DateBuilder$IntervalUnit r2;
        int i0;

        r0 := @this: org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.quartz.DateBuilder$IntervalUnit;

        i0 := @parameter2: int;

        specialinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void <init>(java.lang.String,java.lang.String,org.quartz.DateBuilder$IntervalUnit,int)>(r1, null, r2, i0);

        return;
    }

    public void <init>(java.lang.String, java.lang.String, org.quartz.DateBuilder$IntervalUnit, int)
    {
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl r0;
        java.lang.String r1, r2;
        org.quartz.DateBuilder$IntervalUnit r3;
        int i0;
        java.util.Date $r4;

        r0 := @this: org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.quartz.DateBuilder$IntervalUnit;

        i0 := @parameter3: int;

        $r4 = new java.util.Date;

        specialinvoke $r4.<java.util.Date: void <init>()>();

        specialinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void <init>(java.lang.String,java.lang.String,java.util.Date,java.util.Date,org.quartz.DateBuilder$IntervalUnit,int)>(r1, r2, $r4, null, r3, i0);

        return;
    }

    public void <init>(java.lang.String, java.util.Date, java.util.Date, org.quartz.DateBuilder$IntervalUnit, int)
    {
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl r0;
        java.lang.String r1;
        java.util.Date r2, r3;
        org.quartz.DateBuilder$IntervalUnit r4;
        int i0;

        r0 := @this: org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Date;

        r3 := @parameter2: java.util.Date;

        r4 := @parameter3: org.quartz.DateBuilder$IntervalUnit;

        i0 := @parameter4: int;

        specialinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void <init>(java.lang.String,java.lang.String,java.util.Date,java.util.Date,org.quartz.DateBuilder$IntervalUnit,int)>(r1, null, r2, r3, r4, i0);

        return;
    }

    public void <init>(java.lang.String, java.lang.String, java.util.Date, java.util.Date, org.quartz.DateBuilder$IntervalUnit, int)
    {
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl r0;
        java.lang.String r1, r2;
        java.util.Date r3, r4;
        org.quartz.DateBuilder$IntervalUnit r5, $r6;
        int i0;

        r0 := @this: org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.Date;

        r4 := @parameter3: java.util.Date;

        r5 := @parameter4: org.quartz.DateBuilder$IntervalUnit;

        i0 := @parameter5: int;

        specialinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: void <init>(java.lang.String,java.lang.String)>(r1, r2);

        r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date startTime> = null;

        r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date endTime> = null;

        r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date nextFireTime> = null;

        r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date previousFireTime> = null;

        r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: int repeatInterval> = 0;

        $r6 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit DAY>;

        r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: org.quartz.DateBuilder$IntervalUnit repeatIntervalUnit> = $r6;

        r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: boolean preserveHourOfDayAcrossDaylightSavings> = 0;

        r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: boolean skipDayIfHourDoesNotExist> = 0;

        r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: int timesTriggered> = 0;

        r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: boolean complete> = 0;

        virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setStartTime(java.util.Date)>(r3);

        virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setEndTime(java.util.Date)>(r4);

        virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)>(r5);

        virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setRepeatInterval(int)>(i0);

        return;
    }

    public void <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.util.Date, java.util.Date, org.quartz.DateBuilder$IntervalUnit, int)
    {
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl r0;
        java.lang.String r1, r2, r3, r4;
        java.util.Date r5, r6;
        org.quartz.DateBuilder$IntervalUnit r7, $r8;
        int i0;

        r0 := @this: org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.util.Date;

        r6 := @parameter5: java.util.Date;

        r7 := @parameter6: org.quartz.DateBuilder$IntervalUnit;

        i0 := @parameter7: int;

        specialinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3, r4);

        r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date startTime> = null;

        r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date endTime> = null;

        r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date nextFireTime> = null;

        r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date previousFireTime> = null;

        r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: int repeatInterval> = 0;

        $r8 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit DAY>;

        r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: org.quartz.DateBuilder$IntervalUnit repeatIntervalUnit> = $r8;

        r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: boolean preserveHourOfDayAcrossDaylightSavings> = 0;

        r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: boolean skipDayIfHourDoesNotExist> = 0;

        r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: int timesTriggered> = 0;

        r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: boolean complete> = 0;

        virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setStartTime(java.util.Date)>(r5);

        virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setEndTime(java.util.Date)>(r6);

        virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)>(r7);

        virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setRepeatInterval(int)>(i0);

        return;
    }

    public java.util.Date getStartTime()
    {
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl r0;
        java.util.Date $r1, $r2, $r3;

        r0 := @this: org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        $r1 = r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date startTime>;

        if $r1 != null goto label1;

        $r3 = new java.util.Date;

        specialinvoke $r3.<java.util.Date: void <init>()>();

        r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date startTime> = $r3;

     label1:
        $r2 = r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date startTime>;

        return $r2;
    }

    public void setStartTime(java.util.Date)
    {
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl r0;
        java.util.Date r1, r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3, $r4;

        r0 := @this: org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        r1 := @parameter0: java.util.Date;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Start time cannot be null");

        throw $r4;

     label1:
        r2 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date getEndTime()>();

        if r2 == null goto label2;

        $z0 = virtualinvoke r2.<java.util.Date: boolean before(java.util.Date)>(r1);

        if $z0 == 0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("End time cannot be before start time");

        throw $r3;

     label2:
        r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date startTime> = r1;

        return;
    }

    public java.util.Date getEndTime()
    {
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl r0;
        java.util.Date $r1;

        r0 := @this: org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        $r1 = r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date endTime>;

        return $r1;
    }

    public void setEndTime(java.util.Date)
    {
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl r0;
        java.util.Date r1, r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        r1 := @parameter0: java.util.Date;

        r2 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date getStartTime()>();

        if r2 == null goto label1;

        if r1 == null goto label1;

        $z0 = virtualinvoke r2.<java.util.Date: boolean after(java.util.Date)>(r1);

        if $z0 == 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("End time cannot be before start time");

        throw $r3;

     label1:
        r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date endTime> = r1;

        return;
    }

    public org.quartz.DateBuilder$IntervalUnit getRepeatIntervalUnit()
    {
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl r0;
        org.quartz.DateBuilder$IntervalUnit $r1;

        r0 := @this: org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        $r1 = r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: org.quartz.DateBuilder$IntervalUnit repeatIntervalUnit>;

        return $r1;
    }

    public void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)
    {
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl r0;
        org.quartz.DateBuilder$IntervalUnit r1;

        r0 := @this: org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        r1 := @parameter0: org.quartz.DateBuilder$IntervalUnit;

        r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: org.quartz.DateBuilder$IntervalUnit repeatIntervalUnit> = r1;

        return;
    }

    public int getRepeatInterval()
    {
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl r0;
        int $i0;

        r0 := @this: org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        $i0 = r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: int repeatInterval>;

        return $i0;
    }

    public void setRepeatInterval(int)
    {
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl r0;
        int i0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Repeat interval must be >= 1");

        throw $r1;

     label1:
        r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: int repeatInterval> = i0;

        return;
    }

    public java.util.TimeZone getTimeZone()
    {
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl r0;
        java.util.TimeZone $r1, $r2, $r3;

        r0 := @this: org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        $r1 = r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.TimeZone timeZone>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();

        r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.TimeZone timeZone> = $r3;

     label1:
        $r2 = r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.TimeZone timeZone>;

        return $r2;
    }

    public void setTimeZone(java.util.TimeZone)
    {
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl r0;
        java.util.TimeZone r1;

        r0 := @this: org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        r1 := @parameter0: java.util.TimeZone;

        r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.TimeZone timeZone> = r1;

        return;
    }

    public boolean isPreserveHourOfDayAcrossDaylightSavings()
    {
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl r0;
        boolean $z0;

        r0 := @this: org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        $z0 = r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: boolean preserveHourOfDayAcrossDaylightSavings>;

        return $z0;
    }

    public void setPreserveHourOfDayAcrossDaylightSavings(boolean)
    {
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl r0;
        boolean z0;

        r0 := @this: org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        z0 := @parameter0: boolean;

        r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: boolean preserveHourOfDayAcrossDaylightSavings> = z0;

        return;
    }

    public boolean isSkipDayIfHourDoesNotExist()
    {
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl r0;
        boolean $z0;

        r0 := @this: org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        $z0 = r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: boolean skipDayIfHourDoesNotExist>;

        return $z0;
    }

    public void setSkipDayIfHourDoesNotExist(boolean)
    {
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl r0;
        boolean z0;

        r0 := @this: org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        z0 := @parameter0: boolean;

        r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: boolean skipDayIfHourDoesNotExist> = z0;

        return;
    }

    public int getTimesTriggered()
    {
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl r0;
        int $i0;

        r0 := @this: org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        $i0 = r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: int timesTriggered>;

        return $i0;
    }

    public void setTimesTriggered(int)
    {
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl r0;
        int i0;

        r0 := @this: org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        i0 := @parameter0: int;

        r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: int timesTriggered> = i0;

        return;
    }

    protected boolean validateMisfireInstruction(int)
    {
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl r0;
        int i0;
        boolean $z0;

        r0 := @this: org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        i0 := @parameter0: int;

        if i0 >= -1 goto label1;

        return 0;

     label1:
        if i0 > 2 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public void updateAfterMisfire(org.quartz.Calendar)
    {
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl r0;
        org.quartz.Calendar r1;
        java.util.Date $r2, $r3, r4;
        long $l0;
        boolean $z0;
        int i1;

        r0 := @this: org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        r1 := @parameter0: org.quartz.Calendar;

        i1 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: int getMisfireInstruction()>();

        if i1 != -1 goto label1;

        return;

     label1:
        if i1 != 0 goto label2;

        i1 = 1;

     label2:
        if i1 != 2 goto label5;

        $r3 = new java.util.Date;

        specialinvoke $r3.<java.util.Date: void <init>()>();

        r4 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>($r3);

     label3:
        if r4 == null goto label4;

        if r1 == null goto label4;

        $l0 = virtualinvoke r4.<java.util.Date: long getTime()>();

        $z0 = interfaceinvoke r1.<org.quartz.Calendar: boolean isTimeIncluded(long)>($l0);

        if $z0 != 0 goto label4;

        r4 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>(r4);

        goto label3;

     label4:
        virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setNextFireTime(java.util.Date)>(r4);

        goto label6;

     label5:
        if i1 != 1 goto label6;

        $r2 = new java.util.Date;

        specialinvoke $r2.<java.util.Date: void <init>()>();

        virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setNextFireTime(java.util.Date)>($r2);

     label6:
        return;
    }

    public void triggered(org.quartz.Calendar)
    {
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl r0;
        org.quartz.Calendar r1;
        java.util.Calendar r2;
        int $i0, $i1, $i3, $i4;
        java.util.Date $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        long $l2;
        boolean $z0;

        r0 := @this: org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        r1 := @parameter0: org.quartz.Calendar;

        $i0 = r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: int timesTriggered>;

        $i1 = $i0 + 1;

        r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: int timesTriggered> = $i1;

        $r3 = r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date nextFireTime>;

        r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date previousFireTime> = $r3;

        $r4 = r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date nextFireTime>;

        $r5 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>($r4);

        r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date nextFireTime> = $r5;

     label1:
        $r6 = r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date nextFireTime>;

        if $r6 == null goto label4;

        if r1 == null goto label4;

        $r7 = r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date nextFireTime>;

        $l2 = virtualinvoke $r7.<java.util.Date: long getTime()>();

        $z0 = interfaceinvoke r1.<org.quartz.Calendar: boolean isTimeIncluded(long)>($l2);

        if $z0 != 0 goto label4;

        $r8 = r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date nextFireTime>;

        $r9 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>($r8);

        r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date nextFireTime> = $r9;

        $r10 = r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date nextFireTime>;

        if $r10 != null goto label2;

        goto label4;

     label2:
        r2 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $r11 = r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date nextFireTime>;

        virtualinvoke r2.<java.util.Calendar: void setTime(java.util.Date)>($r11);

        $i3 = virtualinvoke r2.<java.util.Calendar: int get(int)>(1);

        $i4 = <org.quartz.impl.triggers.CalendarIntervalTriggerImpl: int YEAR_TO_GIVEUP_SCHEDULING_AT>;

        if $i3 <= $i4 goto label3;

        r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date nextFireTime> = null;

     label3:
        goto label1;

     label4:
        return;
    }

    public void updateWithNewCalendar(org.quartz.Calendar, long)
    {
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl r0;
        org.quartz.Calendar r1;
        long l0, l1, $l2, $l5, $l6;
        java.util.Calendar r3;
        java.util.Date $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18;
        boolean $z0, $z1;
        int $i3, $i4;
        byte $b7;

        r0 := @this: org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        r1 := @parameter0: org.quartz.Calendar;

        l0 := @parameter1: long;

        $r4 = r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date previousFireTime>;

        $r5 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>($r4);

        r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date nextFireTime> = $r5;

        $r6 = r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date nextFireTime>;

        if $r6 == null goto label1;

        if r1 != null goto label2;

     label1:
        return;

     label2:
        $r7 = new java.util.Date;

        specialinvoke $r7.<java.util.Date: void <init>()>();

     label3:
        $r8 = r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date nextFireTime>;

        if $r8 == null goto label7;

        $r9 = r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date nextFireTime>;

        $l2 = virtualinvoke $r9.<java.util.Date: long getTime()>();

        $z0 = interfaceinvoke r1.<org.quartz.Calendar: boolean isTimeIncluded(long)>($l2);

        if $z0 != 0 goto label7;

        $r10 = r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date nextFireTime>;

        $r11 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>($r10);

        r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date nextFireTime> = $r11;

        $r12 = r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date nextFireTime>;

        if $r12 != null goto label4;

        goto label7;

     label4:
        r3 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $r13 = r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date nextFireTime>;

        virtualinvoke r3.<java.util.Calendar: void setTime(java.util.Date)>($r13);

        $i3 = virtualinvoke r3.<java.util.Calendar: int get(int)>(1);

        $i4 = <org.quartz.impl.triggers.CalendarIntervalTriggerImpl: int YEAR_TO_GIVEUP_SCHEDULING_AT>;

        if $i3 <= $i4 goto label5;

        r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date nextFireTime> = null;

     label5:
        $r14 = r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date nextFireTime>;

        if $r14 == null goto label6;

        $r15 = r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date nextFireTime>;

        $z1 = virtualinvoke $r15.<java.util.Date: boolean before(java.util.Date)>($r7);

        if $z1 == 0 goto label6;

        $l5 = virtualinvoke $r7.<java.util.Date: long getTime()>();

        $r16 = r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date nextFireTime>;

        $l6 = virtualinvoke $r16.<java.util.Date: long getTime()>();

        l1 = $l5 - $l6;

        $b7 = l1 cmp l0;

        if $b7 < 0 goto label6;

        $r17 = r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date nextFireTime>;

        $r18 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>($r17);

        r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date nextFireTime> = $r18;

     label6:
        goto label3;

     label7:
        return;
    }

    public java.util.Date computeFirstFireTime(org.quartz.Calendar)
    {
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl r0;
        org.quartz.Calendar r1;
        java.util.Calendar r2;
        java.util.Date $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        long $l0;
        boolean $z0;
        int $i1, $i2;

        r0 := @this: org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        r1 := @parameter0: org.quartz.Calendar;

        $r3 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date getStartTime()>();

        r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date nextFireTime> = $r3;

     label1:
        $r4 = r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date nextFireTime>;

        if $r4 == null goto label4;

        if r1 == null goto label4;

        $r5 = r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date nextFireTime>;

        $l0 = virtualinvoke $r5.<java.util.Date: long getTime()>();

        $z0 = interfaceinvoke r1.<org.quartz.Calendar: boolean isTimeIncluded(long)>($l0);

        if $z0 != 0 goto label4;

        $r6 = r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date nextFireTime>;

        $r7 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>($r6);

        r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date nextFireTime> = $r7;

        $r8 = r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date nextFireTime>;

        if $r8 != null goto label2;

        goto label4;

     label2:
        r2 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $r9 = r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date nextFireTime>;

        virtualinvoke r2.<java.util.Calendar: void setTime(java.util.Date)>($r9);

        $i1 = virtualinvoke r2.<java.util.Calendar: int get(int)>(1);

        $i2 = <org.quartz.impl.triggers.CalendarIntervalTriggerImpl: int YEAR_TO_GIVEUP_SCHEDULING_AT>;

        if $i1 <= $i2 goto label3;

        return null;

     label3:
        goto label1;

     label4:
        $r10 = r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date nextFireTime>;

        return $r10;
    }

    public java.util.Date getNextFireTime()
    {
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl r0;
        java.util.Date $r1;

        r0 := @this: org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        $r1 = r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date nextFireTime>;

        return $r1;
    }

    public java.util.Date getPreviousFireTime()
    {
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl r0;
        java.util.Date $r1;

        r0 := @this: org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        $r1 = r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date previousFireTime>;

        return $r1;
    }

    public void setNextFireTime(java.util.Date)
    {
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl r0;
        java.util.Date r1;

        r0 := @this: org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        r1 := @parameter0: java.util.Date;

        r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date nextFireTime> = r1;

        return;
    }

    public void setPreviousFireTime(java.util.Date)
    {
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl r0;
        java.util.Date r1;

        r0 := @this: org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        r1 := @parameter0: java.util.Date;

        r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date previousFireTime> = r1;

        return;
    }

    public java.util.Date getFireTimeAfter(java.util.Date)
    {
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl r0;
        java.util.Date r1, $r2;

        r0 := @this: org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        r1 := @parameter0: java.util.Date;

        $r2 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date,boolean)>(r1, 0);

        return $r2;
    }

    protected java.util.Date getFireTimeAfter(java.util.Date, boolean)
    {
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16;
        long l0, l1, l2, l3, l4, $l6, $l7, $l9, $l23, $l24, $l25, $l26, $l36, $l37, $l38, $l48, $l49, $l50, $l51, $l52, $l57, $l58, $l59, $l64, $l70, l71, l72, l73, l75, l76, $l78, $l79, l81, l82, $l84, $l85;
        java.util.Calendar r1, r2;
        java.util.Date $r3, $r4, $r5, $r7, $r22, $r23, $r25, $r26, r27, r28, $r29, $r30;
        byte $b5, $b10, $b27, $b34, $b35, $b39, $b46, $b47, $b53, $b60, $b65, $b69;
        int $i8, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i28, $i29, $i30, $i31, $i32, $i33, $i40, $i41, $i42, $i43, $i44, $i45, $i54, $i55, $i56, $i61, $i62, $i63, $i66, $i67, $i68, i74, $i77, $i80, $i83, $i86;
        java.util.TimeZone $r6, $r24;
        org.quartz.DateBuilder$IntervalUnit $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;

        r0 := @this: org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        r27 := @parameter0: java.util.Date;

        z0 := @parameter1: boolean;

        $z1 = r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: boolean complete>;

        if $z1 == 0 goto label01;

        return null;

     label01:
        if r27 != null goto label02;

        $r26 = new java.util.Date;

        specialinvoke $r26.<java.util.Date: void <init>()>();

        r27 = $r26;

     label02:
        $r3 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date getStartTime()>();

        l0 = virtualinvoke $r3.<java.util.Date: long getTime()>();

        l1 = virtualinvoke r27.<java.util.Date: long getTime()>();

        $r4 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date getEndTime()>();

        if $r4 != null goto label03;

        $l70 = 9223372036854775807L;

        goto label04;

     label03:
        $r5 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date getEndTime()>();

        $l70 = virtualinvoke $r5.<java.util.Date: long getTime()>();

     label04:
        l2 = $l70;

        if z0 != 0 goto label05;

        $b69 = $l70 cmp l1;

        if $b69 > 0 goto label05;

        return null;

     label05:
        $b5 = l1 cmp l0;

        if $b5 >= 0 goto label06;

        $r25 = new java.util.Date;

        specialinvoke $r25.<java.util.Date: void <init>(long)>(l0);

        return $r25;

     label06:
        $l6 = l1 - l0;

        $l7 = $l6 / 1000L;

        l3 = 1L + $l7;

        r28 = null;

        $i8 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: int getRepeatInterval()>();

        l4 = (long) $i8;

        r1 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r1.<java.util.Calendar: void setTime(java.util.Date)>(r27);

        r2 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $r6 = r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.TimeZone timeZone>;

        if $r6 == null goto label07;

        $r24 = r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.TimeZone timeZone>;

        virtualinvoke r2.<java.util.Calendar: void setTimeZone(java.util.TimeZone)>($r24);

     label07:
        $r7 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date getStartTime()>();

        virtualinvoke r2.<java.util.Calendar: void setTime(java.util.Date)>($r7);

        virtualinvoke r2.<java.util.Calendar: void setLenient(boolean)>(1);

        $r8 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: org.quartz.DateBuilder$IntervalUnit getRepeatIntervalUnit()>();

        $r9 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit SECOND>;

        $z2 = virtualinvoke $r8.<org.quartz.DateBuilder$IntervalUnit: boolean equals(java.lang.Object)>($r9);

        if $z2 == 0 goto label09;

        l71 = l3 / l4;

        $l64 = l3 % l4;

        $b65 = $l64 cmp 0L;

        if $b65 == 0 goto label08;

        l71 = l71 + 1L;

     label08:
        $i66 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: int getRepeatInterval()>();

        $i67 = (int) l71;

        $i68 = $i66 * $i67;

        virtualinvoke r2.<java.util.Calendar: void add(int,int)>(13, $i68);

        r28 = virtualinvoke r2.<java.util.Calendar: java.util.Date getTime()>();

        goto label35;

     label09:
        $r10 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: org.quartz.DateBuilder$IntervalUnit getRepeatIntervalUnit()>();

        $r11 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit MINUTE>;

        $z3 = virtualinvoke $r10.<org.quartz.DateBuilder$IntervalUnit: boolean equals(java.lang.Object)>($r11);

        if $z3 == 0 goto label11;

        $l57 = l4 * 60L;

        l72 = l3 / $l57;

        $l58 = l4 * 60L;

        $l59 = l3 % $l58;

        $b60 = $l59 cmp 0L;

        if $b60 == 0 goto label10;

        l72 = l72 + 1L;

     label10:
        $i61 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: int getRepeatInterval()>();

        $i62 = (int) l72;

        $i63 = $i61 * $i62;

        virtualinvoke r2.<java.util.Calendar: void add(int,int)>(12, $i63);

        r28 = virtualinvoke r2.<java.util.Calendar: java.util.Date getTime()>();

        goto label35;

     label11:
        $r12 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: org.quartz.DateBuilder$IntervalUnit getRepeatIntervalUnit()>();

        $r13 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit HOUR>;

        $z4 = virtualinvoke $r12.<org.quartz.DateBuilder$IntervalUnit: boolean equals(java.lang.Object)>($r13);

        if $z4 == 0 goto label13;

        $l48 = l4 * 60L;

        $l49 = $l48 * 60L;

        l73 = l3 / $l49;

        $l50 = l4 * 60L;

        $l51 = $l50 * 60L;

        $l52 = l3 % $l51;

        $b53 = $l52 cmp 0L;

        if $b53 == 0 goto label12;

        l73 = l73 + 1L;

     label12:
        $i54 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: int getRepeatInterval()>();

        $i55 = (int) l73;

        $i56 = $i54 * $i55;

        virtualinvoke r2.<java.util.Calendar: void add(int,int)>(11, $i56);

        r28 = virtualinvoke r2.<java.util.Calendar: java.util.Date getTime()>();

        goto label35;

     label13:
        i74 = virtualinvoke r2.<java.util.Calendar: int get(int)>(11);

        $r14 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: org.quartz.DateBuilder$IntervalUnit getRepeatIntervalUnit()>();

        $r15 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit DAY>;

        $z5 = virtualinvoke $r14.<org.quartz.DateBuilder$IntervalUnit: boolean equals(java.lang.Object)>($r15);

        if $z5 == 0 goto label20;

        virtualinvoke r2.<java.util.Calendar: void setLenient(boolean)>(1);

        $l36 = l4 * 24L;

        $l37 = $l36 * 60L;

        $l38 = $l37 * 60L;

        l75 = l3 / $l38;

        $b39 = l75 cmp 20L;

        if $b39 <= 0 goto label17;

        $b46 = l75 cmp 50L;

        if $b46 >= 0 goto label14;

        $d10 = (double) l75;

        $d11 = $d10 * 0.8;

        l76 = (long) $d11;

        goto label16;

     label14:
        $b47 = l75 cmp 500L;

        if $b47 >= 0 goto label15;

        $d8 = (double) l75;

        $d9 = $d8 * 0.9;

        l76 = (long) $d9;

        goto label16;

     label15:
        $d6 = (double) l75;

        $d7 = $d6 * 0.95;

        l76 = (long) $d7;

     label16:
        $i77 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: int getRepeatInterval()>();

        $l78 = (long) $i77;

        $l79 = $l78 * l76;

        $i80 = (int) $l79;

        virtualinvoke r2.<java.util.Calendar: void add(int,int)>(6, $i80);

     label17:
        $r29 = virtualinvoke r2.<java.util.Calendar: java.util.Date getTime()>();

        $z11 = virtualinvoke $r29.<java.util.Date: boolean after(java.util.Date)>(r27);

        if $z11 != 0 goto label18;

        $i43 = virtualinvoke r2.<java.util.Calendar: int get(int)>(1);

        $i44 = <org.quartz.impl.triggers.CalendarIntervalTriggerImpl: int YEAR_TO_GIVEUP_SCHEDULING_AT>;

        if $i43 >= $i44 goto label18;

        $i45 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: int getRepeatInterval()>();

        virtualinvoke r2.<java.util.Calendar: void add(int,int)>(6, $i45);

        goto label17;

     label18:
        $z12 = specialinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: boolean daylightSavingHourShiftOccurredAndAdvanceNeeded(java.util.Calendar,int,java.util.Date)>(r2, i74, r27);

        if $z12 == 0 goto label19;

        $i40 = virtualinvoke r2.<java.util.Calendar: int get(int)>(1);

        $i41 = <org.quartz.impl.triggers.CalendarIntervalTriggerImpl: int YEAR_TO_GIVEUP_SCHEDULING_AT>;

        if $i40 >= $i41 goto label19;

        $i42 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: int getRepeatInterval()>();

        virtualinvoke r2.<java.util.Calendar: void add(int,int)>(6, $i42);

        goto label18;

     label19:
        r28 = virtualinvoke r2.<java.util.Calendar: java.util.Date getTime()>();

        goto label35;

     label20:
        $r16 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: org.quartz.DateBuilder$IntervalUnit getRepeatIntervalUnit()>();

        $r17 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit WEEK>;

        $z6 = virtualinvoke $r16.<org.quartz.DateBuilder$IntervalUnit: boolean equals(java.lang.Object)>($r17);

        if $z6 == 0 goto label27;

        virtualinvoke r2.<java.util.Calendar: void setLenient(boolean)>(1);

        $l23 = l4 * 7L;

        $l24 = $l23 * 24L;

        $l25 = $l24 * 60L;

        $l26 = $l25 * 60L;

        l81 = l3 / $l26;

        $b27 = l81 cmp 20L;

        if $b27 <= 0 goto label24;

        $b34 = l81 cmp 50L;

        if $b34 >= 0 goto label21;

        $d4 = (double) l81;

        $d5 = $d4 * 0.8;

        l82 = (long) $d5;

        goto label23;

     label21:
        $b35 = l81 cmp 500L;

        if $b35 >= 0 goto label22;

        $d2 = (double) l81;

        $d3 = $d2 * 0.9;

        l82 = (long) $d3;

        goto label23;

     label22:
        $d0 = (double) l81;

        $d1 = $d0 * 0.95;

        l82 = (long) $d1;

     label23:
        $i83 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: int getRepeatInterval()>();

        $l84 = (long) $i83;

        $l85 = $l84 * l82;

        $i86 = (int) $l85;

        virtualinvoke r2.<java.util.Calendar: void add(int,int)>(3, $i86);

     label24:
        $r30 = virtualinvoke r2.<java.util.Calendar: java.util.Date getTime()>();

        $z13 = virtualinvoke $r30.<java.util.Date: boolean after(java.util.Date)>(r27);

        if $z13 != 0 goto label25;

        $i31 = virtualinvoke r2.<java.util.Calendar: int get(int)>(1);

        $i32 = <org.quartz.impl.triggers.CalendarIntervalTriggerImpl: int YEAR_TO_GIVEUP_SCHEDULING_AT>;

        if $i31 >= $i32 goto label25;

        $i33 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: int getRepeatInterval()>();

        virtualinvoke r2.<java.util.Calendar: void add(int,int)>(3, $i33);

        goto label24;

     label25:
        $z14 = specialinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: boolean daylightSavingHourShiftOccurredAndAdvanceNeeded(java.util.Calendar,int,java.util.Date)>(r2, i74, r27);

        if $z14 == 0 goto label26;

        $i28 = virtualinvoke r2.<java.util.Calendar: int get(int)>(1);

        $i29 = <org.quartz.impl.triggers.CalendarIntervalTriggerImpl: int YEAR_TO_GIVEUP_SCHEDULING_AT>;

        if $i28 >= $i29 goto label26;

        $i30 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: int getRepeatInterval()>();

        virtualinvoke r2.<java.util.Calendar: void add(int,int)>(3, $i30);

        goto label25;

     label26:
        r28 = virtualinvoke r2.<java.util.Calendar: java.util.Date getTime()>();

        goto label35;

     label27:
        $r18 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: org.quartz.DateBuilder$IntervalUnit getRepeatIntervalUnit()>();

        $r19 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit MONTH>;

        $z7 = virtualinvoke $r18.<org.quartz.DateBuilder$IntervalUnit: boolean equals(java.lang.Object)>($r19);

        if $z7 == 0 goto label31;

        virtualinvoke r2.<java.util.Calendar: void setLenient(boolean)>(1);

     label28:
        $r23 = virtualinvoke r2.<java.util.Calendar: java.util.Date getTime()>();

        $z10 = virtualinvoke $r23.<java.util.Date: boolean after(java.util.Date)>(r27);

        if $z10 != 0 goto label29;

        $i20 = virtualinvoke r2.<java.util.Calendar: int get(int)>(1);

        $i21 = <org.quartz.impl.triggers.CalendarIntervalTriggerImpl: int YEAR_TO_GIVEUP_SCHEDULING_AT>;

        if $i20 >= $i21 goto label29;

        $i22 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: int getRepeatInterval()>();

        virtualinvoke r2.<java.util.Calendar: void add(int,int)>(2, $i22);

        goto label28;

     label29:
        $z15 = specialinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: boolean daylightSavingHourShiftOccurredAndAdvanceNeeded(java.util.Calendar,int,java.util.Date)>(r2, i74, r27);

        if $z15 == 0 goto label30;

        $i17 = virtualinvoke r2.<java.util.Calendar: int get(int)>(1);

        $i18 = <org.quartz.impl.triggers.CalendarIntervalTriggerImpl: int YEAR_TO_GIVEUP_SCHEDULING_AT>;

        if $i17 >= $i18 goto label30;

        $i19 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: int getRepeatInterval()>();

        virtualinvoke r2.<java.util.Calendar: void add(int,int)>(2, $i19);

        goto label29;

     label30:
        r28 = virtualinvoke r2.<java.util.Calendar: java.util.Date getTime()>();

        goto label35;

     label31:
        $r20 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: org.quartz.DateBuilder$IntervalUnit getRepeatIntervalUnit()>();

        $r21 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit YEAR>;

        $z8 = virtualinvoke $r20.<org.quartz.DateBuilder$IntervalUnit: boolean equals(java.lang.Object)>($r21);

        if $z8 == 0 goto label35;

     label32:
        $r22 = virtualinvoke r2.<java.util.Calendar: java.util.Date getTime()>();

        $z9 = virtualinvoke $r22.<java.util.Date: boolean after(java.util.Date)>(r27);

        if $z9 != 0 goto label33;

        $i14 = virtualinvoke r2.<java.util.Calendar: int get(int)>(1);

        $i15 = <org.quartz.impl.triggers.CalendarIntervalTriggerImpl: int YEAR_TO_GIVEUP_SCHEDULING_AT>;

        if $i14 >= $i15 goto label33;

        $i16 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: int getRepeatInterval()>();

        virtualinvoke r2.<java.util.Calendar: void add(int,int)>(1, $i16);

        goto label32;

     label33:
        $z16 = specialinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: boolean daylightSavingHourShiftOccurredAndAdvanceNeeded(java.util.Calendar,int,java.util.Date)>(r2, i74, r27);

        if $z16 == 0 goto label34;

        $i11 = virtualinvoke r2.<java.util.Calendar: int get(int)>(1);

        $i12 = <org.quartz.impl.triggers.CalendarIntervalTriggerImpl: int YEAR_TO_GIVEUP_SCHEDULING_AT>;

        if $i11 >= $i12 goto label34;

        $i13 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: int getRepeatInterval()>();

        virtualinvoke r2.<java.util.Calendar: void add(int,int)>(1, $i13);

        goto label33;

     label34:
        r28 = virtualinvoke r2.<java.util.Calendar: java.util.Date getTime()>();

     label35:
        if z0 != 0 goto label36;

        $l9 = virtualinvoke r28.<java.util.Date: long getTime()>();

        $b10 = l2 cmp $l9;

        if $b10 > 0 goto label36;

        return null;

     label36:
        return r28;
    }

    private boolean daylightSavingHourShiftOccurredAndAdvanceNeeded(java.util.Calendar, int, java.util.Date)
    {
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl r0;
        java.util.Calendar r1;
        int i0, $i1, $i2;
        java.util.Date r2, $r3;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        r1 := @parameter0: java.util.Calendar;

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.Date;

        $z0 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: boolean isPreserveHourOfDayAcrossDaylightSavings()>();

        if $z0 == 0 goto label4;

        $i1 = virtualinvoke r1.<java.util.Calendar: int get(int)>(11);

        if $i1 == i0 goto label4;

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(11, i0);

        $i2 = virtualinvoke r1.<java.util.Calendar: int get(int)>(11);

        if $i2 == i0 goto label1;

        $z2 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: boolean isSkipDayIfHourDoesNotExist()>();

        return $z2;

     label1:
        $r3 = virtualinvoke r1.<java.util.Calendar: java.util.Date getTime()>();

        $z1 = virtualinvoke $r3.<java.util.Date: boolean after(java.util.Date)>(r2);

        if $z1 != 0 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;

     label4:
        return 0;
    }

    public java.util.Date getFinalFireTime()
    {
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl r0;
        java.util.Calendar r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.util.Date $r2, $r3, $r4, $r5, r23, $r24;
        long $l0, $l1;
        java.util.TimeZone $r6, $r21;
        org.quartz.DateBuilder$IntervalUnit $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20;
        int $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;

        r0 := @this: org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        $z0 = r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: boolean complete>;

        if $z0 != 0 goto label01;

        $r2 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date getEndTime()>();

        if $r2 != null goto label02;

     label01:
        return null;

     label02:
        $r3 = new java.util.Date;

        $r4 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date getEndTime()>();

        $l0 = virtualinvoke $r4.<java.util.Date: long getTime()>();

        $l1 = $l0 - 1000L;

        specialinvoke $r3.<java.util.Date: void <init>(long)>($l1);

        r23 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date,boolean)>($r3, 1);

        $r5 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date getEndTime()>();

        $z1 = virtualinvoke r23.<java.util.Date: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label03;

        return r23;

     label03:
        r1 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $r6 = r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.TimeZone timeZone>;

        if $r6 == null goto label04;

        $r21 = r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.TimeZone timeZone>;

        virtualinvoke r1.<java.util.Calendar: void setTimeZone(java.util.TimeZone)>($r21);

     label04:
        virtualinvoke r1.<java.util.Calendar: void setTime(java.util.Date)>(r23);

        virtualinvoke r1.<java.util.Calendar: void setLenient(boolean)>(1);

        $r7 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: org.quartz.DateBuilder$IntervalUnit getRepeatIntervalUnit()>();

        $r8 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit SECOND>;

        $z2 = virtualinvoke $r7.<org.quartz.DateBuilder$IntervalUnit: boolean equals(java.lang.Object)>($r8);

        if $z2 == 0 goto label05;

        $i14 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: int getRepeatInterval()>();

        $i15 = -1 * $i14;

        virtualinvoke r1.<java.util.Calendar: void add(int,int)>(13, $i15);

        goto label11;

     label05:
        $r9 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: org.quartz.DateBuilder$IntervalUnit getRepeatIntervalUnit()>();

        $r10 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit MINUTE>;

        $z3 = virtualinvoke $r9.<org.quartz.DateBuilder$IntervalUnit: boolean equals(java.lang.Object)>($r10);

        if $z3 == 0 goto label06;

        $i12 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: int getRepeatInterval()>();

        $i13 = -1 * $i12;

        virtualinvoke r1.<java.util.Calendar: void add(int,int)>(12, $i13);

        goto label11;

     label06:
        $r11 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: org.quartz.DateBuilder$IntervalUnit getRepeatIntervalUnit()>();

        $r12 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit HOUR>;

        $z4 = virtualinvoke $r11.<org.quartz.DateBuilder$IntervalUnit: boolean equals(java.lang.Object)>($r12);

        if $z4 == 0 goto label07;

        $i10 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: int getRepeatInterval()>();

        $i11 = -1 * $i10;

        virtualinvoke r1.<java.util.Calendar: void add(int,int)>(11, $i11);

        goto label11;

     label07:
        $r13 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: org.quartz.DateBuilder$IntervalUnit getRepeatIntervalUnit()>();

        $r14 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit DAY>;

        $z5 = virtualinvoke $r13.<org.quartz.DateBuilder$IntervalUnit: boolean equals(java.lang.Object)>($r14);

        if $z5 == 0 goto label08;

        $i8 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: int getRepeatInterval()>();

        $i9 = -1 * $i8;

        virtualinvoke r1.<java.util.Calendar: void add(int,int)>(6, $i9);

        goto label11;

     label08:
        $r15 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: org.quartz.DateBuilder$IntervalUnit getRepeatIntervalUnit()>();

        $r16 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit WEEK>;

        $z6 = virtualinvoke $r15.<org.quartz.DateBuilder$IntervalUnit: boolean equals(java.lang.Object)>($r16);

        if $z6 == 0 goto label09;

        $i6 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: int getRepeatInterval()>();

        $i7 = -1 * $i6;

        virtualinvoke r1.<java.util.Calendar: void add(int,int)>(3, $i7);

        goto label11;

     label09:
        $r17 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: org.quartz.DateBuilder$IntervalUnit getRepeatIntervalUnit()>();

        $r18 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit MONTH>;

        $z7 = virtualinvoke $r17.<org.quartz.DateBuilder$IntervalUnit: boolean equals(java.lang.Object)>($r18);

        if $z7 == 0 goto label10;

        $i4 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: int getRepeatInterval()>();

        $i5 = -1 * $i4;

        virtualinvoke r1.<java.util.Calendar: void add(int,int)>(2, $i5);

        goto label11;

     label10:
        $r19 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: org.quartz.DateBuilder$IntervalUnit getRepeatIntervalUnit()>();

        $r20 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit YEAR>;

        $z8 = virtualinvoke $r19.<org.quartz.DateBuilder$IntervalUnit: boolean equals(java.lang.Object)>($r20);

        if $z8 == 0 goto label11;

        $i2 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: int getRepeatInterval()>();

        $i3 = -1 * $i2;

        virtualinvoke r1.<java.util.Calendar: void add(int,int)>(1, $i3);

     label11:
        $r24 = virtualinvoke r1.<java.util.Calendar: java.util.Date getTime()>();

        return $r24;
    }

    public boolean mayFireAgain()
    {
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl r0;
        java.util.Date $r1;
        boolean $z0;

        r0 := @this: org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        $r1 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: java.util.Date getNextFireTime()>();

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void validate() throws org.quartz.SchedulerException
    {
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl r0;
        int $i0;
        org.quartz.SchedulerException $r1;

        r0 := @this: org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        specialinvoke r0.<org.quartz.impl.triggers.AbstractTrigger: void validate()>();

        $i0 = r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: int repeatInterval>;

        if $i0 >= 1 goto label1;

        $r1 = new org.quartz.SchedulerException;

        specialinvoke $r1.<org.quartz.SchedulerException: void <init>(java.lang.String)>("Repeat Interval cannot be zero.");

        throw $r1;

     label1:
        return;
    }

    public org.quartz.ScheduleBuilder getScheduleBuilder()
    {
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl r0;
        org.quartz.CalendarIntervalScheduleBuilder r1, $r2;
        int $i0, $i1;
        org.quartz.DateBuilder$IntervalUnit $r3;

        r0 := @this: org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        $r2 = staticinvoke <org.quartz.CalendarIntervalScheduleBuilder: org.quartz.CalendarIntervalScheduleBuilder calendarIntervalSchedule()>();

        $i0 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: int getRepeatInterval()>();

        $r3 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: org.quartz.DateBuilder$IntervalUnit getRepeatIntervalUnit()>();

        r1 = virtualinvoke $r2.<org.quartz.CalendarIntervalScheduleBuilder: org.quartz.CalendarIntervalScheduleBuilder withInterval(int,org.quartz.DateBuilder$IntervalUnit)>($i0, $r3);

        $i1 = virtualinvoke r0.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: int getMisfireInstruction()>();

        lookupswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label1;
            default: goto label3;
        };

     label1:
        virtualinvoke r1.<org.quartz.CalendarIntervalScheduleBuilder: org.quartz.CalendarIntervalScheduleBuilder withMisfireHandlingInstructionDoNothing()>();

        goto label3;

     label2:
        virtualinvoke r1.<org.quartz.CalendarIntervalScheduleBuilder: org.quartz.CalendarIntervalScheduleBuilder withMisfireHandlingInstructionFireAndProceed()>();

     label3:
        return r1;
    }

    public boolean hasAdditionalProperties()
    {
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl r0;

        r0 := @this: org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        return 0;
    }

    static void <clinit>()
    {
        java.util.Calendar $r0;
        int $i0, $i1;

        <org.quartz.impl.triggers.CalendarIntervalTriggerImpl: long serialVersionUID> = -2635982274232850343L;

        $r0 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $i0 = virtualinvoke $r0.<java.util.Calendar: int get(int)>(1);

        $i1 = $i0 + 100;

        <org.quartz.impl.triggers.CalendarIntervalTriggerImpl: int YEAR_TO_GIVEUP_SCHEDULING_AT> = $i1;

        return;
    }
}
