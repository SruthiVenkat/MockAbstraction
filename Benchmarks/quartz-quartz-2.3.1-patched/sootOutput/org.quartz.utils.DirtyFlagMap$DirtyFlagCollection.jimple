class org.quartz.utils.DirtyFlagMap$DirtyFlagCollection extends java.lang.Object implements java.util.Collection
{
    private java.util.Collection collection;
    final org.quartz.utils.DirtyFlagMap this$0;

    public void <init>(org.quartz.utils.DirtyFlagMap, java.util.Collection)
    {
        org.quartz.utils.DirtyFlagMap$DirtyFlagCollection r0;
        org.quartz.utils.DirtyFlagMap r1;
        java.util.Collection r2;

        r0 := @this: org.quartz.utils.DirtyFlagMap$DirtyFlagCollection;

        r1 := @parameter0: org.quartz.utils.DirtyFlagMap;

        r2 := @parameter1: java.util.Collection;

        r0.<org.quartz.utils.DirtyFlagMap$DirtyFlagCollection: org.quartz.utils.DirtyFlagMap this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.quartz.utils.DirtyFlagMap$DirtyFlagCollection: java.util.Collection collection> = r2;

        return;
    }

    protected java.util.Collection getWrappedCollection()
    {
        org.quartz.utils.DirtyFlagMap$DirtyFlagCollection r0;
        java.util.Collection $r1;

        r0 := @this: org.quartz.utils.DirtyFlagMap$DirtyFlagCollection;

        $r1 = r0.<org.quartz.utils.DirtyFlagMap$DirtyFlagCollection: java.util.Collection collection>;

        return $r1;
    }

    public java.util.Iterator iterator()
    {
        org.quartz.utils.DirtyFlagMap$DirtyFlagCollection r0;
        org.quartz.utils.DirtyFlagMap$DirtyFlagIterator $r1;
        java.util.Collection $r2;
        org.quartz.utils.DirtyFlagMap $r3;
        java.util.Iterator $r4;

        r0 := @this: org.quartz.utils.DirtyFlagMap$DirtyFlagCollection;

        $r1 = new org.quartz.utils.DirtyFlagMap$DirtyFlagIterator;

        $r3 = r0.<org.quartz.utils.DirtyFlagMap$DirtyFlagCollection: org.quartz.utils.DirtyFlagMap this$0>;

        $r2 = r0.<org.quartz.utils.DirtyFlagMap$DirtyFlagCollection: java.util.Collection collection>;

        $r4 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

        specialinvoke $r1.<org.quartz.utils.DirtyFlagMap$DirtyFlagIterator: void <init>(org.quartz.utils.DirtyFlagMap,java.util.Iterator)>($r3, $r4);

        return $r1;
    }

    public boolean remove(java.lang.Object)
    {
        org.quartz.utils.DirtyFlagMap$DirtyFlagCollection r0;
        java.lang.Object r1;
        boolean z0;
        java.util.Collection $r2;
        org.quartz.utils.DirtyFlagMap $r3;

        r0 := @this: org.quartz.utils.DirtyFlagMap$DirtyFlagCollection;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.quartz.utils.DirtyFlagMap$DirtyFlagCollection: java.util.Collection collection>;

        z0 = interfaceinvoke $r2.<java.util.Collection: boolean remove(java.lang.Object)>(r1);

        if z0 == 0 goto label1;

        $r3 = r0.<org.quartz.utils.DirtyFlagMap$DirtyFlagCollection: org.quartz.utils.DirtyFlagMap this$0>;

        staticinvoke <org.quartz.utils.DirtyFlagMap: boolean access$002(org.quartz.utils.DirtyFlagMap,boolean)>($r3, 1);

     label1:
        return z0;
    }

    public boolean removeAll(java.util.Collection)
    {
        org.quartz.utils.DirtyFlagMap$DirtyFlagCollection r0;
        java.util.Collection r1, $r2;
        boolean z0;
        org.quartz.utils.DirtyFlagMap $r3;

        r0 := @this: org.quartz.utils.DirtyFlagMap$DirtyFlagCollection;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<org.quartz.utils.DirtyFlagMap$DirtyFlagCollection: java.util.Collection collection>;

        z0 = interfaceinvoke $r2.<java.util.Collection: boolean removeAll(java.util.Collection)>(r1);

        if z0 == 0 goto label1;

        $r3 = r0.<org.quartz.utils.DirtyFlagMap$DirtyFlagCollection: org.quartz.utils.DirtyFlagMap this$0>;

        staticinvoke <org.quartz.utils.DirtyFlagMap: boolean access$002(org.quartz.utils.DirtyFlagMap,boolean)>($r3, 1);

     label1:
        return z0;
    }

    public boolean retainAll(java.util.Collection)
    {
        org.quartz.utils.DirtyFlagMap$DirtyFlagCollection r0;
        java.util.Collection r1, $r2;
        boolean z0;
        org.quartz.utils.DirtyFlagMap $r3;

        r0 := @this: org.quartz.utils.DirtyFlagMap$DirtyFlagCollection;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<org.quartz.utils.DirtyFlagMap$DirtyFlagCollection: java.util.Collection collection>;

        z0 = interfaceinvoke $r2.<java.util.Collection: boolean retainAll(java.util.Collection)>(r1);

        if z0 == 0 goto label1;

        $r3 = r0.<org.quartz.utils.DirtyFlagMap$DirtyFlagCollection: org.quartz.utils.DirtyFlagMap this$0>;

        staticinvoke <org.quartz.utils.DirtyFlagMap: boolean access$002(org.quartz.utils.DirtyFlagMap,boolean)>($r3, 1);

     label1:
        return z0;
    }

    public void clear()
    {
        org.quartz.utils.DirtyFlagMap$DirtyFlagCollection r0;
        java.util.Collection $r1, $r2;
        boolean $z0;
        org.quartz.utils.DirtyFlagMap $r3;

        r0 := @this: org.quartz.utils.DirtyFlagMap$DirtyFlagCollection;

        $r1 = r0.<org.quartz.utils.DirtyFlagMap$DirtyFlagCollection: java.util.Collection collection>;

        $z0 = interfaceinvoke $r1.<java.util.Collection: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r3 = r0.<org.quartz.utils.DirtyFlagMap$DirtyFlagCollection: org.quartz.utils.DirtyFlagMap this$0>;

        staticinvoke <org.quartz.utils.DirtyFlagMap: boolean access$002(org.quartz.utils.DirtyFlagMap,boolean)>($r3, 1);

     label1:
        $r2 = r0.<org.quartz.utils.DirtyFlagMap$DirtyFlagCollection: java.util.Collection collection>;

        interfaceinvoke $r2.<java.util.Collection: void clear()>();

        return;
    }

    public int size()
    {
        org.quartz.utils.DirtyFlagMap$DirtyFlagCollection r0;
        java.util.Collection $r1;
        int $i0;

        r0 := @this: org.quartz.utils.DirtyFlagMap$DirtyFlagCollection;

        $r1 = r0.<org.quartz.utils.DirtyFlagMap$DirtyFlagCollection: java.util.Collection collection>;

        $i0 = interfaceinvoke $r1.<java.util.Collection: int size()>();

        return $i0;
    }

    public boolean isEmpty()
    {
        org.quartz.utils.DirtyFlagMap$DirtyFlagCollection r0;
        java.util.Collection $r1;
        boolean $z0;

        r0 := @this: org.quartz.utils.DirtyFlagMap$DirtyFlagCollection;

        $r1 = r0.<org.quartz.utils.DirtyFlagMap$DirtyFlagCollection: java.util.Collection collection>;

        $z0 = interfaceinvoke $r1.<java.util.Collection: boolean isEmpty()>();

        return $z0;
    }

    public boolean contains(java.lang.Object)
    {
        org.quartz.utils.DirtyFlagMap$DirtyFlagCollection r0;
        java.lang.Object r1;
        java.util.Collection $r2;
        boolean $z0;

        r0 := @this: org.quartz.utils.DirtyFlagMap$DirtyFlagCollection;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.quartz.utils.DirtyFlagMap$DirtyFlagCollection: java.util.Collection collection>;

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean add(java.lang.Object)
    {
        org.quartz.utils.DirtyFlagMap$DirtyFlagCollection r0;
        java.lang.Object r1;
        java.util.Collection $r2;
        boolean $z0;

        r0 := @this: org.quartz.utils.DirtyFlagMap$DirtyFlagCollection;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.quartz.utils.DirtyFlagMap$DirtyFlagCollection: java.util.Collection collection>;

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean add(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean addAll(java.util.Collection)
    {
        org.quartz.utils.DirtyFlagMap$DirtyFlagCollection r0;
        java.util.Collection r1, $r2;
        boolean $z0;

        r0 := @this: org.quartz.utils.DirtyFlagMap$DirtyFlagCollection;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<org.quartz.utils.DirtyFlagMap$DirtyFlagCollection: java.util.Collection collection>;

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean addAll(java.util.Collection)>(r1);

        return $z0;
    }

    public boolean containsAll(java.util.Collection)
    {
        org.quartz.utils.DirtyFlagMap$DirtyFlagCollection r0;
        java.util.Collection r1, $r2;
        boolean $z0;

        r0 := @this: org.quartz.utils.DirtyFlagMap$DirtyFlagCollection;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<org.quartz.utils.DirtyFlagMap$DirtyFlagCollection: java.util.Collection collection>;

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean containsAll(java.util.Collection)>(r1);

        return $z0;
    }

    public java.lang.Object[] toArray()
    {
        org.quartz.utils.DirtyFlagMap$DirtyFlagCollection r0;
        java.util.Collection $r1;
        java.lang.Object[] $r2;

        r0 := @this: org.quartz.utils.DirtyFlagMap$DirtyFlagCollection;

        $r1 = r0.<org.quartz.utils.DirtyFlagMap$DirtyFlagCollection: java.util.Collection collection>;

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.lang.Object[] toArray()>();

        return $r2;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        org.quartz.utils.DirtyFlagMap$DirtyFlagCollection r0;
        java.lang.Object[] r1, $r3;
        java.util.Collection $r2;

        r0 := @this: org.quartz.utils.DirtyFlagMap$DirtyFlagCollection;

        r1 := @parameter0: java.lang.Object[];

        $r2 = r0.<org.quartz.utils.DirtyFlagMap$DirtyFlagCollection: java.util.Collection collection>;

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>(r1);

        return $r3;
    }
}
