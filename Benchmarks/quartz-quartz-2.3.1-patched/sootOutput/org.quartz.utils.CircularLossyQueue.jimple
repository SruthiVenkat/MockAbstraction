public class org.quartz.utils.CircularLossyQueue extends java.lang.Object
{
    private final java.util.concurrent.atomic.AtomicReference[] circularArray;
    private final int maxSize;
    private final java.util.concurrent.atomic.AtomicLong currentIndex;

    public void <init>(int)
    {
        org.quartz.utils.CircularLossyQueue r0;
        int i0, i1;
        java.util.concurrent.atomic.AtomicLong $r1;
        java.util.concurrent.atomic.AtomicReference[] $r2, $r4;
        java.util.concurrent.atomic.AtomicReference $r3;

        r0 := @this: org.quartz.utils.CircularLossyQueue;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(-1L);

        r0.<org.quartz.utils.CircularLossyQueue: java.util.concurrent.atomic.AtomicLong currentIndex> = $r1;

        $r2 = newarray (java.util.concurrent.atomic.AtomicReference)[i0];

        r0.<org.quartz.utils.CircularLossyQueue: java.util.concurrent.atomic.AtomicReference[] circularArray> = $r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r4 = r0.<org.quartz.utils.CircularLossyQueue: java.util.concurrent.atomic.AtomicReference[] circularArray>;

        $r3 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        $r4[i1] = $r3;

        i1 = i1 + 1;

        goto label1;

     label2:
        r0.<org.quartz.utils.CircularLossyQueue: int maxSize> = i0;

        return;
    }

    public void push(java.lang.Object)
    {
        org.quartz.utils.CircularLossyQueue r0;
        java.lang.Object r1;
        int i0, $i2;
        java.util.concurrent.atomic.AtomicLong $r2;
        long $l1, $l3, $l4;
        java.util.concurrent.atomic.AtomicReference[] $r3;
        java.util.concurrent.atomic.AtomicReference $r4;

        r0 := @this: org.quartz.utils.CircularLossyQueue;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.quartz.utils.CircularLossyQueue: java.util.concurrent.atomic.AtomicLong currentIndex>;

        $l1 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        $i2 = r0.<org.quartz.utils.CircularLossyQueue: int maxSize>;

        $l3 = (long) $i2;

        $l4 = $l1 % $l3;

        i0 = (int) $l4;

        $r3 = r0.<org.quartz.utils.CircularLossyQueue: java.util.concurrent.atomic.AtomicReference[] circularArray>;

        $r4 = $r3[i0];

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(r1);

        return;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        org.quartz.utils.CircularLossyQueue r0;
        java.lang.Object[] r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7;
        java.util.concurrent.atomic.AtomicReference[] $r3;
        java.util.concurrent.atomic.AtomicReference $r4;
        java.lang.Object $r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.lang.String $r10;

        r0 := @this: org.quartz.utils.CircularLossyQueue;

        r1 := @parameter0: java.lang.Object[];

        staticinvoke <java.lang.System: java.util.Properties getProperties()>();

        $i3 = lengthof r1;

        $i2 = r0.<org.quartz.utils.CircularLossyQueue: int maxSize>;

        if $i3 <= $i2 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Size of array passed in cannot be greater than ");

        $i6 = r0.<org.quartz.utils.CircularLossyQueue: int maxSize>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label1:
        i0 = specialinvoke r0.<org.quartz.utils.CircularLossyQueue: int getCurrentIndex()>();

        i7 = 0;

     label2:
        $i4 = lengthof r1;

        if i7 >= $i4 goto label3;

        $i5 = i0 - i7;

        i1 = specialinvoke r0.<org.quartz.utils.CircularLossyQueue: int getIndex(int)>($i5);

        $r3 = r0.<org.quartz.utils.CircularLossyQueue: java.util.concurrent.atomic.AtomicReference[] circularArray>;

        $r4 = $r3[i1];

        $r5 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r1[i7] = $r5;

        i7 = i7 + 1;

        goto label2;

     label3:
        return r1;
    }

    private int getIndex(int)
    {
        org.quartz.utils.CircularLossyQueue r0;
        int i0, $i1, $i2;

        r0 := @this: org.quartz.utils.CircularLossyQueue;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $i1 = r0.<org.quartz.utils.CircularLossyQueue: int maxSize>;

        $i2 = i0 + $i1;

        goto label2;

     label1:
        $i2 = i0;

     label2:
        return $i2;
    }

    public java.lang.Object peek()
    {
        org.quartz.utils.CircularLossyQueue r0;
        int $i0, $i1, $i2;
        java.util.concurrent.atomic.AtomicReference[] $r1;
        java.util.concurrent.atomic.AtomicReference $r2;
        java.lang.Object $r3;

        r0 := @this: org.quartz.utils.CircularLossyQueue;

        $i0 = virtualinvoke r0.<org.quartz.utils.CircularLossyQueue: int depth()>();

        if $i0 != 0 goto label1;

        return null;

     label1:
        $r1 = r0.<org.quartz.utils.CircularLossyQueue: java.util.concurrent.atomic.AtomicReference[] circularArray>;

        $i1 = specialinvoke r0.<org.quartz.utils.CircularLossyQueue: int getCurrentIndex()>();

        $i2 = specialinvoke r0.<org.quartz.utils.CircularLossyQueue: int getIndex(int)>($i1);

        $r2 = $r1[$i2];

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        return $r3;
    }

    public boolean isEmtpy()
    {
        org.quartz.utils.CircularLossyQueue r0;
        int $i0;
        boolean $z0;

        r0 := @this: org.quartz.utils.CircularLossyQueue;

        $i0 = virtualinvoke r0.<org.quartz.utils.CircularLossyQueue: int depth()>();

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private int getCurrentIndex()
    {
        org.quartz.utils.CircularLossyQueue r0;
        java.util.concurrent.atomic.AtomicLong $r1;
        long $l0, $l2, $l3;
        int $i1, $i4;

        r0 := @this: org.quartz.utils.CircularLossyQueue;

        $r1 = r0.<org.quartz.utils.CircularLossyQueue: java.util.concurrent.atomic.AtomicLong currentIndex>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $i1 = r0.<org.quartz.utils.CircularLossyQueue: int maxSize>;

        $l2 = (long) $i1;

        $l3 = $l0 % $l2;

        $i4 = (int) $l3;

        return $i4;
    }

    public int depth()
    {
        org.quartz.utils.CircularLossyQueue r0;
        long l0, $l1, $l3;
        java.util.concurrent.atomic.AtomicLong $r1;
        int $i2, $i5;
        byte $b4;

        r0 := @this: org.quartz.utils.CircularLossyQueue;

        $r1 = r0.<org.quartz.utils.CircularLossyQueue: java.util.concurrent.atomic.AtomicLong currentIndex>;

        $l1 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        l0 = $l1 + 1L;

        $i2 = r0.<org.quartz.utils.CircularLossyQueue: int maxSize>;

        $l3 = (long) $i2;

        $b4 = l0 cmp $l3;

        if $b4 < 0 goto label1;

        $i5 = r0.<org.quartz.utils.CircularLossyQueue: int maxSize>;

        goto label2;

     label1:
        $i5 = (int) l0;

     label2:
        return $i5;
    }
}
