public class org.quartz.utils.StringKeyDirtyFlagMap extends org.quartz.utils.DirtyFlagMap
{
    static final long serialVersionUID;
    private boolean allowsTransientData;

    public void <init>()
    {
        org.quartz.utils.StringKeyDirtyFlagMap r0;

        r0 := @this: org.quartz.utils.StringKeyDirtyFlagMap;

        specialinvoke r0.<org.quartz.utils.DirtyFlagMap: void <init>()>();

        r0.<org.quartz.utils.StringKeyDirtyFlagMap: boolean allowsTransientData> = 0;

        return;
    }

    public void <init>(int)
    {
        org.quartz.utils.StringKeyDirtyFlagMap r0;
        int i0;

        r0 := @this: org.quartz.utils.StringKeyDirtyFlagMap;

        i0 := @parameter0: int;

        specialinvoke r0.<org.quartz.utils.DirtyFlagMap: void <init>(int)>(i0);

        r0.<org.quartz.utils.StringKeyDirtyFlagMap: boolean allowsTransientData> = 0;

        return;
    }

    public void <init>(int, float)
    {
        org.quartz.utils.StringKeyDirtyFlagMap r0;
        int i0;
        float f0;

        r0 := @this: org.quartz.utils.StringKeyDirtyFlagMap;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        specialinvoke r0.<org.quartz.utils.DirtyFlagMap: void <init>(int,float)>(i0, f0);

        r0.<org.quartz.utils.StringKeyDirtyFlagMap: boolean allowsTransientData> = 0;

        return;
    }

    public boolean equals(java.lang.Object)
    {
        org.quartz.utils.StringKeyDirtyFlagMap r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.quartz.utils.StringKeyDirtyFlagMap;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<org.quartz.utils.DirtyFlagMap: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    public int hashCode()
    {
        org.quartz.utils.StringKeyDirtyFlagMap r0;
        java.util.Map $r1;
        int $i0;

        r0 := @this: org.quartz.utils.StringKeyDirtyFlagMap;

        $r1 = virtualinvoke r0.<org.quartz.utils.StringKeyDirtyFlagMap: java.util.Map getWrappedMap()>();

        $i0 = interfaceinvoke $r1.<java.util.Map: int hashCode()>();

        return $i0;
    }

    public java.lang.String[] getKeys()
    {
        org.quartz.utils.StringKeyDirtyFlagMap r0;
        java.util.Set $r1;
        int $i0;
        java.lang.String[] $r2, $r4;
        java.lang.Object[] $r3;

        r0 := @this: org.quartz.utils.StringKeyDirtyFlagMap;

        $r1 = virtualinvoke r0.<org.quartz.utils.StringKeyDirtyFlagMap: java.util.Set keySet()>();

        $i0 = virtualinvoke r0.<org.quartz.utils.StringKeyDirtyFlagMap: int size()>();

        $r2 = newarray (java.lang.String)[$i0];

        $r3 = interfaceinvoke $r1.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r2);

        $r4 = (java.lang.String[]) $r3;

        return $r4;
    }

    public void setAllowsTransientData(boolean)
    {
        org.quartz.utils.StringKeyDirtyFlagMap r0;
        boolean z0, $z1;
        java.lang.IllegalStateException $r1;

        r0 := @this: org.quartz.utils.StringKeyDirtyFlagMap;

        z0 := @parameter0: boolean;

        $z1 = virtualinvoke r0.<org.quartz.utils.StringKeyDirtyFlagMap: boolean containsTransientData()>();

        if $z1 == 0 goto label1;

        if z0 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot set property \'allowsTransientData\' to \'false\' when data map contains non-serializable objects.");

        throw $r1;

     label1:
        r0.<org.quartz.utils.StringKeyDirtyFlagMap: boolean allowsTransientData> = z0;

        return;
    }

    public boolean getAllowsTransientData()
    {
        org.quartz.utils.StringKeyDirtyFlagMap r0;
        boolean $z0;

        r0 := @this: org.quartz.utils.StringKeyDirtyFlagMap;

        $z0 = r0.<org.quartz.utils.StringKeyDirtyFlagMap: boolean allowsTransientData>;

        return $z0;
    }

    public boolean containsTransientData()
    {
        org.quartz.utils.StringKeyDirtyFlagMap r0;
        java.lang.String[] r1;
        java.lang.Object r2;
        boolean $z0, $z1;
        int $i0, i1;
        java.lang.String $r3;

        r0 := @this: org.quartz.utils.StringKeyDirtyFlagMap;

        $z0 = virtualinvoke r0.<org.quartz.utils.StringKeyDirtyFlagMap: boolean getAllowsTransientData()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r1 = virtualinvoke r0.<org.quartz.utils.StringKeyDirtyFlagMap: java.lang.String[] getKeys()>();

        i1 = 0;

     label2:
        $i0 = lengthof r1;

        if i1 >= $i0 goto label4;

        $r3 = r1[i1];

        r2 = specialinvoke r0.<org.quartz.utils.DirtyFlagMap: java.lang.Object get(java.lang.Object)>($r3);

        $z1 = r2 instanceof java.io.Serializable;

        if $z1 != 0 goto label3;

        return 1;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return 0;
    }

    public void removeTransientData()
    {
        org.quartz.utils.StringKeyDirtyFlagMap r0;
        java.lang.String[] r1;
        java.lang.Object r2;
        boolean $z0, $z1;
        int $i0, i1;
        java.lang.String $r3, $r4;

        r0 := @this: org.quartz.utils.StringKeyDirtyFlagMap;

        $z0 = virtualinvoke r0.<org.quartz.utils.StringKeyDirtyFlagMap: boolean getAllowsTransientData()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r1 = virtualinvoke r0.<org.quartz.utils.StringKeyDirtyFlagMap: java.lang.String[] getKeys()>();

        i1 = 0;

     label2:
        $i0 = lengthof r1;

        if i1 >= $i0 goto label4;

        $r3 = r1[i1];

        r2 = specialinvoke r0.<org.quartz.utils.DirtyFlagMap: java.lang.Object get(java.lang.Object)>($r3);

        $z1 = r2 instanceof java.io.Serializable;

        if $z1 != 0 goto label3;

        $r4 = r1[i1];

        virtualinvoke r0.<org.quartz.utils.StringKeyDirtyFlagMap: java.lang.Object remove(java.lang.Object)>($r4);

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return;
    }

    public void put(java.lang.String, int)
    {
        org.quartz.utils.StringKeyDirtyFlagMap r0;
        java.lang.String r1;
        int i0;
        java.lang.Integer $r2;

        r0 := @this: org.quartz.utils.StringKeyDirtyFlagMap;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke r0.<org.quartz.utils.DirtyFlagMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2);

        return;
    }

    public void put(java.lang.String, long)
    {
        org.quartz.utils.StringKeyDirtyFlagMap r0;
        java.lang.String r1;
        long l0;
        java.lang.Long $r2;

        r0 := @this: org.quartz.utils.StringKeyDirtyFlagMap;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        specialinvoke r0.<org.quartz.utils.DirtyFlagMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2);

        return;
    }

    public void put(java.lang.String, float)
    {
        org.quartz.utils.StringKeyDirtyFlagMap r0;
        java.lang.String r1;
        float f0;
        java.lang.Float $r2;

        r0 := @this: org.quartz.utils.StringKeyDirtyFlagMap;

        r1 := @parameter0: java.lang.String;

        f0 := @parameter1: float;

        $r2 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

        specialinvoke r0.<org.quartz.utils.DirtyFlagMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2);

        return;
    }

    public void put(java.lang.String, double)
    {
        org.quartz.utils.StringKeyDirtyFlagMap r0;
        java.lang.String r1;
        double d0;
        java.lang.Double $r2;

        r0 := @this: org.quartz.utils.StringKeyDirtyFlagMap;

        r1 := @parameter0: java.lang.String;

        d0 := @parameter1: double;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        specialinvoke r0.<org.quartz.utils.DirtyFlagMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2);

        return;
    }

    public void put(java.lang.String, boolean)
    {
        org.quartz.utils.StringKeyDirtyFlagMap r0;
        java.lang.String r1;
        boolean z0;
        java.lang.Boolean $r2;

        r0 := @this: org.quartz.utils.StringKeyDirtyFlagMap;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        specialinvoke r0.<org.quartz.utils.DirtyFlagMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2);

        return;
    }

    public void put(java.lang.String, char)
    {
        org.quartz.utils.StringKeyDirtyFlagMap r0;
        java.lang.String r1;
        char c0;
        java.lang.Character $r2;

        r0 := @this: org.quartz.utils.StringKeyDirtyFlagMap;

        r1 := @parameter0: java.lang.String;

        c0 := @parameter1: char;

        $r2 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c0);

        specialinvoke r0.<org.quartz.utils.DirtyFlagMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2);

        return;
    }

    public void put(java.lang.String, java.lang.String)
    {
        org.quartz.utils.StringKeyDirtyFlagMap r0;
        java.lang.String r1, r2;

        r0 := @this: org.quartz.utils.StringKeyDirtyFlagMap;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.quartz.utils.DirtyFlagMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public java.lang.Object put(java.lang.String, java.lang.Object)
    {
        org.quartz.utils.StringKeyDirtyFlagMap r0;
        java.lang.String r1;
        java.lang.Object r2, $r3;

        r0 := @this: org.quartz.utils.StringKeyDirtyFlagMap;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r3 = specialinvoke r0.<org.quartz.utils.DirtyFlagMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return $r3;
    }

    public int getInt(java.lang.String)
    {
        org.quartz.utils.StringKeyDirtyFlagMap r0;
        java.lang.String r1, $r4;
        java.lang.Object r2;
        boolean $z0;
        int $i0, $i1;
        java.lang.Integer $r5;
        java.lang.Exception $r6;
        java.lang.ClassCastException $r7;

        r0 := @this: org.quartz.utils.StringKeyDirtyFlagMap;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<org.quartz.utils.StringKeyDirtyFlagMap: java.lang.Object get(java.lang.Object)>(r1);

     label1:
        $z0 = r2 instanceof java.lang.Integer;

        if $z0 == 0 goto label3;

        $r5 = (java.lang.Integer) r2;

        $i1 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

     label2:
        return $i1;

     label3:
        $r4 = (java.lang.String) r2;

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

     label4:
        return $i0;

     label5:
        $r6 := @caughtexception;

        $r7 = new java.lang.ClassCastException;

        specialinvoke $r7.<java.lang.ClassCastException: void <init>(java.lang.String)>("Identified object is not an Integer.");

        throw $r7;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }

    public long getLong(java.lang.String)
    {
        org.quartz.utils.StringKeyDirtyFlagMap r0;
        java.lang.String r1, $r4;
        java.lang.Object r2;
        boolean $z0;
        long $l0, $l1;
        java.lang.Long $r5;
        java.lang.Exception $r6;
        java.lang.ClassCastException $r7;

        r0 := @this: org.quartz.utils.StringKeyDirtyFlagMap;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<org.quartz.utils.StringKeyDirtyFlagMap: java.lang.Object get(java.lang.Object)>(r1);

     label1:
        $z0 = r2 instanceof java.lang.Long;

        if $z0 == 0 goto label3;

        $r5 = (java.lang.Long) r2;

        $l1 = virtualinvoke $r5.<java.lang.Long: long longValue()>();

     label2:
        return $l1;

     label3:
        $r4 = (java.lang.String) r2;

        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r4);

     label4:
        return $l0;

     label5:
        $r6 := @caughtexception;

        $r7 = new java.lang.ClassCastException;

        specialinvoke $r7.<java.lang.ClassCastException: void <init>(java.lang.String)>("Identified object is not a Long.");

        throw $r7;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }

    public float getFloat(java.lang.String)
    {
        org.quartz.utils.StringKeyDirtyFlagMap r0;
        java.lang.String r1, $r4;
        java.lang.Object r2;
        boolean $z0;
        float $f0, $f1;
        java.lang.Float $r5;
        java.lang.Exception $r6;
        java.lang.ClassCastException $r7;

        r0 := @this: org.quartz.utils.StringKeyDirtyFlagMap;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<org.quartz.utils.StringKeyDirtyFlagMap: java.lang.Object get(java.lang.Object)>(r1);

     label1:
        $z0 = r2 instanceof java.lang.Float;

        if $z0 == 0 goto label3;

        $r5 = (java.lang.Float) r2;

        $f1 = virtualinvoke $r5.<java.lang.Float: float floatValue()>();

     label2:
        return $f1;

     label3:
        $r4 = (java.lang.String) r2;

        $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r4);

     label4:
        return $f0;

     label5:
        $r6 := @caughtexception;

        $r7 = new java.lang.ClassCastException;

        specialinvoke $r7.<java.lang.ClassCastException: void <init>(java.lang.String)>("Identified object is not a Float.");

        throw $r7;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }

    public double getDouble(java.lang.String)
    {
        org.quartz.utils.StringKeyDirtyFlagMap r0;
        java.lang.String r1, $r4;
        java.lang.Object r2;
        boolean $z0;
        double $d0, $d1;
        java.lang.Double $r5;
        java.lang.Exception $r6;
        java.lang.ClassCastException $r7;

        r0 := @this: org.quartz.utils.StringKeyDirtyFlagMap;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<org.quartz.utils.StringKeyDirtyFlagMap: java.lang.Object get(java.lang.Object)>(r1);

     label1:
        $z0 = r2 instanceof java.lang.Double;

        if $z0 == 0 goto label3;

        $r5 = (java.lang.Double) r2;

        $d1 = virtualinvoke $r5.<java.lang.Double: double doubleValue()>();

     label2:
        return $d1;

     label3:
        $r4 = (java.lang.String) r2;

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r4);

     label4:
        return $d0;

     label5:
        $r6 := @caughtexception;

        $r7 = new java.lang.ClassCastException;

        specialinvoke $r7.<java.lang.ClassCastException: void <init>(java.lang.String)>("Identified object is not a Double.");

        throw $r7;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }

    public boolean getBoolean(java.lang.String)
    {
        org.quartz.utils.StringKeyDirtyFlagMap r0;
        java.lang.String r1, $r4;
        java.lang.Object r2;
        boolean $z0, $z1, $z2;
        java.lang.Boolean $r5;
        java.lang.Exception $r6;
        java.lang.ClassCastException $r7;

        r0 := @this: org.quartz.utils.StringKeyDirtyFlagMap;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<org.quartz.utils.StringKeyDirtyFlagMap: java.lang.Object get(java.lang.Object)>(r1);

     label1:
        $z0 = r2 instanceof java.lang.Boolean;

        if $z0 == 0 goto label3;

        $r5 = (java.lang.Boolean) r2;

        $z2 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

     label2:
        return $z2;

     label3:
        $r4 = (java.lang.String) r2;

        $z1 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r4);

     label4:
        return $z1;

     label5:
        $r6 := @caughtexception;

        $r7 = new java.lang.ClassCastException;

        specialinvoke $r7.<java.lang.ClassCastException: void <init>(java.lang.String)>("Identified object is not a Boolean.");

        throw $r7;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }

    public char getChar(java.lang.String)
    {
        org.quartz.utils.StringKeyDirtyFlagMap r0;
        java.lang.String r1, $r4;
        java.lang.Object r2;
        boolean $z0;
        char $c0, $c1;
        java.lang.Character $r5;
        java.lang.Exception $r6;
        java.lang.ClassCastException $r7;

        r0 := @this: org.quartz.utils.StringKeyDirtyFlagMap;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<org.quartz.utils.StringKeyDirtyFlagMap: java.lang.Object get(java.lang.Object)>(r1);

     label1:
        $z0 = r2 instanceof java.lang.Character;

        if $z0 == 0 goto label3;

        $r5 = (java.lang.Character) r2;

        $c1 = virtualinvoke $r5.<java.lang.Character: char charValue()>();

     label2:
        return $c1;

     label3:
        $r4 = (java.lang.String) r2;

        $c0 = virtualinvoke $r4.<java.lang.String: char charAt(int)>(0);

     label4:
        return $c0;

     label5:
        $r6 := @caughtexception;

        $r7 = new java.lang.ClassCastException;

        specialinvoke $r7.<java.lang.ClassCastException: void <init>(java.lang.String)>("Identified object is not a Character.");

        throw $r7;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }

    public java.lang.String getString(java.lang.String)
    {
        org.quartz.utils.StringKeyDirtyFlagMap r0;
        java.lang.String r1, $r4;
        java.lang.Object r2;
        java.lang.Exception $r5;
        java.lang.ClassCastException $r6;

        r0 := @this: org.quartz.utils.StringKeyDirtyFlagMap;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<org.quartz.utils.StringKeyDirtyFlagMap: java.lang.Object get(java.lang.Object)>(r1);

     label1:
        $r4 = (java.lang.String) r2;

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.ClassCastException;

        specialinvoke $r6.<java.lang.ClassCastException: void <init>(java.lang.String)>("Identified object is not a String.");

        throw $r6;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public volatile java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        org.quartz.utils.StringKeyDirtyFlagMap r0;
        java.lang.Object r1, r2, $r4;
        java.lang.String $r3;

        r0 := @this: org.quartz.utils.StringKeyDirtyFlagMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = (java.lang.String) r1;

        $r4 = virtualinvoke r0.<org.quartz.utils.StringKeyDirtyFlagMap: java.lang.Object put(java.lang.String,java.lang.Object)>($r3, r2);

        return $r4;
    }

    public static void <clinit>()
    {
        <org.quartz.utils.StringKeyDirtyFlagMap: long serialVersionUID> = -9076749120524952280L;

        return;
    }
}
