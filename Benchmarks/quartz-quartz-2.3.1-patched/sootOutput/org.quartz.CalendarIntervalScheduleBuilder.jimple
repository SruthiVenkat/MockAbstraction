public class org.quartz.CalendarIntervalScheduleBuilder extends org.quartz.ScheduleBuilder
{
    private int interval;
    private org.quartz.DateBuilder$IntervalUnit intervalUnit;
    private int misfireInstruction;
    private java.util.TimeZone timeZone;
    private boolean preserveHourOfDayAcrossDaylightSavings;
    private boolean skipDayIfHourDoesNotExist;

    protected void <init>()
    {
        org.quartz.CalendarIntervalScheduleBuilder r0;
        org.quartz.DateBuilder$IntervalUnit $r1;

        r0 := @this: org.quartz.CalendarIntervalScheduleBuilder;

        specialinvoke r0.<org.quartz.ScheduleBuilder: void <init>()>();

        r0.<org.quartz.CalendarIntervalScheduleBuilder: int interval> = 1;

        $r1 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit DAY>;

        r0.<org.quartz.CalendarIntervalScheduleBuilder: org.quartz.DateBuilder$IntervalUnit intervalUnit> = $r1;

        r0.<org.quartz.CalendarIntervalScheduleBuilder: int misfireInstruction> = 0;

        return;
    }

    public static org.quartz.CalendarIntervalScheduleBuilder calendarIntervalSchedule()
    {
        org.quartz.CalendarIntervalScheduleBuilder $r0;

        $r0 = new org.quartz.CalendarIntervalScheduleBuilder;

        specialinvoke $r0.<org.quartz.CalendarIntervalScheduleBuilder: void <init>()>();

        return $r0;
    }

    public org.quartz.spi.MutableTrigger build()
    {
        org.quartz.CalendarIntervalScheduleBuilder r0;
        org.quartz.impl.triggers.CalendarIntervalTriggerImpl $r2;
        int $i0, $i1;
        org.quartz.DateBuilder$IntervalUnit $r3;
        java.util.TimeZone $r4;
        boolean $z0, $z1;

        r0 := @this: org.quartz.CalendarIntervalScheduleBuilder;

        $r2 = new org.quartz.impl.triggers.CalendarIntervalTriggerImpl;

        specialinvoke $r2.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void <init>()>();

        $i0 = r0.<org.quartz.CalendarIntervalScheduleBuilder: int interval>;

        virtualinvoke $r2.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setRepeatInterval(int)>($i0);

        $r3 = r0.<org.quartz.CalendarIntervalScheduleBuilder: org.quartz.DateBuilder$IntervalUnit intervalUnit>;

        virtualinvoke $r2.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)>($r3);

        $i1 = r0.<org.quartz.CalendarIntervalScheduleBuilder: int misfireInstruction>;

        virtualinvoke $r2.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setMisfireInstruction(int)>($i1);

        $r4 = r0.<org.quartz.CalendarIntervalScheduleBuilder: java.util.TimeZone timeZone>;

        virtualinvoke $r2.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setTimeZone(java.util.TimeZone)>($r4);

        $z0 = r0.<org.quartz.CalendarIntervalScheduleBuilder: boolean preserveHourOfDayAcrossDaylightSavings>;

        virtualinvoke $r2.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setPreserveHourOfDayAcrossDaylightSavings(boolean)>($z0);

        $z1 = r0.<org.quartz.CalendarIntervalScheduleBuilder: boolean skipDayIfHourDoesNotExist>;

        virtualinvoke $r2.<org.quartz.impl.triggers.CalendarIntervalTriggerImpl: void setSkipDayIfHourDoesNotExist(boolean)>($z1);

        return $r2;
    }

    public org.quartz.CalendarIntervalScheduleBuilder withInterval(int, org.quartz.DateBuilder$IntervalUnit)
    {
        org.quartz.CalendarIntervalScheduleBuilder r0;
        int i0;
        org.quartz.DateBuilder$IntervalUnit r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.quartz.CalendarIntervalScheduleBuilder;

        i0 := @parameter0: int;

        r1 := @parameter1: org.quartz.DateBuilder$IntervalUnit;

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("TimeUnit must be specified.");

        throw $r2;

     label1:
        specialinvoke r0.<org.quartz.CalendarIntervalScheduleBuilder: void validateInterval(int)>(i0);

        r0.<org.quartz.CalendarIntervalScheduleBuilder: int interval> = i0;

        r0.<org.quartz.CalendarIntervalScheduleBuilder: org.quartz.DateBuilder$IntervalUnit intervalUnit> = r1;

        return r0;
    }

    public org.quartz.CalendarIntervalScheduleBuilder withIntervalInSeconds(int)
    {
        org.quartz.CalendarIntervalScheduleBuilder r0;
        int i0;
        org.quartz.DateBuilder$IntervalUnit $r1;

        r0 := @this: org.quartz.CalendarIntervalScheduleBuilder;

        i0 := @parameter0: int;

        specialinvoke r0.<org.quartz.CalendarIntervalScheduleBuilder: void validateInterval(int)>(i0);

        r0.<org.quartz.CalendarIntervalScheduleBuilder: int interval> = i0;

        $r1 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit SECOND>;

        r0.<org.quartz.CalendarIntervalScheduleBuilder: org.quartz.DateBuilder$IntervalUnit intervalUnit> = $r1;

        return r0;
    }

    public org.quartz.CalendarIntervalScheduleBuilder withIntervalInMinutes(int)
    {
        org.quartz.CalendarIntervalScheduleBuilder r0;
        int i0;
        org.quartz.DateBuilder$IntervalUnit $r1;

        r0 := @this: org.quartz.CalendarIntervalScheduleBuilder;

        i0 := @parameter0: int;

        specialinvoke r0.<org.quartz.CalendarIntervalScheduleBuilder: void validateInterval(int)>(i0);

        r0.<org.quartz.CalendarIntervalScheduleBuilder: int interval> = i0;

        $r1 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit MINUTE>;

        r0.<org.quartz.CalendarIntervalScheduleBuilder: org.quartz.DateBuilder$IntervalUnit intervalUnit> = $r1;

        return r0;
    }

    public org.quartz.CalendarIntervalScheduleBuilder withIntervalInHours(int)
    {
        org.quartz.CalendarIntervalScheduleBuilder r0;
        int i0;
        org.quartz.DateBuilder$IntervalUnit $r1;

        r0 := @this: org.quartz.CalendarIntervalScheduleBuilder;

        i0 := @parameter0: int;

        specialinvoke r0.<org.quartz.CalendarIntervalScheduleBuilder: void validateInterval(int)>(i0);

        r0.<org.quartz.CalendarIntervalScheduleBuilder: int interval> = i0;

        $r1 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit HOUR>;

        r0.<org.quartz.CalendarIntervalScheduleBuilder: org.quartz.DateBuilder$IntervalUnit intervalUnit> = $r1;

        return r0;
    }

    public org.quartz.CalendarIntervalScheduleBuilder withIntervalInDays(int)
    {
        org.quartz.CalendarIntervalScheduleBuilder r0;
        int i0;
        org.quartz.DateBuilder$IntervalUnit $r1;

        r0 := @this: org.quartz.CalendarIntervalScheduleBuilder;

        i0 := @parameter0: int;

        specialinvoke r0.<org.quartz.CalendarIntervalScheduleBuilder: void validateInterval(int)>(i0);

        r0.<org.quartz.CalendarIntervalScheduleBuilder: int interval> = i0;

        $r1 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit DAY>;

        r0.<org.quartz.CalendarIntervalScheduleBuilder: org.quartz.DateBuilder$IntervalUnit intervalUnit> = $r1;

        return r0;
    }

    public org.quartz.CalendarIntervalScheduleBuilder withIntervalInWeeks(int)
    {
        org.quartz.CalendarIntervalScheduleBuilder r0;
        int i0;
        org.quartz.DateBuilder$IntervalUnit $r1;

        r0 := @this: org.quartz.CalendarIntervalScheduleBuilder;

        i0 := @parameter0: int;

        specialinvoke r0.<org.quartz.CalendarIntervalScheduleBuilder: void validateInterval(int)>(i0);

        r0.<org.quartz.CalendarIntervalScheduleBuilder: int interval> = i0;

        $r1 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit WEEK>;

        r0.<org.quartz.CalendarIntervalScheduleBuilder: org.quartz.DateBuilder$IntervalUnit intervalUnit> = $r1;

        return r0;
    }

    public org.quartz.CalendarIntervalScheduleBuilder withIntervalInMonths(int)
    {
        org.quartz.CalendarIntervalScheduleBuilder r0;
        int i0;
        org.quartz.DateBuilder$IntervalUnit $r1;

        r0 := @this: org.quartz.CalendarIntervalScheduleBuilder;

        i0 := @parameter0: int;

        specialinvoke r0.<org.quartz.CalendarIntervalScheduleBuilder: void validateInterval(int)>(i0);

        r0.<org.quartz.CalendarIntervalScheduleBuilder: int interval> = i0;

        $r1 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit MONTH>;

        r0.<org.quartz.CalendarIntervalScheduleBuilder: org.quartz.DateBuilder$IntervalUnit intervalUnit> = $r1;

        return r0;
    }

    public org.quartz.CalendarIntervalScheduleBuilder withIntervalInYears(int)
    {
        org.quartz.CalendarIntervalScheduleBuilder r0;
        int i0;
        org.quartz.DateBuilder$IntervalUnit $r1;

        r0 := @this: org.quartz.CalendarIntervalScheduleBuilder;

        i0 := @parameter0: int;

        specialinvoke r0.<org.quartz.CalendarIntervalScheduleBuilder: void validateInterval(int)>(i0);

        r0.<org.quartz.CalendarIntervalScheduleBuilder: int interval> = i0;

        $r1 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit YEAR>;

        r0.<org.quartz.CalendarIntervalScheduleBuilder: org.quartz.DateBuilder$IntervalUnit intervalUnit> = $r1;

        return r0;
    }

    public org.quartz.CalendarIntervalScheduleBuilder withMisfireHandlingInstructionIgnoreMisfires()
    {
        org.quartz.CalendarIntervalScheduleBuilder r0;

        r0 := @this: org.quartz.CalendarIntervalScheduleBuilder;

        r0.<org.quartz.CalendarIntervalScheduleBuilder: int misfireInstruction> = -1;

        return r0;
    }

    public org.quartz.CalendarIntervalScheduleBuilder withMisfireHandlingInstructionDoNothing()
    {
        org.quartz.CalendarIntervalScheduleBuilder r0;

        r0 := @this: org.quartz.CalendarIntervalScheduleBuilder;

        r0.<org.quartz.CalendarIntervalScheduleBuilder: int misfireInstruction> = 2;

        return r0;
    }

    public org.quartz.CalendarIntervalScheduleBuilder withMisfireHandlingInstructionFireAndProceed()
    {
        org.quartz.CalendarIntervalScheduleBuilder r0;

        r0 := @this: org.quartz.CalendarIntervalScheduleBuilder;

        r0.<org.quartz.CalendarIntervalScheduleBuilder: int misfireInstruction> = 1;

        return r0;
    }

    public org.quartz.CalendarIntervalScheduleBuilder inTimeZone(java.util.TimeZone)
    {
        org.quartz.CalendarIntervalScheduleBuilder r0;
        java.util.TimeZone r1;

        r0 := @this: org.quartz.CalendarIntervalScheduleBuilder;

        r1 := @parameter0: java.util.TimeZone;

        r0.<org.quartz.CalendarIntervalScheduleBuilder: java.util.TimeZone timeZone> = r1;

        return r0;
    }

    public org.quartz.CalendarIntervalScheduleBuilder preserveHourOfDayAcrossDaylightSavings(boolean)
    {
        org.quartz.CalendarIntervalScheduleBuilder r0;
        boolean z0;

        r0 := @this: org.quartz.CalendarIntervalScheduleBuilder;

        z0 := @parameter0: boolean;

        r0.<org.quartz.CalendarIntervalScheduleBuilder: boolean preserveHourOfDayAcrossDaylightSavings> = z0;

        return r0;
    }

    public org.quartz.CalendarIntervalScheduleBuilder skipDayIfHourDoesNotExist(boolean)
    {
        org.quartz.CalendarIntervalScheduleBuilder r0;
        boolean z0;

        r0 := @this: org.quartz.CalendarIntervalScheduleBuilder;

        z0 := @parameter0: boolean;

        r0.<org.quartz.CalendarIntervalScheduleBuilder: boolean skipDayIfHourDoesNotExist> = z0;

        return r0;
    }

    private void validateInterval(int)
    {
        org.quartz.CalendarIntervalScheduleBuilder r0;
        int i0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: org.quartz.CalendarIntervalScheduleBuilder;

        i0 := @parameter0: int;

        if i0 > 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Interval must be a positive value.");

        throw $r1;

     label1:
        return;
    }
}
