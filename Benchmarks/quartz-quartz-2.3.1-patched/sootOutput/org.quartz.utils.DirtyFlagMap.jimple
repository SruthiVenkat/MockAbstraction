public class org.quartz.utils.DirtyFlagMap extends java.lang.Object implements java.util.Map, java.lang.Cloneable, java.io.Serializable
{
    private static final long serialVersionUID;
    private boolean dirty;
    private java.util.Map map;

    public void <init>()
    {
        org.quartz.utils.DirtyFlagMap r0;
        java.util.HashMap $r1;

        r0 := @this: org.quartz.utils.DirtyFlagMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.quartz.utils.DirtyFlagMap: boolean dirty> = 0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.quartz.utils.DirtyFlagMap: java.util.Map map> = $r1;

        return;
    }

    public void <init>(int)
    {
        org.quartz.utils.DirtyFlagMap r0;
        int i0;
        java.util.HashMap $r1;

        r0 := @this: org.quartz.utils.DirtyFlagMap;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.quartz.utils.DirtyFlagMap: boolean dirty> = 0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>(int)>(i0);

        r0.<org.quartz.utils.DirtyFlagMap: java.util.Map map> = $r1;

        return;
    }

    public void <init>(int, float)
    {
        org.quartz.utils.DirtyFlagMap r0;
        int i0;
        float f0;
        java.util.HashMap $r1;

        r0 := @this: org.quartz.utils.DirtyFlagMap;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.quartz.utils.DirtyFlagMap: boolean dirty> = 0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>(int,float)>(i0, f0);

        r0.<org.quartz.utils.DirtyFlagMap: java.util.Map map> = $r1;

        return;
    }

    public void clearDirtyFlag()
    {
        org.quartz.utils.DirtyFlagMap r0;

        r0 := @this: org.quartz.utils.DirtyFlagMap;

        r0.<org.quartz.utils.DirtyFlagMap: boolean dirty> = 0;

        return;
    }

    public boolean isDirty()
    {
        org.quartz.utils.DirtyFlagMap r0;
        boolean $z0;

        r0 := @this: org.quartz.utils.DirtyFlagMap;

        $z0 = r0.<org.quartz.utils.DirtyFlagMap: boolean dirty>;

        return $z0;
    }

    public java.util.Map getWrappedMap()
    {
        org.quartz.utils.DirtyFlagMap r0;
        java.util.Map $r1;

        r0 := @this: org.quartz.utils.DirtyFlagMap;

        $r1 = r0.<org.quartz.utils.DirtyFlagMap: java.util.Map map>;

        return $r1;
    }

    public void clear()
    {
        org.quartz.utils.DirtyFlagMap r0;
        java.util.Map $r1, $r2;
        boolean $z0;

        r0 := @this: org.quartz.utils.DirtyFlagMap;

        $r1 = r0.<org.quartz.utils.DirtyFlagMap: java.util.Map map>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        r0.<org.quartz.utils.DirtyFlagMap: boolean dirty> = 1;

     label1:
        $r2 = r0.<org.quartz.utils.DirtyFlagMap: java.util.Map map>;

        interfaceinvoke $r2.<java.util.Map: void clear()>();

        return;
    }

    public boolean containsKey(java.lang.Object)
    {
        org.quartz.utils.DirtyFlagMap r0;
        java.lang.Object r1;
        java.util.Map $r2;
        boolean $z0;

        r0 := @this: org.quartz.utils.DirtyFlagMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.quartz.utils.DirtyFlagMap: java.util.Map map>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean containsValue(java.lang.Object)
    {
        org.quartz.utils.DirtyFlagMap r0;
        java.lang.Object r1;
        java.util.Map $r2;
        boolean $z0;

        r0 := @this: org.quartz.utils.DirtyFlagMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.quartz.utils.DirtyFlagMap: java.util.Map map>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsValue(java.lang.Object)>(r1);

        return $z0;
    }

    public java.util.Set entrySet()
    {
        org.quartz.utils.DirtyFlagMap r0;
        org.quartz.utils.DirtyFlagMap$DirtyFlagMapEntrySet $r1;
        java.util.Map $r2;
        java.util.Set $r3;

        r0 := @this: org.quartz.utils.DirtyFlagMap;

        $r1 = new org.quartz.utils.DirtyFlagMap$DirtyFlagMapEntrySet;

        $r2 = r0.<org.quartz.utils.DirtyFlagMap: java.util.Map map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        specialinvoke $r1.<org.quartz.utils.DirtyFlagMap$DirtyFlagMapEntrySet: void <init>(org.quartz.utils.DirtyFlagMap,java.util.Set)>(r0, $r3);

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        org.quartz.utils.DirtyFlagMap r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.util.Map $r3, $r4;

        r0 := @this: org.quartz.utils.DirtyFlagMap;

        r1 := @parameter0: java.lang.Object;

        if r1 == null goto label1;

        $z0 = r1 instanceof org.quartz.utils.DirtyFlagMap;

        if $z0 != 0 goto label2;

     label1:
        return 0;

     label2:
        $r3 = r0.<org.quartz.utils.DirtyFlagMap: java.util.Map map>;

        $r2 = (org.quartz.utils.DirtyFlagMap) r1;

        $r4 = virtualinvoke $r2.<org.quartz.utils.DirtyFlagMap: java.util.Map getWrappedMap()>();

        $z1 = interfaceinvoke $r3.<java.util.Map: boolean equals(java.lang.Object)>($r4);

        return $z1;
    }

    public int hashCode()
    {
        org.quartz.utils.DirtyFlagMap r0;
        java.util.Map $r1;
        int $i0;

        r0 := @this: org.quartz.utils.DirtyFlagMap;

        $r1 = r0.<org.quartz.utils.DirtyFlagMap: java.util.Map map>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int hashCode()>();

        return $i0;
    }

    public java.lang.Object get(java.lang.Object)
    {
        org.quartz.utils.DirtyFlagMap r0;
        java.lang.Object r1, $r3;
        java.util.Map $r2;

        r0 := @this: org.quartz.utils.DirtyFlagMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.quartz.utils.DirtyFlagMap: java.util.Map map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        return $r3;
    }

    public boolean isEmpty()
    {
        org.quartz.utils.DirtyFlagMap r0;
        java.util.Map $r1;
        boolean $z0;

        r0 := @this: org.quartz.utils.DirtyFlagMap;

        $r1 = r0.<org.quartz.utils.DirtyFlagMap: java.util.Map map>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        return $z0;
    }

    public java.util.Set keySet()
    {
        org.quartz.utils.DirtyFlagMap r0;
        org.quartz.utils.DirtyFlagMap$DirtyFlagSet $r1;
        java.util.Map $r2;
        java.util.Set $r3;

        r0 := @this: org.quartz.utils.DirtyFlagMap;

        $r1 = new org.quartz.utils.DirtyFlagMap$DirtyFlagSet;

        $r2 = r0.<org.quartz.utils.DirtyFlagMap: java.util.Map map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        specialinvoke $r1.<org.quartz.utils.DirtyFlagMap$DirtyFlagSet: void <init>(org.quartz.utils.DirtyFlagMap,java.util.Set)>(r0, $r3);

        return $r1;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        org.quartz.utils.DirtyFlagMap r0;
        java.lang.Object r1, r2, $r4;
        java.util.Map $r3;

        r0 := @this: org.quartz.utils.DirtyFlagMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r0.<org.quartz.utils.DirtyFlagMap: boolean dirty> = 1;

        $r3 = r0.<org.quartz.utils.DirtyFlagMap: java.util.Map map>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return $r4;
    }

    public void putAll(java.util.Map)
    {
        org.quartz.utils.DirtyFlagMap r0;
        java.util.Map r1, $r2;
        boolean $z0;

        r0 := @this: org.quartz.utils.DirtyFlagMap;

        r1 := @parameter0: java.util.Map;

        $z0 = interfaceinvoke r1.<java.util.Map: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        r0.<org.quartz.utils.DirtyFlagMap: boolean dirty> = 1;

     label1:
        $r2 = r0.<org.quartz.utils.DirtyFlagMap: java.util.Map map>;

        interfaceinvoke $r2.<java.util.Map: void putAll(java.util.Map)>(r1);

        return;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        org.quartz.utils.DirtyFlagMap r0;
        java.lang.Object r1, r2;
        java.util.Map $r3;

        r0 := @this: org.quartz.utils.DirtyFlagMap;

        r1 := @parameter0: java.lang.Object;

        $r3 = r0.<org.quartz.utils.DirtyFlagMap: java.util.Map map>;

        r2 = interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        if r2 == null goto label1;

        r0.<org.quartz.utils.DirtyFlagMap: boolean dirty> = 1;

     label1:
        return r2;
    }

    public int size()
    {
        org.quartz.utils.DirtyFlagMap r0;
        java.util.Map $r1;
        int $i0;

        r0 := @this: org.quartz.utils.DirtyFlagMap;

        $r1 = r0.<org.quartz.utils.DirtyFlagMap: java.util.Map map>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }

    public java.util.Collection values()
    {
        org.quartz.utils.DirtyFlagMap r0;
        org.quartz.utils.DirtyFlagMap$DirtyFlagCollection $r1;
        java.util.Map $r2;
        java.util.Collection $r3;

        r0 := @this: org.quartz.utils.DirtyFlagMap;

        $r1 = new org.quartz.utils.DirtyFlagMap$DirtyFlagCollection;

        $r2 = r0.<org.quartz.utils.DirtyFlagMap: java.util.Map map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        specialinvoke $r1.<org.quartz.utils.DirtyFlagMap$DirtyFlagCollection: void <init>(org.quartz.utils.DirtyFlagMap,java.util.Collection)>(r0, $r3);

        return $r1;
    }

    public java.lang.Object clone()
    {
        org.quartz.utils.DirtyFlagMap r0, r1;
        java.lang.Object $r3, $r7;
        java.util.Map $r4, $r5, $r8;
        boolean $z0;
        java.util.HashMap $r6;
        java.lang.CloneNotSupportedException $r9;
        java.lang.IncompatibleClassChangeError $r10;

        r0 := @this: org.quartz.utils.DirtyFlagMap;

     label1:
        $r3 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r1 = (org.quartz.utils.DirtyFlagMap) $r3;

        $r4 = r0.<org.quartz.utils.DirtyFlagMap: java.util.Map map>;

        $z0 = $r4 instanceof java.util.HashMap;

        if $z0 == 0 goto label2;

        $r5 = r0.<org.quartz.utils.DirtyFlagMap: java.util.Map map>;

        $r6 = (java.util.HashMap) $r5;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object clone()>();

        $r8 = (java.util.Map) $r7;

        r1.<org.quartz.utils.DirtyFlagMap: java.util.Map map> = $r8;

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        $r10 = new java.lang.IncompatibleClassChangeError;

        specialinvoke $r10.<java.lang.IncompatibleClassChangeError: void <init>(java.lang.String)>("Not Cloneable.");

        throw $r10;

     label4:
        return r1;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    static boolean access$002(org.quartz.utils.DirtyFlagMap, boolean)
    {
        org.quartz.utils.DirtyFlagMap r0;
        boolean z0;

        r0 := @parameter0: org.quartz.utils.DirtyFlagMap;

        z0 := @parameter1: boolean;

        r0.<org.quartz.utils.DirtyFlagMap: boolean dirty> = z0;

        return z0;
    }

    public static void <clinit>()
    {
        <org.quartz.utils.DirtyFlagMap: long serialVersionUID> = 1433884852607126222L;

        return;
    }
}
