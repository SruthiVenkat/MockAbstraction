public class org.quartz.integrations.tests.StdRowLockSemaphoreTest extends org.quartz.integrations.tests.QuartzDatabaseTestSupport
{
    static volatile boolean myLockInvoked;
    static volatile int maxRetry;
    static volatile long retryPeriod;
    static java.util.concurrent.CountDownLatch latch;

    public void <init>()
    {
        org.quartz.integrations.tests.StdRowLockSemaphoreTest r0;

        r0 := @this: org.quartz.integrations.tests.StdRowLockSemaphoreTest;

        specialinvoke r0.<org.quartz.integrations.tests.QuartzDatabaseTestSupport: void <init>()>();

        return;
    }

    public void initSchedulerBeforeTest() throws java.lang.Exception
    {
        org.quartz.integrations.tests.StdRowLockSemaphoreTest r0;

        r0 := @this: org.quartz.integrations.tests.StdRowLockSemaphoreTest;

        return;
    }

    public void initSchedulerBeforeTest(java.util.Properties) throws java.lang.Exception
    {
        org.quartz.integrations.tests.StdRowLockSemaphoreTest r0;
        java.util.Properties r1;
        org.quartz.impl.StdSchedulerFactory $r3;
        org.quartz.Scheduler $r4;

        r0 := @this: org.quartz.integrations.tests.StdRowLockSemaphoreTest;

        r1 := @parameter0: java.util.Properties;

        $r3 = new org.quartz.impl.StdSchedulerFactory;

        specialinvoke $r3.<org.quartz.impl.StdSchedulerFactory: void <init>(java.util.Properties)>(r1);

        $r4 = interfaceinvoke $r3.<org.quartz.SchedulerFactory: org.quartz.Scheduler getScheduler()>();

        r0.<org.quartz.integrations.tests.StdRowLockSemaphoreTest: org.quartz.Scheduler scheduler> = $r4;

        virtualinvoke r0.<org.quartz.integrations.tests.StdRowLockSemaphoreTest: void afterSchedulerInit()>();

        return;
    }

    java.util.Properties createDefaultProperties()
    {
        org.quartz.integrations.tests.StdRowLockSemaphoreTest r0;
        java.util.Properties r1;

        r0 := @this: org.quartz.integrations.tests.StdRowLockSemaphoreTest;

        r1 = specialinvoke r0.<org.quartz.integrations.tests.QuartzDatabaseTestSupport: java.util.Properties createSchedulerProperties()>();

        virtualinvoke r1.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("org.quartz.jobStore.lockHandler.class", "org.quartz.integrations.tests.StdRowLockSemaphoreTest$MyLock");

        virtualinvoke r1.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("org.quartz.jobStore.acquireTriggersWithinLock", "true");

        return r1;
    }

    java.util.Properties createMyLockProperties()
    {
        org.quartz.integrations.tests.StdRowLockSemaphoreTest r0;
        java.util.Properties r1;

        r0 := @this: org.quartz.integrations.tests.StdRowLockSemaphoreTest;

        r1 = specialinvoke r0.<org.quartz.integrations.tests.QuartzDatabaseTestSupport: java.util.Properties createSchedulerProperties()>();

        virtualinvoke r1.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("org.quartz.jobStore.lockHandler.class", "org.quartz.integrations.tests.StdRowLockSemaphoreTest$MyLock");

        virtualinvoke r1.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("org.quartz.jobStore.lockHandler.maxRetry", "7");

        virtualinvoke r1.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("org.quartz.jobStore.lockHandler.retryPeriod", "3000");

        virtualinvoke r1.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("org.quartz.jobStore.acquireTriggersWithinLock", "true");

        return r1;
    }

    public void testDefaultStdRowLockSemaphore() throws java.lang.Exception
    {
        org.quartz.integrations.tests.StdRowLockSemaphoreTest r0;
        org.quartz.JobDetail r1;
        java.util.Properties $r3;
        org.quartz.JobBuilder $r4, $r5;
        java.util.HashSet $r6;
        org.quartz.TriggerBuilder $r7, $r8;
        org.quartz.Trigger $r9;
        org.quartz.Scheduler $r10;
        java.util.concurrent.TimeUnit $r11;
        java.util.concurrent.CountDownLatch $r12;
        boolean $z2;
        java.lang.Boolean $r13, $r14;
        org.hamcrest.Matcher $r15, $r18, $r21;
        int $i0;
        java.lang.Integer $r16, $r17;
        long $l1;
        java.lang.Long $r19, $r20;

        r0 := @this: org.quartz.integrations.tests.StdRowLockSemaphoreTest;

        $r3 = virtualinvoke r0.<org.quartz.integrations.tests.StdRowLockSemaphoreTest: java.util.Properties createDefaultProperties()>();

        virtualinvoke r0.<org.quartz.integrations.tests.StdRowLockSemaphoreTest: void initSchedulerBeforeTest(java.util.Properties)>($r3);

        $r4 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob(java.lang.Class)>(class "Lorg/quartz/integrations/tests/HelloJob;");

        $r5 = virtualinvoke $r4.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String)>("job1");

        r1 = virtualinvoke $r5.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>()>();

        $r7 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r8 = virtualinvoke $r7.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder forJob(org.quartz.JobDetail)>(r1);

        $r9 = virtualinvoke $r8.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        virtualinvoke $r6.<java.util.HashSet: boolean add(java.lang.Object)>($r9);

        $r10 = r0.<org.quartz.integrations.tests.StdRowLockSemaphoreTest: org.quartz.Scheduler scheduler>;

        interfaceinvoke $r10.<org.quartz.Scheduler: void scheduleJob(org.quartz.JobDetail,java.util.Set,boolean)>(r1, $r6, 1);

        $r12 = <org.quartz.integrations.tests.StdRowLockSemaphoreTest: java.util.concurrent.CountDownLatch latch>;

        $r11 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        virtualinvoke $r12.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(1L, $r11);

        $z2 = <org.quartz.integrations.tests.StdRowLockSemaphoreTest: boolean myLockInvoked>;

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r15 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r14);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r13, $r15);

        $i0 = <org.quartz.integrations.tests.StdRowLockSemaphoreTest: int maxRetry>;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r18 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r17);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r16, $r18);

        $l1 = <org.quartz.integrations.tests.StdRowLockSemaphoreTest: long retryPeriod>;

        $r19 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r20 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1000L);

        $r21 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r20);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r19, $r21);

        return;
    }

    public void testCustomStdRowLockSemaphore() throws java.lang.Exception
    {
        org.quartz.integrations.tests.StdRowLockSemaphoreTest r0;
        org.quartz.JobDetail r1;
        java.util.Properties $r3;
        org.quartz.JobBuilder $r4, $r5;
        java.util.HashSet $r6;
        org.quartz.TriggerBuilder $r7, $r8;
        org.quartz.Trigger $r9;
        org.quartz.Scheduler $r10;
        java.util.concurrent.TimeUnit $r11;
        java.util.concurrent.CountDownLatch $r12;
        boolean $z2;
        java.lang.Boolean $r13, $r14;
        org.hamcrest.Matcher $r15, $r18, $r21;
        int $i0;
        java.lang.Integer $r16, $r17;
        long $l1;
        java.lang.Long $r19, $r20;

        r0 := @this: org.quartz.integrations.tests.StdRowLockSemaphoreTest;

        $r3 = virtualinvoke r0.<org.quartz.integrations.tests.StdRowLockSemaphoreTest: java.util.Properties createMyLockProperties()>();

        virtualinvoke r0.<org.quartz.integrations.tests.StdRowLockSemaphoreTest: void initSchedulerBeforeTest(java.util.Properties)>($r3);

        $r4 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob(java.lang.Class)>(class "Lorg/quartz/integrations/tests/HelloJob;");

        $r5 = virtualinvoke $r4.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String)>("job1");

        r1 = virtualinvoke $r5.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>()>();

        $r7 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r8 = virtualinvoke $r7.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder forJob(org.quartz.JobDetail)>(r1);

        $r9 = virtualinvoke $r8.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        virtualinvoke $r6.<java.util.HashSet: boolean add(java.lang.Object)>($r9);

        $r10 = r0.<org.quartz.integrations.tests.StdRowLockSemaphoreTest: org.quartz.Scheduler scheduler>;

        interfaceinvoke $r10.<org.quartz.Scheduler: void scheduleJob(org.quartz.JobDetail,java.util.Set,boolean)>(r1, $r6, 1);

        $r12 = <org.quartz.integrations.tests.StdRowLockSemaphoreTest: java.util.concurrent.CountDownLatch latch>;

        $r11 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        virtualinvoke $r12.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(1L, $r11);

        $z2 = <org.quartz.integrations.tests.StdRowLockSemaphoreTest: boolean myLockInvoked>;

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r15 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r14);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r13, $r15);

        $i0 = <org.quartz.integrations.tests.StdRowLockSemaphoreTest: int maxRetry>;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(7);

        $r18 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r17);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r16, $r18);

        $l1 = <org.quartz.integrations.tests.StdRowLockSemaphoreTest: long retryPeriod>;

        $r19 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r20 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(3000L);

        $r21 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r20);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r19, $r21);

        return;
    }

    static void <clinit>()
    {
        java.util.concurrent.CountDownLatch $r0;

        <org.quartz.integrations.tests.StdRowLockSemaphoreTest: boolean myLockInvoked> = 0;

        <org.quartz.integrations.tests.StdRowLockSemaphoreTest: int maxRetry> = -1;

        <org.quartz.integrations.tests.StdRowLockSemaphoreTest: long retryPeriod> = -1L;

        $r0 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r0.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        <org.quartz.integrations.tests.StdRowLockSemaphoreTest: java.util.concurrent.CountDownLatch latch> = $r0;

        return;
    }
}
