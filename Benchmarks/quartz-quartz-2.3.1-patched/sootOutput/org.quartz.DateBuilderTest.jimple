public class org.quartz.DateBuilderTest extends junit.framework.TestCase
{

    public void <init>()
    {
        org.quartz.DateBuilderTest r0;

        r0 := @this: org.quartz.DateBuilderTest;

        specialinvoke r0.<junit.framework.TestCase: void <init>()>();

        return;
    }

    public void testBasicBuilding()
    {
        org.quartz.DateBuilderTest r0;
        java.util.Date r1, r3;
        java.util.Calendar r2;

        r0 := @this: org.quartz.DateBuilderTest;

        r1 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(10, 30, 0, 1, 7, 2013);

        r2 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r2.<java.util.Calendar: void set(int,int)>(1, 2013);

        virtualinvoke r2.<java.util.Calendar: void set(int,int)>(2, 6);

        virtualinvoke r2.<java.util.Calendar: void set(int,int)>(5, 1);

        virtualinvoke r2.<java.util.Calendar: void set(int,int)>(11, 10);

        virtualinvoke r2.<java.util.Calendar: void set(int,int)>(12, 30);

        virtualinvoke r2.<java.util.Calendar: void set(int,int)>(13, 0);

        virtualinvoke r2.<java.util.Calendar: void set(int,int)>(14, 0);

        r3 = virtualinvoke r2.<java.util.Calendar: java.util.Date getTime()>();

        staticinvoke <org.quartz.DateBuilderTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("DateBuilder-produced date is not as expected.", r1, r3);

        return;
    }

    public void testBuilder()
    {
        org.quartz.DateBuilderTest r0;
        java.util.TimeZone r1;
        java.util.Locale r2;
        org.quartz.DateBuilder $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r11, $r12, $r13, $r14, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r44, $r45, $r46, $r47, $r48, $r49, $r50;
        java.util.Date $r10, $r15, $r25, $r34, $r43, $r51, r53, r54, r56, r57, r58, r59;
        java.util.Calendar r52, r55;

        r0 := @this: org.quartz.DateBuilderTest;

        r52 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r52.<java.util.Calendar: void set(int,int)>(1, 2013);

        virtualinvoke r52.<java.util.Calendar: void set(int,int)>(2, 6);

        virtualinvoke r52.<java.util.Calendar: void set(int,int)>(5, 1);

        virtualinvoke r52.<java.util.Calendar: void set(int,int)>(11, 10);

        virtualinvoke r52.<java.util.Calendar: void set(int,int)>(12, 30);

        virtualinvoke r52.<java.util.Calendar: void set(int,int)>(13, 0);

        virtualinvoke r52.<java.util.Calendar: void set(int,int)>(14, 0);

        $r3 = staticinvoke <org.quartz.DateBuilder: org.quartz.DateBuilder newDate()>();

        $r4 = virtualinvoke $r3.<org.quartz.DateBuilder: org.quartz.DateBuilder inYear(int)>(2013);

        $r5 = virtualinvoke $r4.<org.quartz.DateBuilder: org.quartz.DateBuilder inMonth(int)>(7);

        $r6 = virtualinvoke $r5.<org.quartz.DateBuilder: org.quartz.DateBuilder onDay(int)>(1);

        $r7 = virtualinvoke $r6.<org.quartz.DateBuilder: org.quartz.DateBuilder atHourOfDay(int)>(10);

        $r8 = virtualinvoke $r7.<org.quartz.DateBuilder: org.quartz.DateBuilder atMinute(int)>(30);

        $r9 = virtualinvoke $r8.<org.quartz.DateBuilder: org.quartz.DateBuilder atSecond(int)>(0);

        r53 = virtualinvoke $r9.<org.quartz.DateBuilder: java.util.Date build()>();

        $r10 = virtualinvoke r52.<java.util.Calendar: java.util.Date getTime()>();

        staticinvoke <org.quartz.DateBuilderTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("DateBuilder-produced date is not as expected.", $r10, r53);

        $r11 = staticinvoke <org.quartz.DateBuilder: org.quartz.DateBuilder newDate()>();

        $r12 = virtualinvoke $r11.<org.quartz.DateBuilder: org.quartz.DateBuilder inYear(int)>(2013);

        $r13 = virtualinvoke $r12.<org.quartz.DateBuilder: org.quartz.DateBuilder inMonthOnDay(int,int)>(7, 1);

        $r14 = virtualinvoke $r13.<org.quartz.DateBuilder: org.quartz.DateBuilder atHourMinuteAndSecond(int,int,int)>(10, 30, 0);

        r54 = virtualinvoke $r14.<org.quartz.DateBuilder: java.util.Date build()>();

        $r15 = virtualinvoke r52.<java.util.Calendar: java.util.Date getTime()>();

        staticinvoke <org.quartz.DateBuilderTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("DateBuilder-produced date is not as expected.", $r15, r54);

        r1 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT-4:00");

        r2 = <java.util.Locale: java.util.Locale TAIWAN>;

        r55 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone,java.util.Locale)>(r1, r2);

        virtualinvoke r55.<java.util.Calendar: void set(int,int)>(1, 2013);

        virtualinvoke r55.<java.util.Calendar: void set(int,int)>(2, 5);

        virtualinvoke r55.<java.util.Calendar: void set(int,int)>(5, 1);

        virtualinvoke r55.<java.util.Calendar: void set(int,int)>(11, 10);

        virtualinvoke r55.<java.util.Calendar: void set(int,int)>(12, 33);

        virtualinvoke r55.<java.util.Calendar: void set(int,int)>(13, 12);

        virtualinvoke r55.<java.util.Calendar: void set(int,int)>(14, 0);

        $r16 = staticinvoke <org.quartz.DateBuilder: org.quartz.DateBuilder newDate()>();

        $r17 = virtualinvoke $r16.<org.quartz.DateBuilder: org.quartz.DateBuilder inYear(int)>(2013);

        $r18 = virtualinvoke $r17.<org.quartz.DateBuilder: org.quartz.DateBuilder inMonth(int)>(6);

        $r19 = virtualinvoke $r18.<org.quartz.DateBuilder: org.quartz.DateBuilder onDay(int)>(1);

        $r20 = virtualinvoke $r19.<org.quartz.DateBuilder: org.quartz.DateBuilder atHourOfDay(int)>(10);

        $r21 = virtualinvoke $r20.<org.quartz.DateBuilder: org.quartz.DateBuilder atMinute(int)>(33);

        $r22 = virtualinvoke $r21.<org.quartz.DateBuilder: org.quartz.DateBuilder atSecond(int)>(12);

        $r23 = virtualinvoke $r22.<org.quartz.DateBuilder: org.quartz.DateBuilder inTimeZone(java.util.TimeZone)>(r1);

        $r24 = virtualinvoke $r23.<org.quartz.DateBuilder: org.quartz.DateBuilder inLocale(java.util.Locale)>(r2);

        r56 = virtualinvoke $r24.<org.quartz.DateBuilder: java.util.Date build()>();

        $r25 = virtualinvoke r55.<java.util.Calendar: java.util.Date getTime()>();

        staticinvoke <org.quartz.DateBuilderTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("DateBuilder-produced date is not as expected.", $r25, r56);

        $r26 = staticinvoke <org.quartz.DateBuilder: org.quartz.DateBuilder newDateInLocale(java.util.Locale)>(r2);

        $r27 = virtualinvoke $r26.<org.quartz.DateBuilder: org.quartz.DateBuilder inYear(int)>(2013);

        $r28 = virtualinvoke $r27.<org.quartz.DateBuilder: org.quartz.DateBuilder inMonth(int)>(6);

        $r29 = virtualinvoke $r28.<org.quartz.DateBuilder: org.quartz.DateBuilder onDay(int)>(1);

        $r30 = virtualinvoke $r29.<org.quartz.DateBuilder: org.quartz.DateBuilder atHourOfDay(int)>(10);

        $r31 = virtualinvoke $r30.<org.quartz.DateBuilder: org.quartz.DateBuilder atMinute(int)>(33);

        $r32 = virtualinvoke $r31.<org.quartz.DateBuilder: org.quartz.DateBuilder atSecond(int)>(12);

        $r33 = virtualinvoke $r32.<org.quartz.DateBuilder: org.quartz.DateBuilder inTimeZone(java.util.TimeZone)>(r1);

        r57 = virtualinvoke $r33.<org.quartz.DateBuilder: java.util.Date build()>();

        $r34 = virtualinvoke r55.<java.util.Calendar: java.util.Date getTime()>();

        staticinvoke <org.quartz.DateBuilderTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("DateBuilder-produced date is not as expected.", $r34, r57);

        $r35 = staticinvoke <org.quartz.DateBuilder: org.quartz.DateBuilder newDateInTimezone(java.util.TimeZone)>(r1);

        $r36 = virtualinvoke $r35.<org.quartz.DateBuilder: org.quartz.DateBuilder inYear(int)>(2013);

        $r37 = virtualinvoke $r36.<org.quartz.DateBuilder: org.quartz.DateBuilder inMonth(int)>(6);

        $r38 = virtualinvoke $r37.<org.quartz.DateBuilder: org.quartz.DateBuilder onDay(int)>(1);

        $r39 = virtualinvoke $r38.<org.quartz.DateBuilder: org.quartz.DateBuilder atHourOfDay(int)>(10);

        $r40 = virtualinvoke $r39.<org.quartz.DateBuilder: org.quartz.DateBuilder atMinute(int)>(33);

        $r41 = virtualinvoke $r40.<org.quartz.DateBuilder: org.quartz.DateBuilder atSecond(int)>(12);

        $r42 = virtualinvoke $r41.<org.quartz.DateBuilder: org.quartz.DateBuilder inLocale(java.util.Locale)>(r2);

        r58 = virtualinvoke $r42.<org.quartz.DateBuilder: java.util.Date build()>();

        $r43 = virtualinvoke r55.<java.util.Calendar: java.util.Date getTime()>();

        staticinvoke <org.quartz.DateBuilderTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("DateBuilder-produced date is not as expected.", $r43, r58);

        $r44 = staticinvoke <org.quartz.DateBuilder: org.quartz.DateBuilder newDateInTimeZoneAndLocale(java.util.TimeZone,java.util.Locale)>(r1, r2);

        $r45 = virtualinvoke $r44.<org.quartz.DateBuilder: org.quartz.DateBuilder inYear(int)>(2013);

        $r46 = virtualinvoke $r45.<org.quartz.DateBuilder: org.quartz.DateBuilder inMonth(int)>(6);

        $r47 = virtualinvoke $r46.<org.quartz.DateBuilder: org.quartz.DateBuilder onDay(int)>(1);

        $r48 = virtualinvoke $r47.<org.quartz.DateBuilder: org.quartz.DateBuilder atHourOfDay(int)>(10);

        $r49 = virtualinvoke $r48.<org.quartz.DateBuilder: org.quartz.DateBuilder atMinute(int)>(33);

        $r50 = virtualinvoke $r49.<org.quartz.DateBuilder: org.quartz.DateBuilder atSecond(int)>(12);

        r59 = virtualinvoke $r50.<org.quartz.DateBuilder: java.util.Date build()>();

        $r51 = virtualinvoke r55.<java.util.Calendar: java.util.Date getTime()>();

        staticinvoke <org.quartz.DateBuilderTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("DateBuilder-produced date is not as expected.", $r51, r59);

        return;
    }

    public void testEvensBuilders()
    {
        org.quartz.DateBuilderTest r0;
        java.util.Calendar r1, r2;
        java.lang.Object $r4;
        org.quartz.DateBuilder $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        java.util.Date $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, r27, r28, r29, r30, r31, r32, r33, r34, r35;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0;

        r0 := @this: org.quartz.DateBuilderTest;

        r1 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(1, 2013);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(2, 5);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(5, 1);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(11, 10);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(12, 33);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(13, 12);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(14, 0);

        $r4 = virtualinvoke r1.<java.util.Calendar: java.lang.Object clone()>();

        r2 = (java.util.Calendar) $r4;

        $r5 = staticinvoke <org.quartz.DateBuilder: org.quartz.DateBuilder newDate()>();

        $r6 = virtualinvoke $r5.<org.quartz.DateBuilder: org.quartz.DateBuilder inYear(int)>(2013);

        $r7 = virtualinvoke $r6.<org.quartz.DateBuilder: org.quartz.DateBuilder inMonth(int)>(6);

        $r8 = virtualinvoke $r7.<org.quartz.DateBuilder: org.quartz.DateBuilder onDay(int)>(1);

        $r9 = virtualinvoke $r8.<org.quartz.DateBuilder: org.quartz.DateBuilder atHourOfDay(int)>(10);

        $r10 = virtualinvoke $r9.<org.quartz.DateBuilder: org.quartz.DateBuilder atMinute(int)>(33);

        $r11 = virtualinvoke $r10.<org.quartz.DateBuilder: org.quartz.DateBuilder atSecond(int)>(12);

        r27 = virtualinvoke $r11.<org.quartz.DateBuilder: java.util.Date build()>();

        $r12 = virtualinvoke r1.<java.util.Calendar: java.util.Date getTime()>();

        staticinvoke <org.quartz.DateBuilderTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("DateBuilder-produced date is not as expected.", $r12, r27);

        virtualinvoke r2.<java.util.Calendar: void set(int,int)>(14, 13);

        $r13 = virtualinvoke r2.<java.util.Calendar: java.util.Date getTime()>();

        r28 = staticinvoke <org.quartz.DateBuilder: java.util.Date evenSecondDateBefore(java.util.Date)>($r13);

        $r14 = virtualinvoke r1.<java.util.Calendar: java.util.Date getTime()>();

        staticinvoke <org.quartz.DateBuilderTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("DateBuilder-produced date is not as expected.", $r14, r28);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(13, 13);

        virtualinvoke r2.<java.util.Calendar: void set(int,int)>(14, 13);

        $r15 = virtualinvoke r2.<java.util.Calendar: java.util.Date getTime()>();

        r29 = staticinvoke <org.quartz.DateBuilder: java.util.Date evenSecondDate(java.util.Date)>($r15);

        $r16 = virtualinvoke r1.<java.util.Calendar: java.util.Date getTime()>();

        staticinvoke <org.quartz.DateBuilderTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("DateBuilder-produced date is not as expected.", $r16, r29);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(13, 0);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(12, 34);

        virtualinvoke r2.<java.util.Calendar: void set(int,int)>(13, 13);

        $r17 = virtualinvoke r2.<java.util.Calendar: java.util.Date getTime()>();

        r30 = staticinvoke <org.quartz.DateBuilder: java.util.Date evenMinuteDate(java.util.Date)>($r17);

        $r18 = virtualinvoke r1.<java.util.Calendar: java.util.Date getTime()>();

        staticinvoke <org.quartz.DateBuilderTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("DateBuilder-produced date is not as expected.", $r18, r30);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(13, 0);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(12, 33);

        virtualinvoke r2.<java.util.Calendar: void set(int,int)>(13, 13);

        $r19 = virtualinvoke r2.<java.util.Calendar: java.util.Date getTime()>();

        r31 = staticinvoke <org.quartz.DateBuilder: java.util.Date evenMinuteDateBefore(java.util.Date)>($r19);

        $r20 = virtualinvoke r1.<java.util.Calendar: java.util.Date getTime()>();

        staticinvoke <org.quartz.DateBuilderTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("DateBuilder-produced date is not as expected.", $r20, r31);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(13, 0);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(12, 0);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(11, 11);

        virtualinvoke r2.<java.util.Calendar: void set(int,int)>(13, 13);

        $r21 = virtualinvoke r2.<java.util.Calendar: java.util.Date getTime()>();

        r32 = staticinvoke <org.quartz.DateBuilder: java.util.Date evenHourDate(java.util.Date)>($r21);

        $r22 = virtualinvoke r1.<java.util.Calendar: java.util.Date getTime()>();

        staticinvoke <org.quartz.DateBuilderTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("DateBuilder-produced date is not as expected.", $r22, r32);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(13, 0);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(12, 0);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(11, 10);

        virtualinvoke r2.<java.util.Calendar: void set(int,int)>(13, 13);

        $r23 = virtualinvoke r2.<java.util.Calendar: java.util.Date getTime()>();

        r33 = staticinvoke <org.quartz.DateBuilder: java.util.Date evenHourDateBefore(java.util.Date)>($r23);

        $r24 = virtualinvoke r1.<java.util.Calendar: java.util.Date getTime()>();

        staticinvoke <org.quartz.DateBuilderTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("DateBuilder-produced date is not as expected.", $r24, r33);

        $r25 = new java.util.Date;

        specialinvoke $r25.<java.util.Date: void <init>()>();

        r34 = staticinvoke <org.quartz.DateBuilder: java.util.Date evenHourDateAfterNow()>();

        virtualinvoke r1.<java.util.Calendar: void setTime(java.util.Date)>(r34);

        $i0 = virtualinvoke r1.<java.util.Calendar: int get(int)>(12);

        staticinvoke <org.quartz.DateBuilderTest: void assertEquals(java.lang.String,int,int)>("DateBuilder-produced date is not as expected.", 0, $i0);

        $i1 = virtualinvoke r1.<java.util.Calendar: int get(int)>(13);

        staticinvoke <org.quartz.DateBuilderTest: void assertEquals(java.lang.String,int,int)>("DateBuilder-produced date is not as expected.", 0, $i1);

        $i2 = virtualinvoke r1.<java.util.Calendar: int get(int)>(14);

        staticinvoke <org.quartz.DateBuilderTest: void assertEquals(java.lang.String,int,int)>("DateBuilder-produced date is not as expected.", 0, $i2);

        $z0 = virtualinvoke r34.<java.util.Date: boolean after(java.util.Date)>($r25);

        staticinvoke <org.quartz.DateBuilderTest: void assertTrue(java.lang.String,boolean)>("DateBuilder-produced date is not as expected.", $z0);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(13, 54);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(12, 13);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(11, 8);

        $r26 = virtualinvoke r1.<java.util.Calendar: java.util.Date getTime()>();

        r35 = staticinvoke <org.quartz.DateBuilder: java.util.Date nextGivenMinuteDate(java.util.Date,int)>($r26, 15);

        virtualinvoke r1.<java.util.Calendar: void setTime(java.util.Date)>(r35);

        $i3 = virtualinvoke r1.<java.util.Calendar: int get(int)>(11);

        staticinvoke <org.quartz.DateBuilderTest: void assertEquals(java.lang.String,int,int)>("DateBuilder-produced date is not as expected.", 8, $i3);

        $i4 = virtualinvoke r1.<java.util.Calendar: int get(int)>(12);

        staticinvoke <org.quartz.DateBuilderTest: void assertEquals(java.lang.String,int,int)>("DateBuilder-produced date is not as expected.", 15, $i4);

        $i5 = virtualinvoke r1.<java.util.Calendar: int get(int)>(13);

        staticinvoke <org.quartz.DateBuilderTest: void assertEquals(java.lang.String,int,int)>("DateBuilder-produced date is not as expected.", 0, $i5);

        $i6 = virtualinvoke r1.<java.util.Calendar: int get(int)>(14);

        staticinvoke <org.quartz.DateBuilderTest: void assertEquals(java.lang.String,int,int)>("DateBuilder-produced date is not as expected.", 0, $i6);

        return;
    }

    public void testGivenBuilders()
    {
        org.quartz.DateBuilderTest r0;
        java.util.Calendar r1;
        java.util.Date $r2, $r3, r4, r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: org.quartz.DateBuilderTest;

        r1 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(13, 54);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(12, 13);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(11, 8);

        $r2 = virtualinvoke r1.<java.util.Calendar: java.util.Date getTime()>();

        r4 = staticinvoke <org.quartz.DateBuilder: java.util.Date nextGivenMinuteDate(java.util.Date,int)>($r2, 45);

        virtualinvoke r1.<java.util.Calendar: void setTime(java.util.Date)>(r4);

        $i0 = virtualinvoke r1.<java.util.Calendar: int get(int)>(11);

        staticinvoke <org.quartz.DateBuilderTest: void assertEquals(java.lang.String,int,int)>("DateBuilder-produced date is not as expected.", 8, $i0);

        $i1 = virtualinvoke r1.<java.util.Calendar: int get(int)>(12);

        staticinvoke <org.quartz.DateBuilderTest: void assertEquals(java.lang.String,int,int)>("DateBuilder-produced date is not as expected.", 45, $i1);

        $i2 = virtualinvoke r1.<java.util.Calendar: int get(int)>(13);

        staticinvoke <org.quartz.DateBuilderTest: void assertEquals(java.lang.String,int,int)>("DateBuilder-produced date is not as expected.", 0, $i2);

        $i3 = virtualinvoke r1.<java.util.Calendar: int get(int)>(14);

        staticinvoke <org.quartz.DateBuilderTest: void assertEquals(java.lang.String,int,int)>("DateBuilder-produced date is not as expected.", 0, $i3);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(13, 54);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(12, 46);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(11, 8);

        $r3 = virtualinvoke r1.<java.util.Calendar: java.util.Date getTime()>();

        r5 = staticinvoke <org.quartz.DateBuilder: java.util.Date nextGivenMinuteDate(java.util.Date,int)>($r3, 45);

        virtualinvoke r1.<java.util.Calendar: void setTime(java.util.Date)>(r5);

        $i4 = virtualinvoke r1.<java.util.Calendar: int get(int)>(11);

        staticinvoke <org.quartz.DateBuilderTest: void assertEquals(java.lang.String,int,int)>("DateBuilder-produced date is not as expected.", 9, $i4);

        $i5 = virtualinvoke r1.<java.util.Calendar: int get(int)>(12);

        staticinvoke <org.quartz.DateBuilderTest: void assertEquals(java.lang.String,int,int)>("DateBuilder-produced date is not as expected.", 0, $i5);

        $i6 = virtualinvoke r1.<java.util.Calendar: int get(int)>(13);

        staticinvoke <org.quartz.DateBuilderTest: void assertEquals(java.lang.String,int,int)>("DateBuilder-produced date is not as expected.", 0, $i6);

        $i7 = virtualinvoke r1.<java.util.Calendar: int get(int)>(14);

        staticinvoke <org.quartz.DateBuilderTest: void assertEquals(java.lang.String,int,int)>("DateBuilder-produced date is not as expected.", 0, $i7);

        return;
    }

    public void testAtBuilders()
    {
        org.quartz.DateBuilderTest r0;
        java.util.Calendar r1, r2;
        java.util.Date $r3, $r4, r5, r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;

        r0 := @this: org.quartz.DateBuilderTest;

        r1 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        r2 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $r3 = new java.util.Date;

        specialinvoke $r3.<java.util.Date: void <init>()>();

        virtualinvoke r1.<java.util.Calendar: void setTime(java.util.Date)>($r3);

        r5 = staticinvoke <org.quartz.DateBuilder: java.util.Date todayAt(int,int,int)>(10, 33, 12);

        virtualinvoke r2.<java.util.Calendar: void setTime(java.util.Date)>(r5);

        $i0 = virtualinvoke r2.<java.util.Calendar: int get(int)>(11);

        staticinvoke <org.quartz.DateBuilderTest: void assertEquals(java.lang.String,int,int)>("DateBuilder-produced date is not as expected.", 10, $i0);

        $i1 = virtualinvoke r2.<java.util.Calendar: int get(int)>(12);

        staticinvoke <org.quartz.DateBuilderTest: void assertEquals(java.lang.String,int,int)>("DateBuilder-produced date is not as expected.", 33, $i1);

        $i2 = virtualinvoke r2.<java.util.Calendar: int get(int)>(13);

        staticinvoke <org.quartz.DateBuilderTest: void assertEquals(java.lang.String,int,int)>("DateBuilder-produced date is not as expected.", 12, $i2);

        $i3 = virtualinvoke r2.<java.util.Calendar: int get(int)>(14);

        staticinvoke <org.quartz.DateBuilderTest: void assertEquals(java.lang.String,int,int)>("DateBuilder-produced date is not as expected.", 0, $i3);

        $i4 = virtualinvoke r1.<java.util.Calendar: int get(int)>(6);

        $i5 = virtualinvoke r2.<java.util.Calendar: int get(int)>(6);

        staticinvoke <org.quartz.DateBuilderTest: void assertEquals(java.lang.String,int,int)>("DateBuilder-produced date is not as expected.", $i4, $i5);

        $r4 = new java.util.Date;

        specialinvoke $r4.<java.util.Date: void <init>()>();

        virtualinvoke r1.<java.util.Calendar: void setTime(java.util.Date)>($r4);

        virtualinvoke r1.<java.util.Calendar: void add(int,int)>(14, 86400000);

        r6 = staticinvoke <org.quartz.DateBuilder: java.util.Date tomorrowAt(int,int,int)>(10, 33, 12);

        virtualinvoke r2.<java.util.Calendar: void setTime(java.util.Date)>(r6);

        $i6 = virtualinvoke r2.<java.util.Calendar: int get(int)>(11);

        staticinvoke <org.quartz.DateBuilderTest: void assertEquals(java.lang.String,int,int)>("DateBuilder-produced date is not as expected.", 10, $i6);

        $i7 = virtualinvoke r2.<java.util.Calendar: int get(int)>(12);

        staticinvoke <org.quartz.DateBuilderTest: void assertEquals(java.lang.String,int,int)>("DateBuilder-produced date is not as expected.", 33, $i7);

        $i8 = virtualinvoke r2.<java.util.Calendar: int get(int)>(13);

        staticinvoke <org.quartz.DateBuilderTest: void assertEquals(java.lang.String,int,int)>("DateBuilder-produced date is not as expected.", 12, $i8);

        $i9 = virtualinvoke r2.<java.util.Calendar: int get(int)>(14);

        staticinvoke <org.quartz.DateBuilderTest: void assertEquals(java.lang.String,int,int)>("DateBuilder-produced date is not as expected.", 0, $i9);

        $i10 = virtualinvoke r1.<java.util.Calendar: int get(int)>(6);

        $i11 = virtualinvoke r2.<java.util.Calendar: int get(int)>(6);

        staticinvoke <org.quartz.DateBuilderTest: void assertEquals(java.lang.String,int,int)>("DateBuilder-produced date is not as expected.", $i10, $i11);

        return;
    }

    public void testTranslate()
    {
        org.quartz.DateBuilderTest r0;
        java.util.TimeZone r1, r2;
        java.util.Date $r3, $r4, $r5, $r6;
        int $i0, $i1;
        java.util.Calendar r7, r8;

        r0 := @this: org.quartz.DateBuilderTest;

        r1 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT-2:00");

        r2 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT-4:00");

        r7 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>(r1);

        virtualinvoke r7.<java.util.Calendar: void set(int,int)>(1, 2013);

        virtualinvoke r7.<java.util.Calendar: void set(int,int)>(2, 5);

        virtualinvoke r7.<java.util.Calendar: void set(int,int)>(5, 1);

        virtualinvoke r7.<java.util.Calendar: void set(int,int)>(11, 10);

        virtualinvoke r7.<java.util.Calendar: void set(int,int)>(12, 33);

        virtualinvoke r7.<java.util.Calendar: void set(int,int)>(13, 12);

        virtualinvoke r7.<java.util.Calendar: void set(int,int)>(14, 0);

        $r3 = virtualinvoke r7.<java.util.Calendar: java.util.Date getTime()>();

        $r4 = staticinvoke <org.quartz.DateBuilder: java.util.Date translateTime(java.util.Date,java.util.TimeZone,java.util.TimeZone)>($r3, r1, r2);

        virtualinvoke r7.<java.util.Calendar: void setTime(java.util.Date)>($r4);

        $i0 = virtualinvoke r7.<java.util.Calendar: int get(int)>(11);

        staticinvoke <org.quartz.DateBuilderTest: void assertEquals(java.lang.String,int,int)>("DateBuilder-produced date is not as expected.", 12, $i0);

        r8 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>(r2);

        virtualinvoke r8.<java.util.Calendar: void set(int,int)>(1, 2013);

        virtualinvoke r8.<java.util.Calendar: void set(int,int)>(2, 5);

        virtualinvoke r8.<java.util.Calendar: void set(int,int)>(5, 1);

        virtualinvoke r8.<java.util.Calendar: void set(int,int)>(11, 10);

        virtualinvoke r8.<java.util.Calendar: void set(int,int)>(12, 33);

        virtualinvoke r8.<java.util.Calendar: void set(int,int)>(13, 12);

        virtualinvoke r8.<java.util.Calendar: void set(int,int)>(14, 0);

        $r5 = virtualinvoke r8.<java.util.Calendar: java.util.Date getTime()>();

        $r6 = staticinvoke <org.quartz.DateBuilder: java.util.Date translateTime(java.util.Date,java.util.TimeZone,java.util.TimeZone)>($r5, r2, r1);

        virtualinvoke r8.<java.util.Calendar: void setTime(java.util.Date)>($r6);

        $i1 = virtualinvoke r8.<java.util.Calendar: int get(int)>(11);

        staticinvoke <org.quartz.DateBuilderTest: void assertEquals(java.lang.String,int,int)>("DateBuilder-produced date is not as expected.", 8, $i1);

        return;
    }

    public void testMonthTranslations()
    {
        org.quartz.DateBuilderTest r0;
        java.util.Calendar r1;
        org.quartz.DateBuilder $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.util.Date r50, r51, r52, r53, r54, r55, r56, r57, r58, r59, r60, r61;

        r0 := @this: org.quartz.DateBuilderTest;

        r1 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $r2 = staticinvoke <org.quartz.DateBuilder: org.quartz.DateBuilder newDate()>();

        $r3 = virtualinvoke $r2.<org.quartz.DateBuilder: org.quartz.DateBuilder inYear(int)>(2013);

        $r4 = virtualinvoke $r3.<org.quartz.DateBuilder: org.quartz.DateBuilder inMonthOnDay(int,int)>(1, 1);

        $r5 = virtualinvoke $r4.<org.quartz.DateBuilder: org.quartz.DateBuilder atHourMinuteAndSecond(int,int,int)>(10, 30, 0);

        r50 = virtualinvoke $r5.<org.quartz.DateBuilder: java.util.Date build()>();

        virtualinvoke r1.<java.util.Calendar: void setTime(java.util.Date)>(r50);

        $i0 = virtualinvoke r1.<java.util.Calendar: int get(int)>(2);

        staticinvoke <org.quartz.DateBuilderTest: void assertEquals(java.lang.String,int,int)>("DateBuilder-produced date is not as expected.", 0, $i0);

        $r6 = staticinvoke <org.quartz.DateBuilder: org.quartz.DateBuilder newDate()>();

        $r7 = virtualinvoke $r6.<org.quartz.DateBuilder: org.quartz.DateBuilder inYear(int)>(2013);

        $r8 = virtualinvoke $r7.<org.quartz.DateBuilder: org.quartz.DateBuilder inMonthOnDay(int,int)>(2, 1);

        $r9 = virtualinvoke $r8.<org.quartz.DateBuilder: org.quartz.DateBuilder atHourMinuteAndSecond(int,int,int)>(10, 30, 0);

        r51 = virtualinvoke $r9.<org.quartz.DateBuilder: java.util.Date build()>();

        virtualinvoke r1.<java.util.Calendar: void setTime(java.util.Date)>(r51);

        $i1 = virtualinvoke r1.<java.util.Calendar: int get(int)>(2);

        staticinvoke <org.quartz.DateBuilderTest: void assertEquals(java.lang.String,int,int)>("DateBuilder-produced date is not as expected.", 1, $i1);

        $r10 = staticinvoke <org.quartz.DateBuilder: org.quartz.DateBuilder newDate()>();

        $r11 = virtualinvoke $r10.<org.quartz.DateBuilder: org.quartz.DateBuilder inYear(int)>(2013);

        $r12 = virtualinvoke $r11.<org.quartz.DateBuilder: org.quartz.DateBuilder inMonthOnDay(int,int)>(3, 1);

        $r13 = virtualinvoke $r12.<org.quartz.DateBuilder: org.quartz.DateBuilder atHourMinuteAndSecond(int,int,int)>(10, 30, 0);

        r52 = virtualinvoke $r13.<org.quartz.DateBuilder: java.util.Date build()>();

        virtualinvoke r1.<java.util.Calendar: void setTime(java.util.Date)>(r52);

        $i2 = virtualinvoke r1.<java.util.Calendar: int get(int)>(2);

        staticinvoke <org.quartz.DateBuilderTest: void assertEquals(java.lang.String,int,int)>("DateBuilder-produced date is not as expected.", 2, $i2);

        $r14 = staticinvoke <org.quartz.DateBuilder: org.quartz.DateBuilder newDate()>();

        $r15 = virtualinvoke $r14.<org.quartz.DateBuilder: org.quartz.DateBuilder inYear(int)>(2013);

        $r16 = virtualinvoke $r15.<org.quartz.DateBuilder: org.quartz.DateBuilder inMonthOnDay(int,int)>(4, 1);

        $r17 = virtualinvoke $r16.<org.quartz.DateBuilder: org.quartz.DateBuilder atHourMinuteAndSecond(int,int,int)>(10, 30, 0);

        r53 = virtualinvoke $r17.<org.quartz.DateBuilder: java.util.Date build()>();

        virtualinvoke r1.<java.util.Calendar: void setTime(java.util.Date)>(r53);

        $i3 = virtualinvoke r1.<java.util.Calendar: int get(int)>(2);

        staticinvoke <org.quartz.DateBuilderTest: void assertEquals(java.lang.String,int,int)>("DateBuilder-produced date is not as expected.", 3, $i3);

        $r18 = staticinvoke <org.quartz.DateBuilder: org.quartz.DateBuilder newDate()>();

        $r19 = virtualinvoke $r18.<org.quartz.DateBuilder: org.quartz.DateBuilder inYear(int)>(2013);

        $r20 = virtualinvoke $r19.<org.quartz.DateBuilder: org.quartz.DateBuilder inMonthOnDay(int,int)>(5, 1);

        $r21 = virtualinvoke $r20.<org.quartz.DateBuilder: org.quartz.DateBuilder atHourMinuteAndSecond(int,int,int)>(10, 30, 0);

        r54 = virtualinvoke $r21.<org.quartz.DateBuilder: java.util.Date build()>();

        virtualinvoke r1.<java.util.Calendar: void setTime(java.util.Date)>(r54);

        $i4 = virtualinvoke r1.<java.util.Calendar: int get(int)>(2);

        staticinvoke <org.quartz.DateBuilderTest: void assertEquals(java.lang.String,int,int)>("DateBuilder-produced date is not as expected.", 4, $i4);

        $r22 = staticinvoke <org.quartz.DateBuilder: org.quartz.DateBuilder newDate()>();

        $r23 = virtualinvoke $r22.<org.quartz.DateBuilder: org.quartz.DateBuilder inYear(int)>(2013);

        $r24 = virtualinvoke $r23.<org.quartz.DateBuilder: org.quartz.DateBuilder inMonthOnDay(int,int)>(6, 1);

        $r25 = virtualinvoke $r24.<org.quartz.DateBuilder: org.quartz.DateBuilder atHourMinuteAndSecond(int,int,int)>(10, 30, 0);

        r55 = virtualinvoke $r25.<org.quartz.DateBuilder: java.util.Date build()>();

        virtualinvoke r1.<java.util.Calendar: void setTime(java.util.Date)>(r55);

        $i5 = virtualinvoke r1.<java.util.Calendar: int get(int)>(2);

        staticinvoke <org.quartz.DateBuilderTest: void assertEquals(java.lang.String,int,int)>("DateBuilder-produced date is not as expected.", 5, $i5);

        $r26 = staticinvoke <org.quartz.DateBuilder: org.quartz.DateBuilder newDate()>();

        $r27 = virtualinvoke $r26.<org.quartz.DateBuilder: org.quartz.DateBuilder inYear(int)>(2013);

        $r28 = virtualinvoke $r27.<org.quartz.DateBuilder: org.quartz.DateBuilder inMonthOnDay(int,int)>(7, 1);

        $r29 = virtualinvoke $r28.<org.quartz.DateBuilder: org.quartz.DateBuilder atHourMinuteAndSecond(int,int,int)>(10, 30, 0);

        r56 = virtualinvoke $r29.<org.quartz.DateBuilder: java.util.Date build()>();

        virtualinvoke r1.<java.util.Calendar: void setTime(java.util.Date)>(r56);

        $i6 = virtualinvoke r1.<java.util.Calendar: int get(int)>(2);

        staticinvoke <org.quartz.DateBuilderTest: void assertEquals(java.lang.String,int,int)>("DateBuilder-produced date is not as expected.", 6, $i6);

        $r30 = staticinvoke <org.quartz.DateBuilder: org.quartz.DateBuilder newDate()>();

        $r31 = virtualinvoke $r30.<org.quartz.DateBuilder: org.quartz.DateBuilder inYear(int)>(2013);

        $r32 = virtualinvoke $r31.<org.quartz.DateBuilder: org.quartz.DateBuilder inMonthOnDay(int,int)>(8, 1);

        $r33 = virtualinvoke $r32.<org.quartz.DateBuilder: org.quartz.DateBuilder atHourMinuteAndSecond(int,int,int)>(10, 30, 0);

        r57 = virtualinvoke $r33.<org.quartz.DateBuilder: java.util.Date build()>();

        virtualinvoke r1.<java.util.Calendar: void setTime(java.util.Date)>(r57);

        $i7 = virtualinvoke r1.<java.util.Calendar: int get(int)>(2);

        staticinvoke <org.quartz.DateBuilderTest: void assertEquals(java.lang.String,int,int)>("DateBuilder-produced date is not as expected.", 7, $i7);

        $r34 = staticinvoke <org.quartz.DateBuilder: org.quartz.DateBuilder newDate()>();

        $r35 = virtualinvoke $r34.<org.quartz.DateBuilder: org.quartz.DateBuilder inYear(int)>(2013);

        $r36 = virtualinvoke $r35.<org.quartz.DateBuilder: org.quartz.DateBuilder inMonthOnDay(int,int)>(9, 1);

        $r37 = virtualinvoke $r36.<org.quartz.DateBuilder: org.quartz.DateBuilder atHourMinuteAndSecond(int,int,int)>(10, 30, 0);

        r58 = virtualinvoke $r37.<org.quartz.DateBuilder: java.util.Date build()>();

        virtualinvoke r1.<java.util.Calendar: void setTime(java.util.Date)>(r58);

        $i8 = virtualinvoke r1.<java.util.Calendar: int get(int)>(2);

        staticinvoke <org.quartz.DateBuilderTest: void assertEquals(java.lang.String,int,int)>("DateBuilder-produced date is not as expected.", 8, $i8);

        $r38 = staticinvoke <org.quartz.DateBuilder: org.quartz.DateBuilder newDate()>();

        $r39 = virtualinvoke $r38.<org.quartz.DateBuilder: org.quartz.DateBuilder inYear(int)>(2013);

        $r40 = virtualinvoke $r39.<org.quartz.DateBuilder: org.quartz.DateBuilder inMonthOnDay(int,int)>(10, 1);

        $r41 = virtualinvoke $r40.<org.quartz.DateBuilder: org.quartz.DateBuilder atHourMinuteAndSecond(int,int,int)>(10, 30, 0);

        r59 = virtualinvoke $r41.<org.quartz.DateBuilder: java.util.Date build()>();

        virtualinvoke r1.<java.util.Calendar: void setTime(java.util.Date)>(r59);

        $i9 = virtualinvoke r1.<java.util.Calendar: int get(int)>(2);

        staticinvoke <org.quartz.DateBuilderTest: void assertEquals(java.lang.String,int,int)>("DateBuilder-produced date is not as expected.", 9, $i9);

        $r42 = staticinvoke <org.quartz.DateBuilder: org.quartz.DateBuilder newDate()>();

        $r43 = virtualinvoke $r42.<org.quartz.DateBuilder: org.quartz.DateBuilder inYear(int)>(2013);

        $r44 = virtualinvoke $r43.<org.quartz.DateBuilder: org.quartz.DateBuilder inMonthOnDay(int,int)>(11, 1);

        $r45 = virtualinvoke $r44.<org.quartz.DateBuilder: org.quartz.DateBuilder atHourMinuteAndSecond(int,int,int)>(10, 30, 0);

        r60 = virtualinvoke $r45.<org.quartz.DateBuilder: java.util.Date build()>();

        virtualinvoke r1.<java.util.Calendar: void setTime(java.util.Date)>(r60);

        $i10 = virtualinvoke r1.<java.util.Calendar: int get(int)>(2);

        staticinvoke <org.quartz.DateBuilderTest: void assertEquals(java.lang.String,int,int)>("DateBuilder-produced date is not as expected.", 10, $i10);

        $r46 = staticinvoke <org.quartz.DateBuilder: org.quartz.DateBuilder newDate()>();

        $r47 = virtualinvoke $r46.<org.quartz.DateBuilder: org.quartz.DateBuilder inYear(int)>(2013);

        $r48 = virtualinvoke $r47.<org.quartz.DateBuilder: org.quartz.DateBuilder inMonthOnDay(int,int)>(12, 1);

        $r49 = virtualinvoke $r48.<org.quartz.DateBuilder: org.quartz.DateBuilder atHourMinuteAndSecond(int,int,int)>(10, 30, 0);

        r61 = virtualinvoke $r49.<org.quartz.DateBuilder: java.util.Date build()>();

        virtualinvoke r1.<java.util.Calendar: void setTime(java.util.Date)>(r61);

        $i11 = virtualinvoke r1.<java.util.Calendar: int get(int)>(2);

        staticinvoke <org.quartz.DateBuilderTest: void assertEquals(java.lang.String,int,int)>("DateBuilder-produced date is not as expected.", 11, $i11);

        return;
    }
}
