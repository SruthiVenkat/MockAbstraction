public class org.quartz.integrations.tests.JobDataMapStorageTest extends org.quartz.integrations.tests.QuartzDatabaseTestSupport
{

    public void <init>()
    {
        org.quartz.integrations.tests.JobDataMapStorageTest r0;

        r0 := @this: org.quartz.integrations.tests.JobDataMapStorageTest;

        specialinvoke r0.<org.quartz.integrations.tests.QuartzDatabaseTestSupport: void <init>()>();

        return;
    }

    public void testJobDataMapDirtyFlag() throws java.lang.Exception
    {
        org.quartz.integrations.tests.JobDataMapStorageTest r0;
        org.quartz.JobDetail r1, r3;
        org.quartz.CronTrigger r2;
        org.quartz.JobDataMap r4, r6;
        org.quartz.Trigger r5, $r15;
        org.quartz.JobBuilder $r7, $r8, $r9;
        org.quartz.TriggerBuilder $r10, $r11, $r13, $r14;
        org.quartz.CronScheduleBuilder $r12;
        org.quartz.Scheduler $r16, $r18, $r23;
        org.quartz.JobKey $r19;
        boolean $z0, $z1;
        java.lang.Boolean $r20, $r21, $r25, $r26;
        org.hamcrest.Matcher $r22, $r27;
        org.quartz.TriggerKey $r24;

        r0 := @this: org.quartz.integrations.tests.JobDataMapStorageTest;

        $r7 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob(java.lang.Class)>(class "Lorg/quartz/integrations/tests/HelloJob;");

        $r8 = virtualinvoke $r7.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String)>("test");

        $r9 = virtualinvoke $r8.<org.quartz.JobBuilder: org.quartz.JobBuilder usingJobData(java.lang.String,java.lang.String)>("jfoo", "bar");

        r1 = virtualinvoke $r9.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        $r10 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r11 = virtualinvoke $r10.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String)>("test");

        $r12 = staticinvoke <org.quartz.CronScheduleBuilder: org.quartz.CronScheduleBuilder cronSchedule(java.lang.String)>("0 0 0 * * ?");

        $r13 = virtualinvoke $r11.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>($r12);

        $r14 = virtualinvoke $r13.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder usingJobData(java.lang.String,java.lang.String)>("tfoo", "bar");

        $r15 = virtualinvoke $r14.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        r2 = (org.quartz.CronTrigger) $r15;

        $r16 = r0.<org.quartz.integrations.tests.JobDataMapStorageTest: org.quartz.Scheduler scheduler>;

        interfaceinvoke $r16.<org.quartz.Scheduler: java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)>(r1, r2);

        $r18 = r0.<org.quartz.integrations.tests.JobDataMapStorageTest: org.quartz.Scheduler scheduler>;

        $r19 = staticinvoke <org.quartz.JobKey: org.quartz.JobKey jobKey(java.lang.String)>("test");

        r3 = interfaceinvoke $r18.<org.quartz.Scheduler: org.quartz.JobDetail getJobDetail(org.quartz.JobKey)>($r19);

        r4 = interfaceinvoke r3.<org.quartz.JobDetail: org.quartz.JobDataMap getJobDataMap()>();

        $z0 = virtualinvoke r4.<org.quartz.JobDataMap: boolean isDirty()>();

        $r20 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r21 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r22 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r21);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r20, $r22);

        $r23 = r0.<org.quartz.integrations.tests.JobDataMapStorageTest: org.quartz.Scheduler scheduler>;

        $r24 = staticinvoke <org.quartz.TriggerKey: org.quartz.TriggerKey triggerKey(java.lang.String)>("test");

        r5 = interfaceinvoke $r23.<org.quartz.Scheduler: org.quartz.Trigger getTrigger(org.quartz.TriggerKey)>($r24);

        r6 = interfaceinvoke r5.<org.quartz.Trigger: org.quartz.JobDataMap getJobDataMap()>();

        $z1 = virtualinvoke r6.<org.quartz.JobDataMap: boolean isDirty()>();

        $r25 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        $r26 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r27 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r26);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r25, $r27);

        return;
    }
}
