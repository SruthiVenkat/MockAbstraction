class org.quartz.utils.DirtyFlagMap$DirtyFlagIterator extends java.lang.Object implements java.util.Iterator
{
    private java.util.Iterator iterator;
    final org.quartz.utils.DirtyFlagMap this$0;

    public void <init>(org.quartz.utils.DirtyFlagMap, java.util.Iterator)
    {
        org.quartz.utils.DirtyFlagMap$DirtyFlagIterator r0;
        org.quartz.utils.DirtyFlagMap r1;
        java.util.Iterator r2;

        r0 := @this: org.quartz.utils.DirtyFlagMap$DirtyFlagIterator;

        r1 := @parameter0: org.quartz.utils.DirtyFlagMap;

        r2 := @parameter1: java.util.Iterator;

        r0.<org.quartz.utils.DirtyFlagMap$DirtyFlagIterator: org.quartz.utils.DirtyFlagMap this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.quartz.utils.DirtyFlagMap$DirtyFlagIterator: java.util.Iterator iterator> = r2;

        return;
    }

    public void remove()
    {
        org.quartz.utils.DirtyFlagMap$DirtyFlagIterator r0;
        org.quartz.utils.DirtyFlagMap $r1;
        java.util.Iterator $r2;

        r0 := @this: org.quartz.utils.DirtyFlagMap$DirtyFlagIterator;

        $r1 = r0.<org.quartz.utils.DirtyFlagMap$DirtyFlagIterator: org.quartz.utils.DirtyFlagMap this$0>;

        staticinvoke <org.quartz.utils.DirtyFlagMap: boolean access$002(org.quartz.utils.DirtyFlagMap,boolean)>($r1, 1);

        $r2 = r0.<org.quartz.utils.DirtyFlagMap$DirtyFlagIterator: java.util.Iterator iterator>;

        interfaceinvoke $r2.<java.util.Iterator: void remove()>();

        return;
    }

    public boolean hasNext()
    {
        org.quartz.utils.DirtyFlagMap$DirtyFlagIterator r0;
        java.util.Iterator $r1;
        boolean $z0;

        r0 := @this: org.quartz.utils.DirtyFlagMap$DirtyFlagIterator;

        $r1 = r0.<org.quartz.utils.DirtyFlagMap$DirtyFlagIterator: java.util.Iterator iterator>;

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        return $z0;
    }

    public java.lang.Object next()
    {
        org.quartz.utils.DirtyFlagMap$DirtyFlagIterator r0;
        java.util.Iterator $r1;
        java.lang.Object $r2;

        r0 := @this: org.quartz.utils.DirtyFlagMap$DirtyFlagIterator;

        $r1 = r0.<org.quartz.utils.DirtyFlagMap$DirtyFlagIterator: java.util.Iterator iterator>;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        return $r2;
    }
}
