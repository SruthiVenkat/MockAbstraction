public class org.quartz.utils.counter.sampled.SampledCounterConfig extends org.quartz.utils.counter.CounterConfig
{
    private final int intervalSecs;
    private final int historySize;
    private final boolean isReset;

    public void <init>(int, int, boolean, long)
    {
        org.quartz.utils.counter.sampled.SampledCounterConfig r0;
        int i0, i1;
        boolean z0;
        long l2;
        java.lang.IllegalArgumentException $r1, $r7;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r8, $r9, $r10, $r11;
        java.lang.String $r6, $r12;

        r0 := @this: org.quartz.utils.counter.sampled.SampledCounterConfig;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        l2 := @parameter3: long;

        specialinvoke r0.<org.quartz.utils.counter.CounterConfig: void <init>(long)>(l2);

        if i0 >= 1 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Interval (");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") must be greater than or equal to 1");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r7;

     label1:
        if i1 >= 1 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("History size (");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") must be greater than or equal to 1");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r1;

     label2:
        r0.<org.quartz.utils.counter.sampled.SampledCounterConfig: int intervalSecs> = i0;

        r0.<org.quartz.utils.counter.sampled.SampledCounterConfig: int historySize> = i1;

        r0.<org.quartz.utils.counter.sampled.SampledCounterConfig: boolean isReset> = z0;

        return;
    }

    public int getHistorySize()
    {
        org.quartz.utils.counter.sampled.SampledCounterConfig r0;
        int $i0;

        r0 := @this: org.quartz.utils.counter.sampled.SampledCounterConfig;

        $i0 = r0.<org.quartz.utils.counter.sampled.SampledCounterConfig: int historySize>;

        return $i0;
    }

    public int getIntervalSecs()
    {
        org.quartz.utils.counter.sampled.SampledCounterConfig r0;
        int $i0;

        r0 := @this: org.quartz.utils.counter.sampled.SampledCounterConfig;

        $i0 = r0.<org.quartz.utils.counter.sampled.SampledCounterConfig: int intervalSecs>;

        return $i0;
    }

    public boolean isResetOnSample()
    {
        org.quartz.utils.counter.sampled.SampledCounterConfig r0;
        boolean $z0;

        r0 := @this: org.quartz.utils.counter.sampled.SampledCounterConfig;

        $z0 = r0.<org.quartz.utils.counter.sampled.SampledCounterConfig: boolean isReset>;

        return $z0;
    }

    public org.quartz.utils.counter.Counter createCounter()
    {
        org.quartz.utils.counter.sampled.SampledCounterConfig r0;
        org.quartz.utils.counter.sampled.SampledCounterImpl $r1;

        r0 := @this: org.quartz.utils.counter.sampled.SampledCounterConfig;

        $r1 = new org.quartz.utils.counter.sampled.SampledCounterImpl;

        specialinvoke $r1.<org.quartz.utils.counter.sampled.SampledCounterImpl: void <init>(org.quartz.utils.counter.sampled.SampledCounterConfig)>(r0);

        return $r1;
    }
}
