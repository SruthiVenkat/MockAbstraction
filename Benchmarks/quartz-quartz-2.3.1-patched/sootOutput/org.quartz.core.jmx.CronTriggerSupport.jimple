public class org.quartz.core.jmx.CronTriggerSupport extends java.lang.Object
{
    private static final java.lang.String COMPOSITE_TYPE_NAME;
    private static final java.lang.String COMPOSITE_TYPE_DESCRIPTION;
    private static final java.lang.String[] ITEM_NAMES;
    private static final java.lang.String[] ITEM_DESCRIPTIONS;
    private static final javax.management.openmbean.OpenType[] ITEM_TYPES;
    private static final javax.management.openmbean.CompositeType COMPOSITE_TYPE;
    private static final java.lang.String TABULAR_TYPE_NAME;
    private static final java.lang.String TABULAR_TYPE_DESCRIPTION;
    private static final javax.management.openmbean.TabularType TABULAR_TYPE;

    public void <init>()
    {
        org.quartz.core.jmx.CronTriggerSupport r0;

        r0 := @this: org.quartz.core.jmx.CronTriggerSupport;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String[] getItemNames()
    {
        java.util.ArrayList $r1;
        java.lang.String[] $r2, $r4, $r6, $r8;
        java.util.List $r3, $r5;
        int $i0;
        java.lang.Object[] $r7;

        $r1 = new java.util.ArrayList;

        $r2 = <org.quartz.core.jmx.CronTriggerSupport: java.lang.String[] ITEM_NAMES>;

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        $r4 = staticinvoke <org.quartz.core.jmx.TriggerSupport: java.lang.String[] getItemNames()>();

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        interfaceinvoke $r1.<java.util.List: boolean addAll(java.util.Collection)>($r5);

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r6 = newarray (java.lang.String)[$i0];

        $r7 = interfaceinvoke $r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r8 = (java.lang.String[]) $r7;

        return $r8;
    }

    public static java.lang.String[] getItemDescriptions()
    {
        java.util.ArrayList $r1;
        java.lang.String[] $r2, $r4, $r6, $r8;
        java.util.List $r3, $r5;
        int $i0;
        java.lang.Object[] $r7;

        $r1 = new java.util.ArrayList;

        $r2 = <org.quartz.core.jmx.CronTriggerSupport: java.lang.String[] ITEM_DESCRIPTIONS>;

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        $r4 = staticinvoke <org.quartz.core.jmx.TriggerSupport: java.lang.String[] getItemDescriptions()>();

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        interfaceinvoke $r1.<java.util.List: boolean addAll(java.util.Collection)>($r5);

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r6 = newarray (java.lang.String)[$i0];

        $r7 = interfaceinvoke $r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r8 = (java.lang.String[]) $r7;

        return $r8;
    }

    public static javax.management.openmbean.OpenType[] getItemTypes()
    {
        java.util.ArrayList $r1;
        javax.management.openmbean.OpenType[] $r2, $r4, $r6, $r8;
        java.util.List $r3, $r5;
        int $i0;
        java.lang.Object[] $r7;

        $r1 = new java.util.ArrayList;

        $r2 = <org.quartz.core.jmx.CronTriggerSupport: javax.management.openmbean.OpenType[] ITEM_TYPES>;

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        $r4 = staticinvoke <org.quartz.core.jmx.TriggerSupport: javax.management.openmbean.OpenType[] getItemTypes()>();

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        interfaceinvoke $r1.<java.util.List: boolean addAll(java.util.Collection)>($r5);

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r6 = newarray (javax.management.openmbean.OpenType)[$i0];

        $r7 = interfaceinvoke $r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r8 = (javax.management.openmbean.OpenType[]) $r7;

        return $r8;
    }

    public static javax.management.openmbean.CompositeData toCompositeData(org.quartz.CronTrigger)
    {
        org.quartz.CronTrigger r0;
        javax.management.openmbean.CompositeDataSupport $r2;
        java.lang.Object[] $r3;
        javax.management.openmbean.CompositeType $r4;
        java.lang.String[] $r5;
        java.lang.String $r6, $r9, $r11, $r13, $r15, $r16, $r19, $r21;
        java.util.TimeZone $r7;
        org.quartz.TriggerKey $r8, $r10;
        org.quartz.JobKey $r12, $r14;
        org.quartz.JobDataMap $r17;
        javax.management.openmbean.TabularData $r18;
        org.quartz.spi.OperableTrigger $r20;
        int $i0, $i1;
        java.lang.Integer $r22, $r23;
        java.util.Date $r24, $r25, $r26, $r27, $r28;
        javax.management.openmbean.OpenDataException $r29;
        java.lang.RuntimeException $r30;

        r0 := @parameter0: org.quartz.CronTrigger;

     label1:
        $r2 = new javax.management.openmbean.CompositeDataSupport;

        $r4 = <org.quartz.core.jmx.CronTriggerSupport: javax.management.openmbean.CompositeType COMPOSITE_TYPE>;

        $r5 = <org.quartz.core.jmx.CronTriggerSupport: java.lang.String[] ITEM_NAMES>;

        $r3 = newarray (java.lang.Object)[17];

        $r6 = interfaceinvoke r0.<org.quartz.CronTrigger: java.lang.String getCronExpression()>();

        $r3[0] = $r6;

        $r7 = interfaceinvoke r0.<org.quartz.CronTrigger: java.util.TimeZone getTimeZone()>();

        $r3[1] = $r7;

        $r8 = interfaceinvoke r0.<org.quartz.CronTrigger: org.quartz.TriggerKey getKey()>();

        $r9 = virtualinvoke $r8.<org.quartz.TriggerKey: java.lang.String getName()>();

        $r3[2] = $r9;

        $r10 = interfaceinvoke r0.<org.quartz.CronTrigger: org.quartz.TriggerKey getKey()>();

        $r11 = virtualinvoke $r10.<org.quartz.TriggerKey: java.lang.String getGroup()>();

        $r3[3] = $r11;

        $r12 = interfaceinvoke r0.<org.quartz.CronTrigger: org.quartz.JobKey getJobKey()>();

        $r13 = virtualinvoke $r12.<org.quartz.JobKey: java.lang.String getName()>();

        $r3[4] = $r13;

        $r14 = interfaceinvoke r0.<org.quartz.CronTrigger: org.quartz.JobKey getJobKey()>();

        $r15 = virtualinvoke $r14.<org.quartz.JobKey: java.lang.String getGroup()>();

        $r3[5] = $r15;

        $r16 = interfaceinvoke r0.<org.quartz.CronTrigger: java.lang.String getDescription()>();

        $r3[6] = $r16;

        $r17 = interfaceinvoke r0.<org.quartz.CronTrigger: org.quartz.JobDataMap getJobDataMap()>();

        $r18 = staticinvoke <org.quartz.core.jmx.JobDataMapSupport: javax.management.openmbean.TabularData toTabularData(org.quartz.JobDataMap)>($r17);

        $r3[7] = $r18;

        $r19 = interfaceinvoke r0.<org.quartz.CronTrigger: java.lang.String getCalendarName()>();

        $r3[8] = $r19;

        $r20 = (org.quartz.spi.OperableTrigger) r0;

        $r21 = interfaceinvoke $r20.<org.quartz.spi.OperableTrigger: java.lang.String getFireInstanceId()>();

        $r3[9] = $r21;

        $i0 = interfaceinvoke r0.<org.quartz.CronTrigger: int getMisfireInstruction()>();

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3[10] = $r22;

        $i1 = interfaceinvoke r0.<org.quartz.CronTrigger: int getPriority()>();

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r3[11] = $r23;

        $r24 = interfaceinvoke r0.<org.quartz.CronTrigger: java.util.Date getStartTime()>();

        $r3[12] = $r24;

        $r25 = interfaceinvoke r0.<org.quartz.CronTrigger: java.util.Date getEndTime()>();

        $r3[13] = $r25;

        $r26 = interfaceinvoke r0.<org.quartz.CronTrigger: java.util.Date getNextFireTime()>();

        $r3[14] = $r26;

        $r27 = interfaceinvoke r0.<org.quartz.CronTrigger: java.util.Date getPreviousFireTime()>();

        $r3[15] = $r27;

        $r28 = interfaceinvoke r0.<org.quartz.CronTrigger: java.util.Date getFinalFireTime()>();

        $r3[16] = $r28;

        specialinvoke $r2.<javax.management.openmbean.CompositeDataSupport: void <init>(javax.management.openmbean.CompositeType,java.lang.String[],java.lang.Object[])>($r4, $r5, $r3);

     label2:
        return $r2;

     label3:
        $r29 := @caughtexception;

        $r30 = new java.lang.RuntimeException;

        specialinvoke $r30.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r29);

        throw $r30;

        catch javax.management.openmbean.OpenDataException from label1 to label2 with label3;
    }

    public static javax.management.openmbean.TabularData toTabularData(java.util.List)
    {
        java.util.List r0;
        java.util.Iterator r3;
        org.quartz.CronTrigger r4;
        javax.management.openmbean.TabularDataSupport $r5;
        javax.management.openmbean.TabularType $r6;
        java.util.ArrayList $r7;
        boolean $z0;
        int $i0;
        javax.management.openmbean.CompositeData[] $r8, $r10;
        java.lang.Object[] $r9;
        java.lang.Object $r11;
        javax.management.openmbean.CompositeData $r12;

        r0 := @parameter0: java.util.List;

        $r5 = new javax.management.openmbean.TabularDataSupport;

        $r6 = <org.quartz.core.jmx.CronTriggerSupport: javax.management.openmbean.TabularType TABULAR_TYPE>;

        specialinvoke $r5.<javax.management.openmbean.TabularDataSupport: void <init>(javax.management.openmbean.TabularType)>($r6);

        if r0 == null goto label3;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r3 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r11 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.quartz.CronTrigger) $r11;

        $r12 = staticinvoke <org.quartz.core.jmx.CronTriggerSupport: javax.management.openmbean.CompositeData toCompositeData(org.quartz.CronTrigger)>(r4);

        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>($r12);

        goto label1;

     label2:
        $i0 = virtualinvoke $r7.<java.util.ArrayList: int size()>();

        $r8 = newarray (javax.management.openmbean.CompositeData)[$i0];

        $r9 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r8);

        $r10 = (javax.management.openmbean.CompositeData[]) $r9;

        interfaceinvoke $r5.<javax.management.openmbean.TabularData: void putAll(javax.management.openmbean.CompositeData[])>($r10);

     label3:
        return $r5;
    }

    public static org.quartz.spi.OperableTrigger newTrigger(javax.management.openmbean.CompositeData) throws java.text.ParseException
    {
        javax.management.openmbean.CompositeData r0;
        org.quartz.impl.triggers.CronTriggerImpl $r2;
        java.lang.Object $r3, $r5;
        java.lang.String $r4, $r6;
        boolean $z0;
        java.util.TimeZone $r7;

        r0 := @parameter0: javax.management.openmbean.CompositeData;

        $r2 = new org.quartz.impl.triggers.CronTriggerImpl;

        specialinvoke $r2.<org.quartz.impl.triggers.CronTriggerImpl: void <init>()>();

        $r3 = interfaceinvoke r0.<javax.management.openmbean.CompositeData: java.lang.Object get(java.lang.String)>("cronExpression");

        $r4 = (java.lang.String) $r3;

        virtualinvoke $r2.<org.quartz.impl.triggers.CronTriggerImpl: void setCronExpression(java.lang.String)>($r4);

        $z0 = interfaceinvoke r0.<javax.management.openmbean.CompositeData: boolean containsKey(java.lang.String)>("timeZone");

        if $z0 == 0 goto label1;

        $r5 = interfaceinvoke r0.<javax.management.openmbean.CompositeData: java.lang.Object get(java.lang.String)>("timeZone");

        $r6 = (java.lang.String) $r5;

        $r7 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>($r6);

        virtualinvoke $r2.<org.quartz.impl.triggers.CronTriggerImpl: void setTimeZone(java.util.TimeZone)>($r7);

     label1:
        staticinvoke <org.quartz.core.jmx.TriggerSupport: void initializeTrigger(org.quartz.spi.MutableTrigger,javax.management.openmbean.CompositeData)>($r2, r0);

        return $r2;
    }

    public static org.quartz.spi.OperableTrigger newTrigger(java.util.Map) throws java.text.ParseException
    {
        java.util.Map r0;
        org.quartz.impl.triggers.CronTriggerImpl $r2;
        java.lang.Object $r3, $r5;
        java.lang.String $r4, $r6;
        boolean $z0;
        java.util.TimeZone $r7;

        r0 := @parameter0: java.util.Map;

        $r2 = new org.quartz.impl.triggers.CronTriggerImpl;

        specialinvoke $r2.<org.quartz.impl.triggers.CronTriggerImpl: void <init>()>();

        $r3 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("cronExpression");

        $r4 = (java.lang.String) $r3;

        virtualinvoke $r2.<org.quartz.impl.triggers.CronTriggerImpl: void setCronExpression(java.lang.String)>($r4);

        $z0 = interfaceinvoke r0.<java.util.Map: boolean containsKey(java.lang.Object)>("timeZone");

        if $z0 == 0 goto label1;

        $r5 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("timeZone");

        $r6 = (java.lang.String) $r5;

        $r7 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>($r6);

        virtualinvoke $r2.<org.quartz.impl.triggers.CronTriggerImpl: void setTimeZone(java.util.TimeZone)>($r7);

     label1:
        staticinvoke <org.quartz.core.jmx.TriggerSupport: void initializeTrigger(org.quartz.spi.MutableTrigger,java.util.Map)>($r2, r0);

        return $r2;
    }

    static void <clinit>()
    {
        java.lang.String[] $r1, $r2, $r7, $r8, $r12;
        javax.management.openmbean.OpenType[] $r3, $r9;
        javax.management.openmbean.SimpleType $r4, $r5;
        javax.management.openmbean.CompositeType $r6, $r11;
        javax.management.openmbean.TabularType $r10;
        javax.management.openmbean.OpenDataException $r13;
        java.lang.RuntimeException $r14;

        <org.quartz.core.jmx.CronTriggerSupport: java.lang.String TABULAR_TYPE_DESCRIPTION> = "CronTrigger collection";

        <org.quartz.core.jmx.CronTriggerSupport: java.lang.String TABULAR_TYPE_NAME> = "CronTrigger collection";

        <org.quartz.core.jmx.CronTriggerSupport: java.lang.String COMPOSITE_TYPE_DESCRIPTION> = "CronTrigger Details";

        <org.quartz.core.jmx.CronTriggerSupport: java.lang.String COMPOSITE_TYPE_NAME> = "CronTrigger";

        $r1 = newarray (java.lang.String)[2];

        $r1[0] = "expression";

        $r1[1] = "timeZone";

        <org.quartz.core.jmx.CronTriggerSupport: java.lang.String[] ITEM_NAMES> = $r1;

        $r2 = newarray (java.lang.String)[2];

        $r2[0] = "expression";

        $r2[1] = "timeZone";

        <org.quartz.core.jmx.CronTriggerSupport: java.lang.String[] ITEM_DESCRIPTIONS> = $r2;

        $r3 = newarray (javax.management.openmbean.OpenType)[2];

        $r4 = <javax.management.openmbean.SimpleType: javax.management.openmbean.SimpleType STRING>;

        $r3[0] = $r4;

        $r5 = <javax.management.openmbean.SimpleType: javax.management.openmbean.SimpleType STRING>;

        $r3[1] = $r5;

        <org.quartz.core.jmx.CronTriggerSupport: javax.management.openmbean.OpenType[] ITEM_TYPES> = $r3;

     label1:
        $r6 = new javax.management.openmbean.CompositeType;

        $r7 = staticinvoke <org.quartz.core.jmx.CronTriggerSupport: java.lang.String[] getItemNames()>();

        $r8 = staticinvoke <org.quartz.core.jmx.CronTriggerSupport: java.lang.String[] getItemDescriptions()>();

        $r9 = staticinvoke <org.quartz.core.jmx.CronTriggerSupport: javax.management.openmbean.OpenType[] getItemTypes()>();

        specialinvoke $r6.<javax.management.openmbean.CompositeType: void <init>(java.lang.String,java.lang.String,java.lang.String[],java.lang.String[],javax.management.openmbean.OpenType[])>("CronTrigger", "CronTrigger Details", $r7, $r8, $r9);

        <org.quartz.core.jmx.CronTriggerSupport: javax.management.openmbean.CompositeType COMPOSITE_TYPE> = $r6;

        $r10 = new javax.management.openmbean.TabularType;

        $r11 = <org.quartz.core.jmx.CronTriggerSupport: javax.management.openmbean.CompositeType COMPOSITE_TYPE>;

        $r12 = staticinvoke <org.quartz.core.jmx.CronTriggerSupport: java.lang.String[] getItemNames()>();

        specialinvoke $r10.<javax.management.openmbean.TabularType: void <init>(java.lang.String,java.lang.String,javax.management.openmbean.CompositeType,java.lang.String[])>("CronTrigger collection", "CronTrigger collection", $r11, $r12);

        <org.quartz.core.jmx.CronTriggerSupport: javax.management.openmbean.TabularType TABULAR_TYPE> = $r10;

     label2:
        goto label4;

     label3:
        $r13 := @caughtexception;

        $r14 = new java.lang.RuntimeException;

        specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r13);

        throw $r14;

     label4:
        return;

        catch javax.management.openmbean.OpenDataException from label1 to label2 with label3;
    }
}
