public class org.quartz.integrations.tests.StdRowLockSemaphoreTest$MyLock extends org.quartz.impl.jdbcjobstore.StdRowLockSemaphore
{

    public void <init>()
    {
        org.quartz.integrations.tests.StdRowLockSemaphoreTest$MyLock r0;

        r0 := @this: org.quartz.integrations.tests.StdRowLockSemaphoreTest$MyLock;

        specialinvoke r0.<org.quartz.impl.jdbcjobstore.StdRowLockSemaphore: void <init>()>();

        return;
    }

    protected void executeSQL(java.sql.Connection, java.lang.String, java.lang.String, java.lang.String) throws org.quartz.impl.jdbcjobstore.LockException
    {
        org.quartz.integrations.tests.StdRowLockSemaphoreTest$MyLock r0;
        java.sql.Connection r1;
        java.lang.String r2, r3, r4;
        int $i0;
        long $l1;
        java.util.concurrent.CountDownLatch $r5;

        r0 := @this: org.quartz.integrations.tests.StdRowLockSemaphoreTest$MyLock;

        r1 := @parameter0: java.sql.Connection;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        <org.quartz.integrations.tests.StdRowLockSemaphoreTest: boolean myLockInvoked> = 1;

        $i0 = virtualinvoke r0.<org.quartz.integrations.tests.StdRowLockSemaphoreTest$MyLock: int getMaxRetry()>();

        <org.quartz.integrations.tests.StdRowLockSemaphoreTest: int maxRetry> = $i0;

        $l1 = virtualinvoke r0.<org.quartz.integrations.tests.StdRowLockSemaphoreTest$MyLock: long getRetryPeriod()>();

        <org.quartz.integrations.tests.StdRowLockSemaphoreTest: long retryPeriod> = $l1;

        specialinvoke r0.<org.quartz.impl.jdbcjobstore.StdRowLockSemaphore: void executeSQL(java.sql.Connection,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3, r4);

        $r5 = <org.quartz.integrations.tests.StdRowLockSemaphoreTest: java.util.concurrent.CountDownLatch latch>;

        virtualinvoke $r5.<java.util.concurrent.CountDownLatch: void countDown()>();

        return;
    }
}
