public abstract class org.quartz.impl.RemoteMBeanScheduler extends java.lang.Object implements org.quartz.Scheduler
{
    private javax.management.ObjectName schedulerObjectName;

    public void <init>()
    {
        org.quartz.impl.RemoteMBeanScheduler r0;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected javax.management.ObjectName getSchedulerObjectName()
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        javax.management.ObjectName $r1;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        $r1 = r0.<org.quartz.impl.RemoteMBeanScheduler: javax.management.ObjectName schedulerObjectName>;

        return $r1;
    }

    public void setSchedulerObjectName(java.lang.String) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        java.lang.String r1, $r9;
        javax.management.ObjectName $r3;
        javax.management.MalformedObjectNameException $r4;
        org.quartz.SchedulerException $r5;
        java.lang.StringBuilder $r6, $r7, $r8;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        r1 := @parameter0: java.lang.String;

     label1:
        $r3 = new javax.management.ObjectName;

        specialinvoke $r3.<javax.management.ObjectName: void <init>(java.lang.String)>(r1);

        r0.<org.quartz.impl.RemoteMBeanScheduler: javax.management.ObjectName schedulerObjectName> = $r3;

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new org.quartz.SchedulerException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to parse Scheduler MBean name: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<org.quartz.SchedulerException: void <init>(java.lang.String,java.lang.Throwable)>($r9, $r4);

        throw $r5;

     label4:
        return;

        catch javax.management.MalformedObjectNameException from label1 to label2 with label3;
    }

    public void setSchedulerObjectName(javax.management.ObjectName) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        javax.management.ObjectName r1;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        r1 := @parameter0: javax.management.ObjectName;

        r0.<org.quartz.impl.RemoteMBeanScheduler: javax.management.ObjectName schedulerObjectName> = r1;

        return;
    }

    public abstract void initialize() throws org.quartz.SchedulerException;

    protected abstract java.lang.Object getAttribute(java.lang.String) throws org.quartz.SchedulerException;

    protected abstract javax.management.AttributeList getAttributes(java.lang.String[]) throws org.quartz.SchedulerException;

    protected abstract java.lang.Object invoke(java.lang.String, java.lang.Object[], java.lang.String[]) throws org.quartz.SchedulerException;

    public java.lang.String getSchedulerName() throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        java.lang.Object $r1;
        java.lang.String $r2;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        $r1 = virtualinvoke r0.<org.quartz.impl.RemoteMBeanScheduler: java.lang.Object getAttribute(java.lang.String)>("SchedulerName");

        $r2 = (java.lang.String) $r1;

        return $r2;
    }

    public java.lang.String getSchedulerInstanceId() throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        java.lang.Object $r1;
        java.lang.String $r2;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        $r1 = virtualinvoke r0.<org.quartz.impl.RemoteMBeanScheduler: java.lang.Object getAttribute(java.lang.String)>("SchedulerInstanceId");

        $r2 = (java.lang.String) $r1;

        return $r2;
    }

    public org.quartz.SchedulerMetaData getMetaData() throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        javax.management.AttributeList r1;
        java.lang.String[] $r3;
        org.quartz.SchedulerMetaData $r4;
        javax.management.Attribute $r5, $r8, $r12, $r15, $r18, $r23, $r27, $r31, $r34;
        java.lang.Object $r6, $r9, $r13, $r16, $r19, $r21, $r24, $r28, $r32, $r35;
        java.lang.String $r7, $r10, $r22, $r25, $r29, $r36;
        java.lang.Class $r11, $r26, $r30;
        java.lang.Boolean $r14, $r17;
        boolean $z0, $z1;
        java.util.Map $r20;
        int $i0, $i1;
        java.lang.Integer $r33;
        java.lang.ClassNotFoundException $r37;
        org.quartz.SchedulerException $r38;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        $r3 = newarray (java.lang.String)[9];

        $r3[0] = "SchedulerName";

        $r3[1] = "SchedulerInstanceId";

        $r3[2] = "StandbyMode";

        $r3[3] = "Shutdown";

        $r3[4] = "JobStoreClassName";

        $r3[5] = "ThreadPoolClassName";

        $r3[6] = "ThreadPoolSize";

        $r3[7] = "Version";

        $r3[8] = "PerformanceMetrics";

        r1 = virtualinvoke r0.<org.quartz.impl.RemoteMBeanScheduler: javax.management.AttributeList getAttributes(java.lang.String[])>($r3);

     label1:
        $r4 = new org.quartz.SchedulerMetaData;

        $r5 = specialinvoke r0.<org.quartz.impl.RemoteMBeanScheduler: javax.management.Attribute getAttribute(javax.management.AttributeList,int)>(r1, 0);

        $r6 = virtualinvoke $r5.<javax.management.Attribute: java.lang.Object getValue()>();

        $r7 = (java.lang.String) $r6;

        $r8 = specialinvoke r0.<org.quartz.impl.RemoteMBeanScheduler: javax.management.Attribute getAttribute(javax.management.AttributeList,int)>(r1, 1);

        $r9 = virtualinvoke $r8.<javax.management.Attribute: java.lang.Object getValue()>();

        $r10 = (java.lang.String) $r9;

        $r11 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = specialinvoke r0.<org.quartz.impl.RemoteMBeanScheduler: javax.management.Attribute getAttribute(javax.management.AttributeList,int)>(r1, 2);

        $r13 = virtualinvoke $r12.<javax.management.Attribute: java.lang.Object getValue()>();

        $r14 = (java.lang.Boolean) $r13;

        $z0 = virtualinvoke $r14.<java.lang.Boolean: boolean booleanValue()>();

        $r15 = specialinvoke r0.<org.quartz.impl.RemoteMBeanScheduler: javax.management.Attribute getAttribute(javax.management.AttributeList,int)>(r1, 3);

        $r16 = virtualinvoke $r15.<javax.management.Attribute: java.lang.Object getValue()>();

        $r17 = (java.lang.Boolean) $r16;

        $z1 = virtualinvoke $r17.<java.lang.Boolean: boolean booleanValue()>();

        $r18 = specialinvoke r0.<org.quartz.impl.RemoteMBeanScheduler: javax.management.Attribute getAttribute(javax.management.AttributeList,int)>(r1, 8);

        $r19 = virtualinvoke $r18.<javax.management.Attribute: java.lang.Object getValue()>();

        $r20 = (java.util.Map) $r19;

        $r21 = interfaceinvoke $r20.<java.util.Map: java.lang.Object get(java.lang.Object)>("JobsExecuted");

        $r22 = virtualinvoke $r21.<java.lang.Object: java.lang.String toString()>();

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r22);

        $r23 = specialinvoke r0.<org.quartz.impl.RemoteMBeanScheduler: javax.management.Attribute getAttribute(javax.management.AttributeList,int)>(r1, 4);

        $r24 = virtualinvoke $r23.<javax.management.Attribute: java.lang.Object getValue()>();

        $r25 = (java.lang.String) $r24;

        $r26 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r25);

        $r27 = specialinvoke r0.<org.quartz.impl.RemoteMBeanScheduler: javax.management.Attribute getAttribute(javax.management.AttributeList,int)>(r1, 5);

        $r28 = virtualinvoke $r27.<javax.management.Attribute: java.lang.Object getValue()>();

        $r29 = (java.lang.String) $r28;

        $r30 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r29);

        $r31 = specialinvoke r0.<org.quartz.impl.RemoteMBeanScheduler: javax.management.Attribute getAttribute(javax.management.AttributeList,int)>(r1, 6);

        $r32 = virtualinvoke $r31.<javax.management.Attribute: java.lang.Object getValue()>();

        $r33 = (java.lang.Integer) $r32;

        $i1 = virtualinvoke $r33.<java.lang.Integer: int intValue()>();

        $r34 = specialinvoke r0.<org.quartz.impl.RemoteMBeanScheduler: javax.management.Attribute getAttribute(javax.management.AttributeList,int)>(r1, 7);

        $r35 = virtualinvoke $r34.<javax.management.Attribute: java.lang.Object getValue()>();

        $r36 = (java.lang.String) $r35;

        specialinvoke $r4.<org.quartz.SchedulerMetaData: void <init>(java.lang.String,java.lang.String,java.lang.Class,boolean,boolean,boolean,boolean,java.util.Date,int,java.lang.Class,boolean,boolean,java.lang.Class,int,java.lang.String)>($r7, $r10, $r11, 1, 0, $z0, $z1, null, $i0, $r26, 0, 0, $r30, $i1, $r36);

     label2:
        return $r4;

     label3:
        $r37 := @caughtexception;

        $r38 = new org.quartz.SchedulerException;

        specialinvoke $r38.<org.quartz.SchedulerException: void <init>(java.lang.Throwable)>($r37);

        throw $r38;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    private javax.management.Attribute getAttribute(javax.management.AttributeList, int)
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        javax.management.AttributeList r1;
        int i0;
        java.lang.Object $r2;
        javax.management.Attribute $r3;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        r1 := @parameter0: javax.management.AttributeList;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r1.<javax.management.AttributeList: java.lang.Object get(int)>(i0);

        $r3 = (javax.management.Attribute) $r2;

        return $r3;
    }

    public org.quartz.SchedulerContext getContext() throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        org.quartz.SchedulerException $r1;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        $r1 = new org.quartz.SchedulerException;

        specialinvoke $r1.<org.quartz.SchedulerException: void <init>(java.lang.String)>("Operation not supported for remote schedulers.");

        throw $r1;
    }

    public void start() throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        java.lang.String[] $r1;
        java.lang.Object[] $r2;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        $r2 = newarray (java.lang.Object)[0];

        $r1 = newarray (java.lang.String)[0];

        virtualinvoke r0.<org.quartz.impl.RemoteMBeanScheduler: java.lang.Object invoke(java.lang.String,java.lang.Object[],java.lang.String[])>("start", $r2, $r1);

        return;
    }

    public void startDelayed(int) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        int i0;
        java.lang.Object[] $r1;
        java.lang.Integer $r2;
        java.lang.String[] $r3;
        java.lang.Class $r4;
        java.lang.String $r5;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        i0 := @parameter0: int;

        $r1 = newarray (java.lang.Object)[1];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[0] = $r2;

        $r3 = newarray (java.lang.String)[1];

        $r4 = <java.lang.Integer: java.lang.Class TYPE>;

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r3[0] = $r5;

        virtualinvoke r0.<org.quartz.impl.RemoteMBeanScheduler: java.lang.Object invoke(java.lang.String,java.lang.Object[],java.lang.String[])>("startDelayed", $r1, $r3);

        return;
    }

    public void standby() throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        java.lang.String[] $r1;
        java.lang.Object[] $r2;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        $r2 = newarray (java.lang.Object)[0];

        $r1 = newarray (java.lang.String)[0];

        virtualinvoke r0.<org.quartz.impl.RemoteMBeanScheduler: java.lang.Object invoke(java.lang.String,java.lang.Object[],java.lang.String[])>("standby", $r2, $r1);

        return;
    }

    public boolean isStarted() throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        java.lang.Object $r1;
        java.lang.Boolean $r2;
        boolean $z0;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        $r1 = virtualinvoke r0.<org.quartz.impl.RemoteMBeanScheduler: java.lang.Object getAttribute(java.lang.String)>("Started");

        $r2 = (java.lang.Boolean) $r1;

        $z0 = virtualinvoke $r2.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    public boolean isInStandbyMode() throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        java.lang.Object $r1;
        java.lang.Boolean $r2;
        boolean $z0;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        $r1 = virtualinvoke r0.<org.quartz.impl.RemoteMBeanScheduler: java.lang.Object getAttribute(java.lang.String)>("StandbyMode");

        $r2 = (java.lang.Boolean) $r1;

        $z0 = virtualinvoke $r2.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    public void shutdown() throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        java.lang.String r1;
        java.lang.String[] $r2;
        java.lang.Object[] $r3;
        org.quartz.impl.SchedulerRepository $r5;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        r1 = virtualinvoke r0.<org.quartz.impl.RemoteMBeanScheduler: java.lang.String getSchedulerName()>();

        $r3 = newarray (java.lang.Object)[0];

        $r2 = newarray (java.lang.String)[0];

        virtualinvoke r0.<org.quartz.impl.RemoteMBeanScheduler: java.lang.Object invoke(java.lang.String,java.lang.Object[],java.lang.String[])>("shutdown", $r3, $r2);

        $r5 = staticinvoke <org.quartz.impl.SchedulerRepository: org.quartz.impl.SchedulerRepository getInstance()>();

        virtualinvoke $r5.<org.quartz.impl.SchedulerRepository: boolean remove(java.lang.String)>(r1);

        return;
    }

    public void shutdown(boolean) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        boolean z0;
        org.quartz.SchedulerException $r1;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        z0 := @parameter0: boolean;

        $r1 = new org.quartz.SchedulerException;

        specialinvoke $r1.<org.quartz.SchedulerException: void <init>(java.lang.String)>("Operation not supported for remote schedulers.");

        throw $r1;
    }

    public boolean isShutdown() throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        org.quartz.SchedulerException $r1;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        $r1 = new org.quartz.SchedulerException;

        specialinvoke $r1.<org.quartz.SchedulerException: void <init>(java.lang.String)>("Operation not supported for remote schedulers.");

        throw $r1;
    }

    public java.util.List getCurrentlyExecutingJobs() throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        org.quartz.SchedulerException $r1;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        $r1 = new org.quartz.SchedulerException;

        specialinvoke $r1.<org.quartz.SchedulerException: void <init>(java.lang.String)>("Operation not supported for remote schedulers.");

        throw $r1;
    }

    public java.util.Date scheduleJob(org.quartz.JobDetail, org.quartz.Trigger) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        org.quartz.JobDetail r1;
        org.quartz.Trigger r2;
        org.quartz.SchedulerException $r3;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        r1 := @parameter0: org.quartz.JobDetail;

        r2 := @parameter1: org.quartz.Trigger;

        $r3 = new org.quartz.SchedulerException;

        specialinvoke $r3.<org.quartz.SchedulerException: void <init>(java.lang.String)>("Operation not supported for remote schedulers.");

        throw $r3;
    }

    public java.util.Date scheduleJob(org.quartz.Trigger) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        org.quartz.Trigger r1;
        org.quartz.SchedulerException $r2;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        r1 := @parameter0: org.quartz.Trigger;

        $r2 = new org.quartz.SchedulerException;

        specialinvoke $r2.<org.quartz.SchedulerException: void <init>(java.lang.String)>("Operation not supported for remote schedulers.");

        throw $r2;
    }

    public void addJob(org.quartz.JobDetail, boolean) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        org.quartz.JobDetail r1;
        boolean z0;
        java.lang.Object[] $r2;
        javax.management.openmbean.CompositeData $r3;
        java.lang.Boolean $r4;
        java.lang.String[] $r5;
        java.lang.Class $r6, $r8;
        java.lang.String $r7, $r9;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        r1 := @parameter0: org.quartz.JobDetail;

        z0 := @parameter1: boolean;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <org.quartz.core.jmx.JobDetailSupport: javax.management.openmbean.CompositeData toCompositeData(org.quartz.JobDetail)>(r1);

        $r2[0] = $r3;

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r2[1] = $r4;

        $r5 = newarray (java.lang.String)[2];

        $r6 = class "Ljavax/management/openmbean/CompositeData;";

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r5[0] = $r7;

        $r8 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $r5[1] = $r9;

        virtualinvoke r0.<org.quartz.impl.RemoteMBeanScheduler: java.lang.Object invoke(java.lang.String,java.lang.Object[],java.lang.String[])>("addJob", $r2, $r5);

        return;
    }

    public void addJob(org.quartz.JobDetail, boolean, boolean) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        org.quartz.JobDetail r1;
        boolean z0, z1;
        java.lang.Object[] $r2;
        javax.management.openmbean.CompositeData $r3;
        java.lang.Boolean $r4, $r5;
        java.lang.String[] $r6;
        java.lang.Class $r7, $r9, $r11;
        java.lang.String $r8, $r10, $r12;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        r1 := @parameter0: org.quartz.JobDetail;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $r2 = newarray (java.lang.Object)[3];

        $r3 = staticinvoke <org.quartz.core.jmx.JobDetailSupport: javax.management.openmbean.CompositeData toCompositeData(org.quartz.JobDetail)>(r1);

        $r2[0] = $r3;

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r2[1] = $r4;

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        $r2[2] = $r5;

        $r6 = newarray (java.lang.String)[3];

        $r7 = class "Ljavax/management/openmbean/CompositeData;";

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r6[0] = $r8;

        $r9 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.String getName()>();

        $r6[1] = $r10;

        $r11 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>();

        $r6[2] = $r12;

        virtualinvoke r0.<org.quartz.impl.RemoteMBeanScheduler: java.lang.Object invoke(java.lang.String,java.lang.Object[],java.lang.String[])>("addJob", $r2, $r6);

        return;
    }

    public boolean deleteJob(org.quartz.JobKey) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        org.quartz.JobKey r1;
        java.lang.Object[] $r2;
        java.lang.String $r3, $r4, $r7, $r9;
        java.lang.String[] $r5;
        java.lang.Class $r6, $r8;
        java.lang.Object $r10;
        java.lang.Boolean $r11;
        boolean $z0;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        r1 := @parameter0: org.quartz.JobKey;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = virtualinvoke r1.<org.quartz.JobKey: java.lang.String getName()>();

        $r2[0] = $r3;

        $r4 = virtualinvoke r1.<org.quartz.JobKey: java.lang.String getGroup()>();

        $r2[1] = $r4;

        $r5 = newarray (java.lang.String)[2];

        $r6 = class "Ljava/lang/String;";

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r5[0] = $r7;

        $r8 = class "Ljava/lang/String;";

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $r5[1] = $r9;

        $r10 = virtualinvoke r0.<org.quartz.impl.RemoteMBeanScheduler: java.lang.Object invoke(java.lang.String,java.lang.Object[],java.lang.String[])>("deleteJob", $r2, $r5);

        $r11 = (java.lang.Boolean) $r10;

        $z0 = virtualinvoke $r11.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    public boolean unscheduleJob(org.quartz.TriggerKey) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        org.quartz.TriggerKey r1;
        java.lang.Object[] $r2;
        java.lang.String $r3, $r4, $r7, $r9;
        java.lang.String[] $r5;
        java.lang.Class $r6, $r8;
        java.lang.Object $r10;
        java.lang.Boolean $r11;
        boolean $z0;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        r1 := @parameter0: org.quartz.TriggerKey;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = virtualinvoke r1.<org.quartz.TriggerKey: java.lang.String getName()>();

        $r2[0] = $r3;

        $r4 = virtualinvoke r1.<org.quartz.TriggerKey: java.lang.String getGroup()>();

        $r2[1] = $r4;

        $r5 = newarray (java.lang.String)[2];

        $r6 = class "Ljava/lang/String;";

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r5[0] = $r7;

        $r8 = class "Ljava/lang/String;";

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $r5[1] = $r9;

        $r10 = virtualinvoke r0.<org.quartz.impl.RemoteMBeanScheduler: java.lang.Object invoke(java.lang.String,java.lang.Object[],java.lang.String[])>("unscheduleJob", $r2, $r5);

        $r11 = (java.lang.Boolean) $r10;

        $z0 = virtualinvoke $r11.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    public boolean deleteJobs(java.util.List) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        java.util.List r1;
        org.quartz.SchedulerException $r2;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        r1 := @parameter0: java.util.List;

        $r2 = new org.quartz.SchedulerException;

        specialinvoke $r2.<org.quartz.SchedulerException: void <init>(java.lang.String)>("Operation not supported for remote schedulers.");

        throw $r2;
    }

    public void scheduleJobs(java.util.Map, boolean) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        java.util.Map r1;
        boolean z0;
        org.quartz.SchedulerException $r2;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        r1 := @parameter0: java.util.Map;

        z0 := @parameter1: boolean;

        $r2 = new org.quartz.SchedulerException;

        specialinvoke $r2.<org.quartz.SchedulerException: void <init>(java.lang.String)>("Operation not supported for remote schedulers.");

        throw $r2;
    }

    public void scheduleJob(org.quartz.JobDetail, java.util.Set, boolean) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        org.quartz.JobDetail r1;
        java.util.Set r2;
        boolean z0;
        org.quartz.SchedulerException $r3;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        r1 := @parameter0: org.quartz.JobDetail;

        r2 := @parameter1: java.util.Set;

        z0 := @parameter2: boolean;

        $r3 = new org.quartz.SchedulerException;

        specialinvoke $r3.<org.quartz.SchedulerException: void <init>(java.lang.String)>("Operation not supported for remote schedulers.");

        throw $r3;
    }

    public boolean unscheduleJobs(java.util.List) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        java.util.List r1;
        org.quartz.SchedulerException $r2;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        r1 := @parameter0: java.util.List;

        $r2 = new org.quartz.SchedulerException;

        specialinvoke $r2.<org.quartz.SchedulerException: void <init>(java.lang.String)>("Operation not supported for remote schedulers.");

        throw $r2;
    }

    public java.util.Date rescheduleJob(org.quartz.TriggerKey, org.quartz.Trigger) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        org.quartz.TriggerKey r1;
        org.quartz.Trigger r2;
        org.quartz.SchedulerException $r3;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        r1 := @parameter0: org.quartz.TriggerKey;

        r2 := @parameter1: org.quartz.Trigger;

        $r3 = new org.quartz.SchedulerException;

        specialinvoke $r3.<org.quartz.SchedulerException: void <init>(java.lang.String)>("Operation not supported for remote schedulers.");

        throw $r3;
    }

    public void triggerJob(org.quartz.JobKey) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        org.quartz.JobKey r1;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        r1 := @parameter0: org.quartz.JobKey;

        virtualinvoke r0.<org.quartz.impl.RemoteMBeanScheduler: void triggerJob(org.quartz.JobKey,org.quartz.JobDataMap)>(r1, null);

        return;
    }

    public void triggerJob(org.quartz.JobKey, org.quartz.JobDataMap) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        org.quartz.JobKey r1;
        org.quartz.JobDataMap r2;
        org.quartz.SchedulerException $r3;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        r1 := @parameter0: org.quartz.JobKey;

        r2 := @parameter1: org.quartz.JobDataMap;

        $r3 = new org.quartz.SchedulerException;

        specialinvoke $r3.<org.quartz.SchedulerException: void <init>(java.lang.String)>("Operation not supported for remote schedulers.");

        throw $r3;
    }

    public void pauseTrigger(org.quartz.TriggerKey) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        org.quartz.TriggerKey r1;
        java.lang.Object[] $r2;
        java.lang.String $r3, $r4, $r7, $r9;
        java.lang.String[] $r5;
        java.lang.Class $r6, $r8;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        r1 := @parameter0: org.quartz.TriggerKey;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = virtualinvoke r1.<org.quartz.TriggerKey: java.lang.String getName()>();

        $r2[0] = $r3;

        $r4 = virtualinvoke r1.<org.quartz.TriggerKey: java.lang.String getGroup()>();

        $r2[1] = $r4;

        $r5 = newarray (java.lang.String)[2];

        $r6 = class "Ljava/lang/String;";

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r5[0] = $r7;

        $r8 = class "Ljava/lang/String;";

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $r5[1] = $r9;

        virtualinvoke r0.<org.quartz.impl.RemoteMBeanScheduler: java.lang.Object invoke(java.lang.String,java.lang.Object[],java.lang.String[])>("pauseTrigger", $r2, $r5);

        return;
    }

    public void pauseTriggers(org.quartz.impl.matchers.GroupMatcher) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        org.quartz.impl.matchers.GroupMatcher r1;
        int[] $r2;
        org.quartz.impl.matchers.StringMatcher$StringOperatorName $r3, $r7;
        int $i0, $i1;
        org.quartz.SchedulerException $r4;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.lang.String $r9, $r11, $r14, r16;
        java.lang.Object[] $r10;
        java.lang.String[] $r12;
        java.lang.Class $r13;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        r1 := @parameter0: org.quartz.impl.matchers.GroupMatcher;

        r16 = null;

        $r2 = <org.quartz.impl.RemoteMBeanScheduler$1: int[] $SwitchMap$org$quartz$impl$matchers$StringMatcher$StringOperatorName>;

        $r3 = virtualinvoke r1.<org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.StringMatcher$StringOperatorName getCompareWithOperator()>();

        $i0 = virtualinvoke $r3.<org.quartz.impl.matchers.StringMatcher$StringOperatorName: int ordinal()>();

        $i1 = $r2[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            case 5: goto label4;
            default: goto label5;
        };

     label1:
        r16 = "pauseTriggerGroup";

        goto label5;

     label2:
        r16 = "pauseTriggersContaining";

        goto label5;

     label3:
        r16 = "pauseTriggersStartingWith";

        goto label5;

     label4:
        r16 = "pauseTriggersAll";

     label5:
        if r16 == null goto label6;

        $r10 = newarray (java.lang.Object)[1];

        $r11 = virtualinvoke r1.<org.quartz.impl.matchers.GroupMatcher: java.lang.String getCompareToValue()>();

        $r10[0] = $r11;

        $r12 = newarray (java.lang.String)[1];

        $r13 = class "Ljava/lang/String;";

        $r14 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        $r12[0] = $r14;

        virtualinvoke r0.<org.quartz.impl.RemoteMBeanScheduler: java.lang.Object invoke(java.lang.String,java.lang.Object[],java.lang.String[])>(r16, $r10, $r12);

        goto label7;

     label6:
        $r4 = new org.quartz.SchedulerException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported GroupMatcher kind for pausing triggers: ");

        $r7 = virtualinvoke r1.<org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.StringMatcher$StringOperatorName getCompareWithOperator()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.quartz.SchedulerException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label7:
        return;
    }

    public void pauseJob(org.quartz.JobKey) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        org.quartz.JobKey r1;
        java.lang.Object[] $r2;
        java.lang.String $r3, $r4, $r7, $r9;
        java.lang.String[] $r5;
        java.lang.Class $r6, $r8;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        r1 := @parameter0: org.quartz.JobKey;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = virtualinvoke r1.<org.quartz.JobKey: java.lang.String getName()>();

        $r2[0] = $r3;

        $r4 = virtualinvoke r1.<org.quartz.JobKey: java.lang.String getGroup()>();

        $r2[1] = $r4;

        $r5 = newarray (java.lang.String)[2];

        $r6 = class "Ljava/lang/String;";

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r5[0] = $r7;

        $r8 = class "Ljava/lang/String;";

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $r5[1] = $r9;

        virtualinvoke r0.<org.quartz.impl.RemoteMBeanScheduler: java.lang.Object invoke(java.lang.String,java.lang.Object[],java.lang.String[])>("pauseJob", $r2, $r5);

        return;
    }

    public void pauseJobs(org.quartz.impl.matchers.GroupMatcher) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        org.quartz.impl.matchers.GroupMatcher r1;
        int[] $r2;
        org.quartz.impl.matchers.StringMatcher$StringOperatorName $r3;
        int $i0, $i1;
        java.lang.String r5, $r8, $r11;
        java.lang.Object[] $r7;
        java.lang.String[] $r9;
        java.lang.Class $r10;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        r1 := @parameter0: org.quartz.impl.matchers.GroupMatcher;

        r5 = null;

        $r2 = <org.quartz.impl.RemoteMBeanScheduler$1: int[] $SwitchMap$org$quartz$impl$matchers$StringMatcher$StringOperatorName>;

        $r3 = virtualinvoke r1.<org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.StringMatcher$StringOperatorName getCompareWithOperator()>();

        $i0 = virtualinvoke $r3.<org.quartz.impl.matchers.StringMatcher$StringOperatorName: int ordinal()>();

        $i1 = $r2[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label4;
            case 3: goto label2;
            case 4: goto label3;
            case 5: goto label4;
            default: goto label5;
        };

     label1:
        r5 = "pauseJobGroup";

        goto label5;

     label2:
        r5 = "pauseJobsStartingWith";

        goto label5;

     label3:
        r5 = "pauseJobsEndingWith";

        goto label5;

     label4:
        r5 = "pauseJobsAll";

     label5:
        $r7 = newarray (java.lang.Object)[1];

        $r8 = virtualinvoke r1.<org.quartz.impl.matchers.GroupMatcher: java.lang.String getCompareToValue()>();

        $r7[0] = $r8;

        $r9 = newarray (java.lang.String)[1];

        $r10 = class "Ljava/lang/String;";

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

        $r9[0] = $r11;

        virtualinvoke r0.<org.quartz.impl.RemoteMBeanScheduler: java.lang.Object invoke(java.lang.String,java.lang.Object[],java.lang.String[])>(r5, $r7, $r9);

        return;
    }

    public void resumeTrigger(org.quartz.TriggerKey) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        org.quartz.TriggerKey r1;
        java.lang.Object[] $r2;
        java.lang.String $r3, $r4, $r7, $r9;
        java.lang.String[] $r5;
        java.lang.Class $r6, $r8;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        r1 := @parameter0: org.quartz.TriggerKey;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = virtualinvoke r1.<org.quartz.TriggerKey: java.lang.String getName()>();

        $r2[0] = $r3;

        $r4 = virtualinvoke r1.<org.quartz.TriggerKey: java.lang.String getGroup()>();

        $r2[1] = $r4;

        $r5 = newarray (java.lang.String)[2];

        $r6 = class "Ljava/lang/String;";

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r5[0] = $r7;

        $r8 = class "Ljava/lang/String;";

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $r5[1] = $r9;

        virtualinvoke r0.<org.quartz.impl.RemoteMBeanScheduler: java.lang.Object invoke(java.lang.String,java.lang.Object[],java.lang.String[])>("resumeTrigger", $r2, $r5);

        return;
    }

    public void resumeTriggers(org.quartz.impl.matchers.GroupMatcher) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        org.quartz.impl.matchers.GroupMatcher r1;
        int[] $r2;
        org.quartz.impl.matchers.StringMatcher$StringOperatorName $r3, $r7;
        int $i0, $i1;
        org.quartz.SchedulerException $r4;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.lang.String $r9, $r11, $r14, r16;
        java.lang.Object[] $r10;
        java.lang.String[] $r12;
        java.lang.Class $r13;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        r1 := @parameter0: org.quartz.impl.matchers.GroupMatcher;

        r16 = null;

        $r2 = <org.quartz.impl.RemoteMBeanScheduler$1: int[] $SwitchMap$org$quartz$impl$matchers$StringMatcher$StringOperatorName>;

        $r3 = virtualinvoke r1.<org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.StringMatcher$StringOperatorName getCompareWithOperator()>();

        $i0 = virtualinvoke $r3.<org.quartz.impl.matchers.StringMatcher$StringOperatorName: int ordinal()>();

        $i1 = $r2[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            case 5: goto label4;
            default: goto label5;
        };

     label1:
        r16 = "resumeTriggerGroup";

        goto label5;

     label2:
        r16 = "resumeTriggersContaining";

        goto label5;

     label3:
        r16 = "resumeTriggersStartingWith";

        goto label5;

     label4:
        r16 = "resumeTriggersAll";

     label5:
        if r16 == null goto label6;

        $r10 = newarray (java.lang.Object)[1];

        $r11 = virtualinvoke r1.<org.quartz.impl.matchers.GroupMatcher: java.lang.String getCompareToValue()>();

        $r10[0] = $r11;

        $r12 = newarray (java.lang.String)[1];

        $r13 = class "Ljava/lang/String;";

        $r14 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        $r12[0] = $r14;

        virtualinvoke r0.<org.quartz.impl.RemoteMBeanScheduler: java.lang.Object invoke(java.lang.String,java.lang.Object[],java.lang.String[])>(r16, $r10, $r12);

        goto label7;

     label6:
        $r4 = new org.quartz.SchedulerException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported GroupMatcher kind for resuming triggers: ");

        $r7 = virtualinvoke r1.<org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.StringMatcher$StringOperatorName getCompareWithOperator()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.quartz.SchedulerException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label7:
        return;
    }

    public void resumeJob(org.quartz.JobKey) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        org.quartz.JobKey r1;
        java.lang.Object[] $r2;
        java.lang.String $r3, $r4, $r7, $r9;
        java.lang.String[] $r5;
        java.lang.Class $r6, $r8;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        r1 := @parameter0: org.quartz.JobKey;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = virtualinvoke r1.<org.quartz.JobKey: java.lang.String getName()>();

        $r2[0] = $r3;

        $r4 = virtualinvoke r1.<org.quartz.JobKey: java.lang.String getGroup()>();

        $r2[1] = $r4;

        $r5 = newarray (java.lang.String)[2];

        $r6 = class "Ljava/lang/String;";

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r5[0] = $r7;

        $r8 = class "Ljava/lang/String;";

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $r5[1] = $r9;

        virtualinvoke r0.<org.quartz.impl.RemoteMBeanScheduler: java.lang.Object invoke(java.lang.String,java.lang.Object[],java.lang.String[])>("resumeJob", $r2, $r5);

        return;
    }

    public void resumeJobs(org.quartz.impl.matchers.GroupMatcher) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        org.quartz.impl.matchers.GroupMatcher r1;
        int[] $r2;
        org.quartz.impl.matchers.StringMatcher$StringOperatorName $r3;
        int $i0, $i1;
        java.lang.String r5, $r8, $r11;
        java.lang.Object[] $r7;
        java.lang.String[] $r9;
        java.lang.Class $r10;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        r1 := @parameter0: org.quartz.impl.matchers.GroupMatcher;

        r5 = null;

        $r2 = <org.quartz.impl.RemoteMBeanScheduler$1: int[] $SwitchMap$org$quartz$impl$matchers$StringMatcher$StringOperatorName>;

        $r3 = virtualinvoke r1.<org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.StringMatcher$StringOperatorName getCompareWithOperator()>();

        $i0 = virtualinvoke $r3.<org.quartz.impl.matchers.StringMatcher$StringOperatorName: int ordinal()>();

        $i1 = $r2[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label4;
            case 3: goto label2;
            case 4: goto label3;
            case 5: goto label4;
            default: goto label5;
        };

     label1:
        r5 = "resumeJobGroup";

        goto label5;

     label2:
        r5 = "resumeJobsStartingWith";

        goto label5;

     label3:
        r5 = "resumeJobsEndingWith";

        goto label5;

     label4:
        r5 = "resumeJobsAll";

     label5:
        $r7 = newarray (java.lang.Object)[1];

        $r8 = virtualinvoke r1.<org.quartz.impl.matchers.GroupMatcher: java.lang.String getCompareToValue()>();

        $r7[0] = $r8;

        $r9 = newarray (java.lang.String)[1];

        $r10 = class "Ljava/lang/String;";

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

        $r9[0] = $r11;

        virtualinvoke r0.<org.quartz.impl.RemoteMBeanScheduler: java.lang.Object invoke(java.lang.String,java.lang.Object[],java.lang.String[])>(r5, $r7, $r9);

        return;
    }

    public void pauseAll() throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        java.lang.String[] $r1;
        java.lang.Object[] $r2;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        $r2 = newarray (java.lang.Object)[0];

        $r1 = newarray (java.lang.String)[0];

        virtualinvoke r0.<org.quartz.impl.RemoteMBeanScheduler: java.lang.Object invoke(java.lang.String,java.lang.Object[],java.lang.String[])>("pauseAllTriggers", $r2, $r1);

        return;
    }

    public void resumeAll() throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        java.lang.String[] $r1;
        java.lang.Object[] $r2;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        $r2 = newarray (java.lang.Object)[0];

        $r1 = newarray (java.lang.String)[0];

        virtualinvoke r0.<org.quartz.impl.RemoteMBeanScheduler: java.lang.Object invoke(java.lang.String,java.lang.Object[],java.lang.String[])>("resumeAllTriggers", $r2, $r1);

        return;
    }

    public java.util.List getJobGroupNames() throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        java.lang.Object $r1;
        java.util.List $r2;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        $r1 = virtualinvoke r0.<org.quartz.impl.RemoteMBeanScheduler: java.lang.Object getAttribute(java.lang.String)>("JobGroupNames");

        $r2 = (java.util.List) $r1;

        return $r2;
    }

    public java.util.Set getJobKeys(org.quartz.impl.matchers.GroupMatcher) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        org.quartz.impl.matchers.GroupMatcher r1;
        java.util.List r2;
        org.quartz.impl.matchers.StringMatcher$StringOperatorName $r3, $r4;
        boolean $z0;
        org.quartz.SchedulerException $r5;
        java.lang.Object[] $r6;
        java.lang.String $r7, $r10;
        java.lang.String[] $r8;
        java.lang.Class $r9;
        java.lang.Object $r11;
        java.util.HashSet $r12;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        r1 := @parameter0: org.quartz.impl.matchers.GroupMatcher;

        $r3 = virtualinvoke r1.<org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.StringMatcher$StringOperatorName getCompareWithOperator()>();

        $r4 = <org.quartz.impl.matchers.StringMatcher$StringOperatorName: org.quartz.impl.matchers.StringMatcher$StringOperatorName EQUALS>;

        $z0 = virtualinvoke $r3.<org.quartz.impl.matchers.StringMatcher$StringOperatorName: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        $r6 = newarray (java.lang.Object)[1];

        $r7 = virtualinvoke r1.<org.quartz.impl.matchers.GroupMatcher: java.lang.String getCompareToValue()>();

        $r6[0] = $r7;

        $r8 = newarray (java.lang.String)[1];

        $r9 = class "Ljava/lang/String;";

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.String getName()>();

        $r8[0] = $r10;

        $r11 = virtualinvoke r0.<org.quartz.impl.RemoteMBeanScheduler: java.lang.Object invoke(java.lang.String,java.lang.Object[],java.lang.String[])>("getJobNames", $r6, $r8);

        r2 = (java.util.List) $r11;

        $r12 = new java.util.HashSet;

        specialinvoke $r12.<java.util.HashSet: void <init>(java.util.Collection)>(r2);

        return $r12;

     label1:
        $r5 = new org.quartz.SchedulerException;

        specialinvoke $r5.<org.quartz.SchedulerException: void <init>(java.lang.String)>("Only equals matcher are supported for looking up JobKeys");

        throw $r5;
    }

    public java.util.List getTriggersOfJob(org.quartz.JobKey) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        org.quartz.JobKey r1;
        org.quartz.SchedulerException $r2;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        r1 := @parameter0: org.quartz.JobKey;

        $r2 = new org.quartz.SchedulerException;

        specialinvoke $r2.<org.quartz.SchedulerException: void <init>(java.lang.String)>("Operation not supported for remote schedulers.");

        throw $r2;
    }

    public java.util.List getTriggerGroupNames() throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        java.lang.Object $r1;
        java.util.List $r2;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        $r1 = virtualinvoke r0.<org.quartz.impl.RemoteMBeanScheduler: java.lang.Object getAttribute(java.lang.String)>("TriggerGroupNames");

        $r2 = (java.util.List) $r1;

        return $r2;
    }

    public java.util.Set getTriggerKeys(org.quartz.impl.matchers.GroupMatcher) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        org.quartz.impl.matchers.GroupMatcher r1;
        org.quartz.SchedulerException $r2;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        r1 := @parameter0: org.quartz.impl.matchers.GroupMatcher;

        $r2 = new org.quartz.SchedulerException;

        specialinvoke $r2.<org.quartz.SchedulerException: void <init>(java.lang.String)>("Operation not supported for remote schedulers.");

        throw $r2;
    }

    public org.quartz.JobDetail getJobDetail(org.quartz.JobKey) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        org.quartz.JobKey r1;
        java.lang.Object[] $r3;
        java.lang.String $r4, $r5, $r8, $r10;
        java.lang.String[] $r6;
        java.lang.Class $r7, $r9;
        java.lang.Object $r11;
        javax.management.openmbean.CompositeData $r12;
        org.quartz.JobDetail $r13;
        java.lang.ClassNotFoundException $r14;
        org.quartz.SchedulerException $r15;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        r1 := @parameter0: org.quartz.JobKey;

     label1:
        $r3 = newarray (java.lang.Object)[2];

        $r4 = virtualinvoke r1.<org.quartz.JobKey: java.lang.String getName()>();

        $r3[0] = $r4;

        $r5 = virtualinvoke r1.<org.quartz.JobKey: java.lang.String getGroup()>();

        $r3[1] = $r5;

        $r6 = newarray (java.lang.String)[2];

        $r7 = class "Ljava/lang/String;";

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r6[0] = $r8;

        $r9 = class "Ljava/lang/String;";

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.String getName()>();

        $r6[1] = $r10;

        $r11 = virtualinvoke r0.<org.quartz.impl.RemoteMBeanScheduler: java.lang.Object invoke(java.lang.String,java.lang.Object[],java.lang.String[])>("getJobDetail", $r3, $r6);

        $r12 = (javax.management.openmbean.CompositeData) $r11;

        $r13 = staticinvoke <org.quartz.core.jmx.JobDetailSupport: org.quartz.JobDetail newJobDetail(javax.management.openmbean.CompositeData)>($r12);

     label2:
        return $r13;

     label3:
        $r14 := @caughtexception;

        $r15 = new org.quartz.SchedulerException;

        specialinvoke $r15.<org.quartz.SchedulerException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to resolve job class", $r14);

        throw $r15;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public org.quartz.Trigger getTrigger(org.quartz.TriggerKey) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        org.quartz.TriggerKey r1;
        org.quartz.SchedulerException $r2;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        r1 := @parameter0: org.quartz.TriggerKey;

        $r2 = new org.quartz.SchedulerException;

        specialinvoke $r2.<org.quartz.SchedulerException: void <init>(java.lang.String)>("Operation not supported for remote schedulers.");

        throw $r2;
    }

    public boolean checkExists(org.quartz.JobKey) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        org.quartz.JobKey r1;
        org.quartz.SchedulerException $r2;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        r1 := @parameter0: org.quartz.JobKey;

        $r2 = new org.quartz.SchedulerException;

        specialinvoke $r2.<org.quartz.SchedulerException: void <init>(java.lang.String)>("Operation not supported for remote schedulers.");

        throw $r2;
    }

    public boolean checkExists(org.quartz.TriggerKey) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        org.quartz.TriggerKey r1;
        java.lang.Object[] $r2;
        java.lang.String[] $r3;
        java.lang.Class $r4;
        java.lang.String $r5;
        java.lang.Object $r6;
        java.lang.Boolean $r7;
        boolean $z0;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        r1 := @parameter0: org.quartz.TriggerKey;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        $r3 = newarray (java.lang.String)[1];

        $r4 = class "Lorg/quartz/TriggerKey;";

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r3[0] = $r5;

        $r6 = virtualinvoke r0.<org.quartz.impl.RemoteMBeanScheduler: java.lang.Object invoke(java.lang.String,java.lang.Object[],java.lang.String[])>("checkExists", $r2, $r3);

        $r7 = (java.lang.Boolean) $r6;

        $z0 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    public void clear() throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        java.lang.String[] $r1;
        java.lang.Object[] $r2;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        $r2 = newarray (java.lang.Object)[0];

        $r1 = newarray (java.lang.String)[0];

        virtualinvoke r0.<org.quartz.impl.RemoteMBeanScheduler: java.lang.Object invoke(java.lang.String,java.lang.Object[],java.lang.String[])>("clear", $r2, $r1);

        return;
    }

    public org.quartz.Trigger$TriggerState getTriggerState(org.quartz.TriggerKey) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        org.quartz.TriggerKey r1;
        java.lang.Object[] $r2;
        java.lang.String $r3, $r4, $r7, $r9, $r11;
        java.lang.String[] $r5;
        java.lang.Class $r6, $r8;
        java.lang.Object $r10;
        org.quartz.Trigger$TriggerState $r12;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        r1 := @parameter0: org.quartz.TriggerKey;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = virtualinvoke r1.<org.quartz.TriggerKey: java.lang.String getName()>();

        $r2[0] = $r3;

        $r4 = virtualinvoke r1.<org.quartz.TriggerKey: java.lang.String getGroup()>();

        $r2[1] = $r4;

        $r5 = newarray (java.lang.String)[2];

        $r6 = class "Ljava/lang/String;";

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r5[0] = $r7;

        $r8 = class "Ljava/lang/String;";

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $r5[1] = $r9;

        $r10 = virtualinvoke r0.<org.quartz.impl.RemoteMBeanScheduler: java.lang.Object invoke(java.lang.String,java.lang.Object[],java.lang.String[])>("getTriggerState", $r2, $r5);

        $r11 = (java.lang.String) $r10;

        $r12 = staticinvoke <org.quartz.Trigger$TriggerState: org.quartz.Trigger$TriggerState valueOf(java.lang.String)>($r11);

        return $r12;
    }

    public void resetTriggerFromErrorState(org.quartz.TriggerKey) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        org.quartz.TriggerKey r1;
        java.lang.Object[] $r2;
        java.lang.String $r3, $r4, $r7, $r9;
        java.lang.String[] $r5;
        java.lang.Class $r6, $r8;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        r1 := @parameter0: org.quartz.TriggerKey;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = virtualinvoke r1.<org.quartz.TriggerKey: java.lang.String getName()>();

        $r2[0] = $r3;

        $r4 = virtualinvoke r1.<org.quartz.TriggerKey: java.lang.String getGroup()>();

        $r2[1] = $r4;

        $r5 = newarray (java.lang.String)[2];

        $r6 = class "Ljava/lang/String;";

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r5[0] = $r7;

        $r8 = class "Ljava/lang/String;";

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $r5[1] = $r9;

        virtualinvoke r0.<org.quartz.impl.RemoteMBeanScheduler: java.lang.Object invoke(java.lang.String,java.lang.Object[],java.lang.String[])>("resetTriggerFromErrorState", $r2, $r5);

        return;
    }

    public void addCalendar(java.lang.String, org.quartz.Calendar, boolean, boolean) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        java.lang.String r1, $r8, $r10, $r12, $r14;
        org.quartz.Calendar r2;
        boolean z0, z1;
        java.lang.Object[] $r3;
        java.lang.Boolean $r4, $r5;
        java.lang.String[] $r6;
        java.lang.Class $r7, $r9, $r11, $r13;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.quartz.Calendar;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        $r3 = newarray (java.lang.Object)[4];

        $r3[0] = r1;

        $r3[1] = r2;

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r3[2] = $r4;

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        $r3[3] = $r5;

        $r6 = newarray (java.lang.String)[4];

        $r7 = class "Ljava/lang/String;";

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r6[0] = $r8;

        $r9 = class "Lorg/quartz/Calendar;";

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.String getName()>();

        $r6[1] = $r10;

        $r11 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>();

        $r6[2] = $r12;

        $r13 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r14 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        $r6[3] = $r14;

        virtualinvoke r0.<org.quartz.impl.RemoteMBeanScheduler: java.lang.Object invoke(java.lang.String,java.lang.Object[],java.lang.String[])>("addCalendar", $r3, $r6);

        return;
    }

    public boolean deleteCalendar(java.lang.String) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        java.lang.String r1, $r5;
        java.lang.Object[] $r2;
        java.lang.String[] $r3;
        java.lang.Class $r4;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        r1 := @parameter0: java.lang.String;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        $r3 = newarray (java.lang.String)[1];

        $r4 = class "Ljava/lang/String;";

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r3[0] = $r5;

        virtualinvoke r0.<org.quartz.impl.RemoteMBeanScheduler: java.lang.Object invoke(java.lang.String,java.lang.Object[],java.lang.String[])>("deleteCalendar", $r2, $r3);

        return 1;
    }

    public org.quartz.Calendar getCalendar(java.lang.String) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        java.lang.String r1;
        org.quartz.SchedulerException $r2;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        r1 := @parameter0: java.lang.String;

        $r2 = new org.quartz.SchedulerException;

        specialinvoke $r2.<org.quartz.SchedulerException: void <init>(java.lang.String)>("Operation not supported for remote schedulers.");

        throw $r2;
    }

    public java.util.List getCalendarNames() throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        java.lang.Object $r1;
        java.util.List $r2;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        $r1 = virtualinvoke r0.<org.quartz.impl.RemoteMBeanScheduler: java.lang.Object getAttribute(java.lang.String)>("CalendarNames");

        $r2 = (java.util.List) $r1;

        return $r2;
    }

    public java.util.Set getPausedTriggerGroups() throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        java.lang.Object $r1;
        java.util.Set $r2;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        $r1 = virtualinvoke r0.<org.quartz.impl.RemoteMBeanScheduler: java.lang.Object getAttribute(java.lang.String)>("PausedTriggerGroups");

        $r2 = (java.util.Set) $r1;

        return $r2;
    }

    public org.quartz.ListenerManager getListenerManager() throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        org.quartz.SchedulerException $r1;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        $r1 = new org.quartz.SchedulerException;

        specialinvoke $r1.<org.quartz.SchedulerException: void <init>(java.lang.String)>("Operation not supported for remote schedulers.");

        throw $r1;
    }

    public boolean interrupt(org.quartz.JobKey) throws org.quartz.UnableToInterruptJobException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        org.quartz.JobKey r1;
        java.lang.Object[] $r3;
        java.lang.String $r4, $r5, $r8, $r10;
        java.lang.String[] $r6;
        java.lang.Class $r7, $r9;
        java.lang.Object $r11;
        java.lang.Boolean $r12;
        boolean $z0;
        org.quartz.SchedulerException $r13;
        org.quartz.UnableToInterruptJobException $r14;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        r1 := @parameter0: org.quartz.JobKey;

     label1:
        $r3 = newarray (java.lang.Object)[2];

        $r4 = virtualinvoke r1.<org.quartz.JobKey: java.lang.String getName()>();

        $r3[0] = $r4;

        $r5 = virtualinvoke r1.<org.quartz.JobKey: java.lang.String getGroup()>();

        $r3[1] = $r5;

        $r6 = newarray (java.lang.String)[2];

        $r7 = class "Ljava/lang/String;";

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r6[0] = $r8;

        $r9 = class "Ljava/lang/String;";

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.String getName()>();

        $r6[1] = $r10;

        $r11 = virtualinvoke r0.<org.quartz.impl.RemoteMBeanScheduler: java.lang.Object invoke(java.lang.String,java.lang.Object[],java.lang.String[])>("interruptJob", $r3, $r6);

        $r12 = (java.lang.Boolean) $r11;

        $z0 = virtualinvoke $r12.<java.lang.Boolean: boolean booleanValue()>();

     label2:
        return $z0;

     label3:
        $r13 := @caughtexception;

        $r14 = new org.quartz.UnableToInterruptJobException;

        specialinvoke $r14.<org.quartz.UnableToInterruptJobException: void <init>(java.lang.Throwable)>($r13);

        throw $r14;

        catch org.quartz.SchedulerException from label1 to label2 with label3;
    }

    public boolean interrupt(java.lang.String) throws org.quartz.UnableToInterruptJobException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        java.lang.String r1, $r6;
        java.lang.Object[] $r3;
        java.lang.String[] $r4;
        java.lang.Class $r5;
        java.lang.Object $r7;
        java.lang.Boolean $r8;
        boolean $z0;
        org.quartz.SchedulerException $r9;
        org.quartz.UnableToInterruptJobException $r10;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        r1 := @parameter0: java.lang.String;

     label1:
        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r1;

        $r4 = newarray (java.lang.String)[1];

        $r5 = class "Ljava/lang/String;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r4[0] = $r6;

        $r7 = virtualinvoke r0.<org.quartz.impl.RemoteMBeanScheduler: java.lang.Object invoke(java.lang.String,java.lang.Object[],java.lang.String[])>("interruptJob", $r3, $r4);

        $r8 = (java.lang.Boolean) $r7;

        $z0 = virtualinvoke $r8.<java.lang.Boolean: boolean booleanValue()>();

     label2:
        return $z0;

     label3:
        $r9 := @caughtexception;

        $r10 = new org.quartz.UnableToInterruptJobException;

        specialinvoke $r10.<org.quartz.UnableToInterruptJobException: void <init>(java.lang.Throwable)>($r9);

        throw $r10;

        catch org.quartz.SchedulerException from label1 to label2 with label3;
    }

    public void setJobFactory(org.quartz.spi.JobFactory) throws org.quartz.SchedulerException
    {
        org.quartz.impl.RemoteMBeanScheduler r0;
        org.quartz.spi.JobFactory r1;
        org.quartz.SchedulerException $r2;

        r0 := @this: org.quartz.impl.RemoteMBeanScheduler;

        r1 := @parameter0: org.quartz.spi.JobFactory;

        $r2 = new org.quartz.SchedulerException;

        specialinvoke $r2.<org.quartz.SchedulerException: void <init>(java.lang.String)>("Operation not supported for remote schedulers.");

        throw $r2;
    }
}
