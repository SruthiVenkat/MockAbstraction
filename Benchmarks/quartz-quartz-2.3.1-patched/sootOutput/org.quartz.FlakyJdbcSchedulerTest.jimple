public class org.quartz.FlakyJdbcSchedulerTest extends org.quartz.AbstractSchedulerTest
{
    private final java.util.Random rndm;
    private final float createFailureProb;
    private final float preCommitFailureProb;
    private final float postCommitFailureProb;

    public static java.util.Collection data()
    {
        java.lang.Object[][] $r0;
        java.lang.Object[] $r1, $r5, $r9, $r13, $r17;
        java.lang.Float $r2, $r3, $r4, $r6, $r7, $r8, $r10, $r11, $r12, $r14, $r15, $r16, $r18, $r19, $r20;
        java.util.List $r21;

        $r0 = newarray (java.lang.Object[])[5];

        $r1 = newarray (java.lang.Object)[3];

        $r2 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.0F);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.0F);

        $r1[1] = $r3;

        $r4 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.0F);

        $r1[2] = $r4;

        $r0[0] = $r1;

        $r5 = newarray (java.lang.Object)[3];

        $r6 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.2F);

        $r5[0] = $r6;

        $r7 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.0F);

        $r5[1] = $r7;

        $r8 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.0F);

        $r5[2] = $r8;

        $r0[1] = $r5;

        $r9 = newarray (java.lang.Object)[3];

        $r10 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.0F);

        $r9[0] = $r10;

        $r11 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.2F);

        $r9[1] = $r11;

        $r12 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.0F);

        $r9[2] = $r12;

        $r0[2] = $r9;

        $r13 = newarray (java.lang.Object)[3];

        $r14 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.0F);

        $r13[0] = $r14;

        $r15 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.0F);

        $r13[1] = $r15;

        $r16 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.2F);

        $r13[2] = $r16;

        $r0[3] = $r13;

        $r17 = newarray (java.lang.Object)[3];

        $r18 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.2F);

        $r17[0] = $r18;

        $r19 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.2F);

        $r17[1] = $r19;

        $r20 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.2F);

        $r17[2] = $r20;

        $r0[4] = $r17;

        $r21 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0);

        return $r21;
    }

    public void <init>(float, float, float)
    {
        org.quartz.FlakyJdbcSchedulerTest r0;
        float f0, f1, f2;
        java.util.Random $r1;

        r0 := @this: org.quartz.FlakyJdbcSchedulerTest;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        specialinvoke r0.<org.quartz.AbstractSchedulerTest: void <init>()>();

        r0.<org.quartz.FlakyJdbcSchedulerTest: float createFailureProb> = f0;

        r0.<org.quartz.FlakyJdbcSchedulerTest: float preCommitFailureProb> = f1;

        r0.<org.quartz.FlakyJdbcSchedulerTest: float postCommitFailureProb> = f2;

        $r1 = new java.util.Random;

        specialinvoke $r1.<java.util.Random: void <init>()>();

        r0.<org.quartz.FlakyJdbcSchedulerTest: java.util.Random rndm> = $r1;

        return;
    }

    protected org.quartz.Scheduler createScheduler(java.lang.String, int) throws org.quartz.SchedulerException
    {
        org.quartz.FlakyJdbcSchedulerTest r0;
        java.lang.String r1, $r9, $r15;
        int i0;
        org.quartz.utils.DBConnectionManager $r2;
        org.quartz.FlakyJdbcSchedulerTest$FlakyConnectionProvider $r3;
        org.quartz.impl.jdbcjobstore.JobStoreTX $r4;
        org.quartz.impl.DirectSchedulerFactory $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r12, $r13, $r14;
        org.quartz.simpl.SimpleThreadPool $r10;
        org.quartz.impl.SchedulerRepository $r11;
        org.quartz.Scheduler $r16;
        java.sql.SQLException $r17;
        java.lang.AssertionError $r18;

        r0 := @this: org.quartz.FlakyJdbcSchedulerTest;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        $r2 = staticinvoke <org.quartz.utils.DBConnectionManager: org.quartz.utils.DBConnectionManager getInstance()>();

        $r3 = new org.quartz.FlakyJdbcSchedulerTest$FlakyConnectionProvider;

        specialinvoke $r3.<org.quartz.FlakyJdbcSchedulerTest$FlakyConnectionProvider: void <init>(org.quartz.FlakyJdbcSchedulerTest,java.lang.String,org.quartz.FlakyJdbcSchedulerTest$1)>(r0, r1, null);

        virtualinvoke $r2.<org.quartz.utils.DBConnectionManager: void addConnectionProvider(java.lang.String,org.quartz.utils.ConnectionProvider)>(r1, $r3);

     label2:
        goto label4;

     label3:
        $r17 := @caughtexception;

        $r18 = new java.lang.AssertionError;

        specialinvoke $r18.<java.lang.AssertionError: void <init>(java.lang.Object)>($r17);

        throw $r18;

     label4:
        $r4 = new org.quartz.impl.jdbcjobstore.JobStoreTX;

        specialinvoke $r4.<org.quartz.impl.jdbcjobstore.JobStoreTX: void <init>()>();

        virtualinvoke $r4.<org.quartz.impl.jdbcjobstore.JobStoreTX: void setDataSource(java.lang.String)>(r1);

        virtualinvoke $r4.<org.quartz.impl.jdbcjobstore.JobStoreTX: void setTablePrefix(java.lang.String)>("QRTZ_");

        virtualinvoke $r4.<org.quartz.impl.jdbcjobstore.JobStoreTX: void setInstanceId(java.lang.String)>("AUTO");

        virtualinvoke $r4.<org.quartz.impl.jdbcjobstore.JobStoreTX: void setDbRetryInterval(long)>(50L);

        $r5 = staticinvoke <org.quartz.impl.DirectSchedulerFactory: org.quartz.impl.DirectSchedulerFactory getInstance()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Scheduler");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = new org.quartz.simpl.SimpleThreadPool;

        specialinvoke $r10.<org.quartz.simpl.SimpleThreadPool: void <init>(int,int)>(i0, 5);

        virtualinvoke $r5.<org.quartz.impl.DirectSchedulerFactory: void createScheduler(java.lang.String,java.lang.String,org.quartz.spi.ThreadPool,org.quartz.spi.JobStore,java.lang.String,int,long,long)>($r9, "AUTO", $r10, $r4, null, 0, -1L, 50L);

        $r11 = staticinvoke <org.quartz.impl.SchedulerRepository: org.quartz.impl.SchedulerRepository getInstance()>();

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Scheduler");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = virtualinvoke $r11.<org.quartz.impl.SchedulerRepository: org.quartz.Scheduler lookup(java.lang.String)>($r15);

        return $r16;

        catch java.sql.SQLException from label1 to label2 with label3;
    }

    public void testTriggerFiring() throws java.lang.Exception
    {
        org.quartz.FlakyJdbcSchedulerTest r0;
        org.quartz.Scheduler r1;
        java.util.concurrent.TimeUnit $r3, $r4;
        long $l2, $l3;
        byte $b4;
        org.quartz.JobKey $r5, $r30;
        java.lang.StringBuilder $r6, $r7, $r8, $r11, $r12, $r13, $r21, $r22, $r23;
        java.lang.String $r9, $r24, r33;
        org.quartz.JobDataMap $r10;
        int $i5, i6, i7, i8, i9;
        org.quartz.JobBuilder $r14, $r15, $r17, $r18, $r19;
        java.lang.Integer $r16;
        org.quartz.TriggerBuilder $r20, $r25, $r29;
        org.quartz.SimpleScheduleBuilder $r26, $r27, $r28;
        boolean $z0;
        java.lang.Throwable $r32;
        org.quartz.JobDetail r34, r36;
        org.quartz.Trigger r35;

        r0 := @this: org.quartz.FlakyJdbcSchedulerTest;

        r1 = virtualinvoke r0.<org.quartz.FlakyJdbcSchedulerTest: org.quartz.Scheduler createScheduler(java.lang.String,int)>("testTriggerFiring", 2);

     label01:
        i6 = 0;

     label02:
        if i6 >= 100 goto label04;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("myJob");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        r33 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob(java.lang.Class)>(class "Lorg/quartz/FlakyJdbcSchedulerTest$TestJob;");

        $r15 = virtualinvoke $r14.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String,java.lang.String)>(r33, "myJobGroup");

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r17 = virtualinvoke $r15.<org.quartz.JobBuilder: org.quartz.JobBuilder usingJobData(java.lang.String,java.lang.Integer)>("data", $r16);

        $r18 = virtualinvoke $r17.<org.quartz.JobBuilder: org.quartz.JobBuilder storeDurably()>();

        $r19 = virtualinvoke $r18.<org.quartz.JobBuilder: org.quartz.JobBuilder requestRecovery()>();

        r34 = virtualinvoke $r19.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        $r20 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("triggerName");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        $r25 = virtualinvoke $r20.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String,java.lang.String)>($r24, "triggerGroup");

        $r26 = staticinvoke <org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder simpleSchedule()>();

        $r27 = virtualinvoke $r26.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder withIntervalInSeconds(int)>(1);

        $r28 = virtualinvoke $r27.<org.quartz.SimpleScheduleBuilder: org.quartz.SimpleScheduleBuilder withRepeatCount(int)>(4);

        $r29 = virtualinvoke $r25.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>($r28);

        r35 = virtualinvoke $r29.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        $r30 = interfaceinvoke r34.<org.quartz.JobDetail: org.quartz.JobKey getKey()>();

        $z0 = interfaceinvoke r1.<org.quartz.Scheduler: boolean checkExists(org.quartz.JobKey)>($r30);

        if $z0 != 0 goto label03;

        interfaceinvoke r1.<org.quartz.Scheduler: java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)>(r34, r35);

     label03:
        i6 = i6 + 1;

        goto label02;

     label04:
        interfaceinvoke r1.<org.quartz.Scheduler: void start()>();

        i7 = 0;

     label05:
        $l2 = (long) i7;

        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $l3 = virtualinvoke $r3.<java.util.concurrent.TimeUnit: long toSeconds(long)>(5L);

        $b4 = $l2 cmp $l3;

        if $b4 >= 0 goto label11;

        i8 = 0;

        i9 = 0;

     label06:
        if i9 >= 100 goto label08;

        $r5 = new org.quartz.JobKey;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("myJob");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<org.quartz.JobKey: void <init>(java.lang.String,java.lang.String)>($r9, "myJobGroup");

        r36 = interfaceinvoke r1.<org.quartz.Scheduler: org.quartz.JobDetail getJobDetail(org.quartz.JobKey)>($r5);

        $r10 = interfaceinvoke r36.<org.quartz.JobDetail: org.quartz.JobDataMap getJobDataMap()>();

        $i5 = virtualinvoke $r10.<org.quartz.JobDataMap: int getInt(java.lang.String)>("data");

        if $i5 < 5 goto label07;

        i8 = i8 + 1;

     label07:
        i9 = i9 + 1;

        goto label06;

     label08:
        if i8 != 100 goto label10;

     label09:
        interfaceinvoke r1.<org.quartz.Scheduler: void shutdown(boolean)>(1);

        return;

     label10:
        $r4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        virtualinvoke $r4.<java.util.concurrent.TimeUnit: void sleep(long)>(1L);

        i7 = i7 + 1;

        goto label05;

     label11:
        staticinvoke <junit.framework.Assert: void fail()>();

     label12:
        interfaceinvoke r1.<org.quartz.Scheduler: void shutdown(boolean)>(1);

        goto label15;

     label13:
        $r32 := @caughtexception;

     label14:
        interfaceinvoke r1.<org.quartz.Scheduler: void shutdown(boolean)>(1);

        throw $r32;

     label15:
        return;

        catch java.lang.Throwable from label01 to label09 with label13;
        catch java.lang.Throwable from label10 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    private void createFailure() throws java.sql.SQLException
    {
        org.quartz.FlakyJdbcSchedulerTest r0;
        java.util.Random $r1;
        float $f0, $f1;
        byte $b0;
        java.sql.SQLException $r2;

        r0 := @this: org.quartz.FlakyJdbcSchedulerTest;

        $r1 = r0.<org.quartz.FlakyJdbcSchedulerTest: java.util.Random rndm>;

        $f0 = virtualinvoke $r1.<java.util.Random: float nextFloat()>();

        $f1 = r0.<org.quartz.FlakyJdbcSchedulerTest: float createFailureProb>;

        $b0 = $f0 cmpg $f1;

        if $b0 >= 0 goto label1;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("FlakyConnection failed on you on creation.");

        throw $r2;

     label1:
        return;
    }

    private void preCommitFailure() throws java.sql.SQLException
    {
        org.quartz.FlakyJdbcSchedulerTest r0;
        java.util.Random $r1;
        float $f0, $f1;
        byte $b0;
        java.sql.SQLException $r2;

        r0 := @this: org.quartz.FlakyJdbcSchedulerTest;

        $r1 = r0.<org.quartz.FlakyJdbcSchedulerTest: java.util.Random rndm>;

        $f0 = virtualinvoke $r1.<java.util.Random: float nextFloat()>();

        $f1 = r0.<org.quartz.FlakyJdbcSchedulerTest: float preCommitFailureProb>;

        $b0 = $f0 cmpg $f1;

        if $b0 >= 0 goto label1;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("FlakyConnection failed on you pre-commit.");

        throw $r2;

     label1:
        return;
    }

    private void postCommitFailure() throws java.sql.SQLException
    {
        org.quartz.FlakyJdbcSchedulerTest r0;
        java.util.Random $r1;
        float $f0, $f1;
        byte $b0;
        java.sql.SQLException $r2;

        r0 := @this: org.quartz.FlakyJdbcSchedulerTest;

        $r1 = r0.<org.quartz.FlakyJdbcSchedulerTest: java.util.Random rndm>;

        $f0 = virtualinvoke $r1.<java.util.Random: float nextFloat()>();

        $f1 = r0.<org.quartz.FlakyJdbcSchedulerTest: float postCommitFailureProb>;

        $b0 = $f0 cmpg $f1;

        if $b0 >= 0 goto label1;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("FlakyConnection failed on you post-commit.");

        throw $r2;

     label1:
        return;
    }

    static void access$100(org.quartz.FlakyJdbcSchedulerTest) throws java.sql.SQLException
    {
        org.quartz.FlakyJdbcSchedulerTest r0;

        r0 := @parameter0: org.quartz.FlakyJdbcSchedulerTest;

        specialinvoke r0.<org.quartz.FlakyJdbcSchedulerTest: void createFailure()>();

        return;
    }

    static void access$200(org.quartz.FlakyJdbcSchedulerTest) throws java.sql.SQLException
    {
        org.quartz.FlakyJdbcSchedulerTest r0;

        r0 := @parameter0: org.quartz.FlakyJdbcSchedulerTest;

        specialinvoke r0.<org.quartz.FlakyJdbcSchedulerTest: void preCommitFailure()>();

        return;
    }

    static void access$300(org.quartz.FlakyJdbcSchedulerTest) throws java.sql.SQLException
    {
        org.quartz.FlakyJdbcSchedulerTest r0;

        r0 := @parameter0: org.quartz.FlakyJdbcSchedulerTest;

        specialinvoke r0.<org.quartz.FlakyJdbcSchedulerTest: void postCommitFailure()>();

        return;
    }
}
