public class org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest extends junit.framework.TestCase
{

    public void <init>()
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest r0;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest;

        specialinvoke r0.<junit.framework.TestCase: void <init>()>();

        return;
    }

    public void testNormalExample() throws java.lang.Exception
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest r0;
        java.util.Date r1, $r10, $r12;
        java.util.List r5;
        org.quartz.TimeOfDay $r6, $r7;
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl $r8;
        org.quartz.DateBuilder$IntervalUnit $r9;
        int $i0;
        java.lang.Object $r11, $r13;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest;

        r1 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(0, 0, 0, 1, 1, 2011);

        $r6 = new org.quartz.TimeOfDay;

        specialinvoke $r6.<org.quartz.TimeOfDay: void <init>(int,int,int)>(8, 0, 0);

        $r7 = new org.quartz.TimeOfDay;

        specialinvoke $r7.<org.quartz.TimeOfDay: void <init>(int,int,int)>(11, 0, 0);

        $r8 = new org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        specialinvoke $r8.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void <init>()>();

        virtualinvoke $r8.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setStartTime(java.util.Date)>(r1);

        virtualinvoke $r8.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setStartTimeOfDay(org.quartz.TimeOfDay)>($r6);

        virtualinvoke $r8.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setEndTimeOfDay(org.quartz.TimeOfDay)>($r7);

        $r9 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit MINUTE>;

        virtualinvoke $r8.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)>($r9);

        virtualinvoke $r8.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatInterval(int)>(72);

        r5 = staticinvoke <org.quartz.TriggerUtils: java.util.List computeFireTimes(org.quartz.spi.OperableTrigger,org.quartz.Calendar,int)>($r8, null, 48);

        $i0 = interfaceinvoke r5.<java.util.List: int size()>();

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(48, $i0);

        $r10 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(8, 0, 0, 1, 1, 2011);

        $r11 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r11);

        $r12 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(10, 24, 0, 16, 1, 2011);

        $r13 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(47);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r12, $r13);

        return;
    }

    public void testQuartzCalendarExclusion() throws java.lang.Exception
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest r0;
        java.util.Date r1, $r9, $r11, $r13;
        java.util.List r4;
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl $r5;
        org.quartz.TimeOfDay $r6;
        org.quartz.DateBuilder$IntervalUnit $r7;
        org.quartz.impl.calendar.CronCalendar $r8;
        int $i0;
        java.lang.Object $r10, $r12, $r14;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest;

        r1 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(0, 0, 0, 1, 1, 2011);

        $r5 = new org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        specialinvoke $r5.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void <init>()>();

        virtualinvoke $r5.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setStartTime(java.util.Date)>(r1);

        $r6 = new org.quartz.TimeOfDay;

        specialinvoke $r6.<org.quartz.TimeOfDay: void <init>(int,int)>(8, 0);

        virtualinvoke $r5.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setStartTimeOfDay(org.quartz.TimeOfDay)>($r6);

        $r7 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit MINUTE>;

        virtualinvoke $r5.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)>($r7);

        virtualinvoke $r5.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatInterval(int)>(60);

        $r8 = new org.quartz.impl.calendar.CronCalendar;

        specialinvoke $r8.<org.quartz.impl.calendar.CronCalendar: void <init>(java.lang.String)>("* * 9-12 * * ?");

        r4 = staticinvoke <org.quartz.TriggerUtils: java.util.List computeFireTimes(org.quartz.spi.OperableTrigger,org.quartz.Calendar,int)>($r5, $r8, 48);

        $i0 = interfaceinvoke r4.<java.util.List: int size()>();

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(48, $i0);

        $r9 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(8, 0, 0, 1, 1, 2011);

        $r10 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r9, $r10);

        $r11 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(13, 0, 0, 1, 1, 2011);

        $r12 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(1);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r11, $r12);

        $r13 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(23, 0, 0, 4, 1, 2011);

        $r14 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(47);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r13, $r14);

        return;
    }

    public void testValidateTimeOfDayOrder() throws java.lang.Exception
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest r0;
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl $r3;
        org.quartz.TimeOfDay $r4, $r5;
        org.quartz.SchedulerException $r6;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest;

        $r3 = new org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        specialinvoke $r3.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void <init>()>();

        $r4 = new org.quartz.TimeOfDay;

        specialinvoke $r4.<org.quartz.TimeOfDay: void <init>(int,int,int)>(12, 0, 0);

        virtualinvoke $r3.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setStartTimeOfDay(org.quartz.TimeOfDay)>($r4);

        $r5 = new org.quartz.TimeOfDay;

        specialinvoke $r5.<org.quartz.TimeOfDay: void <init>(int,int,int)>(8, 0, 0);

        virtualinvoke $r3.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setEndTimeOfDay(org.quartz.TimeOfDay)>($r5);

     label1:
        virtualinvoke $r3.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void validate()>();

        staticinvoke <org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest: void fail(java.lang.String)>("Trigger should be invalidate when time of day is not in order.");

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        return;

        catch org.quartz.SchedulerException from label1 to label2 with label3;
    }

    public void testValidateInterval() throws java.lang.Exception
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest r0;
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl $r2;
        org.quartz.JobKey $r3;
        org.quartz.DateBuilder$IntervalUnit $r4, $r5, $r6, $r7, $r8;
        java.lang.Exception $r9, $r13;
        org.quartz.SchedulerException $r10, $r11, $r12;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest;

        $r2 = new org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        specialinvoke $r2.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void <init>()>();

        virtualinvoke $r2.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setName(java.lang.String)>("test");

        virtualinvoke $r2.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setGroup(java.lang.String)>("test");

        $r3 = staticinvoke <org.quartz.JobKey: org.quartz.JobKey jobKey(java.lang.String)>("test");

        virtualinvoke $r2.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setJobKey(org.quartz.JobKey)>($r3);

        $r4 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit HOUR>;

        virtualinvoke $r2.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)>($r4);

        virtualinvoke $r2.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatInterval(int)>(25);

     label01:
        virtualinvoke $r2.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void validate()>();

        staticinvoke <org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest: void fail(java.lang.String)>("Trigger should be invalidate when interval is greater than 24 hours.");

     label02:
        goto label04;

     label03:
        $r12 := @caughtexception;

     label04:
        $r5 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit MINUTE>;

        virtualinvoke $r2.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)>($r5);

        virtualinvoke $r2.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatInterval(int)>(1500);

     label05:
        virtualinvoke $r2.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void validate()>();

        staticinvoke <org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest: void fail(java.lang.String)>("Trigger should be invalidate when interval is greater than 24 hours.");

     label06:
        goto label08;

     label07:
        $r11 := @caughtexception;

     label08:
        $r6 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit SECOND>;

        virtualinvoke $r2.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)>($r6);

        virtualinvoke $r2.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatInterval(int)>(90000);

     label09:
        virtualinvoke $r2.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void validate()>();

        staticinvoke <org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest: void fail(java.lang.String)>("Trigger should be invalidate when interval is greater than 24 hours.");

     label10:
        goto label12;

     label11:
        $r10 := @caughtexception;

     label12:
        $r7 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit DAY>;

        virtualinvoke $r2.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)>($r7);

        virtualinvoke $r2.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void validate()>();

        staticinvoke <org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest: void fail(java.lang.String)>("Trigger should be invalidate when interval unit > HOUR.");

     label13:
        goto label15;

     label14:
        $r13 := @caughtexception;

     label15:
        $r8 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit SECOND>;

        virtualinvoke $r2.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)>($r8);

        virtualinvoke $r2.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatInterval(int)>(0);

        virtualinvoke $r2.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void validate()>();

        staticinvoke <org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest: void fail(java.lang.String)>("Trigger should be invalidate when interval is zero.");

     label16:
        goto label18;

     label17:
        $r9 := @caughtexception;

     label18:
        return;

        catch org.quartz.SchedulerException from label01 to label02 with label03;
        catch org.quartz.SchedulerException from label05 to label06 with label07;
        catch org.quartz.SchedulerException from label09 to label10 with label11;
        catch java.lang.Exception from label12 to label13 with label14;
        catch java.lang.Exception from label15 to label16 with label17;
    }

    public void testStartTimeWithoutStartTimeOfDay() throws java.lang.Exception
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest r0;
        java.util.Date r1, $r6, $r8;
        java.util.List r3;
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl $r4;
        org.quartz.DateBuilder$IntervalUnit $r5;
        int $i0;
        java.lang.Object $r7, $r9;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest;

        r1 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(0, 0, 0, 1, 1, 2011);

        $r4 = new org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        specialinvoke $r4.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void <init>()>();

        virtualinvoke $r4.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setStartTime(java.util.Date)>(r1);

        $r5 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit MINUTE>;

        virtualinvoke $r4.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)>($r5);

        virtualinvoke $r4.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatInterval(int)>(60);

        r3 = staticinvoke <org.quartz.TriggerUtils: java.util.List computeFireTimes(org.quartz.spi.OperableTrigger,org.quartz.Calendar,int)>($r4, null, 48);

        $i0 = interfaceinvoke r3.<java.util.List: int size()>();

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(48, $i0);

        $r6 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(0, 0, 0, 1, 1, 2011);

        $r7 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r6, $r7);

        $r8 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(23, 0, 0, 2, 1, 2011);

        $r9 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(47);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r8, $r9);

        return;
    }

    public void testEndTimeWithoutEndTimeOfDay() throws java.lang.Exception
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest r0;
        java.util.Date r1, r2, $r7, $r9;
        java.util.List r4;
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl $r5;
        org.quartz.DateBuilder$IntervalUnit $r6;
        int $i0;
        java.lang.Object $r8, $r10;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest;

        r1 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(0, 0, 0, 1, 1, 2011);

        r2 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(22, 0, 0, 2, 1, 2011);

        $r5 = new org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        specialinvoke $r5.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void <init>()>();

        virtualinvoke $r5.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setStartTime(java.util.Date)>(r1);

        virtualinvoke $r5.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setEndTime(java.util.Date)>(r2);

        $r6 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit MINUTE>;

        virtualinvoke $r5.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)>($r6);

        virtualinvoke $r5.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatInterval(int)>(60);

        r4 = staticinvoke <org.quartz.TriggerUtils: java.util.List computeFireTimes(org.quartz.spi.OperableTrigger,org.quartz.Calendar,int)>($r5, null, 48);

        $i0 = interfaceinvoke r4.<java.util.List: int size()>();

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(47, $i0);

        $r7 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(0, 0, 0, 1, 1, 2011);

        $r8 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, $r8);

        $r9 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(22, 0, 0, 2, 1, 2011);

        $r10 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(46);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r9, $r10);

        return;
    }

    public void testStartTimeBeforeStartTimeOfDay() throws java.lang.Exception
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest r0;
        java.util.Date r1, $r8, $r10;
        java.util.List r4;
        org.quartz.TimeOfDay $r5;
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl $r6;
        org.quartz.DateBuilder$IntervalUnit $r7;
        int $i0;
        java.lang.Object $r9, $r11;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest;

        r1 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(0, 0, 0, 1, 1, 2011);

        $r5 = new org.quartz.TimeOfDay;

        specialinvoke $r5.<org.quartz.TimeOfDay: void <init>(int,int,int)>(8, 0, 0);

        $r6 = new org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        specialinvoke $r6.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void <init>()>();

        virtualinvoke $r6.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setStartTime(java.util.Date)>(r1);

        virtualinvoke $r6.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setStartTimeOfDay(org.quartz.TimeOfDay)>($r5);

        $r7 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit MINUTE>;

        virtualinvoke $r6.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)>($r7);

        virtualinvoke $r6.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatInterval(int)>(60);

        r4 = staticinvoke <org.quartz.TriggerUtils: java.util.List computeFireTimes(org.quartz.spi.OperableTrigger,org.quartz.Calendar,int)>($r6, null, 48);

        $i0 = interfaceinvoke r4.<java.util.List: int size()>();

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(48, $i0);

        $r8 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(8, 0, 0, 1, 1, 2011);

        $r9 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r8, $r9);

        $r10 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(23, 0, 0, 3, 1, 2011);

        $r11 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(47);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r11);

        return;
    }

    public void testStartTimeBeforeStartTimeOfDayOnInvalidDay() throws java.lang.Exception
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest r0;
        java.util.Date r1, $r15, $r16, $r17, $r18, $r20;
        java.util.List r5;
        org.quartz.TimeOfDay $r6;
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl $r7;
        java.util.HashSet $r8;
        java.lang.Integer $r9, $r10, $r11, $r12, $r13;
        org.quartz.DateBuilder$IntervalUnit $r14;
        int $i0;
        java.lang.Object $r19, $r21;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest;

        r1 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(0, 0, 0, 1, 1, 2011);

        $r6 = new org.quartz.TimeOfDay;

        specialinvoke $r6.<org.quartz.TimeOfDay: void <init>(int,int,int)>(8, 0, 0);

        $r7 = new org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        specialinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void <init>()>();

        $r8 = new java.util.HashSet;

        specialinvoke $r8.<java.util.HashSet: void <init>()>();

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>($r9);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>($r10);

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>($r11);

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>($r12);

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>($r13);

        virtualinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setDaysOfWeek(java.util.Set)>($r8);

        virtualinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setStartTime(java.util.Date)>(r1);

        virtualinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setStartTimeOfDay(org.quartz.TimeOfDay)>($r6);

        $r14 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit MINUTE>;

        virtualinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)>($r14);

        virtualinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatInterval(int)>(60);

        $r15 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(8, 0, 0, 3, 1, 2011);

        $r16 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(6, 0, 0, 22, 5, 2010);

        $r17 = virtualinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>($r16);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r15, $r17);

        r5 = staticinvoke <org.quartz.TriggerUtils: java.util.List computeFireTimes(org.quartz.spi.OperableTrigger,org.quartz.Calendar,int)>($r7, null, 48);

        $i0 = interfaceinvoke r5.<java.util.List: int size()>();

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(48, $i0);

        $r18 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(8, 0, 0, 3, 1, 2011);

        $r19 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r18, $r19);

        $r20 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(23, 0, 0, 5, 1, 2011);

        $r21 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(47);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r20, $r21);

        return;
    }

    public void testStartTimeAfterStartTimeOfDay() throws java.lang.Exception
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest r0;
        java.util.Date r1, $r8, $r10;
        java.util.List r4;
        org.quartz.TimeOfDay $r5;
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl $r6;
        org.quartz.DateBuilder$IntervalUnit $r7;
        int $i0;
        java.lang.Object $r9, $r11;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest;

        r1 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(9, 23, 0, 1, 1, 2011);

        $r5 = new org.quartz.TimeOfDay;

        specialinvoke $r5.<org.quartz.TimeOfDay: void <init>(int,int,int)>(8, 0, 0);

        $r6 = new org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        specialinvoke $r6.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void <init>()>();

        virtualinvoke $r6.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setStartTime(java.util.Date)>(r1);

        virtualinvoke $r6.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setStartTimeOfDay(org.quartz.TimeOfDay)>($r5);

        $r7 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit MINUTE>;

        virtualinvoke $r6.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)>($r7);

        virtualinvoke $r6.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatInterval(int)>(60);

        r4 = staticinvoke <org.quartz.TriggerUtils: java.util.List computeFireTimes(org.quartz.spi.OperableTrigger,org.quartz.Calendar,int)>($r6, null, 48);

        $i0 = interfaceinvoke r4.<java.util.List: int size()>();

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(48, $i0);

        $r8 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(10, 0, 0, 1, 1, 2011);

        $r9 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r8, $r9);

        $r10 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(9, 0, 0, 4, 1, 2011);

        $r11 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(47);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r11);

        return;
    }

    public void testEndTimeBeforeEndTimeOfDay() throws java.lang.Exception
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest r0;
        java.util.Date r1, r2, $r9, $r11, $r13;
        java.util.List r5;
        org.quartz.TimeOfDay $r6;
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl $r7;
        org.quartz.DateBuilder$IntervalUnit $r8;
        int $i0;
        java.lang.Object $r10, $r12, $r14;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest;

        r1 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(0, 0, 0, 1, 1, 2011);

        r2 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(16, 0, 0, 2, 1, 2011);

        $r6 = new org.quartz.TimeOfDay;

        specialinvoke $r6.<org.quartz.TimeOfDay: void <init>(int,int,int)>(17, 0, 0);

        $r7 = new org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        specialinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void <init>()>();

        virtualinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setStartTime(java.util.Date)>(r1);

        virtualinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setEndTime(java.util.Date)>(r2);

        virtualinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setEndTimeOfDay(org.quartz.TimeOfDay)>($r6);

        $r8 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit MINUTE>;

        virtualinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)>($r8);

        virtualinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatInterval(int)>(60);

        r5 = staticinvoke <org.quartz.TriggerUtils: java.util.List computeFireTimes(org.quartz.spi.OperableTrigger,org.quartz.Calendar,int)>($r7, null, 48);

        $i0 = interfaceinvoke r5.<java.util.List: int size()>();

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(35, $i0);

        $r9 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(0, 0, 0, 1, 1, 2011);

        $r10 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r9, $r10);

        $r11 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(17, 0, 0, 1, 1, 2011);

        $r12 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(17);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r11, $r12);

        $r13 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(16, 0, 0, 2, 1, 2011);

        $r14 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(34);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r13, $r14);

        return;
    }

    public void testEndTimeAfterEndTimeOfDay() throws java.lang.Exception
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest r0;
        java.util.Date r1, r2, $r9, $r11, $r13;
        java.util.List r5;
        org.quartz.TimeOfDay $r6;
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl $r7;
        org.quartz.DateBuilder$IntervalUnit $r8;
        int $i0;
        java.lang.Object $r10, $r12, $r14;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest;

        r1 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(0, 0, 0, 1, 1, 2011);

        r2 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(18, 0, 0, 2, 1, 2011);

        $r6 = new org.quartz.TimeOfDay;

        specialinvoke $r6.<org.quartz.TimeOfDay: void <init>(int,int,int)>(17, 0, 0);

        $r7 = new org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        specialinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void <init>()>();

        virtualinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setStartTime(java.util.Date)>(r1);

        virtualinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setEndTime(java.util.Date)>(r2);

        virtualinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setEndTimeOfDay(org.quartz.TimeOfDay)>($r6);

        $r8 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit MINUTE>;

        virtualinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)>($r8);

        virtualinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatInterval(int)>(60);

        r5 = staticinvoke <org.quartz.TriggerUtils: java.util.List computeFireTimes(org.quartz.spi.OperableTrigger,org.quartz.Calendar,int)>($r7, null, 48);

        $i0 = interfaceinvoke r5.<java.util.List: int size()>();

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(36, $i0);

        $r9 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(0, 0, 0, 1, 1, 2011);

        $r10 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r9, $r10);

        $r11 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(17, 0, 0, 1, 1, 2011);

        $r12 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(17);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r11, $r12);

        $r13 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(17, 0, 0, 2, 1, 2011);

        $r14 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(35);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r13, $r14);

        return;
    }

    public void testTimeOfDayWithStartTime() throws java.lang.Exception
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest r0;
        java.util.Date r1, $r10, $r12, $r14;
        java.util.List r5;
        org.quartz.TimeOfDay $r6, $r7;
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl $r8;
        org.quartz.DateBuilder$IntervalUnit $r9;
        int $i0;
        java.lang.Object $r11, $r13, $r15;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest;

        r1 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(0, 0, 0, 1, 1, 2011);

        $r6 = new org.quartz.TimeOfDay;

        specialinvoke $r6.<org.quartz.TimeOfDay: void <init>(int,int,int)>(8, 0, 0);

        $r7 = new org.quartz.TimeOfDay;

        specialinvoke $r7.<org.quartz.TimeOfDay: void <init>(int,int,int)>(17, 0, 0);

        $r8 = new org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        specialinvoke $r8.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void <init>()>();

        virtualinvoke $r8.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setStartTime(java.util.Date)>(r1);

        virtualinvoke $r8.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setStartTimeOfDay(org.quartz.TimeOfDay)>($r6);

        virtualinvoke $r8.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setEndTimeOfDay(org.quartz.TimeOfDay)>($r7);

        $r9 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit MINUTE>;

        virtualinvoke $r8.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)>($r9);

        virtualinvoke $r8.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatInterval(int)>(60);

        r5 = staticinvoke <org.quartz.TriggerUtils: java.util.List computeFireTimes(org.quartz.spi.OperableTrigger,org.quartz.Calendar,int)>($r8, null, 48);

        $i0 = interfaceinvoke r5.<java.util.List: int size()>();

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(48, $i0);

        $r10 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(8, 0, 0, 1, 1, 2011);

        $r11 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r11);

        $r12 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(17, 0, 0, 1, 1, 2011);

        $r13 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(9);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r12, $r13);

        $r14 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(15, 0, 0, 5, 1, 2011);

        $r15 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(47);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r14, $r15);

        return;
    }

    public void testTimeOfDayWithEndTime() throws java.lang.Exception
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest r0;
        java.util.Date r1, r2, $r11, $r13, $r15;
        java.util.List r6;
        org.quartz.TimeOfDay $r7, $r8;
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl $r9;
        org.quartz.DateBuilder$IntervalUnit $r10;
        int $i0;
        java.lang.Object $r12, $r14, $r16;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest;

        r1 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(0, 0, 0, 1, 1, 2011);

        r2 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(0, 0, 0, 4, 1, 2011);

        $r7 = new org.quartz.TimeOfDay;

        specialinvoke $r7.<org.quartz.TimeOfDay: void <init>(int,int,int)>(8, 0, 0);

        $r8 = new org.quartz.TimeOfDay;

        specialinvoke $r8.<org.quartz.TimeOfDay: void <init>(int,int,int)>(17, 0, 0);

        $r9 = new org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        specialinvoke $r9.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void <init>()>();

        virtualinvoke $r9.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setStartTime(java.util.Date)>(r1);

        virtualinvoke $r9.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setEndTime(java.util.Date)>(r2);

        virtualinvoke $r9.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setStartTimeOfDay(org.quartz.TimeOfDay)>($r7);

        virtualinvoke $r9.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setEndTimeOfDay(org.quartz.TimeOfDay)>($r8);

        $r10 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit MINUTE>;

        virtualinvoke $r9.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)>($r10);

        virtualinvoke $r9.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatInterval(int)>(60);

        r6 = staticinvoke <org.quartz.TriggerUtils: java.util.List computeFireTimes(org.quartz.spi.OperableTrigger,org.quartz.Calendar,int)>($r9, null, 48);

        $i0 = interfaceinvoke r6.<java.util.List: int size()>();

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(30, $i0);

        $r11 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(8, 0, 0, 1, 1, 2011);

        $r12 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r11, $r12);

        $r13 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(17, 0, 0, 1, 1, 2011);

        $r14 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(9);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r13, $r14);

        $r15 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(17, 0, 0, 3, 1, 2011);

        $r16 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(29);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r15, $r16);

        return;
    }

    public void testTimeOfDayWithEndTime2() throws java.lang.Exception
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest r0;
        java.util.Date r1, $r10, $r12;
        java.util.List r5;
        org.quartz.TimeOfDay $r6, $r7;
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl $r8;
        org.quartz.DateBuilder$IntervalUnit $r9;
        int $i0;
        java.lang.Object $r11, $r13;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest;

        r1 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(0, 0, 0, 1, 1, 2011);

        $r6 = new org.quartz.TimeOfDay;

        specialinvoke $r6.<org.quartz.TimeOfDay: void <init>(int,int,int)>(8, 23, 0);

        $r7 = new org.quartz.TimeOfDay;

        specialinvoke $r7.<org.quartz.TimeOfDay: void <init>(int,int,int)>(23, 59, 59);

        $r8 = new org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        specialinvoke $r8.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void <init>()>();

        virtualinvoke $r8.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setStartTime(java.util.Date)>(r1);

        virtualinvoke $r8.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setStartTimeOfDay(org.quartz.TimeOfDay)>($r6);

        virtualinvoke $r8.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setEndTimeOfDay(org.quartz.TimeOfDay)>($r7);

        $r9 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit MINUTE>;

        virtualinvoke $r8.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)>($r9);

        virtualinvoke $r8.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatInterval(int)>(60);

        r5 = staticinvoke <org.quartz.TriggerUtils: java.util.List computeFireTimes(org.quartz.spi.OperableTrigger,org.quartz.Calendar,int)>($r8, null, 48);

        $i0 = interfaceinvoke r5.<java.util.List: int size()>();

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(48, $i0);

        $r10 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(8, 23, 0, 1, 1, 2011);

        $r11 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r11);

        $r12 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(23, 23, 0, 3, 1, 2011);

        $r13 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(47);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r12, $r13);

        return;
    }

    public void testAllDaysOfTheWeek() throws java.lang.Exception
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest r0;
        java.util.Set r1;
        java.util.Date r2, $r11, $r13, $r15;
        java.util.List r6;
        org.quartz.TimeOfDay $r7, $r8;
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl $r9;
        org.quartz.DateBuilder$IntervalUnit $r10;
        int $i0;
        java.lang.Object $r12, $r14, $r16;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest;

        r1 = <org.quartz.DailyTimeIntervalScheduleBuilder: java.util.Set ALL_DAYS_OF_THE_WEEK>;

        r2 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(0, 0, 0, 1, 1, 2011);

        $r7 = new org.quartz.TimeOfDay;

        specialinvoke $r7.<org.quartz.TimeOfDay: void <init>(int,int,int)>(8, 0, 0);

        $r8 = new org.quartz.TimeOfDay;

        specialinvoke $r8.<org.quartz.TimeOfDay: void <init>(int,int,int)>(17, 0, 0);

        $r9 = new org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        specialinvoke $r9.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void <init>()>();

        virtualinvoke $r9.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setStartTime(java.util.Date)>(r2);

        virtualinvoke $r9.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setStartTimeOfDay(org.quartz.TimeOfDay)>($r7);

        virtualinvoke $r9.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setEndTimeOfDay(org.quartz.TimeOfDay)>($r8);

        virtualinvoke $r9.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setDaysOfWeek(java.util.Set)>(r1);

        $r10 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit MINUTE>;

        virtualinvoke $r9.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)>($r10);

        virtualinvoke $r9.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatInterval(int)>(60);

        r6 = staticinvoke <org.quartz.TriggerUtils: java.util.List computeFireTimes(org.quartz.spi.OperableTrigger,org.quartz.Calendar,int)>($r9, null, 48);

        $i0 = interfaceinvoke r6.<java.util.List: int size()>();

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(48, $i0);

        $r11 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(8, 0, 0, 1, 1, 2011);

        $r12 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r11, $r12);

        $r13 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(17, 0, 0, 1, 1, 2011);

        $r14 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(9);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r13, $r14);

        $r15 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(15, 0, 0, 5, 1, 2011);

        $r16 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(47);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r15, $r16);

        return;
    }

    public void testMonThroughFri() throws java.lang.Exception
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest r0;
        java.util.Set r1;
        java.util.Date r2, $r11, $r14, $r15, $r18, $r19, $r22;
        java.util.List r6;
        org.quartz.TimeOfDay $r7, $r8;
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl $r9;
        org.quartz.DateBuilder$IntervalUnit $r10;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r12, $r13, $r16, $r17, $r20, $r21;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest;

        r1 = <org.quartz.DailyTimeIntervalScheduleBuilder: java.util.Set MONDAY_THROUGH_FRIDAY>;

        r2 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(0, 0, 0, 1, 1, 2011);

        $r7 = new org.quartz.TimeOfDay;

        specialinvoke $r7.<org.quartz.TimeOfDay: void <init>(int,int,int)>(8, 0, 0);

        $r8 = new org.quartz.TimeOfDay;

        specialinvoke $r8.<org.quartz.TimeOfDay: void <init>(int,int,int)>(17, 0, 0);

        $r9 = new org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        specialinvoke $r9.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void <init>()>();

        virtualinvoke $r9.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setStartTime(java.util.Date)>(r2);

        virtualinvoke $r9.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setStartTimeOfDay(org.quartz.TimeOfDay)>($r7);

        virtualinvoke $r9.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setEndTimeOfDay(org.quartz.TimeOfDay)>($r8);

        virtualinvoke $r9.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setDaysOfWeek(java.util.Set)>(r1);

        $r10 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit MINUTE>;

        virtualinvoke $r9.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)>($r10);

        virtualinvoke $r9.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatInterval(int)>(60);

        r6 = staticinvoke <org.quartz.TriggerUtils: java.util.List computeFireTimes(org.quartz.spi.OperableTrigger,org.quartz.Calendar,int)>($r9, null, 48);

        $i0 = interfaceinvoke r6.<java.util.List: int size()>();

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(48, $i0);

        $r11 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(8, 0, 0, 3, 1, 2011);

        $r12 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r11, $r12);

        $r13 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(0);

        $r14 = (java.util.Date) $r13;

        $i1 = specialinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest: int getDayOfWeek(java.util.Date)>($r14);

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(2, $i1);

        $r15 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(8, 0, 0, 4, 1, 2011);

        $r16 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(10);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r15, $r16);

        $r17 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(10);

        $r18 = (java.util.Date) $r17;

        $i2 = specialinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest: int getDayOfWeek(java.util.Date)>($r18);

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(3, $i2);

        $r19 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(15, 0, 0, 7, 1, 2011);

        $r20 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(47);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r19, $r20);

        $r21 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(47);

        $r22 = (java.util.Date) $r21;

        $i3 = specialinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest: int getDayOfWeek(java.util.Date)>($r22);

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(6, $i3);

        return;
    }

    public void testSatAndSun() throws java.lang.Exception
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest r0;
        java.util.Set r1;
        java.util.Date r2, $r11, $r14, $r15, $r18, $r19, $r22;
        java.util.List r6;
        org.quartz.TimeOfDay $r7, $r8;
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl $r9;
        org.quartz.DateBuilder$IntervalUnit $r10;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r12, $r13, $r16, $r17, $r20, $r21;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest;

        r1 = <org.quartz.DailyTimeIntervalScheduleBuilder: java.util.Set SATURDAY_AND_SUNDAY>;

        r2 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(0, 0, 0, 1, 1, 2011);

        $r7 = new org.quartz.TimeOfDay;

        specialinvoke $r7.<org.quartz.TimeOfDay: void <init>(int,int,int)>(8, 0, 0);

        $r8 = new org.quartz.TimeOfDay;

        specialinvoke $r8.<org.quartz.TimeOfDay: void <init>(int,int,int)>(17, 0, 0);

        $r9 = new org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        specialinvoke $r9.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void <init>()>();

        virtualinvoke $r9.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setStartTime(java.util.Date)>(r2);

        virtualinvoke $r9.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setStartTimeOfDay(org.quartz.TimeOfDay)>($r7);

        virtualinvoke $r9.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setEndTimeOfDay(org.quartz.TimeOfDay)>($r8);

        virtualinvoke $r9.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setDaysOfWeek(java.util.Set)>(r1);

        $r10 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit MINUTE>;

        virtualinvoke $r9.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)>($r10);

        virtualinvoke $r9.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatInterval(int)>(60);

        r6 = staticinvoke <org.quartz.TriggerUtils: java.util.List computeFireTimes(org.quartz.spi.OperableTrigger,org.quartz.Calendar,int)>($r9, null, 48);

        $i0 = interfaceinvoke r6.<java.util.List: int size()>();

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(48, $i0);

        $r11 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(8, 0, 0, 1, 1, 2011);

        $r12 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r11, $r12);

        $r13 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(0);

        $r14 = (java.util.Date) $r13;

        $i1 = specialinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest: int getDayOfWeek(java.util.Date)>($r14);

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(7, $i1);

        $r15 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(8, 0, 0, 2, 1, 2011);

        $r16 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(10);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r15, $r16);

        $r17 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(10);

        $r18 = (java.util.Date) $r17;

        $i2 = specialinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest: int getDayOfWeek(java.util.Date)>($r18);

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(1, $i2);

        $r19 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(15, 0, 0, 15, 1, 2011);

        $r20 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(47);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r19, $r20);

        $r21 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(47);

        $r22 = (java.util.Date) $r21;

        $i3 = specialinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest: int getDayOfWeek(java.util.Date)>($r22);

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(7, $i3);

        return;
    }

    public void testMonOnly() throws java.lang.Exception
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest r0;
        java.util.Date r2, $r13, $r16, $r17, $r20, $r21, $r24;
        java.util.List r6;
        java.util.HashSet $r7;
        java.lang.Integer $r8;
        org.quartz.TimeOfDay $r9, $r10;
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl $r11;
        org.quartz.DateBuilder$IntervalUnit $r12;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r14, $r15, $r18, $r19, $r22, $r23;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest;

        $r7 = new java.util.HashSet;

        specialinvoke $r7.<java.util.HashSet: void <init>()>();

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>($r8);

        r2 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(0, 0, 0, 1, 1, 2011);

        $r9 = new org.quartz.TimeOfDay;

        specialinvoke $r9.<org.quartz.TimeOfDay: void <init>(int,int,int)>(8, 0, 0);

        $r10 = new org.quartz.TimeOfDay;

        specialinvoke $r10.<org.quartz.TimeOfDay: void <init>(int,int,int)>(17, 0, 0);

        $r11 = new org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        specialinvoke $r11.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void <init>()>();

        virtualinvoke $r11.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setStartTime(java.util.Date)>(r2);

        virtualinvoke $r11.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setStartTimeOfDay(org.quartz.TimeOfDay)>($r9);

        virtualinvoke $r11.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setEndTimeOfDay(org.quartz.TimeOfDay)>($r10);

        virtualinvoke $r11.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setDaysOfWeek(java.util.Set)>($r7);

        $r12 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit MINUTE>;

        virtualinvoke $r11.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)>($r12);

        virtualinvoke $r11.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatInterval(int)>(60);

        r6 = staticinvoke <org.quartz.TriggerUtils: java.util.List computeFireTimes(org.quartz.spi.OperableTrigger,org.quartz.Calendar,int)>($r11, null, 48);

        $i0 = interfaceinvoke r6.<java.util.List: int size()>();

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(48, $i0);

        $r13 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(8, 0, 0, 3, 1, 2011);

        $r14 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r13, $r14);

        $r15 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(0);

        $r16 = (java.util.Date) $r15;

        $i1 = specialinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest: int getDayOfWeek(java.util.Date)>($r16);

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(2, $i1);

        $r17 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(8, 0, 0, 10, 1, 2011);

        $r18 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(10);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r17, $r18);

        $r19 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(10);

        $r20 = (java.util.Date) $r19;

        $i2 = specialinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest: int getDayOfWeek(java.util.Date)>($r20);

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(2, $i2);

        $r21 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(15, 0, 0, 31, 1, 2011);

        $r22 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(47);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r21, $r22);

        $r23 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(47);

        $r24 = (java.util.Date) $r23;

        $i3 = specialinvoke r0.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest: int getDayOfWeek(java.util.Date)>($r24);

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(2, $i3);

        return;
    }

    private int getDayOfWeek(java.util.Date)
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest r0;
        java.util.Date r1;
        java.util.Calendar r2;
        int $i0;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest;

        r1 := @parameter0: java.util.Date;

        r2 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r2.<java.util.Calendar: void setTime(java.util.Date)>(r1);

        $i0 = virtualinvoke r2.<java.util.Calendar: int get(int)>(7);

        return $i0;
    }

    public void testTimeOfDayWithEndTimeOddInterval() throws java.lang.Exception
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest r0;
        java.util.Date r1, r2, $r11, $r13, $r15;
        java.util.List r6;
        org.quartz.TimeOfDay $r7, $r8;
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl $r9;
        org.quartz.DateBuilder$IntervalUnit $r10;
        int $i0;
        java.lang.Object $r12, $r14, $r16;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest;

        r1 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(0, 0, 0, 1, 1, 2011);

        r2 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(0, 0, 0, 4, 1, 2011);

        $r7 = new org.quartz.TimeOfDay;

        specialinvoke $r7.<org.quartz.TimeOfDay: void <init>(int,int,int)>(8, 0, 0);

        $r8 = new org.quartz.TimeOfDay;

        specialinvoke $r8.<org.quartz.TimeOfDay: void <init>(int,int,int)>(10, 0, 0);

        $r9 = new org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        specialinvoke $r9.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void <init>()>();

        virtualinvoke $r9.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setStartTime(java.util.Date)>(r1);

        virtualinvoke $r9.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setEndTime(java.util.Date)>(r2);

        virtualinvoke $r9.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setStartTimeOfDay(org.quartz.TimeOfDay)>($r7);

        virtualinvoke $r9.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setEndTimeOfDay(org.quartz.TimeOfDay)>($r8);

        $r10 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit MINUTE>;

        virtualinvoke $r9.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)>($r10);

        virtualinvoke $r9.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatInterval(int)>(23);

        r6 = staticinvoke <org.quartz.TriggerUtils: java.util.List computeFireTimes(org.quartz.spi.OperableTrigger,org.quartz.Calendar,int)>($r9, null, 48);

        $i0 = interfaceinvoke r6.<java.util.List: int size()>();

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(18, $i0);

        $r11 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(8, 0, 0, 1, 1, 2011);

        $r12 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r11, $r12);

        $r13 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(9, 55, 0, 1, 1, 2011);

        $r14 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(5);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r13, $r14);

        $r15 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(9, 55, 0, 3, 1, 2011);

        $r16 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(17);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r15, $r16);

        return;
    }

    public void testHourInterval() throws java.lang.Exception
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest r0;
        java.util.Date r1, r2, $r11, $r13;
        java.util.List r6;
        org.quartz.TimeOfDay $r7, $r8;
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl $r9;
        org.quartz.DateBuilder$IntervalUnit $r10;
        int $i0;
        java.lang.Object $r12, $r14;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest;

        r1 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(0, 0, 0, 1, 1, 2011);

        r2 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(13, 0, 0, 15, 1, 2011);

        $r7 = new org.quartz.TimeOfDay;

        specialinvoke $r7.<org.quartz.TimeOfDay: void <init>(int,int,int)>(8, 1, 15);

        $r8 = new org.quartz.TimeOfDay;

        specialinvoke $r8.<org.quartz.TimeOfDay: void <init>(int,int,int)>(16, 1, 15);

        $r9 = new org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        specialinvoke $r9.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void <init>()>();

        virtualinvoke $r9.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setStartTime(java.util.Date)>(r1);

        virtualinvoke $r9.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setStartTimeOfDay(org.quartz.TimeOfDay)>($r7);

        virtualinvoke $r9.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setEndTime(java.util.Date)>(r2);

        virtualinvoke $r9.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setEndTimeOfDay(org.quartz.TimeOfDay)>($r8);

        $r10 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit HOUR>;

        virtualinvoke $r9.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)>($r10);

        virtualinvoke $r9.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatInterval(int)>(2);

        r6 = staticinvoke <org.quartz.TriggerUtils: java.util.List computeFireTimes(org.quartz.spi.OperableTrigger,org.quartz.Calendar,int)>($r9, null, 48);

        $i0 = interfaceinvoke r6.<java.util.List: int size()>();

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(48, $i0);

        $r11 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(8, 1, 15, 1, 1, 2011);

        $r12 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r11, $r12);

        $r13 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(12, 1, 15, 10, 1, 2011);

        $r14 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(47);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r13, $r14);

        return;
    }

    public void testSecondInterval() throws java.lang.Exception
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest r0;
        java.util.Date r1, $r10, $r12;
        java.util.List r5;
        org.quartz.TimeOfDay $r6, $r7;
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl $r8;
        org.quartz.DateBuilder$IntervalUnit $r9;
        int $i0;
        java.lang.Object $r11, $r13;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest;

        r1 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(0, 0, 0, 1, 1, 2011);

        $r6 = new org.quartz.TimeOfDay;

        specialinvoke $r6.<org.quartz.TimeOfDay: void <init>(int,int,int)>(8, 0, 2);

        $r7 = new org.quartz.TimeOfDay;

        specialinvoke $r7.<org.quartz.TimeOfDay: void <init>(int,int,int)>(13, 30, 0);

        $r8 = new org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        specialinvoke $r8.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void <init>()>();

        virtualinvoke $r8.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setStartTime(java.util.Date)>(r1);

        virtualinvoke $r8.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setStartTimeOfDay(org.quartz.TimeOfDay)>($r6);

        virtualinvoke $r8.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setEndTimeOfDay(org.quartz.TimeOfDay)>($r7);

        $r9 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit SECOND>;

        virtualinvoke $r8.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)>($r9);

        virtualinvoke $r8.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatInterval(int)>(72);

        r5 = staticinvoke <org.quartz.TriggerUtils: java.util.List computeFireTimes(org.quartz.spi.OperableTrigger,org.quartz.Calendar,int)>($r8, null, 48);

        $i0 = interfaceinvoke r5.<java.util.List: int size()>();

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(48, $i0);

        $r10 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(8, 0, 2, 1, 1, 2011);

        $r11 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r11);

        $r12 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(8, 56, 26, 1, 1, 2011);

        $r13 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(47);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r12, $r13);

        return;
    }

    public void testRepeatCountInf() throws java.lang.Exception
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest r0;
        java.util.Date r1, $r10, $r12;
        java.util.List r5;
        org.quartz.TimeOfDay $r6, $r7;
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl $r8;
        org.quartz.DateBuilder$IntervalUnit $r9;
        int $i0;
        java.lang.Object $r11, $r13;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest;

        r1 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(0, 0, 0, 1, 1, 2011);

        $r6 = new org.quartz.TimeOfDay;

        specialinvoke $r6.<org.quartz.TimeOfDay: void <init>(int,int,int)>(8, 0, 0);

        $r7 = new org.quartz.TimeOfDay;

        specialinvoke $r7.<org.quartz.TimeOfDay: void <init>(int,int,int)>(11, 0, 0);

        $r8 = new org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        specialinvoke $r8.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void <init>()>();

        virtualinvoke $r8.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setStartTime(java.util.Date)>(r1);

        virtualinvoke $r8.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setStartTimeOfDay(org.quartz.TimeOfDay)>($r6);

        virtualinvoke $r8.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setEndTimeOfDay(org.quartz.TimeOfDay)>($r7);

        $r9 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit MINUTE>;

        virtualinvoke $r8.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)>($r9);

        virtualinvoke $r8.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatInterval(int)>(72);

        virtualinvoke $r8.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatCount(int)>(-1);

        r5 = staticinvoke <org.quartz.TriggerUtils: java.util.List computeFireTimes(org.quartz.spi.OperableTrigger,org.quartz.Calendar,int)>($r8, null, 48);

        $i0 = interfaceinvoke r5.<java.util.List: int size()>();

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(48, $i0);

        $r10 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(8, 0, 0, 1, 1, 2011);

        $r11 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r11);

        $r12 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(10, 24, 0, 16, 1, 2011);

        $r13 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(47);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r12, $r13);

        return;
    }

    public void testRepeatCount() throws java.lang.Exception
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest r0;
        java.util.Date r1, $r10, $r12;
        java.util.List r5;
        org.quartz.TimeOfDay $r6, $r7;
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl $r8;
        org.quartz.DateBuilder$IntervalUnit $r9;
        int $i0;
        java.lang.Object $r11, $r13;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest;

        r1 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(0, 0, 0, 1, 1, 2011);

        $r6 = new org.quartz.TimeOfDay;

        specialinvoke $r6.<org.quartz.TimeOfDay: void <init>(int,int,int)>(8, 0, 0);

        $r7 = new org.quartz.TimeOfDay;

        specialinvoke $r7.<org.quartz.TimeOfDay: void <init>(int,int,int)>(11, 0, 0);

        $r8 = new org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        specialinvoke $r8.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void <init>()>();

        virtualinvoke $r8.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setStartTime(java.util.Date)>(r1);

        virtualinvoke $r8.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setStartTimeOfDay(org.quartz.TimeOfDay)>($r6);

        virtualinvoke $r8.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setEndTimeOfDay(org.quartz.TimeOfDay)>($r7);

        $r9 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit MINUTE>;

        virtualinvoke $r8.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)>($r9);

        virtualinvoke $r8.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatInterval(int)>(72);

        virtualinvoke $r8.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatCount(int)>(7);

        r5 = staticinvoke <org.quartz.TriggerUtils: java.util.List computeFireTimes(org.quartz.spi.OperableTrigger,org.quartz.Calendar,int)>($r8, null, 48);

        $i0 = interfaceinvoke r5.<java.util.List: int size()>();

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(8, $i0);

        $r10 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(8, 0, 0, 1, 1, 2011);

        $r11 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r11);

        $r12 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(9, 12, 0, 3, 1, 2011);

        $r13 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(7);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r12, $r13);

        return;
    }

    public void testRepeatCount0() throws java.lang.Exception
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest r0;
        java.util.Date r1, $r10;
        java.util.List r5;
        org.quartz.TimeOfDay $r6, $r7;
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl $r8;
        org.quartz.DateBuilder$IntervalUnit $r9;
        int $i0;
        java.lang.Object $r11;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest;

        r1 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(0, 0, 0, 1, 1, 2011);

        $r6 = new org.quartz.TimeOfDay;

        specialinvoke $r6.<org.quartz.TimeOfDay: void <init>(int,int,int)>(8, 0, 0);

        $r7 = new org.quartz.TimeOfDay;

        specialinvoke $r7.<org.quartz.TimeOfDay: void <init>(int,int,int)>(11, 0, 0);

        $r8 = new org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        specialinvoke $r8.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void <init>()>();

        virtualinvoke $r8.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setStartTime(java.util.Date)>(r1);

        virtualinvoke $r8.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setStartTimeOfDay(org.quartz.TimeOfDay)>($r6);

        virtualinvoke $r8.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setEndTimeOfDay(org.quartz.TimeOfDay)>($r7);

        $r9 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit MINUTE>;

        virtualinvoke $r8.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)>($r9);

        virtualinvoke $r8.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatInterval(int)>(72);

        virtualinvoke $r8.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatCount(int)>(0);

        r5 = staticinvoke <org.quartz.TriggerUtils: java.util.List computeFireTimes(org.quartz.spi.OperableTrigger,org.quartz.Calendar,int)>($r8, null, 48);

        $i0 = interfaceinvoke r5.<java.util.List: int size()>();

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(1, $i0);

        $r10 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(8, 0, 0, 1, 1, 2011);

        $r11 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r11);

        return;
    }

    public void testGetFireTime() throws java.lang.Exception
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest r0;
        java.util.Date r1, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29;
        org.quartz.TimeOfDay $r5, $r6;
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl $r7;
        org.quartz.DateBuilder$IntervalUnit $r8;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest;

        r1 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(0, 0, 0, 1, 1, 2011);

        $r5 = new org.quartz.TimeOfDay;

        specialinvoke $r5.<org.quartz.TimeOfDay: void <init>(int,int,int)>(8, 0, 0);

        $r6 = new org.quartz.TimeOfDay;

        specialinvoke $r6.<org.quartz.TimeOfDay: void <init>(int,int,int)>(13, 0, 0);

        $r7 = new org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        specialinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void <init>()>();

        virtualinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setStartTime(java.util.Date)>(r1);

        virtualinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setStartTimeOfDay(org.quartz.TimeOfDay)>($r5);

        virtualinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setEndTimeOfDay(org.quartz.TimeOfDay)>($r6);

        $r8 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit HOUR>;

        virtualinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)>($r8);

        virtualinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatInterval(int)>(1);

        $r9 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(8, 0, 0, 1, 1, 2011);

        $r10 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(0, 0, 0, 1, 1, 2011);

        $r11 = virtualinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>($r10);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r9, $r11);

        $r12 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(8, 0, 0, 1, 1, 2011);

        $r13 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(7, 0, 0, 1, 1, 2011);

        $r14 = virtualinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>($r13);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r12, $r14);

        $r15 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(8, 0, 0, 1, 1, 2011);

        $r16 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(7, 59, 59, 1, 1, 2011);

        $r17 = virtualinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>($r16);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r15, $r17);

        $r18 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(9, 0, 0, 1, 1, 2011);

        $r19 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(8, 0, 0, 1, 1, 2011);

        $r20 = virtualinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>($r19);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r18, $r20);

        $r21 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(10, 0, 0, 1, 1, 2011);

        $r22 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(9, 0, 0, 1, 1, 2011);

        $r23 = virtualinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>($r22);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r21, $r23);

        $r24 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(13, 0, 0, 1, 1, 2011);

        $r25 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(12, 59, 59, 1, 1, 2011);

        $r26 = virtualinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>($r25);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r24, $r26);

        $r27 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(8, 0, 0, 2, 1, 2011);

        $r28 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(13, 0, 0, 1, 1, 2011);

        $r29 = virtualinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>($r28);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r27, $r29);

        return;
    }

    public void testGetFireTimeWithDateBeforeStartTime() throws java.lang.Exception
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest r0;
        java.util.Date r1, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35;
        org.quartz.TimeOfDay $r5, $r6;
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl $r7;
        org.quartz.DateBuilder$IntervalUnit $r8;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest;

        r1 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(0, 0, 0, 1, 1, 2012);

        $r5 = new org.quartz.TimeOfDay;

        specialinvoke $r5.<org.quartz.TimeOfDay: void <init>(int,int,int)>(8, 0, 0);

        $r6 = new org.quartz.TimeOfDay;

        specialinvoke $r6.<org.quartz.TimeOfDay: void <init>(int,int,int)>(13, 0, 0);

        $r7 = new org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        specialinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void <init>()>();

        virtualinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setStartTime(java.util.Date)>(r1);

        virtualinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setStartTimeOfDay(org.quartz.TimeOfDay)>($r5);

        virtualinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setEndTimeOfDay(org.quartz.TimeOfDay)>($r6);

        $r8 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit HOUR>;

        virtualinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)>($r8);

        virtualinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatInterval(int)>(1);

        $r9 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(8, 0, 0, 1, 1, 2012);

        $r10 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(0, 0, 0, 1, 1, 2011);

        $r11 = virtualinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>($r10);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r9, $r11);

        $r12 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(8, 0, 0, 1, 1, 2012);

        $r13 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(7, 0, 0, 1, 1, 2011);

        $r14 = virtualinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>($r13);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r12, $r14);

        $r15 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(8, 0, 0, 1, 1, 2012);

        $r16 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(7, 59, 59, 1, 1, 2011);

        $r17 = virtualinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>($r16);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r15, $r17);

        $r18 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(8, 0, 0, 1, 1, 2012);

        $r19 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(8, 0, 0, 1, 1, 2011);

        $r20 = virtualinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>($r19);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r18, $r20);

        $r21 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(8, 0, 0, 1, 1, 2012);

        $r22 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(9, 0, 0, 1, 1, 2011);

        $r23 = virtualinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>($r22);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r21, $r23);

        $r24 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(8, 0, 0, 1, 1, 2012);

        $r25 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(12, 59, 59, 1, 1, 2011);

        $r26 = virtualinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>($r25);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r24, $r26);

        $r27 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(8, 0, 0, 1, 1, 2012);

        $r28 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(13, 0, 0, 1, 1, 2011);

        $r29 = virtualinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>($r28);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r27, $r29);

        $r30 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(8, 0, 0, 1, 1, 2012);

        $r31 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(0, 0, 0, 1, 1, 2012);

        $r32 = virtualinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>($r31);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r30, $r32);

        $r33 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(8, 0, 0, 2, 1, 2012);

        $r34 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(13, 0, 0, 1, 1, 2012);

        $r35 = virtualinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>($r34);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r33, $r35);

        return;
    }

    public void testGetFireTimeWhenStartTimeAndTimeOfDayIsSame() throws java.lang.Exception
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest r0;
        java.util.Date r1, $r9, $r10, $r11;
        org.quartz.TimeOfDay $r5, $r6;
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl $r7;
        org.quartz.DateBuilder$IntervalUnit $r8;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest;

        r1 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(8, 0, 0, 1, 1, 2012);

        $r5 = new org.quartz.TimeOfDay;

        specialinvoke $r5.<org.quartz.TimeOfDay: void <init>(int,int,int)>(8, 0, 0);

        $r6 = new org.quartz.TimeOfDay;

        specialinvoke $r6.<org.quartz.TimeOfDay: void <init>(int,int,int)>(13, 0, 0);

        $r7 = new org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        specialinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void <init>()>();

        virtualinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setStartTime(java.util.Date)>(r1);

        virtualinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setStartTimeOfDay(org.quartz.TimeOfDay)>($r5);

        virtualinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setEndTimeOfDay(org.quartz.TimeOfDay)>($r6);

        $r8 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit HOUR>;

        virtualinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatIntervalUnit(org.quartz.DateBuilder$IntervalUnit)>($r8);

        virtualinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void setRepeatInterval(int)>(1);

        $r9 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(8, 0, 0, 1, 1, 2012);

        $r10 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(0, 0, 0, 1, 1, 2012);

        $r11 = virtualinvoke $r7.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date getFireTimeAfter(java.util.Date)>($r10);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r9, $r11);

        return;
    }

    public void testExtraConstructors() throws java.lang.Exception
    {
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest r0;
        org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl $r1, $r19;
        java.util.Date $r2, $r10, $r11, $r12, $r20, $r28, $r29, $r30;
        org.quartz.TimeOfDay $r3, $r4, $r13, $r14, $r15, $r16, $r21, $r22, $r31, $r32, $r33, $r34;
        org.quartz.DateBuilder$IntervalUnit $r5, $r17, $r18, $r23, $r35, $r36;
        java.lang.String $r6, $r7, $r8, $r9, $r24, $r25, $r26, $r27;
        int $i0, $i1;

        r0 := @this: org.quartz.impl.triggers.DailyTimeIntervalTriggerImplTest;

        $r1 = new org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        $r2 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(8, 0, 0, 1, 1, 2012);

        $r3 = new org.quartz.TimeOfDay;

        specialinvoke $r3.<org.quartz.TimeOfDay: void <init>(int,int,int)>(8, 0, 0);

        $r4 = new org.quartz.TimeOfDay;

        specialinvoke $r4.<org.quartz.TimeOfDay: void <init>(int,int,int)>(17, 0, 0);

        $r5 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit HOUR>;

        specialinvoke $r1.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Date,java.util.Date,org.quartz.TimeOfDay,org.quartz.TimeOfDay,org.quartz.DateBuilder$IntervalUnit,int)>("triggerName", "triggerGroup", "jobName", "jobGroup", $r2, null, $r3, $r4, $r5, 1);

        $r6 = virtualinvoke $r1.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.lang.String getName()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.String)>("triggerName", $r6);

        $r7 = virtualinvoke $r1.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.lang.String getGroup()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.String)>("triggerGroup", $r7);

        $r8 = virtualinvoke $r1.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.lang.String getJobName()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.String)>("jobName", $r8);

        $r9 = virtualinvoke $r1.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.lang.String getJobGroup()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.String)>("jobGroup", $r9);

        $r10 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(8, 0, 0, 1, 1, 2012);

        $r11 = virtualinvoke $r1.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date getStartTime()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r11);

        $r12 = virtualinvoke $r1.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date getEndTime()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $r12);

        $r13 = new org.quartz.TimeOfDay;

        specialinvoke $r13.<org.quartz.TimeOfDay: void <init>(int,int,int)>(8, 0, 0);

        $r14 = virtualinvoke $r1.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: org.quartz.TimeOfDay getStartTimeOfDay()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r13, $r14);

        $r15 = new org.quartz.TimeOfDay;

        specialinvoke $r15.<org.quartz.TimeOfDay: void <init>(int,int,int)>(17, 0, 0);

        $r16 = virtualinvoke $r1.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: org.quartz.TimeOfDay getEndTimeOfDay()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r15, $r16);

        $r17 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit HOUR>;

        $r18 = virtualinvoke $r1.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: org.quartz.DateBuilder$IntervalUnit getRepeatIntervalUnit()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r17, $r18);

        $i0 = virtualinvoke $r1.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: int getRepeatInterval()>();

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(1, $i0);

        $r19 = new org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl;

        $r20 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(8, 0, 0, 1, 1, 2012);

        $r21 = new org.quartz.TimeOfDay;

        specialinvoke $r21.<org.quartz.TimeOfDay: void <init>(int,int,int)>(8, 0, 0);

        $r22 = new org.quartz.TimeOfDay;

        specialinvoke $r22.<org.quartz.TimeOfDay: void <init>(int,int,int)>(17, 0, 0);

        $r23 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit HOUR>;

        specialinvoke $r19.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: void <init>(java.lang.String,java.lang.String,java.util.Date,java.util.Date,org.quartz.TimeOfDay,org.quartz.TimeOfDay,org.quartz.DateBuilder$IntervalUnit,int)>("triggerName", "triggerGroup", $r20, null, $r21, $r22, $r23, 1);

        $r24 = virtualinvoke $r19.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.lang.String getName()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.String)>("triggerName", $r24);

        $r25 = virtualinvoke $r19.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.lang.String getGroup()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.String)>("triggerGroup", $r25);

        $r26 = virtualinvoke $r19.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.lang.String getJobName()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.String)>(null, $r26);

        $r27 = virtualinvoke $r19.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.lang.String getJobGroup()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.String)>("DEFAULT", $r27);

        $r28 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int,int,int,int)>(8, 0, 0, 1, 1, 2012);

        $r29 = virtualinvoke $r19.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date getStartTime()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r28, $r29);

        $r30 = virtualinvoke $r19.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: java.util.Date getEndTime()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $r30);

        $r31 = new org.quartz.TimeOfDay;

        specialinvoke $r31.<org.quartz.TimeOfDay: void <init>(int,int,int)>(8, 0, 0);

        $r32 = virtualinvoke $r19.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: org.quartz.TimeOfDay getStartTimeOfDay()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r31, $r32);

        $r33 = new org.quartz.TimeOfDay;

        specialinvoke $r33.<org.quartz.TimeOfDay: void <init>(int,int,int)>(17, 0, 0);

        $r34 = virtualinvoke $r19.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: org.quartz.TimeOfDay getEndTimeOfDay()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r33, $r34);

        $r35 = <org.quartz.DateBuilder$IntervalUnit: org.quartz.DateBuilder$IntervalUnit HOUR>;

        $r36 = virtualinvoke $r19.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: org.quartz.DateBuilder$IntervalUnit getRepeatIntervalUnit()>();

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r35, $r36);

        $i1 = virtualinvoke $r19.<org.quartz.impl.triggers.DailyTimeIntervalTriggerImpl: int getRepeatInterval()>();

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(1, $i1);

        return;
    }
}
