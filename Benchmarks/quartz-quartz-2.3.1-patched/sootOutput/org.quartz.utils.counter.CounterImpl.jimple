public class org.quartz.utils.counter.CounterImpl extends java.lang.Object implements org.quartz.utils.counter.Counter, java.io.Serializable
{
    private static final long serialVersionUID;
    private java.util.concurrent.atomic.AtomicLong value;

    public void <init>()
    {
        org.quartz.utils.counter.CounterImpl r0;

        r0 := @this: org.quartz.utils.counter.CounterImpl;

        specialinvoke r0.<org.quartz.utils.counter.CounterImpl: void <init>(long)>(0L);

        return;
    }

    public void <init>(long)
    {
        org.quartz.utils.counter.CounterImpl r0;
        long l0;
        java.util.concurrent.atomic.AtomicLong $r1;

        r0 := @this: org.quartz.utils.counter.CounterImpl;

        l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(l0);

        r0.<org.quartz.utils.counter.CounterImpl: java.util.concurrent.atomic.AtomicLong value> = $r1;

        return;
    }

    public long increment()
    {
        org.quartz.utils.counter.CounterImpl r0;
        java.util.concurrent.atomic.AtomicLong $r1;
        long $l0;

        r0 := @this: org.quartz.utils.counter.CounterImpl;

        $r1 = r0.<org.quartz.utils.counter.CounterImpl: java.util.concurrent.atomic.AtomicLong value>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        return $l0;
    }

    public long decrement()
    {
        org.quartz.utils.counter.CounterImpl r0;
        java.util.concurrent.atomic.AtomicLong $r1;
        long $l0;

        r0 := @this: org.quartz.utils.counter.CounterImpl;

        $r1 = r0.<org.quartz.utils.counter.CounterImpl: java.util.concurrent.atomic.AtomicLong value>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long decrementAndGet()>();

        return $l0;
    }

    public long getAndSet(long)
    {
        org.quartz.utils.counter.CounterImpl r0;
        long l0, $l1;
        java.util.concurrent.atomic.AtomicLong $r1;

        r0 := @this: org.quartz.utils.counter.CounterImpl;

        l0 := @parameter0: long;

        $r1 = r0.<org.quartz.utils.counter.CounterImpl: java.util.concurrent.atomic.AtomicLong value>;

        $l1 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long getAndSet(long)>(l0);

        return $l1;
    }

    public long getValue()
    {
        org.quartz.utils.counter.CounterImpl r0;
        java.util.concurrent.atomic.AtomicLong $r1;
        long $l0;

        r0 := @this: org.quartz.utils.counter.CounterImpl;

        $r1 = r0.<org.quartz.utils.counter.CounterImpl: java.util.concurrent.atomic.AtomicLong value>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        return $l0;
    }

    public long increment(long)
    {
        org.quartz.utils.counter.CounterImpl r0;
        long l0, $l1;
        java.util.concurrent.atomic.AtomicLong $r1;

        r0 := @this: org.quartz.utils.counter.CounterImpl;

        l0 := @parameter0: long;

        $r1 = r0.<org.quartz.utils.counter.CounterImpl: java.util.concurrent.atomic.AtomicLong value>;

        $l1 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>(l0);

        return $l1;
    }

    public long decrement(long)
    {
        org.quartz.utils.counter.CounterImpl r0;
        long l0, $l1, $l2;
        java.util.concurrent.atomic.AtomicLong $r1;

        r0 := @this: org.quartz.utils.counter.CounterImpl;

        l0 := @parameter0: long;

        $r1 = r0.<org.quartz.utils.counter.CounterImpl: java.util.concurrent.atomic.AtomicLong value>;

        $l1 = l0 * -1L;

        $l2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>($l1);

        return $l2;
    }

    public void setValue(long)
    {
        org.quartz.utils.counter.CounterImpl r0;
        long l0;
        java.util.concurrent.atomic.AtomicLong $r1;

        r0 := @this: org.quartz.utils.counter.CounterImpl;

        l0 := @parameter0: long;

        $r1 = r0.<org.quartz.utils.counter.CounterImpl: java.util.concurrent.atomic.AtomicLong value>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void set(long)>(l0);

        return;
    }

    public static void <clinit>()
    {
        <org.quartz.utils.counter.CounterImpl: long serialVersionUID> = -1529134342654953984L;

        return;
    }
}
