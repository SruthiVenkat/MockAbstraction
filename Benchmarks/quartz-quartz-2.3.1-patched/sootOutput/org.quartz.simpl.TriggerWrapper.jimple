class org.quartz.simpl.TriggerWrapper extends java.lang.Object
{
    public final org.quartz.TriggerKey key;
    public final org.quartz.JobKey jobKey;
    public final org.quartz.spi.OperableTrigger trigger;
    public int state;
    public static final int STATE_WAITING;
    public static final int STATE_ACQUIRED;
    public static final int STATE_EXECUTING;
    public static final int STATE_COMPLETE;
    public static final int STATE_PAUSED;
    public static final int STATE_BLOCKED;
    public static final int STATE_PAUSED_BLOCKED;
    public static final int STATE_ERROR;

    void <init>(org.quartz.spi.OperableTrigger)
    {
        org.quartz.simpl.TriggerWrapper r0;
        org.quartz.spi.OperableTrigger r1;
        org.quartz.TriggerKey $r2;
        org.quartz.JobKey $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.quartz.simpl.TriggerWrapper;

        r1 := @parameter0: org.quartz.spi.OperableTrigger;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.quartz.simpl.TriggerWrapper: int state> = 0;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Trigger cannot be null!");

        throw $r4;

     label1:
        r0.<org.quartz.simpl.TriggerWrapper: org.quartz.spi.OperableTrigger trigger> = r1;

        $r2 = interfaceinvoke r1.<org.quartz.spi.OperableTrigger: org.quartz.TriggerKey getKey()>();

        r0.<org.quartz.simpl.TriggerWrapper: org.quartz.TriggerKey key> = $r2;

        $r3 = interfaceinvoke r1.<org.quartz.spi.OperableTrigger: org.quartz.JobKey getJobKey()>();

        r0.<org.quartz.simpl.TriggerWrapper: org.quartz.JobKey jobKey> = $r3;

        return;
    }

    public boolean equals(java.lang.Object)
    {
        org.quartz.simpl.TriggerWrapper r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        org.quartz.TriggerKey $r3, $r4;

        r0 := @this: org.quartz.simpl.TriggerWrapper;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.quartz.simpl.TriggerWrapper;

        if $z0 == 0 goto label1;

        r2 = (org.quartz.simpl.TriggerWrapper) r1;

        $r4 = r2.<org.quartz.simpl.TriggerWrapper: org.quartz.TriggerKey key>;

        $r3 = r0.<org.quartz.simpl.TriggerWrapper: org.quartz.TriggerKey key>;

        $z1 = virtualinvoke $r4.<org.quartz.TriggerKey: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public int hashCode()
    {
        org.quartz.simpl.TriggerWrapper r0;
        org.quartz.TriggerKey $r1;
        int $i0;

        r0 := @this: org.quartz.simpl.TriggerWrapper;

        $r1 = r0.<org.quartz.simpl.TriggerWrapper: org.quartz.TriggerKey key>;

        $i0 = virtualinvoke $r1.<org.quartz.TriggerKey: int hashCode()>();

        return $i0;
    }

    public org.quartz.spi.OperableTrigger getTrigger()
    {
        org.quartz.simpl.TriggerWrapper r0;
        org.quartz.spi.OperableTrigger $r1;

        r0 := @this: org.quartz.simpl.TriggerWrapper;

        $r1 = r0.<org.quartz.simpl.TriggerWrapper: org.quartz.spi.OperableTrigger trigger>;

        return $r1;
    }

    public static void <clinit>()
    {
        <org.quartz.simpl.TriggerWrapper: int STATE_ERROR> = 7;

        <org.quartz.simpl.TriggerWrapper: int STATE_PAUSED_BLOCKED> = 6;

        <org.quartz.simpl.TriggerWrapper: int STATE_BLOCKED> = 5;

        <org.quartz.simpl.TriggerWrapper: int STATE_PAUSED> = 4;

        <org.quartz.simpl.TriggerWrapper: int STATE_COMPLETE> = 3;

        <org.quartz.simpl.TriggerWrapper: int STATE_EXECUTING> = 2;

        <org.quartz.simpl.TriggerWrapper: int STATE_ACQUIRED> = 1;

        <org.quartz.simpl.TriggerWrapper: int STATE_WAITING> = 0;

        return;
    }
}
