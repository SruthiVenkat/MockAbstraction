class org.quartz.utils.DirtyFlagMap$DirtyFlagMapEntrySet extends org.quartz.utils.DirtyFlagMap$DirtyFlagSet
{
    final org.quartz.utils.DirtyFlagMap this$0;

    public void <init>(org.quartz.utils.DirtyFlagMap, java.util.Set)
    {
        org.quartz.utils.DirtyFlagMap$DirtyFlagMapEntrySet r0;
        org.quartz.utils.DirtyFlagMap r1;
        java.util.Set r2;

        r0 := @this: org.quartz.utils.DirtyFlagMap$DirtyFlagMapEntrySet;

        r1 := @parameter0: org.quartz.utils.DirtyFlagMap;

        r2 := @parameter1: java.util.Set;

        r0.<org.quartz.utils.DirtyFlagMap$DirtyFlagMapEntrySet: org.quartz.utils.DirtyFlagMap this$0> = r1;

        specialinvoke r0.<org.quartz.utils.DirtyFlagMap$DirtyFlagSet: void <init>(org.quartz.utils.DirtyFlagMap,java.util.Set)>(r1, r2);

        return;
    }

    public java.util.Iterator iterator()
    {
        org.quartz.utils.DirtyFlagMap$DirtyFlagMapEntrySet r0;
        org.quartz.utils.DirtyFlagMap$DirtyFlagMapEntryIterator $r1;
        org.quartz.utils.DirtyFlagMap $r2;
        java.util.Set $r3;
        java.util.Iterator $r4;

        r0 := @this: org.quartz.utils.DirtyFlagMap$DirtyFlagMapEntrySet;

        $r1 = new org.quartz.utils.DirtyFlagMap$DirtyFlagMapEntryIterator;

        $r2 = r0.<org.quartz.utils.DirtyFlagMap$DirtyFlagMapEntrySet: org.quartz.utils.DirtyFlagMap this$0>;

        $r3 = virtualinvoke r0.<org.quartz.utils.DirtyFlagMap$DirtyFlagMapEntrySet: java.util.Set getWrappedSet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

        specialinvoke $r1.<org.quartz.utils.DirtyFlagMap$DirtyFlagMapEntryIterator: void <init>(org.quartz.utils.DirtyFlagMap,java.util.Iterator)>($r2, $r4);

        return $r1;
    }

    public java.lang.Object[] toArray()
    {
        org.quartz.utils.DirtyFlagMap$DirtyFlagMapEntrySet r0;
        int $i0;
        java.lang.Object[] $r1, $r2;

        r0 := @this: org.quartz.utils.DirtyFlagMap$DirtyFlagMapEntrySet;

        $i0 = specialinvoke r0.<org.quartz.utils.DirtyFlagMap$DirtyFlagSet: int size()>();

        $r1 = newarray (java.lang.Object)[$i0];

        $r2 = virtualinvoke r0.<org.quartz.utils.DirtyFlagMap$DirtyFlagMapEntrySet: java.lang.Object[] toArray(java.lang.Object[])>($r1);

        return $r2;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        org.quartz.utils.DirtyFlagMap$DirtyFlagMapEntrySet r0;
        java.lang.Object[] r1, r2, $r10, $r12;
        int i0, $i1, $i2, i3;
        java.util.Iterator r3;
        java.lang.Class $r4, $r5, $r7, $r8;
        boolean $z0;
        java.lang.Object $r6, $r9;
        java.lang.IllegalArgumentException $r11;

        r0 := @this: org.quartz.utils.DirtyFlagMap$DirtyFlagMapEntrySet;

        r1 := @parameter0: java.lang.Object[];

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.Class getComponentType()>();

        $z0 = virtualinvoke $r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "Ljava/util/Map$Entry;");

        if $z0 != 0 goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Array must be of type assignable from Map.Entry");

        throw $r11;

     label1:
        i0 = specialinvoke r0.<org.quartz.utils.DirtyFlagMap$DirtyFlagSet: int size()>();

        $i1 = lengthof r1;

        if $i1 >= i0 goto label2;

        $r7 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.Class getComponentType()>();

        $r9 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r8, i0);

        $r10 = (java.lang.Object[]) $r9;

        $r12 = (java.lang.Object[]) $r10;

        goto label3;

     label2:
        $r12 = r1;

     label3:
        r2 = $r12;

        r3 = virtualinvoke r0.<org.quartz.utils.DirtyFlagMap$DirtyFlagMapEntrySet: java.util.Iterator iterator()>();

        i3 = 0;

     label4:
        if i3 >= i0 goto label5;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r2[i3] = $r6;

        i3 = i3 + 1;

        goto label4;

     label5:
        $i2 = lengthof r2;

        if $i2 <= i0 goto label6;

        r2[i0] = null;

     label6:
        return r2;
    }
}
