public interface  org.quartz.impl.jdbcjobstore.DriverDelegate extends java.lang.Object
{

    public abstract void initialize(org.slf4j.Logger, java.lang.String, java.lang.String, java.lang.String, org.quartz.spi.ClassLoadHelper, boolean, java.lang.String) throws org.quartz.impl.jdbcjobstore.NoSuchDelegateException;

    public abstract int updateTriggerStatesFromOtherStates(java.sql.Connection, java.lang.String, java.lang.String, java.lang.String) throws java.sql.SQLException;

    public abstract java.util.List selectMisfiredTriggers(java.sql.Connection, long) throws java.sql.SQLException;

    public abstract java.util.List selectMisfiredTriggersInState(java.sql.Connection, java.lang.String, long) throws java.sql.SQLException;

    public abstract boolean hasMisfiredTriggersInState(java.sql.Connection, java.lang.String, long, int, java.util.List) throws java.sql.SQLException;

    public abstract int countMisfiredTriggersInState(java.sql.Connection, java.lang.String, long) throws java.sql.SQLException;

    public abstract java.util.List selectMisfiredTriggersInGroupInState(java.sql.Connection, java.lang.String, java.lang.String, long) throws java.sql.SQLException;

    public abstract java.util.List selectTriggersForRecoveringJobs(java.sql.Connection) throws java.sql.SQLException, java.io.IOException, java.lang.ClassNotFoundException;

    public abstract int deleteFiredTriggers(java.sql.Connection) throws java.sql.SQLException;

    public abstract int deleteFiredTriggers(java.sql.Connection, java.lang.String) throws java.sql.SQLException;

    public abstract int insertJobDetail(java.sql.Connection, org.quartz.JobDetail) throws java.io.IOException, java.sql.SQLException;

    public abstract int updateJobDetail(java.sql.Connection, org.quartz.JobDetail) throws java.io.IOException, java.sql.SQLException;

    public abstract java.util.List selectTriggerKeysForJob(java.sql.Connection, org.quartz.JobKey) throws java.sql.SQLException;

    public abstract int deleteJobDetail(java.sql.Connection, org.quartz.JobKey) throws java.sql.SQLException;

    public abstract boolean isJobNonConcurrent(java.sql.Connection, org.quartz.JobKey) throws java.sql.SQLException;

    public abstract boolean jobExists(java.sql.Connection, org.quartz.JobKey) throws java.sql.SQLException;

    public abstract int updateJobData(java.sql.Connection, org.quartz.JobDetail) throws java.io.IOException, java.sql.SQLException;

    public abstract org.quartz.JobDetail selectJobDetail(java.sql.Connection, org.quartz.JobKey, org.quartz.spi.ClassLoadHelper) throws java.lang.ClassNotFoundException, java.io.IOException, java.sql.SQLException;

    public abstract int selectNumJobs(java.sql.Connection) throws java.sql.SQLException;

    public abstract java.util.List selectJobGroups(java.sql.Connection) throws java.sql.SQLException;

    public abstract java.util.Set selectJobsInGroup(java.sql.Connection, org.quartz.impl.matchers.GroupMatcher) throws java.sql.SQLException;

    public abstract int insertTrigger(java.sql.Connection, org.quartz.spi.OperableTrigger, java.lang.String, org.quartz.JobDetail) throws java.sql.SQLException, java.io.IOException;

    public abstract int updateTrigger(java.sql.Connection, org.quartz.spi.OperableTrigger, java.lang.String, org.quartz.JobDetail) throws java.sql.SQLException, java.io.IOException;

    public abstract boolean triggerExists(java.sql.Connection, org.quartz.TriggerKey) throws java.sql.SQLException;

    public abstract int updateTriggerState(java.sql.Connection, org.quartz.TriggerKey, java.lang.String) throws java.sql.SQLException;

    public abstract int updateTriggerStateFromOtherState(java.sql.Connection, org.quartz.TriggerKey, java.lang.String, java.lang.String) throws java.sql.SQLException;

    public abstract int updateTriggerStateFromOtherStates(java.sql.Connection, org.quartz.TriggerKey, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.sql.SQLException;

    public abstract int updateTriggerGroupStateFromOtherStates(java.sql.Connection, org.quartz.impl.matchers.GroupMatcher, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.sql.SQLException;

    public abstract int updateTriggerGroupStateFromOtherState(java.sql.Connection, org.quartz.impl.matchers.GroupMatcher, java.lang.String, java.lang.String) throws java.sql.SQLException;

    public abstract int updateTriggerStatesForJob(java.sql.Connection, org.quartz.JobKey, java.lang.String) throws java.sql.SQLException;

    public abstract int updateTriggerStatesForJobFromOtherState(java.sql.Connection, org.quartz.JobKey, java.lang.String, java.lang.String) throws java.sql.SQLException;

    public abstract int deleteTrigger(java.sql.Connection, org.quartz.TriggerKey) throws java.sql.SQLException;

    public abstract int selectNumTriggersForJob(java.sql.Connection, org.quartz.JobKey) throws java.sql.SQLException;

    public abstract org.quartz.JobDetail selectJobForTrigger(java.sql.Connection, org.quartz.spi.ClassLoadHelper, org.quartz.TriggerKey) throws java.lang.ClassNotFoundException, java.sql.SQLException;

    public abstract org.quartz.JobDetail selectJobForTrigger(java.sql.Connection, org.quartz.spi.ClassLoadHelper, org.quartz.TriggerKey, boolean) throws java.lang.ClassNotFoundException, java.sql.SQLException;

    public abstract java.util.List selectTriggersForJob(java.sql.Connection, org.quartz.JobKey) throws java.sql.SQLException, java.lang.ClassNotFoundException, java.io.IOException, org.quartz.JobPersistenceException;

    public abstract java.util.List selectTriggersForCalendar(java.sql.Connection, java.lang.String) throws java.sql.SQLException, java.lang.ClassNotFoundException, java.io.IOException, org.quartz.JobPersistenceException;

    public abstract org.quartz.spi.OperableTrigger selectTrigger(java.sql.Connection, org.quartz.TriggerKey) throws java.sql.SQLException, java.lang.ClassNotFoundException, java.io.IOException, org.quartz.JobPersistenceException;

    public abstract org.quartz.JobDataMap selectTriggerJobDataMap(java.sql.Connection, java.lang.String, java.lang.String) throws java.sql.SQLException, java.lang.ClassNotFoundException, java.io.IOException;

    public abstract java.lang.String selectTriggerState(java.sql.Connection, org.quartz.TriggerKey) throws java.sql.SQLException;

    public abstract org.quartz.impl.jdbcjobstore.TriggerStatus selectTriggerStatus(java.sql.Connection, org.quartz.TriggerKey) throws java.sql.SQLException;

    public abstract int selectNumTriggers(java.sql.Connection) throws java.sql.SQLException;

    public abstract java.util.List selectTriggerGroups(java.sql.Connection) throws java.sql.SQLException;

    public abstract java.util.List selectTriggerGroups(java.sql.Connection, org.quartz.impl.matchers.GroupMatcher) throws java.sql.SQLException;

    public abstract java.util.Set selectTriggersInGroup(java.sql.Connection, org.quartz.impl.matchers.GroupMatcher) throws java.sql.SQLException;

    public abstract java.util.List selectTriggersInState(java.sql.Connection, java.lang.String) throws java.sql.SQLException;

    public abstract int insertPausedTriggerGroup(java.sql.Connection, java.lang.String) throws java.sql.SQLException;

    public abstract int deletePausedTriggerGroup(java.sql.Connection, java.lang.String) throws java.sql.SQLException;

    public abstract int deletePausedTriggerGroup(java.sql.Connection, org.quartz.impl.matchers.GroupMatcher) throws java.sql.SQLException;

    public abstract int deleteAllPausedTriggerGroups(java.sql.Connection) throws java.sql.SQLException;

    public abstract boolean isTriggerGroupPaused(java.sql.Connection, java.lang.String) throws java.sql.SQLException;

    public abstract java.util.Set selectPausedTriggerGroups(java.sql.Connection) throws java.sql.SQLException;

    public abstract boolean isExistingTriggerGroup(java.sql.Connection, java.lang.String) throws java.sql.SQLException;

    public abstract int insertCalendar(java.sql.Connection, java.lang.String, org.quartz.Calendar) throws java.io.IOException, java.sql.SQLException;

    public abstract int updateCalendar(java.sql.Connection, java.lang.String, org.quartz.Calendar) throws java.io.IOException, java.sql.SQLException;

    public abstract boolean calendarExists(java.sql.Connection, java.lang.String) throws java.sql.SQLException;

    public abstract org.quartz.Calendar selectCalendar(java.sql.Connection, java.lang.String) throws java.lang.ClassNotFoundException, java.io.IOException, java.sql.SQLException;

    public abstract boolean calendarIsReferenced(java.sql.Connection, java.lang.String) throws java.sql.SQLException;

    public abstract int deleteCalendar(java.sql.Connection, java.lang.String) throws java.sql.SQLException;

    public abstract int selectNumCalendars(java.sql.Connection) throws java.sql.SQLException;

    public abstract java.util.List selectCalendars(java.sql.Connection) throws java.sql.SQLException;

    public abstract long selectNextFireTime(java.sql.Connection) throws java.sql.SQLException;

    public abstract org.quartz.utils.Key selectTriggerForFireTime(java.sql.Connection, long) throws java.sql.SQLException;

    public abstract java.util.List selectTriggerToAcquire(java.sql.Connection, long, long) throws java.sql.SQLException;

    public abstract java.util.List selectTriggerToAcquire(java.sql.Connection, long, long, int) throws java.sql.SQLException;

    public abstract int insertFiredTrigger(java.sql.Connection, org.quartz.spi.OperableTrigger, java.lang.String, org.quartz.JobDetail) throws java.sql.SQLException;

    public abstract int updateFiredTrigger(java.sql.Connection, org.quartz.spi.OperableTrigger, java.lang.String, org.quartz.JobDetail) throws java.sql.SQLException;

    public abstract java.util.List selectFiredTriggerRecords(java.sql.Connection, java.lang.String, java.lang.String) throws java.sql.SQLException;

    public abstract java.util.List selectFiredTriggerRecordsByJob(java.sql.Connection, java.lang.String, java.lang.String) throws java.sql.SQLException;

    public abstract java.util.List selectInstancesFiredTriggerRecords(java.sql.Connection, java.lang.String) throws java.sql.SQLException;

    public abstract java.util.Set selectFiredTriggerInstanceNames(java.sql.Connection) throws java.sql.SQLException;

    public abstract int deleteFiredTrigger(java.sql.Connection, java.lang.String) throws java.sql.SQLException;

    public abstract int selectJobExecutionCount(java.sql.Connection, org.quartz.JobKey) throws java.sql.SQLException;

    public abstract int insertSchedulerState(java.sql.Connection, java.lang.String, long, long) throws java.sql.SQLException;

    public abstract int deleteSchedulerState(java.sql.Connection, java.lang.String) throws java.sql.SQLException;

    public abstract int updateSchedulerState(java.sql.Connection, java.lang.String, long) throws java.sql.SQLException;

    public abstract java.util.List selectSchedulerStateRecords(java.sql.Connection, java.lang.String) throws java.sql.SQLException;

    public abstract void clearData(java.sql.Connection) throws java.sql.SQLException;
}
