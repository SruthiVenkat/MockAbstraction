public class org.quartz.core.QuartzSchedulerThread extends java.lang.Thread
{
    private org.quartz.core.QuartzScheduler qs;
    private org.quartz.core.QuartzSchedulerResources qsRsrcs;
    private final java.lang.Object sigLock;
    private boolean signaled;
    private long signaledNextFireTime;
    private boolean paused;
    private java.util.concurrent.atomic.AtomicBoolean halted;
    private java.util.Random random;
    private static long DEFAULT_IDLE_WAIT_TIME;
    private long idleWaitTime;
    private int idleWaitVariablness;
    private final org.slf4j.Logger log;
    private static final long MIN_DELAY;
    private static final long MAX_DELAY;

    void <init>(org.quartz.core.QuartzScheduler, org.quartz.core.QuartzSchedulerResources)
    {
        org.quartz.core.QuartzSchedulerThread r0;
        org.quartz.core.QuartzScheduler r1;
        org.quartz.core.QuartzSchedulerResources r2;
        boolean $z0;

        r0 := @this: org.quartz.core.QuartzSchedulerThread;

        r1 := @parameter0: org.quartz.core.QuartzScheduler;

        r2 := @parameter1: org.quartz.core.QuartzSchedulerResources;

        $z0 = virtualinvoke r2.<org.quartz.core.QuartzSchedulerResources: boolean getMakeSchedulerThreadDaemon()>();

        specialinvoke r0.<org.quartz.core.QuartzSchedulerThread: void <init>(org.quartz.core.QuartzScheduler,org.quartz.core.QuartzSchedulerResources,boolean,int)>(r1, r2, $z0, 5);

        return;
    }

    void <init>(org.quartz.core.QuartzScheduler, org.quartz.core.QuartzSchedulerResources, boolean, int)
    {
        org.quartz.core.QuartzSchedulerThread r0;
        org.quartz.core.QuartzScheduler r1;
        org.quartz.core.QuartzSchedulerResources r2;
        boolean z0, $z1;
        int i0;
        java.lang.ThreadGroup $r3;
        java.lang.String $r4, $r14, $r16;
        java.lang.Object $r5;
        java.util.Random $r6;
        long $l1, $l2;
        java.lang.Class $r7;
        org.slf4j.Logger $r8, $r11;
        java.util.concurrent.atomic.AtomicBoolean $r9;
        java.lang.StringBuilder $r10, $r12, $r15;
        java.lang.Thread $r13, $r17;
        java.lang.ClassLoader $r18;

        r0 := @this: org.quartz.core.QuartzSchedulerThread;

        r1 := @parameter0: org.quartz.core.QuartzScheduler;

        r2 := @parameter1: org.quartz.core.QuartzSchedulerResources;

        z0 := @parameter2: boolean;

        i0 := @parameter3: int;

        $r3 = virtualinvoke r1.<org.quartz.core.QuartzScheduler: java.lang.ThreadGroup getSchedulerThreadGroup()>();

        $r4 = virtualinvoke r2.<org.quartz.core.QuartzSchedulerResources: java.lang.String getThreadName()>();

        specialinvoke r0.<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>($r3, $r4);

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        r0.<org.quartz.core.QuartzSchedulerThread: java.lang.Object sigLock> = $r5;

        $r6 = new java.util.Random;

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        specialinvoke $r6.<java.util.Random: void <init>(long)>($l1);

        r0.<org.quartz.core.QuartzSchedulerThread: java.util.Random random> = $r6;

        $l2 = <org.quartz.core.QuartzSchedulerThread: long DEFAULT_IDLE_WAIT_TIME>;

        r0.<org.quartz.core.QuartzSchedulerThread: long idleWaitTime> = $l2;

        r0.<org.quartz.core.QuartzSchedulerThread: int idleWaitVariablness> = 7000;

        $r7 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>($r7);

        r0.<org.quartz.core.QuartzSchedulerThread: org.slf4j.Logger log> = $r8;

        r0.<org.quartz.core.QuartzSchedulerThread: org.quartz.core.QuartzScheduler qs> = r1;

        r0.<org.quartz.core.QuartzSchedulerThread: org.quartz.core.QuartzSchedulerResources qsRsrcs> = r2;

        virtualinvoke r0.<org.quartz.core.QuartzSchedulerThread: void setDaemon(boolean)>(z0);

        $z1 = virtualinvoke r2.<org.quartz.core.QuartzSchedulerResources: boolean isThreadsInheritInitializersClassLoadContext()>();

        if $z1 == 0 goto label1;

        $r11 = r0.<org.quartz.core.QuartzSchedulerThread: org.slf4j.Logger log>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuartzSchedulerThread Inheriting ContextClassLoader of thread: ");

        $r13 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r14 = virtualinvoke $r13.<java.lang.Thread: java.lang.String getName()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r11.<org.slf4j.Logger: void info(java.lang.String)>($r16);

        $r17 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r18 = virtualinvoke $r17.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        virtualinvoke r0.<org.quartz.core.QuartzSchedulerThread: void setContextClassLoader(java.lang.ClassLoader)>($r18);

     label1:
        virtualinvoke r0.<org.quartz.core.QuartzSchedulerThread: void setPriority(int)>(i0);

        r0.<org.quartz.core.QuartzSchedulerThread: boolean paused> = 1;

        $r9 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r9.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<org.quartz.core.QuartzSchedulerThread: java.util.concurrent.atomic.AtomicBoolean halted> = $r9;

        return;
    }

    void setIdleWaitTime(long)
    {
        org.quartz.core.QuartzSchedulerThread r0;
        long l0;
        double $d0, $d1;
        int $i1;

        r0 := @this: org.quartz.core.QuartzSchedulerThread;

        l0 := @parameter0: long;

        r0.<org.quartz.core.QuartzSchedulerThread: long idleWaitTime> = l0;

        $d0 = (double) l0;

        $d1 = $d0 * 0.2;

        $i1 = (int) $d1;

        r0.<org.quartz.core.QuartzSchedulerThread: int idleWaitVariablness> = $i1;

        return;
    }

    private long getRandomizedIdleWaitTime()
    {
        org.quartz.core.QuartzSchedulerThread r0;
        int $i0, $i2;
        java.util.Random $r1;
        long $l1, $l3, $l4;

        r0 := @this: org.quartz.core.QuartzSchedulerThread;

        $l1 = r0.<org.quartz.core.QuartzSchedulerThread: long idleWaitTime>;

        $r1 = r0.<org.quartz.core.QuartzSchedulerThread: java.util.Random random>;

        $i0 = r0.<org.quartz.core.QuartzSchedulerThread: int idleWaitVariablness>;

        $i2 = virtualinvoke $r1.<java.util.Random: int nextInt(int)>($i0);

        $l3 = (long) $i2;

        $l4 = $l1 - $l3;

        return $l4;
    }

    void togglePause(boolean)
    {
        org.quartz.core.QuartzSchedulerThread r0;
        boolean z0, $z1;
        java.lang.Object $r3, $r4;
        java.lang.Throwable $r5;

        r0 := @this: org.quartz.core.QuartzSchedulerThread;

        z0 := @parameter0: boolean;

        $r3 = r0.<org.quartz.core.QuartzSchedulerThread: java.lang.Object sigLock>;

        entermonitor $r3;

     label1:
        r0.<org.quartz.core.QuartzSchedulerThread: boolean paused> = z0;

        $z1 = r0.<org.quartz.core.QuartzSchedulerThread: boolean paused>;

        if $z1 == 0 goto label2;

        virtualinvoke r0.<org.quartz.core.QuartzSchedulerThread: void signalSchedulingChange(long)>(0L);

        goto label3;

     label2:
        $r4 = r0.<org.quartz.core.QuartzSchedulerThread: java.lang.Object sigLock>;

        virtualinvoke $r4.<java.lang.Object: void notifyAll()>();

     label3:
        exitmonitor $r3;

     label4:
        goto label7;

     label5:
        $r5 := @caughtexception;

        exitmonitor $r3;

     label6:
        throw $r5;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    void halt(boolean)
    {
        org.quartz.core.QuartzSchedulerThread r0;
        boolean z0, $z1, z2;
        java.lang.Object $r2, $r5;
        java.util.concurrent.atomic.AtomicBoolean $r3;
        java.lang.Thread $r4, $r8;
        java.lang.Throwable $r6, $r7;
        java.lang.InterruptedException $r9;

        r0 := @this: org.quartz.core.QuartzSchedulerThread;

        z0 := @parameter0: boolean;

        $r2 = r0.<org.quartz.core.QuartzSchedulerThread: java.lang.Object sigLock>;

        entermonitor $r2;

     label01:
        $r3 = r0.<org.quartz.core.QuartzSchedulerThread: java.util.concurrent.atomic.AtomicBoolean halted>;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        $z1 = r0.<org.quartz.core.QuartzSchedulerThread: boolean paused>;

        if $z1 == 0 goto label02;

        $r5 = r0.<org.quartz.core.QuartzSchedulerThread: java.lang.Object sigLock>;

        virtualinvoke $r5.<java.lang.Object: void notifyAll()>();

        goto label03;

     label02:
        virtualinvoke r0.<org.quartz.core.QuartzSchedulerThread: void signalSchedulingChange(long)>(0L);

     label03:
        exitmonitor $r2;

     label04:
        goto label07;

     label05:
        $r6 := @caughtexception;

        exitmonitor $r2;

     label06:
        throw $r6;

     label07:
        if z0 == 0 goto label15;

        z2 = 0;

     label08:
        virtualinvoke r0.<org.quartz.core.QuartzSchedulerThread: void join()>();

     label09:
        goto label11;

     label10:
        $r9 := @caughtexception;

        z2 = 1;

        goto label08;

     label11:
        if z2 == 0 goto label15;

        $r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r4.<java.lang.Thread: void interrupt()>();

        goto label15;

     label12:
        $r7 := @caughtexception;

     label13:
        if z2 == 0 goto label14;

        $r8 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r8.<java.lang.Thread: void interrupt()>();

     label14:
        throw $r7;

     label15:
        return;

        catch java.lang.Throwable from label01 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.InterruptedException from label08 to label09 with label10;
        catch java.lang.Throwable from label08 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    boolean isPaused()
    {
        org.quartz.core.QuartzSchedulerThread r0;
        boolean $z0;

        r0 := @this: org.quartz.core.QuartzSchedulerThread;

        $z0 = r0.<org.quartz.core.QuartzSchedulerThread: boolean paused>;

        return $z0;
    }

    public void signalSchedulingChange(long)
    {
        org.quartz.core.QuartzSchedulerThread r0;
        long l0;
        java.lang.Object $r3, $r4;
        java.lang.Throwable $r5;

        r0 := @this: org.quartz.core.QuartzSchedulerThread;

        l0 := @parameter0: long;

        $r3 = r0.<org.quartz.core.QuartzSchedulerThread: java.lang.Object sigLock>;

        entermonitor $r3;

     label1:
        r0.<org.quartz.core.QuartzSchedulerThread: boolean signaled> = 1;

        r0.<org.quartz.core.QuartzSchedulerThread: long signaledNextFireTime> = l0;

        $r4 = r0.<org.quartz.core.QuartzSchedulerThread: java.lang.Object sigLock>;

        virtualinvoke $r4.<java.lang.Object: void notifyAll()>();

        exitmonitor $r3;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        exitmonitor $r3;

     label4:
        throw $r5;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void clearSignaledSchedulingChange()
    {
        org.quartz.core.QuartzSchedulerThread r0;
        java.lang.Object $r3;
        java.lang.Throwable $r4;

        r0 := @this: org.quartz.core.QuartzSchedulerThread;

        $r3 = r0.<org.quartz.core.QuartzSchedulerThread: java.lang.Object sigLock>;

        entermonitor $r3;

     label1:
        r0.<org.quartz.core.QuartzSchedulerThread: boolean signaled> = 0;

        r0.<org.quartz.core.QuartzSchedulerThread: long signaledNextFireTime> = 0L;

        exitmonitor $r3;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r3;

     label4:
        throw $r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean isScheduleChanged()
    {
        org.quartz.core.QuartzSchedulerThread r0;
        java.lang.Object $r3;
        boolean $z0;
        java.lang.Throwable $r4;

        r0 := @this: org.quartz.core.QuartzSchedulerThread;

        $r3 = r0.<org.quartz.core.QuartzSchedulerThread: java.lang.Object sigLock>;

        entermonitor $r3;

     label1:
        $z0 = r0.<org.quartz.core.QuartzSchedulerThread: boolean signaled>;

        exitmonitor $r3;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r3;

     label4:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public long getSignaledNextFireTime()
    {
        org.quartz.core.QuartzSchedulerThread r0;
        java.lang.Object $r3;
        long $l0;
        java.lang.Throwable $r4;

        r0 := @this: org.quartz.core.QuartzSchedulerThread;

        $r3 = r0.<org.quartz.core.QuartzSchedulerThread: java.lang.Object sigLock>;

        entermonitor $r3;

     label1:
        $l0 = r0.<org.quartz.core.QuartzSchedulerThread: long signaledNextFireTime>;

        exitmonitor $r3;

     label2:
        return $l0;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r3;

     label4:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void run()
    {
        org.quartz.core.QuartzSchedulerThread r0;
        long l0, l1, $l2, $l3, $l6, $l7, l12, l14, l16, l17, l18, l19, l20, l21, l25;
        org.quartz.spi.TriggerFiredBundle r2;
        java.lang.Exception r3, $r98;
        java.lang.Object $r5, $r12, $r14, $r15, $r19, $r21, $r30, $r36, $r41, $r46, $r50, $r52, $r62, $r79, $r96;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15;
        java.util.concurrent.atomic.AtomicBoolean $r6, $r13, $r20, $r51, $r61, $r100;
        org.quartz.core.QuartzSchedulerResources $r7, $r9, $r10, $r22, $r25, $r28, $r34, $r44, $r48, $r59, $r77, $r94, $r103;
        org.quartz.spi.JobStore $r8, $r29, $r35, $r45, $r49, $r60, $r78, $r95;
        int $i4, $i5, $i10, i11, i13, $i15, i22, i23, $i24;
        org.slf4j.Logger $r11, $r27, $r38, $r54, $r70, $r86;
        org.quartz.spi.OperableTrigger $r16, $r31, $r37, $r47, $r80, $r97;
        java.util.Date $r17;
        byte $b8, $b9;
        java.util.ArrayList $r18;
        org.quartz.core.JobRunShellFactory $r23;
        org.quartz.core.QuartzScheduler $r24, $r65, $r89;
        org.quartz.spi.ThreadPool $r26, $r104;
        org.quartz.JobDetail $r32, $r81;
        org.quartz.Trigger$CompletedExecutionInstruction $r33, $r82;
        java.lang.StringBuilder $r39, $r40, $r42, $r53, $r55, $r56, $r57, $r71, $r72, $r74, $r88, $r90, $r91, $r92;
        java.lang.String $r43, $r58, $r73, $r75, $r93;
        java.lang.Throwable $r63, $r66, $r84, $r99;
        org.quartz.JobPersistenceException $r64;
        java.lang.InterruptedException $r67, $r68, $r83;
        java.lang.RuntimeException $r69, $r85;
        org.quartz.SchedulerException $r76, $r87;
        java.util.List r105, r110, r113;
        org.quartz.spi.TriggerFiredResult r115;
        org.quartz.core.JobRunShell r116;

        r0 := @this: org.quartz.core.QuartzSchedulerThread;

        i11 = 0;

     label01:
        $r100 = r0.<org.quartz.core.QuartzSchedulerThread: java.util.concurrent.atomic.AtomicBoolean halted>;

        $z13 = virtualinvoke $r100.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z13 != 0 goto label79;

     label02:
        $r5 = r0.<org.quartz.core.QuartzSchedulerThread: java.lang.Object sigLock>;

        entermonitor $r5;

     label03:
        $z0 = r0.<org.quartz.core.QuartzSchedulerThread: boolean paused>;

        if $z0 == 0 goto label08;

        $r61 = r0.<org.quartz.core.QuartzSchedulerThread: java.util.concurrent.atomic.AtomicBoolean halted>;

        $z12 = virtualinvoke $r61.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z12 != 0 goto label08;

     label04:
        $r62 = r0.<org.quartz.core.QuartzSchedulerThread: java.lang.Object sigLock>;

        virtualinvoke $r62.<java.lang.Object: void wait(long)>(1000L);

     label05:
        goto label07;

     label06:
        $r68 := @caughtexception;

     label07:
        i11 = 0;

        goto label03;

     label08:
        $r6 = r0.<org.quartz.core.QuartzSchedulerThread: java.util.concurrent.atomic.AtomicBoolean halted>;

        $z1 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z1 == 0 goto label10;

        exitmonitor $r5;

     label09:
        goto label79;

     label10:
        exitmonitor $r5;

     label11:
        goto label14;

     label12:
        $r84 := @caughtexception;

        exitmonitor $r5;

     label13:
        throw $r84;

     label14:
        if i11 <= 1 goto label18;

     label15:
        $r59 = r0.<org.quartz.core.QuartzSchedulerThread: org.quartz.core.QuartzSchedulerResources qsRsrcs>;

        $r60 = virtualinvoke $r59.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        l12 = staticinvoke <org.quartz.core.QuartzSchedulerThread: long computeDelayForRepeatedErrors(org.quartz.spi.JobStore,int)>($r60, i11);

        staticinvoke <java.lang.Thread: void sleep(long)>(l12);

     label16:
        goto label18;

     label17:
        $r98 := @caughtexception;

     label18:
        $r103 = r0.<org.quartz.core.QuartzSchedulerThread: org.quartz.core.QuartzSchedulerResources qsRsrcs>;

        $r104 = virtualinvoke $r103.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.ThreadPool getThreadPool()>();

        i13 = interfaceinvoke $r104.<org.quartz.spi.ThreadPool: int blockForAvailableThreads()>();

        if i13 <= 0 goto label68;

        l14 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        virtualinvoke r0.<org.quartz.core.QuartzSchedulerThread: void clearSignaledSchedulingChange()>();

     label19:
        $r7 = r0.<org.quartz.core.QuartzSchedulerThread: org.quartz.core.QuartzSchedulerResources qsRsrcs>;

        $r8 = virtualinvoke $r7.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        $l2 = r0.<org.quartz.core.QuartzSchedulerThread: long idleWaitTime>;

        $l3 = l14 + $l2;

        $r9 = r0.<org.quartz.core.QuartzSchedulerThread: org.quartz.core.QuartzSchedulerResources qsRsrcs>;

        $i4 = virtualinvoke $r9.<org.quartz.core.QuartzSchedulerResources: int getMaxBatchSize()>();

        $i5 = staticinvoke <java.lang.Math: int min(int,int)>(i13, $i4);

        $r10 = r0.<org.quartz.core.QuartzSchedulerThread: org.quartz.core.QuartzSchedulerResources qsRsrcs>;

        $l6 = virtualinvoke $r10.<org.quartz.core.QuartzSchedulerResources: long getBatchTimeWindow()>();

        r105 = interfaceinvoke $r8.<org.quartz.spi.JobStore: java.util.List acquireNextTriggers(long,int,long)>($l3, $i5, $l6);

        i11 = 0;

        $r11 = r0.<org.quartz.core.QuartzSchedulerThread: org.slf4j.Logger log>;

        $z2 = interfaceinvoke $r11.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z2 == 0 goto label22;

        $r54 = r0.<org.quartz.core.QuartzSchedulerThread: org.slf4j.Logger log>;

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        $r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("batch acquisition of ");

        if r105 != null goto label20;

        $i15 = 0;

        goto label21;

     label20:
        $i15 = interfaceinvoke r105.<java.util.List: int size()>();

     label21:
        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i15);

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" triggers");

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r54.<org.slf4j.Logger: void debug(java.lang.String)>($r58);

     label22:
        goto label29;

     label23:
        $r64 := @caughtexception;

        if i11 != 0 goto label24;

        $r65 = r0.<org.quartz.core.QuartzSchedulerThread: org.quartz.core.QuartzScheduler qs>;

        virtualinvoke $r65.<org.quartz.core.QuartzScheduler: void notifySchedulerListenersError(java.lang.String,org.quartz.SchedulerException)>("An error occurred while scanning for the next triggers to fire.", $r64);

     label24:
        if i11 >= 2147483647 goto label25;

        i11 = i11 + 1;

     label25:
        goto label01;

     label26:
        $r69 := @caughtexception;

        if i11 != 0 goto label27;

        $r70 = virtualinvoke r0.<org.quartz.core.QuartzSchedulerThread: org.slf4j.Logger getLog()>();

        $r71 = new java.lang.StringBuilder;

        specialinvoke $r71.<java.lang.StringBuilder: void <init>()>();

        $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("quartzSchedulerThreadLoop: RuntimeException ");

        $r73 = virtualinvoke $r69.<java.lang.RuntimeException: java.lang.String getMessage()>();

        $r74 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r73);

        $r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r70.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r75, $r69);

     label27:
        if i11 >= 2147483647 goto label28;

        i11 = i11 + 1;

     label28:
        goto label01;

     label29:
        if r105 == null goto label67;

        $z5 = interfaceinvoke r105.<java.util.List: boolean isEmpty()>();

        if $z5 != 0 goto label67;

        l16 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r15 = interfaceinvoke r105.<java.util.List: java.lang.Object get(int)>(0);

        $r16 = (org.quartz.spi.OperableTrigger) $r15;

        $r17 = interfaceinvoke $r16.<org.quartz.spi.OperableTrigger: java.util.Date getNextFireTime()>();

        l17 = virtualinvoke $r17.<java.util.Date: long getTime()>();

        l18 = l17 - l16;

     label30:
        $b8 = l18 cmp 2L;

        if $b8 <= 0 goto label43;

        $r50 = r0.<org.quartz.core.QuartzSchedulerThread: java.lang.Object sigLock>;

        entermonitor $r50;

     label31:
        $r51 = r0.<org.quartz.core.QuartzSchedulerThread: java.util.concurrent.atomic.AtomicBoolean halted>;

        $z9 = virtualinvoke $r51.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z9 == 0 goto label33;

        exitmonitor $r50;

     label32:
        goto label43;

     label33:
        $z10 = specialinvoke r0.<org.quartz.core.QuartzSchedulerThread: boolean isCandidateNewTimeEarlierWithinReason(long,boolean)>(l17, 0);

        if $z10 != 0 goto label37;

     label34:
        l19 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l20 = l17 - l19;

        $b9 = l20 cmp 1L;

        if $b9 < 0 goto label35;

        $r52 = r0.<org.quartz.core.QuartzSchedulerThread: java.lang.Object sigLock>;

        virtualinvoke $r52.<java.lang.Object: void wait(long)>(l20);

     label35:
        goto label37;

     label36:
        $r67 := @caughtexception;

     label37:
        exitmonitor $r50;

     label38:
        goto label41;

     label39:
        $r99 := @caughtexception;

        exitmonitor $r50;

     label40:
        throw $r99;

     label41:
        $z11 = specialinvoke r0.<org.quartz.core.QuartzSchedulerThread: boolean releaseIfScheduleChangedSignificantly(java.util.List,long)>(r105, l17);

        if $z11 == 0 goto label42;

        goto label43;

     label42:
        l21 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l18 = l17 - l21;

        goto label30;

     label43:
        $z14 = interfaceinvoke r105.<java.util.List: boolean isEmpty()>();

        if $z14 == 0 goto label45;

     label44:
        goto label01;

     label45:
        $r18 = new java.util.ArrayList;

        specialinvoke $r18.<java.util.ArrayList: void <init>()>();

        r110 = $r18;

        $r19 = r0.<org.quartz.core.QuartzSchedulerThread: java.lang.Object sigLock>;

        entermonitor $r19;

     label46:
        $r20 = r0.<org.quartz.core.QuartzSchedulerThread: java.util.concurrent.atomic.AtomicBoolean halted>;

        $z6 = virtualinvoke $r20.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z6 != 0 goto label47;

        $z15 = 1;

        goto label48;

     label47:
        $z15 = 0;

     label48:
        exitmonitor $r19;

     label49:
        goto label52;

     label50:
        $r63 := @caughtexception;

        exitmonitor $r19;

     label51:
        throw $r63;

     label52:
        if $z15 == 0 goto label58;

     label53:
        $r48 = r0.<org.quartz.core.QuartzSchedulerThread: org.quartz.core.QuartzSchedulerResources qsRsrcs>;

        $r49 = virtualinvoke $r48.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        r113 = interfaceinvoke $r49.<org.quartz.spi.JobStore: java.util.List triggersFired(java.util.List)>(r105);

        if r113 == null goto label54;

        r110 = r113;

     label54:
        goto label58;

     label55:
        $r87 := @caughtexception;

        $r89 = r0.<org.quartz.core.QuartzSchedulerThread: org.quartz.core.QuartzScheduler qs>;

        $r88 = new java.lang.StringBuilder;

        specialinvoke $r88.<java.lang.StringBuilder: void <init>()>();

        $r90 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("An error occurred while firing triggers \'");

        $r91 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r105);

        $r92 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r93 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r89.<org.quartz.core.QuartzScheduler: void notifySchedulerListenersError(java.lang.String,org.quartz.SchedulerException)>($r93, $r87);

        i22 = 0;

     label56:
        $i10 = interfaceinvoke r105.<java.util.List: int size()>();

        if i22 >= $i10 goto label57;

        $r94 = r0.<org.quartz.core.QuartzSchedulerThread: org.quartz.core.QuartzSchedulerResources qsRsrcs>;

        $r95 = virtualinvoke $r94.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        $r96 = interfaceinvoke r105.<java.util.List: java.lang.Object get(int)>(i22);

        $r97 = (org.quartz.spi.OperableTrigger) $r96;

        interfaceinvoke $r95.<org.quartz.spi.JobStore: void releaseAcquiredTrigger(org.quartz.spi.OperableTrigger)>($r97);

        i22 = i22 + 1;

        goto label56;

     label57:
        goto label01;

     label58:
        i23 = 0;

     label59:
        $i24 = interfaceinvoke r110.<java.util.List: int size()>();

        if i23 >= $i24 goto label66;

        $r21 = interfaceinvoke r110.<java.util.List: java.lang.Object get(int)>(i23);

        r115 = (org.quartz.spi.TriggerFiredResult) $r21;

        r2 = virtualinvoke r115.<org.quartz.spi.TriggerFiredResult: org.quartz.spi.TriggerFiredBundle getTriggerFiredBundle()>();

        r3 = virtualinvoke r115.<org.quartz.spi.TriggerFiredResult: java.lang.Exception getException()>();

        $z7 = r3 instanceof java.lang.RuntimeException;

        if $z7 == 0 goto label60;

        $r38 = virtualinvoke r0.<org.quartz.core.QuartzSchedulerThread: org.slf4j.Logger getLog()>();

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RuntimeException while firing trigger ");

        $r41 = interfaceinvoke r105.<java.util.List: java.lang.Object get(int)>(i23);

        $r42 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r41);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r38.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r43, r3);

        $r44 = r0.<org.quartz.core.QuartzSchedulerThread: org.quartz.core.QuartzSchedulerResources qsRsrcs>;

        $r45 = virtualinvoke $r44.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        $r46 = interfaceinvoke r105.<java.util.List: java.lang.Object get(int)>(i23);

        $r47 = (org.quartz.spi.OperableTrigger) $r46;

        interfaceinvoke $r45.<org.quartz.spi.JobStore: void releaseAcquiredTrigger(org.quartz.spi.OperableTrigger)>($r47);

        goto label65;

     label60:
        if r2 != null goto label61;

        $r34 = r0.<org.quartz.core.QuartzSchedulerThread: org.quartz.core.QuartzSchedulerResources qsRsrcs>;

        $r35 = virtualinvoke $r34.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        $r36 = interfaceinvoke r105.<java.util.List: java.lang.Object get(int)>(i23);

        $r37 = (org.quartz.spi.OperableTrigger) $r36;

        interfaceinvoke $r35.<org.quartz.spi.JobStore: void releaseAcquiredTrigger(org.quartz.spi.OperableTrigger)>($r37);

        goto label65;

     label61:
        $r22 = r0.<org.quartz.core.QuartzSchedulerThread: org.quartz.core.QuartzSchedulerResources qsRsrcs>;

        $r23 = virtualinvoke $r22.<org.quartz.core.QuartzSchedulerResources: org.quartz.core.JobRunShellFactory getJobRunShellFactory()>();

        r116 = interfaceinvoke $r23.<org.quartz.core.JobRunShellFactory: org.quartz.core.JobRunShell createJobRunShell(org.quartz.spi.TriggerFiredBundle)>(r2);

        $r24 = r0.<org.quartz.core.QuartzSchedulerThread: org.quartz.core.QuartzScheduler qs>;

        virtualinvoke r116.<org.quartz.core.JobRunShell: void initialize(org.quartz.core.QuartzScheduler)>($r24);

     label62:
        goto label64;

     label63:
        $r76 := @caughtexception;

        $r77 = r0.<org.quartz.core.QuartzSchedulerThread: org.quartz.core.QuartzSchedulerResources qsRsrcs>;

        $r78 = virtualinvoke $r77.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        $r79 = interfaceinvoke r105.<java.util.List: java.lang.Object get(int)>(i23);

        $r80 = (org.quartz.spi.OperableTrigger) $r79;

        $r81 = virtualinvoke r2.<org.quartz.spi.TriggerFiredBundle: org.quartz.JobDetail getJobDetail()>();

        $r82 = <org.quartz.Trigger$CompletedExecutionInstruction: org.quartz.Trigger$CompletedExecutionInstruction SET_ALL_JOB_TRIGGERS_ERROR>;

        interfaceinvoke $r78.<org.quartz.spi.JobStore: void triggeredJobComplete(org.quartz.spi.OperableTrigger,org.quartz.JobDetail,org.quartz.Trigger$CompletedExecutionInstruction)>($r80, $r81, $r82);

        goto label65;

     label64:
        $r25 = r0.<org.quartz.core.QuartzSchedulerThread: org.quartz.core.QuartzSchedulerResources qsRsrcs>;

        $r26 = virtualinvoke $r25.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.ThreadPool getThreadPool()>();

        $z8 = interfaceinvoke $r26.<org.quartz.spi.ThreadPool: boolean runInThread(java.lang.Runnable)>(r116);

        if $z8 != 0 goto label65;

        $r27 = virtualinvoke r0.<org.quartz.core.QuartzSchedulerThread: org.slf4j.Logger getLog()>();

        interfaceinvoke $r27.<org.slf4j.Logger: void error(java.lang.String)>("ThreadPool.runInThread() return false!");

        $r28 = r0.<org.quartz.core.QuartzSchedulerThread: org.quartz.core.QuartzSchedulerResources qsRsrcs>;

        $r29 = virtualinvoke $r28.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        $r30 = interfaceinvoke r105.<java.util.List: java.lang.Object get(int)>(i23);

        $r31 = (org.quartz.spi.OperableTrigger) $r30;

        $r32 = virtualinvoke r2.<org.quartz.spi.TriggerFiredBundle: org.quartz.JobDetail getJobDetail()>();

        $r33 = <org.quartz.Trigger$CompletedExecutionInstruction: org.quartz.Trigger$CompletedExecutionInstruction SET_ALL_JOB_TRIGGERS_ERROR>;

        interfaceinvoke $r29.<org.quartz.spi.JobStore: void triggeredJobComplete(org.quartz.spi.OperableTrigger,org.quartz.JobDetail,org.quartz.Trigger$CompletedExecutionInstruction)>($r31, $r32, $r33);

     label65:
        i23 = i23 + 1;

        goto label59;

     label66:
        goto label01;

     label67:
        goto label69;

     label68:
        goto label01;

     label69:
        l25 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l7 = specialinvoke r0.<org.quartz.core.QuartzSchedulerThread: long getRandomizedIdleWaitTime()>();

        l0 = l25 + $l7;

        l1 = l0 - l25;

        $r12 = r0.<org.quartz.core.QuartzSchedulerThread: java.lang.Object sigLock>;

        entermonitor $r12;

     label70:
        $r13 = r0.<org.quartz.core.QuartzSchedulerThread: java.util.concurrent.atomic.AtomicBoolean halted>;

        $z3 = virtualinvoke $r13.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z3 != 0 goto label71;

        $z4 = virtualinvoke r0.<org.quartz.core.QuartzSchedulerThread: boolean isScheduleChanged()>();

        if $z4 != 0 goto label71;

        $r14 = r0.<org.quartz.core.QuartzSchedulerThread: java.lang.Object sigLock>;

        virtualinvoke $r14.<java.lang.Object: void wait(long)>(l1);

     label71:
        goto label73;

     label72:
        $r83 := @caughtexception;

     label73:
        exitmonitor $r12;

     label74:
        goto label77;

     label75:
        $r66 := @caughtexception;

        exitmonitor $r12;

     label76:
        throw $r66;

     label77:
        goto label01;

     label78:
        $r85 := @caughtexception;

        $r86 = virtualinvoke r0.<org.quartz.core.QuartzSchedulerThread: org.slf4j.Logger getLog()>();

        interfaceinvoke $r86.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Runtime error occurred in main trigger firing loop.", $r85);

        goto label01;

     label79:
        r0.<org.quartz.core.QuartzSchedulerThread: org.quartz.core.QuartzScheduler qs> = null;

        r0.<org.quartz.core.QuartzSchedulerThread: org.quartz.core.QuartzSchedulerResources qsRsrcs> = null;

        return;

        catch java.lang.InterruptedException from label04 to label05 with label06;
        catch java.lang.Throwable from label03 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
        catch java.lang.Exception from label15 to label16 with label17;
        catch org.quartz.JobPersistenceException from label19 to label22 with label23;
        catch java.lang.RuntimeException from label19 to label22 with label26;
        catch java.lang.InterruptedException from label34 to label35 with label36;
        catch java.lang.Throwable from label31 to label32 with label39;
        catch java.lang.Throwable from label33 to label38 with label39;
        catch java.lang.Throwable from label39 to label40 with label39;
        catch java.lang.Throwable from label46 to label49 with label50;
        catch java.lang.Throwable from label50 to label51 with label50;
        catch org.quartz.SchedulerException from label53 to label54 with label55;
        catch org.quartz.SchedulerException from label61 to label62 with label63;
        catch java.lang.InterruptedException from label70 to label71 with label72;
        catch java.lang.Throwable from label70 to label74 with label75;
        catch java.lang.Throwable from label75 to label76 with label75;
        catch java.lang.RuntimeException from label02 to label09 with label78;
        catch java.lang.RuntimeException from label10 to label25 with label78;
        catch java.lang.RuntimeException from label26 to label28 with label78;
        catch java.lang.RuntimeException from label29 to label44 with label78;
        catch java.lang.RuntimeException from label45 to label57 with label78;
        catch java.lang.RuntimeException from label58 to label66 with label78;
        catch java.lang.RuntimeException from label67 to label68 with label78;
        catch java.lang.RuntimeException from label69 to label77 with label78;
    }

    private static long computeDelayForRepeatedErrors(org.quartz.spi.JobStore, int)
    {
        org.quartz.spi.JobStore r0;
        int i0;
        byte $b1, $b2;
        java.lang.Exception $r2;
        long l3;

        r0 := @parameter0: org.quartz.spi.JobStore;

        i0 := @parameter1: int;

     label1:
        l3 = interfaceinvoke r0.<org.quartz.spi.JobStore: long getAcquireRetryDelay(int)>(i0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        l3 = 100L;

     label4:
        $b1 = l3 cmp 20L;

        if $b1 >= 0 goto label5;

        l3 = 20L;

     label5:
        $b2 = l3 cmp 600000L;

        if $b2 <= 0 goto label6;

        l3 = 600000L;

     label6:
        return l3;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private boolean releaseIfScheduleChangedSignificantly(java.util.List, long)
    {
        org.quartz.core.QuartzSchedulerThread r0;
        java.util.List r1;
        long l0;
        java.util.Iterator r2;
        org.quartz.spi.OperableTrigger r3;
        boolean $z0, $z1;
        java.lang.Object $r4;
        org.quartz.core.QuartzSchedulerResources $r5;
        org.quartz.spi.JobStore $r6;

        r0 := @this: org.quartz.core.QuartzSchedulerThread;

        r1 := @parameter0: java.util.List;

        l0 := @parameter1: long;

        $z0 = specialinvoke r0.<org.quartz.core.QuartzSchedulerThread: boolean isCandidateNewTimeEarlierWithinReason(long,boolean)>(l0, 1);

        if $z0 == 0 goto label3;

        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.quartz.spi.OperableTrigger) $r4;

        $r5 = r0.<org.quartz.core.QuartzSchedulerThread: org.quartz.core.QuartzSchedulerResources qsRsrcs>;

        $r6 = virtualinvoke $r5.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        interfaceinvoke $r6.<org.quartz.spi.JobStore: void releaseAcquiredTrigger(org.quartz.spi.OperableTrigger)>(r3);

        goto label1;

     label2:
        interfaceinvoke r1.<java.util.List: void clear()>();

        return 1;

     label3:
        return 0;
    }

    private boolean isCandidateNewTimeEarlierWithinReason(long, boolean)
    {
        org.quartz.core.QuartzSchedulerThread r0;
        long l0, l1, $l2, $l4, $l6, $l9;
        boolean z0, $z1, $z3, z4;
        java.lang.Object $r3;
        byte $b3, $b5, $b7;
        org.quartz.core.QuartzSchedulerResources $r4;
        org.quartz.spi.JobStore $r5;
        java.lang.Throwable $r6;

        r0 := @this: org.quartz.core.QuartzSchedulerThread;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        $r3 = r0.<org.quartz.core.QuartzSchedulerThread: java.lang.Object sigLock>;

        entermonitor $r3;

     label01:
        $z1 = virtualinvoke r0.<org.quartz.core.QuartzSchedulerThread: boolean isScheduleChanged()>();

        if $z1 != 0 goto label03;

        exitmonitor $r3;

     label02:
        return 0;

     label03:
        z4 = 0;

        $l2 = virtualinvoke r0.<org.quartz.core.QuartzSchedulerThread: long getSignaledNextFireTime()>();

        $b3 = $l2 cmp 0L;

        if $b3 != 0 goto label04;

        z4 = 1;

        goto label05;

     label04:
        $l4 = virtualinvoke r0.<org.quartz.core.QuartzSchedulerThread: long getSignaledNextFireTime()>();

        $b5 = $l4 cmp l0;

        if $b5 >= 0 goto label05;

        z4 = 1;

     label05:
        if z4 == 0 goto label08;

        $l6 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l1 = l0 - $l6;

        $r4 = r0.<org.quartz.core.QuartzSchedulerThread: org.quartz.core.QuartzSchedulerResources qsRsrcs>;

        $r5 = virtualinvoke $r4.<org.quartz.core.QuartzSchedulerResources: org.quartz.spi.JobStore getJobStore()>();

        $z3 = interfaceinvoke $r5.<org.quartz.spi.JobStore: boolean supportsPersistence()>();

        if $z3 == 0 goto label06;

        $l9 = 70L;

        goto label07;

     label06:
        $l9 = 7L;

     label07:
        $b7 = l1 cmp $l9;

        if $b7 >= 0 goto label08;

        z4 = 0;

     label08:
        if z0 == 0 goto label09;

        virtualinvoke r0.<org.quartz.core.QuartzSchedulerThread: void clearSignaledSchedulingChange()>();

     label09:
        exitmonitor $r3;

     label10:
        return z4;

     label11:
        $r6 := @caughtexception;

        exitmonitor $r3;

     label12:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public org.slf4j.Logger getLog()
    {
        org.quartz.core.QuartzSchedulerThread r0;
        org.slf4j.Logger $r1;

        r0 := @this: org.quartz.core.QuartzSchedulerThread;

        $r1 = r0.<org.quartz.core.QuartzSchedulerThread: org.slf4j.Logger log>;

        return $r1;
    }

    static void <clinit>()
    {
        <org.quartz.core.QuartzSchedulerThread: long MAX_DELAY> = 600000L;

        <org.quartz.core.QuartzSchedulerThread: long MIN_DELAY> = 20L;

        <org.quartz.core.QuartzSchedulerThread: long DEFAULT_IDLE_WAIT_TIME> = 30000L;

        return;
    }
}
