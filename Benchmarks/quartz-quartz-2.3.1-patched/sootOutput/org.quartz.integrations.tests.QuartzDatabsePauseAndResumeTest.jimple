public class org.quartz.integrations.tests.QuartzDatabsePauseAndResumeTest extends org.quartz.integrations.tests.QuartzDatabaseTestSupport
{

    public void <init>()
    {
        org.quartz.integrations.tests.QuartzDatabsePauseAndResumeTest r0;

        r0 := @this: org.quartz.integrations.tests.QuartzDatabsePauseAndResumeTest;

        specialinvoke r0.<org.quartz.integrations.tests.QuartzDatabaseTestSupport: void <init>()>();

        return;
    }

    public void testPauseAndResumeTriggers() throws java.lang.Exception
    {
        org.quartz.integrations.tests.QuartzDatabsePauseAndResumeTest r0;
        org.quartz.JobDetail r1;
        org.quartz.CronTrigger r2;
        org.quartz.JobBuilder $r3, $r4;
        org.quartz.TriggerBuilder $r5, $r6, $r8;
        org.quartz.CronScheduleBuilder $r7;
        org.quartz.Trigger $r9;
        org.quartz.Scheduler $r10, $r12, $r18, $r20, $r26, $r28;
        org.quartz.TriggerKey $r13, $r21, $r29;
        org.quartz.Trigger$TriggerState $r14, $r16, $r22, $r24, $r30, $r32, r34, r35, r36;
        org.hamcrest.Matcher $r15, $r17, $r23, $r25, $r31, $r33;
        org.quartz.impl.matchers.GroupMatcher $r19, $r27;

        r0 := @this: org.quartz.integrations.tests.QuartzDatabsePauseAndResumeTest;

        $r3 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob(java.lang.Class)>(class "Lorg/quartz/integrations/tests/HelloJob;");

        $r4 = virtualinvoke $r3.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String)>("test_1");

        r1 = virtualinvoke $r4.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        $r5 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r6 = virtualinvoke $r5.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String,java.lang.String)>("test_1", "abc");

        $r7 = staticinvoke <org.quartz.CronScheduleBuilder: org.quartz.CronScheduleBuilder cronSchedule(java.lang.String)>("* * * * * ?");

        $r8 = virtualinvoke $r6.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>($r7);

        $r9 = virtualinvoke $r8.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        r2 = (org.quartz.CronTrigger) $r9;

        $r10 = r0.<org.quartz.integrations.tests.QuartzDatabsePauseAndResumeTest: org.quartz.Scheduler scheduler>;

        interfaceinvoke $r10.<org.quartz.Scheduler: java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)>(r1, r2);

        $r12 = r0.<org.quartz.integrations.tests.QuartzDatabsePauseAndResumeTest: org.quartz.Scheduler scheduler>;

        $r13 = staticinvoke <org.quartz.TriggerKey: org.quartz.TriggerKey triggerKey(java.lang.String,java.lang.String)>("test_1", "abc");

        r34 = interfaceinvoke $r12.<org.quartz.Scheduler: org.quartz.Trigger$TriggerState getTriggerState(org.quartz.TriggerKey)>($r13);

        $r14 = <org.quartz.Trigger$TriggerState: org.quartz.Trigger$TriggerState NORMAL>;

        $r15 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r14);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r34, $r15);

        $r16 = <org.quartz.Trigger$TriggerState: org.quartz.Trigger$TriggerState PAUSED>;

        $r17 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher not(java.lang.Object)>($r16);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r34, $r17);

        $r18 = r0.<org.quartz.integrations.tests.QuartzDatabsePauseAndResumeTest: org.quartz.Scheduler scheduler>;

        $r19 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher triggerGroupEquals(java.lang.String)>("abc");

        interfaceinvoke $r18.<org.quartz.Scheduler: void pauseTriggers(org.quartz.impl.matchers.GroupMatcher)>($r19);

        $r20 = r0.<org.quartz.integrations.tests.QuartzDatabsePauseAndResumeTest: org.quartz.Scheduler scheduler>;

        $r21 = staticinvoke <org.quartz.TriggerKey: org.quartz.TriggerKey triggerKey(java.lang.String,java.lang.String)>("test_1", "abc");

        r35 = interfaceinvoke $r20.<org.quartz.Scheduler: org.quartz.Trigger$TriggerState getTriggerState(org.quartz.TriggerKey)>($r21);

        $r22 = <org.quartz.Trigger$TriggerState: org.quartz.Trigger$TriggerState PAUSED>;

        $r23 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r22);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r35, $r23);

        $r24 = <org.quartz.Trigger$TriggerState: org.quartz.Trigger$TriggerState NORMAL>;

        $r25 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher not(java.lang.Object)>($r24);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r35, $r25);

        $r26 = r0.<org.quartz.integrations.tests.QuartzDatabsePauseAndResumeTest: org.quartz.Scheduler scheduler>;

        $r27 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher triggerGroupEquals(java.lang.String)>("abc");

        interfaceinvoke $r26.<org.quartz.Scheduler: void resumeTriggers(org.quartz.impl.matchers.GroupMatcher)>($r27);

        $r28 = r0.<org.quartz.integrations.tests.QuartzDatabsePauseAndResumeTest: org.quartz.Scheduler scheduler>;

        $r29 = staticinvoke <org.quartz.TriggerKey: org.quartz.TriggerKey triggerKey(java.lang.String,java.lang.String)>("test_1", "abc");

        r36 = interfaceinvoke $r28.<org.quartz.Scheduler: org.quartz.Trigger$TriggerState getTriggerState(org.quartz.TriggerKey)>($r29);

        $r30 = <org.quartz.Trigger$TriggerState: org.quartz.Trigger$TriggerState NORMAL>;

        $r31 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r30);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r36, $r31);

        $r32 = <org.quartz.Trigger$TriggerState: org.quartz.Trigger$TriggerState PAUSED>;

        $r33 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher not(java.lang.Object)>($r32);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r36, $r33);

        return;
    }

    public void testResumeTriggersBeforeAddJob() throws java.lang.Exception
    {
        org.quartz.integrations.tests.QuartzDatabsePauseAndResumeTest r0;
        org.quartz.JobDetail r1;
        org.quartz.CronTrigger r2;
        org.quartz.Scheduler $r3, $r5, $r14, $r16, $r22, $r24, $r30, $r32;
        org.quartz.impl.matchers.GroupMatcher $r4, $r6, $r23, $r31;
        org.quartz.JobBuilder $r7, $r8;
        org.quartz.TriggerBuilder $r9, $r10, $r12;
        org.quartz.CronScheduleBuilder $r11;
        org.quartz.Trigger $r13;
        org.quartz.TriggerKey $r17, $r25, $r33;
        org.quartz.Trigger$TriggerState $r18, $r20, $r26, $r28, $r34, $r36, r38, r39, r40;
        org.hamcrest.Matcher $r19, $r21, $r27, $r29, $r35, $r37;

        r0 := @this: org.quartz.integrations.tests.QuartzDatabsePauseAndResumeTest;

        $r3 = r0.<org.quartz.integrations.tests.QuartzDatabsePauseAndResumeTest: org.quartz.Scheduler scheduler>;

        $r4 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher triggerGroupEquals(java.lang.String)>("abc");

        interfaceinvoke $r3.<org.quartz.Scheduler: void pauseTriggers(org.quartz.impl.matchers.GroupMatcher)>($r4);

        $r5 = r0.<org.quartz.integrations.tests.QuartzDatabsePauseAndResumeTest: org.quartz.Scheduler scheduler>;

        $r6 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher triggerGroupEquals(java.lang.String)>("abc");

        interfaceinvoke $r5.<org.quartz.Scheduler: void resumeTriggers(org.quartz.impl.matchers.GroupMatcher)>($r6);

        $r7 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob(java.lang.Class)>(class "Lorg/quartz/integrations/tests/HelloJob;");

        $r8 = virtualinvoke $r7.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String)>("test_2");

        r1 = virtualinvoke $r8.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        $r9 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r10 = virtualinvoke $r9.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String,java.lang.String)>("test_2", "abc");

        $r11 = staticinvoke <org.quartz.CronScheduleBuilder: org.quartz.CronScheduleBuilder cronSchedule(java.lang.String)>("* * * * * ?");

        $r12 = virtualinvoke $r10.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>($r11);

        $r13 = virtualinvoke $r12.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        r2 = (org.quartz.CronTrigger) $r13;

        $r14 = r0.<org.quartz.integrations.tests.QuartzDatabsePauseAndResumeTest: org.quartz.Scheduler scheduler>;

        interfaceinvoke $r14.<org.quartz.Scheduler: java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)>(r1, r2);

        $r16 = r0.<org.quartz.integrations.tests.QuartzDatabsePauseAndResumeTest: org.quartz.Scheduler scheduler>;

        $r17 = staticinvoke <org.quartz.TriggerKey: org.quartz.TriggerKey triggerKey(java.lang.String,java.lang.String)>("test_2", "abc");

        r38 = interfaceinvoke $r16.<org.quartz.Scheduler: org.quartz.Trigger$TriggerState getTriggerState(org.quartz.TriggerKey)>($r17);

        $r18 = <org.quartz.Trigger$TriggerState: org.quartz.Trigger$TriggerState NORMAL>;

        $r19 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r18);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r38, $r19);

        $r20 = <org.quartz.Trigger$TriggerState: org.quartz.Trigger$TriggerState PAUSED>;

        $r21 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher not(java.lang.Object)>($r20);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r38, $r21);

        $r22 = r0.<org.quartz.integrations.tests.QuartzDatabsePauseAndResumeTest: org.quartz.Scheduler scheduler>;

        $r23 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher triggerGroupEquals(java.lang.String)>("abc");

        interfaceinvoke $r22.<org.quartz.Scheduler: void pauseTriggers(org.quartz.impl.matchers.GroupMatcher)>($r23);

        $r24 = r0.<org.quartz.integrations.tests.QuartzDatabsePauseAndResumeTest: org.quartz.Scheduler scheduler>;

        $r25 = staticinvoke <org.quartz.TriggerKey: org.quartz.TriggerKey triggerKey(java.lang.String,java.lang.String)>("test_2", "abc");

        r39 = interfaceinvoke $r24.<org.quartz.Scheduler: org.quartz.Trigger$TriggerState getTriggerState(org.quartz.TriggerKey)>($r25);

        $r26 = <org.quartz.Trigger$TriggerState: org.quartz.Trigger$TriggerState PAUSED>;

        $r27 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r26);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r39, $r27);

        $r28 = <org.quartz.Trigger$TriggerState: org.quartz.Trigger$TriggerState NORMAL>;

        $r29 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher not(java.lang.Object)>($r28);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r39, $r29);

        $r30 = r0.<org.quartz.integrations.tests.QuartzDatabsePauseAndResumeTest: org.quartz.Scheduler scheduler>;

        $r31 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher triggerGroupEquals(java.lang.String)>("abc");

        interfaceinvoke $r30.<org.quartz.Scheduler: void resumeTriggers(org.quartz.impl.matchers.GroupMatcher)>($r31);

        $r32 = r0.<org.quartz.integrations.tests.QuartzDatabsePauseAndResumeTest: org.quartz.Scheduler scheduler>;

        $r33 = staticinvoke <org.quartz.TriggerKey: org.quartz.TriggerKey triggerKey(java.lang.String,java.lang.String)>("test_2", "abc");

        r40 = interfaceinvoke $r32.<org.quartz.Scheduler: org.quartz.Trigger$TriggerState getTriggerState(org.quartz.TriggerKey)>($r33);

        $r34 = <org.quartz.Trigger$TriggerState: org.quartz.Trigger$TriggerState NORMAL>;

        $r35 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r34);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r40, $r35);

        $r36 = <org.quartz.Trigger$TriggerState: org.quartz.Trigger$TriggerState PAUSED>;

        $r37 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher not(java.lang.Object)>($r36);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r40, $r37);

        return;
    }

    public void testPauseAndResumeJobs() throws java.lang.Exception
    {
        org.quartz.integrations.tests.QuartzDatabsePauseAndResumeTest r0;
        org.quartz.JobDetail r1;
        org.quartz.CronTrigger r2;
        org.quartz.JobBuilder $r3, $r4;
        org.quartz.TriggerBuilder $r5, $r6, $r8;
        org.quartz.CronScheduleBuilder $r7;
        org.quartz.Trigger $r9;
        org.quartz.Scheduler $r10, $r12, $r18, $r20, $r26, $r28;
        org.quartz.TriggerKey $r13, $r21, $r29;
        org.quartz.Trigger$TriggerState $r14, $r16, $r22, $r24, $r30, $r32, r34, r35, r36;
        org.hamcrest.Matcher $r15, $r17, $r23, $r25, $r31, $r33;
        org.quartz.impl.matchers.GroupMatcher $r19, $r27;

        r0 := @this: org.quartz.integrations.tests.QuartzDatabsePauseAndResumeTest;

        $r3 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob(java.lang.Class)>(class "Lorg/quartz/integrations/tests/HelloJob;");

        $r4 = virtualinvoke $r3.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String,java.lang.String)>("test_3", "abc");

        r1 = virtualinvoke $r4.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        $r5 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r6 = virtualinvoke $r5.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String,java.lang.String)>("test_3", "abc");

        $r7 = staticinvoke <org.quartz.CronScheduleBuilder: org.quartz.CronScheduleBuilder cronSchedule(java.lang.String)>("* * * * * ?");

        $r8 = virtualinvoke $r6.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>($r7);

        $r9 = virtualinvoke $r8.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        r2 = (org.quartz.CronTrigger) $r9;

        $r10 = r0.<org.quartz.integrations.tests.QuartzDatabsePauseAndResumeTest: org.quartz.Scheduler scheduler>;

        interfaceinvoke $r10.<org.quartz.Scheduler: java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)>(r1, r2);

        $r12 = r0.<org.quartz.integrations.tests.QuartzDatabsePauseAndResumeTest: org.quartz.Scheduler scheduler>;

        $r13 = staticinvoke <org.quartz.TriggerKey: org.quartz.TriggerKey triggerKey(java.lang.String,java.lang.String)>("test_3", "abc");

        r34 = interfaceinvoke $r12.<org.quartz.Scheduler: org.quartz.Trigger$TriggerState getTriggerState(org.quartz.TriggerKey)>($r13);

        $r14 = <org.quartz.Trigger$TriggerState: org.quartz.Trigger$TriggerState NORMAL>;

        $r15 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r14);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r34, $r15);

        $r16 = <org.quartz.Trigger$TriggerState: org.quartz.Trigger$TriggerState PAUSED>;

        $r17 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher not(java.lang.Object)>($r16);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r34, $r17);

        $r18 = r0.<org.quartz.integrations.tests.QuartzDatabsePauseAndResumeTest: org.quartz.Scheduler scheduler>;

        $r19 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher jobGroupEquals(java.lang.String)>("abc");

        interfaceinvoke $r18.<org.quartz.Scheduler: void pauseJobs(org.quartz.impl.matchers.GroupMatcher)>($r19);

        $r20 = r0.<org.quartz.integrations.tests.QuartzDatabsePauseAndResumeTest: org.quartz.Scheduler scheduler>;

        $r21 = staticinvoke <org.quartz.TriggerKey: org.quartz.TriggerKey triggerKey(java.lang.String,java.lang.String)>("test_3", "abc");

        r35 = interfaceinvoke $r20.<org.quartz.Scheduler: org.quartz.Trigger$TriggerState getTriggerState(org.quartz.TriggerKey)>($r21);

        $r22 = <org.quartz.Trigger$TriggerState: org.quartz.Trigger$TriggerState PAUSED>;

        $r23 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r22);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r35, $r23);

        $r24 = <org.quartz.Trigger$TriggerState: org.quartz.Trigger$TriggerState NORMAL>;

        $r25 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher not(java.lang.Object)>($r24);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r35, $r25);

        $r26 = r0.<org.quartz.integrations.tests.QuartzDatabsePauseAndResumeTest: org.quartz.Scheduler scheduler>;

        $r27 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher jobGroupEquals(java.lang.String)>("abc");

        interfaceinvoke $r26.<org.quartz.Scheduler: void resumeJobs(org.quartz.impl.matchers.GroupMatcher)>($r27);

        $r28 = r0.<org.quartz.integrations.tests.QuartzDatabsePauseAndResumeTest: org.quartz.Scheduler scheduler>;

        $r29 = staticinvoke <org.quartz.TriggerKey: org.quartz.TriggerKey triggerKey(java.lang.String,java.lang.String)>("test_3", "abc");

        r36 = interfaceinvoke $r28.<org.quartz.Scheduler: org.quartz.Trigger$TriggerState getTriggerState(org.quartz.TriggerKey)>($r29);

        $r30 = <org.quartz.Trigger$TriggerState: org.quartz.Trigger$TriggerState NORMAL>;

        $r31 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r30);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r36, $r31);

        $r32 = <org.quartz.Trigger$TriggerState: org.quartz.Trigger$TriggerState PAUSED>;

        $r33 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher not(java.lang.Object)>($r32);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r36, $r33);

        return;
    }

    public void testResumeJobsBeforeAddJobs() throws java.lang.Exception
    {
        org.quartz.integrations.tests.QuartzDatabsePauseAndResumeTest r0;
        org.quartz.JobDetail r1;
        org.quartz.CronTrigger r2;
        org.quartz.Scheduler $r3, $r5, $r14, $r16, $r22, $r24, $r30, $r32;
        org.quartz.impl.matchers.GroupMatcher $r4, $r6, $r23, $r31;
        org.quartz.JobBuilder $r7, $r8;
        org.quartz.TriggerBuilder $r9, $r10, $r12;
        org.quartz.CronScheduleBuilder $r11;
        org.quartz.Trigger $r13;
        org.quartz.TriggerKey $r17, $r25, $r33;
        org.quartz.Trigger$TriggerState $r18, $r20, $r26, $r28, $r34, $r36, r38, r39, r40;
        org.hamcrest.Matcher $r19, $r21, $r27, $r29, $r35, $r37;

        r0 := @this: org.quartz.integrations.tests.QuartzDatabsePauseAndResumeTest;

        $r3 = r0.<org.quartz.integrations.tests.QuartzDatabsePauseAndResumeTest: org.quartz.Scheduler scheduler>;

        $r4 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher jobGroupEquals(java.lang.String)>("abc");

        interfaceinvoke $r3.<org.quartz.Scheduler: void pauseJobs(org.quartz.impl.matchers.GroupMatcher)>($r4);

        $r5 = r0.<org.quartz.integrations.tests.QuartzDatabsePauseAndResumeTest: org.quartz.Scheduler scheduler>;

        $r6 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher jobGroupEquals(java.lang.String)>("abc");

        interfaceinvoke $r5.<org.quartz.Scheduler: void resumeJobs(org.quartz.impl.matchers.GroupMatcher)>($r6);

        $r7 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob(java.lang.Class)>(class "Lorg/quartz/integrations/tests/HelloJob;");

        $r8 = virtualinvoke $r7.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String,java.lang.String)>("test_4", "abc");

        r1 = virtualinvoke $r8.<org.quartz.JobBuilder: org.quartz.JobDetail build()>();

        $r9 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>();

        $r10 = virtualinvoke $r9.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String,java.lang.String)>("test_4", "abc");

        $r11 = staticinvoke <org.quartz.CronScheduleBuilder: org.quartz.CronScheduleBuilder cronSchedule(java.lang.String)>("* * * * * ?");

        $r12 = virtualinvoke $r10.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>($r11);

        $r13 = virtualinvoke $r12.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>();

        r2 = (org.quartz.CronTrigger) $r13;

        $r14 = r0.<org.quartz.integrations.tests.QuartzDatabsePauseAndResumeTest: org.quartz.Scheduler scheduler>;

        interfaceinvoke $r14.<org.quartz.Scheduler: java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)>(r1, r2);

        $r16 = r0.<org.quartz.integrations.tests.QuartzDatabsePauseAndResumeTest: org.quartz.Scheduler scheduler>;

        $r17 = staticinvoke <org.quartz.TriggerKey: org.quartz.TriggerKey triggerKey(java.lang.String,java.lang.String)>("test_4", "abc");

        r38 = interfaceinvoke $r16.<org.quartz.Scheduler: org.quartz.Trigger$TriggerState getTriggerState(org.quartz.TriggerKey)>($r17);

        $r18 = <org.quartz.Trigger$TriggerState: org.quartz.Trigger$TriggerState NORMAL>;

        $r19 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r18);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r38, $r19);

        $r20 = <org.quartz.Trigger$TriggerState: org.quartz.Trigger$TriggerState PAUSED>;

        $r21 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher not(java.lang.Object)>($r20);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r38, $r21);

        $r22 = r0.<org.quartz.integrations.tests.QuartzDatabsePauseAndResumeTest: org.quartz.Scheduler scheduler>;

        $r23 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher jobGroupEquals(java.lang.String)>("abc");

        interfaceinvoke $r22.<org.quartz.Scheduler: void pauseJobs(org.quartz.impl.matchers.GroupMatcher)>($r23);

        $r24 = r0.<org.quartz.integrations.tests.QuartzDatabsePauseAndResumeTest: org.quartz.Scheduler scheduler>;

        $r25 = staticinvoke <org.quartz.TriggerKey: org.quartz.TriggerKey triggerKey(java.lang.String,java.lang.String)>("test_4", "abc");

        r39 = interfaceinvoke $r24.<org.quartz.Scheduler: org.quartz.Trigger$TriggerState getTriggerState(org.quartz.TriggerKey)>($r25);

        $r26 = <org.quartz.Trigger$TriggerState: org.quartz.Trigger$TriggerState PAUSED>;

        $r27 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r26);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r39, $r27);

        $r28 = <org.quartz.Trigger$TriggerState: org.quartz.Trigger$TriggerState NORMAL>;

        $r29 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher not(java.lang.Object)>($r28);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r39, $r29);

        $r30 = r0.<org.quartz.integrations.tests.QuartzDatabsePauseAndResumeTest: org.quartz.Scheduler scheduler>;

        $r31 = staticinvoke <org.quartz.impl.matchers.GroupMatcher: org.quartz.impl.matchers.GroupMatcher jobGroupEquals(java.lang.String)>("abc");

        interfaceinvoke $r30.<org.quartz.Scheduler: void resumeJobs(org.quartz.impl.matchers.GroupMatcher)>($r31);

        $r32 = r0.<org.quartz.integrations.tests.QuartzDatabsePauseAndResumeTest: org.quartz.Scheduler scheduler>;

        $r33 = staticinvoke <org.quartz.TriggerKey: org.quartz.TriggerKey triggerKey(java.lang.String,java.lang.String)>("test_4", "abc");

        r40 = interfaceinvoke $r32.<org.quartz.Scheduler: org.quartz.Trigger$TriggerState getTriggerState(org.quartz.TriggerKey)>($r33);

        $r34 = <org.quartz.Trigger$TriggerState: org.quartz.Trigger$TriggerState NORMAL>;

        $r35 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r34);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r40, $r35);

        $r36 = <org.quartz.Trigger$TriggerState: org.quartz.Trigger$TriggerState PAUSED>;

        $r37 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher not(java.lang.Object)>($r36);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r40, $r37);

        return;
    }
}
