public class org.quartz.DateBuilder extends java.lang.Object
{
    public static final int SUNDAY;
    public static final int MONDAY;
    public static final int TUESDAY;
    public static final int WEDNESDAY;
    public static final int THURSDAY;
    public static final int FRIDAY;
    public static final int SATURDAY;
    public static final int JANUARY;
    public static final int FEBRUARY;
    public static final int MARCH;
    public static final int APRIL;
    public static final int MAY;
    public static final int JUNE;
    public static final int JULY;
    public static final int AUGUST;
    public static final int SEPTEMBER;
    public static final int OCTOBER;
    public static final int NOVEMBER;
    public static final int DECEMBER;
    public static final long MILLISECONDS_IN_MINUTE;
    public static final long MILLISECONDS_IN_HOUR;
    public static final long SECONDS_IN_MOST_DAYS;
    public static final long MILLISECONDS_IN_DAY;
    private int month;
    private int day;
    private int year;
    private int hour;
    private int minute;
    private int second;
    private java.util.TimeZone tz;
    private java.util.Locale lc;
    private static final int MAX_YEAR;

    private void <init>()
    {
        org.quartz.DateBuilder r0;
        java.util.Calendar r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: org.quartz.DateBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r1 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $i0 = virtualinvoke r1.<java.util.Calendar: int get(int)>(2);

        $i1 = $i0 + 1;

        r0.<org.quartz.DateBuilder: int month> = $i1;

        $i2 = virtualinvoke r1.<java.util.Calendar: int get(int)>(5);

        r0.<org.quartz.DateBuilder: int day> = $i2;

        $i3 = virtualinvoke r1.<java.util.Calendar: int get(int)>(1);

        r0.<org.quartz.DateBuilder: int year> = $i3;

        $i4 = virtualinvoke r1.<java.util.Calendar: int get(int)>(11);

        r0.<org.quartz.DateBuilder: int hour> = $i4;

        $i5 = virtualinvoke r1.<java.util.Calendar: int get(int)>(12);

        r0.<org.quartz.DateBuilder: int minute> = $i5;

        $i6 = virtualinvoke r1.<java.util.Calendar: int get(int)>(13);

        r0.<org.quartz.DateBuilder: int second> = $i6;

        return;
    }

    private void <init>(java.util.TimeZone)
    {
        org.quartz.DateBuilder r0;
        java.util.TimeZone r1;
        java.util.Calendar r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: org.quartz.DateBuilder;

        r1 := @parameter0: java.util.TimeZone;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r2 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>(r1);

        r0.<org.quartz.DateBuilder: java.util.TimeZone tz> = r1;

        $i0 = virtualinvoke r2.<java.util.Calendar: int get(int)>(2);

        $i1 = $i0 + 1;

        r0.<org.quartz.DateBuilder: int month> = $i1;

        $i2 = virtualinvoke r2.<java.util.Calendar: int get(int)>(5);

        r0.<org.quartz.DateBuilder: int day> = $i2;

        $i3 = virtualinvoke r2.<java.util.Calendar: int get(int)>(1);

        r0.<org.quartz.DateBuilder: int year> = $i3;

        $i4 = virtualinvoke r2.<java.util.Calendar: int get(int)>(11);

        r0.<org.quartz.DateBuilder: int hour> = $i4;

        $i5 = virtualinvoke r2.<java.util.Calendar: int get(int)>(12);

        r0.<org.quartz.DateBuilder: int minute> = $i5;

        $i6 = virtualinvoke r2.<java.util.Calendar: int get(int)>(13);

        r0.<org.quartz.DateBuilder: int second> = $i6;

        return;
    }

    private void <init>(java.util.Locale)
    {
        org.quartz.DateBuilder r0;
        java.util.Locale r1;
        java.util.Calendar r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: org.quartz.DateBuilder;

        r1 := @parameter0: java.util.Locale;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r2 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>(r1);

        r0.<org.quartz.DateBuilder: java.util.Locale lc> = r1;

        $i0 = virtualinvoke r2.<java.util.Calendar: int get(int)>(2);

        $i1 = $i0 + 1;

        r0.<org.quartz.DateBuilder: int month> = $i1;

        $i2 = virtualinvoke r2.<java.util.Calendar: int get(int)>(5);

        r0.<org.quartz.DateBuilder: int day> = $i2;

        $i3 = virtualinvoke r2.<java.util.Calendar: int get(int)>(1);

        r0.<org.quartz.DateBuilder: int year> = $i3;

        $i4 = virtualinvoke r2.<java.util.Calendar: int get(int)>(11);

        r0.<org.quartz.DateBuilder: int hour> = $i4;

        $i5 = virtualinvoke r2.<java.util.Calendar: int get(int)>(12);

        r0.<org.quartz.DateBuilder: int minute> = $i5;

        $i6 = virtualinvoke r2.<java.util.Calendar: int get(int)>(13);

        r0.<org.quartz.DateBuilder: int second> = $i6;

        return;
    }

    private void <init>(java.util.TimeZone, java.util.Locale)
    {
        org.quartz.DateBuilder r0;
        java.util.TimeZone r1;
        java.util.Locale r2;
        java.util.Calendar r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: org.quartz.DateBuilder;

        r1 := @parameter0: java.util.TimeZone;

        r2 := @parameter1: java.util.Locale;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r3 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone,java.util.Locale)>(r1, r2);

        r0.<org.quartz.DateBuilder: java.util.TimeZone tz> = r1;

        r0.<org.quartz.DateBuilder: java.util.Locale lc> = r2;

        $i0 = virtualinvoke r3.<java.util.Calendar: int get(int)>(2);

        $i1 = $i0 + 1;

        r0.<org.quartz.DateBuilder: int month> = $i1;

        $i2 = virtualinvoke r3.<java.util.Calendar: int get(int)>(5);

        r0.<org.quartz.DateBuilder: int day> = $i2;

        $i3 = virtualinvoke r3.<java.util.Calendar: int get(int)>(1);

        r0.<org.quartz.DateBuilder: int year> = $i3;

        $i4 = virtualinvoke r3.<java.util.Calendar: int get(int)>(11);

        r0.<org.quartz.DateBuilder: int hour> = $i4;

        $i5 = virtualinvoke r3.<java.util.Calendar: int get(int)>(12);

        r0.<org.quartz.DateBuilder: int minute> = $i5;

        $i6 = virtualinvoke r3.<java.util.Calendar: int get(int)>(13);

        r0.<org.quartz.DateBuilder: int second> = $i6;

        return;
    }

    public static org.quartz.DateBuilder newDate()
    {
        org.quartz.DateBuilder $r0;

        $r0 = new org.quartz.DateBuilder;

        specialinvoke $r0.<org.quartz.DateBuilder: void <init>()>();

        return $r0;
    }

    public static org.quartz.DateBuilder newDateInTimezone(java.util.TimeZone)
    {
        java.util.TimeZone r0;
        org.quartz.DateBuilder $r1;

        r0 := @parameter0: java.util.TimeZone;

        $r1 = new org.quartz.DateBuilder;

        specialinvoke $r1.<org.quartz.DateBuilder: void <init>(java.util.TimeZone)>(r0);

        return $r1;
    }

    public static org.quartz.DateBuilder newDateInLocale(java.util.Locale)
    {
        java.util.Locale r0;
        org.quartz.DateBuilder $r1;

        r0 := @parameter0: java.util.Locale;

        $r1 = new org.quartz.DateBuilder;

        specialinvoke $r1.<org.quartz.DateBuilder: void <init>(java.util.Locale)>(r0);

        return $r1;
    }

    public static org.quartz.DateBuilder newDateInTimeZoneAndLocale(java.util.TimeZone, java.util.Locale)
    {
        java.util.TimeZone r0;
        java.util.Locale r1;
        org.quartz.DateBuilder $r2;

        r0 := @parameter0: java.util.TimeZone;

        r1 := @parameter1: java.util.Locale;

        $r2 = new org.quartz.DateBuilder;

        specialinvoke $r2.<org.quartz.DateBuilder: void <init>(java.util.TimeZone,java.util.Locale)>(r0, r1);

        return $r2;
    }

    public java.util.Date build()
    {
        org.quartz.DateBuilder r0;
        java.util.TimeZone $r1, $r2, $r5, $r8;
        java.util.Locale $r3, $r4, $r6, $r7;
        java.util.Calendar r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.util.Date $r10;

        r0 := @this: org.quartz.DateBuilder;

        $r1 = r0.<org.quartz.DateBuilder: java.util.TimeZone tz>;

        if $r1 == null goto label1;

        $r6 = r0.<org.quartz.DateBuilder: java.util.Locale lc>;

        if $r6 == null goto label1;

        $r8 = r0.<org.quartz.DateBuilder: java.util.TimeZone tz>;

        $r7 = r0.<org.quartz.DateBuilder: java.util.Locale lc>;

        r9 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone,java.util.Locale)>($r8, $r7);

        goto label4;

     label1:
        $r2 = r0.<org.quartz.DateBuilder: java.util.TimeZone tz>;

        if $r2 == null goto label2;

        $r5 = r0.<org.quartz.DateBuilder: java.util.TimeZone tz>;

        r9 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>($r5);

        goto label4;

     label2:
        $r3 = r0.<org.quartz.DateBuilder: java.util.Locale lc>;

        if $r3 == null goto label3;

        $r4 = r0.<org.quartz.DateBuilder: java.util.Locale lc>;

        r9 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>($r4);

        goto label4;

     label3:
        r9 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

     label4:
        $i0 = r0.<org.quartz.DateBuilder: int year>;

        virtualinvoke r9.<java.util.Calendar: void set(int,int)>(1, $i0);

        $i1 = r0.<org.quartz.DateBuilder: int month>;

        $i2 = $i1 - 1;

        virtualinvoke r9.<java.util.Calendar: void set(int,int)>(2, $i2);

        $i3 = r0.<org.quartz.DateBuilder: int day>;

        virtualinvoke r9.<java.util.Calendar: void set(int,int)>(5, $i3);

        $i4 = r0.<org.quartz.DateBuilder: int hour>;

        virtualinvoke r9.<java.util.Calendar: void set(int,int)>(11, $i4);

        $i5 = r0.<org.quartz.DateBuilder: int minute>;

        virtualinvoke r9.<java.util.Calendar: void set(int,int)>(12, $i5);

        $i6 = r0.<org.quartz.DateBuilder: int second>;

        virtualinvoke r9.<java.util.Calendar: void set(int,int)>(13, $i6);

        virtualinvoke r9.<java.util.Calendar: void set(int,int)>(14, 0);

        $r10 = virtualinvoke r9.<java.util.Calendar: java.util.Date getTime()>();

        return $r10;
    }

    public org.quartz.DateBuilder atHourOfDay(int)
    {
        org.quartz.DateBuilder r0;
        int i0;

        r0 := @this: org.quartz.DateBuilder;

        i0 := @parameter0: int;

        staticinvoke <org.quartz.DateBuilder: void validateHour(int)>(i0);

        r0.<org.quartz.DateBuilder: int hour> = i0;

        return r0;
    }

    public org.quartz.DateBuilder atMinute(int)
    {
        org.quartz.DateBuilder r0;
        int i0;

        r0 := @this: org.quartz.DateBuilder;

        i0 := @parameter0: int;

        staticinvoke <org.quartz.DateBuilder: void validateMinute(int)>(i0);

        r0.<org.quartz.DateBuilder: int minute> = i0;

        return r0;
    }

    public org.quartz.DateBuilder atSecond(int)
    {
        org.quartz.DateBuilder r0;
        int i0;

        r0 := @this: org.quartz.DateBuilder;

        i0 := @parameter0: int;

        staticinvoke <org.quartz.DateBuilder: void validateSecond(int)>(i0);

        r0.<org.quartz.DateBuilder: int second> = i0;

        return r0;
    }

    public org.quartz.DateBuilder atHourMinuteAndSecond(int, int, int)
    {
        org.quartz.DateBuilder r0;
        int i0, i1, i2;

        r0 := @this: org.quartz.DateBuilder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        staticinvoke <org.quartz.DateBuilder: void validateHour(int)>(i0);

        staticinvoke <org.quartz.DateBuilder: void validateMinute(int)>(i1);

        staticinvoke <org.quartz.DateBuilder: void validateSecond(int)>(i2);

        r0.<org.quartz.DateBuilder: int hour> = i0;

        r0.<org.quartz.DateBuilder: int second> = i2;

        r0.<org.quartz.DateBuilder: int minute> = i1;

        return r0;
    }

    public org.quartz.DateBuilder onDay(int)
    {
        org.quartz.DateBuilder r0;
        int i0;

        r0 := @this: org.quartz.DateBuilder;

        i0 := @parameter0: int;

        staticinvoke <org.quartz.DateBuilder: void validateDayOfMonth(int)>(i0);

        r0.<org.quartz.DateBuilder: int day> = i0;

        return r0;
    }

    public org.quartz.DateBuilder inMonth(int)
    {
        org.quartz.DateBuilder r0;
        int i0;

        r0 := @this: org.quartz.DateBuilder;

        i0 := @parameter0: int;

        staticinvoke <org.quartz.DateBuilder: void validateMonth(int)>(i0);

        r0.<org.quartz.DateBuilder: int month> = i0;

        return r0;
    }

    public org.quartz.DateBuilder inMonthOnDay(int, int)
    {
        org.quartz.DateBuilder r0;
        int i0, i1;

        r0 := @this: org.quartz.DateBuilder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        staticinvoke <org.quartz.DateBuilder: void validateMonth(int)>(i0);

        staticinvoke <org.quartz.DateBuilder: void validateDayOfMonth(int)>(i1);

        r0.<org.quartz.DateBuilder: int month> = i0;

        r0.<org.quartz.DateBuilder: int day> = i1;

        return r0;
    }

    public org.quartz.DateBuilder inYear(int)
    {
        org.quartz.DateBuilder r0;
        int i0;

        r0 := @this: org.quartz.DateBuilder;

        i0 := @parameter0: int;

        staticinvoke <org.quartz.DateBuilder: void validateYear(int)>(i0);

        r0.<org.quartz.DateBuilder: int year> = i0;

        return r0;
    }

    public org.quartz.DateBuilder inTimeZone(java.util.TimeZone)
    {
        org.quartz.DateBuilder r0;
        java.util.TimeZone r1;

        r0 := @this: org.quartz.DateBuilder;

        r1 := @parameter0: java.util.TimeZone;

        r0.<org.quartz.DateBuilder: java.util.TimeZone tz> = r1;

        return r0;
    }

    public org.quartz.DateBuilder inLocale(java.util.Locale)
    {
        org.quartz.DateBuilder r0;
        java.util.Locale r1;

        r0 := @this: org.quartz.DateBuilder;

        r1 := @parameter0: java.util.Locale;

        r0.<org.quartz.DateBuilder: java.util.Locale lc> = r1;

        return r0;
    }

    public static java.util.Date futureDate(int, org.quartz.DateBuilder$IntervalUnit)
    {
        int i0, $i1;
        org.quartz.DateBuilder$IntervalUnit r0;
        java.util.Calendar r1;
        java.util.Date $r2, $r3;

        i0 := @parameter0: int;

        r0 := @parameter1: org.quartz.DateBuilder$IntervalUnit;

        r1 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $r2 = new java.util.Date;

        specialinvoke $r2.<java.util.Date: void <init>()>();

        virtualinvoke r1.<java.util.Calendar: void setTime(java.util.Date)>($r2);

        virtualinvoke r1.<java.util.Calendar: void setLenient(boolean)>(1);

        $i1 = staticinvoke <org.quartz.DateBuilder: int translate(org.quartz.DateBuilder$IntervalUnit)>(r0);

        virtualinvoke r1.<java.util.Calendar: void add(int,int)>($i1, i0);

        $r3 = virtualinvoke r1.<java.util.Calendar: java.util.Date getTime()>();

        return $r3;
    }

    private static int translate(org.quartz.DateBuilder$IntervalUnit)
    {
        org.quartz.DateBuilder$IntervalUnit r0;
        int[] $r1;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r2;

        r0 := @parameter0: org.quartz.DateBuilder$IntervalUnit;

        $r1 = <org.quartz.DateBuilder$1: int[] $SwitchMap$org$quartz$DateBuilder$IntervalUnit>;

        $i0 = virtualinvoke r0.<org.quartz.DateBuilder$IntervalUnit: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            case 5: goto label5;
            case 6: goto label6;
            case 7: goto label7;
            case 8: goto label8;
            default: goto label9;
        };

     label1:
        return 6;

     label2:
        return 11;

     label3:
        return 12;

     label4:
        return 2;

     label5:
        return 13;

     label6:
        return 14;

     label7:
        return 3;

     label8:
        return 1;

     label9:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unknown IntervalUnit");

        throw $r2;
    }

    public static java.util.Date tomorrowAt(int, int, int)
    {
        int i0, i1, i2;
        java.util.Calendar r1;
        java.util.Date $r2, $r3;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        staticinvoke <org.quartz.DateBuilder: void validateSecond(int)>(i2);

        staticinvoke <org.quartz.DateBuilder: void validateMinute(int)>(i1);

        staticinvoke <org.quartz.DateBuilder: void validateHour(int)>(i0);

        $r2 = new java.util.Date;

        specialinvoke $r2.<java.util.Date: void <init>()>();

        r1 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r1.<java.util.Calendar: void setTime(java.util.Date)>($r2);

        virtualinvoke r1.<java.util.Calendar: void setLenient(boolean)>(1);

        virtualinvoke r1.<java.util.Calendar: void add(int,int)>(6, 1);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(11, i0);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(12, i1);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(13, i2);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(14, 0);

        $r3 = virtualinvoke r1.<java.util.Calendar: java.util.Date getTime()>();

        return $r3;
    }

    public static java.util.Date todayAt(int, int, int)
    {
        int i0, i1, i2;
        java.util.Date $r0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r0 = staticinvoke <org.quartz.DateBuilder: java.util.Date dateOf(int,int,int)>(i0, i1, i2);

        return $r0;
    }

    public static java.util.Date dateOf(int, int, int)
    {
        int i0, i1, i2;
        java.util.Calendar r1;
        java.util.Date $r2, $r3;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        staticinvoke <org.quartz.DateBuilder: void validateSecond(int)>(i2);

        staticinvoke <org.quartz.DateBuilder: void validateMinute(int)>(i1);

        staticinvoke <org.quartz.DateBuilder: void validateHour(int)>(i0);

        $r2 = new java.util.Date;

        specialinvoke $r2.<java.util.Date: void <init>()>();

        r1 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r1.<java.util.Calendar: void setTime(java.util.Date)>($r2);

        virtualinvoke r1.<java.util.Calendar: void setLenient(boolean)>(1);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(11, i0);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(12, i1);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(13, i2);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(14, 0);

        $r3 = virtualinvoke r1.<java.util.Calendar: java.util.Date getTime()>();

        return $r3;
    }

    public static java.util.Date dateOf(int, int, int, int, int)
    {
        int i0, i1, i2, i3, i4, $i5;
        java.util.Calendar r1;
        java.util.Date $r2, $r3;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        staticinvoke <org.quartz.DateBuilder: void validateSecond(int)>(i2);

        staticinvoke <org.quartz.DateBuilder: void validateMinute(int)>(i1);

        staticinvoke <org.quartz.DateBuilder: void validateHour(int)>(i0);

        staticinvoke <org.quartz.DateBuilder: void validateDayOfMonth(int)>(i3);

        staticinvoke <org.quartz.DateBuilder: void validateMonth(int)>(i4);

        $r2 = new java.util.Date;

        specialinvoke $r2.<java.util.Date: void <init>()>();

        r1 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r1.<java.util.Calendar: void setTime(java.util.Date)>($r2);

        $i5 = i4 - 1;

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(2, $i5);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(5, i3);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(11, i0);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(12, i1);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(13, i2);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(14, 0);

        $r3 = virtualinvoke r1.<java.util.Calendar: java.util.Date getTime()>();

        return $r3;
    }

    public static java.util.Date dateOf(int, int, int, int, int, int)
    {
        int i0, i1, i2, i3, i4, i5, $i6;
        java.util.Calendar r1;
        java.util.Date $r2, $r3;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        staticinvoke <org.quartz.DateBuilder: void validateSecond(int)>(i2);

        staticinvoke <org.quartz.DateBuilder: void validateMinute(int)>(i1);

        staticinvoke <org.quartz.DateBuilder: void validateHour(int)>(i0);

        staticinvoke <org.quartz.DateBuilder: void validateDayOfMonth(int)>(i3);

        staticinvoke <org.quartz.DateBuilder: void validateMonth(int)>(i4);

        staticinvoke <org.quartz.DateBuilder: void validateYear(int)>(i5);

        $r2 = new java.util.Date;

        specialinvoke $r2.<java.util.Date: void <init>()>();

        r1 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r1.<java.util.Calendar: void setTime(java.util.Date)>($r2);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(1, i5);

        $i6 = i4 - 1;

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(2, $i6);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(5, i3);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(11, i0);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(12, i1);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(13, i2);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(14, 0);

        $r3 = virtualinvoke r1.<java.util.Calendar: java.util.Date getTime()>();

        return $r3;
    }

    public static java.util.Date evenHourDateAfterNow()
    {
        java.util.Date $r0;

        $r0 = staticinvoke <org.quartz.DateBuilder: java.util.Date evenHourDate(java.util.Date)>(null);

        return $r0;
    }

    public static java.util.Date evenHourDate(java.util.Date)
    {
        java.util.Calendar r0;
        int $i0, $i1;
        java.util.Date $r1, $r2, r3;

        r3 := @parameter0: java.util.Date;

        if r3 != null goto label1;

        $r2 = new java.util.Date;

        specialinvoke $r2.<java.util.Date: void <init>()>();

        r3 = $r2;

     label1:
        r0 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r0.<java.util.Calendar: void setTime(java.util.Date)>(r3);

        virtualinvoke r0.<java.util.Calendar: void setLenient(boolean)>(1);

        $i0 = virtualinvoke r0.<java.util.Calendar: int get(int)>(11);

        $i1 = $i0 + 1;

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(11, $i1);

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(12, 0);

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(13, 0);

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(14, 0);

        $r1 = virtualinvoke r0.<java.util.Calendar: java.util.Date getTime()>();

        return $r1;
    }

    public static java.util.Date evenHourDateBefore(java.util.Date)
    {
        java.util.Calendar r0;
        java.util.Date $r1, $r2, r3;

        r3 := @parameter0: java.util.Date;

        if r3 != null goto label1;

        $r2 = new java.util.Date;

        specialinvoke $r2.<java.util.Date: void <init>()>();

        r3 = $r2;

     label1:
        r0 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r0.<java.util.Calendar: void setTime(java.util.Date)>(r3);

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(12, 0);

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(13, 0);

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(14, 0);

        $r1 = virtualinvoke r0.<java.util.Calendar: java.util.Date getTime()>();

        return $r1;
    }

    public static java.util.Date evenMinuteDateAfterNow()
    {
        java.util.Date $r0;

        $r0 = staticinvoke <org.quartz.DateBuilder: java.util.Date evenMinuteDate(java.util.Date)>(null);

        return $r0;
    }

    public static java.util.Date evenMinuteDate(java.util.Date)
    {
        java.util.Calendar r0;
        int $i0, $i1;
        java.util.Date $r1, $r2, r3;

        r3 := @parameter0: java.util.Date;

        if r3 != null goto label1;

        $r2 = new java.util.Date;

        specialinvoke $r2.<java.util.Date: void <init>()>();

        r3 = $r2;

     label1:
        r0 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r0.<java.util.Calendar: void setTime(java.util.Date)>(r3);

        virtualinvoke r0.<java.util.Calendar: void setLenient(boolean)>(1);

        $i0 = virtualinvoke r0.<java.util.Calendar: int get(int)>(12);

        $i1 = $i0 + 1;

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(12, $i1);

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(13, 0);

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(14, 0);

        $r1 = virtualinvoke r0.<java.util.Calendar: java.util.Date getTime()>();

        return $r1;
    }

    public static java.util.Date evenMinuteDateBefore(java.util.Date)
    {
        java.util.Calendar r0;
        java.util.Date $r1, $r2, r3;

        r3 := @parameter0: java.util.Date;

        if r3 != null goto label1;

        $r2 = new java.util.Date;

        specialinvoke $r2.<java.util.Date: void <init>()>();

        r3 = $r2;

     label1:
        r0 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r0.<java.util.Calendar: void setTime(java.util.Date)>(r3);

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(13, 0);

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(14, 0);

        $r1 = virtualinvoke r0.<java.util.Calendar: java.util.Date getTime()>();

        return $r1;
    }

    public static java.util.Date evenSecondDateAfterNow()
    {
        java.util.Date $r0;

        $r0 = staticinvoke <org.quartz.DateBuilder: java.util.Date evenSecondDate(java.util.Date)>(null);

        return $r0;
    }

    public static java.util.Date evenSecondDate(java.util.Date)
    {
        java.util.Calendar r0;
        int $i0, $i1;
        java.util.Date $r1, $r2, r3;

        r3 := @parameter0: java.util.Date;

        if r3 != null goto label1;

        $r2 = new java.util.Date;

        specialinvoke $r2.<java.util.Date: void <init>()>();

        r3 = $r2;

     label1:
        r0 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r0.<java.util.Calendar: void setTime(java.util.Date)>(r3);

        virtualinvoke r0.<java.util.Calendar: void setLenient(boolean)>(1);

        $i0 = virtualinvoke r0.<java.util.Calendar: int get(int)>(13);

        $i1 = $i0 + 1;

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(13, $i1);

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(14, 0);

        $r1 = virtualinvoke r0.<java.util.Calendar: java.util.Date getTime()>();

        return $r1;
    }

    public static java.util.Date evenSecondDateBefore(java.util.Date)
    {
        java.util.Calendar r0;
        java.util.Date $r1, $r2, r3;

        r3 := @parameter0: java.util.Date;

        if r3 != null goto label1;

        $r2 = new java.util.Date;

        specialinvoke $r2.<java.util.Date: void <init>()>();

        r3 = $r2;

     label1:
        r0 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r0.<java.util.Calendar: void setTime(java.util.Date)>(r3);

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(14, 0);

        $r1 = virtualinvoke r0.<java.util.Calendar: java.util.Date getTime()>();

        return $r1;
    }

    public static java.util.Date nextGivenMinuteDate(java.util.Date, int)
    {
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8;
        java.util.Calendar r0;
        java.lang.IllegalArgumentException $r1;
        java.util.Date $r2, $r3, $r4, $r5, r6;

        r6 := @parameter0: java.util.Date;

        i0 := @parameter1: int;

        if i0 < 0 goto label1;

        if i0 <= 59 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("minuteBase must be >=0 and <= 59");

        throw $r1;

     label2:
        if r6 != null goto label3;

        $r5 = new java.util.Date;

        specialinvoke $r5.<java.util.Date: void <init>()>();

        r6 = $r5;

     label3:
        r0 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r0.<java.util.Calendar: void setTime(java.util.Date)>(r6);

        virtualinvoke r0.<java.util.Calendar: void setLenient(boolean)>(1);

        if i0 != 0 goto label4;

        $i7 = virtualinvoke r0.<java.util.Calendar: int get(int)>(11);

        $i8 = $i7 + 1;

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(11, $i8);

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(12, 0);

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(13, 0);

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(14, 0);

        $r4 = virtualinvoke r0.<java.util.Calendar: java.util.Date getTime()>();

        return $r4;

     label4:
        i1 = virtualinvoke r0.<java.util.Calendar: int get(int)>(12);

        i2 = i1 / i0;

        $i4 = i2 + 1;

        i3 = i0 * $i4;

        if i3 >= 60 goto label5;

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(12, i3);

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(13, 0);

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(14, 0);

        $r3 = virtualinvoke r0.<java.util.Calendar: java.util.Date getTime()>();

        return $r3;

     label5:
        $i5 = virtualinvoke r0.<java.util.Calendar: int get(int)>(11);

        $i6 = $i5 + 1;

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(11, $i6);

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(12, 0);

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(13, 0);

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(14, 0);

        $r2 = virtualinvoke r0.<java.util.Calendar: java.util.Date getTime()>();

        return $r2;
    }

    public static java.util.Date nextGivenSecondDate(java.util.Date, int)
    {
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8;
        java.util.Calendar r0;
        java.lang.IllegalArgumentException $r1;
        java.util.Date $r2, $r3, $r4, $r5, r6;

        r6 := @parameter0: java.util.Date;

        i0 := @parameter1: int;

        if i0 < 0 goto label1;

        if i0 <= 59 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("secondBase must be >=0 and <= 59");

        throw $r1;

     label2:
        if r6 != null goto label3;

        $r5 = new java.util.Date;

        specialinvoke $r5.<java.util.Date: void <init>()>();

        r6 = $r5;

     label3:
        r0 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r0.<java.util.Calendar: void setTime(java.util.Date)>(r6);

        virtualinvoke r0.<java.util.Calendar: void setLenient(boolean)>(1);

        if i0 != 0 goto label4;

        $i7 = virtualinvoke r0.<java.util.Calendar: int get(int)>(12);

        $i8 = $i7 + 1;

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(12, $i8);

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(13, 0);

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(14, 0);

        $r4 = virtualinvoke r0.<java.util.Calendar: java.util.Date getTime()>();

        return $r4;

     label4:
        i1 = virtualinvoke r0.<java.util.Calendar: int get(int)>(13);

        i2 = i1 / i0;

        $i4 = i2 + 1;

        i3 = i0 * $i4;

        if i3 >= 60 goto label5;

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(13, i3);

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(14, 0);

        $r3 = virtualinvoke r0.<java.util.Calendar: java.util.Date getTime()>();

        return $r3;

     label5:
        $i5 = virtualinvoke r0.<java.util.Calendar: int get(int)>(12);

        $i6 = $i5 + 1;

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(12, $i6);

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(13, 0);

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(14, 0);

        $r2 = virtualinvoke r0.<java.util.Calendar: java.util.Date getTime()>();

        return $r2;
    }

    public static java.util.Date translateTime(java.util.Date, java.util.TimeZone, java.util.TimeZone)
    {
        java.util.Date r0, $r4;
        java.util.TimeZone r1, r2;
        int i0, $i2, $i4;
        long $l1, $l3, $l5, $l6, $l7;

        r0 := @parameter0: java.util.Date;

        r1 := @parameter1: java.util.TimeZone;

        r2 := @parameter2: java.util.TimeZone;

        $r4 = new java.util.Date;

        specialinvoke $r4.<java.util.Date: void <init>()>();

        $l1 = virtualinvoke r0.<java.util.Date: long getTime()>();

        $i2 = virtualinvoke r2.<java.util.TimeZone: int getOffset(long)>($l1);

        $l3 = virtualinvoke r0.<java.util.Date: long getTime()>();

        $i4 = virtualinvoke r1.<java.util.TimeZone: int getOffset(long)>($l3);

        i0 = $i2 - $i4;

        $l5 = virtualinvoke r0.<java.util.Date: long getTime()>();

        $l6 = (long) i0;

        $l7 = $l5 - $l6;

        virtualinvoke $r4.<java.util.Date: void setTime(long)>($l7);

        return $r4;
    }

    public static void validateDayOfWeek(int)
    {
        int i0;
        java.lang.IllegalArgumentException $r0;

        i0 := @parameter0: int;

        if i0 < 1 goto label1;

        if i0 <= 7 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid day of week.");

        throw $r0;

     label2:
        return;
    }

    public static void validateHour(int)
    {
        int i0;
        java.lang.IllegalArgumentException $r0;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        if i0 <= 23 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid hour (must be >= 0 and <= 23).");

        throw $r0;

     label2:
        return;
    }

    public static void validateMinute(int)
    {
        int i0;
        java.lang.IllegalArgumentException $r0;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        if i0 <= 59 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid minute (must be >= 0 and <= 59).");

        throw $r0;

     label2:
        return;
    }

    public static void validateSecond(int)
    {
        int i0;
        java.lang.IllegalArgumentException $r0;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        if i0 <= 59 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid second (must be >= 0 and <= 59).");

        throw $r0;

     label2:
        return;
    }

    public static void validateDayOfMonth(int)
    {
        int i0;
        java.lang.IllegalArgumentException $r0;

        i0 := @parameter0: int;

        if i0 < 1 goto label1;

        if i0 <= 31 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid day of month.");

        throw $r0;

     label2:
        return;
    }

    public static void validateMonth(int)
    {
        int i0;
        java.lang.IllegalArgumentException $r0;

        i0 := @parameter0: int;

        if i0 < 1 goto label1;

        if i0 <= 12 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid month (must be >= 1 and <= 12.");

        throw $r0;

     label2:
        return;
    }

    public static void validateYear(int)
    {
        int i0, $i1, $i2;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i2 = <org.quartz.DateBuilder: int MAX_YEAR>;

        if i0 <= $i2 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid year (must be >= 0 and <= ");

        $i1 = <org.quartz.DateBuilder: int MAX_YEAR>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r0;

     label2:
        return;
    }

    static void <clinit>()
    {
        java.util.Calendar $r0;
        int $i0, $i1;

        <org.quartz.DateBuilder: long MILLISECONDS_IN_DAY> = 86400000L;

        <org.quartz.DateBuilder: long SECONDS_IN_MOST_DAYS> = 86400L;

        <org.quartz.DateBuilder: long MILLISECONDS_IN_HOUR> = 3600000L;

        <org.quartz.DateBuilder: long MILLISECONDS_IN_MINUTE> = 60000L;

        <org.quartz.DateBuilder: int DECEMBER> = 12;

        <org.quartz.DateBuilder: int NOVEMBER> = 11;

        <org.quartz.DateBuilder: int OCTOBER> = 10;

        <org.quartz.DateBuilder: int SEPTEMBER> = 9;

        <org.quartz.DateBuilder: int AUGUST> = 8;

        <org.quartz.DateBuilder: int JULY> = 7;

        <org.quartz.DateBuilder: int JUNE> = 6;

        <org.quartz.DateBuilder: int MAY> = 5;

        <org.quartz.DateBuilder: int APRIL> = 4;

        <org.quartz.DateBuilder: int MARCH> = 3;

        <org.quartz.DateBuilder: int FEBRUARY> = 2;

        <org.quartz.DateBuilder: int JANUARY> = 1;

        <org.quartz.DateBuilder: int SATURDAY> = 7;

        <org.quartz.DateBuilder: int FRIDAY> = 6;

        <org.quartz.DateBuilder: int THURSDAY> = 5;

        <org.quartz.DateBuilder: int WEDNESDAY> = 4;

        <org.quartz.DateBuilder: int TUESDAY> = 3;

        <org.quartz.DateBuilder: int MONDAY> = 2;

        <org.quartz.DateBuilder: int SUNDAY> = 1;

        $r0 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $i0 = virtualinvoke $r0.<java.util.Calendar: int get(int)>(1);

        $i1 = $i0 + 100;

        <org.quartz.DateBuilder: int MAX_YEAR> = $i1;

        return;
    }
}
