class org.quartz.core.ExecutingJobsManager extends java.lang.Object implements org.quartz.JobListener
{
    java.util.HashMap executingJobs;
    java.util.concurrent.atomic.AtomicInteger numJobsFired;

    void <init>()
    {
        org.quartz.core.ExecutingJobsManager r0;
        java.util.HashMap $r1;
        java.util.concurrent.atomic.AtomicInteger $r2;

        r0 := @this: org.quartz.core.ExecutingJobsManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.quartz.core.ExecutingJobsManager: java.util.HashMap executingJobs> = $r1;

        $r2 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        r0.<org.quartz.core.ExecutingJobsManager: java.util.concurrent.atomic.AtomicInteger numJobsFired> = $r2;

        return;
    }

    public java.lang.String getName()
    {
        org.quartz.core.ExecutingJobsManager r0;
        java.lang.Class $r1;
        java.lang.String $r2;

        r0 := @this: org.quartz.core.ExecutingJobsManager;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        return $r2;
    }

    public int getNumJobsCurrentlyExecuting()
    {
        org.quartz.core.ExecutingJobsManager r0;
        java.util.HashMap $r3, $r4;
        int $i0;
        java.lang.Throwable $r5;

        r0 := @this: org.quartz.core.ExecutingJobsManager;

        $r3 = r0.<org.quartz.core.ExecutingJobsManager: java.util.HashMap executingJobs>;

        entermonitor $r3;

     label1:
        $r4 = r0.<org.quartz.core.ExecutingJobsManager: java.util.HashMap executingJobs>;

        $i0 = virtualinvoke $r4.<java.util.HashMap: int size()>();

        exitmonitor $r3;

     label2:
        return $i0;

     label3:
        $r5 := @caughtexception;

        exitmonitor $r3;

     label4:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void jobToBeExecuted(org.quartz.JobExecutionContext)
    {
        org.quartz.core.ExecutingJobsManager r0;
        org.quartz.JobExecutionContext r1;
        java.util.concurrent.atomic.AtomicInteger $r4;
        java.util.HashMap $r5, $r6;
        org.quartz.Trigger $r7;
        org.quartz.spi.OperableTrigger $r8;
        java.lang.String $r9;
        java.lang.Throwable $r11;

        r0 := @this: org.quartz.core.ExecutingJobsManager;

        r1 := @parameter0: org.quartz.JobExecutionContext;

        $r4 = r0.<org.quartz.core.ExecutingJobsManager: java.util.concurrent.atomic.AtomicInteger numJobsFired>;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        $r5 = r0.<org.quartz.core.ExecutingJobsManager: java.util.HashMap executingJobs>;

        entermonitor $r5;

     label1:
        $r6 = r0.<org.quartz.core.ExecutingJobsManager: java.util.HashMap executingJobs>;

        $r7 = interfaceinvoke r1.<org.quartz.JobExecutionContext: org.quartz.Trigger getTrigger()>();

        $r8 = (org.quartz.spi.OperableTrigger) $r7;

        $r9 = interfaceinvoke $r8.<org.quartz.spi.OperableTrigger: java.lang.String getFireInstanceId()>();

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r1);

        exitmonitor $r5;

     label2:
        goto label5;

     label3:
        $r11 := @caughtexception;

        exitmonitor $r5;

     label4:
        throw $r11;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void jobWasExecuted(org.quartz.JobExecutionContext, org.quartz.JobExecutionException)
    {
        org.quartz.core.ExecutingJobsManager r0;
        org.quartz.JobExecutionContext r1;
        org.quartz.JobExecutionException r2;
        java.util.HashMap $r5, $r6;
        org.quartz.Trigger $r7;
        org.quartz.spi.OperableTrigger $r8;
        java.lang.String $r9;
        java.lang.Throwable $r11;

        r0 := @this: org.quartz.core.ExecutingJobsManager;

        r1 := @parameter0: org.quartz.JobExecutionContext;

        r2 := @parameter1: org.quartz.JobExecutionException;

        $r5 = r0.<org.quartz.core.ExecutingJobsManager: java.util.HashMap executingJobs>;

        entermonitor $r5;

     label1:
        $r6 = r0.<org.quartz.core.ExecutingJobsManager: java.util.HashMap executingJobs>;

        $r7 = interfaceinvoke r1.<org.quartz.JobExecutionContext: org.quartz.Trigger getTrigger()>();

        $r8 = (org.quartz.spi.OperableTrigger) $r7;

        $r9 = interfaceinvoke $r8.<org.quartz.spi.OperableTrigger: java.lang.String getFireInstanceId()>();

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r9);

        exitmonitor $r5;

     label2:
        goto label5;

     label3:
        $r11 := @caughtexception;

        exitmonitor $r5;

     label4:
        throw $r11;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int getNumJobsFired()
    {
        org.quartz.core.ExecutingJobsManager r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        int $i0;

        r0 := @this: org.quartz.core.ExecutingJobsManager;

        $r1 = r0.<org.quartz.core.ExecutingJobsManager: java.util.concurrent.atomic.AtomicInteger numJobsFired>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        return $i0;
    }

    public java.util.List getExecutingJobs()
    {
        org.quartz.core.ExecutingJobsManager r0;
        java.util.HashMap $r3, $r5;
        java.util.ArrayList $r4;
        java.util.Collection $r6;
        java.util.List $r7;
        java.lang.Throwable $r8;

        r0 := @this: org.quartz.core.ExecutingJobsManager;

        $r3 = r0.<org.quartz.core.ExecutingJobsManager: java.util.HashMap executingJobs>;

        entermonitor $r3;

     label1:
        $r4 = new java.util.ArrayList;

        $r5 = r0.<org.quartz.core.ExecutingJobsManager: java.util.HashMap executingJobs>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.util.Collection values()>();

        specialinvoke $r4.<java.util.ArrayList: void <init>(java.util.Collection)>($r6);

        $r7 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r4);

        exitmonitor $r3;

     label2:
        return $r7;

     label3:
        $r8 := @caughtexception;

        exitmonitor $r3;

     label4:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void jobExecutionVetoed(org.quartz.JobExecutionContext)
    {
        org.quartz.core.ExecutingJobsManager r0;
        org.quartz.JobExecutionContext r1;

        r0 := @this: org.quartz.core.ExecutingJobsManager;

        r1 := @parameter0: org.quartz.JobExecutionContext;

        return;
    }
}
