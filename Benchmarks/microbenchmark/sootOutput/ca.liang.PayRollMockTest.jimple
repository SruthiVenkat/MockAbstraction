public class ca.liang.PayRollMockTest extends java.lang.Object
{
    private ca.liang.PayRoll payRoll;
    private ca.liang.EmployeeList employeeList;
    private ca.liang.BankService bankService;
    private java.util.List employees;

    public void <init>()
    {
        ca.liang.PayRollMockTest r0;

        r0 := @this: ca.liang.PayRollMockTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void init()
    {
        ca.liang.PayRollMockTest r0;
        java.util.ArrayList $r1;
        java.lang.Object $r2, $r4;
        ca.liang.EmployeeList $r3, $r6, $r13;
        ca.liang.BankService $r5, $r12;
        java.util.List $r7, $r9;
        org.mockito.stubbing.OngoingStubbing $r8;
        ca.liang.PayRoll $r11;

        r0 := @this: ca.liang.PayRollMockTest;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<ca.liang.PayRollMockTest: java.util.List employees> = $r1;

        $r2 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/EmployeeList;");

        $r3 = (ca.liang.EmployeeList) $r2;

        r0.<ca.liang.PayRollMockTest: ca.liang.EmployeeList employeeList> = $r3;

        $r4 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/BankService;");

        $r5 = (ca.liang.BankService) $r4;

        r0.<ca.liang.PayRollMockTest: ca.liang.BankService bankService> = $r5;

        $r6 = r0.<ca.liang.PayRollMockTest: ca.liang.EmployeeList employeeList>;

        $r7 = virtualinvoke $r6.<ca.liang.EmployeeList: java.util.List getAllEmployees()>();

        $r8 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r7);

        $r9 = r0.<ca.liang.PayRollMockTest: java.util.List employees>;

        interfaceinvoke $r8.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r9);

        $r11 = new ca.liang.PayRoll;

        $r13 = r0.<ca.liang.PayRollMockTest: ca.liang.EmployeeList employeeList>;

        $r12 = r0.<ca.liang.PayRollMockTest: ca.liang.BankService bankService>;

        specialinvoke $r11.<ca.liang.PayRoll: void <init>(ca.liang.EmployeeList,ca.liang.BankService)>($r13, $r12);

        r0.<ca.liang.PayRollMockTest: ca.liang.PayRoll payRoll> = $r11;

        return;
    }

    public void testNoEmployees()
    {
        ca.liang.PayRollMockTest r0;

        r0 := @this: ca.liang.PayRollMockTest;

        specialinvoke r0.<ca.liang.PayRollMockTest: void assertNumberOfPayments(int)>(0);

        return;
    }

    public void testNoEmployeesIntra()
    {
        ca.liang.PayRollMockTest r0;
        ca.liang.EmployeeList r2;
        ca.liang.BankService r3;
        int i0;
        java.util.ArrayList $r5;
        java.lang.Object $r6, $r7;
        java.util.List $r8;
        org.mockito.stubbing.OngoingStubbing $r9;
        ca.liang.PayRoll $r11;
        long $l1;

        r0 := @this: ca.liang.PayRollMockTest;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/EmployeeList;");

        r2 = (ca.liang.EmployeeList) $r6;

        $r7 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/BankService;");

        r3 = (ca.liang.BankService) $r7;

        $r8 = virtualinvoke r2.<ca.liang.EmployeeList: java.util.List getAllEmployees()>();

        $r9 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r8);

        interfaceinvoke $r9.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r5);

        $r11 = new ca.liang.PayRoll;

        specialinvoke $r11.<ca.liang.PayRoll: void <init>(ca.liang.EmployeeList,ca.liang.BankService)>(r2, r3);

        i0 = virtualinvoke $r11.<ca.liang.PayRoll: int monthlyPayment()>();

        $l1 = (long) i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        return;
    }

    public void testSingleEmployee()
    {
        ca.liang.PayRollMockTest r0;
        java.util.List $r1;
        ca.liang.Employee $r2;

        r0 := @this: ca.liang.PayRollMockTest;

        $r1 = r0.<ca.liang.PayRollMockTest: java.util.List employees>;

        $r2 = specialinvoke r0.<ca.liang.PayRollMockTest: ca.liang.Employee createTestEmployee(java.lang.String,java.lang.String,int)>("Test Employee", "ID0", 1000);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        specialinvoke r0.<ca.liang.PayRollMockTest: void assertNumberOfPayments(int)>(1);

        return;
    }

    public void testEmployeeIsPaid()
    {
        ca.liang.PayRollMockTest r0;
        java.util.List $r2;
        ca.liang.Employee $r3;
        ca.liang.BankService $r4, $r7;
        org.mockito.verification.VerificationMode $r5;
        java.lang.Object $r6;

        r0 := @this: ca.liang.PayRollMockTest;

        $r2 = r0.<ca.liang.PayRollMockTest: java.util.List employees>;

        $r3 = specialinvoke r0.<ca.liang.PayRollMockTest: ca.liang.Employee createTestEmployee(java.lang.String,java.lang.String,int)>("Test Employee", "ID0", 1000);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r3);

        specialinvoke r0.<ca.liang.PayRollMockTest: void assertNumberOfPayments(int)>(1);

        $r4 = r0.<ca.liang.PayRollMockTest: ca.liang.BankService bankService>;

        $r5 = staticinvoke <org.mockito.Mockito: org.mockito.verification.VerificationMode times(int)>(1);

        $r6 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object,org.mockito.verification.VerificationMode)>($r4, $r5);

        $r7 = (ca.liang.BankService) $r6;

        virtualinvoke $r7.<ca.liang.BankService: void makePayment(java.lang.String,int)>("ID0", 1000);

        return;
    }

    public void testAllEmployeesArePaid()
    {
        ca.liang.PayRollMockTest r0;
        org.mockito.ArgumentCaptor r1, r2;
        java.util.List $r3, $r9, $r11, $r24, $r28, $r30, $r34, $r36, $r39, $r42, $r45;
        java.lang.Object $r4, $r6, $r18, $r20, $r22, $r25, $r29, $r31, $r35, $r37, $r40, $r43, $r46;
        ca.liang.EmployeeList $r5, $r8, $r15;
        ca.liang.BankService $r7, $r14, $r16, $r19;
        org.mockito.stubbing.OngoingStubbing $r10;
        ca.liang.PayRoll $r13;
        org.mockito.verification.VerificationMode $r17;
        java.lang.String $r21, $r27, $r33;
        java.lang.Integer $r23, $r41, $r47;
        int $i0, $i1, $i3, $i5, $i7;
        ca.liang.Employee $r26, $r32, $r38, $r44;
        long $l2, $l4, $l6, $l8;

        r0 := @this: ca.liang.PayRollMockTest;

        $r3 = specialinvoke r0.<ca.liang.PayRollMockTest: java.util.List createEmployees()>();

        r0.<ca.liang.PayRollMockTest: java.util.List employees> = $r3;

        $r4 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/EmployeeList;");

        $r5 = (ca.liang.EmployeeList) $r4;

        r0.<ca.liang.PayRollMockTest: ca.liang.EmployeeList employeeList> = $r5;

        $r6 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/BankService;");

        $r7 = (ca.liang.BankService) $r6;

        r0.<ca.liang.PayRollMockTest: ca.liang.BankService bankService> = $r7;

        $r8 = r0.<ca.liang.PayRollMockTest: ca.liang.EmployeeList employeeList>;

        $r9 = virtualinvoke $r8.<ca.liang.EmployeeList: java.util.List getAllEmployees()>();

        $r10 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r9);

        $r11 = r0.<ca.liang.PayRollMockTest: java.util.List employees>;

        interfaceinvoke $r10.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r11);

        $r13 = new ca.liang.PayRoll;

        $r15 = r0.<ca.liang.PayRollMockTest: ca.liang.EmployeeList employeeList>;

        $r14 = r0.<ca.liang.PayRollMockTest: ca.liang.BankService bankService>;

        specialinvoke $r13.<ca.liang.PayRoll: void <init>(ca.liang.EmployeeList,ca.liang.BankService)>($r15, $r14);

        r0.<ca.liang.PayRollMockTest: ca.liang.PayRoll payRoll> = $r13;

        specialinvoke r0.<ca.liang.PayRollMockTest: void assertNumberOfPayments(int)>(2);

        r1 = staticinvoke <org.mockito.ArgumentCaptor: org.mockito.ArgumentCaptor forClass(java.lang.Class)>(class "Ljava/lang/String;");

        r2 = staticinvoke <org.mockito.ArgumentCaptor: org.mockito.ArgumentCaptor forClass(java.lang.Class)>(class "Ljava/lang/Integer;");

        $r16 = r0.<ca.liang.PayRollMockTest: ca.liang.BankService bankService>;

        $r17 = staticinvoke <org.mockito.Mockito: org.mockito.verification.VerificationMode times(int)>(2);

        $r18 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object,org.mockito.verification.VerificationMode)>($r16, $r17);

        $r19 = (ca.liang.BankService) $r18;

        $r20 = virtualinvoke r1.<org.mockito.ArgumentCaptor: java.lang.Object capture()>();

        $r21 = (java.lang.String) $r20;

        $r22 = virtualinvoke r2.<org.mockito.ArgumentCaptor: java.lang.Object capture()>();

        $r23 = (java.lang.Integer) $r22;

        $i0 = virtualinvoke $r23.<java.lang.Integer: int intValue()>();

        virtualinvoke $r19.<ca.liang.BankService: void makePayment(java.lang.String,int)>($r21, $i0);

        $r24 = r0.<ca.liang.PayRollMockTest: java.util.List employees>;

        $r25 = interfaceinvoke $r24.<java.util.List: java.lang.Object get(int)>(0);

        $r26 = (ca.liang.Employee) $r25;

        $r27 = virtualinvoke $r26.<ca.liang.Employee: java.lang.String getBankId()>();

        $r28 = virtualinvoke r1.<org.mockito.ArgumentCaptor: java.util.List getAllValues()>();

        $r29 = interfaceinvoke $r28.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r27, $r29);

        $r30 = r0.<ca.liang.PayRollMockTest: java.util.List employees>;

        $r31 = interfaceinvoke $r30.<java.util.List: java.lang.Object get(int)>(1);

        $r32 = (ca.liang.Employee) $r31;

        $r33 = virtualinvoke $r32.<ca.liang.Employee: java.lang.String getBankId()>();

        $r34 = virtualinvoke r1.<org.mockito.ArgumentCaptor: java.util.List getAllValues()>();

        $r35 = interfaceinvoke $r34.<java.util.List: java.lang.Object get(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r33, $r35);

        $r36 = r0.<ca.liang.PayRollMockTest: java.util.List employees>;

        $r37 = interfaceinvoke $r36.<java.util.List: java.lang.Object get(int)>(0);

        $r38 = (ca.liang.Employee) $r37;

        $i1 = virtualinvoke $r38.<ca.liang.Employee: int getSalary()>();

        $l2 = (long) $i1;

        $r39 = virtualinvoke r2.<org.mockito.ArgumentCaptor: java.util.List getAllValues()>();

        $r40 = interfaceinvoke $r39.<java.util.List: java.lang.Object get(int)>(0);

        $r41 = (java.lang.Integer) $r40;

        $i3 = virtualinvoke $r41.<java.lang.Integer: int intValue()>();

        $l4 = (long) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l2, $l4);

        $r42 = r0.<ca.liang.PayRollMockTest: java.util.List employees>;

        $r43 = interfaceinvoke $r42.<java.util.List: java.lang.Object get(int)>(1);

        $r44 = (ca.liang.Employee) $r43;

        $i5 = virtualinvoke $r44.<ca.liang.Employee: int getSalary()>();

        $l6 = (long) $i5;

        $r45 = virtualinvoke r2.<org.mockito.ArgumentCaptor: java.util.List getAllValues()>();

        $r46 = interfaceinvoke $r45.<java.util.List: java.lang.Object get(int)>(1);

        $r47 = (java.lang.Integer) $r46;

        $i7 = virtualinvoke $r47.<java.lang.Integer: int intValue()>();

        $l8 = (long) $i7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l6, $l8);

        return;
    }

    public void testInteractionOrder()
    {
        ca.liang.PayRollMockTest r0;
        org.mockito.InOrder r2;
        java.util.List $r3;
        ca.liang.Employee $r4;
        java.lang.Object[] $r5;
        ca.liang.EmployeeList $r6, $r8, $r10;
        ca.liang.BankService $r7, $r12, $r14;
        java.lang.Object $r9, $r13;

        r0 := @this: ca.liang.PayRollMockTest;

        $r3 = r0.<ca.liang.PayRollMockTest: java.util.List employees>;

        $r4 = specialinvoke r0.<ca.liang.PayRollMockTest: ca.liang.Employee createTestEmployee(java.lang.String,java.lang.String,int)>("Test Employee", "ID0", 1000);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r4);

        specialinvoke r0.<ca.liang.PayRollMockTest: void assertNumberOfPayments(int)>(1);

        $r5 = newarray (java.lang.Object)[2];

        $r6 = r0.<ca.liang.PayRollMockTest: ca.liang.EmployeeList employeeList>;

        $r5[0] = $r6;

        $r7 = r0.<ca.liang.PayRollMockTest: ca.liang.BankService bankService>;

        $r5[1] = $r7;

        r2 = staticinvoke <org.mockito.Mockito: org.mockito.InOrder inOrder(java.lang.Object[])>($r5);

        $r8 = r0.<ca.liang.PayRollMockTest: ca.liang.EmployeeList employeeList>;

        $r9 = interfaceinvoke r2.<org.mockito.InOrder: java.lang.Object verify(java.lang.Object)>($r8);

        $r10 = (ca.liang.EmployeeList) $r9;

        virtualinvoke $r10.<ca.liang.EmployeeList: java.util.List getAllEmployees()>();

        $r12 = r0.<ca.liang.PayRollMockTest: ca.liang.BankService bankService>;

        $r13 = interfaceinvoke r2.<org.mockito.InOrder: java.lang.Object verify(java.lang.Object)>($r12);

        $r14 = (ca.liang.BankService) $r13;

        virtualinvoke $r14.<ca.liang.BankService: void makePayment(java.lang.String,int)>("ID0", 1000);

        return;
    }

    private void assertNumberOfPayments(int)
    {
        ca.liang.PayRollMockTest r0;
        int i0, i1;
        ca.liang.PayRoll $r1;
        long $l2, $l3;

        r0 := @this: ca.liang.PayRollMockTest;

        i0 := @parameter0: int;

        $r1 = r0.<ca.liang.PayRollMockTest: ca.liang.PayRoll payRoll>;

        i1 = virtualinvoke $r1.<ca.liang.PayRoll: int monthlyPayment()>();

        $l3 = (long) i0;

        $l2 = (long) i1;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l3, $l2);

        return;
    }

    private ca.liang.Employee createTestEmployee(java.lang.String, java.lang.String, int)
    {
        ca.liang.PayRollMockTest r0;
        java.lang.String r1, r2;
        int i0;
        ca.liang.Employee $r3;

        r0 := @this: ca.liang.PayRollMockTest;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r3 = new ca.liang.Employee;

        specialinvoke $r3.<ca.liang.Employee: void <init>(java.lang.String,java.lang.String,int)>(r1, r2, i0);

        return $r3;
    }

    private java.util.List createEmployees()
    {
        ca.liang.PayRollMockTest r0;
        ca.liang.Employee r2, r3;
        java.util.ArrayList $r4;
        java.lang.Object $r5, $r6;

        r0 := @this: ca.liang.PayRollMockTest;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/Employee;");

        r2 = (ca.liang.Employee) $r5;

        $r6 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/Employee;");

        r3 = (ca.liang.Employee) $r6;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r2);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r3);

        return $r4;
    }
}
