public class ca.liang.PayRollTest extends java.lang.Object
{
    private ca.liang.PayRoll payRoll;
    private ca.liang.EmployeeList employeeList;
    private ca.liang.BankService bankService;
    private java.util.List employees;

    public void <init>()
    {
        ca.liang.PayRollTest r0;

        r0 := @this: ca.liang.PayRollTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void init()
    {
        ca.liang.PayRollTest r0;
        java.util.ArrayList $r3, $r4;
        ca.liang.EmployeeList $r5, $r10;
        java.util.HashMap $r6;
        ca.liang.BankService $r7, $r9;
        ca.liang.PayRoll $r8;

        r0 := @this: ca.liang.PayRollTest;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<ca.liang.PayRollTest: java.util.List employees> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = new ca.liang.EmployeeList;

        specialinvoke $r5.<ca.liang.EmployeeList: void <init>(java.util.List)>($r4);

        r0.<ca.liang.PayRollTest: ca.liang.EmployeeList employeeList> = $r5;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        $r7 = new ca.liang.BankService;

        specialinvoke $r7.<ca.liang.BankService: void <init>(java.util.Map)>($r6);

        r0.<ca.liang.PayRollTest: ca.liang.BankService bankService> = $r7;

        $r8 = new ca.liang.PayRoll;

        $r10 = r0.<ca.liang.PayRollTest: ca.liang.EmployeeList employeeList>;

        $r9 = r0.<ca.liang.PayRollTest: ca.liang.BankService bankService>;

        specialinvoke $r8.<ca.liang.PayRoll: void <init>(ca.liang.EmployeeList,ca.liang.BankService)>($r10, $r9);

        r0.<ca.liang.PayRollTest: ca.liang.PayRoll payRoll> = $r8;

        return;
    }

    public void testNoEmployees()
    {
        ca.liang.PayRollTest r0;

        r0 := @this: ca.liang.PayRollTest;

        specialinvoke r0.<ca.liang.PayRollTest: void assertNumberOfPayments(int)>(0);

        return;
    }

    public void testNoEmployeesIntra()
    {
        ca.liang.PayRollTest r0;
        ca.liang.EmployeeList r2;
        ca.liang.BankService r3;
        int i0;
        java.util.ArrayList $r5;
        java.lang.Object $r6, $r7;
        java.util.List $r8;
        org.mockito.stubbing.OngoingStubbing $r9;
        ca.liang.PayRoll $r11;
        long $l1;

        r0 := @this: ca.liang.PayRollTest;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/EmployeeList;");

        r2 = (ca.liang.EmployeeList) $r6;

        $r7 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/BankService;");

        r3 = (ca.liang.BankService) $r7;

        $r8 = virtualinvoke r2.<ca.liang.EmployeeList: java.util.List getAllEmployees()>();

        $r9 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r8);

        interfaceinvoke $r9.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r5);

        $r11 = new ca.liang.PayRoll;

        specialinvoke $r11.<ca.liang.PayRoll: void <init>(ca.liang.EmployeeList,ca.liang.BankService)>(r2, r3);

        i0 = virtualinvoke $r11.<ca.liang.PayRoll: int monthlyPayment()>();

        $l1 = (long) i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        return;
    }

    public void testSingleEmployee()
    {
        ca.liang.PayRollTest r0;
        ca.liang.Employee r1;
        java.util.List $r4;
        java.util.ArrayList $r5;
        ca.liang.EmployeeList $r6, $r13;
        java.util.HashMap $r7;
        ca.liang.BankService $r8, $r12;
        java.lang.Integer $r9;
        ca.liang.PayRoll $r11;

        r0 := @this: ca.liang.PayRollTest;

        r1 = specialinvoke r0.<ca.liang.PayRollTest: ca.liang.Employee createTestEmployee(java.lang.String,java.lang.String,int)>("Test Employee", "ID0", 1000);

        $r4 = r0.<ca.liang.PayRollTest: java.util.List employees>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r6 = new ca.liang.EmployeeList;

        specialinvoke $r6.<ca.liang.EmployeeList: void <init>(java.util.List)>($r5);

        r0.<ca.liang.PayRollTest: ca.liang.EmployeeList employeeList> = $r6;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        $r8 = new ca.liang.BankService;

        specialinvoke $r8.<ca.liang.BankService: void <init>(java.util.Map)>($r7);

        r0.<ca.liang.PayRollTest: ca.liang.BankService bankService> = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1000);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ID0", $r9);

        $r11 = new ca.liang.PayRoll;

        $r13 = r0.<ca.liang.PayRollTest: ca.liang.EmployeeList employeeList>;

        $r12 = r0.<ca.liang.PayRollTest: ca.liang.BankService bankService>;

        specialinvoke $r11.<ca.liang.PayRoll: void <init>(ca.liang.EmployeeList,ca.liang.BankService)>($r13, $r12);

        r0.<ca.liang.PayRollTest: ca.liang.PayRoll payRoll> = $r11;

        specialinvoke r0.<ca.liang.PayRollTest: void assertNumberOfPayments(int)>(1);

        return;
    }

    public void testEmployeeIsPaid()
    {
        ca.liang.PayRollTest r0;
        java.util.List $r4;
        ca.liang.Employee $r5, $r7;
        java.util.ArrayList $r6;
        ca.liang.EmployeeList $r8, $r14;
        java.util.HashMap $r9;
        java.lang.Object $r10, $r17;
        ca.liang.BankService $r11, $r13, $r15, $r18;
        ca.liang.PayRoll $r12;
        org.mockito.verification.VerificationMode $r16;

        r0 := @this: ca.liang.PayRollTest;

        $r4 = r0.<ca.liang.PayRollTest: java.util.List employees>;

        $r5 = specialinvoke r0.<ca.liang.PayRollTest: ca.liang.Employee createTestEmployee(java.lang.String,java.lang.String,int)>("Test Employee", "ID0", 1000);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r5);

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $r7 = specialinvoke r0.<ca.liang.PayRollTest: ca.liang.Employee createTestEmployee(java.lang.String,java.lang.String,int)>("Test Employee1", "ID0", 1000);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r7);

        $r8 = new ca.liang.EmployeeList;

        specialinvoke $r8.<ca.liang.EmployeeList: void <init>(java.util.List)>($r6);

        r0.<ca.liang.PayRollTest: ca.liang.EmployeeList employeeList> = $r8;

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        $r10 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/BankService;");

        $r11 = (ca.liang.BankService) $r10;

        r0.<ca.liang.PayRollTest: ca.liang.BankService bankService> = $r11;

        $r12 = new ca.liang.PayRoll;

        $r14 = r0.<ca.liang.PayRollTest: ca.liang.EmployeeList employeeList>;

        $r13 = r0.<ca.liang.PayRollTest: ca.liang.BankService bankService>;

        specialinvoke $r12.<ca.liang.PayRoll: void <init>(ca.liang.EmployeeList,ca.liang.BankService)>($r14, $r13);

        r0.<ca.liang.PayRollTest: ca.liang.PayRoll payRoll> = $r12;

        specialinvoke r0.<ca.liang.PayRollTest: void assertNumberOfPayments(int)>(1);

        $r15 = r0.<ca.liang.PayRollTest: ca.liang.BankService bankService>;

        $r16 = staticinvoke <org.mockito.Mockito: org.mockito.verification.VerificationMode times(int)>(1);

        $r17 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object,org.mockito.verification.VerificationMode)>($r15, $r16);

        $r18 = (ca.liang.BankService) $r17;

        virtualinvoke $r18.<ca.liang.BankService: void makePayment(java.lang.String,int)>("ID0", 1000);

        return;
    }

    public void testAllEmployeesArePaid()
    {
        ca.liang.PayRollTest r0;
        org.mockito.ArgumentCaptor r2, r3;
        java.util.List $r4, $r6, $r9, $r11, $r27, $r31, $r33, $r37, $r39, $r42, $r45, $r48;
        ca.liang.Employee $r5, $r7, $r29, $r35, $r41, $r47;
        java.util.ArrayList $r8;
        java.lang.Object $r10, $r12, $r14, $r21, $r23, $r25, $r28, $r32, $r34, $r38, $r40, $r43, $r46, $r49;
        ca.liang.EmployeeList $r13, $r18;
        ca.liang.BankService $r15, $r17, $r19, $r22;
        ca.liang.PayRoll $r16;
        org.mockito.verification.VerificationMode $r20;
        java.lang.String $r24, $r30, $r36;
        java.lang.Integer $r26, $r44, $r50;
        int $i0, $i1, $i3, $i5, $i7;
        long $l2, $l4, $l6, $l8;

        r0 := @this: ca.liang.PayRollTest;

        $r4 = r0.<ca.liang.PayRollTest: java.util.List employees>;

        $r5 = specialinvoke r0.<ca.liang.PayRollTest: ca.liang.Employee createTestEmployee(java.lang.String,java.lang.String,int)>("Test Employee1", "ID0", 1000);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r5);

        $r6 = r0.<ca.liang.PayRollTest: java.util.List employees>;

        $r7 = specialinvoke r0.<ca.liang.PayRollTest: ca.liang.Employee createTestEmployee(java.lang.String,java.lang.String,int)>("Test Employee2", "ID1", 2000);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r7);

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        $r9 = r0.<ca.liang.PayRollTest: java.util.List employees>;

        $r10 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(0);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r10);

        $r11 = r0.<ca.liang.PayRollTest: java.util.List employees>;

        $r12 = interfaceinvoke $r11.<java.util.List: java.lang.Object get(int)>(1);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r12);

        $r13 = new ca.liang.EmployeeList;

        specialinvoke $r13.<ca.liang.EmployeeList: void <init>(java.util.List)>($r8);

        r0.<ca.liang.PayRollTest: ca.liang.EmployeeList employeeList> = $r13;

        $r14 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/BankService;");

        $r15 = (ca.liang.BankService) $r14;

        r0.<ca.liang.PayRollTest: ca.liang.BankService bankService> = $r15;

        $r16 = new ca.liang.PayRoll;

        $r18 = r0.<ca.liang.PayRollTest: ca.liang.EmployeeList employeeList>;

        $r17 = r0.<ca.liang.PayRollTest: ca.liang.BankService bankService>;

        specialinvoke $r16.<ca.liang.PayRoll: void <init>(ca.liang.EmployeeList,ca.liang.BankService)>($r18, $r17);

        r0.<ca.liang.PayRollTest: ca.liang.PayRoll payRoll> = $r16;

        specialinvoke r0.<ca.liang.PayRollTest: void assertNumberOfPayments(int)>(2);

        r2 = staticinvoke <org.mockito.ArgumentCaptor: org.mockito.ArgumentCaptor forClass(java.lang.Class)>(class "Ljava/lang/String;");

        r3 = staticinvoke <org.mockito.ArgumentCaptor: org.mockito.ArgumentCaptor forClass(java.lang.Class)>(class "Ljava/lang/Integer;");

        $r19 = r0.<ca.liang.PayRollTest: ca.liang.BankService bankService>;

        $r20 = staticinvoke <org.mockito.Mockito: org.mockito.verification.VerificationMode times(int)>(2);

        $r21 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object,org.mockito.verification.VerificationMode)>($r19, $r20);

        $r22 = (ca.liang.BankService) $r21;

        $r23 = virtualinvoke r2.<org.mockito.ArgumentCaptor: java.lang.Object capture()>();

        $r24 = (java.lang.String) $r23;

        $r25 = virtualinvoke r3.<org.mockito.ArgumentCaptor: java.lang.Object capture()>();

        $r26 = (java.lang.Integer) $r25;

        $i0 = virtualinvoke $r26.<java.lang.Integer: int intValue()>();

        virtualinvoke $r22.<ca.liang.BankService: void makePayment(java.lang.String,int)>($r24, $i0);

        $r27 = r0.<ca.liang.PayRollTest: java.util.List employees>;

        $r28 = interfaceinvoke $r27.<java.util.List: java.lang.Object get(int)>(0);

        $r29 = (ca.liang.Employee) $r28;

        $r30 = virtualinvoke $r29.<ca.liang.Employee: java.lang.String getBankId()>();

        $r31 = virtualinvoke r2.<org.mockito.ArgumentCaptor: java.util.List getAllValues()>();

        $r32 = interfaceinvoke $r31.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r30, $r32);

        $r33 = r0.<ca.liang.PayRollTest: java.util.List employees>;

        $r34 = interfaceinvoke $r33.<java.util.List: java.lang.Object get(int)>(1);

        $r35 = (ca.liang.Employee) $r34;

        $r36 = virtualinvoke $r35.<ca.liang.Employee: java.lang.String getBankId()>();

        $r37 = virtualinvoke r2.<org.mockito.ArgumentCaptor: java.util.List getAllValues()>();

        $r38 = interfaceinvoke $r37.<java.util.List: java.lang.Object get(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r36, $r38);

        $r39 = r0.<ca.liang.PayRollTest: java.util.List employees>;

        $r40 = interfaceinvoke $r39.<java.util.List: java.lang.Object get(int)>(0);

        $r41 = (ca.liang.Employee) $r40;

        $i1 = virtualinvoke $r41.<ca.liang.Employee: int getSalary()>();

        $l2 = (long) $i1;

        $r42 = virtualinvoke r3.<org.mockito.ArgumentCaptor: java.util.List getAllValues()>();

        $r43 = interfaceinvoke $r42.<java.util.List: java.lang.Object get(int)>(0);

        $r44 = (java.lang.Integer) $r43;

        $i3 = virtualinvoke $r44.<java.lang.Integer: int intValue()>();

        $l4 = (long) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l2, $l4);

        $r45 = r0.<ca.liang.PayRollTest: java.util.List employees>;

        $r46 = interfaceinvoke $r45.<java.util.List: java.lang.Object get(int)>(1);

        $r47 = (ca.liang.Employee) $r46;

        $i5 = virtualinvoke $r47.<ca.liang.Employee: int getSalary()>();

        $l6 = (long) $i5;

        $r48 = virtualinvoke r3.<org.mockito.ArgumentCaptor: java.util.List getAllValues()>();

        $r49 = interfaceinvoke $r48.<java.util.List: java.lang.Object get(int)>(1);

        $r50 = (java.lang.Integer) $r49;

        $i7 = virtualinvoke $r50.<java.lang.Integer: int intValue()>();

        $l8 = (long) $i7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l6, $l8);

        return;
    }

    private void assertNumberOfPayments(int)
    {
        ca.liang.PayRollTest r0;
        int i0, i1;
        ca.liang.PayRoll $r1;
        long $l2, $l3;

        r0 := @this: ca.liang.PayRollTest;

        i0 := @parameter0: int;

        $r1 = r0.<ca.liang.PayRollTest: ca.liang.PayRoll payRoll>;

        i1 = virtualinvoke $r1.<ca.liang.PayRoll: int monthlyPayment()>();

        $l3 = (long) i0;

        $l2 = (long) i1;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l3, $l2);

        return;
    }

    private ca.liang.Employee createTestEmployee(java.lang.String, java.lang.String, int)
    {
        ca.liang.PayRollTest r0;
        java.lang.String r1, r2;
        int i0;
        ca.liang.Employee $r3;

        r0 := @this: ca.liang.PayRollTest;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r3 = new ca.liang.Employee;

        specialinvoke $r3.<ca.liang.Employee: void <init>(java.lang.String,java.lang.String,int)>(r1, r2, i0);

        return $r3;
    }
}
