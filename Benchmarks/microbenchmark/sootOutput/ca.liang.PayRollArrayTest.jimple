public class ca.liang.PayRollArrayTest extends java.lang.Object
{
    private ca.liang.PayRoll payRoll;
    private ca.liang.EmployeeList employeeList;
    private ca.liang.BankService bankService;
    private ca.liang.Employee[] employees;

    public void <init>()
    {
        ca.liang.PayRollArrayTest r0;

        r0 := @this: ca.liang.PayRollArrayTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void init()
    {
        ca.liang.PayRollArrayTest r0;
        ca.liang.Employee[] $r3;
        java.util.ArrayList $r4;
        ca.liang.EmployeeList $r5, $r10;
        java.util.HashMap $r6;
        ca.liang.BankService $r7, $r9;
        ca.liang.PayRoll $r8;

        r0 := @this: ca.liang.PayRollArrayTest;

        $r3 = newarray (ca.liang.Employee)[2];

        r0.<ca.liang.PayRollArrayTest: ca.liang.Employee[] employees> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = new ca.liang.EmployeeList;

        specialinvoke $r5.<ca.liang.EmployeeList: void <init>(java.util.List)>($r4);

        r0.<ca.liang.PayRollArrayTest: ca.liang.EmployeeList employeeList> = $r5;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        $r7 = new ca.liang.BankService;

        specialinvoke $r7.<ca.liang.BankService: void <init>(java.util.Map)>($r6);

        r0.<ca.liang.PayRollArrayTest: ca.liang.BankService bankService> = $r7;

        $r8 = new ca.liang.PayRoll;

        $r10 = r0.<ca.liang.PayRollArrayTest: ca.liang.EmployeeList employeeList>;

        $r9 = r0.<ca.liang.PayRollArrayTest: ca.liang.BankService bankService>;

        specialinvoke $r8.<ca.liang.PayRoll: void <init>(ca.liang.EmployeeList,ca.liang.BankService)>($r10, $r9);

        r0.<ca.liang.PayRollArrayTest: ca.liang.PayRoll payRoll> = $r8;

        return;
    }

    public void testNoEmployees()
    {
        ca.liang.PayRollArrayTest r0;

        r0 := @this: ca.liang.PayRollArrayTest;

        specialinvoke r0.<ca.liang.PayRollArrayTest: void assertNumberOfPayments(int)>(0);

        return;
    }

    public void testEmployeesPaidIntra()
    {
        ca.liang.PayRollArrayTest r0;
        ca.liang.Employee[] r1;
        ca.liang.EmployeeList r2;
        ca.liang.BankService r3;
        int i0;
        java.lang.Object $r5, $r7, $r9, $r10;
        ca.liang.Employee $r6, $r8;
        java.util.List $r11, $r13;
        org.mockito.stubbing.OngoingStubbing $r12;
        ca.liang.PayRoll $r15;
        long $l1;

        r0 := @this: ca.liang.PayRollArrayTest;

        r1 = newarray (ca.liang.Employee)[2];

        $r5 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/Employee;");

        $r6 = (ca.liang.Employee) $r5;

        r1[0] = $r6;

        $r7 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/Employee;");

        $r8 = (ca.liang.Employee) $r7;

        r1[1] = $r8;

        $r9 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/EmployeeList;");

        r2 = (ca.liang.EmployeeList) $r9;

        $r10 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/BankService;");

        r3 = (ca.liang.BankService) $r10;

        $r11 = virtualinvoke r2.<ca.liang.EmployeeList: java.util.List getAllEmployees()>();

        $r12 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r11);

        $r13 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        interfaceinvoke $r12.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r13);

        $r15 = new ca.liang.PayRoll;

        specialinvoke $r15.<ca.liang.PayRoll: void <init>(ca.liang.Employee[],ca.liang.BankService)>(r1, r3);

        i0 = virtualinvoke $r15.<ca.liang.PayRoll: int monthlyPayment()>();

        $l1 = (long) i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l1);

        return;
    }

    public void testSingleEmployee()
    {
        ca.liang.PayRollArrayTest r0;
        ca.liang.Employee[] $r1, $r2, $r12;
        java.lang.Object $r3, $r5, $r7;
        ca.liang.Employee $r4;
        ca.liang.EmployeeList $r6, $r9, $r17;
        ca.liang.BankService $r8, $r16;
        java.util.List $r10, $r13;
        org.mockito.stubbing.OngoingStubbing $r11;
        ca.liang.PayRoll $r15;

        r0 := @this: ca.liang.PayRollArrayTest;

        $r1 = newarray (ca.liang.Employee)[1];

        r0.<ca.liang.PayRollArrayTest: ca.liang.Employee[] employees> = $r1;

        $r2 = r0.<ca.liang.PayRollArrayTest: ca.liang.Employee[] employees>;

        $r3 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/Employee;");

        $r4 = (ca.liang.Employee) $r3;

        $r2[0] = $r4;

        $r5 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/EmployeeList;");

        $r6 = (ca.liang.EmployeeList) $r5;

        r0.<ca.liang.PayRollArrayTest: ca.liang.EmployeeList employeeList> = $r6;

        $r7 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/BankService;");

        $r8 = (ca.liang.BankService) $r7;

        r0.<ca.liang.PayRollArrayTest: ca.liang.BankService bankService> = $r8;

        $r9 = r0.<ca.liang.PayRollArrayTest: ca.liang.EmployeeList employeeList>;

        $r10 = virtualinvoke $r9.<ca.liang.EmployeeList: java.util.List getAllEmployees()>();

        $r11 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r10);

        $r12 = r0.<ca.liang.PayRollArrayTest: ca.liang.Employee[] employees>;

        $r13 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r12);

        interfaceinvoke $r11.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r13);

        $r15 = new ca.liang.PayRoll;

        $r17 = r0.<ca.liang.PayRollArrayTest: ca.liang.EmployeeList employeeList>;

        $r16 = r0.<ca.liang.PayRollArrayTest: ca.liang.BankService bankService>;

        specialinvoke $r15.<ca.liang.PayRoll: void <init>(ca.liang.EmployeeList,ca.liang.BankService)>($r17, $r16);

        r0.<ca.liang.PayRollArrayTest: ca.liang.PayRoll payRoll> = $r15;

        specialinvoke r0.<ca.liang.PayRollArrayTest: void assertNumberOfPayments(int)>(1);

        return;
    }

    public void testEmployeeIsPaid()
    {
        ca.liang.PayRollArrayTest r0;
        ca.liang.Employee[] $r2, $r3, $r12;
        ca.liang.Employee $r4;
        java.lang.Object $r5, $r7, $r20;
        ca.liang.EmployeeList $r6, $r9, $r17;
        ca.liang.BankService $r8, $r16, $r18, $r21;
        java.util.List $r10, $r13;
        org.mockito.stubbing.OngoingStubbing $r11;
        ca.liang.PayRoll $r15;
        org.mockito.verification.VerificationMode $r19;

        r0 := @this: ca.liang.PayRollArrayTest;

        $r2 = newarray (ca.liang.Employee)[1];

        r0.<ca.liang.PayRollArrayTest: ca.liang.Employee[] employees> = $r2;

        $r3 = r0.<ca.liang.PayRollArrayTest: ca.liang.Employee[] employees>;

        $r4 = specialinvoke r0.<ca.liang.PayRollArrayTest: ca.liang.Employee createTestEmployee(java.lang.String,java.lang.String,int)>("Test Employee", "ID0", 1000);

        $r3[0] = $r4;

        $r5 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/EmployeeList;");

        $r6 = (ca.liang.EmployeeList) $r5;

        r0.<ca.liang.PayRollArrayTest: ca.liang.EmployeeList employeeList> = $r6;

        $r7 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/BankService;");

        $r8 = (ca.liang.BankService) $r7;

        r0.<ca.liang.PayRollArrayTest: ca.liang.BankService bankService> = $r8;

        $r9 = r0.<ca.liang.PayRollArrayTest: ca.liang.EmployeeList employeeList>;

        $r10 = virtualinvoke $r9.<ca.liang.EmployeeList: java.util.List getAllEmployees()>();

        $r11 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r10);

        $r12 = r0.<ca.liang.PayRollArrayTest: ca.liang.Employee[] employees>;

        $r13 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r12);

        interfaceinvoke $r11.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r13);

        $r15 = new ca.liang.PayRoll;

        $r17 = r0.<ca.liang.PayRollArrayTest: ca.liang.EmployeeList employeeList>;

        $r16 = r0.<ca.liang.PayRollArrayTest: ca.liang.BankService bankService>;

        specialinvoke $r15.<ca.liang.PayRoll: void <init>(ca.liang.EmployeeList,ca.liang.BankService)>($r17, $r16);

        r0.<ca.liang.PayRollArrayTest: ca.liang.PayRoll payRoll> = $r15;

        specialinvoke r0.<ca.liang.PayRollArrayTest: void assertNumberOfPayments(int)>(1);

        $r18 = r0.<ca.liang.PayRollArrayTest: ca.liang.BankService bankService>;

        $r19 = staticinvoke <org.mockito.Mockito: org.mockito.verification.VerificationMode times(int)>(1);

        $r20 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object,org.mockito.verification.VerificationMode)>($r18, $r19);

        $r21 = (ca.liang.BankService) $r20;

        virtualinvoke $r21.<ca.liang.BankService: void makePayment(java.lang.String,int)>("ID0", 1000);

        return;
    }

    public void testAllEmployeesArePaidArray()
    {
        ca.liang.PayRollArrayTest r0;
        org.mockito.ArgumentCaptor r2, r3;
        ca.liang.Employee[] $r4, $r6, $r8, $r24, $r29, $r34, $r39;
        java.util.ArrayList $r5;
        ca.liang.Employee $r7, $r9, $r25, $r30, $r35, $r40;
        ca.liang.EmployeeList $r10, $r15;
        java.lang.Object $r11, $r18, $r20, $r22, $r28, $r33, $r37, $r42;
        ca.liang.BankService $r12, $r14, $r16, $r19;
        ca.liang.PayRoll $r13;
        org.mockito.verification.VerificationMode $r17;
        java.lang.String $r21, $r26, $r31;
        java.lang.Integer $r23, $r38, $r43;
        int $i0, $i1, $i3, $i5, $i7;
        java.util.List $r27, $r32, $r36, $r41;
        long $l2, $l4, $l6, $l8;

        r0 := @this: ca.liang.PayRollArrayTest;

        $r4 = specialinvoke r0.<ca.liang.PayRollArrayTest: ca.liang.Employee[] createEmployees()>();

        r0.<ca.liang.PayRollArrayTest: ca.liang.Employee[] employees> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = r0.<ca.liang.PayRollArrayTest: ca.liang.Employee[] employees>;

        $r7 = $r6[0];

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r7);

        $r8 = r0.<ca.liang.PayRollArrayTest: ca.liang.Employee[] employees>;

        $r9 = $r8[1];

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r9);

        $r10 = new ca.liang.EmployeeList;

        specialinvoke $r10.<ca.liang.EmployeeList: void <init>(java.util.List)>($r5);

        r0.<ca.liang.PayRollArrayTest: ca.liang.EmployeeList employeeList> = $r10;

        $r11 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/BankService;");

        $r12 = (ca.liang.BankService) $r11;

        r0.<ca.liang.PayRollArrayTest: ca.liang.BankService bankService> = $r12;

        $r13 = new ca.liang.PayRoll;

        $r15 = r0.<ca.liang.PayRollArrayTest: ca.liang.EmployeeList employeeList>;

        $r14 = r0.<ca.liang.PayRollArrayTest: ca.liang.BankService bankService>;

        specialinvoke $r13.<ca.liang.PayRoll: void <init>(ca.liang.EmployeeList,ca.liang.BankService)>($r15, $r14);

        r0.<ca.liang.PayRollArrayTest: ca.liang.PayRoll payRoll> = $r13;

        specialinvoke r0.<ca.liang.PayRollArrayTest: void assertNumberOfPayments(int)>(2);

        r2 = staticinvoke <org.mockito.ArgumentCaptor: org.mockito.ArgumentCaptor forClass(java.lang.Class)>(class "Ljava/lang/String;");

        r3 = staticinvoke <org.mockito.ArgumentCaptor: org.mockito.ArgumentCaptor forClass(java.lang.Class)>(class "Ljava/lang/Integer;");

        $r16 = r0.<ca.liang.PayRollArrayTest: ca.liang.BankService bankService>;

        $r17 = staticinvoke <org.mockito.Mockito: org.mockito.verification.VerificationMode times(int)>(2);

        $r18 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object,org.mockito.verification.VerificationMode)>($r16, $r17);

        $r19 = (ca.liang.BankService) $r18;

        $r20 = virtualinvoke r2.<org.mockito.ArgumentCaptor: java.lang.Object capture()>();

        $r21 = (java.lang.String) $r20;

        $r22 = virtualinvoke r3.<org.mockito.ArgumentCaptor: java.lang.Object capture()>();

        $r23 = (java.lang.Integer) $r22;

        $i0 = virtualinvoke $r23.<java.lang.Integer: int intValue()>();

        virtualinvoke $r19.<ca.liang.BankService: void makePayment(java.lang.String,int)>($r21, $i0);

        $r24 = r0.<ca.liang.PayRollArrayTest: ca.liang.Employee[] employees>;

        $r25 = $r24[0];

        $r26 = virtualinvoke $r25.<ca.liang.Employee: java.lang.String getBankId()>();

        $r27 = virtualinvoke r2.<org.mockito.ArgumentCaptor: java.util.List getAllValues()>();

        $r28 = interfaceinvoke $r27.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r26, $r28);

        $r29 = r0.<ca.liang.PayRollArrayTest: ca.liang.Employee[] employees>;

        $r30 = $r29[1];

        $r31 = virtualinvoke $r30.<ca.liang.Employee: java.lang.String getBankId()>();

        $r32 = virtualinvoke r2.<org.mockito.ArgumentCaptor: java.util.List getAllValues()>();

        $r33 = interfaceinvoke $r32.<java.util.List: java.lang.Object get(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r31, $r33);

        $r34 = r0.<ca.liang.PayRollArrayTest: ca.liang.Employee[] employees>;

        $r35 = $r34[0];

        $i1 = virtualinvoke $r35.<ca.liang.Employee: int getSalary()>();

        $l2 = (long) $i1;

        $r36 = virtualinvoke r3.<org.mockito.ArgumentCaptor: java.util.List getAllValues()>();

        $r37 = interfaceinvoke $r36.<java.util.List: java.lang.Object get(int)>(0);

        $r38 = (java.lang.Integer) $r37;

        $i3 = virtualinvoke $r38.<java.lang.Integer: int intValue()>();

        $l4 = (long) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l2, $l4);

        $r39 = r0.<ca.liang.PayRollArrayTest: ca.liang.Employee[] employees>;

        $r40 = $r39[1];

        $i5 = virtualinvoke $r40.<ca.liang.Employee: int getSalary()>();

        $l6 = (long) $i5;

        $r41 = virtualinvoke r3.<org.mockito.ArgumentCaptor: java.util.List getAllValues()>();

        $r42 = interfaceinvoke $r41.<java.util.List: java.lang.Object get(int)>(1);

        $r43 = (java.lang.Integer) $r42;

        $i7 = virtualinvoke $r43.<java.lang.Integer: int intValue()>();

        $l8 = (long) $i7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l6, $l8);

        return;
    }

    private void assertNumberOfPayments(int)
    {
        ca.liang.PayRollArrayTest r0;
        int i0, i1;
        ca.liang.PayRoll $r1;
        long $l2, $l3;

        r0 := @this: ca.liang.PayRollArrayTest;

        i0 := @parameter0: int;

        $r1 = r0.<ca.liang.PayRollArrayTest: ca.liang.PayRoll payRoll>;

        i1 = virtualinvoke $r1.<ca.liang.PayRoll: int monthlyPayment()>();

        $l3 = (long) i0;

        $l2 = (long) i1;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l3, $l2);

        return;
    }

    private ca.liang.Employee createTestEmployee(java.lang.String, java.lang.String, int)
    {
        ca.liang.PayRollArrayTest r0;
        java.lang.String r1, r2;
        int i0;
        ca.liang.Employee $r3;

        r0 := @this: ca.liang.PayRollArrayTest;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r3 = new ca.liang.Employee;

        specialinvoke $r3.<ca.liang.Employee: void <init>(java.lang.String,java.lang.String,int)>(r1, r2, i0);

        return $r3;
    }

    private ca.liang.Employee[] createEmployees()
    {
        ca.liang.PayRollArrayTest r0;
        ca.liang.Employee r1, r2;
        java.lang.Object $r3, $r4;
        ca.liang.Employee[] $r5;

        r0 := @this: ca.liang.PayRollArrayTest;

        $r3 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/Employee;");

        r1 = (ca.liang.Employee) $r3;

        $r4 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/Employee;");

        r2 = (ca.liang.Employee) $r4;

        $r5 = newarray (ca.liang.Employee)[2];

        $r5[0] = r1;

        $r5[1] = r2;

        return $r5;
    }
}
