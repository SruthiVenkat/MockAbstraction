public class ca.uwaterloo.liang.PayRollArrayTest extends java.lang.Object
{
    private ca.uwaterloo.liang.PayRoll payRoll;
    private ca.uwaterloo.liang.EmployeeList employeeList;
    private ca.uwaterloo.liang.BankService bankService;
    private ca.uwaterloo.liang.Employee[] employees;

    public void <init>()
    {
        ca.uwaterloo.liang.PayRollArrayTest r0;

        r0 := @this: ca.uwaterloo.liang.PayRollArrayTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void init()
    {
        ca.uwaterloo.liang.PayRollArrayTest r0;
        ca.uwaterloo.liang.Employee[] $r3, $r17, $r22;
        java.util.ArrayList $r4;
        ca.uwaterloo.liang.Employee $r5, $r6;
        ca.uwaterloo.liang.EmployeeList $r7, $r14;
        java.util.HashMap $r8;
        java.lang.Integer $r9, $r11;
        ca.uwaterloo.liang.BankService $r13, $r21;
        java.util.List $r15, $r18;
        org.mockito.stubbing.OngoingStubbing $r16;
        ca.uwaterloo.liang.PayRoll $r20;

        r0 := @this: ca.uwaterloo.liang.PayRollArrayTest;

        $r3 = newarray (ca.uwaterloo.liang.Employee)[2];

        r0.<ca.uwaterloo.liang.PayRollArrayTest: ca.uwaterloo.liang.Employee[] employees> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = specialinvoke r0.<ca.uwaterloo.liang.PayRollArrayTest: ca.uwaterloo.liang.Employee createTestEmployee(java.lang.String,java.lang.String,int)>("Test Employee1", "ID0", 1000);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r5);

        $r6 = specialinvoke r0.<ca.uwaterloo.liang.PayRollArrayTest: ca.uwaterloo.liang.Employee createTestEmployee(java.lang.String,java.lang.String,int)>("Test Employee2", "ID1", 2000);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r6);

        $r7 = new ca.uwaterloo.liang.EmployeeList;

        specialinvoke $r7.<ca.uwaterloo.liang.EmployeeList: void <init>(java.util.List)>($r4);

        r0.<ca.uwaterloo.liang.PayRollArrayTest: ca.uwaterloo.liang.EmployeeList employeeList> = $r7;

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1000);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ID0", $r9);

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2000);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ID1", $r11);

        $r13 = new ca.uwaterloo.liang.BankService;

        specialinvoke $r13.<ca.uwaterloo.liang.BankService: void <init>(java.util.Map)>($r8);

        r0.<ca.uwaterloo.liang.PayRollArrayTest: ca.uwaterloo.liang.BankService bankService> = $r13;

        $r14 = r0.<ca.uwaterloo.liang.PayRollArrayTest: ca.uwaterloo.liang.EmployeeList employeeList>;

        $r15 = virtualinvoke $r14.<ca.uwaterloo.liang.EmployeeList: java.util.List getAllEmployees()>();

        $r16 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r15);

        $r17 = r0.<ca.uwaterloo.liang.PayRollArrayTest: ca.uwaterloo.liang.Employee[] employees>;

        $r18 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r17);

        interfaceinvoke $r16.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r18);

        $r20 = new ca.uwaterloo.liang.PayRoll;

        $r22 = r0.<ca.uwaterloo.liang.PayRollArrayTest: ca.uwaterloo.liang.Employee[] employees>;

        $r21 = r0.<ca.uwaterloo.liang.PayRollArrayTest: ca.uwaterloo.liang.BankService bankService>;

        specialinvoke $r20.<ca.uwaterloo.liang.PayRoll: void <init>(ca.uwaterloo.liang.Employee[],ca.uwaterloo.liang.BankService)>($r22, $r21);

        r0.<ca.uwaterloo.liang.PayRollArrayTest: ca.uwaterloo.liang.PayRoll payRoll> = $r20;

        return;
    }

    public void testNoEmployees()
    {
        ca.uwaterloo.liang.PayRollArrayTest r0;

        r0 := @this: ca.uwaterloo.liang.PayRollArrayTest;

        specialinvoke r0.<ca.uwaterloo.liang.PayRollArrayTest: void assertNumberOfPayments(int)>(0);

        return;
    }

    public void testNoEmployeesIntra()
    {
        ca.uwaterloo.liang.PayRollArrayTest r0;
        ca.uwaterloo.liang.Employee[] r1;
        ca.uwaterloo.liang.EmployeeList r2;
        ca.uwaterloo.liang.BankService r3;
        int i0;
        java.lang.Object $r5, $r7, $r10;
        ca.uwaterloo.liang.Employee $r6, $r8;
        java.util.List $r9, $r11, $r13;
        org.mockito.stubbing.OngoingStubbing $r12;
        ca.uwaterloo.liang.PayRoll $r15;
        long $l1;

        r0 := @this: ca.uwaterloo.liang.PayRollArrayTest;

        r1 = newarray (ca.uwaterloo.liang.Employee)[2];

        $r5 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/uwaterloo/liang/Employee;");

        $r6 = (ca.uwaterloo.liang.Employee) $r5;

        r1[0] = $r6;

        $r7 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/uwaterloo/liang/Employee;");

        $r8 = (ca.uwaterloo.liang.Employee) $r7;

        r1[1] = $r8;

        $r9 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        r2 = (ca.uwaterloo.liang.EmployeeList) $r9;

        $r10 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/uwaterloo/liang/BankService;");

        r3 = (ca.uwaterloo.liang.BankService) $r10;

        $r11 = virtualinvoke r2.<ca.uwaterloo.liang.EmployeeList: java.util.List getAllEmployees()>();

        $r12 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r11);

        $r13 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        interfaceinvoke $r12.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r13);

        $r15 = new ca.uwaterloo.liang.PayRoll;

        specialinvoke $r15.<ca.uwaterloo.liang.PayRoll: void <init>(ca.uwaterloo.liang.Employee[],ca.uwaterloo.liang.BankService)>(r1, r3);

        i0 = virtualinvoke $r15.<ca.uwaterloo.liang.PayRoll: int monthlyPayment()>();

        $l1 = (long) i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        return;
    }

    public void testSingleEmployee()
    {
        ca.uwaterloo.liang.PayRollArrayTest r0;
        ca.uwaterloo.liang.Employee[] $r1;
        ca.uwaterloo.liang.Employee $r2;

        r0 := @this: ca.uwaterloo.liang.PayRollArrayTest;

        $r1 = r0.<ca.uwaterloo.liang.PayRollArrayTest: ca.uwaterloo.liang.Employee[] employees>;

        $r2 = specialinvoke r0.<ca.uwaterloo.liang.PayRollArrayTest: ca.uwaterloo.liang.Employee createTestEmployee(java.lang.String,java.lang.String,int)>("Test Employee", "ID0", 1000);

        $r1[0] = $r2;

        specialinvoke r0.<ca.uwaterloo.liang.PayRollArrayTest: void assertNumberOfPayments(int)>(1);

        return;
    }

    public void testEmployeeIsPaid()
    {
        ca.uwaterloo.liang.PayRollArrayTest r0;
        ca.uwaterloo.liang.Employee[] $r2;
        ca.uwaterloo.liang.Employee $r3;
        ca.uwaterloo.liang.BankService $r4, $r7;
        org.mockito.verification.VerificationMode $r5;
        java.lang.Object $r6;

        r0 := @this: ca.uwaterloo.liang.PayRollArrayTest;

        $r2 = r0.<ca.uwaterloo.liang.PayRollArrayTest: ca.uwaterloo.liang.Employee[] employees>;

        $r3 = specialinvoke r0.<ca.uwaterloo.liang.PayRollArrayTest: ca.uwaterloo.liang.Employee createTestEmployee(java.lang.String,java.lang.String,int)>("Test Employee", "ID1", 1000);

        $r2[0] = $r3;

        specialinvoke r0.<ca.uwaterloo.liang.PayRollArrayTest: void assertNumberOfPayments(int)>(1);

        $r4 = r0.<ca.uwaterloo.liang.PayRollArrayTest: ca.uwaterloo.liang.BankService bankService>;

        $r5 = staticinvoke <org.mockito.Mockito: org.mockito.verification.VerificationMode times(int)>(1);

        $r6 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object,org.mockito.verification.VerificationMode)>($r4, $r5);

        $r7 = (ca.uwaterloo.liang.BankService) $r6;

        virtualinvoke $r7.<ca.uwaterloo.liang.BankService: void makePayment(java.lang.String,int)>("ID0", 1000);

        return;
    }

    public void testAllEmployeesArePaidArray()
    {
        ca.uwaterloo.liang.PayRollArrayTest r0;
        org.mockito.ArgumentCaptor r1, r2;
        ca.uwaterloo.liang.Employee[] $r3;
        ca.uwaterloo.liang.BankService $r4, $r7;
        org.mockito.verification.VerificationMode $r5;
        java.lang.Object $r6, $r8, $r10, $r13, $r15, $r17, $r20;
        java.lang.String $r9;
        java.lang.Integer $r11, $r18, $r21;
        int $i0, $i1, $i3;
        java.util.List $r12, $r14, $r16, $r19;
        long $l2, $l4;

        r0 := @this: ca.uwaterloo.liang.PayRollArrayTest;

        $r3 = specialinvoke r0.<ca.uwaterloo.liang.PayRollArrayTest: ca.uwaterloo.liang.Employee[] createEmployees()>();

        r0.<ca.uwaterloo.liang.PayRollArrayTest: ca.uwaterloo.liang.Employee[] employees> = $r3;

        specialinvoke r0.<ca.uwaterloo.liang.PayRollArrayTest: void assertNumberOfPayments(int)>(2);

        r1 = staticinvoke <org.mockito.ArgumentCaptor: org.mockito.ArgumentCaptor forClass(java.lang.Class)>(class "Ljava/lang/String;");

        r2 = staticinvoke <org.mockito.ArgumentCaptor: org.mockito.ArgumentCaptor forClass(java.lang.Class)>(class "Ljava/lang/Integer;");

        $r4 = r0.<ca.uwaterloo.liang.PayRollArrayTest: ca.uwaterloo.liang.BankService bankService>;

        $r5 = staticinvoke <org.mockito.Mockito: org.mockito.verification.VerificationMode times(int)>(2);

        $r6 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object,org.mockito.verification.VerificationMode)>($r4, $r5);

        $r7 = (ca.uwaterloo.liang.BankService) $r6;

        $r8 = virtualinvoke r1.<org.mockito.ArgumentCaptor: java.lang.Object capture()>();

        $r9 = (java.lang.String) $r8;

        $r10 = virtualinvoke r2.<org.mockito.ArgumentCaptor: java.lang.Object capture()>();

        $r11 = (java.lang.Integer) $r10;

        $i0 = virtualinvoke $r11.<java.lang.Integer: int intValue()>();

        virtualinvoke $r7.<ca.uwaterloo.liang.BankService: void makePayment(java.lang.String,int)>($r9, $i0);

        $r12 = virtualinvoke r1.<org.mockito.ArgumentCaptor: java.util.List getAllValues()>();

        $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ID0", $r13);

        $r14 = virtualinvoke r1.<org.mockito.ArgumentCaptor: java.util.List getAllValues()>();

        $r15 = interfaceinvoke $r14.<java.util.List: java.lang.Object get(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ID1", $r15);

        $r16 = virtualinvoke r2.<org.mockito.ArgumentCaptor: java.util.List getAllValues()>();

        $r17 = interfaceinvoke $r16.<java.util.List: java.lang.Object get(int)>(0);

        $r18 = (java.lang.Integer) $r17;

        $i1 = virtualinvoke $r18.<java.lang.Integer: int intValue()>();

        $l2 = (long) $i1;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1000L, $l2);

        $r19 = virtualinvoke r2.<org.mockito.ArgumentCaptor: java.util.List getAllValues()>();

        $r20 = interfaceinvoke $r19.<java.util.List: java.lang.Object get(int)>(1);

        $r21 = (java.lang.Integer) $r20;

        $i3 = virtualinvoke $r21.<java.lang.Integer: int intValue()>();

        $l4 = (long) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2000L, $l4);

        return;
    }

    private void assertNumberOfPayments(int)
    {
        ca.uwaterloo.liang.PayRollArrayTest r0;
        int i0, i1;
        ca.uwaterloo.liang.PayRoll $r1;
        long $l2, $l3;

        r0 := @this: ca.uwaterloo.liang.PayRollArrayTest;

        i0 := @parameter0: int;

        $r1 = r0.<ca.uwaterloo.liang.PayRollArrayTest: ca.uwaterloo.liang.PayRoll payRoll>;

        i1 = virtualinvoke $r1.<ca.uwaterloo.liang.PayRoll: int monthlyPayment()>();

        $l3 = (long) i0;

        $l2 = (long) i1;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l3, $l2);

        return;
    }

    private ca.uwaterloo.liang.Employee createTestEmployee(java.lang.String, java.lang.String, int)
    {
        ca.uwaterloo.liang.PayRollArrayTest r0;
        java.lang.String r1, r2;
        int i0;
        ca.uwaterloo.liang.Employee $r3;

        r0 := @this: ca.uwaterloo.liang.PayRollArrayTest;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r3 = new ca.uwaterloo.liang.Employee;

        specialinvoke $r3.<ca.uwaterloo.liang.Employee: void <init>(java.lang.String,java.lang.String,int)>(r1, r2, i0);

        return $r3;
    }

    private ca.uwaterloo.liang.Employee[] createEmployees()
    {
        ca.uwaterloo.liang.PayRollArrayTest r0;
        ca.uwaterloo.liang.Employee r1, r2;
        java.lang.Object $r3, $r4;
        ca.uwaterloo.liang.Employee[] $r5;

        r0 := @this: ca.uwaterloo.liang.PayRollArrayTest;

        $r3 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/uwaterloo/liang/Employee;");

        r1 = (ca.uwaterloo.liang.Employee) $r3;

        $r4 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/uwaterloo/liang/Employee;");

        r2 = (ca.uwaterloo.liang.Employee) $r4;

        $r5 = newarray (ca.uwaterloo.liang.Employee)[2];

        $r5[0] = r1;

        $r5[1] = r2;

        return $r5;
    }
}
