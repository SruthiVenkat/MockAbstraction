public class ca.liang.PayRollArrayMockTest extends java.lang.Object
{
    private ca.liang.PayRoll payRoll;
    private ca.liang.EmployeeList employeeList;
    private ca.liang.BankService bankService;
    private ca.liang.Employee[] employees;

    public void <init>()
    {
        ca.liang.PayRollArrayMockTest r0;

        r0 := @this: ca.liang.PayRollArrayMockTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void init()
    {
        ca.liang.PayRollArrayMockTest r0;
        ca.liang.Employee[] $r1, $r9;
        java.lang.Object $r2, $r4;
        ca.liang.EmployeeList $r3, $r6, $r14;
        ca.liang.BankService $r5, $r13;
        java.util.List $r7, $r10;
        org.mockito.stubbing.OngoingStubbing $r8;
        ca.liang.PayRoll $r12;

        r0 := @this: ca.liang.PayRollArrayMockTest;

        $r1 = newarray (ca.liang.Employee)[0];

        r0.<ca.liang.PayRollArrayMockTest: ca.liang.Employee[] employees> = $r1;

        $r2 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/EmployeeList;");

        $r3 = (ca.liang.EmployeeList) $r2;

        r0.<ca.liang.PayRollArrayMockTest: ca.liang.EmployeeList employeeList> = $r3;

        $r4 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/BankService;");

        $r5 = (ca.liang.BankService) $r4;

        r0.<ca.liang.PayRollArrayMockTest: ca.liang.BankService bankService> = $r5;

        $r6 = r0.<ca.liang.PayRollArrayMockTest: ca.liang.EmployeeList employeeList>;

        $r7 = virtualinvoke $r6.<ca.liang.EmployeeList: java.util.List getAllEmployees()>();

        $r8 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r7);

        $r9 = r0.<ca.liang.PayRollArrayMockTest: ca.liang.Employee[] employees>;

        $r10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r9);

        interfaceinvoke $r8.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r10);

        $r12 = new ca.liang.PayRoll;

        $r14 = r0.<ca.liang.PayRollArrayMockTest: ca.liang.EmployeeList employeeList>;

        $r13 = r0.<ca.liang.PayRollArrayMockTest: ca.liang.BankService bankService>;

        specialinvoke $r12.<ca.liang.PayRoll: void <init>(ca.liang.EmployeeList,ca.liang.BankService)>($r14, $r13);

        r0.<ca.liang.PayRollArrayMockTest: ca.liang.PayRoll payRoll> = $r12;

        return;
    }

    public void testNoEmployees()
    {
        ca.liang.PayRollArrayMockTest r0;

        r0 := @this: ca.liang.PayRollArrayMockTest;

        specialinvoke r0.<ca.liang.PayRollArrayMockTest: void assertNumberOfPayments(int)>(0);

        return;
    }

    public void testEmployeesPaidIntra()
    {
        ca.liang.PayRollArrayMockTest r0;
        ca.liang.Employee[] r1;
        ca.liang.BankService r3;
        int i0;
        java.lang.Object $r5, $r7, $r11;
        ca.liang.Employee $r6, $r8;
        ca.liang.EmployeeList $r9;
        java.util.List $r10;
        ca.liang.PayRoll $r12;
        long $l1;

        r0 := @this: ca.liang.PayRollArrayMockTest;

        r1 = newarray (ca.liang.Employee)[2];

        $r5 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/Employee;");

        $r6 = (ca.liang.Employee) $r5;

        r1[0] = $r6;

        $r7 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/Employee;");

        $r8 = (ca.liang.Employee) $r7;

        r1[1] = $r8;

        $r9 = new ca.liang.EmployeeList;

        $r10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        specialinvoke $r9.<ca.liang.EmployeeList: void <init>(java.util.List)>($r10);

        $r11 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/BankService;");

        r3 = (ca.liang.BankService) $r11;

        $r12 = new ca.liang.PayRoll;

        specialinvoke $r12.<ca.liang.PayRoll: void <init>(ca.liang.Employee[],ca.liang.BankService)>(r1, r3);

        i0 = virtualinvoke $r12.<ca.liang.PayRoll: int monthlyPayment()>();

        $l1 = (long) i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l1);

        return;
    }

    public void testSingleEmployee()
    {
        ca.liang.PayRollArrayMockTest r0;
        ca.liang.Employee[] $r2, $r3, $r12;
        ca.liang.Employee $r4;
        java.lang.Object $r5, $r7;
        ca.liang.EmployeeList $r6, $r9, $r17;
        ca.liang.BankService $r8, $r16;
        java.util.List $r10, $r13;
        org.mockito.stubbing.OngoingStubbing $r11;
        ca.liang.PayRoll $r15;

        r0 := @this: ca.liang.PayRollArrayMockTest;

        $r2 = newarray (ca.liang.Employee)[1];

        r0.<ca.liang.PayRollArrayMockTest: ca.liang.Employee[] employees> = $r2;

        $r3 = r0.<ca.liang.PayRollArrayMockTest: ca.liang.Employee[] employees>;

        $r4 = specialinvoke r0.<ca.liang.PayRollArrayMockTest: ca.liang.Employee createTestEmployee(java.lang.String,java.lang.String,int)>("Test Employee", "ID0", 1000);

        $r3[0] = $r4;

        $r5 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/EmployeeList;");

        $r6 = (ca.liang.EmployeeList) $r5;

        r0.<ca.liang.PayRollArrayMockTest: ca.liang.EmployeeList employeeList> = $r6;

        $r7 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/BankService;");

        $r8 = (ca.liang.BankService) $r7;

        r0.<ca.liang.PayRollArrayMockTest: ca.liang.BankService bankService> = $r8;

        $r9 = r0.<ca.liang.PayRollArrayMockTest: ca.liang.EmployeeList employeeList>;

        $r10 = virtualinvoke $r9.<ca.liang.EmployeeList: java.util.List getAllEmployees()>();

        $r11 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r10);

        $r12 = r0.<ca.liang.PayRollArrayMockTest: ca.liang.Employee[] employees>;

        $r13 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r12);

        interfaceinvoke $r11.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r13);

        $r15 = new ca.liang.PayRoll;

        $r17 = r0.<ca.liang.PayRollArrayMockTest: ca.liang.EmployeeList employeeList>;

        $r16 = r0.<ca.liang.PayRollArrayMockTest: ca.liang.BankService bankService>;

        specialinvoke $r15.<ca.liang.PayRoll: void <init>(ca.liang.EmployeeList,ca.liang.BankService)>($r17, $r16);

        r0.<ca.liang.PayRollArrayMockTest: ca.liang.PayRoll payRoll> = $r15;

        specialinvoke r0.<ca.liang.PayRollArrayMockTest: void assertNumberOfPayments(int)>(1);

        return;
    }

    public void testEmployeeIsPaid()
    {
        ca.liang.PayRollArrayMockTest r0;
        ca.liang.Employee[] $r2, $r3, $r12;
        ca.liang.Employee $r4;
        java.lang.Object $r5, $r7, $r20;
        ca.liang.EmployeeList $r6, $r9, $r17;
        ca.liang.BankService $r8, $r16, $r18, $r21;
        java.util.List $r10, $r13;
        org.mockito.stubbing.OngoingStubbing $r11;
        ca.liang.PayRoll $r15;
        org.mockito.verification.VerificationMode $r19;

        r0 := @this: ca.liang.PayRollArrayMockTest;

        $r2 = newarray (ca.liang.Employee)[1];

        r0.<ca.liang.PayRollArrayMockTest: ca.liang.Employee[] employees> = $r2;

        $r3 = r0.<ca.liang.PayRollArrayMockTest: ca.liang.Employee[] employees>;

        $r4 = specialinvoke r0.<ca.liang.PayRollArrayMockTest: ca.liang.Employee createTestEmployee(java.lang.String,java.lang.String,int)>("Test Employee", "ID0", 1000);

        $r3[0] = $r4;

        $r5 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/EmployeeList;");

        $r6 = (ca.liang.EmployeeList) $r5;

        r0.<ca.liang.PayRollArrayMockTest: ca.liang.EmployeeList employeeList> = $r6;

        $r7 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/BankService;");

        $r8 = (ca.liang.BankService) $r7;

        r0.<ca.liang.PayRollArrayMockTest: ca.liang.BankService bankService> = $r8;

        $r9 = r0.<ca.liang.PayRollArrayMockTest: ca.liang.EmployeeList employeeList>;

        $r10 = virtualinvoke $r9.<ca.liang.EmployeeList: java.util.List getAllEmployees()>();

        $r11 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r10);

        $r12 = r0.<ca.liang.PayRollArrayMockTest: ca.liang.Employee[] employees>;

        $r13 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r12);

        interfaceinvoke $r11.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r13);

        $r15 = new ca.liang.PayRoll;

        $r17 = r0.<ca.liang.PayRollArrayMockTest: ca.liang.EmployeeList employeeList>;

        $r16 = r0.<ca.liang.PayRollArrayMockTest: ca.liang.BankService bankService>;

        specialinvoke $r15.<ca.liang.PayRoll: void <init>(ca.liang.EmployeeList,ca.liang.BankService)>($r17, $r16);

        r0.<ca.liang.PayRollArrayMockTest: ca.liang.PayRoll payRoll> = $r15;

        specialinvoke r0.<ca.liang.PayRollArrayMockTest: void assertNumberOfPayments(int)>(1);

        $r18 = r0.<ca.liang.PayRollArrayMockTest: ca.liang.BankService bankService>;

        $r19 = staticinvoke <org.mockito.Mockito: org.mockito.verification.VerificationMode times(int)>(1);

        $r20 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object,org.mockito.verification.VerificationMode)>($r18, $r19);

        $r21 = (ca.liang.BankService) $r20;

        virtualinvoke $r21.<ca.liang.BankService: void makePayment(java.lang.String,int)>("ID0", 1000);

        return;
    }

    public void testAllEmployeesArePaidArray()
    {
        ca.liang.PayRollArrayMockTest r0;
        ca.liang.Employee r1, r2, $r31, $r36, $r41, $r46;
        org.mockito.ArgumentCaptor r3, r4;
        ca.liang.Employee[] $r5, $r8, $r16, $r30, $r35, $r40, $r45;
        java.lang.Object $r6, $r7, $r9, $r11, $r24, $r26, $r28, $r34, $r39, $r43, $r48;
        ca.liang.EmployeeList $r10, $r13, $r21;
        ca.liang.BankService $r12, $r20, $r22, $r25;
        java.util.List $r14, $r17, $r33, $r38, $r42, $r47;
        org.mockito.stubbing.OngoingStubbing $r15;
        ca.liang.PayRoll $r19;
        org.mockito.verification.VerificationMode $r23;
        java.lang.String $r27, $r32, $r37;
        java.lang.Integer $r29, $r44, $r49;
        int $i0, $i1, $i3, $i5, $i7;
        long $l2, $l4, $l6, $l8;

        r0 := @this: ca.liang.PayRollArrayMockTest;

        $r5 = specialinvoke r0.<ca.liang.PayRollArrayMockTest: ca.liang.Employee[] createEmployees()>();

        r0.<ca.liang.PayRollArrayMockTest: ca.liang.Employee[] employees> = $r5;

        $r6 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/Employee;");

        r1 = (ca.liang.Employee) $r6;

        $r7 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/Employee;");

        r2 = (ca.liang.Employee) $r7;

        $r8 = newarray (ca.liang.Employee)[2];

        $r8[0] = r1;

        $r8[1] = r2;

        r0.<ca.liang.PayRollArrayMockTest: ca.liang.Employee[] employees> = $r8;

        $r9 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/EmployeeList;");

        $r10 = (ca.liang.EmployeeList) $r9;

        r0.<ca.liang.PayRollArrayMockTest: ca.liang.EmployeeList employeeList> = $r10;

        $r11 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/BankService;");

        $r12 = (ca.liang.BankService) $r11;

        r0.<ca.liang.PayRollArrayMockTest: ca.liang.BankService bankService> = $r12;

        $r13 = r0.<ca.liang.PayRollArrayMockTest: ca.liang.EmployeeList employeeList>;

        $r14 = virtualinvoke $r13.<ca.liang.EmployeeList: java.util.List getAllEmployees()>();

        $r15 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r14);

        $r16 = r0.<ca.liang.PayRollArrayMockTest: ca.liang.Employee[] employees>;

        $r17 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r16);

        interfaceinvoke $r15.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r17);

        $r19 = new ca.liang.PayRoll;

        $r21 = r0.<ca.liang.PayRollArrayMockTest: ca.liang.EmployeeList employeeList>;

        $r20 = r0.<ca.liang.PayRollArrayMockTest: ca.liang.BankService bankService>;

        specialinvoke $r19.<ca.liang.PayRoll: void <init>(ca.liang.EmployeeList,ca.liang.BankService)>($r21, $r20);

        r0.<ca.liang.PayRollArrayMockTest: ca.liang.PayRoll payRoll> = $r19;

        specialinvoke r0.<ca.liang.PayRollArrayMockTest: void assertNumberOfPayments(int)>(2);

        r3 = staticinvoke <org.mockito.ArgumentCaptor: org.mockito.ArgumentCaptor forClass(java.lang.Class)>(class "Ljava/lang/String;");

        r4 = staticinvoke <org.mockito.ArgumentCaptor: org.mockito.ArgumentCaptor forClass(java.lang.Class)>(class "Ljava/lang/Integer;");

        $r22 = r0.<ca.liang.PayRollArrayMockTest: ca.liang.BankService bankService>;

        $r23 = staticinvoke <org.mockito.Mockito: org.mockito.verification.VerificationMode times(int)>(2);

        $r24 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object,org.mockito.verification.VerificationMode)>($r22, $r23);

        $r25 = (ca.liang.BankService) $r24;

        $r26 = virtualinvoke r3.<org.mockito.ArgumentCaptor: java.lang.Object capture()>();

        $r27 = (java.lang.String) $r26;

        $r28 = virtualinvoke r4.<org.mockito.ArgumentCaptor: java.lang.Object capture()>();

        $r29 = (java.lang.Integer) $r28;

        $i0 = virtualinvoke $r29.<java.lang.Integer: int intValue()>();

        virtualinvoke $r25.<ca.liang.BankService: void makePayment(java.lang.String,int)>($r27, $i0);

        $r30 = r0.<ca.liang.PayRollArrayMockTest: ca.liang.Employee[] employees>;

        $r31 = $r30[0];

        $r32 = virtualinvoke $r31.<ca.liang.Employee: java.lang.String getBankId()>();

        $r33 = virtualinvoke r3.<org.mockito.ArgumentCaptor: java.util.List getAllValues()>();

        $r34 = interfaceinvoke $r33.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r32, $r34);

        $r35 = r0.<ca.liang.PayRollArrayMockTest: ca.liang.Employee[] employees>;

        $r36 = $r35[1];

        $r37 = virtualinvoke $r36.<ca.liang.Employee: java.lang.String getBankId()>();

        $r38 = virtualinvoke r3.<org.mockito.ArgumentCaptor: java.util.List getAllValues()>();

        $r39 = interfaceinvoke $r38.<java.util.List: java.lang.Object get(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r37, $r39);

        $r40 = r0.<ca.liang.PayRollArrayMockTest: ca.liang.Employee[] employees>;

        $r41 = $r40[0];

        $i1 = virtualinvoke $r41.<ca.liang.Employee: int getSalary()>();

        $l2 = (long) $i1;

        $r42 = virtualinvoke r4.<org.mockito.ArgumentCaptor: java.util.List getAllValues()>();

        $r43 = interfaceinvoke $r42.<java.util.List: java.lang.Object get(int)>(0);

        $r44 = (java.lang.Integer) $r43;

        $i3 = virtualinvoke $r44.<java.lang.Integer: int intValue()>();

        $l4 = (long) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l2, $l4);

        $r45 = r0.<ca.liang.PayRollArrayMockTest: ca.liang.Employee[] employees>;

        $r46 = $r45[1];

        $i5 = virtualinvoke $r46.<ca.liang.Employee: int getSalary()>();

        $l6 = (long) $i5;

        $r47 = virtualinvoke r4.<org.mockito.ArgumentCaptor: java.util.List getAllValues()>();

        $r48 = interfaceinvoke $r47.<java.util.List: java.lang.Object get(int)>(1);

        $r49 = (java.lang.Integer) $r48;

        $i7 = virtualinvoke $r49.<java.lang.Integer: int intValue()>();

        $l8 = (long) $i7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l6, $l8);

        return;
    }

    private void assertNumberOfPayments(int)
    {
        ca.liang.PayRollArrayMockTest r0;
        int i0, i1;
        ca.liang.PayRoll $r1;
        long $l2, $l3;

        r0 := @this: ca.liang.PayRollArrayMockTest;

        i0 := @parameter0: int;

        $r1 = r0.<ca.liang.PayRollArrayMockTest: ca.liang.PayRoll payRoll>;

        i1 = virtualinvoke $r1.<ca.liang.PayRoll: int monthlyPayment()>();

        $l3 = (long) i0;

        $l2 = (long) i1;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l3, $l2);

        return;
    }

    private ca.liang.Employee createTestEmployee(java.lang.String, java.lang.String, int)
    {
        ca.liang.PayRollArrayMockTest r0;
        java.lang.String r1, r2;
        int i0;
        ca.liang.Employee $r3;

        r0 := @this: ca.liang.PayRollArrayMockTest;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r3 = new ca.liang.Employee;

        specialinvoke $r3.<ca.liang.Employee: void <init>(java.lang.String,java.lang.String,int)>(r1, r2, i0);

        return $r3;
    }

    private ca.liang.Employee[] createEmployees()
    {
        ca.liang.PayRollArrayMockTest r0;
        ca.liang.Employee r1, r2;
        java.lang.Object $r3, $r4;
        ca.liang.Employee[] $r5;

        r0 := @this: ca.liang.PayRollArrayMockTest;

        $r3 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/Employee;");

        r1 = (ca.liang.Employee) $r3;

        $r4 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lca/liang/Employee;");

        r2 = (ca.liang.Employee) $r4;

        $r5 = newarray (ca.liang.Employee)[2];

        $r5[0] = r1;

        $r5[1] = r2;

        return $r5;
    }
}
